{
  "article_text": [
    "in this paper we consider the solution of complex symmetric shifted linear systems of the form @xmath1 where @xmath2 are nonsingular @xmath3-by-@xmath3 complex symmetric sparse matrices , i.e. , @xmath4 , with scalar shifts @xmath5 , @xmath6 is the @xmath3-by-@xmath3 identity matrix , and @xmath7 are complex vectors of length @xmath3 . the above systems",
    "arise in large - scale electronic structure simulations @xcite , and there is a strong need for the fast solution of the systems .    since the given shifted linear systems ( [ cs_sls ] ) are a set of sparse linear systems",
    ", it is natural to use krylov subspace methods , and moreover since the coefficient matrices are complex symmetric , one of the simplest ways to solve the shifted linear systems is applying ( preconditioned ) krylov subspace methods for solving complex symmetric linear systems such as the cocg method @xcite , the cocr method @xcite , and the qmr_sym method @xcite to all of the shifted linear systems ( [ cs_sls ] ) . on the other hand , denoting the @xmath8-dimensional krylov subspace with respect to @xmath9 and @xmath10 as @xmath11 , we observe that @xmath12 this implies that once basis vectors are generated for one of the krylov subspaces @xmath13 , these basis vectors can be used to solve all the shifted linear systems .",
    "in other words , there is no need to generate all krylov subspaces @xmath14 , and thus computational costs involving the basis generation , e.g. , matrix - vector multiplications , are saved . here",
    "we give a concrete example : if we apply the conjugate orthogonal conjugate gradient ( cocg ) method to all the linear systems ( [ cs_sls ] ) , then bases for @xmath14 are generated for @xmath15 .",
    "on the other hand , if we apply the cocg method to just one of the shifted linear systems ( [ cs_sls ] ) ( referred to as the `` @xmath16 '' ) , then the krylov basis vectors are generated from the seed system and these vectors are used to solve the rest of the shifted linear systems .",
    "based on the observation ( [ ks ] ) , the shifted cocg method @xcite has been recently proposed for solving complex symmetric shifted linear systems .",
    "the feature of the shifted cocg method is that the method performs cocg on a seed system and makes it possible to complete cocg for all shifted linear systems without further matrix - vector multiplications .",
    "the feature is completely different from some of the other well - known shifted linear solvers such as the shifted bicgstab(@xmath17 ) method @xcite or the restarted shifted gmres method @xcite since these perform bicgstab(@xmath17 ) ( or gmres ) on a seed system but a different method on the shifted linear systems in order to keep the residuals colinear .",
    "the feature of the shifted cocg method plays a very important role in the seed switching technique @xcite that avoids a minor problem of the shifted cocg method : one requires the choice of a seed system and an unsuitable choice may lead to the undesirable result that some shifted linear systems remain unsolved .",
    "there is another approach to solving the shifted linear systems ( [ cs_sls ] ) . that is the use of krylov subspace methods for non - hermitian shifted linear systems such as the shifted bicgstab(@xmath17 ) method @xcite , the shifted ( tf)qmr method @xcite , the restarted shifted fom method @xcite , and the restarted shifted gmres method @xcite , see also , e.g. , @xcite .",
    "we readily see that the relation ( [ ks ] ) holds not only for complex symmetric matrices but also for non - hermitian matrices , and these methods are based on the use of this shift - invariant relation .",
    "therefore , this can be a good approach .",
    "however , since these methods do not exploit the property of complex symmetric matrices , their computational costs can be more expensive than that of the shifted cocg method .",
    "in this paper we consider the shifted qmr_sym method that is a special case of the qmr method for non - hermitian shifted linear systems @xcite and clarify the most time consuming part of it for a large number of shifted linear systems .",
    "then , in order to reduce the cost , we propose a weighted quasi - minimal residual ( wqmr ) approach and propose a specific weight .",
    "we experimentally show the practical efficiency of the resulting algorithm , referred to as shifted qmr_sym(@xmath0 ) , when the number of shifted linear systems is large enough .",
    "the present paper is organized as follows : in the next section , shifted qmr_sym is described in order to specify the most time consuming part for a large number of shifted linear systems . in section 3 ,",
    "we propose a wqmr approach with a specific weight for reducing the cost of the most time consuming part .",
    "the resulting algorithm , shifted qmr_sym(@xmath0 ) , and its properties are given . in section 4 ,",
    "some results of numerical examples from electronic structure simulations are shown to see the performance of the shifted qmr_sym(@xmath0 ) method .",
    "finally , some concluding remarks are made in section 5 .    throughout this paper ,",
    "unless otherwise stated , all vectors and matrices are assumed to be complex .",
    "@xmath18 , @xmath19 , @xmath20 denote the complex conjugate , transpose , and hermitian transpose matrix of the matrix @xmath21 .",
    "@xmath22 denotes the @xmath23-norm written as @xmath24 , where @xmath23 is hermitian positive definite .",
    "in this section , the shifted qmr_sym method and its properties for solving complex symmetric shifted linear systems are introduced .    the qmr method for shifted linear systems",
    "was first formulated in @xcite for the case of a general non - hermitian matrix .",
    "therefore , by simplifying the non - hermitian lanczos process @xcite , as is known from other papers such as @xcite , a shifted simplified qmr method , shifted qmr_sym , is readily obtained for the case of a complex symmetric matrix . its algorithm is given next .",
    "+   + @xmath25 & & { \\hspace{-7mm}}{\\mbox{\\boldmath $ x$}}_{0}^{(\\ell)}={\\mbox{\\boldmath $ p$}}_{-1}^{(\\ell)}=        { \\mbox{\\boldmath $ p$}}_{0}^{(\\ell)}=\\mathbf{0 } , \\         { \\mbox{\\boldmath $ v$}}_{1}={\\mbox{\\boldmath $ b$}}/({\\mbox{\\boldmath $ b$}}^{\\textrm{\\scriptsize{t}}}{\\mbox{\\boldmath $ b$}})^{1/2},\\ g_1^{(\\ell)}=({\\mbox{\\boldmath $ b$}}^{\\textrm{\\scriptsize{t}}}{\\mbox{\\boldmath $ b$}})^{1/2},\\\\ & & { \\hspace{-7mm}}{\\textrm}{{\\bf for}}\\ n=1,2 , \\ldots\\ { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{(the complex symmetric lanczos process)}\\nonumber\\\\ & & { \\hspace{-7mm}}\\quad \\alpha_n = { \\mbox{\\boldmath $ v$}}_n^{\\textrm{\\scriptsize{t}}}a{\\mbox{\\boldmath $ v$}}_n ,                            \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}=          a{\\mbox{\\boldmath $ v$}}_n-\\alpha_n{\\mbox{\\boldmath $ v$}}_n-\\beta_{n-1}{\\mbox{\\boldmath $ v$}}_{n-1 } ,               \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\beta_{n } = ( \\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}^{\\textrm{\\scriptsize{t}}}\\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1})^{1/2 } ,                  \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad { \\mbox{\\boldmath $ v$}}_{n+1 } = \\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}/\\beta_{n } ,           \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad t_{n-1,n}^{(\\ell)}=\\beta_{n-1},\\ t_{n , n}^{(\\ell ) } = \\alpha_{n}+\\sigma_{\\ell},\\   t_{n+1,n}^{(\\ell)}=\\beta_{n } ,          \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{(solve least squares problems by givens rotations ) }                             \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad   { \\textrm}{{\\bf for}}\\ \\ell=1,2 , \\ldots , m\\ { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\qquad { \\textrm}{{\\bf if}}\\ \\|{\\mbox{\\boldmath $ r$}}_{n}^{(\\ell)}\\|_2/\\|{\\mbox{\\boldmath $ b$}}\\|_2 > \\epsilon,\\              { \\textrm}{{\\bf then}}\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\textrm}{{\\bf for}}\\ i=\\max\\{1,n-2\\ } , \\ldots , n-1\\                      { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\qquad \\qquad \\pmatrix {                  t_{i , n}^{(\\ell ) } \\cr                 t_{i+1,n}^{(\\ell ) } } = \\pmatrix {             c_{i}^{(\\ell ) }      & s_{i}^{(\\ell ) }   \\cr             -\\overline{s}_{i}^{(\\ell ) } & c_{i}^{(\\ell ) } } \\pmatrix {                 t_{i , n}^{(\\ell ) } \\cr                 t_{i+1,n}^{(\\ell ) } } ,       \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\textrm}{{\\bf end } }              \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad c_n^{(\\ell)}=\\frac{|t_{n , n}^{(\\ell)}|}{\\sqrt{|t_{n , n}^{(\\ell)}|^2+|t_{n+1,n}^{(\\ell)}|^2 } } , \\nonumber \\\\ & & { \\hspace{-7mm}}\\qquad   \\quad \\overline{s}_n^{(\\ell)}=\\frac{t_{n+1,n}^{(\\ell)}}{t_{n , n}^{(\\ell)}}c_n^{(\\ell ) } ,    \\nonumber \\\\   & & { \\hspace{-7mm}}\\qquad   \\quad   t_{n , n}^{(\\ell ) }   = c_n^{(\\ell)}t_{n , n}^{(\\ell)}+s_n^{(\\ell)}t_{n+1,n}^{(\\ell ) } ,   \\nonumber \\\\ & & { \\hspace{-7mm}}\\qquad   \\quad t_{n+1,n}^{(\\ell)}=0 ,                         \\nonumber \\\\ & & { \\hspace{-7mm}}\\qquad \\quad \\pmatrix {                  g_{n}^{(\\ell ) } \\cr                  g_{n+1}^{(\\ell ) } }   =   \\pmatrix {             c_{n}^{(\\ell ) }      & s_{n}^{(\\ell ) }   \\cr             -\\overline{s}_{n}^{(\\ell ) } & c_{n}^{(\\ell ) } } \\pmatrix {                 g_{n}^{(\\ell ) } \\cr                 0 } ,    \\nonumber\\\\     & & { \\hspace{-7mm}}\\qquad \\quad   { \\textrm}{(update approximate solutions $ { \\mbox{\\boldmath $ x$}}_n^{(\\ell)}$)}\\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\mbox{\\boldmath $ p$}}_{n}^{(\\ell)}= { \\mbox{\\boldmath $ v$}}_{n}-(t_{n-2,n}^{(\\ell)}/t_{n-2,n-2}^{(\\ell)}){\\mbox{\\boldmath $ p$}}_{n-2}^{(\\ell)}- ( t_{n-1,n}^{(\\ell)}/t_{n-1,n-1}^{(\\ell)}){\\mbox{\\boldmath $ p$}}_{n-1}^{(\\ell ) } , \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\mbox{\\boldmath $ x$}}_{n}^{(\\ell)}={\\mbox{\\boldmath $ x$}}_{n-1}^{(\\ell)}+(g_n^{(\\ell)}/t_{n , n}^{(\\ell)}){\\mbox{\\boldmath",
    "$ p$}}_n^{(\\ell ) } ,   \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\quad { \\textrm}{{\\bf end if } }        \\nonumber     \\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{{\\bf end } }                 \\nonumber     \\\\&&{\\hspace{-7mm}}\\qquad { \\textrm}{{\\bf if}}\\ \\|{\\mbox{\\boldmath $ r$}}_{n}^{(\\ell)}\\|_2/\\|{\\mbox{\\boldmath $ b$}}\\|_2\\le \\epsilon \\                { \\textrm}{for all}\\ \\ell,\\ { \\textrm}{{\\bf then } exit}.\\\\ & & { \\hspace{-7mm}}{\\textrm}{{\\bf end } }                       \\nonumber              \\end{aligned}\\ ] ] algorithm 2.1 can be regarded as a natural combination of the results given in @xcite .    in order to know that the numerical solution is accurate enough , one may need to compute the residual 2-norms . in that case",
    ", the following computation may be useful .",
    "the 2-norms of the @xmath8th residuals of the approximate solutions @xmath26 of the shifted qmr_sym method are given by @xmath27 where @xmath28 and @xmath29    proposition 2.1 is a result known to hold for the qmr method @xcite .",
    "therefore , it also holds for the above specialized variant .",
    "the rest of this section describes some special properties of the shifted qmr_sym method .",
    "let @xmath30 be real symmetric , @xmath31 be complex shifts , and @xmath32 .",
    "then the shifted qmr_sym method ( algorithm 2.1 ) enjoys the following properties :    * all matrix - vector multiplications can be done in real arithmetic ; * an approximate solution at @xmath8th iteration step for each @xmath17 has minimal residual 2-norms , i.e. , @xmath26 s are generated such that @xmath33 over @xmath34 ; * @xmath35    the above properties are known results since the properties have been proved for each individual shift .",
    "see @xcite for details .",
    "the properties of proposition 2.2 may be very useful for large - scale electronic structure simulations @xcite and a projection approach for eigenvalue problems @xcite since there are complex symmetric shifted linear systems to be solved efficiently under the assumption of proposition 2.2 .",
    "in this section we consider complex symmetric shifted linear systems with a large number of shifts",
    ". for such systems , say @xmath36 , the most time consuming part of algorithm 2.1 can be generating approximate solutions since the cost for the recurrences is @xmath37 per iteration step . in order to reduce the cost , in this section we propose a weighted quasi - minimal residual approach with a specific weight . in the next subsection",
    "we discuss the details of the approach . in subsection 3.2",
    "we give a specific weight to achieve the reduction of the cost .      before the formulation of a weighted quasi - minimal residual ( wqmr ) approach ,",
    "let us recall the complex symmetric lanczos process ( see , e.g. , algorithm 2.1 in @xcite ) .",
    "+   + @xmath38 the matrix form of algorithm 3.1 is known as follows : let @xmath39 and @xmath40 be the @xmath41 and @xmath42 tridiagonal matrices whose entries are recurrence coefficients of the complex symmetric lanczos process , which are given by @xmath43 and let @xmath44 be the @xmath45 matrix with the lanczos vectors as columns , i.e. , @xmath46 . then from algorithm 3.1",
    ", it follows that @xmath47 where @xmath48 .",
    "now we are ready to describe the wqmr approach .",
    "let @xmath26 be approximate solutions at the @xmath8th iteration step for the systems ( [ cs_sls ] ) , which are given by @xmath49 where @xmath50 .",
    "then , from the definition of residual vectors @xmath51 , the update formulas ( [ sol ] ) , and the matrix form of the complex symmetric lanczos process ( [ comp_sym_lanczos_mat ] ) , we readily obtain @xmath52 here , @xmath53 is the first unit vector written by @xmath53=@xmath54 and @xmath55 .",
    "it is natural to determine @xmath56 such that all residual 2-norms @xmath57 are minimized .",
    "however , this choice for @xmath56 is impractical due to large computational costs .",
    "hence , an alternative approach is given , i.e. , the vectors @xmath56 are determined by solving the following weighted least squares problems : @xmath58 where @xmath59 is an @xmath60-by-@xmath60 nonsingular matrix .",
    "thus @xmath61 can be used as a weight since it is hermitian positive definite .",
    "one of the simplest choices for @xmath59 is the identity matrix . in this case , from @xmath62 we have @xmath63 the vector that is minimized is called quasi - residual .",
    "algorithm 2.1 is obtained by solving ( [ wlsp_2norm ] ) using givens rotations , see , e.g. , @xcite .",
    "a slightly generalized choice proposed in @xcite is @xmath64 with @xmath65 for all @xmath66 .",
    "then , it follows that @xmath67 of various possible choices for @xmath68 , a natural one is @xmath69 since @xmath70 contains then the diagonal entries of the upper triangular matrix @xmath71 that is obtained by the @xmath72 factorization of @xmath73 . if we choose @xmath74 , where @xmath75 , then from ( [ qmr_residual ] ) and ( [ wlsp ] ) we have @xmath76 by solving the above weighted least squares problems , all residual 2-norms are minimized .",
    "hence @xmath77 is a rational choice . for each individual shift ,",
    "the resulting algorithm is the same as that in ( * ? ? ?",
    "* algorithm 3.2 ) .      in the previous subsection",
    ", we have described the wqmr approach and mentioned that the choice of the weight @xmath61 with @xmath62 leads to the shifted qmr_sym method ( algorithm 2.1 ) . under the assumption of proposition 2.2 ,",
    "the shifted qmr_sym method is ideal in the sense of faber - manteuffel s theorem @xcite since it enjoys minimal residual property and requires not long - term but short - term recurrences for updating approximate solutions , and thus one may think that there is no need to choose other possible weights .",
    "however , we will show in this subsection that even under the assumption of proposition 2.2 there is a practical weight for the wqmr approach .",
    "the motivation for the choice of the weight mainly comes from the freedom of the number @xmath78 of complex symmetric shifted linear systems .",
    "now we consider the computational costs of algorithm 2.1 for a large number of complex symmetric shifted linear systems , i.e. , @xmath79 . for the case",
    "@xmath79 we readily see from algorithm 2.1 that computing the recurrences for updating approximate solutions is the most time - consuming part due to a cost of @xmath37 per iteration step .",
    "hence we will now consider a weight to reduce the computational cost for the recurrences of @xmath26 . to achieve this",
    "we propose the following choice : @xmath80 where @xmath81 is an @xmath8-by-@xmath8 upper bidiagonal matrix of the form @xmath82 and @xmath83 is lower triangular and will be specified below .",
    "next we derive recurrence formulas for updating the approximate solutions @xmath26 . from ( [ wlsp ] ) with the choice @xmath84 of ( [ bidiagonal_weight ] ) it follows that @xmath85 from the above least squares problems we readily see that @xmath86 . hence it follows from ( [ sol ] ) and using @xmath87 that we have the following coupled two - term recurrence relations : @xmath88 the cost per iteration is now @xmath89 . substituting @xmath90 into the above recurrences , we have the even more efficient recurrence formulas .",
    "@xmath91 by this reformulation , the cost becomes @xmath92 .",
    "next , let us consider a choice for @xmath93 satisfying ( [ bidiagonal_weight ] ) .",
    "let @xmath94 be an @xmath8-by-@xmath8 matrix for the form @xmath95 and let @xmath96 be tridiagonal .",
    "then , by determining @xmath97 such that the @xmath98 entry of the matrix @xmath99 is zero , we can fulfill ( [ bidiagonal_weight ] ) in the following way : @xmath100 from the above we see that @xmath101 , and thus @xmath93 and @xmath102 are related by @xmath103 where @xmath104 from the above we readily see that the matrices @xmath93 are lower triangular with all 1 s on the diagonals , and this property will be used for the proof of proposition 3.1 given later .",
    "the shifted qmr_sym method with the weight @xmath105 is referred to as shifted qmr_sym(@xmath0 ) .",
    "its algorithm is given next .",
    "+   +   + @xmath25 & & { \\hspace{-7mm}}{\\mbox{\\boldmath $ x$}}_{0}^{(\\ell)}={\\mbox{\\boldmath $ p$}}_{-1}^{(\\ell)}=        { \\mbox{\\boldmath $ p$}}_{0}^{(\\ell)}=\\mathbf{0 } , \\         { \\mbox{\\boldmath $ v$}}_{1}={\\mbox{\\boldmath $ b$}}/({\\mbox{\\boldmath $ b$}}^{\\textrm{\\scriptsize{t}}}{\\mbox{\\boldmath $ b$}})^{1/2},\\ \\widetilde{g}_1^{(\\ell)}=({\\mbox{\\boldmath $ b$}}^{\\textrm{\\scriptsize{t}}}{\\mbox{\\boldmath $ b$}})^{1/2},\\\\ & & { \\hspace{-7mm}}{\\textrm}{{\\bf for}}\\ n=1,2 , \\ldots\\ { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{(the complex symmetric lanczos process)}\\nonumber\\\\ & & { \\hspace{-7mm}}\\quad \\alpha_n = { \\mbox{\\boldmath $ v$}}_n^{\\textrm{\\scriptsize{t}}}a{\\mbox{\\boldmath $ v$}}_n ,                            \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}=          a{\\mbox{\\boldmath $ v$}}_n-\\alpha_n{\\mbox{\\boldmath $ v$}}_n-\\beta_{n-1}{\\mbox{\\boldmath $ v$}}_{n-1 } ,               \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\beta_{n } = ( \\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}^{\\textrm{\\scriptsize{t}}}\\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1})^{1/2 } ,                   \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad { \\mbox{\\boldmath $ v$}}_{n+1 } =",
    "\\widetilde{{\\mbox{\\boldmath $ v$}}}_{n+1}/\\beta_{n } ,           \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad t_{n-1,n}^{(\\ell)}=\\beta_{n-1},\\ t_{n , n}^{(\\ell ) } = \\alpha_{n}+\\sigma_{\\ell},\\   t_{n+1,n}^{(\\ell)}=\\beta_{n } ,          \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{(solve weighted least squares problems ) }                             \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad   { \\textrm}{{\\bf for}}\\ \\ell=1,2 , \\ldots , m\\ { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\qquad { \\textrm}{{\\bf if}}\\ \\|{\\mbox{\\boldmath $ r$}}_{n}^{(\\ell)}\\|_2/\\|{\\mbox{\\boldmath $ b$}}\\|_2 > \\epsilon,\\              { \\textrm}{{\\bf then}}\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\textrm}{{\\bf for}}\\ i=\\max\\{1,n-1\\ } , \\ldots , n-1\\                      { \\textrm}{{\\bf do:}}\\\\ & & { \\hspace{-7mm}}\\qquad \\qquad t_{i+1,n}^{(\\ell ) } =   f_{i}^{(\\ell ) } t_{i , n}^{(\\ell ) } +    t_{i+1,n}^{(\\ell ) } ,    \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\textrm}{{\\bf end } }              \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad   \\quad f_n^{(\\ell)}=-\\frac{t_{n+1,n}^{(\\ell)}}{t_{n , n}^{(\\ell ) } } ,    \\nonumber \\\\     & & { \\hspace{-7mm}}\\qquad   \\quad t_{n+1,n}^{(\\ell)}=0 ,                         \\nonumber \\\\ & & { \\hspace{-7mm}}\\qquad \\quad   \\widetilde{g}_{n+1}^{(\\ell ) } = f_{n}^{(\\ell)}\\widetilde{g}_{n}^{(\\ell ) } ,   \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad   { \\textrm}{(update approximate solutions $ { \\mbox{\\boldmath $ x$}}_n^{(\\ell)}$)}\\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\mbox{\\boldmath $ p$}}_{n}^{(\\ell)}= { \\mbox{\\boldmath $ v$}}_{n}-(t_{n-1,n}^{(\\ell)}/t_{n-1,n-1}^{(\\ell)}){\\mbox{\\boldmath $ p$}}_{n-1}^{(\\ell ) } , \\nonumber\\\\ & & { \\hspace{-7mm}}\\qquad \\quad { \\mbox{\\boldmath $ x$}}_{n}^{(\\ell)}={\\mbox{\\boldmath $ x$}}_{n-1}^{(\\ell)}+(\\widetilde{g}_n^{(\\ell)}/t_{n , n}^{(\\ell)}){\\mbox{\\boldmath",
    "$ p$}}_n^{(\\ell ) } ,   \\nonumber \\\\ & & { \\hspace{-7mm}}\\quad \\quad { \\textrm}{{\\bf end if } }        \\nonumber     \\\\ & & { \\hspace{-7mm}}\\quad { \\textrm}{{\\bf end } }                 \\nonumber     \\\\&&{\\hspace{-7mm}}\\qquad { \\textrm}{{\\bf if}}\\ \\|{\\mbox{\\boldmath $ r$}}_{n}^{(\\ell)}\\|_2 / \\|{\\mbox{\\boldmath $ b$}}\\|_2\\le \\epsilon \\",
    "{ \\textrm}{for all}\\ \\ell,\\ { \\textrm}{{\\bf then } exit}.\\\\ & & { \\hspace{-7mm}}{\\textrm}{{\\bf end } }                       \\nonumber              \\end{aligned}\\ ] ] similar to proposition 2.1 , there is an efficient way to evaluate residual 2-norms as follows :    the @xmath8th residual 2-norms of the approximate solutions @xmath26 for the shifted qmr_sym(@xmath0 ) method are given by @xmath106    _ proof_. the proof is similar to that of proposition 2.1 .",
    "it follows from ( [ qmr_residual ] ) , ( [ bidiagonal_weight ] ) , ( [ wlsp_b ] ) , and recalling @xmath86 that we have @xmath107 from ( [ f ] ) and ( [ fn ] ) @xmath93 is a lower triangular matrix with all 1 s on the diagonals .",
    "thus , @xmath108 is also a lower triangular matrix with all 1 s on the diagonals .",
    "it follows that @xmath109 , and thus we have @xmath110 , which concludes the proof .",
    "when we solve a large number of shifted systems , the computational cost of the residual 2-norms for the shifted qmr_sym(@xmath0 ) method is much cheaper than the that for the shifted qmr_sym method since the former cost is of order @xmath3 and the latter is of order @xmath111 per iteration step .    observing algorithms of the shifted qmr_sym and the shifted qmr_sym(@xmath0 ) methods",
    ", we see that the work for the weighted least squares problems and for updating approximate solutions in the shifted qmr_sym(@xmath0 ) method is lower than that in the shifted qmr_sym method . for the case",
    "@xmath36 , the most time - consuming part is updating the approximate solutions . in this case , the shifted qmr_sym(@xmath0 ) method may be more efficient than the shifted qmr_sym method since the shifted qmr_sym(@xmath0 ) method requires @xmath92 operations per iteration step for the update while the shifted qmr_sym method needs @xmath37 operations",
    ". this difference will be clearer when we use the results of propositions 2.1 and 3.1 as stopping criterion .",
    "on the other hand , in terms of number of iterations , under a certain assumption , the convergence of the shifted qmr_sym(@xmath0 ) method is worse than that of the shifted qmr_sym method but not worse than that of the shifted cocg method , as described by the following proposition :    under the assumption of proposition 2.2 , the shifted qmr_sy + m(@xmath0 ) method ( algorithm 3.2 ) enjoys the following properties :    * all matrix - vector multiplications can be done in real arithmetic ; * if breakdown does not occur and each matrix @xmath112is nonsingular , then @xmath113 , where the superscripts sq(@xmath0 ) , scocg , and sq are short for shifted qmr_sym(@xmath0 ) , shifted cocg , and shifted qmr_sym , respectively ; * @xmath114    _ proof_. the proof of ( @xmath6 ) is the same as that of proposition 2.2 , and is based on the fact that under the assumption the complex symmetric lanczos process generates real basis vectors .",
    "next , we give a proof of ( @xmath115 ) .",
    "the @xmath8th residuals of the shifted cocg method @xcite belong to @xmath116 .",
    "hence , each @xmath117 can be written as @xmath118 , where @xmath44 is the same matrix as in ( [ comp_sym_lanczos_mat ] ) since each @xmath117 is orthogonal to each subspace @xmath119\\{=@xmath120 , i.e. , @xmath121 , we have @xmath122 , and thus it follows from ( [ comp_sym_lanczos_mat ] ) that we have the relation @xmath123 , where @xmath124 .",
    "since the shifted qmr_sym(@xmath0 ) method has the form ( [ qmr_residual ] ) , it is sufficient to show that @xmath125 . from ( [ wlsp_b ] ) and ( [ relation_l ] ) it follows that @xmath126l_{n+1}^{(\\ell)}[{\\mbox{\\boldmath $ e$}}_1^{\\textrm{\\scriptsize{t}}}| 0]^{\\textrm{\\scriptsize{t}}}=g_1(b_n^{(\\ell)})^{-1}l_{n}^{(\\ell)}{\\mbox{\\boldmath $ e$}}_1=g_1\\{(l_{n}^{(\\ell)})^{-1}b_n^{(\\ell)}\\}^{-1 } { \\mbox{\\boldmath $ e$}}_1.$ ] since from ( [ fn ] ) and ( [ relation_l ] ) we can readily confirm the relation @xmath127",
    ", we have @xmath128 which is the same as @xmath129 the inequality in ( @xmath115 ) follows from proposition 2.2 since under the given assumption the shifted qmr_sym method enjoys the minimal residual property .",
    "finally , we give a proof of ( @xmath130 ) .",
    "if follows from the proof of ( @xmath6 ) that @xmath131 for all @xmath66 .",
    "thus from proposition 3.1 we have @xmath132    in the property ( @xmath133 ) of proposition 3.2 , breakdown may occur due to the choice ( [ f ] ) of the weighted least squares problems .    from proposition 3.2",
    "we see that in terms of the number of iteration steps the shifted qmr_sym(@xmath0 ) method never converges faster than the shifted qmr_sym method but it converges at the same iteration step as the shifted cocg method does .",
    "since the efficiency of the shifted cocg method has been shown already and for the case @xmath36 the computational cost of the shifted qmr_sym@xmath134 method is much less than that of the shifted qmr_sym method , the shifted qmr_sym@xmath134 method can also be useful .",
    "this will be supported by some numerical examples in the next section .",
    "in this section , we report on some numerical examples with the shifted cocg method , the shifted qmr_sym method ( algorithm 2.1 ) , and the shifted qmr_sym(@xmath0 ) method ( algorithm 3.2 ) .",
    "we evaluate these methods in terms of computational time .",
    "all tests were performed on a workstation with a 2.6ghz amd opteron(tm ) processor 252 using double precision arithmetic .",
    "codes were written in fortran 77 and compiled with g77 -@xmath1353 . in all cases",
    "the stopping criterion was set as @xmath136 .",
    "+   + 3.1 .",
    "example 1 +   + the first problem comes from the electronic structure calculation of a bulk si(001 ) with 512 atoms in @xcite , which is written as follows : @xmath137 where @xmath138 , @xmath139 is a symmetric matrix with 139264 entries , @xmath140 , and @xmath141 .",
    "since the shifted cocg method requires the choice of a seed system , we have chosen the optimal seed ( @xmath142 ) in this problem ; otherwise some linear systems will remain unsolved .    figure 4.1 shows the number of iterations of each method to solve the @xmath17th shifted linear systems .",
    "for example , in fig .",
    "4.1 , the number of iterations for the shifted cocg method at @xmath143 is 150 , which means the shifted cocg method required 150 iterations to obtain the ( approximate ) solutions of the 600th shifted linear system , i.e. , @xmath144 .    )",
    "method versus the serial number of the shifted linear systems . ]     of the relative residual 2-norms versus the number of iterations of the shifted cocg method , the shifted qmr_sym method , and the shifted qmr_sym(@xmath0 ) method for the shifted linear system with @xmath145 . ]    from fig .",
    "4.1 we make three observations : first , the three methods required almost the same number of iterations at each @xmath17 ; second , in terms of number of iterations , the shifted qmr_sym method often converged slightly faster than the other two methods .",
    "this phenomenon is closely related to proposition 2.2 , which will become clearer later ; third , for each method the required number of iterations depends highly on the shift parameters @xmath146 .",
    "this result may come from varying eigenvalues of the coefficient matrices @xmath147 since if we choose @xmath146 close to an eigenvalue of @xmath148 , then @xmath147 is close to singular .",
    "conversely , from the shape of fig .",
    "4.1 one may obtain a partial distribution of eigenvalues of @xmath148 .",
    "one of the residual 2-norm histories for the three methods is given in fig .",
    "4.2 . from fig .",
    "4.2 we see that the relative residual 2-norm of the shifted qmr_sym method decreases monotonically and at every iteration step the norm is less than those of the other two methods .",
    "hence we can say that the property @xmath149 of proposition 2.2 is experimentally supported by this history .",
    "we make another observation in the histories of the shifted cocg method and the shifted qmr_sym(@xmath0 ) method : during the first about fifty iterations , the two methods show the same histories . after that",
    "their histories varies gradually .",
    "hence we see that the property @xmath149 of proposition 3.2 is also experimentally supported by these histories .",
    "each computational time of the three methods is given in fig .",
    "4.3 , where the horizontal axis denotes the number @xmath78 of shifted linear systems that are solved .",
    "for example , in fig .",
    "4.3 , the computational time of the shifted cocg method at @xmath150 is about 0.76 [ sec . ] , which means that it required about 0.76 [ sec . ] to solve the shifted linear systems : @xmath151 . from fig .",
    "4.3 we see that as the number @xmath78 grows larger , the shifted qmr_sym method required more cpu time than the other two methods . on the other hand , the shifted qmr_sym(@xmath0 )",
    "method required almost the same cpu time as the shifted cocg method .",
    "this phenomena can be attributed to the computational costs of updating approximate solutions for each method since there are three facts : first , we know from fig .",
    "4.1 that the three methods required almost the same iterations ; second , the shifted qmr_sym(@xmath0 ) method requires almost the same computational costs as the shifted cocg method , while the shifted qmr_sym method tends to require more computational costs per iteration than the other two methods ; third , for large @xmath78 , updating approximate solutions is one of the most time - consuming parts . the second and the third facts have been discussed already in the previous two sections .    in fig .",
    "4.3 we can see little about the properties of the three methods for small @xmath17 .",
    "we therefore show the ratio of each computational time to the computational time of the shifted cocg method in fig .",
    "we see from fig .",
    "4.4 that in terms of the ratio of cpu times the shifted qmr_sym method and the shifted qmr_sym(@xmath0 ) method converged much faster than the shifted cocg method when the number of shifted linear systems is small , say , @xmath152 .",
    "this can be explained in the following way : for small @xmath78 , updating approximate solutions does not affect the cpu time so much .",
    "other operations such as matrix - vector multiplications are now the most time - consuming parts since the three methods required almost the same number of iterations , see fig .  4.1 . from proposition 2.2",
    "@xmath153 and proposition 3.2 @xmath153 we know that in this case the shifted qmr_sym method and the shifted qmr_sym(@xmath0 ) method require real matrix - real vector multiplications . on the other hand ,",
    "the shifted cocg method requires real matrix - complex vector multiplications .",
    "moreover , dot products and vector additions of the complex symmetric lanczos process used in the shifted qmr_sym method and the shifted qmr_sym(@xmath0 ) method can be done in real arithmetic .",
    "hence , the two methods converged much faster than the shifted cocg method .",
    "+   + 3.2 .",
    "example 2 +   + the second problem comes from the electronic structure calculation of bulk fcc cu with 1568 atoms in @xcite and is given as follows : @xmath154 where @xmath155 , @xmath156 is a symmetric matrix with 3924704 entries , @xmath140 , and @xmath157 .",
    "each computational time of the three methods for solving the @xmath78 shifted linear systems is shown in fig .",
    "4.5 , where horizontal and vertical axes are the same as those used in fig  4.3 .",
    "the ratio of each computational time to the computational time of the shifted cocg method is shown in fig .",
    "4.6 . from figs .",
    "4.5 , 4.6 we see that the size of this matrix is about 7 times larger than before , and the three methods show similar tendencies to those seen in the previous example .",
    "in this paper , the shifted qmr_sym method was described as a specialization of the qmr method for general non - hermitian shifted linear systems @xcite .",
    "the method has an advantage over the shifted cocg method in that there is no need to choose a suitable seed system .",
    "on the other hand , we have found that for a large number of shifted linear systems , the most time - consuming part of the shifted qmr_sym method is updating approximate solutions , and this cost is higher than that of the shifted cocg method .",
    "we therefore have proposed the weighted quasi - minimal residual approach with a specific weight for reducing the computational cost for updating approximate solutions .",
    "the resulting method , shifted qmr_sym(@xmath0 ) , also does not require to choose a suitable seed system , which is an advantage over the shifted cocg method . from numerical experiments",
    "we have learned that shifted qmr_sym and qmr_sym(@xmath0 ) are competitive in comparison to the shifted cocg method . in particular , qmr_sym(@xmath0 ) can be the method of choice for solving complex symmetric shifted linear systems with a large number of shifts that arise from large - scale electronic structure theory . in future work , numerical tests for general complex",
    "symmetric shifted linear systems will be done to evaluate the performance of the method .",
    "we wish to express our gratitude to roland w. freund ( uc davis ) for his fruitful comments during the conference at harrachov in 2007 .",
    "we are grateful to an anonymous referee for useful comments that substantially enhanced the quality of this paper .",
    "finally , we would like to thank martin h. gutknecht ( eth zurich ) for careful reading of the manuscript .",
    "+   +                                , _ a numerical method for calculating the green s function arising from electronic structure theory _ , in : frontiers of computational science , eds .",
    "y. kaneda , h. kawamura and m. sasai , springer - verlag , berlin / heidelberg , 2007 , pp .",
    "189 - 195 ."
  ],
  "abstract_text": [
    "<S> we consider the solution of complex symmetric shifted linear systems . </S>",
    "<S> such systems arise in large - scale electronic structure simulations and there is a strong need for the fast solution of the systems . with the aim of solving the systems efficiently , we consider a special case of the qmr method for non - hermitian shifted linear systems and propose its weighted quasi - minimal residual approach . a numerical algorithm , referred to as shifted qmr_sym(@xmath0 ) , </S>",
    "<S> is given by the choice of a particularly cost - effective weight . </S>",
    "<S> numerical examples are presented to show the performance of the shifted qmr_sym(@xmath0 ) method . </S>"
  ]
}