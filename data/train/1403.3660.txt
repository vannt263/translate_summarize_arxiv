{
  "article_text": [
    "the cramer - shoup cryptosystem is a generalization of elgamal s protocol .",
    "it is provably secure against adaptive chosen ciphertext attack ( cca ) .",
    "moreover , the proof of security relies only on a standard intractability assumption , namely , the hardness of the diffie - hellman decision problem in the underlying group ( see @xcite , @xcite ) , and a hash function @xmath0 whose output can be interpreted as a number in @xmath1 ( where @xmath2 is a large prime number ) .",
    "an additional requirement is that it should be hard to find collisions in @xmath0 .",
    "in fact , with a fairly minor increase in cost and complexity , one can eliminate @xmath0 altogether .      a formal definition of security against active attacks evolved in a sequence of papers by naor and yung , rackoff and simon , dolev , dwork and naor .",
    "the notion is called _ chosen ciphertext security _ or , equivalently , _",
    "non - malleability_. the intuitive thrust of this definition is that even if an adversary can get arbitrary ciphertexts of his choice decrypted , he still gets no partial information about other encrypted messages . for more information",
    "see @xcite , @xcite .",
    "we define the following game , which is played by the adversary .",
    "first , we run the enryption scheme s key generation algorithm , with the necessary input parameters .",
    "( in particular , one can input a binary string in @xmath3 , which describes the group @xmath4 on which the algorithm is based . )",
    "the adversary is then allowed to make arbitrary queries to the decryption oracle , decrypting ciphertexts which he has chosen .",
    "the adversary then chooses two messages , @xmath5 and @xmath6 , and submits these to the encryption oracle .",
    "the encryption oracle chooses a random bit @xmath7 and encrypts @xmath8 . the adversary is then given the ciphertext , without knowledge of @xmath9 .    upon receipt of the ciphertext from the encryption oracle ,",
    "the adversary is allowed to continue querying the decryption oracle .",
    "of course the adversary is not allowed to submit the output ciphertext of the encryption oracle .    finally ,",
    "at the end of the game , the adversary must output @xmath10 , which is the adversary s best guess as to the value of @xmath9 .",
    "define the probability that @xmath11 to be @xmath12 , @xmath13 is called the adversary s advantage , and @xmath14 .",
    "we say the cryptosystem is cca-2 secure if the advantage of any polynomial - time adversary is negligible .",
    "note that a negligible function is a function that grows slower than any inverse polynomial , @xmath15 , for any particular constant @xmath16 and large enough @xmath17 .",
    "+ * secret key : * random @xmath18 + * public key : *    group @xmath4 ;  @xmath19 in @xmath4 + @xmath20 + @xmath21 .",
    "+    * encryption * of @xmath22 :  @xmath23 , where    @xmath24 , where @xmath25 is random , and + @xmath26    * decryption * of @xmath27 :    if @xmath28 , where @xmath29 + then @xmath30 + else  reject \"    @xcite [ shoup ] the cramer - shoup cryptosystem is secure against adaptive chosen ciphertext attack assuming that ( 1 ) the hash function @xmath0 is chosen from a universal one - way family , and ( 2 ) the diffie - hellman decision problem is hard in the group @xmath4 .",
    "in @xcite , the authors proposed a public key exchange using matrices over group rings .",
    "they offer a public key exchange protocol in the spirit of diffie - hellman , but they use matrices over a group ring of a ( rather small ) symmetric group as the platform and discuss security of this scheme by addressing the decision diffie - hellman ( ddh ) and computational diffie - hellman ( cdh ) problems for that platform .",
    "+ here we propose to use a similar platform and show that a scheme similar to the cramer - shoup scheme is cca-2 secure .",
    "our protocol is as follows :    * secret key : * random @xmath31 + * public key : *    @xmath32 non - identity matrices @xmath33)$ ] such that @xmath34 is invertible and @xmath35 + @xmath36 + @xmath37 .",
    "+    * encryption * of a message @xmath38 ) $ ] : @xmath39 , where    @xmath40 ,  @xmath41 is random , and + @xmath26    * decryption * of @xmath27 :    if @xmath28 , where @xmath29 + then @xmath42 ( note that @xmath43 is invertible since @xmath34 is chosen to be invertible . ) + else  reject \"    _ remarks _ : @xmath34 must always be chosen to be an invertible matrix , whereas @xmath44 is just any matrix such that @xmath45 .",
    "one must also decide what group @xmath46 to use , i.e. , @xmath17 must be specified .",
    "we aim to show , by using theorem [ shoup ] , that if for invertible matrices over @xmath47 $ ] the ddh problem is hard , then the previously mentioned cyrptosystem is secure against adaptive chosen ciphertext attack .",
    "more formally ,    [ cca_mat]the cramer - shoup cryptosystem using the semigroup @xmath48 $ ] is secure against adaptive chosen ciphertext attack assuming that ( 1 ) the hash function @xmath0 is chosen from a universal one - way family , and ( 2 ) the decision diffie - hellman problem is hard in the group @xmath4",
    ".      1 .   given an invertible matrix @xmath49 $ ] and random integers @xmath50 and @xmath51 , it is not possible to distinguish between the distributions generated by @xmath52 and @xmath53 .",
    "2 .   given an invertible matrix @xmath49 $ ] and a random integer @xmath54 , it is not possible to extract information about @xmath54 from @xmath55 and @xmath56 . in other words ,",
    "the distributions generated by a random matrix @xmath57 and @xmath55 are indistinguishable .",
    "we offer the following two experiments as evidence for the plausibility of the above facts . for these tests we used invertible matrices over the group ring",
    "@xmath47 $ ] . for",
    "the first we chose a random invertible matrix @xmath56 ( see section [ inv_mat ] ) and random integers @xmath54 , @xmath9 and @xmath58 .",
    "we choose @xmath54 and @xmath9 in the interval @xmath59 and @xmath16 in the interval @xmath60 so that @xmath61 and @xmath16 were roughly of the same size . for each pair of resulting matrices @xmath62 and @xmath63 we counted the frequency of elements of @xmath64 appearing in each entry .    repeating this @xmath65 times for randomly chosen @xmath54 , @xmath9 and @xmath16",
    ", we obtained a frequency distribution of elements of the group ring in each entry of the two matrices . from this we created the qq - plots for each of the @xmath66 matrix entries .",
    "qq - plots are a quick and easy way to test for identical distributions , in which case the plots should be straight lines .",
    "as we can see from figure [ ddh_fig ] , it appears that from the generated distributions it is not possible to distinguish dh pairs from non - dh pairs .      for verification of the second fact",
    ", we conducted a similar experiment , except in this case , for each of the @xmath65 draws we varied all parameters @xmath57 , @xmath56 and @xmath54 .",
    "we again generated qq - plots as shown in figure [ info_plot ] , and these show that no information about @xmath54 is leaked from publishing @xmath56 and @xmath55 .",
    "we are now ready to prove theorem [ cca_mat ] .",
    "the proof will proceed in a similar fashion as cramer - shoup s original proof .",
    "we will begin by constructing an algorithm @xmath67 to attack the ddh assumption .",
    "this algorithm relies on a probabilistic polynomial time adversary @xmath68 attacking our scheme , which succeeds with probability @xmath69 , @xmath70 .",
    "denote by @xmath71 the set of valid diffie - hellman tuples @xmath72 , and by @xmath73 the set of all random tuples @xmath74 .",
    "then the algorithm is constructed as follows :    * @xmath67 receives input @xmath75 * pick @xmath76 and a universal one - way hash function @xmath0 * the adversary @xmath68 receives the public key , pk , which is @xmath77 * the adversary picks two messages @xmath78 and publishes them * @xmath67 picks @xmath79 and passes to @xmath68 @xmath80 where @xmath81 * with this information @xmath68 tries to determine @xmath9 and returns its guess @xmath82 * if @xmath83 return `` dh '' , else `` r ''          * claim 3 : * @xmath88 . since @xmath89 , the proof of this claim relies on the proof of two pieces",
    "we need to show that for all decryption queries where @xmath90 and @xmath91 with @xmath92 , the decryption verification fails with non - negligible probability .",
    "in addition to this , we must also show that assuming all invalid decryptions fail , the adversary a does not learn any additional information about @xmath93 .",
    "we first start with the latter piece . if all invalid decryptions fail , then the only additional information a receives is when valid decryptions are performed .",
    "thus , at the onset of the attack @xmath68 only has information available that is given to him from pk , namely @xmath94 .",
    "if @xmath68 submits a valid ciphertext @xmath95 , where @xmath96 , then @xmath68 obtains that @xmath97 .",
    "however , based on the results above , if we denote @xmath98 , then @xmath99 and the distributions of any random matrix @xmath57 and @xmath100 generated by @xmath101 are indistinguishable , hence nothing is revealed about @xmath93 .",
    "furthermore , from the encryption information passed to @xmath68 , the only additional information @xmath68 has is @xmath102 , which leaves him with obtaining information from @xmath103 and @xmath104 , i.e. solving a diffie - helmann problem , which we assumed was difficult in our scheme setup .",
    "* case 2 : * if @xmath110 but @xmath111 , then this means that @xmath68 has found a collision in @xmath0 .",
    "but we assumed @xmath0 was collision resistant , and since @xmath68 runs in polynomial time , this can only happen with negligible probability .",
    "thus we have shown from claim 3 that the adversary @xmath68 is unable to correctly determine @xmath9 given a random tuple , which we saw is equivalent to our algorithm not being able to distinguish a random tuple from a dh tuple when given a random tuple .",
    "this together with claim 1 shows that our algorithm can not distinguish between tuples no matter what the input was . and",
    "finally , from claim 2 , we get that the adversary is unable to attack our scheme with an adaptive chosen ciphertext attack .",
    "[ [ parameters - for - the - cramer - shoup - like - scheme - using - matrices - over - group - rings ] ] parameters for the cramer - shoup - like scheme using matrices over group rings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        sampling invertible matrices can be done using various techniques .",
    "the first method is to construct a matrix which is a product of elementary matrices , @xmath120 where @xmath121 is any elementary matrix from @xmath122)$ ] .",
    "elementary matrices can be of one of the three types below . in the matrix @xmath123 , the element @xmath124 should be invertible in @xmath125 $ ]",
    "we can then easily compute @xmath127 as @xmath128 the drawback of generating an invertible matrix this way is that we do not have a good grasp of the randomness embedded in this process . in particular ,",
    "how large must @xmath17 be to generate a truly random matrix ?",
    "given that there are 3 different types of elementary matrices , does it matter in what order they are multiplied in and does the number of elementary matrices of each form matter",
    "? these are questions that have not been addressed and may influence the final invertible matrix generated in unknown ways .    here , instead of the previously mentioned method of sampling random matrices",
    ", we propose an alternative solution .",
    "we start with an already  somewhat random \" matrix , for which it is easy to compute the inverse .",
    "an example of such a matrix is a lower / upper triangular matrix , with invertible elements on the diagonal : @xmath129      we then propose to take a random product of such invertible upper and lower triangular matrices .",
    "since these matrices are more complex than elementary matrices , it seems reasonable to assume that we arrive at a more uniform distribution sooner than by simply using elementary matrices . in our experiments we used a product of 20 random matrices , where each term of the product was chosen randomly as either a random invertible upper or lower triangular matrix .    as mentioned previously , the benefits of this method are that inverses are easy to compute and that the chosen matrix already has a large degree of randomness built in .",
    "in particular , any element of @xmath125 $ ] can be used off the diagonal , and any invertible elements of the group ring can be used on the diagonal .",
    "these of course include elements such as @xmath131 $ ] , where @xmath132 and @xmath133 .",
    "finally , we note that the order of the group @xmath134 $ ] of invertible @xmath32 matrices over @xmath125 $ ] is at least @xmath135 . indeed ,",
    "if we only count invertible upper and lower triangular matrices that we described above , then we already have @xmath136 matrices .",
    "now that we have sampled an invertible matrix ( @xmath34 in our notation  see section [ protocol ] ) , we have to sample an arbitrary ( i.e. , not necessarily invertible ) matrix @xmath44 that would commute with @xmath34 .    given a matrix @xmath137 ,",
    "define @xmath138 , where @xmath139 are selected randomly . then clearly @xmath140 .",
    "a reasonable choice for @xmath141 is about 100 as this would yield @xmath142 choices for @xmath44 , which is a sufficiently large key space .",
    "as mentioned in the introduction of the cramer - shoup algorithm adapted to our group rings , we need to specify the value of @xmath17 for @xmath143 . based on experiments in our previous paper @xcite we suggest @xmath144 .",
    "this seemed a reasonable choice of exponent since it both allowed quick computations and ensured that the power a matrix was raised to could not be figured out by brute force methods alone .",
    "we also use a hash function @xmath0 in our algorithm as did cramer and shoup .",
    "the only requirement on @xmath0 is that it is drawn from a family of universal one - way hash functions .",
    "this is a less stringent requirement than to be _",
    "collision resistant_. the latter implies that it is infeasible for an adversary to find two different inputs @xmath145 and @xmath146 such that @xmath147 .",
    "a weaker notion of _ second preimage resistance _ implies that upon choosing an input @xmath145 , it is infeasible to find a different input @xmath146 such that @xmath147 .",
    "it should be noted that in their paper cramer and shoup also give details of their same algorithm without requiring the use of any hash functions .",
    "the modified algorithm is only slightly more complicated but relies on the same principles ."
  ],
  "abstract_text": [
    "<S> we propose a cryptosystem based on matrices over group rings and claim that it is secure against adaptive chosen ciphertext attack . </S>"
  ]
}