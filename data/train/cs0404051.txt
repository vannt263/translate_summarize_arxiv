{
  "article_text": [
    "since its introduction , the action description language @xmath2 has served as a platform to study several aspects that arise when we try to formalize theories of actions in logic @xcite .",
    "@xmath2 was designed as a minimal core of a high level language to represent and reason about actions and their effects .",
    "domain descriptions written in this language have direct translations into extended logic programs .",
    "extensions to @xmath2 have been developed to study and reason about the concurrent execution of actions @xcite , the non - deterministic effects of some actions @xcite and to study many instances of the qualification and ramification problems @xcite , @xcite , @xcite .    in this paper",
    "we propose a new action description language called @xmath3@xmath4 .",
    "@xmath3@xmath5 is a minimal extension of @xmath2 to handle _ sensing _ actions .",
    "a sensing action is an action that does not have any effect in the world .",
    "the effect is only in the perception of the reasoning agent about the world .",
    "the execution of a sensing action will increase the agent s knowledge about the current state of the world .",
    "take for example a deactivated agent placed inside a room .",
    "the agent has duties to carry out and will be activated by a timer .",
    "let us assume the agent is always placed facing the door .",
    "the agent , once activated , may become damaged if it attempts to leave the room and the door is closed . before the agent tries to leave the room it needs to perform some act of sensing in order to determine whether the door is opened or not .",
    "the agent has incomplete knowledge with respect to the door .",
    "a sensing action such as _ looking at the door _ would provide information to the agent concerning the status of the door .",
    "in our simple model there will be two sources of knowledge available to an agent : initial knowledge , i.e. , knowledge provided to the agent at initialization time , and knowledge gained from sensing actions .",
    "we will assume that the agent is acting in isolation .",
    "thus , once an agent has gained knowledge about its world , only its actions or limitations of its reasoning mechanism ( such as limited memory ) could make the agent lose knowledge .",
    "we will assume an ideal agent and expect that only actions can remove knowledge .",
    "an action can cause the loss of knowledge if its effect is non - deterministic . take for example the action of tossing a coin .",
    "we know it will land with either heads showing or with tails showing , but exactly which can not be predicted .",
    "non - deterministic actions and sensing actions have opposite effects on an agent s knowledge .",
    "the main contributions of this paper are :    * the language @xmath0 , which incorporates sensing and non - deterministic actions . * a query sub - language with complex plans that allow hypothetical reasoning in the presence of incomplete information .",
    "these complex plans include conditionals ( if - then - else ) and routines ( while - do ) . * a sound and complete translation of domain descriptions written in @xmath0 into epistemic logic programs .    the rest of this paper is organized as follows . in section [ sec : domain ] , we start with the syntax and semantics of domains with deterministic and sensing actions only .",
    "section  [ sec : queriesi ] presents the query sub - language of @xmath0 with conditional plans . in section  [ sec : non - det ] , the language is extended to include non - deterministic actions and section  [ sec : queries ] adds loops to the query language .",
    "section  [ elp ] gives an outline of epistemic logic programs as they pertain to @xmath0 . in section  [ sec :",
    "translation ] , we present the translation of domains in @xmath0 into epistemic logic programs . in section",
    "[ sec : other - work ] , we discuss how our work relates to other work in the field",
    ". section  [ sec : future ] presents a few directions for future work and concluding remarks .",
    "the language of @xmath6@xmath4 consists of two non - empty disjoint sets of symbols @xmath7 , @xmath8 .",
    "they are called _ fluents _ , and _ actions_. as in @xmath2",
    ", fluents are statements or observations about the world .",
    "the set @xmath8 consists of two disjoint sets of actions , _ sensing _ actions and _ non - sensing _ actions .",
    "actions will be generically denoted by @xmath9 , possibly indexed .",
    "fluent literal _ is a fluent or a fluent preceded by a @xmath10 sign .",
    "a fluent literal is negative when preceded by @xmath10 and is positive otherwise .",
    "fluent literals will be denoted by @xmath11 , @xmath12 and @xmath13 possibly indexed .",
    "there are three kinds of propositions in @xmath0 , _ object effect _ propositions , _ value _ propositions and _ non - deterministic effect _ propositions .",
    "we discuss non - deterministic effect propositions in section  [ sec : non - det ] .",
    "object effect propositions are expressions of the form @xmath14 where @xmath9 is a non - sensing action , and @xmath11 and @xmath15 , with @xmath16 , are fluent literals .",
    "this expression intuitively means that in a situation where @xmath15 are true , the execution of @xmath9 causes @xmath11 to become true .    when @xmath17 in the preconditions of ( [ eq1 ] ) we will write the proposition as @xmath18 a _ value proposition _ is an expression of the form @xmath19 where @xmath11 denotes a fluent literal .",
    "value propositions describe the initial knowledge the agent has about the world .",
    "there are also _ knowledge _ laws .",
    "knowledge laws are expressions of the form @xmath20 where @xmath21 is a sensing action , @xmath11 is a fluent and @xmath15 are preconditions as in ( [ eq1 ] ) .",
    "intuitively this expression says that in a situation where @xmath15 are true the execution of @xmath21 causes the agent to realize the current value of @xmath11 in the world .",
    "we do not allow sensing actions to occur in any effect proposition .",
    "if @xmath17 in ( [ eq5 ] ) , we will write the knowledge law as @xmath22 at this point we should remark that we are assuming the agent may have incomplete but always correct knowledge about the world .",
    "propositions and laws in @xmath0 describe how the knowledge of the agent changes , but if these changes are the result of propositions like ( [ eq1 ] ) we assume that the effects in the world would be the same as if the world were in a state where @xmath15 are true , that is , there are not external entities that modify the world and the specification of the laws are correct and deterministic .",
    "[ domains - def ] a collection of the above propositions and laws is called a _",
    "domain description_. a domain description @xmath23 is _ simple _ if for any sensing action @xmath21 and any fluent @xmath11 there exists at most one knowledge law in @xmath23 of type ( [ eq5 ] ) .",
    "the following example illustrates how knowledge laws can be used to reason about actions .",
    "[ ex : bulb1 ] a robot is instructed to replace the bulb of a halogen lamp .",
    "if the lamp is on when the bulb is screwed in , the robot s circuits will get burned out from the heat of the halogen bulb , and it will not be able to complete the task . the robot will have to find a sequence of actions that will allow it to complete the task without burning out .",
    "we assume that the robot is already at the lamp .",
    "this is represented by the following domain description ,    @xmath24 it follows from @xmath25 that in the initial state the robot does not know the state of the switch in the lamp .",
    "hence , there does not exist a way to determine before hand what will be the result of the action @xmath26 .",
    "when the robot goes to carry out the action @xmath26 , it could end up in a resulting state in which either @xmath27 is true or in a state where it will be burned out and unable to complete the task . without knowing whether the switch is on or off",
    ", the robot will not be able to find a plan to accomplish its task .",
    "the robot must first check the state of the switch . after realizing whether the switch is on or off",
    ", it will take the appropriate actions to complete the task .",
    "the robot will need a knowledge law such as :    @xmath28 : @xmath29 @xmath30 @xmath31 @xmath32 @xmath33    after checking the switch the robot will _ know _ whether the switch is on or off .",
    "sensing gives the robot that extra knowledge it would need to accomplish the task without burning out and provides a branching point in its hypothetical reasoning .",
    "if the switch is on it will turn the switch and replace the bulb .",
    "if the switch is off it will directly replace the bulb .",
    "this conditional reasoning will enable the robot to show that there is a sequence of actions to accomplish the task .",
    "the semantics of @xmath0 must describe how an agent s knowledge changes according to the effects of actions defined by a domain description .",
    "we begin by presenting the structure of an agent s knowledge .",
    "we will represent the knowledge of an agent by a set of possibly incomplete worlds in which the agent believes it can be .",
    "we call these worlds _ situations _ and a collection of worlds an _",
    "epistemic state_. a situation , since it could be an incomplete description of the world , will be represented by a collection of sets of fluents .",
    "a set of fluents will be called a _",
    "state_. if a formula is true in an epistemic state of an agent ( to be defined later ) , by our assumption it means that the agent knows that the formula is true in the real world .",
    "epistemic states will also allow us to distinguish when the agent knows that the disjunction @xmath34 is true from when it either knows @xmath35 or knows @xmath36 .",
    "we will say that a fluent @xmath11 is true or holds in a state @xmath37 ( denoted by @xmath38 ) iff @xmath39 .",
    "a fluent @xmath11 does not hold in a state @xmath37 ( denoted by @xmath40 ) iff @xmath41 . @xmath42",
    "iff @xmath43 . for more complex formulas ,",
    "their truth value can be recursively defined as usual .",
    "a formula @xmath44 made of fluents is true in ( or modeled by ) a situation @xmath45 ( denoted by @xmath46 ) if the formula is true in every state in @xmath45 ; it is false if @xmath47 is true in every state @xmath45 .",
    "a formula is true in an epistemic state if is true in every situation in the epistemic state ; it is false if its negation is true .",
    "a situation is _ consistent _ if it is non - empty ; otherwise it is _",
    "inconsistent_. a situation is _ complete _ if it contains a single state ; otherwise it is _",
    "incomplete_. an epistemic state is inconsistent if it is empty or contains an inconsistent situation ; otherwise it is consistent .",
    "an epistemic state is complete if it contains only one complete situation .",
    "figure 1 shows two consistent epistemic states in which the fact `` _ ollie is wet _ '' ( represented by @xmath48 ) is known by agent a and agent b. in the epistemic state ( a ) , containing an incomplete situation , agent a does not have knowledge about the weather . in the other epistemic state ( b ) , containing two complete situations , agent b either knows it is raining or knows that it is not raining outside .",
    "recall that epistemic states will be used in the context of plans for hypothetical reasoning .",
    "that is , predicting properties if the plan were executed .",
    "thus , if an agent plans to execute a series of actions that takes it to the epistemic state ( a ) , it will not know how to dress if it needs to go outside and does not want to get wet . in the epistemic state ( b )",
    ", the agent will know how to proceed .",
    "[ fig : toknow ] = 5.0 in    _ interpretations _ for @xmath0 are transition functions that map pairs of actions and situations into situations .",
    "to define when an interpretation models a domain description , we will define an auxiliary function that interprets the effect of actions at the state level .",
    "we call this function a _ 0-interpretation_. _ 0-interpretations _ are functions that map actions and states into states . ] .",
    "a 0-interpretation @xmath49@xmath50 is a _ 0-model _ of a domain description @xmath23 iff for every state @xmath37    1 .   for a fluent @xmath11 of any effect proposition of the form ",
    "@xmath9 * causes * @xmath11 * if * @xmath15 \" in @xmath23 , the fluent @xmath11 holds in @xmath51 if its preconditions @xmath15 holds in @xmath37 , 2 .   for a fluent literal @xmath52 of any effect proposition of the form  @xmath9",
    "* causes * @xmath52 * if * @xmath15 \" in @xmath23 , the fluent @xmath11 does not hold in @xmath51 if its preconditions",
    "@xmath15 holds in @xmath37 , 3 .   for a fluent @xmath11 , if there are no effect propositions of the above types , then @xmath53 if and only if @xmath54 .",
    "before we define when an interpretation @xmath49 is a _ model _ of a domain description @xmath23 , we need the following definition that will let us interpret knowledge laws .",
    "the interest of the defintion will become clear after we explore the scenarion in example [ ex : door ] .",
    "[ def : comp ] let @xmath45 be a consistent situation , @xmath11 a fluent and @xmath44 a disjunction of conjunctions of fluent literals ( preconditions ) .",
    "a consistent situation @xmath55 is  @xmath56-_compatible _ \" with @xmath45 iff @xmath57 whenever @xmath11 is either true or false in @xmath45 .",
    "otherwise @xmath55 must satisfy one of the following conditions :    1 .",
    "@xmath58 is not true in @xmath59 2 .",
    "@xmath60 is true in @xmath61 3 .",
    "@xmath60 is true in @xmath62    [ ex : door ] let us return to the agent scenario from the introduction .",
    "imagine that currently the agent is deactivated in the room .",
    "the agent will be automatically activated by an internal clock .",
    "then it needs to find the door , leave the room , and perform some duties .",
    "when the agent is initially activated it will know nothing about its surroundings and will remain ignorant of its surroundings until it performs a sensing action .",
    "we will show how the conditions presented in definition [ def : comp ] are enough to represent the result of sensing .",
    "its only action is to @xmath63 .",
    "we assume the action consist of opening its  eyes \" and looking . this domain is represented below with only one knowledge law , @xmath64 this initial situation of complete ignorance",
    "is represented by the situation    \\{\\ { } , \\{@xmath65 } , \\{@xmath66 } , \\{@xmath67}}.    if the action @xmath63 is executed in the real world the agent may find that it is not facing the door and will not know whether the door is opened or not , this is represented by the situation    \\ { \\ { } , \\{@xmath65 } }",
    ".    another possibility could be that the agent was facing the door and after it is activated , it will know that it is facing the door and will also know that the door is not opened    \\ { \\{@xmath66 } } .",
    "still another possibility could be that the agent was facing the door and after being activated , it will learn that it is facing the door and that the door is opened    \\",
    "{ \\{@xmath68 } } .",
    "since the agent will be doing hypothetical reasoning ( i.e. planning ) it will have no way of knowing which situation it will be in until the action is actually executed .",
    "thus , the agent can only assume that it will be in one of the three situations , so when the agent analyzes what would be the consequences of executing @xmath63 it concludes that the result will take it to the epistemic state that consists of the following three situations .    1 .   \\",
    "{ \\ { } , \\{@xmath65 } } 2 .   \\ { \\{@xmath66 } } 3",
    ".   \\ { \\{@xmath68 } }",
    "each situation is @xmath69 .",
    "the first situation corresponds to the first case of definition [ def : comp ] .",
    "the agent knows it is not facing the door since @xmath66 is false in all states contained in the situation . the same can not be said for @xmath65 since in one state it is false and the other state it is true .",
    "this is to be expected since in this situation the agent is not facing the door , and it can not know if the door is opened or closed .",
    "the second situation corresponds to the second case of definition [ def : comp ] .",
    "this situation contains all the states in which the precondition @xmath66 is true and the fluent @xmath70 is false .",
    "the agent not only knows it is facing the door but also knows the door is not opened .",
    "the last situation is from the last case of definition [ def : comp ] .",
    "in this situation the agent knows it is facing the door and also knows that the door is opened .",
    "observe that a result of sensing is that the preconditions of the sensing action will become known to the agent if the value of the fluent being sensed is initially unknown .",
    "this occurs even if the effect of the action remains unknown after executing the action , which hapens in the situation coming from the states where the preconditions of the execution of the sensing action in a knowledge laws are not true .",
    "a state @xmath37 is called an _ initial state _ of a domain description @xmath23 iff for every value proposition of the form `` * initially*@xmath71 '' in @xmath23 , @xmath44 is true in @xmath37 . the _ initial situation _",
    "@xmath72 of @xmath23 is the set of all the initial states of @xmath23 .",
    "a fluent @xmath11 is a _ potential sensing effect _ of a sensing action @xmath21 in a domain @xmath23 if there is a knowledge law of the form    @xmath73 @xmath74    in @xmath23 .",
    "we will also say that @xmath11 is the _ potential sensing effect _ of the knowledge law .",
    "the _ knowledge precondition _ of a fluent @xmath11 with respect to a sensing action @xmath21 in a domain @xmath23 is the disjunction @xmath75 if and only if    @xmath73 @xmath76    @xmath77 @xmath78    @xmath73 @xmath79    are all the knowledge laws in which @xmath21 occurs and @xmath11 is a potential sensing effect .",
    "note that if the domain is simple ( definition [ domains - def ] ) then the knowledge precondition of any fluent in the domain with respect to any sensing actions is either empty or it has only one disjoint .",
    "[ d - model ] given an interpretation @xmath49 of @xmath0 , @xmath49 is a _ model _ of a domain description @xmath23 , if and only if for any consistent situation @xmath45 :    1 .",
    "[ 0-model ] there exists a 0-model @xmath80 of @xmath23 , such that for any non - sensing action @xmath9 , + @xmath81 = @xmath82 .",
    "2 .   for each sensing action @xmath21 , let @xmath83 be the potential sensing effects of @xmath21 and @xmath84 the knowledge precondition of @xmath85 with respect to @xmath21 .",
    "then , @xmath86 must be consistent and if @xmath17 , @xmath87 otherwise @xmath88 } \\sigma_i$ ] , such that each @xmath89 is a situation @xmath90 with @xmath45 .",
    "@xmath91 for any action @xmath92 if @xmath93 .",
    "[ ex : room1 ] the third floor agent of a building has the job of making sure the white - board in a room on that floor is clean .",
    "the agent will approach the room , look into the room , clean the white - board if it is not clean , and then leave the room .",
    "we focus here on  looking into the room \"",
    ". when the agent looks into the room it will know whether the white - board in that room is clean . also if the curtains are open the agent will learn whether it is raining outside .",
    "sensing actions can not appear in object effect propositions , but there is no restriction on the number of knowledge laws associated with a sensing action .",
    "thus , the action could affect the truth value of several fluents simultaneously .",
    "in this example the sensing action @xmath94 will appear in two knowledge laws .",
    "we will see how the resulting situations are @xmath56-compatible with the initial situation and briefly discuss the models of this domain description .",
    "the following simple domain description illustrates the scenario , @xmath95 the initial situation @xmath72 of @xmath96 has four states .",
    "@xmath97 there is only one action in @xmath96 , and any model of @xmath96 applied to the initial situation @xmath72 may behave in one of the following forms : @xmath98    @xmath99    @xmath100    @xmath101    models may differ in how they behave when they are applied to other situations different to @xmath72 , but for @xmath72 they must be equal to one of the @xmath102 above . unlike domains in @xmath3",
    "in which given an initial situation there is only one model for the domain , our language allows for several models .",
    "observe too that since _",
    "lookinroom _ is a sensing action , its occurrence does not change any fluent s value . if we start from @xmath72 , and then reach one of the four situations , any new execution of _ lookinroom _ will result in the same situation .    to verify that each of the @xmath102 can be a partial description of a model of @xmath103 and @xmath104 ,",
    "let @xmath105 note that @xmath106 and @xmath107 are @xmath108-compatible with @xmath72 , and that @xmath109 and @xmath110 are @xmath111-compatible with @xmath72 , and @xmath112 note also that none of the situations are @xmath56-compatible with @xmath72 by part ( 1 ) of definition [ def : comp ] because there is no knowledge precondition @xmath44 of either @xmath113 or @xmath114 with respect to @xmath94 in the domain description @xmath96 that is false in any of the states in the initial situation @xmath72 .",
    "given a domain description , an agent would like to ask how the world would be after the execution of a sequence of actions starting from the initial situation . using actions as in @xmath2",
    ", queries in @xmath0 can be of the form @xmath115\\ ] ] where @xmath44 is a conjunction of fluent literals .",
    "the answer to this query will be _ yes _ ( or true ) in a domain @xmath23 if for every model @xmath49 of @xmath23 the test condition @xmath44 is true in the situation @xmath116 i.e. the situation that results after the execution of @xmath117 from the initial situation @xmath72 of @xmath23 .",
    "the answer will be _ no _ ( or false ) if for every model @xmath49 of @xmath23 @xmath44 is false in @xmath118 .",
    "otherwise the answer will be @xmath119 . with this notion",
    "we can define an entailment relation between domain descriptions and queries .",
    "we say that a domain @xmath23 entails a query @xmath120 , denoted by @xmath121 , if the answer for @xmath120 in @xmath23 is yes . for example , if we add @xmath122 to @xmath25 , it can be easily shown that @xmath123\\ ] ] however , from the original @xmath25 ( even including @xmath28 ) there does not exist a sequence of actions @xmath124 such that @xmath125 .",
    "the inferences from @xmath25 are conditioned to the output of the sensing action : if the switch is on then the sequence @xmath126 $ ] will cause the light to be fixed , else the single action @xmath127 $ ] will fix it .",
    "reasoning in the presence of sensing actions requires the projections to be over plans more complex than a simple sequence of actions .",
    "we recursively define a _ plan _ as follows ,    1 .",
    "an empty sequence denoted by @xmath128 $ ] is a plan .",
    "if @xmath9 is an action and @xmath124 is a plan then the concatenation of @xmath9 with @xmath124 denoted by @xmath129 $ ] is also a plan .",
    "3 .   if @xmath44 is a conjunction of fluent literals and @xmath124 , @xmath130 and @xmath131 are plans then @xmath132 $ ] and @xmath133 $ ] are ( conditional ) plans .",
    "nothing else is a plan .",
    "now we redefine a query to be a sentence of the form @xmath134 where @xmath44 is a test condition ( a conjunction of fluent literals ) and @xmath124 is a plan .",
    "( conditionals ) [ ex : bulb2 ] here we add the knowledge law to @xmath25 and rename it @xmath135 .",
    "@xmath136 we can define a conditional plan to fix the bulb : @xmath137\\\\                    &                       & \\else                                          [ turnswitch , changebulb ] ] .",
    "\\end{array}\\ ] ]    the above query provides two alternatives for reasoning .",
    "the @xmath138 clause is followed if the test condition is false .",
    "a conditional can be expanded to a @xmath139 statement in general when reasoning needs to be done along several different sequences of plans .",
    "note that if the conditional plan was attempted before or without the sensing action @xmath29 , the query may not succeed because the test condition could evaluate to neither true nor false but rather unknown .",
    "sensing actions need to be executed before the conditionals to ensure the test conditions will evaluate to either true or false .      to formally define entailment",
    "we need to define first the evaluation of a plan in terms of interpretations . in other words , we define how the plan will change an initial situation based on an interpretation .",
    "[ exe - func ] the plan evaluation function @xmath140 of an interpretation @xmath49 is a function such that for any situation @xmath45    1 .",
    "@xmath141,\\sigma ) = \\sigma$ ] .",
    "@xmath142,\\sigma ) = \\gamma_\\phi(\\alpha,\\phi(a,\\sigma))$ ] for any action @xmath9 .",
    "@xmath143,\\sigma ) = \\gamma_\\phi(\\alpha,\\sigma')$ ] , where @xmath144 4 .",
    "@xmath145,\\sigma )   = \\gamma_\\phi(\\alpha,\\sigma')$ ] , where @xmath146    a query @xmath147 is entailed by a domain description @xmath23 ( @xmath148 ) iff for every model @xmath49 of @xmath23 , @xmath44 is true in @xmath149 .",
    "it is easy to check that @xmath150\\\\                    &                       & \\else                                          [ turnswitch , changebulb ] ] .",
    "\\end{array}\\ ] ] it is easy to see the task will be completed regardless of what model we are in .",
    "this is due in part to the combination of the sensing action and the conditional plan .",
    "there are several different reasons why knowledge may be removed from the set of facts known by the agent",
    ". there may be decay of the knowledge , difficulty accessing the knowledge , or it may execute an action that makes a particular knowledge no longer valid . in our description we assume an ideal agent ; an agent whose knowledge persists and is not subject to any type of failure or obstacles preventing the quick access of its knowledge . given this assumption ,",
    "the first two possibilities for the removal of knowledge are impossible . however , _",
    "non - deterministic actions _ may remove knowledge .",
    "a non - deterministic action is an action in which the outcome can not be predicted beforehand .",
    "an example of such an action with an unpredictable outcome is the toss of a coin .",
    "a coin on a table will show either heads or tails .",
    "looking at the coin , one can gain knowledge of which side of the coin shows .",
    "once the action of tossing the coin takes place we are no longer certain of which side will show . the coin will land and",
    "will show either heads or tails .",
    "we will not know which side shows until we do the sensing action of looking .",
    "we describe the removal of knowledge as no longer knowing the truth value of a fluent .",
    "a non - deterministic effect proposition is an expression of the form @xmath151 where @xmath9 is a non - sensing action and @xmath11 is a fluent .",
    "the preconditions @xmath15 are defined as in equation ( 1 ) .",
    "intuitively the proposition states that the truth value of @xmath11 may change if @xmath9 is executed in a situation where @xmath15 is true . when @xmath17 , equation ( 10 ) becomes @xmath152 we now re - define 0-interpretations to take into account non - deterministic actions .",
    "a 0-interpretation @xmath49@xmath50 is a _ 0-model _ of a domain description @xmath23 iff for every state @xmath37 , @xmath153 is such that    1 .   for a fluent @xmath11 of any effect proposition of the form  @xmath9 * causes * @xmath11 * if * @xmath15 \" in @xmath23 , @xmath154 if @xmath15 holds in @xmath37 , 2 .   for a fluent literal @xmath52 of any effect proposition of the form  @xmath9 * causes * @xmath52 * if * @xmath15 \" in @xmath23 , the @xmath155 if @xmath15 holds in @xmath37 , 3 .   for a fluent @xmath11 such that there are no effect propositions of the above types , @xmath156 if and only if @xmath157 unless there is a non - deterministic effect proposition of the form  @xmath158 \" for which @xmath15 holds in @xmath37 .",
    "our agent is ordered at this time to put ice from a bag into cups .",
    "the ice in the bag is solid .",
    "the agent needs to break the ice into pieces that are able to fit in the cups .",
    "the agent decides to drop the bag of ice as a means to complete the task .",
    "@xmath159    this example combines many of the ideas previously presented .",
    "let us examine this domain description to see how this all fits together .",
    "* rules t1 - t3 establish what is initially known in the world .",
    "the values of all other fluents are unknown at this time .",
    "* rules t4 and t5 describe the effect that theactions @xmath160 and @xmath161 have on @xmath162 . * rules t6 and t7 describe the non - deterministic effect of the action @xmath163 on the ice . * rules t8 - t10 are object effect propositions which ensure that the ice will break after no more than three @xmath164 ( i.e. the execution of the action @xmath163 three times ) . in the example",
    "@xmath165 is equated with 0 drops , @xmath166 with 1 drop , and @xmath167 with 2 drops .",
    "* rule t11 is the sensing action which allows the agent to know whether the ice is broken or not after the execution of the non - deterministic action @xmath163 .",
    "rule t12 is the goal of the task the agent is to perform .",
    "the non - determinism appears in the action of dropping the bag of ice .",
    "before the action is carried out , the agent knows that the ice is solid .",
    "after the non - deterministic action , the agent is no longer certain if the ice is still solid or in pieces .",
    "the knowledge of knowing the ice is solid has been removed .",
    "the agent can only regain that knowledge by performing a sensing action .    if the robot wants to fill the cup with ice it will iterate the process of dropping the ice until it breaks . a plan to accomplish this goal will look like : @xmath168 , puticeincups]\\ ] ] adding loops to plans",
    "is the topic of the next section .",
    "if we allow while - loops in our plan we could verify that @xmath169 entails the following query ,    @xmath170 @xmath171 [ @xmath172 @xmath173 @xmath174 @xmath175 $ ] , @xmath176    similar to conditional plans , a sensing action is placed before checking the exit condition of the loop .",
    "we extend the definition of plans to include loops as follows .    1 .",
    "an empty sequence denoted by @xmath128 $ ] is a plan .",
    "if @xmath9 is an action and @xmath124 is a plan then the concatenation of @xmath9 with @xmath124 denoted by @xmath129 $ ] is also a plan .",
    "3 .   if @xmath44 is a conjunction of fluent literals and @xmath124 , @xmath130 and @xmath131 are plans then @xmath177 $ ] and @xmath178 $ ] are ( conditional ) plans .",
    "4 .   if @xmath44 is a conjunction of fluent literals and @xmath124 and @xmath130 are plans then + @xmath179 $ ] is also a ( routine ) plan . 5 .",
    "nothing else is a plan .      to extend the definition of entailment to plans with while loops we need to extend the definition of the plan evaluation function @xmath140 .",
    "we will define this function using very elementary tools from denotational semantics for programming languages ( as in chapter 4 of @xcite ) .",
    "the intuitive idea of the denotational semantics is to associate the execution of a plan ( or a program ) of the form `` @xmath180 '' with one of the while - free plans : represents inconsistency . ]",
    "@xmath73 @xmath181    @xmath73 @xmath182 $ ]    @xmath73 @xmath183 $ ]    @xmath77 @xmath78    if the while - plan terminates then there exists a @xmath184 such that the @xmath184th plan in this infinite sequence computes exactly the same function that the while - plan computes .",
    "moreover , for each @xmath185 , the @xmath186th plan is an approximation of the computation of the while - plan .",
    "if the while - plan does not terminate , any plan in the sequence is an approximation of the while - plan but none is equivalent since the while - plan computation is infinite .",
    "thus , to define this sequence we start by defining a partial order over the set of functions that map situations into situations .",
    "the order will arrange the functions as in the sequence of plans above .",
    "let @xmath187 be the set of all situations and @xmath188 the set of all total functions @xmath11 mapping situations into situations , @xmath189 } .",
    "we say that for any pair of functions @xmath190 if and only if for any @xmath191 if @xmath192 , then @xmath193 .    then , we associate a ( continuous ) transformation inside this order to each plan @xmath124 . informally speaking ,",
    "the transformation starts with the first plan in the sequence and in each application returns the next element in the sequence .",
    "finally , we will define the meaning of the plan based on the least fix - points of these transformations .",
    "let @xmath194 denote the function that maps any situation into the empty situation @xmath195 .",
    "let @xmath124 be a plan and @xmath196 a function that maps plans and situations into situations .",
    "let @xmath44 be a conjunction of fluent literals .",
    "then , we define the function @xmath197 such that for any function @xmath198    @xmath199    we can define the powers of @xmath200 as follows :    1 .   @xmath201 .",
    "2 .   @xmath202 .",
    "3 .   @xmath203 , i.e. the infinite composition of @xmath200 applied to @xmath194 .    it can be shown that this power is correctly defined .",
    "proof and a formal definition of powers can be found in appendix [ denotational sem ] .",
    "we now extend the definition of the evaluation function @xmath204 to apply to plans with routines by adding item    * @xmath205,\\sigma ) = \\gamma_\\phi(\\alpha,\\sigma')$ ] , where @xmath206    to definition  [ exe - func ] .",
    "the definition of entailment remains unchanged .",
    "that is , @xmath148 iff for every model @xmath49 of @xmath23 , @xmath44 is true in @xmath207 .    @xmath208 , \\\\    & puticeincups ] \\end{array}\\ ] ]      notice that the query above with the while loop could have been written using three nested conditionals . a more natural example will replace rules @xmath209 with the single rule @xmath210 however , in this domain we are not be able to prove termination .",
    "the verification of termination is a difficult task , especially for planning .",
    "how do we really know that the ice will eventually break ? or how do we know that the cup is filling up ? with time the ice will either melt or break , and if we do not place infinitesimally small amounts of ice in the cup the cup will eventually fill up or we will run out of ice .",
    "we have simplified the problem in our example by adding @xmath211 .",
    "these propositions state that the ice will break with no more than three  drops \" .",
    "we are faced with a similar situation in the following example .",
    "[ ex : cans ] consider the following situation . on the floor of a room",
    "there are cans .",
    "an agent is given an empty bag and instructed to fill the bag with cans .",
    "we assume that there are more than enough cans on the floor to fill the bag .",
    "the domain description for this task is @xmath212 this task of picking up cans and dropping them into the bag involves the repetition of a small sequence of actions .",
    "there is a degree of uncertainty inherent in this task because it is unknown how many cans are needed to fill the bag .",
    "therefore a loop that executes the sequence of actions repeatedly until the task is completed is needed .",
    "if the number of cans needed to fill the bag is known beforehand , then the set of actions would be repeated sequentially for those number of times .",
    "a query that we would like to prove is @xmath213 \\end{array}\\ ] ] ideally , we would like to use a routine which could solve any type of task that involves uncertainty of its end .",
    "however , each task has its own conditions for termination .",
    "for example , filling the volume of a bag differs from finding an unfamiliar store in an unfamiliar area based on the vague directions of a stranger .",
    "do we really know the bag will become full ? or how useful are vague directions such as ,  just walk down lincoln avenue , you ca nt miss it \" when generating a plan .",
    "a hole may tear in the bag , or suppose that the stranger who had all the best intentions was mistaken about the location of the store . to ensure termination ( either with success or failure )",
    "we need to add to our domain descriptions general axioms or constraints .",
    "we do not have constraints in @xmath0 but we may be able to add them by using other extensions of @xmath2 such as the one in @xcite . to address this problem",
    "we should first look at the standard techniques of problem verifications such as the ones founded in @xcite or @xcite .",
    "these classical ideas have been used by manna and waldinger to prove termination of plans with loops but without sensing actions @xcite . for sensing , it might also be useful to consider the techniques described in @xcite to detect loop - termination using probability approaches",
    ". however , analysis of the termination of plans is outside the scope of this paper .",
    "we will discuss in section  [ sec : future ] how some of the problems of termination may be addressed in simple situations .",
    "in the past , domain descriptions of dialects of @xmath2 have been translated into extended logic programs @xcite .",
    "extended logic programs use two types of negation to represent incomplete information .",
    "there is strong or classical negation @xmath10 and negation as failure @xmath214 .",
    "the semantics of extended logic programs is defined by a collection of sets of literals called answer sets @xcite .",
    "however , we are required to represent incomplete information that crosses over multiple sets of answer sets",
    ". this will be the case in our translation of domain descriptions into logic programs where situations will be closely related to sets of answer sets , and domain descriptions act over epistemic states which are sets of situations . in this case",
    ", extended logic programs will no longer be sufficient to codify domain descriptions .",
    "gelfond has extended disjunctive logic programs to work with sets of sets of answer sets @xcite .",
    "he calls his new programs _ epistemic logic programs_. in epistemic logic programs , the language of extended logic programs is expanded with two modal operators @xmath215 and @xmath216 .",
    "@xmath217 is read as ",
    "@xmath7 is known to be true \" and @xmath218 is read as  @xmath7 may be believed to be true . \"",
    "universal and existential quantifiers are also allowed as well as the epistemic disjunctive `` @xmath219 '' which the semantics is based on the minimal model semantics associated with disjunctive logic programs @xcite . as an example , when @xmath220 is defined as a logic program , its models are exactly @xmath221 and @xmath222 .",
    "note that the classical @xmath223 can not be defined as a logic program , because it has models which are not minimal .",
    "in the rest of this section we will review the syntax and the semantics of the subclass of epistemic logic programs that will be required to represent our domain descriptions .",
    "readers interested in more details about epistemic logic programs are referred to @xcite .",
    "the semantics of an epistemic logic program is defined by pairs @xmath224 .",
    "@xmath8 is a collection of sets of ground literals called the set of _",
    "possible beliefs_. each set in @xmath8 can be indexed as @xmath8 = @xmath225 .",
    "@xmath226 is a set in @xmath8 called the _ working set of beliefs_. to define the semantics , we restrict our formulas to be : ground literals , a ground literal preceded by a modal operator , a ground literal preceded by a modal operator and @xmath10 , or a conjunction of such formulas . the truth of a formula @xmath7 in @xmath227 is denoted by @xmath228 and the falsity by @xmath229 , and are defined as follows .",
    "@xmath230 iff @xmath231 , when @xmath7 is a ground atom .",
    "@xmath232 iff @xmath233 .",
    "@xmath234 iff @xmath235 and @xmath236 .",
    "@xmath237 iff @xmath238 .",
    "@xmath239 @xmath240 @xmath7 iff @xmath241 , when @xmath7 is a ground atom .",
    "@xmath242 iff @xmath243    @xmath244 iff @xmath245 or @xmath246 .",
    "@xmath247 iff @xmath248 .",
    "@xmath249 iff @xmath250    note that when a formula @xmath251 is of the form @xmath217 , or @xmath252 , its evaluation in @xmath253 does not depend on @xmath226 .",
    "thus , we will write @xmath254 or @xmath255 . moreover , the evaluation of object formulas does not depends on @xmath8 .",
    "if @xmath251 is objective we sometimes write @xmath256 or @xmath257 .",
    "an epistemic logic program is a collection of rules of the form    @xmath258    where @xmath259 and @xmath260 are ( not necessarily ground ) objective literals ( without @xmath215 or @xmath261 ) and @xmath262 are ( not necessarily ground ) subjective ( with @xmath215 or @xmath261 ) or objective literals .",
    "let @xmath263 be an epistemic logic program without variables , @xmath264 , or modal operators .",
    "a set @xmath226 of ground literals is a belief set of @xmath263 if it is a minimal set of ground literals , satisfying the following properties :    1 .",
    "@xmath265 for every rule @xmath266 in @xmath263 which @xmath267 .",
    "if there is a pair of complementary literals , i.e @xmath268 , in @xmath226 then @xmath226 is the set of all literals .",
    "let @xmath263 be an epistemic logic program with @xmath269 and variables but does not contain any modal operator .",
    "let @xmath270 be the epistemic logic program that is obtained from @xmath263 by replacing each rule in @xmath263 with all its ground instances .",
    "let @xmath226 be a set of ground literals ( literals in @xmath226 and @xmath263 are from the same language ) .",
    "@xmath271 is obtained from @xmath263 by removing from @xmath270    1 .",
    "all the rules which contain formulas of the form @xmath272 such that @xmath273 .",
    "all occurrences of formulas of the form @xmath272 from the remaining rules .",
    "@xmath226 is a belief set of @xmath263 if and only if @xmath226 is a belief set of @xmath271 .",
    "let @xmath263 be any epistemic logic program , and @xmath274 a collection of sets of literals .",
    "@xmath275_{\\bf a}$ ] is the epistemic logic program obtained by removing from @xmath270    1 .   all rules with formulas of the form @xmath251 such that @xmath251 contains @xmath261 or @xmath215 , and @xmath276 2 .",
    "all occurrences of formulas containing @xmath261 or @xmath215 from the remaining rules .",
    "a set @xmath274 is a @xmath277 of @xmath263 if @xmath274 is the collection of all belief sets of @xmath275_{\\bf a}$ ] .",
    "a world view of @xmath263 is consistent if it does not contain the belief set of all literals .",
    "an epistemic logic program is consistent if it has at least one consistent non - empty world view . in epistemic logic programs",
    "the only _ working sets of beliefs _ that are considered are world views and the _ possible belief _ is always a member of the working set under consideration ( i.e. a belief set ) .",
    "let @xmath263 be an epistemic logic program and @xmath274 be a world view of @xmath263 .",
    "a literal @xmath278 is true in @xmath274 iff for every ground instance @xmath7 of @xmath278 , @xmath279 for all @xmath280 in @xmath274 .",
    "@xmath7 is true in @xmath263 , denoted by @xmath281 , iff @xmath282 for every world view @xmath274 of @xmath263 .",
    "[ pq ] the epistemic program    1 .",
    "@xmath283 2 .",
    "@xmath284    has two world views @xmath285 @xmath286 @xmath285 @xmath287 in the first world view @xmath288 is true and @xmath289 is true in the second .    the epistemic program    1 .",
    "@xmath290 2 .",
    "@xmath284    has one world view    @xmath285 @xmath291    note that @xmath289 is not true in this world view because @xmath292 is not member of the second belief set .",
    "the main intuition to have when reading a formula of the form @xmath217 is that it will be true iff @xmath7 is true in every belief set of the program .",
    "in this section we start with a sound and complete translation of _ simple _ domain descriptions into epistemic logic programs .",
    "this will let us explain the logic program rules under the simple scenario and will make clear the rules for the general case .",
    "our epistemic logic programs will use variables of three sorts : _ situation _ variables denoted by @xmath293 or @xmath294 possibly indexed , _",
    "fluent _ variables denoted by @xmath7 or @xmath295 possibly indexed , _ action _",
    "variables denoted by @xmath8 or @xmath296 possibly indexed , and the special situation constant @xmath297 that represents the initial situation .",
    "we will also have a constant symbol for each fluent symbol @xmath11 in the language and we add the constant symbol @xmath298 to represent @xmath52 . for simplicity we will denote the fluent literal constants by the fluent literal they represent .",
    "we will also add the special constant symbol @xmath299 to the set of fluent literal constants .",
    "we start by first giving the rules for inertia .",
    "these rules encode that a fluent remains unchanged if no actions that affect the fluent is executed . whenever a fluent literal appears as an argument in a predicate , it is representing a corresponding constant in the program . for any fluent literal @xmath300 , if @xmath301 , @xmath302 will denote @xmath11 in the program .    for every fluent literal @xmath11",
    "there is an inertia rule of the form :    @xmath303 @xmath304 @xmath305    for every fluent symbol @xmath11 there is an or - classicalization rule of the form    @xmath306    the above rule states that our belief sets are complete in the sense that either @xmath307 or @xmath308 must be true since @xmath309 is a tautology in every state .",
    "note that because of the minimal model semantics interpretation of the `` @xmath219 '' we will not have both @xmath307 or @xmath308 holding simultaneously .",
    "we will also have two more domain independent rules that we will call rules of _ suppression_.",
    "@xmath310    @xmath311    these rules will be used to implement compatibility .",
    "for example , if a situation @xmath312 with two states is split into two situations @xmath313 and @xmath314 , for compatibility after the execution of a sensing action , @xmath106 will be generated by suppressing @xmath315 from @xmath45 using these rules .",
    "how this is accomplished will become apparent when we introduce the domain dependent rules produced by the knowledge laws .",
    "value propositions of the form ",
    "@xmath316 @xmath11 \" are translated into @xmath317 the translation of effect propositions of the form  @xmath9",
    "@xmath318 @xmath11 @xmath319 @xmath320 \" is the standard translation for effect propositions introduced by gelfond and lifschitz in @xcite for @xmath2 .",
    "the translation produces two rules .",
    "the first one is : @xmath321 it allows us to prove that @xmath11 will hold after the result of the execution of @xmath9 if preconditions are satisfied .",
    "the second rule is : @xmath322 where the predicate @xmath323 disables the inertia rule in the cases where @xmath11 can be affected by @xmath9 .",
    "we will introduce the domain dependent translation of knowledge laws using the following domain description .",
    "+ [ ex - d01 ] @xmath324    in this example the initial situation is : @xmath325 after the robot executes the action @xmath29 we will have the following resulting situations : @xmath326 these correspond to the three @xmath327-compatible sub - sets of @xmath45 ( see definition  [ def : comp ] ) .",
    "note also that @xmath328 our logic program translation of this domain will have three world views , one corresponding to each of the transition functions @xmath329 @xmath330 , and @xmath331 .",
    "@xmath329 is depicted on the left hand side of the figure below , @xmath330 on the right hand side and @xmath331 in the middle .",
    "@xmath332    ( 0,0 )    # 1#2#3#4#5 @font    ( 5934,5382)(2479,-6286 ) ( 6811,-1651)(0,0)[b ] ( 6811,-2101)(0,0)[b ] ( 6811,-2476)(0,0)[b ] ( 4216,-2116)(0,0)[b ] ( 4216,-2491)(0,0)[b ] ( 7051,-3556)(0,0)[b ] ( 7051,-3931)(0,0)[b ] ( 4501,-5221)(0,0)[b ] ( 4501,-5596)(0,0)[b ] ( 7111,-5236)(0,0)[b ] ( 7111,-5611)(0,0)[b ] ( 2551,-2686)(0,0)[lb ] ( 2746,-3151)(0,0)[lb ] ( 5461,-2986)(0,0)[lb ] ( 5851,-3136)(0,0)[lb ] ( 3256,-4516)(0,0)[lb ] ( 3061,-4366)(0,0)[rb ] ( 3121,-6136)(0,0)[lb ] ( 3451,-6286)(0,0)[lb ] ( 4201,-1261)(0,0)[b ] ( 4201,-1636)(0,0)[b ] ( 6811,-1276)(0,0)[b ] ( 4216,-3571)(0,0)[b ] ( 4216,-3946)(0,0)[b ] ( 8101,-2911)(0,0)[rb ] ( 7726,-4486)(0,0)[rb ] ( 8176,-2311)(0,0)[lb ] ( 8251,-4261)(0,0)[rb ]    the world view associated with @xmath329 on the left hand side of the figure will have four belief sets .",
    "one will contain the union of the two sets    @xmath333    and    @xmath334    this union represents the fact that @xmath335 is an initial state ( encoded @xmath336 ) and that the same set is also a state in @xmath337 ( encoded in @xmath338 ) .",
    "the rest of the literals in @xmath339 are the same as in @xmath338 except that the situation constant in each literal is replaced by situation constants of the form @xmath340 representing that the state remains the same after any number of applications of the action @xmath29 to the state ( the loop arc on the left of the figure ) .",
    "the second belief set will contain    @xmath341 , @xmath342 , @xmath343    representing that @xmath344 is also an initial state . however , this state is not part of @xmath337",
    ". then , we need to suppress this state from the world view .",
    "we will do that by adding the set @xmath345 to the belief set . actually , we will have in the domain dependent translation a rule that adds @xmath346 , and the second domain independent suppression rule will add the rest .",
    "the rest of the literals in @xmath347 are the same as in @xmath348 except that the situation constant is replaced by situation constants of the form @xmath349 representing that the state remains suppressed in the result of applying the action @xmath29 to the state .",
    "this is the effect of the first domain independent suppression rule .",
    "the other two belief sets @xmath350 and @xmath351 are similar to @xmath347 .",
    "@xmath352 , @xmath342 , @xmath353    @xmath354 , @xmath342 , @xmath343    the rest of @xmath350 and @xmath351 is exactly as in @xmath347 since the states they represent are also suppressed from the result .",
    "note that both @xmath355 and @xmath356 are members of the belief sets @xmath347 , @xmath350 and @xmath351 , for any fluent @xmath11 .",
    "therefore , for any fluent literal @xmath357 , the proof of @xmath358 in the world view is not affected by these belief sets .",
    "the consequence is that we are ignoring three states after the execution of @xmath29 under the model @xmath329 .",
    "there are two more world views that correspond to the transitions in the middle and on the right hand side of the figure .",
    "the definition is very similar to the first world view .",
    "there are four belief sets in the middle , two of them suppressing initial states , and four belief sets in the last world view , three of them suppressing initial states .",
    "thus , the domain dependent translation of @xmath359 will be : @xmath360 rule @xmath361 is the translation of rule @xmath362 .",
    "the rest of the rules correspond to the different suppression cases since states that are not suppressed by the transition will be moved to the next situation by the domain independent rule of inertia .",
    "take for example , @xmath329 .",
    "@xmath363 hence , we would like to suppress two kinds of states .",
    "1 ) states where @xmath364 is true , and 2 ) states where @xmath365 is true .",
    "the rule for the first case is : @xmath366 the first two literals in the body of the rule verify that we are in the case of @xmath329 , that is , both @xmath31 and @xmath33 are true in every state of the resulting situation ( i.e. the two literals @xmath367 and @xmath368 are true ) .",
    "the last predicate checks that we are suppressing the state where @xmath369 is true in the current situation ( i.e. @xmath370 ) .",
    "the rule for the second case is very similar .",
    "we only need to change the last literal to indicate that we are suppressing the state where @xmath365 is true ( i.e. @xmath371 ) : @xmath372 let us look now at @xmath330 .",
    "@xmath373 we also suppress two kinds of states .",
    "1 ) states where @xmath31 is true , and 2 ) states where @xmath365 is true . we need to check that @xmath364 and @xmath33 are true in every state of the resulting situation ( i.e. @xmath374 and @xmath368 are true ) to verify that we are in the case of @xmath330 .",
    "the rules for the cases are : @xmath375 for @xmath331 all the states where @xmath376 holds ( i.e. @xmath377 ) should be suppressed since @xmath378 to verify that we are in the case of @xmath331 we need to check there is at least one state in the result where @xmath365 holds ( i.e. @xmath379 ) .",
    "the rule for this case is : @xmath380    there is a condition that must be added to all the rules .",
    "the condition is that if the fluent @xmath31 is already known in the original situation ( for example if we have @xmath381 ) then none of the states is suppressed from the situations . in other words ,",
    "the rules above applied only if @xmath31 is unknown . to check",
    "that this is the case we must add to the body of each rule the literals @xmath382 and @xmath383 .",
    "these literals are not required in this particular example but it must be part of the general case .    in general , knowledge laws of the form ",
    "@xmath11 @xmath319 @xmath320 \" are translated into the rules    @xmath385 we have added to every rule the condition @xmath386 .",
    "none of these rules apply if @xmath11 is currently known . in this case , by inertia everything stays the same after the execution of the sensing action @xmath9 .",
    "assume now that neither @xmath11 nor @xmath298 holds in the `` situation '' @xmath293 .",
    "thus , according to the definition of compatibility ( def .",
    "[ def : comp ] ) , we would have three types of world views .",
    "1 ) one type for which we can find a @xmath387 for each of the belief sets such @xmath388 does not hold ; 2 ) world views in which @xmath389 and every @xmath390 hold ; 3 ) world views in which @xmath391 and every @xmath390 hold .    intuitively , to capture these three cases the logic programming rules will suppress the belief set that breaks the rules . to suppress a belief set in the situation @xmath392 the rules will add @xmath393 to the belief set , and this atom together with the second suppression rule will add @xmath394 , for every fluent literal @xmath300 . recall that the effect of having every literal hold for a particular situation in a belief set is that the belief set can be ignored when checking if the literal holds in the world view . case ( 1 ) is captured by the first set of rules ( [ s3 ] ) .",
    "case ( 2 ) is captured by rule ( [ r2 ] ) and the set of rules ( [ s2 ] ) .",
    "case ( 3 ) is captured by rule ( [ r1 ] ) and the set of rules ( [ s1 ] ) .    a non - deterministic effect proposition of the form ",
    "@xmath9 @xmath395 @xmath11 @xmath319 @xmath320 \" is translated into    @xmath396@xmath397 to illustrate this translation , we use rule @xmath398 from domain description @xmath169 , and show how it will work from the initial situation @xmath297 .",
    "we also include the translation for @xmath399 , @xmath400 and @xmath401 along with the inertia rule to get the following program .",
    "notice that the suppression rules do not apply here since we are not considering any knowledge laws .",
    "@xmath402@xmath403@xmath404@xmath405@xmath406 the program only has objective formulas .",
    "thus , its semantics is given by its world view which consists of _ belief sets _ ( belief sets are the same as answer sets in extended logic programs ) .",
    "the world view @xmath226 of the above program is @xmath407 @xmath408 notice that the query @xmath409 evaluates to true for the above belief sets . if we were to ask the queries @xmath410 or @xmath411 , we see neither would be able to produce an answer of @xmath412 or @xmath413 .",
    "both queries answer is @xmath119 .",
    "the recursion through negation provides the desired effect of two possible interpretations for the effect of @xmath9 in @xmath11 ( note that the two first rules of the example have the form @xmath414 and @xmath415 and this program has two answer sets , one is @xmath416 and the other is @xmath417 ) .",
    "the _ translation _ of a domain @xmath23 is defined as the union of the domain dependent and domain independent rules .",
    "the assumption that we made for simple domains was that for any sensing action @xmath21 and fluent @xmath11 there is at most one knowledge law of the form @xmath418 suppose now we have the following domain @xmath419 and assume we start with the following situation @xmath420 there is one model @xmath329 that will result in the states where the fluent @xmath421 is true and the knowledge precondition @xmath422 of @xmath114 with respect to @xmath94 is also true ( this corresponds to the third case of compatibility ) .",
    "@xmath423 we will need a suppression rule similar to the rules in group ( [ s1 ] ) of the translation of simple domains .",
    "the rule will be something like @xmath424 the question is how to encode `` @xmath425 '' ?",
    "we will do it by adding two rules to the program @xmath426 now the disjunction can be replaced by `` @xmath427 '' . the symbol @xmath428 is a new constant symbol not appearing anywhere else in the program .",
    "we complete the program with the rule @xmath429 and the translation becomes @xmath430 in general , if @xmath23 is a domain description ( not necessarily simple ) then , for any sensing action @xmath9 and any fluent @xmath11 , if @xmath431 with @xmath432 , is the knowledge precondition of @xmath11 with respect to @xmath9 in the domain @xmath23 , we will have a new constant symbol @xmath433 in the language of the logic program .",
    "then for the knowledge laws : @xmath434 the domain dependent translation will have the rules : @xmath435 the set of rules ( [ s3 ] ) corresponds to rule ( [ 2s3 ] ) .",
    "rule ( [ r2 ] ) corresponds to rule ( [ 2s1 ] ) .",
    "the set of rules ( [ s2 ] ) correspond to rule ( [ 2s4 ] ) .",
    "rule ( [ r1 ] ) corresponds to rule ( [ 2s2 ] ) and rule ( [ s1 ] ) corresponds to rule ( [ 2s5 ] ) .      to answer queries in the epistemic logic program we need to include rules to implement the evaluation functions @xmath196 .",
    "the query `` @xmath436 '' will be true in a consistent domain @xmath23 if and only if @xmath437 is true in the epistemic logic program obtained from @xmath23 plus the rules    @xmath438,s , s)\\\\\\leftarrow \\\\",
    "find\\_situation([a|\\alpha],s , s_1 ) \\\\ \\leftarrow & find\\_situation(\\alpha , res(a , s),s_1)\\\\ find\\_situation([\\if \\varphi\\;\\then \\alpha_1|\\alpha_2],s , s_1 ) \\\\\\leftarrow & kholds(\\ol{\\varphi},s),find\\_situation(\\alpha_2,s , s_1)\\\\ find\\_situation([\\if \\varphi\\;\\then \\alpha_1|\\alpha_2],s , s_1 ) \\\\\\leftarrow & kholds(\\varphi , s),find\\_situation(\\alpha_1,s , s'),\\\\                 & find\\_situation(\\alpha_2,s',s_1)\\\\ find\\_situation([\\if \\varphi \\ ; \\then \\alpha_1 \\ ; \\else \\ ; \\alpha_1'|\\alpha_2],\\\\s , s_1)\\\\ \\leftarrow & kholds(\\o{\\varphi},s),find\\_situation(\\alpha_1',s , s'),\\\\                     &   find\\_situation(\\alpha_2,s',s_1)\\\\ find\\_situation([\\if \\varphi \\ ; \\then \\alpha_1\\ ; \\else \\ ; \\alpha_1'|\\alpha_2],\\\\s , s_1 ) \\\\\\leftarrow & kholds(\\varphi , s),find\\_situation(\\alpha_1,s , s'),\\\\                 & find\\_situation(\\alpha_2,s',s_1)\\\\ find\\_situation([\\while\\varphi\\ ; \\do \\alpha_1|\\alpha_2],s , s_1 ) \\\\ \\leftarrow   & kholds(\\o{\\varphi},s),\\\\ &   find\\_situation(\\alpha_2,s , s_1 ) \\end{array}\\ ] ] @xmath439,s , s_1 ) \\\\ \\leftarrow & kholds(\\varphi , s),\\\\ & find\\_situation(\\alpha_1,s , s'),\\\\ & find\\_situation([\\mbox{\\bf while}\\;\\varphi\\;\\mbox{\\bf do}\\;\\alpha_1|\\alpha_2],s',s_1 ) \\end{array}\\ ] ] as you may note from the rules , @xmath440 works in two steps .",
    "first , it finds the situation @xmath441 that results from applying @xmath442 to the initial situation ( using @xmath443 ) and then shows that @xmath7 holds in that situation .",
    "since the translation of the domain may have several world views the program needs to find a situation for each world view .",
    "the following example illustrates how the process works .",
    "+ @xmath444    assume we would like to show that @xmath445 ,   \\\\                                & changebulb ] \\end{array}\\ ] ] the states in the initial situation of this example are : @xmath446 it has two models @xmath329 and @xmath330 that for the sensing action @xmath29 behave very much like in example  [ ex - d01 ] .",
    "then , the logic program translation of this domain has two world views .",
    "the world view @xmath447 corresponding to @xmath329 has two belief sets @xmath339 and @xmath347 , such that @xmath448 from example [ ex - d01 ] is a subset of @xmath339 and @xmath449 is a subset of @xmath347 .",
    "@xmath339 also contains the sets    @xmath450    and    @xmath451    @xmath452    and @xmath347 the set    @xmath453    there is also a similar set @xmath454 , with the same elements of @xmath455 , replacing the situation argument with @xmath456 this corresponds to the sequence @xmath457 thus , in this world view the predicate @xmath458 , \\\\ & changebulb ] , s_0 , s ) \\end{array}\\ ] ] will hold in @xmath447 iff @xmath459 .",
    "the second step will check if @xmath460 is in @xmath447 .",
    "the answer is yes since the atom belongs to both @xmath339 and @xmath347 .",
    "the world view associated with @xmath330 is defined in a similar manner , but in this world view @xmath461 .",
    "let @xmath462 be the epistemic logic program corresponding to the translation of a domain description @xmath23 , and denote by @xmath463 the union of @xmath462 and the rules to interpret queries given above .",
    "then we can show :    [ entailmentrel ] given a consistent domain description @xmath23 and a plan @xmath464 .",
    "@xmath465 iff @xmath466 .",
    "* proof : * see appendix .",
    "in @xcite there is also a programming language based on the situation calculus which uses sensing actions .",
    "this work is based on previous work from @xcite , in which knowledge is represented using two levels .",
    "there is a representation of the actual situation ( called @xmath441 ) in which the agent is in , and there are situations accessible from @xmath441 ( called @xmath467 ) which the agent thinks it might be in .",
    "something is known to the agent as being true ( false ) if it is true ( false ) in all situations @xmath467 which are accessible from the actual situation @xmath441 and is unknown otherwise . in other words",
    "@xcite distinguishes between what is known by the agent and what is true in world .",
    "we only represent what is know by the agent , and assume that this knowledge might be incomplete but always correct .",
    "something is known in our representation if its value is the same throughout the states in a situation and unknown otherwise .",
    "in @xcite the authors use preconditions which are executability conditions for an action s execution .",
    "for example , a precondition to clean a white - board is one must be in front of the white - board .",
    "our preconditions differ in that they are conditions on the effects .",
    "we can always execute an action but its effect varies according to its precondition in the effect propositions . extending @xmath0 to include executability conditions",
    "can be done as for extensions of @xmath6 .",
    "the use of conditions on effects however allows us to represent a phenomenon of sensing in which the value of previously unknown preconditions are learned along with the fluent we are trying to gain knowledge about .",
    "this is shown in examples [ ex : door ] and [ ex : room1 ] where the robot will know whether or not it is facing the door after executing the action @xmath63 .    in @xcite",
    "once knowledge is gained it is never lost .",
    "we , on the other hand , explore the use of non - deterministic actions as a mechanism to remove knowledge .",
    "our use of non - deterministic actions is similar to @xcite where the effect of a non - deterministic action is to make a fluent true or false , but exactly which is indeterminate . as might be expected , there are cases where the possible outcome is not intuitive .",
    "take for example a deterministic action @xmath468 that causes ollie to be dead .",
    "any observation , which depends on ollie being alive , such as `` ollie is walking '' can be made false using the same action shoot .",
    "shoot can be used as a restriction which causes ollie not to walk . in the resulting situation ,",
    "ollie will not be alive and therefore will not be walking around .",
    "this is not the case when shoot has the non - deterministic effect of making ollie dead or leaving ollie alive ( suppose that the gun is not working well ) . with the same restriction",
    ", ollie may be dead and not walking in one situation and alive and not walking in the other .",
    "assuming one can walk as long as one is alive , then the later situation makes no sense .",
    "the same holds true without the restriction but this time ollie will be dead and walking in one situation . if shoot also has a non - deterministic effect on walking , we are no better off .",
    "these cases are prevented with integrity constraints as in @xcite .",
    "our language could be extended to include constraints as in @xcite but our interest in non - determinism is its effect on knowledge .",
    "we discuss the topic of integrity constraints in section [ sec : future ] .",
    "most translations for dialects of @xmath3 are to extended logic programs .",
    "our translation is to epistemic logic programs because of its ability to represent knowledge and incomplete information . to the best of our knowledge",
    "this is the first use of epistemic logic programs in a translation from action languages .",
    "the closest work related to our results is presented in @xcite . in that paper @xmath6",
    "is also extended to handle sensing actions but the semantics is some what limited because they work with a three value semantics and only approximate knowledge .",
    "furthermore , in their language sensing actions have no conditional effects .",
    "these restrictions allow baral and son to write translations into extended logic programs .",
    "showing whether is possible to find a translation into extended logic programs or first order logic of our domains is an open question .",
    "we already mentioned the need to clarify the complexity of adding sensing actions to domain descriptions .",
    "our translation suggests that it might be computationally more complex to deal with conditional sensing actions than sensing with no conditions .",
    "two other possible directions of research are : first , the ability of an agent to query itself about what it knows ( i.e introspection ) .",
    "this is useful when the cost of executing a series of plans is expensive maybe in terms of time .",
    "allowing an agent to query whether it knows that it knows something may be a cheaper alternative and cost effective .",
    "the use of a modal operator as shown below may be sufficient to accomplish this .",
    "@xmath469\\ ] ]    where @xmath44 is a test condition ( as defined in section [ sec : queries ] ) , @xmath124 a plan , and @xmath470 would be an introspective operator on the test condition .",
    "take for example agent a in fig . 1 from section [ sec : domain ] .",
    "agent a knows that ollie is wet ( denoted by @xmath48 ) , but does not know if it is raining outside ( denoted by @xmath471 ) .",
    "agent a would have to find a window and then look out that window to see if it is raining outside .",
    "suppose the program or control module for finding a window in a building is long and very costly as far as battery power , agent a would have to find a window and then check for rain .",
    "agent b would benefit from the conditional below    @xmath472 @xmath473 $ ]    without an introspective operator , both agent a and agent b would have to find a window and then look outside . agent b can save on battery power if it has the ability to query itself on what it knows .",
    "second , we could investigate expanding the initial epistemic state . at present , domains only may start from a situation with only one initial epistemic state . for more states or to represent multiple initial situations in a domain , the language to describe domains must be extended with modal operators . as mentioned earlier in this paper , integrity constraints could be added .",
    "integrity constraints define dependency relationships between fluents .",
    "taking the example from the previous section , walking depends on ollie being alive .",
    "this could be represented following the approach outlined in @xcite    @xmath474    where @xmath44 and @xmath475 are conjunctions of fluent literals .",
    "it states that @xmath44 can not be true when @xmath475 is true .",
    "our example with ollie would look like this    @xmath476    conditions of effect are used throughout this paper .",
    "an example of a executability condition is the fact that one has to be at a light bulb to change the light bulb .",
    "executability conditions found in @xcite could be implemented using the methods found in @xcite .",
    "@xmath477    where @xmath8 is an action and @xmath475 is a conjunction of fluent literals .",
    "the execution of action @xmath8 can not take place as long as @xmath475 is true .    using ( [ eq : execond ] ) we could express the constraint that in order to change the bulb , one has to be at the lamp as    @xmath478    this paper will conclude with three thoughts .",
    "one is relaxing the assumption that an agent has incomplete but always correct knowledge of its world .",
    "one could imagine the agent not only reasoning on information that it knows is true , but also reasoning on what it believes is true . at present",
    "we have not explored this topic .",
    "the other idea is given that @xmath0 is a high level action description language that deals with incomplete information across multiple possible worlds , it stands to reason that @xmath0 could be translated to formalisms , such as levesque s @xcite or autoepistemic logic @xcite , which also hold this property .",
    "the third refers to the termination of routines ; there are certain tasks for which routines can be limited by a sensing action that determines the `` size '' of the problem .",
    "take for example the number of pages in a book or the number of doors on the second floor of an office building .",
    "the number of pages contained in a book will ensure the termination of a search for a word through that book .",
    "the same applies to the number of doors on the second floor with respect to a security routine which checks that all the doors on the second floor are locked . for this type of task ,",
    "a counter is sufficient . to include counters ,",
    "we do not require constraints but variables in @xmath0 .",
    "these loops correspond to for - loops in regular programming languages .",
    "consider the situation described in [ ex : cans ] . on the floor of a room",
    "there are cans .",
    "an agent is given an empty bag and instructed to fill the bag with cans .",
    "we assume that there are more than enough cans on the floor to fill the bag .",
    "we can model the space left in the bag by having initially true one ( and only one ) of the following fluents . @xmath479",
    "the effect of @xmath163 can be now described by the effect proposition : @xmath480 however , we need to restrict the world to only allow one @xmath481 fluent to be true at any moment . this can be described with a constraint of the form @xmath482 note that the constraint encodes a ramification of @xmath163 since not only the execution of the action @xmath163 makes @xmath483 true , but also indirectly causes @xmath484 to become false .",
    "an orthogonal problem to the issue of constraints , is that we still need in our domain a value proposition that tells us how much space we initially have in the bag . adding the initial value proposition is not a completely satisfactory solution since the plan @xmath485\\ ] ] fills the bag irrespectively of the initial situation and ( in normal circumstances ) the plan will always terminate .",
    "furthermore , in a realistic setting , plans need to consider limitation of resources .",
    "plans may need to limit the amount of time devoted to any task or limit the amount of energy that can be used .",
    "these bounds can be applied to all tasks , but still a counter is required .",
    "further research in termination , specially in a common - sense approach to proof of termination is necessary to deal with loops in plans .",
    "[ [ acknowledgments ] ] acknowledgments + + + + + + + + + + + + + + +    we would like to thank the anonymous referees for their invaluable suggestions .",
    "section  [ general domains ] is a direct result of one of their comments .",
    "aho , a. , & ullman , j. ( 1995 ) . .",
    "computer science press .",
    "baral , c. , & gelfond , m. ( 1997 ) .",
    "reasoning about effects of concurrent actions .",
    ", * 31 * , 85118 .",
    "baral , c. , & son , t. ( 1997 ) .",
    "approximate reasoning about actions in presence of sensing and incomplete information .",
    "maluszynsky , jan ( ed ) , _ proceedings of international logic programming symposium_.    baral , c. , gelfond , m. , & provetti , a. ( 1997 ) .",
    "representing actions : laws , observations and hypotheses .",
    ", * 31*(13 ) , 201244 .",
    "cousot , p. ( 1990 ) .",
    "methods and logics for proving programs .",
    "van leeuwen , j. ( ed ) , _ handbook of theoretical computer science _ , vol .",
    "b. mit press and elsevier science publisher b.v .",
    "davey , b.  a. , & priestley , h.  a. ( 1990 ) . .",
    "cambridge mathematical text books .",
    "geffner , h. , & bonet , b. ( 1998 ) .",
    "high - level planning and control with incomplete information using pomdp s . .",
    "gelfond , m. ( 1994 ) .",
    "logic programming and reasoning with incomplete information .",
    ", 98116 .    gelfond , m. , & lifschitz , v. ( 1991 ) .",
    "classical negation in logic programs and disjunctive databases .",
    ", 365387 .",
    "gelfond , m. , & lifschitz , v. ( 1993 ) .",
    "representing actions and change by logic programs . , * 17*(2,3,4 ) , 301323 .",
    "gelfond , m. , & przymusinska , h. ( 1991 ) .",
    "definitions of epistemic specification .",
    "nerode , a. , marek , v.  w. , & subrahmanian , v.  s. ( eds ) , _ proceedings of first international workshop on logic programming and non - monotonic reasoning_.    kartha , e.  giunchiglia g.  n. , & lifschitz , v. ( 1997 ) . representing actions : indeterminacy and ramification . , * 95 * , 409443 .",
    "kartha , g.  n. , & lifschitz , v. ( 1994 ) .",
    "actions with indirect effects .",
    "doyle , j. , sandewall , e. , & torasso , p.",
    "( eds ) , _ proceedings of the fourth international conference on principles of knowledge representation and reasoning_.    levesque , h. ( 1996 ) .",
    "what is planning in the presence of sensing ?",
    "lifschitz , v. ( 1996 ) .",
    "two components of an action language . .",
    "lifschitz , v. , & turner , h. ( 1994 ) .",
    "splitting a logic program .",
    "van hentenryck , p. ( ed ) , _ proceedings of the eleventh international conference of logic programming_.    lobo , j. , minker , j. , & rajasekar , a. ( 1992 ) . .",
    "cambridge , massachusetts : mit press .",
    "lobo , j. , mendez , g. , & taylor , s. ( 1997 ) .",
    "adding knowledge to the action description language @xmath6 . .",
    "aaai press .",
    "manna , z. , & waldinger , r. ( 1987 ) . how to clear a block : a theory of plans .",
    ", * 3 * , 343377 .",
    "marek , w. , & truszczynski , m. ( 1991 ) .",
    "autoepistemic logic . , *",
    "38*(3 ) , 588619 .    mccain , n. , & turner .",
    ", h. ( 1997 ) . causal theories of action and change . .",
    "moore , r.c .",
    "semantical considerations on non - monotonic reasoning .",
    ", * 28 * , 7594 .",
    "scherl , r. , & levesque , h. ( 1993 ) .",
    "the frame problem and knowledge - producing actions . .",
    "thielscher , m. ( 1994 ) . representing actions in equational logic programming .",
    "van hentenryck , p. ( ed ) , _ proceedings of the international conference on logic programming_.",
    "let @xmath187 be the set of all situations and @xmath188 the set of all total functions @xmath11 mapping situations into situations , @xmath189 } .",
    "we say that for any pair of functions @xmath190 if and only if for any @xmath191 if @xmath192 , then @xmath193 .",
    "the next proposition follows from the above definition .",
    "the above relation @xmath486 defines a partial order in @xmath188 .",
    "moreover , this partial order is a complete semi - lattice with the bottom element equal to the function that maps every situation to @xmath195",
    ". we will denote the bottom element by @xmath487 .",
    "let @xmath124 be a plan and @xmath196 a function that maps plans and situations into situations .",
    "let @xmath44 be a conjunction of fluent literals .",
    "then , we define the function @xmath197 such that for any function @xmath198    @xmath199    our goal is to show that @xmath200 is continuous . for this",
    ", we will need to show that for any directed set @xmath488 , the least upper bound of @xmath23 , denoted by @xmath489 exists , and that @xmath490 .",
    "a directed set is a set such that for any finite subset of it , the least upper bound of that set exists , and belongs to the directed set .",
    "the existence of @xmath489 follows from the following proposition .",
    "[ directed ] let @xmath23 be a directed subset of @xmath188 , and let @xmath491 . if @xmath492 , for a situation @xmath45 , then for any @xmath493 either @xmath494 or @xmath495 .",
    "it follows from this proposition that , @xmath496 a similar function is defined by @xmath497 . this function will be used in the proof of the following theorem .    for any plan @xmath124 and any conjunction of fluent literals @xmath44 , the function @xmath200 is continuous with respect to the order @xmath486 .",
    "* proof : * let @xmath498 $ ] denote the function @xmath497 . to prove the theorem , it suffices to show that , for any directed set @xmath499 , @xmath500 $ ] .",
    "+ let @xmath45 be a situation . + * ( a ) * if @xmath44 is false in @xmath45 then for any @xmath501 , @xmath502 .",
    "hence ,    @xmath503(\\sigma).\\ ] ] * ( b ) * if @xmath44 is true in @xmath45 , then @xmath504 .",
    "let @xmath505(\\sigma ) = \\sigma^{'}$ ] .",
    "by proposition  [ directed ] , @xmath506 iff @xmath507 , for any @xmath491 since @xmath508 and @xmath23 is directed .",
    "therefore , @xmath509 must be @xmath195 . if @xmath510 , then for every @xmath491 such that @xmath511 , it must be the case that @xmath512 since @xmath508 and @xmath23 is directed",
    ". then @xmath513 .    *",
    "( c ) * when @xmath44 is neither true nor false in @xmath45 , the proof is similar to part ( a ) since @xmath514 for any @xmath515 .",
    "we define the powers of @xmath200 as follows :    1 .",
    "2 .   @xmath202 .",
    "3 .   @xmath516 .    from the continuity of @xmath200",
    "the corollary below follows .",
    "[ fixpoint ] the least fix - point of @xmath200 is @xmath517 .",
    "in this section we present the proof of theorem [ entailmentrel ] by givingn a detailed proof of the correctness of the translation for simple domains .",
    "the proof for the general case is a direct extension . in our proofs",
    "we will use the splitting lemma of extending logic programs @xcite . for completeness",
    "we will include some definitions and the statement of the lemma below .",
    "consider a nonempty set of symbols called atoms .",
    "a literal is an atom possibly preceded by the classical negation symbol @xmath10 .",
    "a rule is determined by three finite set of literals - the set of head literals , the set of positive subgoals and the set of negated subgoals .",
    "the rule with the head literals @xmath518 , the positive subgoals @xmath519 and the negated subgoals @xmath520 is written as        _",
    "( splitting set ) _",
    "@xcite a splitting set for a logic program @xmath263 is any set @xmath528 of literals such that , for every rule @xmath529 , if @xmath530 then @xmath531 . if @xmath528 is a splitting set for @xmath263 , we also say that @xmath528 splits @xmath263 .",
    "the set of rules @xmath529 such that @xmath531 is called the _ bottom _ of @xmath263 relative to the splitting set @xmath528 and is denoted by @xmath532 .",
    "the subprogram @xmath533 is called the _ top _ of @xmath263 relative to @xmath528 .    _",
    "( partial evaluation ) _ @xcite the partial evaluation of a program @xmath263 with splitting set @xmath528 w.r.t .",
    "a set of literals @xmath534 is the program @xmath535 defined as follows . for each rule",
    "@xmath529 such that : + @xmath536 + put in @xmath537 the rule @xmath538 which satisfies the following property : + @xmath539 .        _",
    "( splitting lemma ) _",
    "@xcite let @xmath528 be a splitting set for a program @xmath263 .",
    "a set @xmath8 of literals is a consistent answer set of @xmath263 if and only if @xmath544 for some solution @xmath540 to @xmath263 w.r.t .",
    "u.        1 .",
    "first , we will prove that the epistemic logic program translation models correctly the execution of a single non - sensing action .",
    "intuitively this can be done by looking at all the predicates of the form @xmath545 , for any non - sensing action @xmath9 .",
    "furthermore we should be able to replace the initial constant @xmath297 with any fixed situation constant @xmath441 of the form @xmath546 . in the proof",
    "we will show that given any situation constant @xmath441 , state @xmath37 , and 0-model of the domain @xmath80 , we can find a sub - set of the program @xmath547 in which assuming @xmath441 to be the initial situation constant one of its belief sets corresponds to @xmath80 .",
    "we will also prove the other direction .",
    "that is , for any belief set of the mentioned sub - set of @xmath547 , there exists a corresponding function @xmath80 , 0-model of @xmath23 .",
    "this covers the general case of a single non - sensing action applied to a situation since , by the definition of [ d - model ] , this reduces to the application of 0-interpretations to each of the states in the situation .",
    "the second part of the proof extends the first part to cover the execution of sensing actions . in this case",
    "the sub - set of @xmath547 includes rules with the modal operator @xmath215 .",
    "we show that each world view of the sub - program corresponds to an interpretation @xmath49 , model of @xmath23 .",
    "we also show that for any model @xmath49 of @xmath23 there is an associated world view of the sub - program .",
    "3 .   the next step extends step 2 from the application of a single action to the application of any sequence of actions by induction .",
    "the final step extends the proof from sequence a of actions to complex plans .",
    "the proof shows by structural induction on the complexity of the plans that given a fixed world view any plan ( that terminates ) can be reduced to the execution of a sequence of actions .",
    "given a situation constant @xmath441 , denote by @xmath548 the subprogram of @xmath549 that is restricted to those rules in @xmath547 , such that either the only situation constant appearing in the heads is of the form @xmath550 for an action symbol @xmath9 , or is of the form @xmath551 for a fluent literal @xmath11 and action symbol @xmath9 .",
    "for any possible action @xmath9 , we will denote by @xmath552 the subprogram of @xmath548 that is restricted to those rules in @xmath462 that only involve the action @xmath9 in its predicates , besides other action symbols occurring in @xmath441 .",
    "we call a domain description a _ universal _",
    "domain if there are no value propositions in the domain . given a universal domain description @xmath23 , and state @xmath37 , we denote by @xmath553 the domain consisting of @xmath554 .",
    "[ a1 ] for a domain description @xmath23 , let @xmath37 be a state , @xmath441 a situation constant , and @xmath80 a 0-interpretation , we define the set of literals @xmath555 as follows : + for any action @xmath9 and any fluent @xmath11 ,    1 .",
    "@xmath556 , 2 .",
    "@xmath557 , 3 .",
    "@xmath558 , 4 .",
    "5 .   @xmath560 if and only if there exists an object effect proposition of the form @xmath561 such that @xmath562 holds in @xmath37 or a non deterministic effect proposition of the form @xmath563 in @xmath23 such that @xmath564 holds in @xmath37 and @xmath11 holds @xmath153",
    "@xmath565 if and only if there exists an object effect proposition of the form @xmath566 such that @xmath567 or a non deterministic effect proposition of the form @xmath563 in @xmath23 such that @xmath564 and @xmath11 does not hold in @xmath153 .",
    "let @xmath23 be a domain description , @xmath80 a _ 0-interpretation _ , and @xmath37 a state .",
    "we will say that the pair @xmath568 is a _",
    "0-specific model _ of the domain description @xmath23 if @xmath37 is an initial state of @xmath23 and @xmath80 one of its 0-models .",
    "let @xmath23 be a consistent universal domain description with no knowledge laws , and @xmath37 a state .",
    "if @xmath568 is a 0-specific model of @xmath569 , then @xmath570 satisfies every rule in @xmath571 , for any situation constant @xmath441 .",
    "assume that @xmath568 is a _",
    "0-specific model _ of @xmath569 .",
    "then any fact @xmath572 or @xmath573 in @xmath574 is such that either @xmath572 is in @xmath575 or @xmath573 is in @xmath575 , which is obvious .",
    "furthermore , for any literal of the form @xmath572 ( resp .",
    "@xmath573 ) in @xmath574 obtained from the translation of a proposition of the form @xmath576 ( resp .",
    "@xmath577 ) , we will have by construction that @xmath578 ( resp .",
    "@xmath579 ) .",
    "now , let us take a pair of rules of the form      @xmath581 obtained from the translation of a proposition of the form @xmath582 , and assume that @xmath583",
    ". then by construction , @xmath564 holds in @xmath37 and @xmath584 .",
    "therefore @xmath585 and @xmath11 is in @xmath153 .",
    "consequently , @xmath586 holds in @xmath555 .",
    "now we will make several considerations on @xmath555 to evaluate the other rules ( ground instances of the inertia rule and rules obtained from the translation of non - deterministic effect propositions ) :    1 .",
    "@xmath551 holds in @xmath555 . + any rule of the form @xmath590 ( instance of the inertia rule )",
    "is removed from @xmath574 to verify that @xmath555 is a belief set of @xmath574 . moreover , by the definition of @xmath555 , there must be an effect proposition with one of the following forms @xmath591 with @xmath592 true in @xmath37 or @xmath593 in @xmath569 with @xmath592 true in @xmath37 and @xmath586 member of @xmath555 by case ( 3 ) above .",
    "so any pair of rules of the form + @xmath594 coming from the translation of a non - deterministic effect proposition of the form @xmath563 will be trivially satisfied in @xmath555 .",
    "the other two rules obtained from the non - deterministic effect propositions are of the form @xmath595 and they will also be removed from @xmath574 to verify that @xmath555 is a belief set of @xmath574 , since @xmath596 , and this concludes the proof for this case .",
    "@xmath597 holds in @xmath555 . +",
    "similar to previous case .",
    "neither @xmath551 nor @xmath597 are in @xmath555 .",
    "+ in this case we will have no effect propositions of the form : * @xmath598 * @xmath599 * @xmath600 + in @xmath569 with @xmath601 true in @xmath37 .",
    "therefore any rule @xmath522 in @xmath574 with predicates involving @xmath602 , @xmath9 and @xmath11 , will be such that the body of @xmath522 does not hold in @xmath555 , unless , possibly for those rules of the form + @xmath603 + @xmath604 + instances of the inertia rule .",
    "so we will verify these by cases , * @xmath572 holds in @xmath555 , then @xmath573 does not belong to @xmath575 and there is nothing to verify for the second rule .",
    "the first rule is transformed into + @xmath605 + and it is satisfied by @xmath555 because @xmath11 is in @xmath37 and since there are no effect propositions of the above types , and @xmath11 is true in @xmath606 , by definition of @xmath555 , we have @xmath607 .",
    "* @xmath573 holds in @xmath555 + the proof is similar to the previous case .",
    "[ a is a belief set ] let @xmath23 be a consistent universal domain description with no knowledge laws , and @xmath37 be a state .",
    "if @xmath568 is a 0-specific model of @xmath569 , then @xmath570 is a belief set of @xmath571 , for any situation constant @xmath441 .    by the above theorem we just need to prove that @xmath555 is minimal in the family of models of @xmath571",
    "let @xmath608 be a proper subset of @xmath555 and @xmath120 some predicate in @xmath609",
    ". then @xmath120 could be a literal of one of the following five types :    * @xmath610 , in this case there will be a fact in @xmath574 not covered by @xmath608 , so it would not be a belief set of @xmath574 .",
    "* @xmath611 . @xmath612",
    "since @xmath120 is in @xmath555 , ( we are assuming that @xmath568 is a 0-specific model ) there is no rule of the form `` @xmath613 '' in @xmath569 with @xmath614 holding in @xmath37 . ] therefore , * * if there is a rule `` @xmath615 '' in @xmath569 with @xmath564 holding in @xmath37 , there is a rule @xmath616 + in @xmath574 with @xmath617 members of @xmath555 and by ( i ) , + @xmath617 hold in @xmath608 , therefore this rule will not be satisfied in @xmath608 . * * if there is a rule @xmath618 with @xmath564 in @xmath37 , since + @xmath619 can not be in @xmath608 ( otherwise @xmath575 would be inconsistent ) and @xmath586 is not in @xmath608 , we will have that @xmath608 does not satisfies the rule + @xmath620 . * * if there are no effect propositions in @xmath569 involving @xmath9 and @xmath11 , then , we have that @xmath11 is in @xmath37 , because in this case @xmath612 if and only if @xmath157 , and the rule that will not be satisfied by @xmath608 is the ( ground instance of the ) inertia rule @xmath621 .",
    "* @xmath622 + the proof of this case is similar to the previous case .",
    "* @xmath623 + in this case we have that there is either an effect proposition of the form @xmath624 with @xmath564 true in @xmath37 or @xmath563 in @xmath569 with @xmath564 true in @xmath37 , and @xmath625 .",
    "+ hence , one of the following two rules are not satisfied in @xmath608 @xmath626 * @xmath627 .",
    "+ similar to previous case .    we prove completeness in two steps .",
    "first , we show that if a belief set of @xmath628 is defined as in defintion  [ a1 ] then @xmath568 is a 0-specific model of @xmath553 .",
    "then we show that every belief set of @xmath628 must be of this form .    [",
    "if phi0 is a 0,1 sp model ] let @xmath23 be a consistent universal domain description with no knowledge laws , @xmath80 a 0-interpretation , and @xmath37 a state .",
    "if @xmath555 is a _",
    "belief set _ of @xmath629 , then @xmath568 is a _",
    "0-specific model _ of @xmath569 .",
    "let @xmath555 be a belief set of @xmath574 .",
    "clearly , by construction , @xmath37 is an initial state of @xmath553 .",
    "now let @xmath11 be a fluent such that there is an effect proposition of the form `` @xmath630 '' in @xmath569 , and assume that @xmath564 hold in @xmath37 .",
    "then , by construction , there is a rule of the form        therefore @xmath633 and hence @xmath634 .",
    "the proof is analogous for effect propositions of the form @xmath635 . if @xmath11 is a fluent such that there are no effect propositions of the above two types we have two possible situations .    *",
    "( i ) * if there are no non - deterministic effect propositions of the form @xmath563 with @xmath564 holding in @xmath37 , we will have that there are no rules in @xmath574 such that @xmath551 appears in the head of the rule and whose body holds in @xmath555 . therefore by the rules        ( ground instances of the inertia rule ) , we will have that either @xmath586 is in @xmath555 or @xmath638 is in @xmath555 , since either @xmath39 or @xmath639 , forcing either @xmath572 or @xmath640 to be in @xmath575 .",
    "thus , @xmath586 ( resp .",
    "@xmath619 ) is in @xmath575 if and only if @xmath572 ( resp .",
    "@xmath573 ) is in @xmath555 .",
    "therefore @xmath641 if and only if @xmath11 is in @xmath37 .",
    "thus , since @xmath575 is a belief set of @xmath574 and the @xmath643 are assumed to belong to @xmath575 for every @xmath644 , then either @xmath586 or @xmath619 must be in @xmath555 , but not both . therefore it does not matter if @xmath11 is or is not part of @xmath153 .",
    "hence @xmath568 is a 0-specific model of @xmath569 .",
    "observe that for any domain description @xmath23 , any state @xmath37 and any initial situation constant @xmath441 , a set of predicates @xmath8 will be a belief set of @xmath548 if and only if @xmath8 is the union of belief sets of @xmath645 , for each possible action @xmath9 .",
    "@xmath646 with each @xmath647 a belief set of @xmath645 .",
    "this is because if @xmath648 and @xmath649 are two different actions then none of the predicates in rules in @xmath650 appear in any predicate of any rule in @xmath651 , so the computation of the belief sets for one of the programs does not affect the computation for the other one .    [ if a is a belief set ] given a consistent domain description @xmath23 , and a situation constant @xmath441 . if @xmath8 is a belief set for @xmath548 , then there exists a state @xmath37 , and a 0-specific model @xmath80 of @xmath569 such that @xmath652 .      by definition of @xmath653 , @xmath8 must be complete .",
    "that is , for any fluent @xmath11 we have that either @xmath572 is in @xmath8 or @xmath573 is in @xmath8 .",
    "thus , if we let @xmath654 and @xmath80 be such that for any possible action @xmath9 , @xmath655 if and only if @xmath656 , we will have by completeness that @xmath41 if and only if @xmath573 is in @xmath8 and @xmath657 if and only if @xmath658 . moreover , if some predicate @xmath551 is in @xmath8 then one of the following facts holds :    * there is a rule in @xmath548 whose body is @xmath659 and whose head is @xmath551 such that @xmath660 for any @xmath661 , and @xmath662 .",
    "thus , there must be an effect proposition of the form `` @xmath663 '' in @xmath23 with @xmath564 true in @xmath37 .",
    "* there is a rule in @xmath548 whose body is + @xmath664 , @xmath665 , @xmath666 + whose head is @xmath551 such that @xmath667 and each @xmath643 are in @xmath8 , for each @xmath661 , and @xmath589 is not in @xmath8 .",
    "therefore , in this case there exists a non - deterministic effect proposition of the form `` @xmath668 '' in @xmath23 with @xmath669 true in @xmath37 .",
    "if for some fluent @xmath11 , @xmath551 is in @xmath8 , we will have by similar reasons that there exists a proposition of the form @xmath670 in @xmath23 such that @xmath564 hold in @xmath37 and @xmath671 .",
    "we now extend the proof to handle sensing actions .",
    "let @xmath672 denote the set @xmath673 , where @xmath45 is the set of initial states of @xmath23 .",
    "note that the set can be empty if there is no state in @xmath45 that is an initial state of @xmath23 .      1 .",
    "@xmath45 is an initial situation of @xmath23 .",
    "2 .   for any non - sensing action @xmath9 , @xmath676 .",
    "3 .   for each sensing action @xmath9 , if + @xmath677 are all the knowledge laws in @xmath23 where @xmath9 occurs . then , @xmath81 must be consistent and if @xmath678 , @xmath679 ; otherwise @xmath680 such that each @xmath681 is a situation @xmath682-compatible with @xmath45 .",
    "( recall that since @xmath23 is simple , all the @xmath85 are different ) .                        as a corollary of the theorems [ [ a is a belief set ] , [ if a is a belief set ] ] we will have the soundness and completeness of the logic program translation for the execution of a single action ( sensing or not ) . the next corollary shows soundness and corollary  [ for 1-plans,2 ] shows completeness .",
    "let us suppose that @xmath674 is a 1-specific model of @xmath23 .",
    "we will prove that @xmath697 is a world view of @xmath548 .",
    "in other words , we will show that @xmath697 is the collection of belief sets of @xmath698_{\\bfas}$ ] ( see section [ elp ] for the definition of @xmath275_{\\bf a}$ ] and @xmath275^a_{\\bf a}$ ] ) . given an @xmath699 ,",
    "let @xmath700 , and denote by @xmath263 the program @xmath701^a_{\\bfas}$ ] which is equal to @xmath702^a_{\\bfas}$ ] union all the rules of the form @xmath703 and @xmath704 where @xmath11 is a fluent literal and @xmath9 is a sensing action .",
    "the set @xmath705 split @xmath698_{\\bfas}$ ] , and by theorem [ a is a belief set ] @xmath575 is a belief set of @xmath706 , moreover @xmath707 and any answer set of @xmath708_{\\aps } \\setminus \\pi^1_{(d^{n.s},s ) } ,   a_{\\phi_0,\\sigma , s)})$ ] is a belief set of @xmath709 .",
    "obviously any fact in @xmath711 is in @xmath8 , thus we will prove that any rule @xmath712 in @xmath263 holds in @xmath8 .",
    "let , for a given sensing action @xmath9 , @xmath713 be all the knowledge laws in @xmath23 , involving @xmath9 , and @xmath714 where each @xmath681 is @xmath715-compatible with @xmath45 .",
    "the rules @xmath712 in @xmath263 that mention @xmath9 either in its body or in its head will be evaluated as follows :    1 .   if @xmath716 or @xmath717 , there are no rules in the program with the predicate @xmath718 in the head that are not ground instances of domain independent rules ( because any rule in @xmath719 will be removed , to get @xmath702^a_{\\bfas}$ ] after checking + @xmath720 ) .",
    "2 .   if @xmath721 and @xmath722 , then either + \\(a ) @xmath723 , and @xmath724 . in this case",
    ", @xmath712 must be one of the following : + @xmath725 + @xmath78 + @xmath726 + @xmath727 + and each of these rules are verified in @xmath8 , because ; if @xmath728 is in @xmath8 or for some @xmath644 @xmath729 then @xmath730 or @xmath731 and in both cases @xmath732 , and hence , @xmath733,by definition of @xmath734 .",
    "+ \\(b ) @xmath723 , and @xmath735 this case is similar to ( a ) changing the last rule for + @xmath736 .",
    "3 .   @xmath721 and @xmath722 , and there exists @xmath737 , such that @xmath738 . in this case",
    ", there is only one rule that remains in the program ; + @xmath739 + now , if for any @xmath737 , @xmath740 , then @xmath741 , for every @xmath737 , and @xmath732 .",
    "thus , @xmath742 .",
    "4 .   from the domain",
    "independent rules , @xmath712 could also be of the form @xmath743 but , by construction of @xmath8 , @xmath744 , and thus , @xmath712 is satisfied by @xmath8 .",
    "the last rules to consider , also coming from the domain independent rules , are all the rules of the form @xmath745 , where @xmath11 is a fluent literal . if @xmath718 belongs to @xmath8 then , by construction , @xmath746 .",
    "therefore , by construction too , @xmath586 also belongs to @xmath8 , for every @xmath11 , fluent literal .    to prove the minimality of @xmath8 ,",
    "let @xmath747 be a proper subset of @xmath8 and @xmath748 a predicate in @xmath749 .. ] we will find a rule @xmath712 in @xmath698^a_{\\bfas}$ ] such that @xmath712 does not hold in @xmath747 .",
    "if @xmath748 is of the form @xmath551 , @xmath572 or @xmath586 , with @xmath9 a non - sensing action , then @xmath712 can be found in @xmath750^a_{\\bfas}$ ] by theorem  [ [ a is a belief set ] ] .",
    "thus , all these @xmath748 must be in @xmath747 .",
    "therefore , it suffices to consider the case when @xmath751 , with @xmath9 a sensing action .",
    "if @xmath752 , with @xmath11 a fluent literal , and the rule @xmath753 is satisfied in @xmath747 , then @xmath754 , in which case , if @xmath718 is in @xmath755 then @xmath756 , hence we will have that there exists an @xmath757 , such that @xmath758,then since @xmath81 is @xmath759-compatible with @xmath45 and the remark at the end of [ [ world view definition ] ] we will have that one rule @xmath712 of the following : @xmath760 has to be such that both i ) @xmath761^a_{\\bfas}$ ] and ii ) the fluent literals appearing on the body of @xmath712 will be in @xmath692 .",
    "hence the body of @xmath712 will be true in @xmath8 and therefore in @xmath747 , thus we can conclude that @xmath712 is not satisfied by @xmath747 .",
    "if @xmath718 is not in @xmath8 , then @xmath686 and @xmath586 is in @xmath8 , but this happens if and only if @xmath157 , which is true iff @xmath762 , and the inertia rule will not be true in @xmath747 . to complete the proof we need to show that any belief set of @xmath698_{\\bfas}$ ] is of the form @xmath763 , for some @xmath764",
    "take now @xmath8 , a belief set of @xmath698_{\\bfas}$ ] . by the splitting lemma ,",
    "the set @xmath765 sensing action } , is a belief set of @xmath706 .",
    "then by ( [ if a is a belief set ] ) there exists @xmath568 in @xmath683 such that @xmath766 taking @xmath684 , it only remains to be shown that for any sensing action @xmath9 , both of the following are satisfied : ( i ) if @xmath767 then @xmath768 , and ( ii ) @xmath769 .    for case ( i )",
    ", let @xmath767 . then , for any @xmath770 , @xmath771 .",
    "the rules with heads of the form @xmath586 and @xmath11 a fluent literal are : @xmath753 and the one of the ground instances of the inertia rule .",
    "the body of the first rule is false in @xmath8 because any rule with @xmath718 in its head must have its body false in @xmath8 .",
    "then , @xmath772 .",
    "( completeness ) [ for 1-plans,2 ] let @xmath23 be a consistent domain description . if @xmath274 is a world view of @xmath548 then there exists a 1-specific model @xmath674 of @xmath23 such that @xmath775 .",
    "let @xmath274 be a world view of @xmath548 .",
    "let @xmath776 . if @xmath777 , @xmath778 will be a 0-interpretation such that @xmath779 is a sensing action and @xmath11 is @xmath299 or a fluent literal } , which can be found making use of theorem  [ [ if a is a belief set ] ] .",
    "we define an interpretation @xmath49 such that @xmath780 , and @xmath781 for any sensing action @xmath9 .",
    "note that if @xmath674 is a 1-specific model of @xmath23 then @xmath782 for any @xmath777 .",
    "thus , we will show that @xmath674 is a 1-specific model of @xmath23 and we will have that @xmath783 .",
    "it is clear that @xmath45 is the initial situation of @xmath23 .",
    "then , if @xmath9 is a non - sensing action , by definition , @xmath784    if @xmath9 is a sensing action and , @xmath785 are exactly the knowledge laws where @xmath9 appears , we need to show that for each @xmath786 , there exists a @xmath681 , @xmath787-compatible with @xmath45 such that @xmath788 .    1 .",
    "if @xmath789 or @xmath790 then let @xmath791 .",
    "2 .   if @xmath792 and @xmath793 and @xmath794 , for @xmath795 , then : 1 .   if @xmath796 , then let @xmath797 .",
    "2 .   if @xmath798 , then let @xmath799 .",
    "if @xmath792 and @xmath793 and @xmath800 , for some @xmath795 , we let @xmath801 .      first we will show that if @xmath805 , then @xmath733 .",
    "let @xmath806 be an @xmath300 such that @xmath807 .",
    "thus , since @xmath808 then @xmath809 and @xmath810 and case ( 1 ) above does not occur , and one of the following cases must hold :    1 .",
    "@xmath811 , for every @xmath812 , and @xmath813 .",
    "therefore , either @xmath814 for some @xmath815 or @xmath816 .",
    "hence , @xmath817 or @xmath818 and the following rules will be part of @xmath698^a_{\\bfas}$ ] : + @xmath819 + @xmath820 + thus , @xmath742 .",
    "2 .   @xmath811 , for @xmath812 , and @xmath821 , is similar to ( 2.a ) .",
    "3 .   @xmath822 , for some @xmath812 .",
    "therefore , for every @xmath823 , @xmath824 .",
    "hence @xmath825 and the following rule will be part of @xmath698^a_{\\bfas}$ ] : + @xmath826 + thus , @xmath742 .",
    "for the other direction , assume @xmath742 .",
    "then , it must be the case that there exists a rule in @xmath698^a_{\\bfas}$ ] with @xmath718 in the head and its body true in @xmath8 .",
    "note that this rule can not be @xmath827 by the construction of @xmath8 .",
    "thus , @xmath828 and @xmath829 ; otherwise there will be no rule in @xmath698^a_{\\bfas}$ ] with @xmath393 in its head ( these are ground instances of rules derived from knowledge laws ) .",
    "we will inspect the remaining rules with @xmath718 in the head and we will show that there exists @xmath830 such that @xmath831 .    1 .",
    "if the rules are of the form : + @xmath819 + @xmath820 + then @xmath811 , for @xmath812 , and @xmath813 .",
    "therefore , since @xmath832 or @xmath833 has to belong to @xmath8 , @xmath831 .",
    "2 .   if the rules are of the form : + @xmath819 + @xmath834 + then , similar to 1 , @xmath811 , for @xmath812 , and @xmath821 .",
    "therefore , since @xmath832 or @xmath835 has to belong to @xmath8 , @xmath836 .",
    "3 .   if the rule is of the form : + @xmath826 + then @xmath822 , for some @xmath812 . therefore , since for every @xmath823 @xmath837 has to be in @xmath8 , @xmath838 .",
    "the next step is to show soundness and completeness for sequences of actions .",
    "sequences of actions are the most simple plans .",
    "we then extend the proof to plans of all classes .",
    "the general proof will be by induction on the complexity of the plans .",
    "thus , we start by formally defining complexity and other definitions required for the inductions",
    ".    we will define the _ complexity _ of a plan @xmath464 ( @xmath839 ) by : if the empty plan is @xmath128 $ ] , @xmath840 ) = 0 $ ] . for an action @xmath9 @xmath841 .",
    "for complex plans , @xmath842 and @xmath843 is @xmath844 and @xmath845 and @xmath846 $ ] is @xmath847    we will say that a plan @xmath124 is an @xmath184-_plan _ if it has complexity @xmath184 , it will be an @xmath848-_plan _ if it has complexity less or equal than @xmath184 .",
    "@xmath849 will denote the set of @xmath184-plans , and @xmath850 the set of @xmath848-plans .",
    "we define the complexity of a situation constant @xmath441 inductively as 0 if @xmath851 ; or 1 plus the complexity of @xmath467 if @xmath852 , for any action @xmath9 .",
    "a situation @xmath441 will be called an @xmath184-_situation _ if its complexity is @xmath184 .",
    "the complexity of a predicate of the form @xmath572 with @xmath11 a fluent literal , or @xmath589 , will be the complexity of @xmath441 , the complexity of predicates of the form @xmath551 , with @xmath11 a fluent literal and @xmath9 an action will be equal to the complexity of @xmath441 plus one , the complexity of predicates of the form @xmath853 will be the complexity of @xmath464 plus the complexity of @xmath854 , and the complexity of a predicate of the form @xmath855 will be the complexity of the plan @xmath464 .",
    "we will say that a predicate @xmath748 is an @xmath848-_predicate _ , if @xmath748 has complexity @xmath186 and @xmath856 .",
    "given a plan @xmath124 , @xmath857 $ ] will denote the plan @xmath124 and @xmath858 $ ] will denote the plan @xmath859 $ ] .",
    "denote by @xmath860 the subprogram of @xmath462 restricted to those rules in @xmath462 with @xmath848-predicates .",
    "note that in any k - predicate in @xmath860 , the constant situation is a sequence of k actions .      for any @xmath862",
    ", we will say that a pair @xmath674 where @xmath49 is an interpretation and @xmath45 a situation , is an @xmath863- _ specific model _ of @xmath23 if and only if it is an @xmath184-specific model of @xmath23 and for any sequence of actions @xmath864 , @xmath865,\\sigma))$ ] is a 1-specific model of @xmath861 ( i.e. @xmath23 minus the value propositions ) .",
    "@xmath674 will be a specific model of @xmath23 if it is an @xmath184-specific model of @xmath23 for any @xmath866 .    given a sequence of actions @xmath867 and a situation constant @xmath441 , @xmath868 denotes the situation constant @xmath869 , @xmath870 denotes the empty sequence and @xmath871 will be equal to @xmath441 . let @xmath872 be the set of all the sequences of @xmath184 actions . for any set of literals @xmath8 we take @xmath873 as the state such that @xmath874 .        * if @xmath877 , @xmath878 * if @xmath866 , let for any set @xmath8 of @xmath879-predicates , @xmath880 and @xmath881 denote the sets of @xmath882-predicates in @xmath8 and @xmath883-predicates in @xmath8 ( resp . ) .",
    "then , @xmath876 is defined as a family of sets @xmath8 of @xmath879-predicates , such that the following is satisfied : 1 .",
    "@xmath884 2 .",
    "if @xmath885 is in @xmath880 then @xmath886 with @xmath887 the set of all the predicates of the form @xmath888 or @xmath889 3 .",
    "if @xmath885 is not in @xmath880 then @xmath890 where @xmath887 is @xmath891 for some @xmath892 in + @xmath893 .",
    "given @xmath894 , a consistent domain description @xmath23 , a pair @xmath674 , @xmath184-specific model of @xmath23 , the initial situation constant @xmath297 .",
    "we will have that for any fluent literal @xmath11 and any sequence of actions @xmath867 , @xmath895 holds in @xmath896 if and only if @xmath897,\\sigma)$ ] .",
    "[ bf a is a world view ] given a consistent domain description @xmath23 and @xmath899 .",
    "@xmath900 is a world view of @xmath860 if and only if there exists a pair @xmath674 , @xmath184-specific model of @xmath23 such that @xmath901          @xmath902 @xmath904 let * a * be a world view of @xmath905 . as in definition",
    "[ bfa ] , define for any @xmath906 , @xmath880 to be the subset of @xmath8 restricted to those predicates in @xmath8 involving just @xmath848-predicates , so @xmath907 will be a world view of @xmath908 , and by inductive hypothesis there is a pair @xmath909 , @xmath184-specific model of @xmath23 such that @xmath910 .",
    "we first define an interpretation @xmath49 such that @xmath674 is @xmath863-specific model of @xmath23 . given an action @xmath9 ,",
    "let @xmath911 be the set @xmath912 and @xmath881 be @xmath913 union @xmath914 \\cap a \\end{array}\\ ] ] note that @xmath915 . by the splitting lemma , @xmath916 is a belief set of @xmath917^a_{\\bf    a}$ ] .",
    "hence by [ for 1-plans,2 ] there exists an interpretation @xmath330 and a 0-interpretation @xmath80 such that for any sequence of @xmath184 actions @xmath918 with @xmath919 , the following properties are satisfied :      defining @xmath49 such that for any sequence of actions @xmath924 if the atomic formula @xmath925 is not in @xmath880 , then @xmath926,\\sigma)$ ] is equal to @xmath927,\\sigma)$ ] , we will have that @xmath674 is an @xmath184-specific model of @xmath23 .",
    "moreover if we take @xmath49 such that for any action @xmath9 and any sequence of actions @xmath924 , @xmath928,\\sigma ) ) = \\phi_2(a,\\gamma_{\\phi}([seq_n],\\sigma))$ ] , we will have that for any sequence of actions @xmath924 , @xmath929,\\sigma))$ ] is a @xmath675-specific model of @xmath861 .",
    "therefore , @xmath674 is an @xmath863-specific model of @xmath23 .",
    "it is clear by construction that either the predicate @xmath925 is a member of @xmath880 , and by the inertia rules , @xmath881 is the set of predicates of the form @xmath888 and @xmath930 with @xmath9 an action , @xmath931 a sequence of @xmath184 actions and @xmath11 a fluent literal , or @xmath932 and for any sequence of @xmath184 actions @xmath918 the following propositions hold :        @xmath937 reciprocally , let @xmath674 be an @xmath883-specific model of @xmath23 .",
    "then , by [ for 1-plans ] , induction and by the splitting lemma , to prove that @xmath938 is a world view of @xmath905 , it suffices to show that for any @xmath8 , @xmath939 if and only if @xmath940 where @xmath880 is the set of predicates in @xmath8 of @xmath848-complexity and @xmath941 is a belief set of the program        first note that the belief sets of @xmath944_{\\bfa{n+1}}$ ] are the unions of belief sets of @xmath945_{\\bfa{n+1}}$ ] where @xmath918 is varying over the set of sequences of @xmath184 actions .",
    "this is so because these programs are independent of each other .",
    "1 .   @xmath947 , and @xmath948_{\\bfa{n+1}}$ ] has only the belief set @xmath949 with @xmath881 the set of predicates of the form @xmath950 or @xmath951 where @xmath9 is any action and @xmath11 is any fluent literal .",
    "2 .   @xmath952 and by theorem [ [ for 1-plans,2 ] ] , any belief set of + @xmath953_{\\bfa{n+1}}$ ] + is equal to @xmath954 for some 0-interpretation such that @xmath955,\\sigma))$ ] .      given a domain description @xmath23 , an initial situation constant @xmath297 and a specific - model @xmath674 of @xmath23 , we will denote by @xmath957 the following family of sets , @xmath958 if and only if for any @xmath866 there exist @xmath884 and @xmath959 with @xmath960 , and @xmath961 we will denote by @xmath962 the family of sets @xmath8 , such that @xmath8 is the union of sets @xmath963 and @xmath964 where @xmath963 is an element of @xmath965 and @xmath964 is a belief set of @xmath966^{a_{\\pi}}_{{\\bf a}^{\\omega}_{(\\phi,\\sigma , s_0)}}$ ]    [ bf a q ] given a consistent domain description @xmath23 and the initial situation constant @xmath297 , @xmath900 is a world view of @xmath462 , if and only if there exists a specific model @xmath674 of @xmath23 such that @xmath967 .      given a world view @xmath900 of @xmath968 , and @xmath906 , we will denote by @xmath963 the subset of @xmath8 restricted to those predicates in @xmath8 of the form @xmath572 or @xmath551 where @xmath441 is a situation constant and @xmath9 is an action , then the set @xmath969 is a world view of @xmath462 , and by ( [ bf a is a world view ] ) there exists a specific model of @xmath462 such that @xmath970 is equal to @xmath957 , since @xmath971^a_{\\bf a}$ ] is equal to @xmath971^a_{\\bfa{\\omega}}$ ] , applying the splitting lemma to @xmath972^a_{\\bf a } = [ \\pi_d]^a_{\\bf a }   \\cup [ q]^a_{\\bf a}$ ] we have the result .",
    "[ seq(plan , s ) ] let @xmath23 be a domain description , @xmath297 be an initial constant situation and @xmath674 be a specific model of @xmath23 .",
    "then , given a sequence of actions @xmath973 , and the situation constant @xmath974 , we will have that , for any situation constant @xmath854 and any plan @xmath464 , there exists a sequence of actions @xmath975 such that @xmath976,\\sigma)$ ] is equal to @xmath977,\\sigma)$ ] and for any @xmath978 , @xmath979 belongs to @xmath8 if and only if @xmath980 .      the proof will be a double induction , using the loop nesting in the plan and the complexity of the plans .",
    "thus , the while - complexity of a plan @xmath464 , denoted by @xmath981 , is 0 if @xmath464 is either the empty plan @xmath128 $ ] or an action @xmath9 , @xmath982 if @xmath983 or @xmath984 $ ] , @xmath985 if @xmath986 .      * if @xmath988 $ ] , the result is immediate , because @xmath989,\\sigma ) ) = \\gamma_{\\phi } ( [    ] , \\gamma_{\\phi}([seq],\\sigma)),\\ ] ] and for any @xmath978 @xmath990,s , s_1)$ ] is in @xmath8 if and only if @xmath991 . therefore taking @xmath992",
    "the claim follows .",
    "* suppose the theorem is valid for @xmath848-plans .",
    "* let @xmath993 be an @xmath883-plan .",
    "then we have the following possibilities + \\i ) @xmath994 $ ] where @xmath124 is an @xmath184-plan and @xmath9 is an action .",
    "then , by inductive hypothesis @xmath995,\\sigma))$ ] is equal to @xmath996,\\sigma)$ ] , therefore we will have that @xmath997,\\sigma ) ) = \\\\ \\gamma_{\\phi}([a,\\alpha],\\gamma_{\\phi}([seq],\\sigma ) ) = \\\\",
    "\\gamma_{\\phi}(\\alpha,\\gamma_{\\phi}([seq , a],\\sigma ) ) = \\\\",
    "\\gamma_{\\phi}([seq_{(\\alpha , res(a , s))}],\\gamma_{\\phi}([seq , a],\\sigma ) ) = \\\\",
    "\\gamma_{\\phi}([a , seq_{(\\alpha , res(a , s))}],\\gamma_{\\phi}([seq],\\sigma ) ) = \\\\",
    "\\gamma_{\\phi}([seq_{(\\beta , s)}],\\gamma_{\\phi}([seq],\\sigma ) ) = \\\\",
    "\\gamma_{\\phi}([seq , seq_{(\\beta , s)}],\\sigma ) .",
    "\\end{array}\\ ] ] + moreover for any @xmath8 in @xmath998 , @xmath979 is in @xmath8 if and only if + @xmath999 is in @xmath8 .",
    "+ thus , if we take @xmath1000 , since by inductive hypothesis @xmath1001,res(a , s),s_1)$ ] is in @xmath8 if and only if @xmath854 is equal to @xmath1002 , we have that @xmath990,s , s_1)$ ] is in @xmath8 if and only if @xmath1003 which is equal to the situation @xmath1004 , and @xmath1005,\\gamma_{\\phi}([seq],\\sigma ) ) =",
    "\\\\   \\gamma_{\\phi}([seq , seq_{(\\beta , s)}],\\gamma_{\\phi}([seq],\\sigma ) ) = \\\\ \\gamma_{\\phi}([seq_{(\\beta , s)}],\\gamma_{\\phi}([seq],\\sigma ) )   \\end{array}\\ ] ] + \\ii ) @xmath1006 $ ] where @xmath1007 are @xmath1008 and @xmath1009-plans respectively , with @xmath1010 then , we have that for any @xmath8 in @xmath998 , @xmath979 is in @xmath8 if and only if either : + i ) @xmath1011 holds in @xmath998 and @xmath1012,s , s_1)$ ] is in @xmath8 , + or + \\ii ) @xmath1013 holds in @xmath998 and @xmath1014,s , s_1)$ ] is in @xmath8 .",
    "+ by inductive hypothesis @xmath1015,\\sigma))$ ] is equal to @xmath1016,\\sigma)$ ] and @xmath1017,$ ] @xmath1018,\\sigma))$ ] is equal to @xmath1019,s)}],\\sigma)$ ] for the sequences of actions @xmath1020 and @xmath1021,s)}$ ] + hence by [ [ f in phi iff holds(f ) in a ] ] and inductive hypothesis , @xmath979 is in @xmath8 if and only if either + \\i ) @xmath1022 holds in @xmath1018,\\sigma)$ ] , and @xmath1023 .",
    "+ or + \\ii ) @xmath44 holds in @xmath1018,\\sigma)$ ] , and @xmath1024,s)}),s_0)$ ] .",
    "+ thus , if we take @xmath1025 in case i ) , and in case ii ) @xmath975 equal to @xmath1021,s)}$ ] we will have that @xmath1026,\\sigma ) ) =   \\gamma_{\\phi}([seq , seq_{(\\beta , s)}],\\sigma))$ ] and @xmath979 , belongs to @xmath8 if and only if @xmath854 is equal to the situation @xmath1004 .",
    "+ \\iii ) @xmath1027 $ ] , where @xmath1028 and @xmath131 are @xmath1029 and @xmath1009-plans ( resp . ) with @xmath1030 .",
    "this case is similar to the previous one .",
    "+ \\iv ) @xmath1031 $ ] , where @xmath130 and @xmath131 are @xmath1008 and @xmath1009-plans ( resp . ) , with @xmath1032 .",
    "here we may suppose by inductive hypothesis that for any @xmath1033 the plans @xmath1034 $ ] and @xmath1035 $ ] verify the theorem , and we will denote by @xmath1036 the sequence @xmath1037 and by @xmath1038 the sequence @xmath1039,res((seq_{([\\alpha_1^k],s)}),s_0))}$ ] .",
    "+ using the fix - point operator @xmath1040 defined by @xmath1041 a rule @xmath1042 in @xmath263 with each @xmath1043 a fact in @xmath1044 , for any positive logic program @xmath263 , we know that if @xmath1045 is defined to be equal to @xmath1046 and @xmath1047 , then @xmath1048 , which is the set @xmath1049 , is a fix - point for @xmath1050 . moreover @xmath8 is a belief set for @xmath1051^a_{\\bfa{q}}$ ] if and only if @xmath1052^a_{\\bfa{q}}}\\!\\!\\uparrow^\\omega.\\ ] ] therefore , @xmath1053 is in @xmath8 if and only if there exists @xmath1033 such that @xmath1054 is in @xmath1055^a_{\\bfa{q}}}\\!\\!\\uparrow^{k+1}$ ] .",
    "+ let @xmath1056 be the minimum @xmath806 such that @xmath748 belongs to @xmath1055^a_{\\bfa{q}}}\\!\\!\\uparrow^{k+1}$ ] .",
    "we have that @xmath1057^a_{\\bfa{q}}}\\!\\!\\uparrow^{k_0 + 1}$ ] , if and only if there exists @xmath186 such that the following properties are satisfied : + 1 ) for any @xmath1058 @xmath1059 holds in @xmath998 + 2 ) @xmath1060 holds in @xmath998 + 3 ) @xmath1061,s , s ' ) \\in a$ ] + 4 ) @xmath1012,s',s_1 ) \\in a$ ] + if we fix @xmath186 with properties ( 1 ) , ( 2 ) , ( 3 ) and ( 4 ) , we have by inductive hypothesis and [ [ f in phi iff holds(f ) in a ] ] that , @xmath1062 if and only if @xmath44 holds in @xmath1063,s_0)$ ] , @xmath1064 and @xmath1065 . hence taking @xmath1066",
    ", we will have that @xmath1026,\\sigma)$ ] is equal to @xmath1067,\\sigma)$ ] and @xmath1062 if and only if @xmath1068 .",
    "given a consistent domain description @xmath23 , the initial situation constant @xmath297 and a specific model of @xmath23 , @xmath674 , we will have that for any fluent @xmath11 and any plan @xmath464 , @xmath1069 holds in @xmath998 if and only if @xmath1070 .",
    "let @xmath1071 be the sequence of actions described in [ [ seq(plan , s ) ] ] , such that @xmath1072,\\sigma)$ ] and @xmath1073 holds in @xmath998 if and only if @xmath1074 .",
    "then since @xmath1069 holds in @xmath998 if and only if @xmath1073 and @xmath1075 hold in @xmath998 , we have by [ [ f in phi iff holds(f ) in a ] ] @xmath1069 holds in @xmath998 if and only if @xmath1076,\\sigma)= \\gamma_{\\phi}(\\beta,\\sigma)$ ] ."
  ],
  "abstract_text": [
    "<S> we introduce @xmath0 , an extension of the action description language @xmath1 @xcite to handle actions which affect knowledge . </S>",
    "<S> we use sensing actions to increase an agent s knowledge of the world and non - deterministic actions to remove knowledge . </S>",
    "<S> we include complex plans involving conditionals and loops in our query language for hypothetical reasoning . </S>",
    "<S> we also present a translation of @xmath0 domain descriptions into epistemic logic programs . </S>"
  ]
}