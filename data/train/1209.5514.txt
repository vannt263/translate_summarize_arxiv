{
  "article_text": [
    "in this paper , we study the family @xmath0 of undirected , unlabelled , connected cubic graphs on @xmath1 vertices , where @xmath2 is a positive integer greater or equal to @xmath3 .",
    "we recall that a cubic graph has exactly three edges incident on every vertex . in our study",
    "we will be concerned with the problem of generating complex cubic graphs by appropriate compositions of simpler cubic graphs in a manner somewhat analogous to genetic  breeding \" .",
    "this will be achieved with the help of six  breeding operations \" .",
    "cubic graphs that can not be seen as resulting from such operations will be called  genes \" , and all other cubic graphs will be called ",
    "descendants `` . of course",
    ", descendants constitute a majority of cubic graphs .",
    "we will prove that every descendant graph can be created from a finite set of genes .",
    "since a lot of the structure in a descendant is inherited from the genes , many properties of those genes are inherited as well .",
    "this motivates the introduction of inverse operations '' that , ultimately , decompose a given descendant into a set of ancestor genes \" .",
    "such a decomposition could subsequently be used with other graph theory algorithms to improve solving time .",
    "undirected cubic graphs have been extensively studied in the literature ( e.g. , see @xcite , @xcite @xcite ) . in particular , there are now programs that enumerate all instances ( up to an automorphism ) of cubic graphs on @xmath4 vertices ( e.g. , see @xcite ) .",
    "a significant line of research concerns generation of cubic graphs with the help of an exponential generating function ( e.g. , see @xcite , @xcite , @xcite ) .",
    "to the extent that , in this paper , we generate descendant cubic graphs , the present contribution is conceptually , but not methodologically , related to the preceding .    the construction of ancestors and descendants of cubic graphs could be seen as being related to the work of mckay and royle @xcite . however , a feature of our approach is that all ancestors and descendants remain in the class of cubic graphs , and collectively constitute the entire set of connected cubic graphs .",
    "this enables us to study those properties of cubic graphs that may be  inherited \" from simpler cubic graphs .",
    "furthermore , the construction methods are quite different from those in @xcite .",
    "the work of batagelj @xcite is also similar to ours in that it is concerned with the generation of complex cubic graphs from simpler cubic graphs , where the former maintain the properties of the latter .",
    "in fact , some of the generating rules given in @xcite are analogous to some of the breeding operations in this paper .",
    "however , the two approaches differ in that batagelj s approach involves starting with a single cubic graph and replacing particular structures within the graph sequentially . in our approach , the majority of development occurs by combining multiple cubic graphs together , with the resulting graph being more complex than both parents .",
    "importantly , preliminary numerical experimentation revealed a surprising unique ancestors property \" that is either very common or , as we believe , universal .",
    "namely , we conjecture that : _ given any descendant cubic graph @xmath5 there exists a unique set of genes from which @xmath5 can be derived by a finite sequence of the six breeding operations .",
    "_ of course , there may well be a multitude of sequences of breeding operations that lead from the ancestor genes to @xmath5 .",
    "however , if the above conjecture holds , then all possible decomposition pathways of @xmath5 into its ancestor genes will ultimately lead to a unique set of ancestor genes .",
    "at the conclusion of this manuscript , we conjecture that any given descendant can be obtained via our approach through a particular set of ancestor genes , and provide numerical evidence supporting this conjecture .",
    "if true , this conjecture , combined with the proof of existence of ancestor genes for any descendant , implies that our approach permits a unique decomposition for every cubic graph .",
    "a standard concept in graph theory is that of _ edge connectivity_. in the simple case in which removing a single , specific edge would disconnect the graph , that edge is called a _",
    "bridge_. extending this notion a set of edges @xmath6 constitutes an _ edge cut _ if their removal disconnects the graph .",
    "the smallest cardinality of an edge cut in a given graph @xmath7 is defined to be the _ edge - connectivity _ of that graph . of course",
    ", cubic graphs can be @xmath8edge - connected for only three values of @xmath9 : @xmath10 or @xmath11 .",
    "we note , however , that in some @xmath12edge - connected cubic graphs ( e.g. , the famous petersen graph , see figure [ fig : petersen ] ) the removal of any minimal edge cut set isolates a single vertex .",
    "arguably , such a partition of vertices is in a sense degenerate , and prevents a more refined classification of cubic graphs . to address this problem and achieve a finer classification we introduce a special class of edge cut",
    "sets that we name _",
    "crackers_. the latter are defined as follows .",
    "an edge cut set of a cubic graph @xmath13 consisting of @xmath9 edges is a _ @xmath9-cracker _",
    "if no two edges are adjacent in the sense of being incident on the same vertex , and no proper subset of these edges disconnects the graph.[k - cracker ]    the removal of a cracker from a connected graph results in exactly two disjoint components .",
    "since any cracker is an edge cut set , the removal of a cracker must result in at least two disjoint components .",
    "assume there exists a cracker @xmath14 whose removal results in more than two disjoint components .",
    "we can think of the removal of @xmath15 as a series of individual edge removals , for each edge in @xmath15 .",
    "it is clear that the removal of a single edge can not result in more than one additional disjoint component .",
    "therefore , after removing edges @xmath16 , but before removing edge @xmath17 , there must already be at least two disjoint components .",
    "however , this implies that a proper subset of @xmath15 also disconnects the graph , which violates definition [ k - cracker ] .",
    "therefore , @xmath15 is not a cracker , and the initial assumption is false .    of course , any cracker is not only an edge cut set , but in fact a _",
    "cyclic edge cut set_. this is clear because its removal disconnects the graph into two connected subgraphs , each of which must contain at least three vertices . since each remaining vertex has degree at least two ( as only non - adjacent edges were removed ) , these connected subgraphs must contain cycles .",
    "it is then clear that a minimal cyclic edge cut set in a given cubic graph is a cracker of minimal size for that graph .",
    "however , larger cyclic edge cut sets may contain adjacent edges , and therefore not all cyclic edge cut sets are crackers .",
    "we recall that the _ girth _ , @xmath18 , of a graph is the length of the shortest ( nontrivial ) cycle in the graph . in many cases , a nontrivial cycle determining",
    "a cubic graph s girth automatically defines a @xmath18-cracker made up of edges that are not in the cycle but which have one vertex on the cycle .",
    "however , many graphs have crackers of size less than @xmath18 .",
    "for instance , it is easy to see that in the graph given in figure [ fig : twocracker ] , @xmath19 but the edges @xmath20 and @xmath21 form a @xmath3-cracker and no @xmath22-cracker exists in this graph .",
    "+    we note also that there are only two connected cubic graphs , on @xmath23 and @xmath24 vertices respectively , that contain no crackers at all ( see figure [ fig - graph_4_and_graph_6 ] and the discussion in section [ s : motiv ] ) .",
    "note that , since the minimal cyclic edge cut set in a cubic graph is a cracker , it is clear that for any given cubic graph , the cyclic edge connectivity is equal to the size of the smallest cracker in that graph . for the sake of simplifying the notation , we will refer to a cyclically @xmath9-connected graph as a c@xmath9-connected graph",
    ". the class of all c@xmath9-connected cubic graphs on @xmath4 vertices will be denoted by @xmath25 , or simply by @xmath26 , when the number of vertices is fixed.[rem - cyclic ]    we note that the famous petersen graph is c5-connected in the above sense ( see figure [ fig : petersen ] ) , as the edges connecting the  inner - star \" to the outer boundary form one of a number of @xmath27crackers , and no smaller crackers exist in this graph .",
    "it follows immediately from remark [ rem - cyclic ] that ( for fixed @xmath28 ) the class @xmath15 of connected cubic graphs can be partitioned as @xmath29 where @xmath30 .",
    "the choice of upper bound is conservative because at most @xmath31 non - adjacent edges can be chosen in any graph of size @xmath4 , but in reality it is likely that far fewer than @xmath31 partitions will be required for any given @xmath4 .",
    "for instance , when @xmath32 , @xmath33 .",
    "if a cubic graph @xmath13 is c@xmath9-connected for @xmath34 , we call it a _ gene_. otherwise , we call @xmath13 a _ descendant_.[def - gene_descendant ]    the reasoning behind the choice of names _ gene _ and _ descendant _ is made clear in section [ sec : breeding ] , where we demonstrate that any descendant can be obtained from a set of genes , through the use of prescribed _ breeding operations _ that introduce crackers into a descendant .",
    "experiments have shown that genes are far less numerous than descendants .",
    "it was mentioned earlier that two cubic graphs , namely the 4-vertex gene @xmath35 and the 6-vertex gene @xmath36 , contain no crackers at all .",
    "these two graphs can be seen in figure [ fig - graph_4_and_graph_6 ] .",
    "the following lemma proves that every other cubic graph contains at least one cracker , and that the size of the smallest cracker is bounded above by the girth of the graph .",
    "+    [ prop - boundgirth ] except for @xmath35 and @xmath36 , all connected cubic graphs contain at least one cracker of size no more than the girth @xmath18 of the graph.[lem - all_cracker ]    the cases of @xmath35 and @xmath36 can be confirmed by inspection .",
    "there is one other cubic graph containing 6 vertices , with girth 3 , which contains a 3-cracker , as displayed in figure [ fig - envelope ] .",
    "so the lemma is true for @xmath37 .    for any cubic graph containing 8 or more vertices ,",
    "it was proved in lou et al @xcite that there exists at least one cyclic edge cut set of size @xmath18 .",
    "the smallest cyclic edge cut set in a cubic graph is a cracker , so it is clear that the smallest cracker can be of size no bigger than @xmath18 .",
    "+    in section [ sec - results ] , it is proved that any descendant graph can be obtained from a set of genes .",
    "it is our hope that descendants inherit many of their properties from the genes used to construct them .",
    "if so , any analysis of such a descendant could be reduced to the problem of analysing the component genes , which are often much smaller than the descendant .",
    "the subsequent investigation of graph theoretic properties in sets of genes is a natural topic for future research .",
    "one such graph theoretic property of interest is that of _ hamiltonicity _ , that is , the property of containing a simple cycle of length equal to the number of vertices in the graph .",
    "we observe that non - hamiltonian genes are extremely rare . even excluding the ( trivially non - hamiltonian ) _ bridge graphs _",
    ", non - hamiltonian descendants constitute a large majority of the remaining non - hamiltonian graphs ; see table [ tab : prevalancenh ] .",
    "the second column of that table , labelled by @xmath38 , lists the percentages of bridge graphs relative to the total cardinality of non - hamiltonian graphs , denoted by @xmath39 .",
    "the third column labelled by @xmath40 , lists the percentages of graphs two or more cyclically edge connected relative to the cardinality of @xmath39 . the fourth column labelled by @xmath41 ,",
    "lists the percentages of graphs four or more cyclically edge connected relative to the cardinality of @xmath39 .",
    "finally , the fifth column labelled by @xmath42 , lists the percentages of graphs four or more cyclically edge connected relative to the cardinality of all non - bridge , non - hamiltonian , graphs in @xmath43 .",
    "we shall define graphs in @xmath44 as _ mutants _ , a name that properly reflects their exceptionality .",
    "for instance , we note from the fourth column of table [ tab : prevalancenh ] that with @xmath45 only @xmath46 of one percent are mutants , which corresponds to two ( out of 1666 ) non - hamiltonian cubic graphs on @xmath47 vertices .",
    "these two mutants are the famous blanusa snarks @xcite .",
    "in fact , it is no coincidence that the blanusa snarks appear as mutants in this framework . in read and wilson @xcite ,",
    "the definition of an irreducible snark is given as a cubic graph with edge chromatic number of 4 , girth 5 or more , and not containing three edges whose deletion results in a disconnected graph , each of whose components is nontrivial .",
    "this final condition , along with the well known fact that all snarks are non - hamiltonian , is akin to our definition of a mutant .",
    "therefore , the set of all mutants is a superset of the set of all irreducible snarks .",
    "however , some non - snark mutants do exist , and therefore have either girth 4 or an edge chromatic number of 3 ( or both ) .",
    "in particular , the bh - mutant , displayed in figure [ fig : bhmutant ] is the smallest non - snark mutant , and has an edge chromatic number of 3 .",
    "there are 16 further non - snark mutants of size 22 , one of which is the zircon - mutant , also displayed in figure [ fig : bhmutant ] .",
    "the zircon - mutant also has an edge chromatic number of 3 .",
    ".distribution of non - hamiltonian ( nh ) c@xmath9-connected graphs [ cols=\"^,^,^,^,^\",options=\"header \" , ]      +",
    "from definition [ def - gene_descendant ] , it is clear that genes do not contain any 1-crackers , @xmath3-crackers , or @xmath11-crackers .",
    "collectively , we refer to 1-crackers , @xmath3-crackers and @xmath11-crackers as _",
    "cubic crackers_. as a corollary , descendants must contain at least one cubic cracker .",
    "it then seems plausible that we might be able to construct any given descendant by combining two or more cubic graphs together in such a fashion as to create the cubic crackers present in that descendant graph .",
    "since there are three different types of cubic crackers , we define three _ breeding operations _ that map two cubic graphs to a single descendant by inserting a cubic cracker between them in such a fashion as to retain cubicity .",
    "in such a case , we say that the descendant has been obtained by _",
    "breeding_. we refer to the original two cubic graphs as the _ parents _ of the descendant graph , and likewise the descendant graph is the _ child _ of the two parents .    note that the following operations are defined only for cubic graphs .",
    "although they work for disconnected cubic graphs , in this manuscript we are interested only in connected cubic graphs , and make the assumption that all input graphs are indeed connected and cubic .      a _",
    "type 1 breeding operation _ is a function @xmath48 defined on the tuple @xmath49 , where @xmath50 and @xmath51 are cubic graphs , and furthermore , @xmath52 and @xmath53 .",
    "this function maps such a tuple onto another tuple @xmath54 as follows @xmath55    where @xmath56 and @xmath57 .",
    "the new set of vertices is @xmath58 .",
    "the new set of edges is @xmath59.[def - breed1 ]     +    note that a type 1 breeding operation always outputs a _ bridge graph _ ( that is , a c1-connected graph ) .",
    "see figure [ fig - type_1_breeding ] for an illustration .    a _ type 2 breeding operation _ is a function @xmath60 defined on the tuple @xmath49 , where @xmath50 and @xmath51 are cubic graphs , and furthermore , @xmath52 and @xmath53 and neither edge is a @xmath22-cracker .",
    "this function maps such a tuple onto another tuple @xmath61 as follows @xmath62    where @xmath56 and @xmath63 .",
    "the new set of vertices is @xmath64 .",
    "the new set of edges is @xmath65.[def - breed2 ]    [ h ]     +    clearly @xmath66 contains the @xmath3-cracker @xmath67",
    ". see figure [ fig - type_2_breeding ] for an illustration .",
    "note also that a type 2 breeding operation always creates a 2-edge - connected descendant , unless either of @xmath68 or @xmath69 is 1-edge - connected ( in which case , @xmath66 is also 1-edge - connected ) .",
    "a _ type 3 breeding operation _ is a function @xmath70 defined on the tuple @xmath71 , where @xmath50 and @xmath51 are cubic graphs , and furthermore , @xmath72 is incident to vertices @xmath73 , @xmath74 and @xmath75 and @xmath76 is incident to vertices @xmath77 , @xmath78 and @xmath79 .",
    "none of the edges adjacent to @xmath80 or @xmath81 are @xmath22-crackers .",
    "this function maps such a tuple onto another tuple @xmath82 as follows @xmath83    where @xmath56 , and also , @xmath84 ) .",
    "the new set of vertices is @xmath85 .",
    "the new set of edges is @xmath86 .",
    "[ def - breed3 ]     +    see figure [ fig - type_3_breeding ] for an illustration of type 3 breeding .",
    "in addition to the preceding three breeding operations , we also define three _ parthenogenic operations_. these are operations that map a single descendant to a new , more complex , descendant by replacing a cracker in the original descendant with two new crackers .",
    "we say that such a new descendant has been obtained from _",
    "parthenogenesis_. for simplicity of terminology , we again refer to the original descendant as the _ parent _ of the new descendant , and likewise we refer to the new descendant as the _ child _ of the original descendant . also for simplicity of terminology",
    ", we refer to the the three breeding operations and the three parthenogenic operations collectively as the six _",
    "breeding operations_.    a _ type 1 parthenogenic operation _ is a function @xmath87 defined on the tuple @xmath88 where @xmath50 is a bridge graph and @xmath52 is a 1-cracker .",
    "this function maps such a tuple onto another tuple @xmath89 as follows @xmath90    where @xmath56 and @xmath91 .",
    "the new set of vertices is @xmath92 .",
    "the new set of edges is @xmath93 .",
    "this process inserts an additional @xmath22-cracker into @xmath66 .",
    "[ def - parth1 ]     +    we refer to the subgraph @xmath94 as the _ parthenogenic diamond _ , and say that a type 1 parthenogenic operation inserts a parthenogenic diamond into a bridge .",
    "see figure [ fig - type_1_parthenogenisis ] for an illustration .",
    "+    a _ type 2 parthenogenic operation _ is a function @xmath95 defined on the tuple @xmath96 where @xmath50 is a cubic graph containing a @xmath3-cracker comprising two edges @xmath97 and @xmath98 .",
    "this function maps such a tuple onto another tuple @xmath99 as follows    @xmath100    where @xmath56 and @xmath101 .",
    "the new set of vertices is @xmath102 .",
    "the new set of edges is @xmath103 .",
    "this process inserts an additional @xmath3-cracker into @xmath66.[def - parth2 ]     +    we refer to the subgraph @xmath104 as the _ parthenogenic bridge _ , and say that a type 2 parthenogenic operation inserts a parthenogenic bridge into a @xmath3-cracker . see figure [ fig - type_2_parthenogenisis ] for an illustration .",
    "+    a _ type 3 parthenogenic operation _ is a function @xmath105 defined on the tuple @xmath106 where @xmath50 is a bridge graph and @xmath107 is a vertex incident to a @xmath22-cracker composing an edge @xmath108 and is adjacent to vertices @xmath109 and @xmath110 .",
    "this function maps such a tuple onto another tuple @xmath111 as follows @xmath112    where @xmath56 and @xmath113 .",
    "the new set of vertices is @xmath102 .",
    "the new set of edges is @xmath114.[def - parth3 ]     +    we refer to the subgraph @xmath115 as the _ parthenogenic triangle _ , and say that a type 3 parthenogenic operation inserts a parthenogenic triangle next to the 1-cracker . see figure [ fig - type_3_parthenogenisis ] for an illustration .     +    a child graph resulting from any of the six breeding operations is connected .",
    "the nature of the six breeding operations is that the parent graphs are mostly unaltered , and are changed only in a neighbourhood of the introduced cubic cracker .",
    "therefore , we can focus just on these areas .",
    "since the parent graphs are ( by definition ) connected to begin with , we only need to be concerned with which edges , present in the parent graphs , are not present in the child graph .    for the cases of type 2 breeding , and types 1 and 2 parthenogenesis , only a single edge from the parent graph ( or from each of the parent graphs in the case of type 2 breeding ) is missing in the child graph . by definition",
    "this edge can not be a 1-cracker , and therefore , the parent graphs remain connected , and by construction it is clear that the adjoining cracker ensures the child graph is also connected .    for type 1 breeding ,",
    "only a single edge is removed from each parent graph .",
    "if neither edge is a 1-cracker , then the argument in the previous paragraph can be used to show the child graph is connected .",
    "however , it is possible that one or both removed edges could be 1-crackers .",
    "if so , the corresponding parent graphs become disconnected .",
    "however , if this is the case , the graphs are reconnected by the introduction of vertices @xmath80 and @xmath81 ( see definition [ def - breed1 ] ) .",
    "it is then clear by construction that the adjoining cracker ensures the child graph is also connected .    for type 3 breeding",
    ", a vertex is removed from both parent graphs . from definition [ def - breed3 ] , we know that none of the edges adjacent to these two vertices constitute 1-crackers .",
    "therefore , the removal of these vertices can not disconnect either graph . by construction",
    "it is then clear that the adjoining cracker ensures the child graph is also connected .",
    "finally , for type 3 parthenogenesis , although two ( adjacent ) edges from the parent graph are missing in the child graph , it is clear from the latter s construction that this can not result in a disconnected descendant .      for some tuples @xmath54 where @xmath116 is a @xmath22-cracker , the inverse operation @xmath117 is well defined .",
    "in such a case @xmath118 is called an _ irreducible _ @xmath22-cracker . if not @xmath118 will be called a _ reducible _ @xmath22-cracker .",
    "similarly if the inverse operation @xmath119 is well defined , where @xmath120 is a @xmath3-cracker , the 2-cracker is called an irreducible @xmath3-cracker and reducible @xmath3-cracker otherwise .",
    "we will show later that the inverse operation @xmath121 is always defined where @xmath122 is a @xmath11-cracker .",
    "therefore every 3-cracker is irreducible .    whenever a cubic cracker is irreducible one of the equations , and defines the corresponding inverse breeding operation @xmath123 , @xmath124 or @xmath125 .",
    "the two cubic graphs @xmath126 from the tuple produced by these operations are parents of @xmath66 .",
    "in particular , @xmath127 where @xmath66 , @xmath78 , @xmath68 , @xmath69 , @xmath20 and @xmath21 are defined in definition [ def - breed1 ] .",
    "similarly , @xmath128 where @xmath66 , @xmath129 , @xmath130 , @xmath68 , @xmath69 , @xmath20 and @xmath21 are defined in definition [ def - breed2 ] .",
    "also , @xmath131 where @xmath66 , @xmath20 , @xmath21 , @xmath129 , @xmath68 , @xmath69 , @xmath80 , @xmath81 , @xmath73 , @xmath74 , @xmath109 , @xmath77 , @xmath78 and @xmath132 are defined in definition [ def - breed3 ] .",
    "similarly , inverse parthenogenic operations can be defined as follows .",
    "equations , and define the corresponding inverse parthenogenic operations @xmath133 , @xmath134 or @xmath135 . the cubic graph @xmath136 from the tuple produced by these operations is a parent of @xmath66 . in particular , @xmath137 where @xmath66 , @xmath80 , @xmath138 , @xmath68 and @xmath20 are defined in definition [ def - parth1 ] . similarly ,    @xmath139    where @xmath66 , @xmath80 , @xmath81 , @xmath68 , @xmath20 and @xmath21 are defined in definition [ def - parth2 ] . also",
    ",    @xmath140    where @xmath66 , @xmath73 , @xmath68 , @xmath69 , @xmath80 and @xmath81 are defined in definition [ def - parth3 ] .",
    "collectively , we refer to the three inverse breeding operations and the three inverse parthenogenic operations as the six _",
    "inverse operations_.    it is important to note that the six breeding operations and the six inverse operations presented here are not entirely new , and have been used in various forms in other cubic graph generation routines . for example",
    ", type 2 parthenogenesis induces an _ h - subgraph _ which is well - studied in literature ( e.g. see ore @xcite ) .",
    "type 1 inverse parthenogenesis and type 1 inverse breeding appear as operation @xmath141 and operations @xmath142 respectively in ding and kanno @xcite .",
    "types 1 and 2 parthenogenesis appear in brinkmann @xcite .",
    "all of the six breeding operations except type 3 breeding appear in some sense as generating rules in batagelj @xcite , specifically generating rules p1 , p2 , p3 , p4 an p8 .",
    "however , all of the above works involve growing the complexity of a single graph by the evolution of subgraphs , rather than combining several cubic graphs together . in addition , the operations in the above works that are analogous to our parthenogenic operations are not confined to the same conditions as ours ( that is , they must occur on @xmath22-crackers and @xmath3-crackers ) .",
    "little consideration is given in the above works to procedures that are analogous to our inverse operations .",
    "the benefits and potency of the particular set of breeding and inverse operations that we have detailed in this section are demonstrated in the following section .",
    "the following three propositions relate to the different possible methods of creation of cubic crackers by the six breeding operations , and are used in the proof of the main theorem for this section , theorem [ theorem - anygraph ] .",
    "any descendant involving a 1-cracker can be obtained from either type 1 breeding , type 1 parthenogenesis , or type 3 parthenogenesis .",
    "[ prop-1cracker ]    consider a descendant @xmath143 containing a 1-cracker comprising an edge @xmath144 . since @xmath66 is cubic , @xmath80 and @xmath81 will both be adjacent to two more vertices , say @xmath145 and @xmath146 respectively . since the 1-cracker comprises edge @xmath144 , we know that @xmath145 and @xmath146 are disjoint sets .",
    "then , we can consider two cases .    * case 1 : * the edges @xmath147 and @xmath148 are not present in @xmath66 . in this case , the 1-cracker is irreducible .",
    "suppose the bridge @xmath144 is removed from @xmath66 , separating the graph into two subgraphs , @xmath149 and @xmath150 . without loss of generality , we assume that @xmath151 , and @xmath152 . then , we define a cubic graph @xmath50 , where @xmath153 and @xmath154 .",
    "similarly , we define a second cubic graph @xmath155 , where @xmath156 and @xmath157 .",
    "then , @xmath66 can be obtained from the type 1 breeding operation @xmath158 .",
    "+    * case 2 : * at least one of the edges @xmath147 or @xmath148 is present in @xmath66 . in this case , the 1-cracker can not be obtained from a type 1 breeding operation , as such an operation would remove these edges .",
    "a 1-cracker of this type is , therefore , reducible .",
    "if both edges are present , we can focus on either one . without loss of generality",
    ", we will assume that edge @xmath159 .",
    "then , since @xmath66 is cubic , and vertices @xmath73 and @xmath74 are both adjacent to vertex @xmath80 and to each other , they will also be adjacent to one more vertex each , say vertices @xmath78 and @xmath132 respectively .",
    "note that is is possible that @xmath160 , so we need to consider the cases separately .",
    "* case 2.1 : * @xmath160 .",
    "then , both edges @xmath161 and @xmath162 are in @xmath163 , as seen in the right panel of figure [ fig-1_cracker_case_21 ] .",
    "since @xmath66 is cubic , vertex @xmath78 is adjacent to a third vertex , say @xmath18 .",
    "clearly , edge @xmath164 is a bridge , since edge @xmath144 is a bridge .",
    "then , we define a cubic graph @xmath165 , where @xmath166 and @xmath167 .",
    "we can then obtain @xmath66 from the type 1 parthenogenic operation @xmath168 .",
    "+    * case 2.2 : * @xmath169 .",
    "then , as illustrated in figure [ fig-1_cracker_case_22 ] , we define a cubic graph @xmath165 , where @xmath170 and @xmath171 .",
    "then , we can obtain @xmath66 from the type 3 parthenogenic operation @xmath172 .",
    "+    any descendant involving a @xmath3-cracker can be obtained from either type 1 breeding , type 2 breeding , type 1 parthenogenesis , type 2 parthenogenesis , or type 3 parthenogenesis.[prop-2cracker ]    consider a descendant @xmath56 containing a @xmath3-cracker comprising edges @xmath144 and @xmath173 .",
    "we consider two cases .",
    "* case 1 : * neither edge @xmath174 nor @xmath175 are not present in @xmath66 , as illustrated in figure [ fig-2_cracker_case_1 ] . in this case , the 2-cracker is irreducible .",
    "suppose the edges @xmath144 and @xmath173 are removed from @xmath66 , separating the graph into two subgraphs @xmath176 and @xmath177 . without loss of generality ,",
    "we assume that @xmath178 and @xmath179 .",
    "then , we define a cubic graph @xmath50 , where @xmath180 and @xmath181 .",
    "similarly , we define a second cubic graph @xmath155 , where @xmath182 and @xmath183 .",
    "then , @xmath66 is obtained from the type 2 breeding operation @xmath184 .",
    "+    * case 2 : * at least one of the edges @xmath174 or @xmath175 is present in @xmath66 . in this case , the 2-cracker can not be obtained from a type 2 breeding operation , as such an operation would remove these edges .",
    "a 2-cracker of this type is therefore reducible .",
    "if both edges are present , we can focus on either one . without loss of generality",
    ", we will assume that edge @xmath185 .",
    "then , since @xmath66 is cubic , and vertex @xmath80 is adjacent to vertices @xmath81 and @xmath186 , it will be adjacent to one more vertex , say vertex @xmath73 . similarly , since vertex @xmath186 is adjacent to vertices @xmath80 and @xmath138",
    ", it will be adjacent to one more vertex , say vertex @xmath74 .",
    "note that it is possible that @xmath187 , so we need to consider the cases separately .",
    "* case 2.1 : * @xmath188 . in this case ,",
    "edge @xmath189 and edge @xmath190 , as illustrated in figure [ fig-2_cracker_case_21 ] .",
    "since @xmath66 is cubic , vertex @xmath73 is adjacent to a third vertex , say @xmath109 .",
    "clearly , edge @xmath191 is a bridge .",
    "then , we define a cubic graph @xmath165 , where @xmath192 and @xmath193 . then",
    ", we can obtain @xmath66 from the type 3 parthenogenic operation @xmath194 .",
    "note that this case is essentially the same as case 2.2 in proposition [ prop-1cracker ] .",
    "+    * case 2.2 : * @xmath195 .",
    "it is obvious that the non - adjacent edges @xmath196 and @xmath197 form a cutset .",
    "this implies that either both edges are @xmath22-crackers , or together they form a @xmath3-cracker .",
    "the former situation is covered in proposition [ prop : graphs_with_1_cracker ] and @xmath66 can be obtained from either type 1 breeding , type 1 parthenogenesis , or type 3 parthenogenesis . for the latter situation ,",
    "let us define a cubic graph @xmath50 , where @xmath198 and @xmath199 , as illustrated in figure [ fig-2_cracker_case_22 ] .",
    "we can then obtain @xmath66 from the type 2 parthenogenic operation @xmath200 .",
    "+    any descendant involving a @xmath11-cracker can be obtained from type 3 breeding.[prop-3cracker ]    consider a descendant @xmath56 containing a @xmath11-cracker comprising edges @xmath144 , @xmath173 and @xmath201 , as illustrated in figure [ fig-3_cracker_case_1 ] . then",
    ", suppose the edges @xmath144 , @xmath173 and @xmath201 are removed from @xmath66 , separating the graph into two subgraphs @xmath202 and @xmath150 . without loss of generality , we assume that @xmath203 and @xmath204 .",
    "then , we introduce a new vertex @xmath205 , and define a cubic graph @xmath50 , where @xmath206 and @xmath207 . similarly , we introduce a new vertex @xmath208 , and define a second cubic graph @xmath209 , where @xmath210 and @xmath211 .",
    "then , we can obtain @xmath66 from the type 3 breeding operation @xmath212 .",
    "+    note that any 3-cracker can be obtained from a type 3 breeding operation , and therefore all 3-crackers are irreducible .",
    "we refer to a set of genes that can , through a series of breeding and parthenogenic operations , be used to produce a descendant @xmath66 as _ ancestor genes _ for @xmath66.[def - ancestor_genes ]    propositions [ prop-1cracker ]  [ prop-3cracker ] and definition [ def - ancestor_genes ] allow us to derive the main theorem of this section .",
    "consider any descendant cubic graph @xmath213 then ,    1 .",
    "@xmath66 can be obtained from one or two parents by at least one of the six operations @xmath214 , @xmath215 , @xmath216 , @xmath217 , @xmath218 , @xmath219 .",
    "every descendant @xmath66 has a set of ancestor genes .",
    "[ theorem - anygraph ]    any descendant graph contains at least one cubic cracker .",
    "any one of these cubic crackers can be selected , which will be either a 1-cracker , a @xmath3-cracker , or a @xmath11-cracker .",
    "then , from propositions [ prop-1cracker ] , [ prop-2cracker ] and [ prop-3cracker ] , we can obtain @xmath66 , from either one or two parents , using one of the six operations .",
    "therefore ( 1 ) is proved .",
    "next , consider how @xmath66 is obtained .",
    "if @xmath66 is obtained through breeding , it has two parent graphs .",
    "if @xmath66 is obtained through parthenogenesis , it has one parent graph .",
    "these parent graphs may be either genes , or descendants . if any of them are descendants , then by part ( 1 ) they also have one or two parent graphs each .",
    "inductively , we can continue to consider the parents of descendants , while recording which operations are used to produce them , thereby obtaining an _ ancestral family tree _ of @xmath66 .",
    "once the entire tree is determined , all of the top nodes are genes , and we can recall the sequence of operations that produces @xmath66 from these genes . therefore ( 2 ) is proved .",
    "see figure [ fig - ancestral_tree ] for an example of an ancestral family tree for a descendant with 14 vertices .",
    "+    theorem [ theorem - anygraph ] indicates that , for any descendant , we can obtain a set of ancestor genes by first applying an inverse operation to obtain one or two parents",
    ". then we can apply an inverse operation on the parent(s ) to obtain new parents ( grandparents of the original descendant ) , and continue to apply inverse operations until a set of ancestor genes is obtained .",
    "however , a given descendant may contain only reducible cubic crackers , which do not permit inverse breeding operations . in these cases ,",
    "inverse parthenogenic operations can be performed , if one of the three parthenogenic objects are present within the descendant .",
    "the removal of such a parthenogenic object often changes a reducible cracker into an irreducible cracker which , in turn , permits an inverse breeding operation to be carried out .",
    "the following proposition ensures that , for any descendant , at least one of the cubic crackers permits an inverse operation , and furthermore that every reducible cracker in a given descendant can be changed into an irreducible cracker by a sequence of inverse parthenogenic operations .",
    "if a graph @xmath66 is a descendant , one of the following must be true .    1",
    ".   @xmath66 contains at least one irreducible cubic cracker , or 2 .",
    "it is possible to perform a sequence of inverse parthenogenic operations , each time obtaining a new parent , until a parent is obtained that contains at least one irreducible cubic cracker .",
    "[ prop - always_irreducible ]    since @xmath66 is a descendant , it contains one or more cubic crackers .",
    "if any of them are irreducible , then ( 1 ) is true .",
    "if all the cubic crackers are reducible , then @xmath66 contains at least one @xmath22-cracker or @xmath3-cracker ( as @xmath11-crackers are always irreducible ) .",
    "we can therefore select either a reducible @xmath22-cracker or a reducible @xmath3-cracker in @xmath66 .",
    "we will consider both cases separately .    * case 1 : * we select a reducible @xmath22-cracker @xmath220 . since @xmath66 is cubic , we know that @xmath73 must be adjacent to two more vertices , say @xmath109 and @xmath77 .",
    "since @xmath221 is reducible , then without loss of generality , we can assume that edge @xmath148 is present in @xmath66 .",
    "then , the cubicity of @xmath66 also ensures that vertices @xmath109 and @xmath77 must each be adjacent to one more vertex , say @xmath78 and @xmath132 respectively .",
    "note that it is possible that @xmath160 .",
    "* case 1.1 : * if @xmath160 , then the cubicity of @xmath66 ensures that vertex @xmath78 must be adjacent to one more vertex , say @xmath18 ( see figure [ fig - irreducible11 ] ) .",
    "then , removing edges @xmath147 and @xmath164 from @xmath66 disconnects a parthenogenic diamond , which we can remove from @xmath66 by use of the inverse type 1 parthenogenic operation @xmath222 . in the parent graph @xmath223",
    ", there is a new @xmath22-cracker comprising edge @xmath224 .",
    "note that the new @xmath22-cracker may also be reducible .",
    "+    * case 1.2 : * if @xmath169 , then removing edges @xmath147 , @xmath225 and @xmath226 from @xmath66 isolates a parthenogenic triangle ( see figure [ fig - irreducible12 ] ) , which we can remove from @xmath66 by use of the inverse type 3 parthenogenic operation @xmath227 .",
    "in the parent graph @xmath223 , the original @xmath22-cracker @xmath220 remains .",
    "note that the @xmath22-cracker may still be reducible .",
    "+    * case 2 : * we select a reducible @xmath3-cracker @xmath228 . since @xmath229 is reducible , then without loss of generality , we can assume that edge @xmath191 is present in @xmath66 .",
    "then , the cubicity of @xmath66 also ensures that vertices @xmath73 and @xmath109 must each be adjacent to one more vertex , say @xmath78 and @xmath132 , respectively . note that it is possible that @xmath160 .",
    "* case 2.1 : * if @xmath160 , then as illustrated in figure [ fig - irreducible21 ] , the cubicity of @xmath66 ensures that vertex @xmath78 must be adjacent to one more vertex , say @xmath18 .",
    "then , removing edges @xmath147 , @xmath148 and @xmath164 from @xmath66 disconnects a parthenogenic triangle , which we can remove from @xmath66 by use of the inverse type 1 parthenogenic operation @xmath230 . in the parent graph @xmath223 ,",
    "a @xmath22-cracker comprising edge @xmath164 remains .",
    "note that this @xmath22-cracker may still be reducible .",
    "+    * case 2.2 : * if @xmath169 , then as illustrated in figure [ fig - irreducible22 ] , the removal of edges @xmath147 , @xmath148 , @xmath161 and @xmath231 from @xmath66 disconnects a parthenogenic bridge , which we can remove from @xmath66 by use of the inverse type 2 parthenogenic operation @xmath232 . in the parent graph @xmath223 ,",
    "there is a new @xmath3-cracker comprising edges @xmath233 and @xmath234 .",
    "note that this @xmath3-cracker may be reducible .",
    "+    since in all cases considered , the parent graph contains a cubic cracker ( either a new one introduced by an inverse parthenogenic operation , or one that remains from the original descendant ) , the parent is itself always a descendant .",
    "then , either ( 1 ) is true for this parent , or if not , we can repeat the above procedure until we obtain a parent for which ( 1 ) is true .",
    "since each inverse parthenogenic process outputs a parent with fewer vertices than its child , we are guaranteed to eventually converge to such a case .",
    "the theory presented above allows us to separate the set @xmath235 of connected cubic graphs into two distinct and encompassing categories - the comparatively smaller set of genes , that form the basic building blocks of @xmath235 , and the much larger set of descendants , that inherit a lot of their structure from the genes .",
    "theorem [ theorem - anygraph ] and proposition [ prop - always_irreducible ] give both a proof of existence , and a guarantee of obtaining a set of ancestor genes for any given descendant .",
    "an algorithm to identify a set of ancestor genes , given a descendant , would be a simple task of identifying all the crackers , surveying each until one is found that permits an inverse operation , and recursively repeating the process in each parent obtained until only genes remain .",
    "such an algorithm would terminate in polynomial time .",
    "in addition to the aesthetic beauty of rendering the ancestry of cubic graphs as finite sets of smaller cubic graphs , there are some important algorithmic benefits as well .",
    "since descendants inherit much of their structure from genes , it is possible that a search for graph theoretic properties within a descendant could be more efficiently recast as a search of the ( typically much smaller ) genes instead . in this context ,",
    "theorem [ theorem - anygraph ] and proposition [ prop - always_irreducible ] give rise to a generic decomposition algorithm that could be applied on most cubic graphs . since the ancestor genes also lie within the set of connected cubic graphs , any existing algorithms designed for cubic graphs will work for the genes .",
    "for example , experimental evidence indicates that many non - bridge non - hamiltonian cubic graphs are descendants that contain at least one mutant ancestor gene . in these cases , it is clear that the descendant has inherited the non - hamiltonicity property from its ancestor mutant gene ( or genes ) .",
    "then , an obvious heuristic for determining hamiltonicity in a descendant is to identify a set of ancestor genes and determine their hamiltonicity instead , using whatever state of the art algorithms are available ( e.g. see eppstein @xcite ) .",
    "since determining hamiltonicity is an np - complete problem , and therefore the best known algorithms have exponential solving time , such a decomposition represents a large saving in solving time .",
    "it is potentially possible that the hamiltonian cycle problem , already known to be np - complete even when considering only cubic graphs @xcite , could be further refined to requiring the consideration of only genes .",
    "if so , the extreme rarity of mutants indicates such an avenue could potentially be fruitful .",
    "the inheritance of non - hamiltonicity , and other such graph theoretic properties , is a subject for future research .    given that properties can be inherited from a set of ancestor genes , a natural question to ask is how many different sets of ancestor genes a descendant graph might have , and how their various ( potentially conflicting ) properties may influence the single descendant .",
    "the following conjecture , if correct , removes any such confusion .",
    "any descendant @xmath66 has a unique set of ancestor genes.[conj - unique ]    to support conjecture [ conj - unique ] , we conducted experiments on individual graphs in which we considered all possible ways to decompose the graph into a set of ancestor genes , and verified that each of these approaches gave the same set of ancestor genes .",
    "this experiment was performed on all cubic graphs containing up to 18 vertices , and all triangle - free 20-vertex cubic graphs , constituting 143,528 graphs . for these sizes , there can be up to 7 !",
    "= 5040 possible ways to decompose a graph into ancestor genes .",
    "no counterexample to conjecture [ conj - unique ] was found among the tested graphs .",
    "if conjecture [ conj - unique ] is true it provides , along with theorem [ theorem - anygraph ] , a guarantee of existence and uniqueness of ancestor genes for every cubic graph .",
    "for such a graph , the above implies that it is either a gene , or there is a unique set of ancestor genes which can be identified in polynomial time , and that these ancestor genes provide the majority of structure in the descendant . if false , conjecture [ conj - unique ] may still be true for all but very special classes of descendants . note that although the conjecture postulates the existence of a unique set of ancestor genes for any given descendant , the order of breeding operations used to obtain the descendant is clearly not unique",
    "the authors gratefully acknowledge helpful discussions with c.e .",
    "praeger , b.d . mckay and p. zograf .",
    "the research in this manuscript was made possible by grants from the australian research council , specifically by the discovery grants dp0666632 and dp0984470 .",
    "99 balaban , a.t . and harary , f. :",
    "the characteristic polynomial does not uniquely determine the topology of a molecule . j.",
    "chem . doc . * 11 * , 258259 ( 1971 ) batagelj , v. : inductive classes of graphs .",
    "semin . graph th .",
    ", dubrovnik , 1985 , 4356 ( 1986 ) blanusa , d. : problem cetiriju boja .",
    "glasnik mat .",
    "astr . ser .",
    "ii * 1 * , 3142 ( 1946 ) brinkmann , g. : fast generation of cubic graphs .",
    "j. graph th . *",
    "23 * , 139149 ( 1996 ) ding , g. and kanno , j. : splitter theorems from cubic graphs .",
    "15 , 355375 ( 2006 ) eppstein , d. : the traveling salesman problem for cubic graphs . in : dehne , f. , sack , j - r . , and smid , m. ( eds . )",
    "algorithms and data structures , volume 2748 of lecture notes in computer science , pp .",
    "springer , heidelberg ( 2003 ) filar , j.a . ,",
    "haythorpe , m. and nguyen , g.t . : a conjecture on the prevalence of cubic bridge graphs .",
    "mat . graph th .",
    "* 30(1 ) * , 175179 ( 2010 ) garey , m.r . and johnson , d.s . : computers and intractiability : a guide to the theory of np - completeness . w. h. freeman ( 1979 ) harary , f. : graph theory .",
    "addison - wesley , reading , ma ( 1969 ) holton , d.a . and",
    "sheehan , j. : the petersen graph .",
    "cambridge university press , cambridge ( 1993 ) lou , d. , teng , l. and wu , x. : a polynomial algorithm for cyclic edge connectivity of cubic graphs . australas",
    ". j. combin .",
    "* 24 * , 247259 ( 2001 ) mckay , b.d . and",
    "royle , g.f . : constructing the cubic graphs on up to 20 vertices .",
    "ars combin . *",
    "12a * , 129140 ( 1986 ) meringer , m. : fast generation of regular graphs and construction of cages .",
    "j. graph th . *",
    "30 * , 137146 ( 1999 ) ore , o. : the four - colour problem . academic press , new york ( 1967 ) read , r.c . and wilson , r.j . : an atlas of graphs .",
    "oxford , england : oxford university press , p. 263",
    "( 1998 ) royle , g. : constructive enumeration of graphs .",
    "phd thesis , university of western australia ( 1987 )"
  ],
  "abstract_text": [
    "<S> we propose a partitioning of the set of unlabelled , connected cubic graphs into two disjoint subsets named genes and descendants , where the cardinality of the descendants is much larger than that of the genes . </S>",
    "<S> the key distinction between the two subsets is the presence of special edge cut sets , called crackers , in the descendants . </S>",
    "<S> we show that every descendant can be created by starting from a finite set of genes , and introducing the required crackers by special breeding operations . </S>",
    "<S> we prove that it is always possible to identify genes that can be used to generate any given descendant , and provide inverse operations that enable their reconstruction . </S>",
    "<S> a number of interesting properties of genes may be inherited by the descendant , and we therefore propose a natural algorithm that decomposes a descendant into its ancestor genes . </S>",
    "<S> we conjecture that each descendant can only be generated by starting with a unique set of ancestor genes . </S>",
    "<S> the latter is supported by numerical experiments . </S>"
  ]
}