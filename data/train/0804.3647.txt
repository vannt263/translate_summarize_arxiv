{
  "article_text": [
    "in this paper we consider , in an euclidean space framework , the method of simultaneous subgradient projections for solving a convex feasibility problem with general ( not necessarily linear ) convex sets in the consistent and inconsistent cases . to cope with this situation ,",
    "we propose two algorithmic developments .",
    "one uses _ steering parameters _ instead of _ relaxation parameters _ in the simultaneous subgradient projection method , and the other is a strategy that controls the relaxation parameters in a specific self - adapting manner that leaves enough user - flexibility while yielding some mathematical guarantees for the algorithm s behavior in the inconsistent case . for the algorithm that uses steering parameters",
    "there is currently no mathematical theory .",
    "we present numerical results of computational experiments that show the computational advantage of the mathematically - founded algorithm implementing our specific relaxation strategy . in the remainder of this section we elaborate upon the meaning of the above - made statements .    given",
    "@xmath0 closed convex subsets @xmath1 of the @xmath2-dimensional euclidean space , expressed as@xmath3 where @xmath4 is a convex function , the _ convex feasibility problem _ ( cfp ) is@xmath5 as is well - known , if the sets are given in any other form then they can be represented in the form ( [ eq : set ] ) by choosing for @xmath6 the squared euclidean distance to the set .",
    "thus , it is required to solve the system of convex inequalities@xmath7    a fundamental question is how to approach the cfp in the inconsistent case , when @xmath8 logically , algorithms designed to solve the cfp by finding a point @xmath9 are bound to fail and should , therefore , not be employed .",
    "but this is not always the case .",
    "projection methods that are commonly used for the cfp , particularly in some very large real - world applications ( see details below ) are applied to cfps without prior knowledge whether or not the problem is consistent . in such circumstances",
    "it is imperative to know how would a method , that is originally known to converge for a consistent cfp , behave if consistency is not guaranteed .",
    "we address this question for a particular type of projection methods . in general ,",
    "sequential projection methods exhibit _ cyclic convergence _ in the inconsistent case .",
    "this means that the whole sequence of iterates does not converge , but it breaks up into @xmath0 convergent subsequences ( see gubin , polyak and raik ( * ? ? ?",
    "* theorem 2 ) and bauschke , borwein and lewis @xcite ) .",
    "in contrast , simultaneous projection methods generally converge , even in the inconsistent case , to a minimizer of a proximity function that measures  the weighted sum of squared distances to all sets of the cfp , provided such a minimizer exists ( see iusem and de pierro @xcite for a local convergence proof and combettes @xcite for a global one ) .",
    "therefore , there is an advantage in using simultaneous projection methods from the point of view of convergence .",
    "additional advantages are that ( i ) they are inherently parallel already at the mathematical formulation level due to the simultaneous nature , and ( ii ) they allow the user to assign weights ( of importance ) to the sets of the cfp",
    ". however , a severe limitation , common to sequential as well as simultaneous projection methods , is the need to solve an inner - loop distance - minimization step for the calculation of the orthogonal projection onto each individual set of the cfp .",
    "this need is alleviated only for convex sets that are simple to project onto , such as hyperplanes or half - spaces .",
    "a useful path to circumvent this limitation is to use subgradient projections that rely on calculation of subgradients at the current ( available ) iteration points , see censor and lent @xcite or ( * ? ? ?",
    "* section 5.3 ) .",
    "iusem and moledo @xcite studied the simultaneous projection method with subgradient projections but only for consistent cfps .",
    "to the best of our knowledge , there does not exist a study of the simultaneous projection method with subgradient projections for the inconsistent case .",
    "our present results are a contribution towards this goal .",
    "the cfp is a fundamental problem in many areas of mathematics and the physical sciences , see , e.g. , combettes @xcite and references therein .",
    "it has been used to model significant real - world problems in image reconstruction from projections , see , e.g. , herman @xcite , in radiation therapy treatment planning , see censor , altschuler and powlis @xcite and censor @xcite , and in crystallography , see marks , sinkler and landree @xcite , to name but a few , and has been used under additional names such as _ set - theoretic estimation _ or the _ feasible set approach_. a common approach to such problems is to use projection algorithms , see , e.g. , bauschke and borwein @xcite , which employ _ orthogonal projections _ ( i.e. , nearest point mappings ) onto the individual sets @xmath10 the orthogonal projection @xmath11 of a point @xmath12 onto a closed convex set @xmath13 is defined by@xmath14 where , throughout this paper , @xmath15 and @xmath16 denote the euclidean norm and inner product , respectively , in @xmath17 frequently a _ relaxation parameter _ is introduced so that@xmath18 is the _ relaxed projection _ of @xmath19 onto @xmath20 with relaxation @xmath21 many iterative projection algorithms for the cfp were developed , see subsection [ sub : proj - methods ] below .",
    "the reason why the cfp is looked at from the viewpoint of projection methods can be appreciated by the following brief comments , that we made in earlier publications , regarding projection methods in general .",
    "projections onto sets are used in a variety of methods in optimization theory but not every method that uses projections really belongs to the class of projection methods . _ projection methods _ are iterative algorithms which use projections onto sets .",
    "they rely on the general principle that projections onto the given individual sets are easier to perform then projections onto other sets derived from the given individual sets ( intersections , image sets under some transformation , etc . )",
    "a projection algorithm reaches its goal , related to the whole family of sets , by performing projections onto the individual sets . projection algorithms _",
    "_ employ projections onto convex sets in various ways .",
    "they may use different kinds of projections and , sometimes , even use different types of projections within the same algorithm .",
    "they serve to solve a variety of problems which are either of the feasibility or the optimization types .",
    "they have different algorithmic structures , of which some are particularly suitable for parallel computing , and they demonstrate nice convergence properties and/or good initial behavior patterns .    apart from theoretical interest , the main advantage of projection methods , which makes them successful in real - world applications , is computational .",
    "they commonly have the ability to handle huge - size problems that are beyond the ability of more sophisticated , currently available , methods .",
    "this is so because the building blocks of a projection algorithm are the projections onto the given individual sets ( which are easy to perform ) and the algorithmic structure is either sequential or simultaneous ( or in - between ) .",
    "the field of projection methods is vast and we mention here only a few recent works that can give the reader some good starting points .",
    "such a list includes , among many others , the works of crombez @xcite , the connection with variational inequalities , see , e.g. , aslam - noor @xcite , yamada @xcite which is motivated by real - world problems of signal processing , and the many contributions of bauschke and combettes , see , e.g. , bauschke , combettes and kruk @xcite and references therein .",
    "bauschke and borwein @xcite and censor and zenios ( * ? ? ?",
    "* chapter 5 ) provide reviews of the field .",
    "systems of linear equations , linear inequalities , or convex inequalities are all encompassed by the cfp which has broad applicability in many areas of mathematics and the physical and engineering sciences .",
    "these include , among others , optimization theory ( see , e.g. , eremin @xcite , censor and lent @xcite and chinneck @xcite ) , approximation theory ( see , e.g. , deutsch @xcite and references therein ) , image reconstruction from projections in computerized tomography ( see , e.g. , herman @xcite ) and control theory ( see , e.g. , boyd et al .",
    "@xcite . )",
    "combettes @xcite and kiwiel @xcite have studied the subgradient projection method for consistent cfps .",
    "their work presents more general algorithmic steps and is formulated in hilbert space .",
    "some work has already been done on detecting infeasibility with certain subgradient projection methods by kiwiel @xcite .",
    "however , our approach differs from the latter in that it aims at a subgradient projection method that will work  regardless of the feasibility of the underlying cfp and which does not require the user to study in advance whether or not the cfp is consistent .",
    "further questions arise such as that of combining our work , or the above quoted results , with pierra s @xcite product space formalism , as extended to handle inconsistent situations by combettes @xcite .",
    "these questions are currently under investigation .",
    "subgradient projections have been incorporated in iterative algorithms for the solution of cfps .",
    "the cyclic subgradient projections ( csp ) method for the cfp was given by censor and lent @xcite as follows .",
    "[ algo : csp ] the method of cyclic subgradient projections ( csp ) .",
    "* initialization * : @xmath22 is arbitrary .    * iterative step * : given @xmath23 calculate the next iterate @xmath24 by @xmath25{ll}x^{k}-\\alpha_{k}\\frac{\\displaystyle f_{i(k)}(x^{k})}{\\displaystyle \\parallel \\;t^{k}\\parallel^{2}}t^{k } , & \\mathrm{if}\\;\\;f_{i(k)}(x^{k})>0,\\\\ x^{k } , & \\mathrm{if}\\;\\;f_{i(k)}(x^{k})\\leq0 , \\end{array } \\right .",
    "\\label{eqn : csp}\\ ] ] where @xmath26 is a subgradient of @xmath27 at the point @xmath28 , and the relaxation parameters @xmath29 are confined to an interval @xmath30 , for all @xmath31 , with some , arbitrarily small , @xmath32    * control * : denoting @xmath33 the sequence @xmath34 is an almost cyclic control sequence on @xmath35 .",
    "this means ( see , e.g. , ( * ? ? ?",
    "* definition 5.1.1 ) ) that @xmath36 for all @xmath31 and there exists an integer @xmath37 such that , for all @xmath31 , @xmath38    observe that if @xmath39 , then @xmath27 takes its minimal value at @xmath28 , implying , by the nonemptiness of @xmath40 , that @xmath41 , so that @xmath42 . relations of the csp method to other iterative methods for solving the convex feasibility problem and to the relaxation method for solving linear inequalities can be found , e.g. , in ( * ? ? ?",
    "* chapter 5 ) , see also , bauschke and borwein ( * ? ? ?",
    "* section 7 ) . since sequential projection methods for cfps",
    "commonly have fully - simultaneous counterparts , the simultaneous subgradient projections ( ssp ) method of dos santos @xcite and iusem and moledo @xcite is a natural algorithmic development .",
    "[ alg : ssp]the method of simultaneous subgradient projections ( ssp ) .",
    "* initialization * : @xmath22 is arbitrary .",
    "* iterative step * : * ( i ) * given @xmath23 calculate , for all @xmath43 intermediate iterates @xmath44 by @xmath45{ll}x^{k}-\\alpha_{k}\\frac{\\displaystyle f_{i}(x^{k})}{\\displaystyle\\parallel \\;t^{k}\\parallel^{2}}t^{k } , & \\mathrm{if}\\;\\;f_{i}(x^{k})>0,\\\\ x^{k } , & \\mathrm{if}\\;\\;f_{i}(x^{k})\\leq0 , \\end{array } \\right.\\ ] ] where @xmath46 is a subgradient of @xmath6 at the point @xmath28 , and the relaxation parameters @xmath29 are confined to an interval @xmath30 , for all @xmath31 , with some , arbitrarily small , @xmath32    * ( ii ) * calculate the next iterate @xmath24 by@xmath47 where @xmath48 are fixed , user - chosen , positive weights with @xmath49    the convergence analysis for this algorithm is currently available only for consistent ( @xmath50 ) cfps , see @xcite . in our experimental work , reported in the sequel , we applied algorithm [ alg : ssp ] to cfps without knowing whether or not they are consistent . convergence is diagnosed by performing plots of a _ proximity function _ that measures in some manner the infeasibility of the system .",
    "we used the weighted proximity function of the form@xmath51 were @xmath52 is the orthogonal projection of the point @xmath53 onto @xmath10 to combat instabilities in those plots that appeared occasionally in our experiments we used _ steering parameters _ @xmath54 instead of the relaxation parameters @xmath55 in algorithm [ alg : ssp]@xmath56 to this end we need the following definition .",
    "a sequence @xmath57 of real numbers @xmath58 is called a ` steering sequence ` if it satisfies the following conditions:@xmath59@xmath60@xmath61    a historical and technical discussion of these conditions can be found in @xcite .",
    "the sequential and simultaneous halpern - lions - wittmann - bauschke ( hlwb )  algorithms discussed in censor @xcite employ the parameters of a steering sequence to `` force '' ( steer ) the iterates towards the solution of the best approximation problem ( bap ) .",
    "this steering feature of the steering parameters has a profound effect on the behavior of any sequence of iterates @xmath62 .",
    "we return to this point in section [ sect : comp ] .",
    "[ alg : steer]the method of simultaneous subgradient projections ( ssp ) with steering .",
    "* initialization * : @xmath22 is arbitrary .    *",
    "iterative step * : * ( i ) * given @xmath23 calculate , for all @xmath43 intermediate iterates @xmath44 by @xmath45{ll}x^{k}-\\sigma_{k}\\frac{\\displaystyle f_{i}(x^{k})}{\\displaystyle\\parallel \\;t^{k}\\parallel^{2}}t^{k } , & \\mathrm{if}\\;\\;f_{i}(x^{k})>0,\\\\ x^{k } , & \\mathrm{if}\\;\\;f_{i}(x^{k})\\leq0 , \\end{array } \\right.\\ ] ] where @xmath46 is a subgradient of @xmath6 at the point @xmath28 , and @xmath57 is a sequence of steering parameters@xmath56    * ( ii ) * calculate the next iterate @xmath24 by@xmath47 where @xmath48 are fixed , user - chosen , positive weights with @xmath49",
    "considering the cfp ( [ ( cfp problem ) ] ) , the _ envelope _ of the family of functions @xmath63 is the function@xmath64 which is also convex . clearly , the consistent cfp is equivalent to finding a point in@xmath65    the subgradient projections algorithmic scheme that we propose here employs a strategy for controlling the relaxation parameters in a specific manner , leaving enough user - flexibility while giving some mathematical guarantees for the algorithm s behavior in the inconsistent case .",
    "it is described as follows :    [ alg : dan]@xmath66    * initialization : * let @xmath67 be a positive real number and let @xmath68 be any",
    "_ initial point_.    * iterative step : * given the current iterate @xmath23 set@xmath69 and choose a nonnegative vector @xmath70 such that@xmath71 let @xmath72 be any nonnegative real number such that@xmath73 and calculate@xmath74 where , for each @xmath75 we take a subgradient @xmath76    it is interesting to note that any sequence @xmath77  generated by this algorithm is well - defined , no matter how @xmath78  and @xmath67  are chosen . similarly to other algorithms described above , algorithm [ alg : dan ] requires computing subgradients of convex functions . in case",
    "a function is differentiable , this reduces to gradient calculations .",
    "otherwise , one can use the subgradient computing procedure presented in butnariu and resmerita @xcite .",
    "the procedure described above was previously studied in butnariu and mehrez @xcite .",
    "the main result there shows that the procedure converges to a solution of the cfp under two conditions : ( i ) that the solution set @xmath40 has nonempty interior and ( ii ) that the envelope @xmath79 is uniformly lipschitz on @xmath80 that is , there exists a positive real number @xmath81 such that@xmath82 both conditions ( i ) and ( ii ) are restrictive and it is difficult to verify their validity in practical applications . in the following we show that this method converges to solutions of consistent cfps under less demanding conditions . in fact , we show that if the solution set @xmath40 of the given cfp has nonempty interior , then convergence of algorithm [ alg : dan ] to a point in @xmath40 is ensured even if the function @xmath79 is not uniformly lipschitz on @xmath83 ( i.e. , even if @xmath79 does not satisfy condition ( ii ) above ) .",
    "however , verifying whether @xmath84 prior to solving a cfp may be difficult or even impossible .",
    "therefore , it is desirable to have alternative conditions , which may be easier to verify in practice , that can ensure convergence of our algorithm to solutions of the cfp , provided that such solutions exist .",
    "this is why we prove convergence of algorithm [ alg : dan ] to solutions of consistent cfps whenever the envelope @xmath79 of the functions @xmath6 involved in the given cfp is strictly convex .",
    "strict convexity of the envelope function @xmath79 associated with a consistent cfp implies that either the solution set @xmath40 of the cfp is a singleton , in which case @xmath85 , or that @xmath40 contains ( at least ) two different solutions of the cfp implying that int @xmath86 .",
    "verification of whether @xmath40 is a singleton or not is as difficult as deciding whether int @xmath86 .",
    "by contrast , since @xmath79 is strictly convex whenever each @xmath6 is strictly convex , verification of strict convexity of @xmath79 may be relatively easily done in some situations of practical interest , such as when each @xmath6 is a quadratic convex function . in the latter case ,",
    "strict convexity of @xmath6 amounts to positive definiteness of the matrix of its purely quadratic part .",
    "it is interesting to note in this context that when the envelope @xmath79 of the cfp is not strictly convex one may consider a regularized  cfp in which each @xmath6 which is not strictly convex is replaced by@xmath87 for some positive real number @xmath88 clearly , all @xmath89 are strictly convex and , thus , so is the envelope @xmath90 of the regularized problem .",
    "therefore , if the regularized problem has solutions , then our algorithm [ alg : dan ] will produce approximations of such solutions .",
    "moreover , any solution of the regularized problem is a solutions of the original problem and , thus , by solving the regularized problem we implicitly solve the original problem .",
    "the difficult part of this approach is that , even if the original cfp is consistent then the regularized version of it may be inconsistent for all , or for some , values @xmath91 how to decide whether an @xmath92 exists such that the corresponding regularized cfp is consistent and how to compute such an @xmath93 ( if any ) are questions whose answers we do not know .",
    "in order to discuss the convergence behavior of the subgradient projections method with strategical relaxation , recall that convex functions defined on the whole space @xmath83 are continuous and , consequently , are bounded on bounded sets in @xmath83 .",
    "therefore , the application of butnariu and iusem ( * ? ? ?",
    "* proposition 1.1.11 ) or bauschke and borwein ( * ? ? ?",
    "* proposition 7.8 ) to the convex function @xmath79 shows that it is lipschitz on bounded subsets of @xmath80 i.e. , for any nonempty bounded subset @xmath94 there exists a positive real number @xmath95 called _ a lipschitz constant of _",
    "_  over the set _",
    "_ @xmath96 such that@xmath97 our next result is a convergence theorem for algorithm [ alg : dan ] when applied to a consistent cfp .",
    "it was noted in the previous section that algorithm [ alg : dan ] is well - defined regardless of how the initial point @xmath78 or the positive constant @xmath67 involved in the algorithm are chosen .",
    "however , this is no guarantee that a sequences @xmath98 generated by algorithm [ alg : dan ] for random choices of @xmath78 and @xmath67 will converge to solutions of the cfp , even if such solutions exist .",
    "the theorem below shows a way of choosing @xmath78 and @xmath67 which ensures that , under some additional conditions for the problem data , the sequence @xmath98 generated by algorithm [ alg : dan ] will necessarily approximate a solution of the cfp ( provided that solutions exist ) . as shown in section [ sec : implement ] below , determining @xmath78 and @xmath67 as required in the next theorem can be quite easily done for practically significant classes of cfps .",
    "also , as shown in section [ sect : comp ] , determining @xmath78 and @xmath67 in this manner , enhances the self - adaptability of the procedure to the problem data and makes algorithm [ alg : dan ] produce approximations of solutions of the cfp which , in many cases , are more accurate than those produced by other cfp solving algorithms .",
    "[ thm : dan1 ] * * _ if a positive number _ @xmath67 _ _  and an initial point _ _ @xmath78 _ _  in algorithm [ alg : dan ] are chosen so that _",
    "_ @xmath99 _ _  for some positive real number _ _ @xmath100 _ _  satisfying the condition _ _ @xmath101 _ and if at least one of the following conditions holds : _",
    "\\(i ) @xmath102    \\(ii ) _ the function _",
    "@xmath79 _ _  is strictly convex , then any sequence _",
    "_ @xmath103 _ _  generated by algorithm [ alg : dan ] , converges to an element of _ _",
    "@xmath104    we present the proof of theorem [ thm : dan1 ] as a sequence of lemmas .",
    "to do so , note that if @xmath105 _ _  _ _ is generated by algorithm [ alg : dan ] then for each integer @xmath106 we have@xmath107 where@xmath108 using ( [ xk ] ) , for any @xmath109 we have@xmath110 by clarke ( * ? ? ?",
    "* proposition 2.3.12 ) we deduce that@xmath111 and this implies that @xmath112 because of ( [ niuk ] ) .",
    "therefore,@xmath113 where @xmath114 denotes the right - sided directional derivative at @xmath115 in the direction @xmath116 now suppose that @xmath117 @xmath100 and @xmath78 are chosen according to the requirements of theorem [ thm : dan1 ] , that is,@xmath118 next we prove the following basic fact .",
    "[ lem : dan1 ] _ if _ ( [ prize ] ) _  is satisfied and if _ @xmath119 _ _",
    "then for all _ _ @xmath31 , _ we have for any sequence _ @xmath103 _ _  generated by algorithm [ alg : dan],__@xmath120    we first show that if , for some integer @xmath31,@xmath121 then ( [ bregmon ] ) holds . if @xmath122 or @xmath123 then , by ( [ xk ] ) , we have @xmath42 which , combined with ( [ tnai ] ) , implies ( [ bregmon ] ) .",
    "assume now that @xmath124 and @xmath125 since , by ( [ tnai ] ) , @xmath126 by ( [ prize ] ) and by ( * ? ? ?",
    "* proposition 2.1.2(a ) ) , we deduce that@xmath127 according to ( [ lambda ] ) , we also have @xmath128 ( otherwise @xmath129 ) . since @xmath130",
    "we obtain from the subgradient inequality@xmath131 this and ( [ blabla ] ) imply@xmath132 showing that the quantity inside the parentheses in ( [ basic ] ) is nonpositive .",
    "thus , we deduce that@xmath133 in this case too .",
    "this proves that if ( [ tnai ] ) is true for all @xmath31 , then so is ( [ bregmon ] ) .",
    "now , we prove by induction that ( [ tnai ] ) is true for all @xmath31 . if @xmath134 then ( [ tnai ] ) obviously holds .",
    "suppose that ( [ tnai ] ) is satisfied for some @xmath135 as shown above , this implies that condition ( [ bregmon ] ) is satisfied for @xmath136 and , thus , we have that@xmath137 hence , condition ( [ tnai ] ) also holds for @xmath138 consequently , condition ( [ bregmon ] ) holds for @xmath139 and this completes the proof .",
    "observe that , according to lemma [ lem : dan1 ] , if @xmath77 is a sequence generated by algorithm [ alg : dan ] and if the conditions ( [ prize ] ) are satisfied , then there exists @xmath140 and for any such @xmath19 the sequence @xmath141 is nonincreasing and bounded from below and , therefore , convergent .",
    "since the sequence @xmath141 is convergent it is also bounded and , consequently , the sequence @xmath105 is bounded too .",
    "this shows that the next result applies to any sequence @xmath142 generated by algorithm [ alg : dan ] under the assumptions of theorem [ thm : dan1 ] .",
    "[ lem : subseq ] i__f _ _ @xmath105 _ _  is a bounded sequence generated by algorithm [ alg : dan ] , then the sequence _ _ @xmath105 _ _  has accumulation points and for each accumulation point _",
    "_ @xmath143 _ _  of _ _ @xmath105 _ _  there exists a sequence of natural numbers _ _ @xmath144 _ _  such that the following limits exist__@xmath145 _ _ and we have__@xmath146 and@xmath147 _ moreover , if _ @xmath148 _ _  then _ _",
    "@xmath143 _ _  is a solution of the cfp__.    the sequence @xmath105 is bounded and , thus , has accumulation points .",
    "let @xmath143 be an accumulation point of @xmath142 and let @xmath149 be a convergent subsequence of @xmath77 such that @xmath150 the function @xmath79 is continuous ( since it is real - valued and convex on @xmath83 ) , hence , it is bounded on bounded subsets of @xmath83 .",
    "therefore , the sequence @xmath151 converges to @xmath152 and the sequence @xmath153 is bounded . by ( [ lambda ] ) , boundedness of @xmath153 implies that the sequence @xmath154 is bounded .",
    "since , for every @xmath155 the operator @xmath156 is monotone , it is locally bounded ( cf .",
    "pascali and sburlan ( * ? ? ?",
    "* theorem on p. 104 ) ) .",
    "consequently , there exists a neighborhood @xmath157 of @xmath143 on which all @xmath158 @xmath155 are bounded . clearly , since @xmath159 , the neighborhood @xmath157 contains all but finitely many terms of the sequence @xmath160 this implies that the sequences @xmath161 are uniformly bounded and , therefore",
    ", the sequence @xmath162 is bounded too .",
    "therefore , there exist a subsequence @xmath144 of @xmath163 such that the limits in ( [ pips])([eq : pips3 ] ) exist . obviously , the vector @xmath164 and , according to ( * ? ?",
    "* lemma 1 ) , we also have @xmath165 .",
    "this and ( [ niuk ] ) imply that @xmath166    observe that , since @xmath167 for all @xmath168 , and since @xmath169 is a closed mapping ( cf .",
    "phelps ( * ? ? ?",
    "* proposition 2.5 ) ) , we have that @xmath170 now , if @xmath171 then , according to ( [ lambda ] ) , and the continuity of @xmath172 we deduce@xmath173 which implies that @xmath174 , that is , @xmath175    [ lem:5]_let _ @xmath105 _ _  be a sequence generated by algorithm [ alg : dan ] . if ( [ prize ] ) is satisfied and if at least one of the conditions ( i ) or ( ii ) of theorem [ thm : dan1 ] holds , then the sequence",
    "_ _ @xmath77 _ _  has accumulation points and any such point belongs to _ _",
    "@xmath104    as noted above , when ( [ prize ] )  is satisfied then the sequence @xmath142 is bounded and , hence , it has accumulation points .",
    "let @xmath143 be such an accumulation point and let @xmath176 be the sequence of natural numbers associated with @xmath143 whose existence is guaranteed by lemma [ lem : subseq ] .",
    "since , for any @xmath177 the sequence @xmath141 is convergent ( cf .",
    "lemma [ lem : dan1 ] ) we deduce that@xmath178 this implies@xmath179 if @xmath148 then @xmath9 by lemma [ lem : subseq ] .",
    "suppose that @xmath180 then , by ( [ kill ] ) , we have @xmath181 for all @xmath182 we distinguish now between two possible cases .    * case i * : assume that condition ( _ i _ ) of theorem [ thm : dan1 ] is satisfied . according to ( [ protea ] ) , the set @xmath183 is contained in the hyperplane@xmath184 by _ condition ( i ) of theorem [ thm : dan1 ] _",
    ", it follows that @xmath185 and this is an open set contained in @xmath186 so , unless @xmath187 ( in which case @xmath188 ) , we have reached a contradiction because @xmath189 therefore , we must have @xmath190 according to lemma [ lem : subseq ] , we have @xmath191 which implies that @xmath143 is a global minimizer of @xmath192 consequently , for any @xmath193 we have @xmath194 that is , @xmath175    * case ii * : assume that condition ( _ ii _ ) of theorem [ thm : dan1 ] is satisfied . according to ( [ protea ] ) ,",
    "we have@xmath195 by ( [ lambda ] ) , the definition of @xmath67 and ( * ? ? ?",
    "* proposition 2.1.2 ) we deduce that@xmath196 for all integers @xmath168 . letting @xmath197 we get@xmath198 where the last equality follows from ( [ muc ] ) .",
    "consequently , we have@xmath199 convexity of @xmath79 implies that , for all @xmath200@xmath201 therefore , we have that@xmath202 thus @xmath203 for all @xmath204 hence , using again the convexity of @xmath172 we deduce that , for all  @xmath200@xmath205 this implies@xmath206 since , by _ condition ( ii ) of theorem [ thm : dan1 ] _ , @xmath79 is strictly convex , we also have ( see ( * ? ? ?",
    "* proposition 1.1.4 ) ) that@xmath207 hence , the equalities in ( [ mule ] ) can not hold unless @xmath208 and , thus , @xmath175    the previous lemmas show that if ( [ prize ] ) holds and if one of the conditions _",
    "( i ) _ or _",
    "( ii ) _ of theorem [ thm : dan1 ] _ _ is satisfied , then the sequence @xmath105 is bounded and all its accumulation points are in @xmath209 in fact , the results above say something more .",
    "namely , in view of lemma [ lem : dan1 ] , they show that if ( [ prize ] ) holds and if one of the conditions _",
    "( i ) _ or _",
    "( ii ) _ of theorem [ thm : dan1 ] is satisfied , then all accumulation points @xmath210 of @xmath105 are contained in @xmath211 because all @xmath28 are in @xmath212 by ( [ bregmon ] ) . in order to complete the proof of theorem [ thm : dan1 ] , it remains to show that the following result is true .",
    "_ under the conditions _ of theorem [ thm : dan1 ] _ any sequence _",
    "@xmath105 ,  generated by algorithm [ alg : dan ] , _  has at most one accumulation point .",
    "_    observe that , under the conditions of theorem [ thm : dan1 ] the conditions ( [ prize ] ) are satisfied and , therefore , the sequence @xmath142 is bounded .",
    "let @xmath143 be an accumulation point of @xmath213 by lemma [ lem:5 ] we deduce that @xmath214 i.e. , @xmath215 consequently , for any natural number @xmath216 we have@xmath217 now , using this fact , a reasoning similar to that which proves ( [ plusplus ] ) but made with @xmath143 instead of @xmath19 leads to @xmath218 for all natural numbers @xmath219 this and ( [ basic ] ) combined imply that the sequence @xmath220 is non - increasing and , therefore , convergent .",
    "consequently , if @xmath221 is a subsequence of @xmath142 such that @xmath222 we have@xmath223 showing that any accumulation point @xmath143 of @xmath77 is exactly the limit of @xmath224    the application of theorem [ thm : dan1 ] depends on our ability to choose numbers @xmath67 and @xmath100 and a vector @xmath78 such that condition ( [ prize ] ) is satisfied .",
    "we show below that this can be done when the functions @xmath6 of the cfp ( [ ( cfp problem ) ] ) are quadratic or affine and there is some a priori known ball which intersects @xmath40 . in actual applications it may be difficult to a priori decide whether the cfp ( [ ( cfp problem ) ] ) has or does not have solutions .",
    "however , as noted above , algorithm [ alg : dan ] is well - defined and will generate sequences @xmath77 no matter how the initial data @xmath117 @xmath100 and @xmath78 are chosen .",
    "this leads to the question whether it is possible to decide if @xmath40 is empty or not by simply analyzing the behavior of sequences @xmath142 generated by algorithm [ alg : dan ] .",
    "a partial answer to this question is contained in the following result .",
    "[ cor:7]_suppose that the cfp ( [ ( cfp problem ) ] ) has no solution and that the envelope _ @xmath79",
    "_ _  is strictly convex .",
    "then , no matter how the initial vector _ _ @xmath78 _ _  and the positive number _ _ @xmath67 _ _  are chosen , any sequence _ _ @xmath103 _ _  generated by algorithm [ alg : dan ] , has the following properties : _",
    "_    \\(i ) _ if _ @xmath105 _ _  is bounded and__@xmath225 _ then _ @xmath79 _ has a ( necessarily unique ) minimizer and _ @xmath142 _ _ converges to that minimizer while__@xmath226",
    "\\(ii ) _ if _ @xmath79 _ _  has no minimizer then the sequence _",
    "_ @xmath142 _ _  is unbounded or the sequence _",
    "_ @xmath227 _ does not converge to zero .",
    "_    clearly , ( _ ii _ ) is a consequence of ( _ i _ ) . in order to prove ( _ i",
    "_ ) observe that , since the cfp ( [ ( cfp problem ) ] ) has no solution , all values of @xmath79 are positive .",
    "also , if @xmath79 has a minimizer , then this minimizer is unique because @xmath79 is strictly convex .",
    "if @xmath105 is bounded then it has an accumulation point , say , @xmath143 . by lemma [ lem : subseq ]",
    "there exists a sequence of positive integers @xmath144 such that ( [ pips ] ) and ( [ legaturi1])([legaturi2 ] ) are satisfied . using lemma [ lem : subseq ] again",
    ", we deduce that , if the limit @xmath228 in ( [ pips ] ) is zero , then the vector @xmath229 is a solution of the cfp ( [ ( cfp problem ) ] ) , i.e. , @xmath230 contradicting the assumption that the cfp ( [ ( cfp problem ) ] ) has no solution .",
    "hence , @xmath180 by ( [ xk ] ) , ( [ limit ] ) and ( [ pips ] ) we have that@xmath231 thus , we deduce that @xmath190 from ( [ legaturi1])([legaturi2 ] ) and ( * ? ? ?",
    "* proposition 2.3.12 ) we obtain@xmath232 showing that @xmath143 is a minimizer of @xmath192 so , all accumulation points of @xmath105 coincide because @xmath79 has no more than one minimizer .",
    "consequently , the bounded sequence @xmath142 converges and its limit is the unique minimizer of @xmath192    checking numerically a condition such as ( ii ) in corollary [ cor:7 ] or the condition in corollary [ cor:10 ] below seems virtually impossible .",
    "but there is no escape from such situations in such mathematically - oriented results . condition ( ii ) in corollary [ cor:7 ] is meaningful in the inconsistent case in which a feasible point does not exist but a proximity function that measures  the feasibility violation of the limit point can be minimized .",
    "an easy adaptation of the proof of corollary 4.6 shows that if the sequence @xmath77 has a bounded subsequence @xmath233 such that the limit @xmath234 , then all accumulation points of @xmath235 are minimizers of @xmath79 ( even if @xmath79 happens to be not strictly convex ) .    the fact that for some choice of @xmath78 and @xmath67 a sequence @xmath236 generated by _ algorithm [ alg : dan ] , _ has the property that @xmath237 does not imply that the cfp ( [ ( cfp problem ) ] ) has a solution .",
    "for example , take in ( [ ( cfp problem ) ] ) @xmath238 and @xmath239 clearly , in this case ( [ ( cfp problem ) ] ) has no solution and @xmath240 .",
    "however , for @xmath241 , @xmath242 and @xmath243 we have @xmath244    a meaningful implication of corollary [ cor:7 ] is the following result .",
    "[ cor:10]suppose that the cfp ( 2 ) has no solution and that @xmath79 is strictly convex .",
    "then , no matter how the initial vector @xmath78 and the positive number @xmath67 are chosen in algorithm [ alg : dan ] , the following holds : if the series @xmath245 converges , then the function @xmath79 has a unique global minimizer and the sequence @xmath103 generated by algorithm [ alg : dan ] , converges to that minimizer while the sequence @xmath246 converges to @xmath247    when @xmath248 converges to some number @xmath249 we have@xmath250 for all integers @xmath251 this implies that the sequence @xmath142 is bounded and @xmath252 .",
    "hence , by applying corollary 4.6 , we complete the proof .",
    "[ rem : a]finding an initial vector @xmath253 the radius @xmath100 and a positive number @xmath67 satisfying condition @xmath99 ( and satisfying ( [ cond ] ) provided that @xmath40 is nonempty ) when there is no a priori knowledge about  the existence of a solution of the cfp can be quite easily done when at least one of the sets @xmath254 say @xmath255 is bounded and the functions @xmath6 are differentiable . in this case",
    "it is sufficient to determine a vector @xmath78 and a positive number @xmath100 large enough so that the ball @xmath256 contains @xmath257 clearly , for such a ball , if @xmath40 is nonempty , then condition ( [ cond ] ) holds .",
    "once the ball @xmath212 is determined , finding a number @xmath99 can be done by taking into account that the gradients of the differentiable convex functions @xmath4 are necessarily continuous and , therefore , the numbers@xmath258 are necessarily finite",
    ". since @xmath259 is necessarily a lipschitz constant of @xmath79 over @xmath260 one can take @xmath261 .",
    "[ rem : b]the method of choosing @xmath253 @xmath100 and @xmath67 presented in remark [ rem : a ] does not require a priori knowledge of the existence of a solution of the cfp and can be applied even when @xmath40 is empty . in such a case",
    "one should compute , along the iterative procedure of algorithm [ alg : dan ] , the sums @xmath262 theorem [ thm : dan1 ] and corollary [ cor:10 ] then provide the following insights and tools for solving the cfp , provided that @xmath79 is strictly convex :    * if along the computational process the sequence @xmath263 remains bounded from above by some number @xmath264 while the sequence @xmath265 stabilizes itself asymptotically at some * positive * value , then the given cfp has no solution , but the sequence @xmath142 still approximates a global minimum of @xmath79 which may be taken as a surrogate solution of the given cfp . *",
    "if along the computational process the sequence @xmath263 remains bounded from above by some number @xmath264 while the sequence @xmath265 stabilizes itself asymptotically at some * nonpositive * value , then the given cfp has a solution , and the sequence @xmath105 approximates such a solution .",
    "application of algorithm [ alg : dan ] does not require knowledge of the constant @xmath266 however , in order to implement this algorithm , such that the conditions for convergence will be guaranteed , we have to determine numbers @xmath100 and @xmath67 required by theorem [ thm : dan1 ] . the method proposed in remark [ rem : a ]",
    "might yield a very large value of @xmath266 this is due to the mathematical generality of remark [ rem : a ] .",
    "the quadratic and affine cases treated next seem to be restrictive from the theoretical / mathematical point of view , but their importance lies in the fact that they cover many significant real - world applications .",
    "we deal first with the problem of determining a number @xmath67 such that@xmath267 provided that an @xmath268 is given .",
    "recall that if @xmath269 is a continuously differentiable function then , by taylor s formula , we have that , whenever @xmath270 there exists a @xmath271   $ ] such that@xmath272 this shows that@xmath273 is a lipschitz constant for @xmath274 on @xmath212 .",
    "suppose now that each function @xmath6 is either linear or quadratic .",
    "denote @xmath275 @xmath276 is linear@xmath277 and @xmath278 @xmath276 is quadratic@xmath279 namely,@xmath280 with @xmath281 and @xmath282 , and@xmath283 where @xmath284 is a symmetric positive semidefinite @xmath285 matrix , @xmath286 and @xmath282 .",
    "we have , of course,@xmath287{cc}a^{i } , & \\text{if \\ } i\\in i_{1},\\\\ 2u_{i}x+a^{i } , & \\text{if \\ } i\\in i_{2 } , \\end{array } \\right.\\ ] ] so that ( [ eq : lip ] ) can give us lipschitz constants for each @xmath6 over @xmath288 denote@xmath289{cc}\\left\\vert a^{i}\\right\\vert , & \\text{if } i\\in i_{1},\\\\ 2\\left\\vert u_{i}\\right\\vert _ { \\infty}\\left (   \\left\\vert x^{0}\\right\\vert + r\\right )   + \\left\\vert a^{i}\\right\\vert , & \\text{if } i\\in i_{2 } , \\end{array } \\right .",
    "\\label{eq : li}\\ ] ] where @xmath290 is the operator norm of @xmath291 due to ( [ clarke ] ) , this implies that @xmath292 where@xmath293 taking @xmath294 and @xmath295 for some @xmath296 , we have@xmath297 which implies@xmath298 in other words , @xmath81 is a lipschitz constant of @xmath79 over @xmath288 thus , given an @xmath299 we can take @xmath67 to be any number such that @xmath300 note that choosing @xmath78 such that the corresponding @xmath100 is small may speed up the computational process by reducing the number of iterations needed to reach a reasonably good approximate solution of the cfp . in general , determining a number @xmath100 is straightforward when one has some information about the range of variation of the coordinates of some solutions to the cfp .    for instance , if one knows a priori that the solutions of the cfp are vectors @xmath301 such that@xmath302 where , @xmath303 , for all @xmath304 then the set @xmath40 is contained in the hypercube of edge length @xmath305 whose faces are parallel to the axes of the coordinates , and centered at the point @xmath78 whose coordinates are @xmath306 where@xmath307 therefore , by choosing this @xmath78 as the initial point for algorithm [ alg : dan ] and choosing @xmath308 condition ( [ cond ] ) holds .",
    "in this section , we compare the performance of algorithms [ alg : ssp ] , [ alg : steer ] and [ alg : dan ] by examining a few test problems .",
    "there are a number of degrees - of - freedom used to evaluate and compare the performance of the algorithms .",
    "these are the maximum number of iterations , the number of constraints , the lower and upper bounds of the box constraints , the values of the relaxation parameters , the initial values of the steering parameters and the steering sequence . in all our experiments ,",
    "the steering sequence of algorithm [ alg : steer ] assumed the form @xmath309 with a fixed user - chosen constant @xmath310 the main performance measure is the value of @xmath311 , plotted as a function of the iteration index @xmath216 .",
    "there are three types of constraints in our test problems : box constraints , linear constraints and quadratic constraints .",
    "some of the numerical values used to generate the constraints are uniformly distributed random numbers , lying in the interval @xmath312 $ ] , where @xmath313 and @xmath314 are user - chosen pre - determined values .",
    "the @xmath2 box constraints are defined by@xmath315 where @xmath316 are the lower and upper bounds , respectively .",
    "each of the @xmath317 quadratic constrains is generated according to@xmath318 here @xmath319 is are @xmath320 matrices defined by@xmath321 the @xmath320 matrices @xmath322 are diagonal , positive definite , given by@xmath323 where @xmath324 are generated randomly .",
    "the matrices @xmath325 are generated by orthonormalizing an @xmath320 random matrix , whose entries lie in the interval @xmath326 .",
    "finally , the vector @xmath327 is constructed so that all its components lie in the interval @xmath326 and similarly the scalar @xmath328 .",
    "the @xmath329 linear constraints are constructed in a similar manner according to@xmath330 thus , the total number of constraints is @xmath331 .",
    "table [ tests ] summarizes the test cases used to evaluate and compare the performance of algorithms [ alg : ssp ] , [ alg : steer ] and [ alg : dan ] . in these eight experiments",
    ", we modified the value of the constant @xmath332 in ( [ eq : sigma ] ) , the interval @xmath326 , the number of constraints , the number of iterations , and the relative tolerance @xmath333 , used as a termination criterion between subsequent iterations .",
    "[ c]|c||c|c|c|c|c|c|c|case & @xmath93/@xmath332/@xmath334 & @xmath326 & @xmath2 & @xmath317 & @xmath329 & iterations & @xmath333 + 1 & 1.1 & & 3 & 5 & 5 & 1,000 & + 2 & 1.1 & & 3 & 5 & 5 & 1,000 & + 3 & 1.98 & & 3 & 5 & 5 & 1,000 & + 4 & 1.98 & @xmath335 $ ] & 30 & 50 & 50 & 1,000 & 0.1 + 5 & 1.98 & @xmath336 $ ] & 30 & 50 & 50 & 100,000 & 0.1 + 6 & 2 & @xmath335 $ ] & 30 & 50 & 50 & 1,000 & 0.1 + 7 & 3 & @xmath336 $ ] & 3 & 5 & 5 & 1,000 & 0.1 + 8 & 5 & @xmath335 $ ] & 3 & 5 & 5 & 1,000 & 0.1 +    [ tests ]    in table [ tests ] , cases 1 and 2 represent small - scale problems , with a total of 13 constraints , whereas cases 46 represent mid - scale problems , with a total of 130 constraints .",
    "cases 68 examine the case of over relaxation , wherein the initial steering ( relaxation ) parameter is at least 2 .",
    "the results of our experiments are depicted in figures  [ case1][case6 ] .",
    "the results of cases 13 are shown in figures  [ case1](a)[case1](c ) , respectively .",
    "it is seen that in case 1 algorithm [ alg : ssp ] has better initial convergence than algorithms [ alg : steer ] and [ alg : dan ]",
    ". however , in case 2 , algorithm [ alg : steer ] yields fast and smooth initial behavior , while algorithm [ alg : ssp ] oscillates chaotically .",
    "algorithm [ alg : dan ] exhibits slow initial convergence , similarly to case 1 . in case 3 , algorithm [ alg : dan ] supersedes the performance of the other two algorithm , since it continues to converge toward zero .",
    "however , none of the algorithms detects a feasible solution , since none converged to the tolerance threshold after the maximum number of iterations .",
    "the mid - sized problems of cases 4 and 5 are depicted by figures  [ case4](a ) and [ case4](b ) .",
    "figure  [ case4](a ) shows that algorithm [ alg : dan ] detects a feasible solution , while both algorithms [ alg : ssp ] and [ alg : steer ] fail to detect such a solution .",
    "the curve of algorithm [ alg : dan ] in fig . [ case4](a ) stops when it reaches the feasible point detection tolerance , which is 0.1 .",
    "once the point is detected , there is no need to further iterate , and the process stops .",
    "the curve for algorithm [ alg : ssp ] in this figure shows irregular behavior since it searches for a feasible solution without reaching the detection threshold of 0.1 and accumulated numerical errors start to affect it",
    ". figure  [ case4](b ) shows a phenomenon similar to the one observed in the small - scale problem : algorithm [ alg : dan ] continues to seek for a feasible solution , while algorithms [ alg : ssp ] and [ alg : steer ] converge to a steady - state , indicating failure to detect a feasible solution .",
    "in the experiments , cases 68 , algorithm [ alg : dan ] outperforms the other algorithms , arriving very close to finding feasible solutions .",
    "it should be observed that the behavior of algorithm [ alg : dan ] observed above is the result of the way in which the relaxation parameters @xmath72 are self - regulating their sizes . in algorithm",
    "[ alg : dan ] the relaxation parameter @xmath72 can be chosen ( see equation ( 3.6 ) ) to be any number of the form@xmath337 where @xmath338 runs over the interval @xmath339",
    ".$ ] consequently , the size of @xmath72 can be very close to zero when @xmath28 is close to a feasible solution ( no matter how @xmath338 is chosen in @xmath339 ) $ ] .",
    "also , @xmath72 may happen to be much larger then @xmath340 when @xmath28 is far from a feasible solution and the number @xmath311 is large enough ( note that @xmath341 stays between 1 and 2 ) .",
    "so , algorithm [ alg : dan ] is naturally under- or over- relaxing the computational process according to the relative position of the current iterate @xmath28 to the feasibility set of the problem .",
    "as our experiments show , in some circumstances , this makes algorithm [ alg : dan ] behave better then the other procedures we compare it with .",
    "at the same time , the self - regulation of the relaxation parameters , which is essential in algorithm [ alg : dan ] , may happen to reduce the initial speed of convergence of this procedure , that is , algorithm [ alg : dan ] may require more computational steps in order to reach a point @xmath28 which is close enough to the feasibility set such that its self - regulatory features to be really advantageous for providing a very precise solution of the given problem ( which the other procedures may fail to do since they may became stationary in the vicinity of the feasibility set ) .",
    "another interesting feature of algorithm [ alg : dan ] , which differentiates it from the other algorithms we compare it with , is its essentially non - simultaneous character : algorithm [ alg : dan ] does not necessarily ask for @xmath342 for all @xmath343 the set of positive weights @xmath344",
    "which condition the progress of the algorithm at step @xmath216 essentially depends on the current iterate @xmath28 ( see ( 3.4 ) ) and allows reducing the number of subgradients needed to be computed at each iterative step ( in fact , one can content himself with only one @xmath342 and , thus , with a single subgradient @xmath345 ) .",
    "this may be advantageous in cases when computing subgradients is difficult and , therefore , time consuming .",
    "the main observations can be summarized as follows :    1 .",
    "algorithm [ alg : dan ] exhibits faster initial convergence than the other algorithms in the vicinity of points with very small @xmath311 .",
    "when the algorithms reach points with small @xmath311 values , then algorithm [ alg : dan ] tends to further reduce the value of @xmath311 , while the other algorithms tend to converge onto a constant steady - state value .",
    "the problem dimensions in our experiments have little impact on the behavior of the algorithms .",
    "3 .   all the examined small - scale problems have no feasible solutions .",
    "this can be seen from the fact that all three algorithms stabilize around @xmath346 .",
    "the chaotic oscillations of algorithm [ alg : ssp ] in the underrelaxed case is due to the fact that this algorithm has no internal mechanism to self - adapt its progress to the distance between the current iterates and the sets whose intersections are to be found .",
    "this phenomenon can hardly happen in algorithm [ alg : dan ] because its relaxation parameters are self - adapting to the size of the current difference between successive iterations .",
    "this is an important feature of this algorithm .",
    "however , this feature also renders it somewhat slower than the other algorithms .",
    "5 .   in some cases ,",
    "algorithms [ alg : ssp ] and [ alg : steer ] indicate that the problem has no solution .",
    "in contrast , algorithm [ alg : dan ] continues to make progress and seems to indicate that the problem has a feasible solution .",
    "this phenomenon is again due to the self - adaptation mechanism , and can be interpreted in one of the following ways : ( a ) the problem indeed has a solution but algorithms [ alg : ssp ] and [ alg : steer ] are unable to detect it ( because they stabilize too fast ) .",
    "algorithm [ alg : dan ] detects a solution provided that it is given enough running time ; ( b ) the problem has no solution and then algorithm [ alg : dan ] will stabilize close to zero , indicating that the problem has no solution , but this may be due to computing ( round - off ) errors .",
    "thus , a very small perturbation of the functions involved in the problem may render the problem feasible .",
    "we have studied here mathematically and experimentally subgradient projections methods for the convex feasibility problem . the behavior of the fully simultaneous subgradient projections method in the inconsistent case is not known .",
    "therefore , we studied and tested two options .",
    "one is the use of steering parameters instead of relaxation parameters and the other is a variable relaxation strategy which is self - adapting . our small - scale and mid - scale experiments are not decisive in all aspects and call for further research .",
    "but one general feature of the algorithm with the self - adapting strategical relaxation is its stability ( non - oscillatory ) behavior and its relentless improvement of the iterations towards a solution in all cases .",
    "at this time we have not yet refined enough our experimental setup .",
    "for example , by the iteration index @xmath216 on the horizontal axes of our plots we consider a whole sweep through all sets of the convex feasibility problem , regardless of the algorithm .",
    "this is a good first approximation by which to compare the different algorithms .",
    "more accurate comparisons should use actual run times . also , several numerical questions still remain unanswered in this report .",
    "these include the effect of various values of the constant @xmath332 as well as algorithmic behavior for higher iteration indices .",
    "in light of the applications mentioned in section [ sect : intro ] , higher dimensional problems must be included . these and other computational questions are currently investigated .",
    "* acknowledgments . *",
    "we gratefully acknowledge the constructive comments of two anonymous referees which helped us to improve an earlier version of this paper .",
    "this work was supported by grant no .",
    "2003275 of the united states - israel binational science foundation ( bsf ) , by a national institutes of health ( nih ) grant no .",
    "hl70472 , by the technion - university of haifa joint research fund and by grant no .",
    "522/04 of the israel science foundation ( isf ) at the center for computational mathematics and scientific computation ( ccmsc ) in the university of haifa .",
    "bauschke , j.m .",
    "borwein and a.s .",
    "lewis , the method of cyclic projections for closed convex sets in hilbert space , _ recent developments in optimization theory and nonlinear analysis _ ( jerusalem 1995 ) , _ contemporary mathematics _ * 204 * ( 1997 ) , 138 .",
    "m. benzi , gianfranco cimmino s contributions to numerical mathematics , atti del seminario di analisi matematica , dipartimento di matematica delluniversit di bologna .",
    "special volume : _ ciclo di conferenze in memoria di gianfranco cimmino _ , march - april 2004 , tecnoprint , bologna , italy ( 2005 ) , pp .",
    "available at : http://www.mathcs.emory.edu/benzi/web_papers/pubs.html                  y. censor , mathematical optimization for the inverse problem of intensity modulated radiation therapy , in : j.r .",
    "palta and t.r .",
    "mackie ( editors ) , _ intensity - modulated radiation therapy : the state of the art _ , american association of physicists in medicine ,",
    "medical physics monograph no .",
    "29 , medical physics publishing , madison , wisconsin , usa , 2003 , pp .",
    "2549 .      y. censor , m.d .",
    "altschuler and w.d .",
    "powlis , on the use of cimmino s simultaneous projections method for computing a solution of the inverse problem in radiation therapy treatment planning , _ inverse problems _ * * 4 ( * * 1988 ) , 607623 .",
    "i. yamada , hybrid steepest descent method for variational inequality problem over the fixed point set of certain quasi - nonexpansive mappings , _ numerical functional analysis and optimization _ * 25 * ( 2004 ) , * * 619655",
    "youla , mathematical theory of image restoration by the method of convex projections , in : h. stark ( editor ) , _ image recovery : theory and applications _ , academic press , orlando , florida , usa , 1987 , pp . 2977 ."
  ],
  "abstract_text": [
    "<S> we study some methods of subgradient projections for solving a convex feasibility problem with general ( not necessarily hyperplanes or half - spaces ) convex sets in the inconsistent case and propose a strategy that controls the relaxation parameters in a specific self - adapting manner . </S>",
    "<S> this strategy leaves enough user - flexibility but gives a mathematical guarantee for the algorithm s behavior in the inconsistent case . </S>",
    "<S> we present numerical results of computational experiments that illustrate the computational advantage of the new method . </S>"
  ]
}