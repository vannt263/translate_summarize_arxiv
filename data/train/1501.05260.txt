{
  "article_text": [
    "reversible computation has gained more and more attention in many application areas , such as the modeling of biochemical systems , program debugging and testing , and also quantum computing .",
    "quantum computing is one of the most important application areas of reversible computation .",
    "there are several research works on reversible computation .",
    "abramsky maps functional programs into reversible automata @xcite ; danos and krivine s reversible rccs @xcite uses the concept of thread to reverse a ccs @xcite@xcite process ; boudol and castellani @xcite@xcite compare three different non - interleaving models for ccs ; phillips and ulidowski s ccsk @xcite formulates a procedure for converting operators of standard algebraic process calculi such as ccs into reversible operators , while preserving their operational semantics . while racp is a new reversible axiomatical algebra , which is an axiomatical refinement to ccsk .    in quantum process algebra ,",
    "qacp @xcite @xcite is an axiomatization of quantum processes , which is a quantum generalization of process algebra acp .",
    "qacp still uses the concept of a quantum process configuration @xmath0 , which is usually consisted of a process term @xmath1 and state information @xmath2 of all ( public ) quantum information variables . in qacp",
    ", quantum operations are chosen to describe transformations of quantum states , and behave as the atomic actions of a pure quantum process .",
    "quantum measurements are treated as quantum operations , so probabilistic bisimulations are avoided .",
    "as qacp is a quantum generalization of acp , we generalize racp in quantum reversible computing in this paper , which is called qracp .",
    "racp and qracp has the same axiomatization modulo the so - called quantum forward - reverse bisimularity , that is , classical reversible computing and quantum reversible computing are unified .",
    "the paper is organized as follows . in section [ pre ] , some basic concepts about basic linear algebra , basic quantum mechanics , equational logic , structural operational semantics and process algebra acp are introduced . in section [ sosqp ] , we extend classical structural operational semantics to support quantum processes . the brqpa is introduced in section [ brqpa ] , arqcp is introduced in section [ arqcp ] , recursion is introduced in section [ recursion ] , and abstraction is introduced in section [ abstraction ] .",
    "classical reversible computing and quantum reversible computing are unified in section [ unifying ] .",
    "an application of qracp is introduced in section [ verification ] .",
    "the extensions of qracp is discussed in section [ extensions ] .",
    "finally , we conclude this paper in section [ conclusions ] .",
    "for convenience of the reader , we introduce some basic concepts about basic linear algebra , basic quantum mechanics ( please refer to @xcite for details ) , equational logic , structural operational semantics and process algebra acp ( please refer to @xcite and @xcite for more details ) .",
    "* definition [ bla].1 ( hilbert space)*. an isolated physical system is associated with a hilbert space , which is called the state space of the system .",
    "a finite - dimensional hilbert space is a complex vector space @xmath3 together with an inner product , which is a mapping @xmath4 satisfying : ( 1)@xmath5 with equality if and only if @xmath6 ; ( 2)@xmath7 ; ( 3 ) @xmath8 , where @xmath9 is the set of complex numbers , and @xmath10 denotes the conjugate of @xmath11 ( @xmath12 ) .    * definition [ bla].2 ( orthonormal basis)*. for any vector @xmath13 in @xmath3 , the length @xmath14 . a vector @xmath13 with @xmath15",
    "is called a unit vector in its state space . an orthonormal basis of a hilbert space",
    "@xmath3 is a basis @xmath16 with    @xmath17    * definition [ bla].3 ( trace of a linear operator)*. the trace of a linear operator @xmath18 on @xmath3 is defined as    @xmath19    * definition [ bla].4 ( tensor products)*. the state space of a composite system is the tensor product of the state space of its components .",
    "let @xmath20 and @xmath21 be two hilbert spaces , then their tensor product @xmath22 consists of linear vectors @xmath23 , where @xmath24 and @xmath25 .    for two linear operator @xmath26 on hilbert space @xmath20 , @xmath27 on hilbert space @xmath21 ,",
    "@xmath28 is defined as    @xmath29    where @xmath30 and @xmath31 .",
    "let @xmath32 and @xmath33 .",
    "then the inner product of @xmath34 and @xmath13 is defined as follows .",
    "@xmath35      * definition [ bqm].1 ( density operator)*. a mixed state of quantum system is represented by a density operator .",
    "a density operator in @xmath3 is a linear operator @xmath2 satisfying:(1 ) @xmath2 is positive , that is , @xmath36 for all @xmath13 ; ( 2 ) @xmath37 .",
    "let @xmath38 denote the set of all positive operators on @xmath3 .",
    "* definition [ bqm].2 ( unitary operator)*. the evolution of a closed quantum system is described by a unitary operator on its state space .",
    "a unitary operator is a linear operator @xmath39 on a hilbert space @xmath3 with @xmath40 , where @xmath41 is the identity operator on @xmath3 and @xmath42 is the adjoint of @xmath39 .    *",
    "definition [ bqm].3 ( quantum measurement)*. a quantum measurement consists of a collection of measurement operators @xmath43 , where @xmath44 is the measurement outcomes and satisfies    @xmath45    * definition [ bqm].4 ( quantum operation ( super operator))*. the evolution of an open quantum system can be described by a quantum operation . a quantum operation on a hilbert space @xmath3 is a linear operator @xmath46 from the space of linear operators on @xmath3 into itself satisfying : ( 1 ) @xmath47\\leq tr(\\varrho)$ ] for each @xmath48 ; ( 2 ) for any extra hilbert space @xmath49 , @xmath50 is positive if @xmath18 is a positive operator on @xmath51 , where @xmath52 is the identity operator in @xmath49 . if @xmath47= tr(\\varrho)$ ] for all @xmath48 , then @xmath46 is said to be trace - preserving .",
    "* definition [ bqm].5 ( relation between quantum operation and unitary operator)*.",
    "let @xmath39 be a unitary operator on the hilbert space @xmath3 , and @xmath53 for any @xmath48 .",
    "then @xmath46 is a trace - preserving quantum operation .    *",
    "definition [ bqm].6 ( relation between quantum operation and measurement operator)*.",
    "let @xmath43 be a quantum measurement on the hilbert space @xmath3 . for each @xmath44 ,",
    "let @xmath54 for any @xmath48 .",
    "the @xmath55 is a quantum operation and is not necessarily trace - preserving .    in this paper , we refer to quantum operations all as reversible quantum operations .",
    "quantum measurements are treated as a special kind of quantum operations , in @xcite , quantum measurements can also be reversible .",
    "we introduce some basic concepts about equational logic briefly , including signature , term , substitution , axiomatization , equality relation , model , term rewriting system , rewrite relation , normal form , termination , weak confluence and several conclusions .",
    "these concepts are coming from @xcite , and are introduced briefly as follows . about the details ,",
    "please see @xcite .",
    "* definition [ elp].1 ( signature)*. a signature @xmath56 consists of a finite set of function symbols ( or operators ) @xmath57 , where each function symbol @xmath58 has an arity @xmath59 , being its number of arguments . a function symbol @xmath60 of arity _ zero _",
    "is called a constant , a function symbol of arity one is called unary , and a function symbol of arity two is called binary .    * definition [ elp].2 ( term)*. let @xmath56 be a signature .",
    "the set @xmath61 of ( open ) terms @xmath62 over @xmath56 is defined as the least set satisfying : ( 1)each variable is in @xmath61 ; ( 2 ) if @xmath63 and @xmath64 , then @xmath65 .",
    "a term is closed if it does not contain variables .",
    "the set of closed terms is denoted by @xmath66 .",
    "* definition [ elp].3 ( substitution)*. let @xmath56 be a signature .",
    "a substitution is a mapping @xmath67 from variables to the set @xmath61 of open terms .",
    "a substitution extends to a mapping from open terms to open terms : the term @xmath68 is obtained by replacing occurrences of variables @xmath69 in t by @xmath70 .",
    "a substitution @xmath67 is closed if @xmath71 for all variables @xmath69 .",
    "* definition [ elp].4 ( axiomatization)*. an axiomatization over a signature @xmath56 is a finite set of equations , called axioms , of the form @xmath72 with @xmath73 .    *",
    "definition [ elp].5 ( equality relation)*. an axiomatization over a signature @xmath56 induces a binary equality relation @xmath74 on @xmath61 as follows .",
    "( 1)(substitution ) if @xmath72 is an axiom and @xmath67 a substitution , then @xmath75 .",
    "( 2)(equivalence ) the relation @xmath74 is closed under reflexivity , symmetry , and transitivity .",
    "( 3)(context ) the relation @xmath74 is closed under contexts : if @xmath76 and @xmath58 is a function symbol with @xmath77 , then @xmath78 .    * definition [ elp].6 ( model)*. assume an axiomatization @xmath79 over a signature @xmath56 , which induces an equality relation @xmath74 .",
    "a model for @xmath79 consists of a set @xmath80 together with a mapping @xmath81 .",
    "( 1)@xmath82 is sound for @xmath79 if @xmath72 implies @xmath83 for @xmath84 ; ( 2)@xmath82 is complete for @xmath79 if @xmath83 implies @xmath72 for @xmath84 .    *",
    "definition [ elp].7 ( term rewriting system)*. assume a signature @xmath56 .",
    "a rewrite rule is an expression @xmath85 with @xmath73 , where : ( 1)the left - hand side @xmath86 is not a single variable ; ( 2)all variables that occur at the right - hand side @xmath87 also occur in the left - hand side @xmath86 .",
    "a term rewriting system ( trs ) is a finite set of rewrite rules .    *",
    "definition [ elp].8 ( rewrite relation)*. a trs over a signature @xmath56 induces a one - step rewrite relation @xmath88 on @xmath61 as follows .",
    "( 1)(substitution ) if @xmath85 is a rewrite rule and @xmath67 a substitution , then @xmath89 .",
    "( 2)(context ) the relation @xmath88 is closed under contexts : if @xmath90 and f is a function symbol with @xmath77 , then @xmath91 .",
    "the rewrite relation @xmath92 is the reflexive transitive closure of the one - step rewrite relation @xmath88 : ( 1 ) if @xmath85 , then @xmath93 ; ( 2 ) @xmath94 ; ( 3 ) if @xmath93 and @xmath95 , then @xmath96 .    * definition [ elp].9 ( normal form)*. a term is called a normal form for a trs if it can not be reduced by any of the rewrite rules .",
    "* definition [ elp].10 ( termination)*. a trs is terminating if it does not induce infinite reductions @xmath97 .",
    "* definition [ elp].11 ( weak confluence)*. a trs is weakly confluent if for each pair of one - step reductions @xmath98 and @xmath99 , there is a term @xmath100 such that @xmath101 and @xmath102 .",
    "* theorem [ elp].1 ( newman s lemma)*. if a trs is terminating and weakly confluent , then it reduces each term to a unique normal form .",
    "* definition [ elp].12 ( commutativity and associativity)*. assume an axiomatization @xmath79 .",
    "a binary function symbol @xmath58 is commutative if @xmath79 contains an axiom @xmath103 and associative if @xmath79 contains an axiom @xmath104 .    *",
    "definition [ elp].13 ( convergence)*. a pair of terms @xmath86 and @xmath87 is said to be convergent if there exists a term @xmath100 such that @xmath96 and @xmath95 .",
    "axiomatizations can give rise to trss that are not weakly confluent , which can be remedied by knuth - bendix completion@xcite .",
    "it determines overlaps in left hand sides of rewrite rules , and introduces extra rewrite rules to join the resulting right hand sides , witch are called critical pairs .",
    "* theorem [ elp].2*. a trs is weakly confluent if and only if all its critical pairs are convergent .",
    "the concepts about structural operational semantics include labelled transition system ( lts ) , transition system specification ( tss ) , transition rule and its source , source - dependent , conservative extension , fresh operator , panth format , congruence , bisimulation , etc .",
    "these concepts are coming from @xcite , and are introduced briefly as follows .",
    "about the details , please see @xcite . also , to support reversible computation ,",
    "we introduce a new kind of bisimulation called forward - reverse bisimulation ( fr bisimulation ) which first occurred in @xcite .",
    "we assume a non - empty set @xmath105 of states , a finite , non - empty set of transition labels @xmath18 and a finite set of predicate symbols .",
    "* definition [ sosp].1 ( labeled transition system)*. a transition is a triple @xmath106 with @xmath107 , or a pair ( s , p ) with @xmath108 a predicate , where @xmath109 .",
    "a labeled transition system ( lts ) is possibly infinite set of transitions .",
    "an lts is finitely branching if each of its states has only finitely many outgoing transitions .",
    "* definition [ sosp].2 ( transition system specification)*. a transition rule @xmath110 is an expression of the form @xmath111 , with @xmath112 a set of expressions @xmath113 and @xmath114 with @xmath115 , called the ( positive ) premises of @xmath110 , and @xmath116 an expression @xmath113 or @xmath114 with @xmath115 , called the conclusion of @xmath110 .",
    "the left - hand side of @xmath116 is called the source of @xmath110 .",
    "a transition rule is closed if it does not contain any variables . a transition system specification ( tss )",
    "is a ( possible infinite ) set of transition rules .    *",
    "definition [ sosp].3 ( proof)*. a proof from a tss @xmath117 of a closed transition rule @xmath111 consists of an upwardly branching tree in which all upward paths are finite , where the nodes of the tree are labelled by transitions such that : ( 1 ) the root has label @xmath116 ; ( 2 ) if some node has label @xmath118 , and @xmath119 is the set of labels of nodes directly above this node , then ( a ) either @xmath119 is the empty set and @xmath120 , ( b ) or @xmath121 is a closed substitution instance of a transition rule in @xmath117 .",
    "* definition [ sosp].4 ( generated lts)*. we define that the lts generated by a tss @xmath117 consists of the transitions @xmath116 such that @xmath122 can be proved from @xmath117 .",
    "* definition [ sosp].5*. a set @xmath123 of expressions @xmath124 and @xmath125 ( where @xmath87 ranges over closed terms , @xmath126 over @xmath18 and @xmath108 over predicates ) hold for a set @xmath46 of transitions , denoted by @xmath127 , if : ( 1 ) for each @xmath128 we have that @xmath129 for all @xmath130 ; ( 2 ) for each @xmath131 we have that @xmath132 .    * definition [ sosp].6 ( three - valued stable model)*.",
    "a pair @xmath133 of disjoint sets of transitions is a three - valued stable model for a tss @xmath117 if it satisfies the following two requirements : ( 1 ) a transition @xmath116 is in @xmath134 if and only if @xmath117 proves a closed transition rule @xmath135 where @xmath123 contains only negative premises and @xmath136 ; ( 2 ) a transition @xmath116 is in @xmath137 if and only if @xmath117 proves a closed transition rule @xmath135 where @xmath123 contains only negative premises and @xmath138 .    *",
    "definition [ sosp].7 ( ordinal number)*. the ordinal numbers are defined inductively by : ( 1 ) @xmath139 is the smallest ordinal number ; ( 2 ) each ordinal number @xmath140 has a successor @xmath141 ; ( 3 ) each sequence of ordinal number @xmath142 is capped by a limit ordinal @xmath11 .    * definition [ sosp].8 ( positive after reduction)*. a tss is positive after reduction if its least three - valued stable model does not contain unknown transitions .    *",
    "definition [ sosp].9 ( stratification)*. a stratification for a tss is a weight function @xmath143 which maps transitions to ordinal numbers , such that for each transition rule @xmath110 with conclusion @xmath116 and for each closed substitution @xmath67 : ( 1 ) for positive premises @xmath113 and @xmath114 of @xmath110 , @xmath144 and @xmath145 , respectively ; ( 2 ) for negative premise @xmath124 and @xmath125 of @xmath110 , @xmath146 for all closed terms @xmath147 and @xmath148 , respectively .",
    "* theorem [ sosp].1*. if a tss allows a stratification , then it is positive after reduction .    *",
    "definition [ sosp].10 ( process graph)*. a process ( graph ) @xmath1 is an lts in which one state @xmath86 is elected to be the root . if the lts contains a transition @xmath149 , then @xmath150 where @xmath151 has root state @xmath152 .",
    "moreover , if the lts contains a transition @xmath153 , then @xmath154 .",
    "( 1 ) a process @xmath155 is finite if there are only finitely many sequences @xmath156 .",
    "( 2 ) a process @xmath155 is regular if there are only finitely many processes @xmath157 such that @xmath156 .    *",
    "definition [ sosp].11 ( reverse transition)*. there are two processes @xmath1 and @xmath151 , two transitions @xmath158 and @xmath159 } } p$ ] , the transition @xmath159 } } p$ ] is called reverse transition of @xmath158 , and the transition @xmath158 is called forward transition . if @xmath158 then @xmath159 } } p$ ] , the forward transition @xmath158 is reversible . where @xmath160 $ ] is a kind of special action constant @xmath160\\in a \\times \\mathcal{k}$ ] , @xmath161 , called the histories of an action @xmath126 , and @xmath162 .",
    "* definition [ sosp].12 ( bisimulation)*. a bisimulation relation @xmath163 is a binary relation on processes such that : ( 1 ) if @xmath164 and @xmath165 then @xmath166 with @xmath167 ; ( 2 ) if @xmath164 and @xmath166 then @xmath165 with @xmath167 ; ( 3 ) if @xmath164 and @xmath154 , then @xmath168 ; ( 4 ) if @xmath164 and @xmath168 , then @xmath154 .",
    "two processes @xmath1 and @xmath169 are bisimilar , denoted by @xmath170 , if there is a bisimulation relation @xmath163 such that @xmath164 .",
    "* definition [ sosp].13 ( forward - reverse bisimulation)*. a forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on processes such that : ( 1 ) if @xmath164 and @xmath165 then @xmath166 with @xmath167 ; ( 2 ) if @xmath164 and @xmath166 then @xmath165 with @xmath167 ; ( 3)if @xmath164 and @xmath171}}p'$ ] then @xmath172}}q'$ ] with @xmath167 ; ( 4 ) if @xmath164 and @xmath172}}q'$ ] then @xmath171}}p'$ ] with @xmath167 ; ( 5 ) if @xmath164 and @xmath154 , then @xmath168 ; ( 6 ) if @xmath164 and @xmath168 , then @xmath154 . two processes",
    "@xmath1 and @xmath169 are fr bisimilar , denoted by @xmath173 , if there is a fr bisimulation relation @xmath163 such that @xmath164 .",
    "* definition [ sosp].14 ( congruence)*. let @xmath56 be a signature .",
    "an equivalence relation @xmath163 on @xmath66 is a congruence if for each @xmath174 , if @xmath175 for @xmath176 , then @xmath177 .    *",
    "definition [ sosp].15 ( panth format)*. a transition rule @xmath110 is in panth format if it satisfies the following three restrictions : ( 1 ) for each positive premise @xmath178 of @xmath110 , the right - hand side @xmath147 is single variable ; ( 2 ) the source of @xmath110 contains no more than one function symbol ; ( 3 ) there are no multiple occurrences of the same variable at the right - hand sides of positive premises and in the source of @xmath110 .",
    "a tss is said to be in panth format if it consists of panth rules only .    * theorem [ sosp].2*. if a tss is positive after reduction and in panth format , then the bisimulation equivalence that it induces is a congruence .    *",
    "definition [ sosp].16 ( branching bisimulation)*. a branching bisimulation relation @xmath163 is a binary relation on the collection of processes such that : ( 1 ) if @xmath164 and @xmath165 then either @xmath179 and @xmath180 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath182 such that @xmath183 and @xmath184 with @xmath167 ; ( 2 ) if @xmath164 and @xmath166 then either @xmath179 and @xmath185 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath186 such that @xmath187 and @xmath188 with @xmath167 ; ( 3 ) if @xmath164 and @xmath154 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath182 such that @xmath183 and @xmath189 ; ( 4 ) if @xmath164 and @xmath168 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath186 such that @xmath187 and @xmath190 . two processes",
    "@xmath1 and @xmath169 are branching bisimilar , denoted by @xmath191 , if there is a branching bisimulation relation @xmath163 such that @xmath164 .",
    "* definition [ sosp].17 ( branching forward - reverse bisimulation)*. a branching forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on the collection of processes such that : ( 1 ) if @xmath164 and @xmath165 then either @xmath179 and @xmath180 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath182 such that @xmath183 and @xmath184 with @xmath167 ; ( 2 ) if @xmath164 and @xmath166 then either @xmath179 and @xmath185 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath186 such that @xmath187 and @xmath188 with @xmath167 ; ( 3 ) if @xmath164 and @xmath154 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath182 such that @xmath183 and @xmath189 ; ( 4 ) if @xmath164 and @xmath168 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath186 such that @xmath187 and @xmath190 ; ( 5 ) if @xmath164 and @xmath171}}p'$ ] then either @xmath179 and @xmath180 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath192 such that @xmath183 and @xmath193}}q'$ ] with @xmath167 ; ( 6 ) if @xmath164 and @xmath172}}q'$ ] then either @xmath179 and @xmath185 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath194 such that @xmath187 and @xmath195}}p'$ ] with @xmath167 ; ( 7 ) if @xmath164 and @xmath154 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath192 such that @xmath183 and @xmath189 ; ( 8) if @xmath164 and @xmath168 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath194 such that @xmath187 and @xmath190 .",
    "two processes @xmath1 and @xmath169 are branching fr bisimilar , denoted by @xmath196 , if there is a branching fr bisimulation relation @xmath163 such that @xmath164 .",
    "* definition [ sosp].18 ( rooted branching bisimulation)*. a rooted branching bisimulation relation @xmath163 is a binary relation on processes such that : ( 1 ) if @xmath164 and @xmath165 then @xmath166 with @xmath197 ; ( 2 ) if @xmath164 and @xmath166 then @xmath165 with @xmath197 ; ( 3 ) if @xmath164 and @xmath154 , then @xmath168 ; ( 4 ) if @xmath164 and @xmath168 , then @xmath154 .",
    "two processes @xmath1 and @xmath169 are rooted branching bisimilar , denoted by @xmath198 , if there is a rooted branching bisimulation relation @xmath163 such that @xmath164 .    *",
    "definition [ sosp].19 ( rooted branching forward - reverse bisimulation)*. a rooted branching forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on processes such that : ( 1 ) if @xmath164 and @xmath165 then @xmath166 with @xmath199 ; ( 2 ) if @xmath164 and @xmath166 then @xmath165 with @xmath199 ; ( 3 ) if @xmath164 and @xmath171}}p'$ ] then @xmath172}}q'$ ] with @xmath199 ; ( 4 ) if @xmath164 and @xmath172}}q'$ ] then @xmath171}}p'$ ] with @xmath199 ; ( 5 ) if @xmath164 and @xmath154 , then @xmath168 ; ( 6 ) if @xmath164 and @xmath168 , then @xmath154 .",
    "two processes @xmath1 and @xmath169 are rooted branching fr bisimilar , denoted by @xmath200 , if there is a rooted branching fr bisimulation relation @xmath163 such that @xmath164 .    *",
    "definition [ sosp].20 ( lookahead)*. a transition rule contains lookahead if a variable occurs at the left - hand side of a premise and at the right - hand side of a premise of this rule .",
    "* definition [ sosp].21 ( patience rule)*. a patience rule for the i - th argument of a function symbol @xmath58 is a panth rule of the form    @xmath201    * definition [ sosp].22 ( rbb cool format)*. a tss @xmath117 is in rbb cool format if the following requirements are fulfilled .",
    "( 1 ) @xmath117 consists of panth rules that do not contain lookahead . ( 2 ) suppose a function symbol @xmath58 occurs at the right - hand side the conclusion of some transition rule in @xmath117 .",
    "let @xmath202 be a non - patience rule with source @xmath203 .",
    "then for @xmath176 , @xmath204 occurs in no more than one premise of @xmath110 , where this premise is of the form @xmath205 or @xmath206 with @xmath207 .",
    "moreover , if there is such a premise in @xmath110 , then there is a patience rule for the i - th argument of @xmath58 in @xmath117 .",
    "* theorem [ sosp].3*. if a tss is positive after reduction and in rbb cool format , then the rooted branching bisimulation equivalence that it induces is a congruence .    *",
    "definition [ sosp].23 ( conservative extension)*.",
    "let @xmath208 and @xmath209 be tsss over signatures @xmath210 and @xmath211 , respectively .",
    "the tss @xmath212 is a conservative extension of @xmath208 if the ltss generated by @xmath208 and @xmath212 contain exactly the same transitions @xmath113 and @xmath114 with @xmath213 .    *",
    "definition [ sosp].24 ( source - dependency)*. the source - dependent variables in a transition rule of @xmath110 are defined inductively as follows : ( 1 ) all variables in the source of @xmath110 are source - dependent ; ( 2 ) if @xmath113 is a premise of @xmath110 and all variables in @xmath87 are source - dependent , then all variables in @xmath147 are source - dependent .",
    "a transition rule is source - dependent if all its variables are .",
    "a tss is source - dependent if all its rules are .    *",
    "definition [ sosp].25 ( freshness)*. let @xmath208 and @xmath209 be tsss over signatures @xmath210 and @xmath211 , respectively . a term in @xmath214",
    "is said to be fresh if it contains a function symbol from @xmath215 .",
    "similarly , a transition label or predicate symbol in @xmath209 is fresh if it does not occur in @xmath208 .",
    "* theorem [ sosp].4*. let @xmath208 and @xmath209 be tsss over signatures @xmath210 and @xmath211 , respectively , where @xmath208 and @xmath212 are positive after reduction . under the following conditions , @xmath212 is a conservative extension of @xmath208 . ( 1 )",
    "@xmath208 is source - dependent .",
    "( 2 ) for each @xmath216 , either the source of @xmath110 is fresh , or @xmath110 has a premise of the form @xmath113 or @xmath114 , where @xmath217 , all variables in @xmath87 occur in the source of @xmath110 and @xmath147 , @xmath126 or @xmath108 is fresh .",
    "acp@xcite is a kind of process algebra which focuses on the specification and manipulation of process terms by use of a collection of operator symbols . in acp",
    ", there are several kind of operator symbols , such as basic operators to build finite processes ( called bpa ) , communication operators to express concurrency ( called pap ) , deadlock constants and encapsulation enable us to force actions into communications ( called acp ) , liner recursion to capture infinite behaviors ( called acp with linear recursion ) , the special constant silent step and abstraction operator ( called @xmath218 with guarded linear recursion ) allows us to abstract away from internal computations .",
    "bisimulation or rooted branching bisimulation based structural operational semantics is used to formally provide each process term used the above operators and constants with a process graph .",
    "the axiomatization of acp ( according the above classification of acp , the axiomatizations are @xmath219 , @xmath220 , @xmath221 , @xmath221 + rdp ( recursive definition principle ) + rsp ( recursive specification principle ) , @xmath222 + rdp + rsp + cfar ( cluster fair abstraction rule ) respectively ) imposes an equation logic on process terms , so two process terms can be equated if and only if their process graphs are equivalent under the semantic model .",
    "acp can be used to formally reason about the behaviors , such as processes executed sequentially and concurrently by use of its basic operator , communication mechanism , and recursion , desired external behaviors by its abstraction mechanism , and so on .",
    "acp is organized by modules and can be extended with fresh operators to express more properties of the specification for system behaviors .",
    "these extensions are required both the equational logic and the structural operational semantics to be extended .",
    "then the extension can use the whole outcomes of acp , such as its concurrency , recursion , abstraction , etc .",
    "we extend the above classical reversible structural operational semantics to support quantum processes , about the details , please refer to @xcite @xcite . here , we use @xmath223 to denote quantum operations in contrast to classical actions @xmath224 .",
    "* definition [ sosqp].1 ( quantum process configuration)*. a quantum process configuration is defined to be a pair @xmath225 , where @xmath1 is a process ( graph ) called structural part of the configuration , and @xmath48 specifies the current state of the environment , which is called its quantum part .",
    "* definition [ sosqp].2 ( quantum process graph)*. a quantum process ( graph ) @xmath225 is an lts in which one state @xmath86 is elected to be the root . if the lts contains a transition @xmath226 ,",
    "then @xmath227 where @xmath228 has root state @xmath152 .",
    "moreover , if the lts contains a transition @xmath153 , then @xmath229 .",
    "( 1 ) a quantum process @xmath230 is finite if and only if the process @xmath155 is finite . ( 2 ) a quantum process @xmath230 is regular if and only if the process @xmath155 is regular .    *",
    "definition [ sosqp].3 ( quantum transition system specification)*. a quantum process transition rule @xmath110 is an expression of the form @xmath111 , with @xmath112 a set of expressions @xmath231 and @xmath232 with @xmath115 and @xmath233 , called the ( positive ) premises of @xmath110 , and @xmath234 , called structural part of @xmath112 and denoted as @xmath235 . and",
    "@xmath116 an expression @xmath231 or @xmath232 with @xmath115 and @xmath233 , called the conclusion of @xmath110 , and @xmath234 , called structural part of @xmath116 and denoted as @xmath236 .",
    "the left - hand side of @xmath116 is called the source of @xmath110 .",
    "@xmath237 is called the structural part of @xmath110 and denoted as @xmath238 .",
    "a quantum process transition rule @xmath110 is closed if and only its structural part @xmath238 is closed . a quantum transition system specification ( qtss )",
    "is a ( possible infinite ) set of transition rules .    *",
    "definition [ sosqp].4 ( quantum reverse transition)*. there are two quantum processes @xmath225 and @xmath228 , two transitions @xmath239 and @xmath240 } } \\langle p , \\varrho\\rangle$ ] , the transition @xmath240 } } \\langle p , \\varrho\\rangle$ ] is called reverse transition of @xmath158 , and the transition @xmath239 is called forward transition . if @xmath239 then @xmath240 } } \\langle p , \\varrho\\rangle$ ] , the forward transition @xmath239 is reversible .",
    "where @xmath241 $ ] is a kind of special quantum operation constant @xmath241\\in a \\times \\mathcal{k}$ ] , @xmath161 , called the histories of an quantum operation @xmath140 , and @xmath162 .",
    "* definition [ sosqp].5 ( quantum forward - reverse bisimulation)*. a quantum forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on processes such that : ( 1 ) if @xmath242 and @xmath243 then @xmath244 with @xmath245 ; ( 2 ) if @xmath242 and @xmath244 then @xmath243 with @xmath245 ; ( 3 ) if @xmath242 and @xmath246}}\\langle p',\\varrho'\\rangle$ ] then @xmath247}}\\langle q',\\varsigma'\\rangle$ ] with @xmath245 ; ( 4 ) if @xmath242 and @xmath247}}\\langle q',\\varsigma'\\rangle$ ] then @xmath246}}\\langle p',\\varrho'\\rangle$ ] with @xmath245 ; ( 5 ) if @xmath242 and @xmath229 , then @xmath248 ; ( 6 ) if @xmath242 and @xmath248 , then @xmath229",
    ". two quantum process @xmath225 and @xmath249 are fr bisimilar , denoted by @xmath250 , if there is a fr bisimulation relation @xmath163 such that @xmath242 .",
    "* definition [ sosqp].6 ( relation between quantum fr bisimulation and classical fr bisimulation)*. for two quantum processes , @xmath250 , with @xmath251 , if and only if @xmath173 and @xmath252 , where @xmath2 evolves into @xmath253 after execution of @xmath1 and @xmath254 evolves into @xmath255 after execution of @xmath169 .",
    "* definition [ sosqp].7 ( quantum branching forward - reverse bisimulation)*. a quantum branching forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on the collection of quantum processes such that : ( 1 ) if @xmath242 and @xmath243 then either @xmath256 and @xmath257 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath258 such that @xmath259 and @xmath260 with @xmath245 ; ( 2 ) if @xmath242 and @xmath244 then either @xmath256 and @xmath261 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath262 such that @xmath263 and @xmath264 with @xmath245 ; ( 3 ) if @xmath242 and @xmath229 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath258 such that @xmath259 and @xmath265 ; ( 4 ) if @xmath242 and @xmath248 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath262 such that @xmath263 and @xmath266 ; ( 5 ) if @xmath242 and @xmath246}}\\langle p',\\varrho'\\rangle$ ] then either @xmath256 and @xmath257 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath267 such that @xmath259 and @xmath268}}\\langle q',\\varsigma'\\rangle$ ] with @xmath245 ; ( 6 ) if @xmath242 and @xmath247}}\\langle q',\\varsigma'\\rangle$ ] then either @xmath256 and @xmath261 or there is a sequence of ( zero or more ) @xmath181-transitions @xmath269 such that @xmath263 and @xmath270}}\\langle p',\\varrho'\\rangle$ ] with @xmath245 ; ( 7 ) if @xmath242 and @xmath229 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath267 such that @xmath259 and @xmath265 ; ( 8) if @xmath242 and @xmath248 , then there is a sequence of ( zero or more ) @xmath181-transitions @xmath269 such that @xmath263 and @xmath266 .",
    "two quantum processes @xmath225 and @xmath249 are branching fr bisimilar , denoted by @xmath271 , if there is a branching fr bisimulation relation @xmath163 such that @xmath242 .",
    "* definition [ sosqp].8 ( relation between quantum branching fr bisimulation and classical branching fr bisimulation)*. for two quantum processes , @xmath271 , with @xmath251 , if and only if @xmath272 and @xmath252 , where @xmath2 evolves into @xmath253 after execution of @xmath1 and @xmath254 evolves into @xmath255 after execution of @xmath169 .",
    "* definition [ sosqp].9 ( quantum rooted branching forward - reverse bisimulation)*. a quantum rooted branching forward - reverse ( fr ) bisimulation relation @xmath163 is a binary relation on quantum processes such that : ( 1 ) if @xmath242 and @xmath243 then @xmath244 with @xmath273 ; ( 2 ) if @xmath242 and @xmath244 then @xmath243 with @xmath273 ; ( 3 ) if @xmath242 and @xmath246}}\\langle p',\\varrho'\\rangle$ ] then @xmath247}}\\langle q',\\varsigma'\\rangle$ ] with @xmath273 ; ( 4 ) if @xmath242 and @xmath247}}\\langle q',\\varsigma'\\rangle$ ] then @xmath246}}\\langle p',\\varrho'\\rangle$ ] with @xmath273 ; ( 5 ) if @xmath242 and @xmath229 , then @xmath248 ; ( 6 ) if @xmath242 and @xmath248 , then @xmath229 .",
    "two quantum processes @xmath225 and @xmath249 are rooted branching fr bisimilar , denoted by @xmath274 , if there is a rooted branching fr bisimulation relation @xmath163 such that @xmath242 .",
    "* definition [ sosqp].10 ( relation between quantum rooted branching fr bisimulation and classical rooted branching fr bisimulation)*. for two quantum processes , @xmath274 , with @xmath251 , if and only if @xmath275 and @xmath252 , where @xmath2 evolves into @xmath253 after execution of @xmath1 and @xmath254 evolves into @xmath255 after execution of @xmath169 .    * definition [ sosqp].11 ( congruence)*. let @xmath56 be a signature and @xmath38 be the state space of the environment .",
    "an equivalence relation @xmath163 on @xmath276 is a congruence , i.e. , for each @xmath174 , if @xmath277 for @xmath176 , then @xmath278 .",
    "an equivalence relation @xmath163 on @xmath276 is a congruence , if for each @xmath174 , @xmath175 for @xmath176 , and @xmath177 .    *",
    "definition [ sosqp].12 ( quantum conservative extension)*. let @xmath208 and @xmath209 be qtsss over signature @xmath210 and @xmath279 , and @xmath211 and @xmath280 , respectively .",
    "the qtss @xmath212 is a conservative extension of @xmath208 if the ltss generated by @xmath208 and @xmath212 contain exactly the same transitions @xmath281 and @xmath282 with @xmath213 and @xmath283 , and @xmath284 .    *",
    "definition [ sosqp].13 ( relation between quantum conservative extension and classical conservative extension)*. the qtss @xmath212 is a quantum conservative extension of @xmath208 with transitions @xmath281 and @xmath282 , if its corresponding tss @xmath285 is a conservative extension of @xmath286 with transitions @xmath287 and @xmath114 .",
    "in the following , the variables @xmath288 range over the collection of process terms , the variables @xmath289 range over the set @xmath18 of quantum operations , @xmath290 , @xmath291 are closed items , @xmath181 is the special constant silent step , @xmath292 is the special constant deadlock .",
    "we define a kind of special action constant @xmath241\\in a \\times \\mathcal{k}$ ] where @xmath161 , called the histories of a quantum operation @xmath140 , denoted by @xmath241,\\alpha[n],\\cdots$ ] where @xmath293 .",
    "let @xmath294 .",
    "brqpa includes three kind of operators : the execution of quantum operation @xmath140 , the choice composition operator @xmath295 and the sequential composition operator @xmath296 .",
    "each finite process can be represented by a closed term that is built from the set @xmath18 of atomic actions or histories of an atomic action , the choice composition operator @xmath295 , and the sequential composition operator @xmath296 .",
    "the collection of all basic process terms is called basic reversible quantum process algebra ( brqpa ) , which is abbreviated to brqpa .",
    "we give the forward transition rules under transition system specification ( qtss ) for brqpa as follows .",
    "@xmath297,\\upsilon(\\varrho)}\\ ] ]    @xmath298,\\varrho'\\rangle \\quad \\upsilon\\notin y}{\\langle x+y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m]+y,\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x',\\varrho'\\rangle \\quad \\upsilon\\notin",
    "y}{\\langle x+y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x'+y,\\varrho'\\rangle}\\ ] ]    @xmath299,\\varrho'\\rangle \\quad \\upsilon\\notin x}{\\langle x+y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x+\\upsilon[m],\\varrho'\\rangle } \\quad\\frac{\\langle y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle y',\\varrho'\\rangle\\quad \\upsilon\\notin x}{\\langle x+y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x+y',\\varrho'\\rangle}\\ ] ]    @xmath300,\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m],\\varrho'\\rangle}{\\langle x+y , \\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m],\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x',\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m],\\varrho'\\rangle}{\\langle x+y , \\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x'+\\upsilon[m],\\varrho'\\rangle}\\ ] ]    @xmath300,\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle y',\\varrho'\\rangle}{\\langle x+y , \\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m]+y',\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x',\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle y',\\varrho'\\rangle}{\\langle x+y , \\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x'+y',\\varrho'\\rangle}\\ ] ]    @xmath300,\\varrho'\\rangle}{\\langle x\\cdot y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle\\upsilon[m]\\cdot y,\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x',\\varrho'\\rangle}{\\langle x\\cdot y,\\varrho\\rangle\\xrightarrow{\\upsilon}\\langle x'\\cdot y,\\varrho'\\rangle}\\ ] ]    @xmath301,\\varrho'\\rangle}{\\langle\\upsilon[m]\\cdot y,\\varrho\\rangle\\xrightarrow{\\omega}\\langle\\upsilon[m]\\cdot \\omega[n],\\varrho'\\rangle } , m\\neq n \\quad\\frac{\\langle y,\\varrho\\rangle\\xrightarrow{\\omega}\\langle y',\\varrho'\\rangle}{\\langle \\upsilon[m]\\cdot y,\\varrho\\rangle\\xrightarrow{\\omega}\\langle\\upsilon[m]\\cdot y',\\varrho'\\rangle}.\\ ] ]    * the first transition rule says that each quantum operation @xmath302 can execute successfully , and leads to a history @xmath303 $ ] .",
    "because in reversible computation , there is no successful termination , the forward transition rule @xmath304,\\upsilon(\\varrho)\\rangle}$ ] implies a successful execution . *",
    "the next four transition rules say that @xmath305 can execute only one branch , that is , it can execute either @xmath86 or @xmath87 , but the other branch remains . *",
    "the next four transition rules say that @xmath305 can execute both branches , only by executing the same quantum operations . *",
    "the last four transition rules say that @xmath306 can execute sequentially , that is , it executes @xmath86 in the first and leads to a successful history , after successful execution of @xmath86 , then execution of @xmath87 follows .",
    "we give the reverse transition rules under transition system specification ( qtss ) for brqpa as follows .",
    "@xmath307,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon,\\upsilon[m](\\varrho)\\rangle}\\ ] ]    @xmath308}}\\langle\\upsilon,\\varrho'\\rangle\\quad \\upsilon[m]\\notin y}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon+y,\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x',\\varrho'\\rangle \\quad \\upsilon[m]\\notin y}{\\langle x+y , \\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x'+y,\\varrho'\\rangle}\\ ] ]",
    "@xmath309}}\\langle\\upsilon,\\varrho'\\rangle \\quad \\upsilon[m]\\notin x}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x+\\upsilon,\\varrho'\\rangle } \\quad\\frac{\\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle y',\\varrho'\\rangle \\quad \\upsilon[m]\\notin x}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x+y',\\varrho'\\rangle}\\ ] ]    @xmath308}}\\langle\\upsilon,\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon,\\varrho'\\rangle}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon,\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x',\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon,\\varrho'\\rangle}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x'+\\upsilon,\\varrho'\\rangle}\\ ] ]    @xmath308}}\\langle\\upsilon,\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle y ' , \\varrho'\\rangle}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon+y',\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x',\\varrho'\\rangle\\quad \\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle y',\\varrho'\\rangle}{\\langle x+y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x'+y',\\varrho'\\rangle}\\ ] ]    @xmath308}}\\langle\\upsilon,\\varrho'\\rangle}{\\langle x\\cdot y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon\\cdot y,\\varrho'\\rangle } \\quad\\frac{\\langle x,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x',\\varrho'\\rangle}{\\langle x\\cdot y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle x'\\cdot y,\\varrho'\\rangle}\\ ] ]    @xmath310}}\\langle\\omega,\\varrho'\\rangle}{\\langle\\upsilon[m]\\cdot y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\omega[n]}}\\langle\\upsilon[m]\\cdot \\omega,\\varrho'\\rangle } , m\\neq n \\quad\\frac{\\langle y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\omega[n]}}\\langle y',\\varrho'\\rangle}{\\langle\\upsilon[m]\\cdot y,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\omega[n]}}\\langle\\upsilon[m]\\cdot y',\\varrho'\\rangle}.\\ ] ]    * the first transition rule says that each history of a quantum operation @xmath303 $ ] can reverse successfully , and leads to a quantum operation @xmath302 .",
    "similarly , the reverse transition rule @xmath311,\\varrho\\rangle {   \\ext@arrow 0055{\\rightslashedarrowfillg@}{}{\\upsilon[m]}}\\langle\\upsilon,\\upsilon[m](\\varrho)\\rangle}$ ] implies a successful reverse . *",
    "the next four transition rules say that @xmath305 can reverse only one branch , that is , it can reverse either @xmath86 or @xmath87 , but the other branch remains .",
    "* the next four transition rules say that @xmath305 can reverse both branches , only by executing the same histories of quantum operations . *",
    "the last four transition rules say that @xmath306 can reverse sequentially , that is , it reverses @xmath87 in the first and leads to a successful quantum operation , after successful reverse of @xmath87 , then reverse of @xmath86 follows .",
    "we design an axiomatization @xmath312 for brqpa modulo quantum fr bisimulation equivalence as table [ axiomforbrqpa ] shows .",
    ".axioms for brqpa [ cols= \" < , < \" , ]     * theorem [ extensions].3*. @xmath313 + rsp + rdp + cfar + qrn1-qrn4 is sound for @xmath314 with guarded linear recursion and renaming operators , modulo quantum rooted branching fr bisimulation equivalence .",
    "since quantum rooted branching fr bisimulation is both an equivalence and a congruence for @xmath314 with guarded linear recursion and renaming operators , only the soundness of the first clause in the definition of the relation @xmath74 is needed to be checked .",
    "that is , if @xmath72 is an axiom in @xmath313 + rsp + rdp + cfar + qrn1-qrn4 and @xmath67 a closed substitution that maps the variable in @xmath86 and @xmath87 to basic quantum process terms , then we need to check that @xmath315 .    since axioms in @xmath313 + rsp +",
    "rdp + cfar + qrn1-qrn4 ( same as @xmath316 + rsp + rdp + cfar + qrn1-qrn4 ) are sound for @xmath317 with guarded linear recursion and renaming operators modulo rooted branching fr bisimulation equivalence , according to the definition of quantum rooted branching fr bisimulation , we only need to check if @xmath252 when @xmath251 , where @xmath2 evolves into @xmath253 after execution of @xmath318 and @xmath254 evolves into @xmath255 after execution of @xmath68 .",
    "we can find that every axiom in table [ axiomforr ] meets the above condition .",
    "* theorem [ extensions].4*. @xmath313 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath314 with guarded linear recursion and renaming operators , modulo quantum rooted branching fr bisimulation equivalence .    to prove that @xmath313 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath314 with guarded linear recursion and renaming operators modulo",
    "quantum rooted branching fr bisilumation equivalence , it means that @xmath319 implies @xmath72 .",
    "it was already proved that @xmath313 + rsp + rdp + cfar + qrn1-qrn4 ( same as @xmath316 + rsp + rdp + cfar + qrn1-qrn4 ) is complete for @xmath317 with guarded linear recursion and renaming operators modulo rooted branching fr bisimulation equivalence , that is , @xmath320 implies @xmath72 .",
    "@xmath319 with @xmath251 means that @xmath320 with @xmath251 and @xmath252 , where @xmath2 evolves into @xmath253 after execution of @xmath86 and @xmath254 evolves into @xmath255 after execution of @xmath87 , according to the definition of quantum rooted branching fr bisimulation equivalence .",
    "the completeness of @xmath313 + rsp + rdp + cfar + qrn1-qrn4 for @xmath317 with guarded linear recursion and renaming operators modulo rooted branching fr bisimulation equivalence determines that @xmath313 + rsp + rdp + cfar + qrn1-qrn4 is complete for @xmath314 with guarded linear recursion and renaming operators modulo quantum rooted branching fr bisimulation equivalence .",
    "we can see that qracp with renaming operator and racp with renaming operator can also be unified under the framework of quantum process configuration @xmath321 .",
    "in this paper , we give a quantum generalization of reversible algebra racp .",
    "based on the relationship between quantum fr bisimularity and classical fr bisimularity , we establish a series of axiomatization for reversible quantum processes called qracp .",
    "we also unify qracp and classical racp under the framework of quantum process configuration @xmath225 .",
    "it makes qracp can adapt to all quantum communication protocols in a reversible computing flavor .",
    "v. danos , j. krivine .",
    ": _ transactions in rccs",
    ". _ proceedings of 16th international conference on concurrency theory , concur 2005 , lecture notes in computer science , vol .",
    "3653 , springer - verlag , 2005 , pp .",
    "398412 .              c. h. bennett and g. brassard .",
    "quantum cryptography : public - key distribution and coin tossing . _ proceedings of the ieee international conference on computer , systems and signal processing , 1984 , 175179 ."
  ],
  "abstract_text": [
    "<S> based on the axiomatization of reversible computing racp , we generalize it to quantum reversible computing which is called qracp . by use of the framework of quantum configuration , we show that structural reversibility and quantum state reversibility must be satisfied simultaneously in quantum reversible computation . </S>",
    "<S> racp and qracp has the same axiomatization modulo the so - called quantum forward - reverse bisimularity , that is , classical reversible computing and quantum reversible computing are unified .    </S>",
    "<S> [ firstpage ]    reversible computation ; process algebra ; algebra of communicating processes ; axiomatization ; quantum computing </S>"
  ]
}