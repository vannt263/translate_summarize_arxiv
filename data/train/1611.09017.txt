{
  "article_text": [
    "a binary word is called _ @xmath0-prefix normal _ if no factor ( substring ) has more @xmath0s than the prefix of the same length . for example",
    ", @xmath6 is @xmath0-prefix normal , but @xmath7 is not .",
    "similarly , a binary word is called _",
    "@xmath1-prefix normal _ if no factor has more @xmath1s than the prefix of the same length .",
    "when not further specified , by _",
    "prefix normal _ we mean @xmath0-prefix normal . in  @xcite",
    ", we gave an algorithm for generating all prefix normal words of fixed length @xmath3 .",
    "as we will see later , to each binary word , a @xmath0-prefix normal word and a @xmath1-prefix normal word can be associated in a unique way , which we will call its _ prefix normal forms_.    the _ parikh vector _ of a binary word @xmath8 is the pair @xmath9 , where @xmath10 is the number of @xmath0s in @xmath8 , and @xmath11 is the number of @xmath1s in @xmath8 .",
    "the set of parikh vectors of factors of a word @xmath12 is called the _ parikh set _ of @xmath12 . for binary words , the problem of deciding whether a particular pair @xmath9 lies in the parikh set of a word @xmath12",
    "is known as _ binary jumbled pattern matching _ ( bjpm ) .",
    "there has been much interest recently in the indexed version of this problem ( ibjpm ) , where an index for the parikh set is created in a preprocessing step , which can then be used to answer queries fast .",
    "the parikh set can be represented in linear space due to the following _ interval property _ of binary strings : if @xmath12 has @xmath13-length substrings with @xmath14 resp .",
    "@xmath15 occurrences of @xmath0 , where @xmath16 , then it also has a @xmath13-length substring with @xmath11 occurrences of @xmath0 , for every @xmath17 .",
    "thus the parikh set can be represented by storing , for every @xmath18 , the minimum and maximum number of @xmath0s in a substring of length @xmath13 .",
    "much recent research has focused on how to compute these numbers efficiently  @xcite .",
    "the problem has also been extended to graphs and trees  @xcite , to the streaming model  @xcite , and to approximate indexes  @xcite .",
    "there is also interest in the non - binary variant  @xcite , as well as in reconstruction from the parikh multi - set of a string  @xcite .",
    "applications in computational biology include snp discovery , alignment , gene clusters , pattern discovery , and mass spectrometry data interpretation  @xcite .    the current best construction algorithm for the linear size index for ibjpm runs in @xmath19 time  @xcite , for a word of length @xmath3 .",
    "as we will see later , computing the prefix normal forms of a word @xmath12 is equivalent to creating an index for the parikh set of @xmath12 .",
    "currently , we know no faster computation algorithms for the prefix normal forms than already exist for the linear - size index",
    ". however , should better algorithms be discovered , these would immediately carry over to the problem of ibjpm .",
    "it is worthwhile noting that some relevant sequences have made it into the on - line encyclopedia of integer sequences ( oeis  @xcite ) : a194850 is the number of prefix normal words of length @xmath3 , a238109 is a list of prefix normal words ( over the alphabet @xmath20 ) , and a238110 is the maximum size of a class of binary words of length @xmath3 having the same prefix normal form .    the paper is organized as follows : section 2 contains basic definitions and results about prefix normal words ; in particular that there are unique @xmath1-prefix normal and @xmath0-prefix normal words associated with every word , and thus the set of words can be partitioned according to this association . in section 3",
    "we consider the set of prefix normal words , giving several properties and characterizations and showing that their language is not context free .",
    "one of these properties is then used in section 4 , which is concerned with counting the number of prefix normal words of a given length .",
    "finally , the paper concludes with some open problems in section 5 .",
    "a _ binary word _ ( or _ string _ ) @xmath21 over @xmath22 is a finite sequence of elements @xmath23 for @xmath24 .",
    "its length @xmath3 is denoted by @xmath25 .",
    "we denote by @xmath26 the set of words over @xmath27 of length @xmath3 , by @xmath28 the set of finite words over @xmath27 , and the empty word by @xmath29 .",
    "let @xmath30 .",
    "if @xmath31 for some @xmath32 , we say that @xmath8 is a _ prefix _ of @xmath12 and @xmath33 is a _ suffix _ of @xmath12 .",
    "a _ factor _ or _ substring _ of @xmath12 is a prefix of a suffix of @xmath12 .",
    "we denote the set of factors of @xmath12 by @xmath34 .",
    "let @xmath35 , then the word @xmath36 is called the _ reversal _ of @xmath12 . a word @xmath12 s.t .",
    "@xmath37 is called a _",
    "palindrome_. a _ binary language _ is any subset @xmath38 of @xmath39 .",
    "we denote by @xmath40 the number of @xmath0s in the word @xmath12 ; similarly , @xmath41 is the number of @xmath1s in @xmath12 .",
    "the _ parikh vector _ of a word @xmath12 over @xmath27 is defined as @xmath42 .",
    "the _ parikh set _ of @xmath12 is @xmath43 , the set of parikh vectors of the factors of @xmath12 .",
    "for example @xmath44 and @xmath45 .    given a binary word @xmath12 ,",
    "we denote by @xmath46 the number of @xmath0s in the prefix of length @xmath47 and by @xmath48 the position of the @xmath47th @xmath0 in the word @xmath12 , i.e.  @xmath49 and @xmath50 .",
    "the functions @xmath51 and @xmath52 are defined similarly .",
    "note that in the context of succint indexing , these functions are frequently called @xmath53 and @xmath54 , cf .",
    "@xcite : we have , for @xmath55 , @xmath56 and @xmath57 .      let @xmath58 .",
    "we define , for each @xmath59 : @xmath60    the maximum number of @xmath0s in a factor of @xmath12 of length @xmath13 . when no confusion can arise , we also write @xmath61 for @xmath62 . the function @xmath63 is defined analogously by taking @xmath1 in place of @xmath0 .    for a word @xmath12 ,",
    "we denote by @xmath64 the function @xmath65 ( and similarly with other functions taking arguments @xmath12 and @xmath13 ) .",
    "[ ex:1 ] take @xmath66 . in table",
    "[ table : val ] , we give the values of @xmath67 and @xmath68 for @xmath12 .",
    "r || c * 29@l @xmath13 & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18 & 19 & 20 & 21 & 22 +    ' '' ''    @xmath69 & 0 & 1 & 2 & 3 & 3 & 4 & 4 & 4 & 5 & 6 & 6 & 7 & 7 & 7 & 8 & 8 & 9 & 10 & 10 & 10 & 11 & 11 & 12 + @xmath70 & 0 & 1 & 2 & 3 & 3 & 3 & 4 & 4 & 5 & 5 & 6 & 6 & 7 & 7 & 7 & 8 & 8 & 9 & 9 & 10 & 10 & 10 & 10 +    a word @xmath71 is called _",
    "@xmath0-prefix normal _",
    "if @xmath72 . it is called _",
    "@xmath1-prefix normal _ if @xmath73 .",
    "in other words , @xmath12 is @xmath0-prefix normal ( @xmath1-prefix normal ) if and only if it does not have any factors with more @xmath0s ( more @xmath1s ) than the prefix of the same length . when not specified , then by _",
    "prefix normal _ we mean _ @xmath0-prefix",
    "normal_.    the word @xmath74 is @xmath0-prefix normal , but the word @xmath75 is not @xmath0-prefix normal because the factor @xmath76 has three @xmath0s , while the prefix of length @xmath77 has only two . also , @xmath12 is not @xmath1-prefix normal since every @xmath1-prefix normal word , except those of the form @xmath78 , must start with a 0 .",
    "we will soon see that it is possible to find , for every word @xmath12 , a @xmath0-prefix normal word which has the same maximum - ones function @xmath79 as @xmath12 ; and analogously for @xmath1 .",
    "these will be called the prefix normal forms of @xmath12 . to this end",
    ", we define the following equivalence ; we will then see that equivalent words have the same prefix normal form .",
    "two words @xmath80 are called _",
    "@xmath0-prefix equivalent _ if @xmath81 .",
    "they are called _",
    "@xmath1-prefix equivalent _ if @xmath82 .",
    "the words @xmath83 are all @xmath0-prefix equivalent , but not @xmath1-prefix equivalent .",
    "when considering @xmath1 , we have that @xmath84 , @xmath6 , @xmath85 constitute one equivalence class , and @xmath86 another one ( note that in the first class , there is an additional word not present in the 1-prefix equivalence class ) .",
    "next we will show that every equivalence class contains exactly one prefix normal word ( theorem [ thm : pnf ] ) , which can thus be used as its representative .",
    "this will allow us to associate two prefix normal words to every word @xmath12 ( definition [ def : pnf ] ) .",
    "first we need the following lemma .",
    "[ lemma : fa ] let @xmath58 .",
    "then , for all @xmath87 : @xmath88 .    observe that if @xmath89 , then @xmath90 .",
    "thus if @xmath33 is a length @xmath91 word such that @xmath92 and @xmath93 , then @xmath94 .",
    "[ thm : pnf ] for every @xmath58 there is a unique @xmath0-prefix normal word @xmath95 such that @xmath96 ; similarly , there is a unique @xmath1-prefix normal word @xmath97 such that @xmath98 .",
    "we only give the proof for @xmath95 .",
    "the construction of @xmath97 is analogous .    first note that if the @xmath0-prefix normal words @xmath8 and @xmath33 are @xmath0-prefix equivalent , then necessarily @xmath99 .",
    "this holds because the prefix function @xmath100 determines the word , i.e.  @xmath101 implies @xmath99 for _ any _ @xmath102 .",
    "but since @xmath8 and @xmath33 are @xmath0-prefix normal words , their prefix and maximum - ones functions coincide , and since they are @xmath0-prefix equivalent , we have @xmath103 .",
    "this proves uniqueness .",
    "next , we will construct @xmath95 , given @xmath12 .",
    "it is easy to see that for @xmath104 , one has either @xmath105 or @xmath106 .",
    "now define the word @xmath95 by    @xmath107 for every @xmath104 .    by construction",
    ", we have @xmath108 for every @xmath104 . we still need to show that @xmath109 for all @xmath13",
    ". this will prove that @xmath95 is @xmath0-prefix normal , as well as that it is @xmath0-prefix equivalent to @xmath12 .    by definition , @xmath110 for all @xmath13 .",
    "now let @xmath111 , @xmath112 , and @xmath113 .",
    "then @xmath114 , where the inequality holds by lemma  [ lemma : fa ] .",
    "we have thus proved that @xmath115 , and hence @xmath95 is @xmath0-prefix normal .",
    "[ def : pnf ] let @xmath58",
    ". then we denote by @xmath116 the unique @xmath0-prefix normal word which is @xmath0-prefix equivalent to @xmath12 , and by @xmath117 the unique @xmath1-prefix normal word which is @xmath1-prefix equivalent to @xmath12 .",
    "we refer to @xmath116 and @xmath117 as the _ prefix normal form w.r.t .",
    "@xmath0 ( resp .  w.r.t .",
    "@xmath1 ) _ or just _ normal form w.r.t .  @xmath0 ( resp .",
    "@xmath1 ) _ of @xmath12 .    let @xmath66 .",
    "the normal forms of @xmath12 are the words @xmath118 @xmath119    refer to example  [ ex:1 ] for the values of the two functions @xmath64 and @xmath120 .",
    "the operators @xmath121 and @xmath122 are idempotent operators ; i.e. , if @xmath123 then @xmath124 , for @xmath55 .",
    "this gives us an equivalent definition of prefix normality : a word @xmath12 is @xmath10-prefix normal if @xmath125 .",
    "also , for any @xmath30 and @xmath126 , it holds that @xmath127 .",
    "note further that if the equivalence class of @xmath12 contains only one element , then @xmath12 is necessarily prefix normal and a palindrome . in table  [",
    "table : classes4 ] we list all eight 1-prefix equivalence classes for words of length @xmath77 .",
    "l * 3@c @xmath128 & class & cardinality +    ' '' ''     + @xmath129 & \\{@xmath129 } & 1 + @xmath130 & \\{@xmath130 , @xmath131 } & 2 + @xmath76 & \\{@xmath76 , @xmath132 } & 2 + @xmath133 & \\{@xmath133 , @xmath134 , @xmath135 } & 3 + @xmath136 & \\{@xmath136 , @xmath137 } & 2 + @xmath138 & \\{@xmath138 } & 1 + @xmath139 & \\{@xmath139 , @xmath140 , @xmath141 , @xmath142 } & 4 + @xmath143 & \\{@xmath143 } & 1 +    the normal forms of a word allow us to determine the parikh vectors of the factors of the word , as we will show in theorem [ thm : charparset ] .",
    "we first recall the following lemma from  @xcite ( which also appears to be folklore ) .",
    "we say that a parikh vector @xmath144 _ occurs _ in a word @xmath12 if @xmath12 has a factor @xmath33 with @xmath145 .",
    "[ lemma : interval ] let @xmath58 .",
    "fix @xmath146 .",
    "if the parikh vectors @xmath147 and @xmath148 both occur in @xmath12 , then so does @xmath149 for any @xmath17 .",
    "the lemma can be proved with a simple sliding window argument , exploiting the fact that when a fixed size window is shifted by one , then the number of @xmath0s in the window changes by at most one .",
    "[ thm : charparset ] let @xmath150 be words over @xmath27",
    ". then @xmath151 if and only if @xmath152 and @xmath153 .",
    "let @xmath154 denote the minimum number of @xmath0s in a factor of @xmath12 of length @xmath13 . as a direct consequence of lemma  [ lemma : interval ]",
    ", we have that for a parikh vector @xmath155 , @xmath156 if and only if @xmath157 .",
    "thus for two words @xmath150 , we have @xmath151 if and only if @xmath158 and @xmath159 .",
    "it is easy to see that for all @xmath13 , @xmath160 , thus the last statement is equivalent to @xmath161 and @xmath162 .",
    "this holds if and only if @xmath152 and @xmath153 , and the claim is proved .",
    "define @xmath163 , the set of parikh vectors of all prefixes of @xmath12 .",
    "the following lemma is immediate .    for all @xmath164 , @xmath165 [ lemma : suffix ]",
    "there is an interesting geometrical way to view lemma [ lemma : suffix ] which we describe now .",
    "imagine each parikh pair as the coordinates of a point in the euclidean plane that has been rotated clockwise @xmath166 radians .",
    "each word @xmath12 can be interpreted as a polygonal path in this plane going up and to the right for each 1 ( @xmath167 ) or down and to the right for each 0 ( @xmath168 ) , for each successive bit of @xmath12 . to obtain @xmath169 imagine grabbing the polygonal path for @xmath12 and pulling it one step at a time through the origin , keeping track of the integer lattice points that are hit after each pull ( and ignoring the stuff to the left of the origin ) .",
    "the normal forms @xmath170 and @xmath171 are obtained by forming polygonal paths starting at the origin , and connecting the uppermost and the lowermost points of the region , respectively .",
    "( dark line ) , its normal forms @xmath172 and @xmath173 ( lighter lines ) ; the region between the two is the parikh set of @xmath12 ; e.g.   @xmath12 has a substring containing @xmath174 ones and @xmath175 zeros ( black dot ) .",
    "note that the axes giving the number of @xmath1s and @xmath0s are rotated by 45 degrees clockwise.,height=170 ]      theorem  [ thm : charparset ] is relevant for the problem known as indexed binary jumbled pattern matching , which has attracted much interest recently . recall that a parikh vector over @xmath176 is a multiplicity vector of a string , i.e.  it has non - negative integer entries .",
    "_ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ indexed binary jumbled pattern matching ( ibjpm ) + given a string @xmath12 of length @xmath3 over @xmath176 , create an index which allows fast answers to queries of the following form : + * input : * a parikh vector @xmath144 , + * output : * return * yes * if @xmath144 occurs in @xmath169 , and * no * otherwise .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    for @xmath177 ,",
    "let @xmath154 be the minimum number of @xmath0s in a factor of length @xmath13 , and @xmath178 , as before , the maximum number of @xmath0s in a factor of length @xmath13 .",
    "it follows from lemma  [ lemma : interval ] that the answer for query @xmath155 is * yes * if and only if @xmath179 .",
    "therefore , it suffices to store , for every @xmath180 , the two numbers @xmath178 and @xmath154 , and queries can be answered in constant time .",
    "the size of this data structure is @xmath181 .",
    "all current solutions for ibjpm are based on this observation .",
    "the crux is how to construct this linear size data structure .",
    "the construction time of the index has steadily decreased since its first introduction : from @xmath182  @xcite to @xmath183  @xcite , to @xmath184 in the word ram - model  @xcite , to @xmath185  @xcite .",
    "the fastest solution at present is due to chan and lewenstein and has running time @xmath186  @xcite .",
    "normal forms are in effect an encoding of this linear size index .",
    "we have already seen that the @xmath187-function can be viewed as a binary string , namely @xmath116 .",
    "we have observed in the proof of theorem [ thm : charparset ] how the function @xmath188 is determined by @xmath120 and thus also by @xmath117 , thus we have shown the following lemma .",
    "the answer for an ibjpm query @xmath155 is * yes * if and only if @xmath189 .",
    "note that @xmath190 can be computed in constant time with constant time rank - queries on bit vectors , using only @xmath191 bits of extra space  @xcite .",
    "let @xmath192 .",
    "then the linear size data structure is given in the table  [ table : lineards ] , and the @xmath79 and @xmath193 functions in table  [ table : lineards2 ] .",
    ".the maximum and minimum number of @xmath0s for the word @xmath192.[table : lineards ] [ cols=\"^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     at present , no faster computation of the normal forms is known than the algorithms cited above for the ibjpm problem .",
    "but the connection shown here implies that , should a fast normal form computation be found , it would immediately translate into a new solution for ibjpm .",
    "in this section , we take a closer look at prefix normal words . we give several equivalent characterizations of prefix normality , explore some properties of prefix normal words , and then look at the language of prefix normal words .",
    "we denote by @xmath194 the language of @xmath0-prefix normal words , and by @xmath195 the language of @xmath1-prefix normal words .",
    "note that these are exactly complemented , i.e.  replacing every @xmath0 by a @xmath1 and vice versa , in each word of @xmath196 , yields @xmath197 .",
    "therefore , every result about @xmath196 has an equivalent formulation for @xmath197 , as well .",
    "recall that whenever not further specified , we refer to 1-prefix normality . in section  [ sec : preneck ]",
    "only , we will talk about @xmath1-prefix normal words , and we will show that @xmath197 is strictly contained in the language of pre - necklaces , when adopting the usual order @xmath198 on the alphabet .",
    "we start with several characterizations of prefix normal words .",
    "[ prop : char ] let @xmath30 .",
    "the following properties are equivalent :    1 .",
    "@xmath12 is a prefix normal word ; 2 .",
    "@xmath199 where @xmath200 , we have @xmath201 ; 3 .",
    "@xmath202 such that @xmath203 , we have @xmath204 ; 4 .   @xmath199 such that @xmath205 , we have @xmath206 .",
    "\\(1 ) @xmath207 ( 2 ) . follows from lemma  [ lemma : fa ] , since @xmath72 .",
    "\\(2 ) @xmath207 ( 3 ) .",
    "assume otherwise .",
    "then there exists @xmath208 s.t .",
    "@xmath209 , where @xmath210 .",
    "let @xmath113 , thus @xmath211 .",
    "then @xmath212 . but @xmath213 , a contradiction .",
    "\\(3 ) @xmath207 ( 4 ) .",
    "again assume that the claim does not hold .",
    "then there are @xmath214 s.t .",
    "let @xmath216 and @xmath217 and define @xmath218 .",
    "then @xmath33 has @xmath47 many @xmath0s .",
    "but @xmath219 , in contradiction to ( 3 ) .",
    "\\(4 ) @xmath207 ( 1 ) .",
    "let @xmath208 , @xmath220 .",
    "we have to show that @xmath221 .",
    "this is equivalent to showing that @xmath222 .",
    "let @xmath223 , thus @xmath224 .",
    "let @xmath225 , thus the first @xmath0 in @xmath33 is the @xmath91th @xmath0 of @xmath12 .",
    "note that we have @xmath226 and @xmath227 . by the assumption",
    ", we have @xmath228 .    next we formulate a characterization of the prefix normal property that will be useful in the enumeration of fixed - length prefix normal words ( section  [ sec : enumeration ] ) .",
    "[ lemma : equivdefpn ] let @xmath229 .",
    "for some sequence of positive integers @xmath230 , @xmath231 , @xmath232 , @xmath233 we can write @xmath234 . the word @xmath12 is prefix normal if and only if the following inequalities hold .",
    "note that for @xmath236 , we have @xmath237 .",
    "the statement of the lemma then follows by property ( 4 ) of proposition [ prop : char ] .",
    "we now give some simple facts about the language @xmath196 .",
    "[ prop : la_properties ] let @xmath196 be the language of prefix normal words .    1 .",
    "@xmath196 is prefix - closed , that is , any prefix of a word in @xmath196 is a word in @xmath196 .",
    "if @xmath238 , then any word of the form @xmath239 or @xmath240 , @xmath241 , also belongs to @xmath196 .",
    "3 .   let @xmath242 .",
    "then @xmath238 iff either @xmath243 for some @xmath244 or the first letter of @xmath12 is @xmath0 .",
    "4 .   let @xmath30 . then there exist",
    "infinitely many @xmath245 such that @xmath246 .",
    "the claims _ 1 . , 2 . , 3 .",
    "_ follow easily from the definition . for _ 4 .",
    "_ , note that for any @xmath247 , the word @xmath248 belongs to @xmath196",
    ".    we now deal with the question of how a prefix normal word can be extended to the right into another prefix normal word .",
    "[ lemma : test ] let @xmath238 .",
    "then @xmath249 if and only if for every @xmath250 the suffix of @xmath12 of length @xmath13 has less @xmath0s than the prefix of @xmath12 of length @xmath251 .    note that for all @xmath146 , @xmath252",
    ". now if @xmath249 , then for the @xmath13-length suffix @xmath8 of @xmath12 : @xmath253 .",
    "conversely , let @xmath8 be a factor of @xmath254 . if @xmath8 is a factor of @xmath12 , then @xmath255 .",
    "else @xmath256 , with @xmath257 a suffix of @xmath12 , and @xmath258 , and thus @xmath259 .",
    "therefore , @xmath260 .",
    "we close this section by proving that @xmath196 is not context - free .",
    "[ teor : cf ] @xmath196 is not context - free .",
    "recall that the intersection of a cfl with a regular language is a cfl .",
    "we will show that @xmath261 is not a cfl by using the pumping lemma .",
    "let @xmath3 be the constant of the pumping lemma and let @xmath262 .",
    "let @xmath263 be the usual factorization of the pumping lemma , where we may assume that @xmath264 , @xmath265 , and for all @xmath266 we have @xmath267 .",
    "clearly @xmath268 can not contain 0s .",
    "if @xmath268 contains some 1s from the first block of 1s in @xmath269 , then taking @xmath270 give a contradiction since the third block of 1s is too long .",
    "if @xmath268 contains no 1s from the first block of 1s then taking @xmath271 makes the second or third block of 1s too long .      in this section",
    "we explore the relationship between the language @xmath197 of prefix normal words w.r.t .",
    "@xmath1 and some known classes of words defined by means of lexicographic properties .",
    "note that in this section , when referring to prefix normality , we mean with respect to @xmath1 .",
    "we assume the usual order @xmath198 on the alphabet .",
    "a _ lyndon word _ is a word which is lexicographically strictly smaller than any of its proper non - empty suffixes .",
    "equivalently , @xmath12 is a lyndon word if it is the strictly smallest , in the lexicographic order , among its conjugates , i.e. , for any factorization @xmath31 , with @xmath102 non - empty words , one has that the word @xmath272 is lexicographically greater than @xmath12 @xcite .",
    "a word @xmath12 is a _",
    "power _ if it can be obtained by concatenating two or more copies of another word , i.e.  if there exists a non - empty @xmath33 and a @xmath273 such that @xmath274 . a word that is not a power is called _ primitive_. note that",
    ", by definition , a lyndon word is primitive .",
    "let us denote by @xmath275 the set of lyndon words over @xmath27 .",
    "one has that @xmath276 and @xmath277 .",
    "for example , the word @xmath278 belongs to @xmath197 but is not a lyndon word since it is not primitive .",
    "an example of a lyndon word which is not in normal form is @xmath279 .",
    "a necklace is a lyndon word or a power of a lyndon word .",
    "pre - necklace _ is a prefix of a necklace  @xcite ( also called _",
    "preprime word _",
    "@xcite , or _ sesquipower _ or",
    "_ fractional power _ of a lyndon word @xcite ) .",
    "let us denote by @xmath280 the language of pre - necklaces .",
    "the next proposition shows that every prefix normal word different from a power of the letter @xmath0 is a prefix of a lyndon word .",
    "[ prop : preflin ] let @xmath281 with @xmath282 .",
    "then the word @xmath283 is a lyndon word .",
    "we have to prove that every rotation of @xmath284 is strictly greater than @xmath95 .",
    "if the rotation starts at a position within the second half of @xmath95 , then this is clearly true , since then its first character is @xmath0 , while @xmath95 starts with a @xmath1 , @xmath12 being a prefix normal word containing at least one @xmath1 .",
    "so let @xmath33 be a suffix of @xmath95 of length at least @xmath285 , and let @xmath8 be the longest common prefix of @xmath33 and @xmath95 .",
    "if @xmath99 , then @xmath33 is a border ( both a prefix and suffix ) of @xmath95 , of length more than half its length , and thus @xmath95 has a period of length @xmath286 , i.e. , every character is the same as the one which follows @xmath47 positions later .",
    "since the second half of @xmath95 consists of @xmath0s only , this implies that so does the first half , contrary to our assumption .",
    "so @xmath33 is not a prefix of @xmath95 , and therefore @xmath8 is followed by two different characters in @xmath33 and in @xmath95 .",
    "let us write @xmath287 .",
    "if @xmath288 , then @xmath289 is a prefix of @xmath33 , implying that @xmath290 is a prefix of @xmath95 , and thus @xmath95 is smaller than @xmath33 .",
    "if @xmath291 , assume that @xmath290 is a prefix of @xmath33 and @xmath289 of @xmath95 .",
    "then @xmath12 has a substring ( @xmath290 ) which has more @xmath1s than the prefix of the same length ( @xmath289 ) , a contradiction to @xmath12 being prefix normal .",
    "therefore , again we have that @xmath95 is smaller than @xmath33 .    we can now state the following result :    [ theor : pl ] every prefix normal word is a pre - necklace .",
    "if @xmath12 is of the form @xmath292 , @xmath293 , then @xmath12 is a power of the lyndon word @xmath0 , hence it is a pre - necklace .",
    "otherwise , @xmath12 contains at least one @xmath1 , thus by proposition [ prop : preflin ] , it is the prefix of a lyndon word .",
    "the languages @xmath197 and @xmath294 , however , do not coincide .",
    "a shortest word in @xmath294 that does not belong to @xmath197 is @xmath295 .",
    "below we give the table of the number of words in @xmath197 of each length @xmath296 , compared with that of pre - necklaces .",
    "both sequences are listed in the on - line encyclopedia of integer sequences  @xcite ( sequences a062692 and a194850 ) , where the reader can find further terms .",
    "c || c * 29@l @xmath3 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 +    ' '' ''    @xmath297 & 2 & 3 & 5 & 8 & 14 & 23 & 41 & 70 & 125 & 218 & 395 & 697 & 1273 & 2279 & 4185 & 7568 + @xmath298 & 2 & 3 & 5 & 8 & 14 & 23 & 41 & 71 & 127 & 226 & 412 & 747 & 1377 & 2538 & 4720 & 8800 +",
    "let @xmath2 denote the number of prefix normal words of length @xmath3 .",
    "it is an easy consequence both of lemma  [ lemma : equivdefpn ] and of proposition  [ prop : la_properties ] that @xmath2 grows exponentially . to see this , note that the conditions of lemma  [ lemma : equivdefpn ] are always satisfied if @xmath299 , and thus the number of partitions of @xmath3 is a lower bound for @xmath2 .",
    "on the other hand , proposition  [ prop : la_properties ] states that for all @xmath12 , @xmath300 is prefix normal , so @xmath301 .    in table",
    "[ table : cardofl ] , we give @xmath2 for @xmath3 up to @xmath302 , the sequence for @xmath3 up to @xmath303 can be found in the on - line encyclopedia of integer sequences  @xcite , sequence a194850 . in fig .",
    "[ fig : pnf_increase ] we show the growth ratio for small values of @xmath3 .",
    "two interesting phenomena can be observed : the values seem to approach 2 slowly , i.e. , the number of prefix normal words almost doubles as we increase the length by 1 .",
    "second , the values show on oscillation pattern between even and odd values .     for prefix normal words",
    "@xmath12 of length @xmath3 , for @xmath304 ( loglinear scale).[fig : pnf_increase ] ]      we give lower and upper bounds on the number @xmath2 of prefix normal words of length @xmath3 .",
    "[ thm : lowbound ] for @xmath3 sufficiently large @xmath305    let @xmath306 be a positive integer to be fixed later . first we only consider words whose length , @xmath3 , is a multiple of @xmath307 , whose first @xmath308 letters are @xmath0s , and in each of the following blocks of length @xmath307 , there are exactly @xmath13 @xmath0s and @xmath13 @xmath1s .",
    "the number of such words is @xmath309 and by construction , they are all prefix normal .",
    "we use the inequality @xmath310 and substitute @xmath311 in the third step .",
    "@xmath312 the last inequality follows from the fact that @xmath313 if @xmath311 .",
    "next we show how to obtain an upper bound on @xmath2 , considering the length of the first 1-run .",
    "[ thm : upbound ] for @xmath3 sufficiently large , we have @xmath314 .",
    "this will follow from enumeration results about pre - necklaces since every @xmath1-prefix normal word is a pre - necklace .",
    "let @xmath315 be the number of pre - necklaces of length @xmath3 .",
    "in @xcite it is shown ( top of page 424 ) that @xmath316 they also show that ( lemma 5 of @xcite ) @xmath317 thus , for large enough @xmath3 , and fixed @xmath318 , @xmath319      for a binary word @xmath12 , its _ density _ is defined as the number of @xmath0s in @xmath12 , i.e.  as @xmath320 .",
    "if we count the number of prefix normal words of length @xmath3 with a given fixed number of @xmath0s , we get exact results in a few cases .",
    "let us denote by @xmath321 the cardinality of the set @xmath322 .",
    "[ prop : genfunc ] for @xmath323 , we have the generating functions @xmath324 :    @xmath325    @xmath326 f_5(x ) & = & \\frac{x^5(1+x+x^2)}{(1-x^4)(1-x^2)^2(1-x)^2}\\\\[2 mm ] f_6(x ) & = & \\frac{x^6(1+x+x^2+x^3)}{(1-x^5)(1-x^3)(1-x^2)(1-x)^3}\\end{aligned}\\ ] ]    for @xmath327 , one easily checks @xmath328 , @xmath329 and @xmath330 , giving the desired functions .    for @xmath331",
    ", we calculate the number of positive solutions @xmath332 to the inequalities in lemma [ lemma : equivdefpn ] .",
    "let @xmath333 , @xmath334 , @xmath335 and @xmath336 .",
    "we are counting the nonnegative solutions of @xmath337 which give generating function @xmath338 by equating the coefficients of @xmath339 in the expansion of the following product : @xmath340 more complicated but manageable case analysis leads to the results for @xmath341 and @xmath175 .",
    "similar formulas can be derived for @xmath342 for small values of @xmath5 .",
    "unfortunately , no clear pattern is visible for @xmath343 that we could use for calculating @xmath2 .",
    "the inequalities in lemma [ lemma : equivdefpn ] define linear diophantine equations .",
    "the general theory for enumerating solutions of such equations @xcite guarantees that there is a closed rational function form for the generating functions with the observed denominators , in @xcite there are algorithms for calculating these functions ( which , however are not efficient enough to get results for much larger values of @xmath5 ) . above",
    ", we only discussed the first few simple cases .",
    "we did not succeed in extending our list of concrete formulas for the rational functions @xmath344 for @xmath345 using automated computation .",
    "we now fix a prefix @xmath12 and give enumeration results on prefix normal words with prefix @xmath12 .",
    "our first result indicates that we have to consider each @xmath12 separately .",
    "if @xmath12 is a binary word , let @xmath346 , and @xmath347 .",
    "let @xmath348 is prefix normal of length @xmath349 and density @xmath350 , and @xmath351 .",
    "[ lemma : extlang ] let @xmath352 be both prefix normal .",
    "if @xmath353 then @xmath354 .",
    "we may assume @xmath355 .",
    "+ _ first case .",
    "_ @xmath33 is not a prefix of @xmath12 .",
    "let @xmath47 denote the first position where they differ .",
    "if @xmath356 and @xmath357 , then for @xmath358 we have that @xmath272 is prefix normal while @xmath359 is not .",
    "if @xmath360 and @xmath361 , then let @xmath362 .",
    "we have that @xmath272 is not prefix normal but @xmath359 is .",
    "+ _ second case .",
    "_ @xmath33 is a prefix of @xmath12 .",
    "if @xmath12 has a 1 in any position after @xmath363 , then we can proceed as in the first case .",
    "the remaining case is when @xmath364 for some @xmath365 .",
    "if @xmath366 is prefix normal , then so must be @xmath367 , but @xmath368 can not be .",
    "otherwise , let @xmath369 be the smallest integer ( which is sure to exist ) such that @xmath370 is prefix normal .",
    "then @xmath371 is not prefix normal while @xmath372 is .",
    "this completes the proof .",
    "we were unable to prove that the growth of these two extension languages also differ .",
    "let @xmath352 be both prefix normal . if @xmath353 then the infinite sequences @xmath373 and @xmath374 are different .    the values @xmath375",
    "seem hard to analyze .",
    "we give exact formulas for a few special cases of interest .",
    "using lemma [ lemma : equivdefpn ] , it is possible to give formulas similar to those in proposition [ prop : genfunc ] for @xmath375 for fixed @xmath12 and @xmath5 .",
    "we only mention one such result .",
    "for @xmath376 we have @xmath377 .",
    "consider the following map : let @xmath12 be an arbitrary word of length @xmath3 and density @xmath378 , starting with @xmath0 .",
    "except for the starting @xmath0 , insert a @xmath1 right before each subsequent occurrence of 1 .",
    "this gives a word @xmath95 of length @xmath379 , starting with @xmath380 that does not contain the factor @xmath381 .",
    "clearly , the map is injective and all words of length @xmath379 starting with @xmath380 and containing no factor @xmath381 are obtained this way . in order to prove the lemma , we only need to show that prefix normality is preserved by the map and its inverse . for this , observe that there exists a prefix ( resp .",
    "factor ) of @xmath12 of length @xmath13 containing @xmath382 @xmath0s if and only if there exists a prefix ( resp .",
    "factor ) of @xmath95 of length @xmath383 containing @xmath382 @xmath0s .",
    "the following lemma lists exact values for @xmath384 for some infinite families of words @xmath12 . here",
    "@xmath385 denotes the @xmath3th fibonacci number , i.e.  @xmath386 and @xmath387 .    for all values of @xmath3 where the exponents are nonnegative",
    ", we have the following formulas :    @xmath388 & & { \\textit{ext}}(1^n , n ) = 2^n \\\\[1 mm ] & & { \\textit{ext}}(1^{n-1}0 , n ) = 2^n - 1 \\\\[1 mm ] & & { \\textit{ext}}(1^{n-2}01,n ) = 2^n - 5 \\\\[1 mm ] & & { \\textit{ext}}(1^{n-2}00,n ) = 2^n - ( n+1)\\end{aligned}\\ ] ]    @xmath389 & & { \\textit{ext}}((10)^{\\frac { n-1}2}1,n ) = f(n+1 ) \\textrm { if } n\\textrm { is odd}\\\\[2 mm ] & & { \\textit{ext}}(10^{n-2}1,n ) = 3\\\\[2 mm ] & & { \\textit{ext}}(10^{n-1},n ) = n+1\\end{aligned}\\ ] ]    for @xmath390 , @xmath391 , @xmath392 and @xmath393 , it is easy to count those extensions that fail to give prefix normal words : none for @xmath390 ; only one for @xmath391 , namely @xmath394 ; for @xmath392 , those extensions which contain a @xmath0-run of length @xmath395 , namely @xmath396 followed by any two characters , or @xmath397 ; and for @xmath393 , those that contain at least @xmath395 many @xmath0s in the second half , i.e.  with second half @xmath398 .",
    "similarly , for @xmath399 , @xmath400 and @xmath243 , counting the extensions that yield prefix normal words gives the result in a straightforward way .",
    "let @xmath3 be even . for @xmath401 , note that @xmath402 is prefix normal if and only if @xmath95 avoids @xmath381 .",
    "the number of such words is known to equal @xmath403 .",
    "for @xmath3 odd , the argument is similar , with the prefix of interest , @xmath254 , being of length @xmath404 , hence the previous fibonacci number .",
    "we consider extensions of prefix normal words by a single symbol to the right .",
    "it turns out that this question has implications for the enumeration of prefix normal words .",
    "we call a prefix normal word @xmath12 _ extension - critical _ if @xmath254 is not prefix normal",
    ". let @xmath405 denote the number of extension - critical words in @xmath406 .",
    "the lemma below applies to any family of words @xmath407 for which @xmath408 and such that @xmath409 implies @xmath410 .",
    "for @xmath411 we have @xmath412 from this it follows that @xmath413    the number of prefix normal words of length @xmath3 ending in @xmath1 is @xmath414 , that of prefix normal words of length @xmath3 ending in @xmath0 is @xmath415 , hence we have .",
    "the product form follows if we use @xmath416 .    for @xmath3",
    "going to infinity , @xmath417 .",
    "assume that there exist an integer @xmath418 and a real number @xmath419 such that for @xmath420 we have @xmath421 .",
    "then by we would have @xmath422 , contradicting theorem [ thm : lowbound ] .",
    "we conjecture that in fact the ratio of extension - critical words converges to @xmath1 .",
    "we study the behavior of @xmath423 for @xmath424 .",
    "the left plot in fig .",
    "[ fig : crit ] shows the ratio of extension - critical words for @xmath424 .",
    "these data support the conjecture that the ratio tends to @xmath1 .",
    "interestingly , the values decrease monotonically for both odd and even values , but we have @xmath425 for even @xmath3 .",
    "we were unable to find an explanation for this .    the right plot in fig .",
    "[ fig : crit ] shows the ratio of extension - critical words multiplied by @xmath426 .",
    "apart from a few initial data points , the values for even @xmath3 increase monotonically and the values for odd @xmath3 decrease monotonically , and the values for odd @xmath3 stay above those for even @xmath3 .    based on empirical evidence ,",
    "we conjecture the following : @xmath427    note that the second estimate follows from the first one by .",
    "( left ) , and the value @xmath428 ( right ) . ]     ( left ) , and the value @xmath428 ( right ) . ]",
    "we introduced two new normal forms of binary words , the prefix normal forms with respect to @xmath0 and @xmath1 , and showed how they arise naturally in the investigation of parikh sets of binary words and jumbled pattern matching .",
    "we introduced prefix normal words ( w.r.t .",
    "@xmath0 or @xmath1 ) , words which equal their own normal form , and discussed several properties of these words .",
    "we showed results about the language of prefix normal words , among these that @xmath1-prefix normal are strictly contained in the language of pre - necklaces .",
    "we also discussed extensively the growth behavior of the number of fixed - length prefix normal words .",
    "many open problems remain .",
    "it would be nice to have exact , or at least more precise asymptotic formulas for the enumeration of prefix normal words .",
    "related to the enumeration , the strange oscillating behavior in figures  [ fig : pnf_increase ] and  [ fig : crit ] between odd and even values calls for an explanation .",
    "another question is testing binary words for prefix normality .",
    "currently , no faster method is known ( in worst - case running time ) , then calculating the normal form .",
    "it would be an interesting direction to explore the connection between the normal forms w.r.t .",
    "@xmath0 and @xmath1 , for example how many different values can @xmath117 take ( and what can we say about them ) if we fix @xmath116 .    finally , prefix normality could also be defined over non - binary alphabets . in this case",
    "however , we do not obtain an index directly applicable to jumbled pattern matching .",
    "combinatorial or formal language theoretic investigation and enumeration of prefix normal words for general alphabets is subject of future work .",
    "gabriele fici was partially supported by the prin 2010/2011 project `` automi e linguaggi formali : aspetti matematici e applicativi '' of the italian ministry of education ( miur ) .",
    "the research of joe sawada and frank ruskey was partially funded by grants from the national engineering research council of canada .",
    "we thank an anonymous referee for a very careful reading and helpful suggestions .",
    "j.  acharya , h.  das , o.  milenkovic , a.  orlitsky , and s.  pan . reconstructing a string from its substring compositions . in _ proc .  of ieee international symposium on information theory ( isit 2010 ) _ ,",
    "pages 12381242 , 2010 .",
    "s.  bcker , k.  jahn , j.  mixtacki , and j.  stoye .",
    "computation of median gene clusters . in _ proc .  of the twelfth annual international conference on computational molecular biology ( recomb 2008 ) _ ,",
    "pages 331345 , 2008 .",
    "lnbi 4955 .",
    "p.  burcsi , f.  cicalese , g.  fici , and zs .",
    "liptk . on table arrangements , scrabble freaks , and jumbled pattern matching .",
    "in _ proc .  of the 5th international conference on fun with algorithms ( fun 2010 ) _ , volume 6099 of _ lncs _ , pages 89101 , 2010 .",
    "p.  burcsi , g.  fici , zs .",
    "liptk , f.  ruskey , and j.  sawada .",
    "normal , abby normal , prefix normal . in _ proc .  of the 7th international conference on fun with algorithms ( fun 2014 ) _ , volume 8496 of _ lncs _ , pages 7488 , 2014 .",
    "burcsi , g.  fici , zs .",
    "liptk , f.  ruskey , and j.  sawada . on combinatorial generation of prefix",
    "normal words . in _ proc .",
    "25th ann . symp . on comb .",
    "pattern matching ( cpm 2014 ) _ , volume 8486 of _ lncs _ , pages 6069 , 2014 .",
    "f.  cicalese , t.  gagie , e.  giaquinta , e.  s. laber , zs .",
    "liptk , r.  rizzi , and a.  i. tomescu .",
    "indexes for jumbled pattern matching in strings , trees and graphs . in _ proc .  of the 20th string processing and information retrieval symposium ( spire 2013 )",
    "_ , volume 8214 of _ lncs _ , pages 5663 , 2013 .",
    "f.  cicalese , e.  s. laber , o.  weimann , and r.  yuster .",
    "near linear time construction of an approximate index for all maximum consecutive sub - sums of a sequence . in _ proc .",
    "23rd annual symposium on combinatorial pattern matching ( cpm 2012 ) _ , volume 7354 of _ lncs _ , pages 149158 , 2012 .",
    "t.  gagie , d.  hermelin , g.  m. landau , and o.  weimann .",
    "binary jumbled pattern matching on trees and tree - like structures . in _ proc .  of the 21st annual european symposium on algorithm ( esa 2013 ) _ , pages 517528 , 2013 .",
    "t.  kociumaka , j.  radoszewski , and w.  rytter .",
    "efficient indexes for jumbled pattern matching with constant - sized alphabet . in _ proc .  of the 21st annual european symposium on algorithm ( esa 2013 ) _ , pages 625636 , 2013 .",
    "lee , m.  lewenstein , and q.  zhang .",
    "parikh matching in the streaming model . in _ proc .  of 19th international symposium on string processing and information retrieval , ( spire 2012 ) _ ,",
    "volume 7608 of _ lecture notes in computer science _ , pages 336341 .",
    "springer , 2012 .",
    "d.  zeilberger .",
    "lindiophantus : a maple package that finds generating functions representating solutions of systems of linear diophantine equations .",
    "/ tokhniot / lindiophantus . accessed : 2015 - 05 - 30 ."
  ],
  "abstract_text": [
    "<S> a @xmath0-prefix normal word is a binary word with the property that no factor has more @xmath0s than the prefix of the same length ; a @xmath1-prefix normal word is defined analogously . </S>",
    "<S> these words arise in the context of indexed binary jumbled pattern matching , where the aim is to decide whether a word has a factor with a given number of @xmath0s and @xmath1s ( a given parikh vector ) . </S>",
    "<S> each binary word has an associated set of parikh vectors of the factors of the word . using prefix normal words , we provide a characterization of the equivalence class of binary words having the same set of parikh vectors of their factors .    </S>",
    "<S> we prove that the language of prefix normal words is not context - free and is strictly contained in the language of pre - necklaces , which are prefixes of powers of lyndon words . </S>",
    "<S> we give enumeration results on @xmath2 , the number of prefix normal words of length @xmath3 , showing that , for sufficiently large @xmath3 , @xmath4    for fixed density ( number of @xmath0s ) , we show that the ordinary generating function of the number of prefix normal words of length @xmath3 and density @xmath5 is a rational function . finally , we give experimental results on @xmath2 , discuss further properties , and state open problems .    </S>",
    "<S> prefix normal words , prefix normal forms , binary languages , binary jumbled pattern matching , pre - necklaces , lyndon words , enumeration . </S>"
  ]
}