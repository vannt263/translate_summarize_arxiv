{
  "article_text": [
    "in this manual we provide a description of the following tools :    * qcdutils_get.py : a program to download gauge configurations form the nersc _ gauge connection _ archive  @xcite and convert them from one format to another , including to ildg  @xcite and fermiqcd formats  @xcite . *",
    "qcdutils_run.py : a program to download , compile and run various parallel physics algorithms ( for example compute the average plaquette , the topological charge density , two and three points correlation functions ) .",
    "qcdutils_run is a proxy for fermiqcd .",
    "most of the fermiqcd algorithms and examples generate files that are suitable for visualization ( vtk files  @xcite ) * qcdutils_vis.py : a program to manipulate the vtk files generated by qcdutils_run which can be used to split vtk files into components , interpolate them , and generate 3d contour plots as jpeg images .",
    "this program uses metaprogramming to write a visit  @xcite script and runs it in background . *",
    "qcdutils_vtk.py : a program that converts a vtk file into a web page ( html ) which displays iso - surfaces computed from the vtk file .",
    "the generated files can be visualized in any browser and allows interactive rotation of the visualization .",
    "this program is a based on the `` processing.js '' library  @xcite .",
    "* qcdutils_boot.py : a tools for performing bootstrap analysis of the output of qcdutils_run and other qcd software .",
    "it computes autocorrelations , moving averages , and distributions . *",
    "qcdutils_plot.py : a tool to plot results from qcdutils_boot .",
    "* qcdutils_fit.py : a tool to fit results from qcdutils_boot.py .",
    "as the .py extension implied , these programs are written in python  @xcite ( 2.7 version recommended ) .",
    "together these tools allow automation of the workflow of most lattice qcd computations from downloading data to computing scientific results , plots , and visualizations .",
    "notice that each of the utilities has its own help page which you an access using the -h command line option .",
    "the output for each is reported in the appendix .",
    "the data downloaded by qcdutils_get can be read by qcdutils_run which executes the physics algorithms implemented in c++ .",
    "the output can be vtk files manipulated by qcdutils_vis and and then transformed into images and movies by visit , or they can be tabulated data that require bootstrap analysis .",
    "this is done by qcdutils_boot .",
    "the output of the latter plotted by qcdutils_plot and can be fitted with qcdutils_fit .",
    "these files enforce a workflow by following the file naming conventions described in the appendix but , they do not strictly depend on each other .",
    "for example qcdutils_boot can be used to analyze the output of any of your own physics simulations even if you do not use qcdutils_run .",
    "here is an overview of the workflow :    @xmath0 & run \\ar[r ] \\ar[dr ] \\ar[ddr ] & boot \\ar[r ] \\ar[dr ] & plot    \\\\      &                              & vis                  & fit     \\\\      &                              & vtk                  &    } \\ ] ]    this manual is not designed to be complete or exhaustive because our tools are in continuous development and new features are added every day . yet is designed to provide enough examples to allow you to explore further .",
    "our analysis and visualizations are created on sample data and aimed exclusively at explaining how to use the tools .",
    "our hope is that these tools will be useful to practitioners in the field and specifically to graduate students new to the field of lattice qcd and looking to jumpstart their research projects .",
    "these tools can also be used to automate the workflow of analyzing gauge configurations in real time in order to obtain and display preliminary results .",
    "some of the tools described here find more general application than lattice qcd and can be utilized in other scientific areas .",
    "qcdutils can be downloaded from :    http://code.google.com/p/qcdutils    more information fermiqcd code used by qcdutils_run is available from refs .",
    "@xcite and the web page :    http://fermiqcd.net    more examples of visualizations and links do additional code and examples can be found at :    http://latticeqcd.org      there are two ways to get the tools described in here . the easiest way to get qcdutils is to use mercurial :    install mercurial from :    .... http://mercurial.selenic.com/ ....    and download qcdutils from the googlecode repository    .... http://code.google.com/p/qcdutils/source/browse/ ....    using the following commands :    .... hg clone https://qcdutils.googlecode.com/hg/ qcdutils cd qcdutils ....    the command creates a folder called `` qcdutils '' and download the latest source files in there .",
    "you can also download individual files using wget ( default on linux systems ) or curl ( default on mac systems ) :    .... wget http://qcdutils.googlecode.com/hg/qcdutils_get.py wget http://qcdutils.googlecode.com/hg/qcdutils_run.py wget http://qcdutils.googlecode.com/hg/qcdutils_vis.py wget http://qcdutils.googlecode.com/hg/qcdutils_vtk.py wget http://qcdutils.googlecode.com/hg/qcdutils_boot.py wget http://qcdutils.googlecode.com/hg/qcdutils_plot.py wget http://qcdutils.googlecode.com/hg/qcdutils_fit.py ....      these files do not depend on each other so you can download only those that you need .",
    "qcdutils_run is special because it is a python interface to the fermiqcd library .",
    "as it is explained later , when executed , it downloads and compiles fermiqcd .",
    "it assumes you have g++ installed .",
    "qcdutils_fit.py and qcdutils_plot.py requires the python numpy and matplotlib installed .",
    "all the file require python 2.x ( possibly 2.7 ) and do not work with python 3.x .",
    "qcdutils are released under the gplv2 license .",
    "we thank all members of the usqcd collaborations for making most of their their data and code available to the public , and for a long - lasting collaboration .",
    "we thank david skinner , schreyas cholia , and jim hetrick for their collaboration in improving and running the nersc gauge connection .",
    "we particularly thank jim hetrick for sharing his code for thooft instantons .",
    "we thank chris maynard for useful discussions about ildg .",
    "we thanks simon catterall , yannick meurice , jonathan flynn , and all those that over time have submitted patches for fermiqcd thus contributing to make it better .",
    "we also thank all of those who have used and who still use fermiqcd , thus providing the motivation for continuing this work .",
    "we thank the graduate students that over time have helped with coding , testing , and documentation : yaoqian zhong , brian schinazi , nate wilson , vincent harvey , and chris baron .",
    "this work was funded by department of energy grant defc02 - 06er41441 and by national science foundation grant 0970137 .",
    "the _ gauge connection _  @xcite is a repository of lattice qcd data , primarily but not limited to gauge ensembles , hosted by the national energy research science center ( nersc ) on their high performance storage system ( hpss ) . at the time of writing the gauge connection hosts 16 terabytes of data and makes it publicly accessible to researchers worldwide .",
    "the new gauge connection site consists of a set of dynamic web pages in hierarchical structures that closely mimics the folder structure in the hpss ftp server .",
    "each folder corresponds to a web page .",
    "the web page provide a description of the folder content , in the form of an editable wiki , comments about the content , links to sub - folder and links to files contained in the folder .",
    "since folders may contain thousands of files , files with similar filenames are grouped together into filename patterns .",
    "for example all files with the same name but different extension or similar names differing only for a numerical value are grouped together .",
    "pages are tagged and can be searched by tag .",
    "users can search for files by browsing the folder structure , searching by tags and can download individual files or all files matching a pattern .",
    "you do not need an account to login and you can use your openid account , for example a google email account . you do not need to login to search but you need to login to download . from now on we assume you are logged in into the gauge connection .",
    "fig  [ nersc1 ] ( left ) is a screenshot of the main gauge connection site .",
    "each gauge ensemble is stored in a folder which is represented by a dynamic web page and tagged .",
    "you can search these pages by tag , as shown in fig .",
    "[ nersc1 ] ( right ) .    [ cols=\"^,^ \" , ]     you can use qcdutils_fit.py to perform exatrapolations by using the -extrapolate command line option :    .... python qcdutils_fit.py -extrapolate x=100 ' ax+b@a=1,b=0 ' ....    the extrapolated point will be added to the generated plot and represented by a square .      in this section",
    "we did not discuss error propagation but we have developed a utility called _ buckingham _ which is avalable from :    http://code.google.com/p/buckingham/    it provides dimensional analysis , unit conversion , and aritmetic operation with error propgation .",
    "we plan to discuss it in a separate manual but we here provide one example of usage ( from inside a python shell ) :    .... > > > from buckingham import * > > > a = number(2.0 , error=0.3 , dims=\"fermi \" ) > > > b = number(1.0 , error=0.2 , dims=\"second^2 \" ) > > > c = a / b > > > print c , c.units ( ) ( 2.000 pm 0.500)/10 ^ 15 meter*second^-2 > >",
    "> print c.convert('fermi*second^-2 ' ) 2.000 pm 0.500 > >",
    "> print c.convert('lightyear*day^-2 ' ) ( 1.578 pm 0.395)/10 ^ 21 ....    ( here pm stands for @xmath1 ) buckingham supports 944 unit types ( including ev ) and their combinations .",
    ".... gauge configuration in nersc format ( 3x3 or 3x2 )    * .nersc gauge configuration in fermiqcd format    * .mdp gauge configuration in milc format    * .milc generic lime file     * .lime gauge configuration in ildg format    * .ildg scidac quark propagator    * .scidac quark propagator in fermiqcd format    * .prop.mdp time slice for gauge configuration in fermiqcd format :    * .t[nnnn].mdp time slice for propagator in fermiqcd format :    * .t[nnnn].prop.mdp quark field for a given spin , color source :    * .s[spin].c[color].quark generic log file    * .log vtk file containing real trace of plaquettes    * .plaquette.vtk vtk file containing real part of polyakov lines    * .polyakov.vtk vtk file containing topological charge density    * .topcharge.vtk vtk file containing topological charge density for a cooled config     * .topcharge.cool[step].vtk vtk file containt a the norm squared of a pion propagator    * .pion.vtk html file generated by qcdutils_vtk , represents a vtk file .    * .vtk.html visit visualization script generated by qcdutils_vis.py    qcdutils_vis_[uuid].py visit image generates by the previous script    qcdutils_vis_[uuid]_[frame].jpeg raw data extract from a log file by qcdutils_boot    qcdutils_raw_data.csv autocorrelations computed by qcdutils_boot    qcdutils_autocorrelations.csv partial averages computed by qcdutils_boot    qcdutils_trails.csv bootstrap samples generated by qcdutils_boot    qcdutils_samples.csv means and bootstrap errors computed by qcdutils_boot    qcdutils_results.csv ....",
    "options :    -h , --help             show this help message and exit    -q , --quiet            no progress bars    -d destination , --destination = destination                          destination folder    -c convert , --convert = convert                          converts a field to format                          ( ildg , split.prop.mdp , prop.ildg , prop.mdp , split.mdp , mdp )    -4 , --float            converts to float precision    -8 , --double           converts to double precision    -t , --tests            runs some tests    -n , --noprogressbar    disable progress bar ....          when you run :        python qcdutils_run.py [ args ]    it will : - create a folder called fermiqcd/ in the current working directory - connect to google code and download fermiqcd.cpp + required libraries - if -mpi in [ args ] compile fermiqcd with mpicc else with g++ - if -mpi in [ args ] run fermiqcd.exe with mpicc else run it normally - pass the [ args ] to the compiled fermiqcd.exe    some [ args ] are handled by qcdutils_run.py : -download force downloading of the libraries -compile   force recompiling of code -source    runs and compiles a different source file -mpi       for use with mpi ( mpicc and mpirun but be installed )    other [ args ] are handled by fermiqcd.cpp for example -cold      make a cold gauge configuration -load      load a gauge configuration -quark     make a quark -pion      make a pion ( run it with no options for a longer list of options )      more examples :      qcdutils_run.py -gauge : start = cold : nt=16:nx=4      qcdutils_run.py -gauge : start = hot : nt=16:nx=4      qcdutils_run.py -gauge : load = cold.mdp      qcdutils_run.py -gauge : load = cold.mdp : steps=10:beta=5.7      qcdutils_run.py -gauge : load=*.mdp -plaquette      qcdutils_run.py -gauge : load=*.mdp -plaquette_vtk      qcdutils_run.py -gauge :",
    "load=*.mdp -polyakov_vtk      qcdutils_run.py -gauge : load=*.mdp -cool : steps=20 -topcharge_vtk      qcdutils_run.py -gauge : load=*.mdp -quark : kappa=0.12:alg = minres_vtk      qcdutils_run.py -gauge : load=*.mdp -quark : kappa=0.12 -pion      qcdutils_run.py -gauge : load=*.mdp -quark : kappa=0.12 -pion_vtk    options :      -cool          alg = ape          alpha = 0.7          steps = 20          cooling = 10      -cool_vtk          n = 20          alpha = 0.7          steps = 1          cooling = 10      -quark          action = clover_fast ( default ) or clover_slow or clover_sse2          alg = bicgstab ( default ) or minres or bicgstab_vtk or minres_vtk          abs_precision = 1e-12          rel_precision = 1e-12          source_t = 0          source_x = 0          source_y = 0          source_z = 0          source_point = zero ( default ) or center          load = false ( default ) or true          save = true ( default ) or false          matrices = fermilab ( default ) or milc or                      ukqcd or minkowsy - dirac or minkowsy - chiral          kappa = 0.12          kappa_t = quark[\"kappa \" ]          kappa_s = quark[\"kappa \" ]          r_t = 1.0          r_s = 1.0          c_sw = 0.0          c_e = 0.0          c_b = 0.0      -meson          source = 5          sink = 5          current = i      -4quark          source = 5 ( default ) or i or 0 or 1 or 2 or 3 or 05 or                    15 or 25 or 35 or 01 or 02 or 03 or 12 or 13 or 23          operator = 5ix5i ( default ) or 0ix0i or 1ix1i or 2ix2i or 3ix3i or                      05ix05i or 15ix15i or 25ix25i or 35ix35i or 01ix01i or                      02ix02i or 03ix03i or 12ix12i or 13ix13i or 23ix23i or                      5tx5",
    "t or 0tx0 t or 1tx1 t or 2tx2 t or 3tx3 t or 05tx05 t or                      15tx15 t or 25tx25 t or 35tx35 t or 01tx01 t or 02tx02 t or                      03tx03 t or 12tx12 t or 13tx13 t or 23tx23 t      -gauge          nt = 16          nx = 4          ny = nx          nz = ny          start = load ( default ) or cold or hot or instantons          load = demo.mdp",
    "n = 0          steps = 1          therm = 10          beta = 0          zeta = 1.0          u_t = 1.0          u_s = 1.0          prefix =           action = wilson ( default ) or wilson_improved or wilson_sse2          save = true          t0 = 0          x0 = 0          y0 = 0          z0 = 0          r0 = 1.0          t1 = 1          x1 = 1          y1 = 1          z1 = 1          r1 = 0.0      -baryon      -pion      -pion_vtk      -meson_vtk      -current_static      -current_static_vtk      -plaquette      -plaquette_vtk      -polyakov_vtk      -topcharge_vtk ....      .... $ qcdutils_vis.py -h usage :   this is a utility script to manipulate vtk files containing scalar files .",
    "files can be split , interpolated , and converted to jpeg images .",
    "the conversion to jpeg is done by dynamically generating a visit script   that reads the files , and computes optimal contour plots .",
    "qcdutils_vis.py -p ' annotationattributes[axes3d.bboxflag=0 ] ;        resampleattributes[samplesx=160;samplesy=160;samplesz=160 ] ;        contourattributes[setmulticolor(9,$orange ) ] ' ' folder/*.vtk '        or simply      options :    -h , --help             show this help message and exit    -r read , --read = read   name of the field to read from the vtk file    -s split , --split = split                          name of the field to split from the vtk file    -i interpolate , --interpolate = interpolate                          name of the vtk files to add / interpolate    -c cubic , --cubic - interpolate = cubic                          new size for the lattice 10x10x10    -m make , --make = make   make a dummy vtk file with size^3 whete size if arg of                          make    -p pipeline , --pipeline = pipeline                          visualizaiton pipeline instructions ....        options :    -h , --help             show this help message and exit    -u upper , --upper - threshold = upper                          treshold for isosurface    -l lower , --lower - threshold = lower                          treshold for isosurface    -r upper_red , --upper - red = upper_red                          color component for upper isosurface    -g upper_green , --upper - green = upper_green                          color component for upper isosurface    -b upper_blue , --upper - blue = upper_blue                          color component for upper isosurface    -r lower_red , --lower - red = lower_red                          color component for lower isosurface    -g lower_green , --lower - green = lower_green                          color component for lower isosurface    -b lower_blue , --lower - blue = lower_blue                          color component for lower isosurface ....      .... $ qcdutils_boot.py -h usage : qcdutils_boot.py * .log ' x[<a>]/y[<b > ] ' ' abs(a - b)==1 '    scans all files * .log for expressions of the form      x[<a>]=<value > and y[<b>]=<value >    and computes the average and bootstrap errors of x[<a>]/y[<b > ]    where < a > and < b > satisfy the condition abs(a - b)==1 .",
    "this is program to scan the log files of a markov chain monte carlo algorithm , parse for expressions and compute the average and bootstrap errors of any function of those expressions.it also compute the convergence trails of the averages .",
    "options :    --version              show program 's version number and exit    -h , --help             show this help message and exit    -b min , --minimum_index = min                          the first occurrence of expression to be considered    -e max , --maxmium_index = max                          the last occurrence + 1 of expression to be considered    -n nsamples , --number_of_samples = nsamples                          number of required bootstrap samples    -p percent , --percentage = percent                          percentage in the lower and upper tails    -t , --test             make a test !",
    "-r , --raw              load raw data instead of parsing input    -a , --advanced         in advanced mode use regular expressions for variable                          patterns    -i import_module , --import_module = import_module                          import a python module for expression evaluation    -o output_prefix , --output_prefix = output_prefix                          path+prefix used to build output files ....          options :    --version              show program 's version number and exit    -h , --help             show this help message and exit    -i input_prefix , --input_prefix = input_prefix                          the prefix used to build input filenames    -r , --raw              make raw data plots    -a , --autocorrelations                          make autocorrelation plots    -t , --trails           make trails plots    -b , --bootstrap - samples                          make bootstrap samples plots    -v plot_variables , --plot_variables = plot_variables                          plotting variables    -r range , --range = range                          range as in 0:1000 ....      .... $ qcdutils_fit.py -h usage : qcdutils_fit.py [ options ] ' expression@values '    example : qcdutils-fit.py ' a*x+b@a=3,b=0 '    default filename is qcdutils_results.csv    .... , ' x ' , ' min ' , ' mean ' , ' max '    .... , 23 , 10 , 11 , 12    .... , etc etc etc    options :    --version              show program 's version number and exit    -h , --help             show this help message and exit    -i input , --input = input                          input file ( default qcdutils_results.csv )    -c condition , --condition = condition                          sets a filter on the points to be fitted    -p plot , --plot = plot   plots the hessian ( not implemented yet )    -t , --test             test a fit    -e extrapolations , --extrapolate = extrapolations                          extrpolation point    -a ap , --absolute_precision = ap                          absolute precision    -r rp , --relative_precision = rp                          relative precision    -n ns ,",
    "--number_steps = ns                          number of steps ....",
    "m. di pierro , j. hetrick , s. cholia , d. skinner , pos lat2011 , 2011 http://www.usqcd.org/ildg/ m. dipierro , comput.phys.commun .",
    "141 , 2001 , ( pp 98 - 148 ) [ hep - lat/0004007 ] m. di pierro , nucl.phys.proc.suppl.129:832-834 , 2004 [ http://fermiqcd.net ] http://www.vtk.org/",
    "http://python.org http://www.physics.utah.edu/~detar/milc m. creutz , _ quarks , gluons and lattices _ , cambridge university press , 1985 i. montvay and g. mnster , _ quantum fields on a lattice _ cambridge university press , 1997 t. degrand and c. detar , lattice methods for quantum chromodynamics , world scientific 2006 k. wilson , k , _ confinement of quark _ , physical review d 10 ( 8) 1974 c. morningstar and m. peardon , phys.rev.d56:4043-4061,1997 e. eichten and b. hill , phys .",
    "b234 ( 1990 ) 51 b. efron , the annals of statistics 7 ( 1 ) , 1979 g. lepage et al .",
    ", nucl.phys.proc.suppl.106:12-20,2002 [ arxiv : hep - lat/0110175v1 ] m. di pierro , http://arxiv.org/abs/1202.0988v2"
  ],
  "abstract_text": [
    "<S> this manual describes a set of utilities developed for lattice qcd computations . </S>",
    "<S> they are collectively called qcdutils . </S>",
    "<S> they are comprised of a set of python programs each of them with a specific function : download gauge ensembles from the public nersc repository , convert between formats , split files by time - slices , compile and run physics algorithms , generate visualizations in the form of vtk files , convert the visualizations into images , perform bootstrap analysis of results , fit the results of the analysis , and plot those results . </S>",
    "<S> these tools implement the typical workflow of most lattice qcd computations and automate it by enforcing filename conventions : the output of one tool is understood by the next tool in the workflow . </S>",
    "<S> this manual is organized as a series of autonomous recipes which can be combined together . </S>"
  ]
}