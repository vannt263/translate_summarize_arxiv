{
  "article_text": [
    "gauge fixing in lattice qcd is necessary in order to , e.g. , compare lattice results to continuum physics in a given renormalization scheme at a given scale .",
    "the popular landau gauge requires the four dimensional gradient of the gauge field to vanish at each space - time point of the lattice .",
    "the latter continuum condition translates to a large scale optimization problem in lattice gauge field theories .",
    "finding its maxima is very expensive in terms of computational costs and a possible acceleration by high performance fine grained parallel architectures , like graphic processing units ( gpus ) , is highly desirable . here",
    "we present a code written in cuda which has been developed for the purpose of lattice gauge fixing on gpus .",
    "the code makes strong use of template classes and algorithm abstraction to increase its flexibility and to extend its applicability to related problems in lattice gauge field theory .",
    "lattice qcd gauge fixing on gpus was first presented in @xcite and a detailed discussion of our code can be found in ref .",
    "the authors of @xcite use the fourier accelerated deepest descent method for gauge fixing in lattice qcd .    in the following discussion",
    "we restrict ourselves to the example of landau gauge fixing and we refer to @xcite for the details of the other gauges and algorithms which are supported by _ culgt_.",
    "the continuum landau gauge condition , @xmath0 is fulfilled if and only if the lattice gauge functional @xmath1 = \\frac{1}{n_cn_dv}{\\mathfrak{re}\\,}\\sum_{\\mu , x } { \\,\\mathrm{tr}\\left[u^g_\\mu(x)\\right]},\\ ] ] resides in a stationary point with respect to gauge transformations @xmath2 .",
    "here we denoted a gauge transformation of the link variables as @xmath3 @xmath4 is the number of colors , @xmath5 for qcd , @xmath6 is the number of space - time dimensions , ( here @xmath7 ) and @xmath8 is the total number of lattice points .",
    "a measure @xmath9 of the landau gauge precision is the average @xmath10-norm of the gauge fixing violation @xmath11 , i.e. , the discrete derivative of the continuum gauge fields @xmath12 @xmath13}.\\ ] ]",
    "the idea of the relaxation algorithms is to sweep over the lattice site by site while optimizing the gauge functional locally .",
    "all sites of one of the two _ parity subsets _ ( checker board decomposition ) can be optimized at the same time because the newly generated local optimum depends on the nearest neighbors only .    instead of taking the complete global gauge functional into account , @xmath14 = \\frac{1}{2n_cn_dv } { \\mathfrak{re}\\,}\\sum_{x } f^g(x),\\ ] ]",
    "the relaxation algorithm aims at optimizing the value of @xmath15 $ ] locally , i.e. , we search the maximum of @xmath16}\\ ] ] for all @xmath17 .",
    "here we defined @xmath18 for @xmath19 , the maximum thereof is given by @xmath20 and for @xmath21 one iteratively operates in the three @xmath19 subgroups @xcite and thereby optimizes the local @xmath22 gauge functional .",
    "replacing the local gauge transformation @xmath23 by @xmath24 reduces the _ critical slowing down _ of the relaxation algorithm on large lattices @xcite . in practice the exponentiation of the gauge transformation is done to first order .",
    "the stochastic relaxation algorithm replaces the local gauge update @xmath23 by @xmath25 with probability @xmath26 and can speed up the convergence on large lattices .",
    "we assign eight cuda threads to each lattice site of a given parity in order to calculate and apply the local gauge update ( [ localsolution ] ) .",
    "the two parity sublattices are treated consecutively and the relaxation algorithm is iterated until the requested gauge precision @xmath9 has been reached . a variable data storage pattern for the gauge fields is adopted in order to meet the memory coalescing constraints of the hardware . in fig .  [ fig : devicehisto ]",
    "we compare the performance of the code on different nvidia devies .     lattice .",
    ", scaledwidth=100.0% ]",
    "for the multi - gpu implementation we decided for a decomposition of the lattice along the temporal axis , see fig .",
    "[ fig : domaindecomp ] .        in each step of the iteration",
    ", the gauge links of the neighbor device in the temporal direction have to be exchanged via mpi in order to calculate the gauge update ( [ localsolution ] ) .",
    "after the gauge update has been calculated it has to be applied to all connected gauge links , therefore it has to be copied to the neighbor device . in detail",
    ", the following set of instructions has to be carried out on each device in order to transfer the links @xmath27 of device @xmath28 to device @xmath29 :    1 .",
    "_ cudamemcpydevicetohost _ of @xmath27 ( inactive parity ) 2 .   _",
    "mpi_send _ of @xmath27 to device @xmath29 and _ mpi_recv _ of @xmath30 from device @xmath31 3 .",
    "_ cudamemcpyhosttodevice _ of @xmath30 4 .",
    "update @xmath32 ( active parity ) which affects @xmath30 ( inactive ) 5 .",
    "_ cudamemcpydevicetohost _ of @xmath30 ( inactive parity ) 6 .   _",
    "mpi_send _ of @xmath30 to device @xmath28 and _ mpi_recv _ of @xmath27 from device @xmath29 7 .",
    "_ cudamemcpyhosttodevice _ of @xmath27    in order to hide to slow data exchange over the low - bandwidth pci - bus , we perform asynchronous memory transfers : we overlap the data exchange on the boundaries with calculations in the inner part of the domain .",
    ".time in microseconds needed to copy the data at the boundaries from device to host ( d2h ) and host to device ( h2d ) compared to the time needed to update one time - slice with the overrelaxation kernel .",
    "the two most right columns give the ratios . [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     in tab .",
    "[ tab : data_exchange ] we compare the time needed to update one time - slice in the inner part of the domain with the time needed to copy the data at the boundaries to the host memory and from the host memory to the neighboring device .",
    "[ fig : scaling ] confirms the predictions of tab .",
    "[ tab : data_exchange ] that linear weak scaling is achieved with asynchronous memory transfers .     per gpu and",
    "the open symbols to @xmath33 per gpu .",
    "right : strong scaling on the tesla c2070 .",
    "the spatial lattice volume is kept fixed at @xmath34 and the total temporal extent varies for the three lines ( per precision ) from the top downwards @xmath35 .",
    ", title=\"fig:\",scaledwidth=49.0% ]   per gpu and the open symbols to @xmath33 per gpu .",
    "right : strong scaling on the tesla c2070 .",
    "the spatial lattice volume is kept fixed at @xmath34 and the total temporal extent varies for the three lines ( per precision ) from the top downwards @xmath35 .",
    ", title=\"fig:\",scaledwidth=49.0% ]",
    "the local relaxation algorithms for lattice gauge fixing are well suited to be accelerated with highly parallel architectures like gpus . with the aim of retaining maximum performance in a multi - gpu implementation",
    "it is crucial to overlap the data exchange between the devices by calculations in the inner part of the domain .",
    "this allows for linear weak scaling and a maximum performance of @xmath36 teraflops adopting 16 tesla  c2070 gpus .",
    "support by the research executive agency ( rea ) of the european union under grant agreement pitn - ga-2009 - 238353 ( itn strongnet ) and by the austrian science fund ( fwf ) through grant dk w1203-n16 is gratefully acknowledged .",
    "m.  schrck , the chirally improved quark propagator and restoration of chiral symmetry , phys.lett .",
    "b711 ( 2012 ) 217224 . http://arxiv.org/abs/1112.5107 [ ] , http://dx.doi.org/10.1016/j.physletb.2012.04.008 [ ] .",
    "m.  schrck , h.  vogt , coulomb , landau and maximally abelian gauge fixing in lattice qcd with multi - gpus , comp .",
    "commun . 184",
    "( 2013 ) 19071919 .",
    "http://arxiv.org/abs/1212.5221 [ ] , http://dx.doi.org/http://dx.doi.org/10.1016/ [ ] ."
  ],
  "abstract_text": [
    "<S> here we present the _ _ culgt _ _ code for gauge fixing in lattice gauge field theories with graphic processing units ( gpus ) . </S>",
    "<S> implementations for su(3 ) coulomb , landau and maximally abelian gauge fixing are available and the overrelaxation , stochastic relaxation and simulated annealing algorithms are supported . </S>",
    "<S> performance results for single and multi - gpus are given . </S>"
  ]
}