{
  "article_text": [
    "a dominating set for a graph @xmath2 is a subset of vertices @xmath3 that has the following property : every vertex in @xmath4 either belongs to @xmath5 or is adjacent to a vertex in @xmath5 .",
    "finding the dominating set with the smallest possible cardinality for a graph is one of the standard np - hard problems @xcite . in this work ,",
    "we focus on the @xmath0-connected @xmath1-dominating set ( 2-@xmath1-cds ) problem which has two more constraints than the original problem .",
    "the first constraint is that there are two vertex disjoint paths between any two nodes @xmath6 which are entirely within @xmath5 and the second one is that each node in @xmath7 has at least @xmath1 neighbors in @xmath5 .",
    "an illustration of a problem instance for the 2-@xmath1-cds can be seen in figure [ fig : problem ] .",
    "a wide range of exact and approximate methods have been developed for finding solutions to the minimal dominating set problem ( dsp ) . in the work of van rooij et .",
    "al , to the best knowledge of the authors , the fastest exact algorithm is presented which calculates the optimal solution in @xmath8 time @xcite . a variety of metaheuristic approaches have been developed for the dsp , some examples are the use of genetic algorithms @xcite and ant colony optimization @xcite .",
    "several variations have been considered like the weighted @xcite and connected version @xcite of the problem .",
    "the connected one gives a more realistic model for many real world systems .",
    "for it several different approaches have been used for finding either exact or approximate solutions @xcite .        in the recent years , there has been a growing interest in the dsp and its engineering applications .",
    "more specifically , dsps are extensively used in wireless ad - hoc networks to develop routing algorithms and finding minimum size backbone in wireless networks @xcite .",
    "therefore , the focus of this paper is on the application of the dsp for fault tolerant systems with particular emphasis in the field of wireless networks .",
    "the problem of the minimal @xmath9-connected @xmath1-dominating sets ( @xmath9-@xmath1-cds ) has proven to be very suitable for modeling and optimization of such systems .",
    "there have been several different approaches for finding optimal and approximate solutions for the general problem and some of its restricted versions .",
    "mixed integer programs ( mip ) for the @xmath9-@xmath1-cds have proven to be very successful in finding optimal solutions for medium - size graphs . in the work by forte et al .",
    "@xcite a mip model has been defined for solving the @xmath0-@xmath10-cds , and its performance is enhanced using a primal heuristic and branch - and - cut . recently",
    "a very efficient mip formulation based on vertex - cuts has been defined for the problem of interest , which is especially suitable for the @xmath9-@xmath9-cds @xcite . in the work of ahn and park ,",
    "a mip formulation for the @xmath9-@xmath1-cds is proposed , and its performance is evaluated on a broad range of graphs @xcite .    on the other hand , research has also been conducted for finding approximate solutions for the @xmath9-@xmath1-cds . in the paper by daia and wu , four localized @xmath9-cds construction protocols are proposed @xcite .",
    "the relationship between the maximal independent set and the general @xmath9-@xmath1-cds has been exploited for developing approximate centralized @xcite and distributed @xcite algorithms . in the work by shi et al .",
    "@xcite a greedy method is proposed for the 2-@xmath1-cds for optimizing a fault - tolerant backbone of a wireless network . in their work , initially a 1-@xmath1-cds is solved and later the desired connectivity is achieved through the merger of blocks .",
    "authors have also explored the weighted version of the @xmath9-@xmath1-cds for which they propose a constant approximation algorithm @xcite .",
    "specialized constant approximation algorithms have also been developed for 3-@xmath1-cds @xcite for application in homogeneous wireless networks .",
    "a multiphase approximate method has been developed for the closely related 2-hop 2-connected dominating set @xcite .",
    "another related problem is the 2-@xmath1-domatic partition where the goal is to find some disjoint @xmath11-@xmath1-dominating sets in the network . for this problem ,",
    "an approximate algorithm has been developed @xcite .    in this paper",
    ", we propose a greedy heuristic method for solving the 2-@xmath1-cds based on the existence of an open ear decomposition of a 2-connected graph @xcite . to be more precise , we iteratively grow a 2-connected subgraph @xmath12 by extending it with an open ear @xmath13 .",
    "the growth procedure , which manages to find new open ears in an efficient way , is based on an adaptation of the breadth - first - search which has previously been successfully applied to the problem of maximal partitioning of graphs into 2-connected components with size constraints @xcite .",
    "the quality of found solutions is improved by adding a correction procedure which removes redundant nodes from the dominating set .",
    "further , randomization is included and a greedy randomized adaptive search procedure ( grasp ) algorithm @xcite is developed . in our computational experiments , we show that the method is highly competitive with recently published research .",
    "the paper is organized as follows . in the following section we present the aforementioned growth procedure . in section 3 .",
    "we give an outline of the proposed greedy algorithm . in the next section details of the grasp algorithm",
    "are presented . in the later section",
    "the results of the conducted computational experiments are shown .",
    "in this section , we give a short outline of the procedure for growing a 2-connected subgraph , while the details can be found in @xcite .",
    "since the proposed procedure is based on the fact that any 2-connected graph has an open ear decomposition we start with its definition .",
    "an ear of an undirected graph @xmath4 is a path @xmath13 where the two endpoints of the path may be the same , but no other edge or vertex appears more than once . in other words ,",
    "any internal vertex of @xmath13 has degree two in @xmath13 .",
    "an open ear decomposition of graph g is a sequence of ears @xmath14 in which only @xmath15 is a cycle .",
    "this sequence must satisfy the constraint that the endpoints of ear @xmath16 belong to some @xmath17 where @xmath18 and @xmath19 are not necessarily distinct .",
    "no other vertices of @xmath16 can belong to any @xmath20 where @xmath21 .",
    "an illustration of an open ear decomposition of a graph is given in figure [ fig : openeardecomposition ] .",
    "the idea behind the method for growing a 2-connected subgraph @xmath12 is the following . starting from an initial cycle",
    "@xmath22 we iteratively generate a sequence of subgraphs @xmath23 , where @xmath24 and @xmath16 is an open ear for @xmath25 .",
    "it is noteworthy that due to the construction procedure each subgraph @xmath25 will have an open ear decomposition , hence , it will be 2-connected . such a sequence",
    "can easily be generated by adapting the bfs in a suitable way .",
    "the bfs is commonly used for finding cycles in the following way .",
    "let us assume that we start the bfs from some initial node @xmath11 .",
    "as new nodes are visited and the bfs tree is expanded the first time we encounter a back - edge @xmath26 and an initial cycle @xmath12 is found .",
    "more precisely , the cycle consists of three segments : a bfs tree path from @xmath11 to @xmath27 , the back edge @xmath26 and the bfs tree path from @xmath28 to @xmath11 .",
    "as further nodes are visited and a new back - edge @xmath29 is encountered a new open ear is found if some constraints are satisfied .",
    "the notation @xmath30 will be used for the node @xmath28 which is the first ancestor of @xmath27 , in the bfs tree , such that @xmath31 . in case @xmath32 ,",
    "@xmath33 . for simplicity of notation",
    "we use @xmath34 if @xmath13 is equal to the previously generated 2-connected subgraph @xmath12 .",
    "now , the constraints can be defined as : at least one of the nodes @xmath35 is not in @xmath12 and @xmath36 .",
    "the new open ear @xmath13 will consist of the following segments : the bfs tree path from @xmath34 to @xmath37 , the back edge @xmath29 and the bfs tree path from @xmath38 to @xmath39 .",
    "it is obvious if we extend @xmath12 with @xmath13 we can repeat this procedure and further grow a 2-connected subgraph .    in the adaptation of bfs for growing a 2-connected graph",
    ", we explore the node @xmath27 having the minimal distance @xmath40 to the already generated bi - connected subgraph @xmath12 , instead of the distance to the root node @xmath11 .",
    "the second change , compared to the original bfs , is that we need to track the values of @xmath41 , @xmath40 for nodes in the bfs tree , which can change as a new ear @xmath13 is added to @xmath12 .",
    "the notation @xmath42 will be used for the set of all descendants of @xmath27 in the bfs tree .",
    "we will also define its extension to node sets where @xmath43 .",
    "the values of @xmath41 , @xmath40 are calculated using an update procedure , performed after an ear @xmath13 is added to @xmath12 , which is applied for all @xmath44 in the following way . @xmath45 it is noteworthy that the proposed correction for functions @xmath40 will produce approximations to the exact distance @xmath46 .",
    "the function @xmath47 satisfies that @xmath48 since it is possible to have an alternative path to @xmath12 using some back edges which is shorter .    in the standard bfs",
    ", there is no change in the distance for visited nodes and no node is re - visited . in the proposed adaptation of bfs",
    ", such changes can occur and some revisits are necessary .",
    "the revisits are needed since some back edges that did not create open ears , may do so after the changes of the root values .",
    "both of these issues are addressed simultaneously using the following approach .",
    "first , nodes will be re - added to the queue as a new ear is added to @xmath12 and their re - evaluation is needed .",
    "since it is possible for the same node to be added multiple times to the queue due to the addition of multiple ears , an additional value will be used to track if an evaluation is needed .",
    "the algorithm for growing a bi - connected subgraph is better understood by observing algorithm [ alg : grow ] .",
    "the proposed algorithm starts with a standard bfs initialization of the distance , parent and descendant relations for all the nodes with the additional property of the need for evaluation .",
    "initially the evaluation property @xmath49 will be set to @xmath50 for all nodes .",
    "an auxiliary structure is used to store all the properties of individual nodes , which can be accessed and updated using the node i d .",
    "some special initialization is needed for the root @xmath11 and all its neighbors @xmath51 for which details can be found in @xcite .",
    "next , all nodes in @xmath51 are added to the queue @xmath52 .",
    "the main loop is executed for each node @xmath53 in @xmath52 until @xmath54 .",
    "for each such node , we first check if an evaluation is needed and if so all its neighbors @xmath55 are evaluated . for each @xmath56",
    "we check if @xmath57 is a back - edge . in case",
    "it is not we add @xmath27 to the @xmath52 as in the bfs , and we set @xmath58 . in case @xmath59 is a back - edge we check if it induces a new open ear @xmath13 connected to @xmath12 .",
    "if this is true the subgraph @xmath12 is extended with @xmath13 and necessary updates are performed . to be more precise , for all @xmath32 the distance",
    "is set to @xmath60 .",
    "each node @xmath27 now becomes a root of a new potential ear , so we set @xmath61 . for each node",
    "@xmath32 we wish to update the branch of the bfs tree whose root is @xmath27 .",
    "all such nodes @xmath28 are added to @xmath52 for re - evaluation and the values @xmath62 , @xmath63 are corrected based on eqs . , .",
    "the implementation details can be found in @xcite .",
    "after all the elements of @xmath55 are visited the evaluation of node @xmath53 is complete and we set @xmath64",
    ". a graphical illustration of the basic steps of the growth procedure is given in figure [ fig : normalstep ] .",
    "stores 3 values , first is the i d acquired by the bfs , the second is the value of @xmath41 and the last is the values of @xmath40 .",
    "the node currently explored by the bfs is colored red .",
    "gray arrows are used to indicate the structure of the bfs tree .",
    "blue color edges are used for found back - edges at some step of the procedure .",
    "the violet color is used to show nodes that are a part of the found be bi - connected subgraph @xmath12 and the corresponding edges are presented using violet dashed lines . dashed borders of a node @xmath27",
    "indicate that the exploration of node @xmath27 has been completed.,scaledwidth=100.0% ]",
    "the growth procedure presented in the previous section gives us an efficient way to grow a 2-connected subgraph by extending it with new open ears .",
    "note that in practice it consists of two parts .",
    "the first one is finding a new ear and the second is adding an open ear to the already generated subgraph @xmath12 and performing updates to the bfs tree .",
    "the idea of the greedy procedure is to extend @xmath12 not with the first found open ear but with the best one , based on some heuristic function , from a suitable list of candidates .",
    "let us first define the heuristic function for selecting an ear @xmath13 from a list of candidates .",
    "our goal is to make a minimal dominating set , so there is a preference for expanding @xmath12 with a small ear whose nodes are adjacent to the highest number of not already dominated nodes . in the case of 2-@xmath1-dsp we will say that node @xmath27 is dominated by @xmath12 if it is adjacent to at least @xmath1 nodes in @xmath12 . let us define functions @xmath65/@xmath66 for a node @xmath27 and a set of nodes @xmath67 as the number / set of nodes @xmath68 for which @xmath69 . to that end , let us define @xmath70 the function @xmath71 , in case of @xmath72 , is a correction of @xmath65 that has a limit that corresponds to the number of additional nodes that node @xmath27 needs to be adjacent to , so it is dominated by @xmath12 . since @xmath73 is used for defining the heuristic function for selecting open ears , we also consider nodes @xmath68 which in the proposed application become a part of the 2-connected subgraph .",
    "for such nodes , @xmath73 will be equal to @xmath74 since this could be understood as the additional number of adjacent nodes that are needed for @xmath27 to become dominated .",
    "we can define a heuristic function for candidate ears as @xmath75 \\setminus ( s)\\ ] ] in eq .",
    "the notation @xmath76 is used for the set of inner nodes of @xmath13 , and @xmath77 for the corresponding number of nodes .",
    "@xmath78 $ ] is used for the set of all nodes @xmath27 in @xmath13 or adjacent to some node @xmath31 .",
    "the heuristic function @xmath79 is equal to the sum of @xmath73 for all inner nodes of @xmath76 and corresponding neighboring nodes that are not already in @xmath12 .",
    "the heuristic has a preference for ears that are adjacent to a large number of nodes not dominated by @xmath12 and have a low number of internal nodes .    in the growth procedure presented in algorithm [ alg :",
    "grow ] , as soon as a new open ear @xmath13 is found , the subgraph @xmath12 is extended accordingly . in practice",
    "this is not necessary , but instead we can define a candidate list @xmath80 to which we add @xmath13 .",
    "when there is a sufficient number @xmath81 of candidates in @xmath82 we can select the best ear @xmath83 based on the heuristic function @xmath79 , and only then expand @xmath12 and perform the necessary updates to the bfs tree .",
    "in the implementation of the candidate list , it is most efficient to calculate the value @xmath79 and store the set of the nodes @xmath84 whose elements are in @xmath85 $ ] that are not dominated by @xmath12 .",
    "after the best ( based on the heuristic ) ear @xmath83 is added to @xmath12 , the candidate list @xmath86 needs to be updated .",
    "the first update is to correct the values of @xmath87 and @xmath88 based on the new ear @xmath83 .",
    "this can be simply done by exploiting the stored values of @xmath89 , @xmath88 .",
    "the second update is for candidate ears for which @xmath90 . for simplicity",
    "let us assume that there is only one node @xmath91 , and that ear @xmath16 corresponds to some path @xmath92 .",
    "in such a case we must remove @xmath16 from the candidate list ( since it is not a valid open ear ) and add two new ones @xmath93 and @xmath94 if they have a length of at least 3 nodes .",
    "the case when there are multiple nodes in @xmath95 is treated in a similar way . in practical applications , the candidate list will only contain an ear @xmath13 if it satisfies @xmath96 .",
    "note that although this improves the performance of the algorithm in some case it can result in the method not being able to produce a feasible solution .",
    "to improve the performance of the greedy algorithm presented in the previous section we extend it to the grasp metaheuristic . to do",
    "so we need to define a randomization for the greedy algorithm and develop a local search .",
    "the randomization can be done trivially by initially selecting a random root node @xmath97 and by defining a new heuristic function @xmath98 , where @xmath99 is a random variable from some interval @xmath100 . for a local search we will use a simple correction procedure in which we iteratively remove nodes that are not necessary .",
    "the term `` necessary '' is used for a node @xmath27 for which @xmath101 is either not a dominating set of @xmath4 or the graph induced by @xmath102 is not 2-connected .",
    "all the elements of the set of nodes @xmath52 that are necessary for maintaining dominance satisfy the following simple constraint .",
    "any node @xmath103 for which there exists a node @xmath104 such that @xmath69 and @xmath105 is necessary . for all nodes in @xmath106 we can simply check if the graph induced by @xmath102 is a 2-connected graph by using tarjan s linear time algorithm @xcite .",
    "note that in the practical implementation set @xmath52 can be easily updated based on the node @xmath27 that is removed from @xmath12 .",
    "details of the proposed grasp algorithm can be seen in the algorithm [ alg : grasp ] . in the main loop , at each iteration a random initial node @xmath11",
    "is selected as the root of the adapted bfs for growing 2-connected subgraphs and all corresponding initialization is done .",
    "the next loop generates an initial solution through the following steps .",
    "it first checks if the number of candidate ears is sufficient .",
    "if this is true , the best one , based on the randomized heuristic function @xmath107 , @xmath83 is selected and used to expand the partial solution @xmath12 .",
    "furthermore , all necessary updates are performed on the bfs tree and the candidate list .",
    "otherwise , in case more candidates are needed , one is acquired using function @xmath108 .",
    "this function further grows the bfs tree until a new ear is found and returns it .",
    "it is important to emphasize that it does expand @xmath12 .",
    "after , a dominating set @xmath12 is found the first step is calculating the set of necessary nodes @xmath52 .",
    "this set is used in the following loop used for improving the solution . in it , nodes are removed one by one from @xmath12 until no node can be eliminated .",
    "after each node @xmath27 is removed from @xmath12 , the set @xmath52 is updated .",
    "finally , we check if the corrected dominating set @xmath12 is the best found .",
    "in this section , we present the results of the computational experiments used to evaluate the performance of the proposed method .",
    "the grasp algorithm is compared to the recent mip method from @xcite .",
    "the presented method is implemented in c # using microsoft visual studio 2015 .",
    "the calculations have been done on a machine with intel(r ) core(tm ) i7 - 2630 qm cpu 2.00 ghz , 4 gb of ddr3 - 1333 ram , running on microsoft windows 7 home premium 64-bit .",
    "we note that calculations in the article @xcite were conducted on a dell precision workstation t7500 r machine with two intel xeonr e5620 2.40 ghz quad - core processors and 12 gb ram .",
    "the comparison has been made on 41 random graphs having 30 - 200 nodes and edge densities between 5 - 70% .",
    "the graph instances are the same as in @xcite which have also been used in @xcite . for each of the graph instances we compare the computational time and quality of found solutions for the 2 - 1-cds and 2 - 2-cds for all of which the mip method managed to find optimal solutions .",
    "350ptx*8c    dataset & & & grasp iter .",
    "& & + ( r)2 - 4(r)7 - 8 & grc & grasp & mip & & & grasp & mip + v30_d10 & 18 & 18 & 18 & & 6&1&20 + v30_d20 & 9 & 8 & 8 & & 24&26&40 + v30_d30 & 7 & 5 & 5 & & 5&3&20 + v30_d50 & 3 & 3 & 3 & & 3&2&10 + v30_d70 & 3 & 3 & 3 & & 1&0&50 + v50_d10 & 15 & 14 & 14 & & 54&63&50 + v50_d20 & 8 & 7 & 7 & & 2&2&40 + v50_d30 & 6 & 5 & 5 & & 8&15&90 + v50_d50 & 3 & 3 & 3 & & 17&28&80 + v50_d70 & 3 & 3 & 3 & & 1&1&80 + v70_d5 & 40 & 34 & 34 & & 6108&1.3e4&10 + v70_d10 & 20 & 14 & 14 & & 1037&2.9e3&1.0e2 + v70_d20 & 8 & 8 & 8 & & 13&35&1.3e2 + v70_d30 & 5 & 5 & 5 & & 24&78&2.1e2 + v70_d50 & 4 & 3 & 3 & & 36&1.0e2&80 + v70_d70 & 3 & 3 & 3 & & 1&2&1.6e2 + v100_d5 & 35 & 28 & 28 & & 4264&1.7e4&2.0e2 + v100_d10 & 16 & 14 & 14 & & 1531&6.4e3&2.9e2 + v100_d20 & 11 & 8 & 8 & & 612&2.8e3&7.3e2 + v100_d30 & 7 & 6 & 6 & & 39&1.7e2&1.0e3 + v100_d50 & 4 & 4 & 4 & & 6&27&5.3e2 + v100_d70 & 3 & 3 & 3 & & 1&3&1.3e3 + v120_d10 & 18 & 14 & 14 & & 6240&3.0e4&6.0e2 + v120_d20 & 10 & 8 & 8 & & 13413&7.4e4&3.8e3 + v120_d30 & 8 & 6 & 6 & & 239&1.4e3&1.2e3 + v120_d50 & 4 & 4 & 4 & & 5&36&3.3e3 + v120_d70 & 3 & 3 & 3 & & 1&5&5.2e2 + v150_d5 & 35 & & 28 & & [ 590]&3.6e3&9.3e2 + v150_d10 & 18 & 15 & 15 & & 5127&3.2e4&3.9e3 + v150_d20 & 11 & 9 & 9 & & 137&1.0e3&6.6e3 + v150_d30 & 8 & 6 & 6 & & 1534&1.4e4&2.6e3 + v150_d50 & 4 & 4 & 4 & & 2&19&3.1e3 + v150_d70 & 3 & 3 & 3 & & 7&86&4.8e3 + v200_d5 & 40 & & 29 & & 5609&4.8e4&2.7e4 + v200_d10 & 20 & & 16 & & 10981&1.0e5&1.7e5 + v200_d20 & 12 & 9 & 9 & & 4513&5.6e4&3.9e5 + v200_d30 & 8 & 7 & 7 & & 19&2.7e2&1.6e5 + v200_d50 & 5 & 4 & 4 & & 141&2.6e3&8.4e3 + v200_d70 & 3 & 3 & 3 & & 1&23&9.6e3 +    350ptx*8c dataset & & & grasp iter . & & + ( r)2 - 4(r)7 - 8 & grc & grasp & mip & & & grasp & mip + v30_d30 & 9 & 8 & 8 & & 2 & 2 & 60 + v30_d50 & 5 & 5 & 5 & & 2 & 2 & 0 + v30_d70 & 4 & 4 & 4 & & 1 & 1 & 30 + v50_d10 & * & 22 & 22 & & 2 & 4 & 0 + v50_d20 & 14 & 12 & 12 & & 4 & 12 & 80 + v50_d30 & 9 & 8 & 8 & & 47 & 1.6e2 & 60 + v50_d50 & 7 & 5 & 5 & & 11 & 39 & 50 + v50_d70 & 4 & 4 & 4 & & 2 & 5 & 90 + v70_d5 & 48 & 47 & 47 & & 699 & 2.5e3 & 0 + v70_d10 & 28 & 24 & 24 & & 993 & 4.8e3 & 90 + v70_d20 & 15 & 12 & 12 & & 9229 & 4.8e4 & 1.4e2 + v70_d30 & 9 & 8 & 8 & & 220 & 1.2e3 & 2.0e2 + v70_d50 & * & 5 & 5 & & 58 & 2.7e2 & 2.0e2 + v70_d70 & 5 & 4 & 4 & & 1 & 3 & 3.6e2 + v100_d5 & 46 & 44 & 44 & & 19862 & 1.5e5 & 80 + v100_d10 & 29 & & 24 & & 729 & 5.9e3 & 4.8e2 + v100_d20 & 16 & 13 & 13 & & 511 & 4.1e3 & 4.5e2 + v100_d30 & 11 & 9 & 9 & & 18857 & 1.6e5 & 1.9e3 + v100_d50 & 7 & 6 & 6 & & 88 & 8.3e2 & 6.2e2 + v100_d70 & 4 & 4 & 4 & & 18 & 1.3e2 & 5.8e2 + v120_d10 & 31 & & 24 & & 563 & 5.6e3 & 9.8e2 + v120_d20 & 17 & & 13 & & 506 & 5.3e3 & 2.5e3 + v120_d30 & 12 & 9 & 9 & & 21824 & 2.4e5 & 3.0e3 + v120_d50 & 7 & 6 & 6 & & 31 & 3.9e2 & 1.8e3 + v120_d70 & 5 & 4 & 4 & & 9 & 90 & 1.9e3 + v150_d5 & * & & 45 & & 21037 & 2.7e5 & 3.4e2 + v150_d10 & 31 & & 24 & & 2042 & 2.8e4 & 6.2e3 + v150_d20 & 17 & & 13 & & 135 & 1.9e3 & 2.8e4 + v150_d30 & 10 & & 9 & & 102 & 1.7e3 & 1.4e4 + v150_d50 & 8 & 6 & 6 & & 3.8e3 & 198 & 3.2e3 + v150_d70 & 5 & 4 & 4 & & 7.3e3 & 391 & 4.9e3 + v200_d5 & 56 & & 48 & & 6785 & 1.3e5 & 9.4e3 + v200_d10 & 33 & & 26 & & 7335 & 1.5e5 & 2.1e6 + v200_d20 & 19 & & 14 & & 29 & 7.3e2 & 8.3e5 + v200_d30 & 13 & & 10 & & 98 & 2.7e3 & 3.2e5 + v200_d50 & 8 & 6 & 6 & & 13483 & 4.4e5 & 3.3e4 + v200_d70 & 5 & & 4 & & 8 & 2.9e2 & 3.6e4 +    the results of the comparison are presented in tables [ table : comgraspmip21cds],[table : comgraspmip22cds ] . in this table , we show the number of nodes in the best found dominating set for the non - randomized greedy algorithm combined with the correction procedure ( @xmath109 ) and the grasp extension . in the case of grasp a maximum of 25000 solutions was generated and we show the computational time , and corresponding iteration , for finding the best solution . in the case of @xmath109 execution times",
    "are not included as they are approximately equal to computational time divided by the iteration count for grasp .",
    "the two methods are compared with the mip method from @xcite .",
    "for both the grasp and @xmath109 the maximal size of the candidate list is @xmath110 . in case of grasp",
    "the value of the randomization parameter is @xmath111 .",
    "the node @xmath27 having the highest number of adjacent nodes was used as the root node of the @xmath109 .    in the case of the 2 - 1-cds",
    ", grasp manages to find optimal solutions in 37 out 40 problem instances .",
    "the instances for which it does not manage to find optimal solutions are large sparse graphs .",
    "for this type of graphs , the computational time is worse than @xmath112 . in general , grasp had significantly lower computational times than mip for highly dense graphs .",
    "@xmath109 had very short execution times and even for the largest problem instances it is less than 25 milliseconds , and manages to find optimal solutions for 15 problem instances .",
    "the grasp algorithm seems slightly less effective in the case of 2 - 2-cds , when the quality of solutions is considered , in which it finds 27 optimal solutions out of 38 tested graphs .",
    "the computational advantage to mip for highly dense graphs is much lower compared to 2 - 1-cds due to a large number of generated solutions . in case of 2 - 2-cds ,",
    "@xmath109 is also very fast taking less than 40 milliseconds to find solutions for the largest problem instances .",
    "although @xmath109 manages to generates good approximate solutions it only manages to find 4 optimal solutions .",
    "this illustrates the effectiveness of using the randomization in grasp .",
    "it is important to note that @xmath109 does not find feasible solutions in @xmath113 cases due to the exclusion of candidate ears not improving the partial solution as mentioned in section [ gresec ] .",
    "in this paper , we have presented a grasp algorithm for solving the 2-@xmath1-cds .",
    "the algorithm is based on greedily growing a 2-connected subgraph by extending it with open ears selected using a heuristic function .",
    "further , the quality of solutions generated in this way is improved using a simple correction procedure and adding randomization .",
    "our computational results show that the proposed method is highly competitive with recently published mip based algorithm .",
    "it is important to note that in general heuristic and grasp based algorithms are designed for finding high quality approximate solutions and not the best choice for finding optimal ones but even in such a comparison the proposed methods prove to be better than mip for some specific types of graphs .",
    "we wish to emphasize that this is a novel approach for solving the 2-m - cds that has potential for a wide range of potential applications and extensions .",
    "for example , due to the fact that the proposed greedy algorithm manages to find good quality approximate solutions in a very short computational time , it can be used for providing upper bounds for mip models .",
    "another potential avenue of research is adapting the proposed algorithm to more complex metaheuristics like for instance the ant colony optimization . in the future",
    ", we plan to extend the proposed method to a matheuristic paradigm by developing a mip based local search .",
    "further , we plan to explore adapting the presented method to similar problems like the 2-connected vertex cover problem .",
    "hedar , a.r . , ismail , r. : computational science and its applications ",
    "iccsa 2010 : international conference , fukuoka , japan , march 23 - 26 , 2010 , proceedings , part iv , chap .",
    "hybrid genetic algorithm for minimum dominating set problem , pp . 457467 .",
    "springer berlin heidelberg , berlin , heidelberg ( 2010 )        jia , l. , yu , j. , yu , d. , zhang , q. : wireless algorithms , systems , and applications : 9th international conference , wasa 2014 , harbin , china , june 23 - 25 , 2014 .",
    "proceedings , chap .",
    "2-m - domatic partition in homogeneous wireless sensor networks , pp .",
    "springer , cham ( 2014 )      jovanovic , r. , tuba , m. : ant colony optimization algorithm with pheromone correction strategy for the minimum connected dominating set problem .",
    "computer science and information systems pp .",
    "133149 ( 2013 )    jovanovic , r. , tuba , m. , simian , d. : ant colony optimization applied to minimum weight dominating set problem . in : proceedings of the 12th wseas international conference on automatic control , modelling & simulation .",
    "world scientific and engineering academy and society ( wseas ) ( 2010 )    kim , d. , wang , w. , li , x. , zhang , z. , wu , w. : a new constant factor approximation for computing 3-connected m - dominating sets in homogeneous wireless networks . in : infocom ,",
    "2010 proceedings ieee .",
    "ieee ( 2010 )        rooij , j.m.m . ,",
    "nederlof , j. , dijk , t.c . : algorithms - esa 2009 : 17th annual european symposium , copenhagen , denmark , september 7 - 9 , 2009 .",
    "proceedings , chap .",
    "inclusion / exclusion meets measure and conquer , pp .",
    "springer berlin heidelberg , berlin , heidelberg ( 2009 )          wang , w. , kim , d. , an , m.k .",
    ", gao , w. , li , x. , zhang , z. , wu , w. : on construction of quality fault - tolerant virtual backbone in wireless networks .",
    "networking , ieee / acm transactions on 21(5 ) , 14991510 ( 2013 )    zheng , c. , yin , l. , zhang , y. : constructing r - hop 2-connected dominating sets for fault - tolerant backbone in wireless sensor networks . in : wireless communications , networking and mobile computing ( wicom ) , 2012 8th international conference on .",
    "ieee ( 2012 )"
  ],
  "abstract_text": [
    "<S> in this paper , we present a constructive heuristic algorithm for the @xmath0-connected @xmath1-dominating set problem . </S>",
    "<S> it is based on a greedy heuristic in which a 2-connected subgraph is iteratively extended with suitable open ears . </S>",
    "<S> the growth procedure is an adaptation of the breadth - first - search which efficiently manages to find open ears . </S>",
    "<S> further , a heuristic function is defined for selecting the best ear out of a list of candidates . </S>",
    "<S> the performance of the basic approach is improved by adding a correction procedure which removes unnecessary nodes from a generated solution . finally , randomization is included and the method is extended towards the grasp metaheuristic . in our computational experiments , </S>",
    "<S> we compare the performance of the proposed algorithm to recently published results and show that the method is highly competitive and especially suitable for dense graphs .    </S>",
    "<S> * keywords : * dominating sets , 2-connected graphs , grasp , fault tolerant . </S>"
  ]
}