{
  "article_text": [
    "the importance of the dynamics of rigid bodies in physics and engineering has been recognized since the early 19th century . the early work of euler , hermite , poisson , jacobi and many others on exactly soluble systems lead to great advances in the field of applied mathematics as well as in mechanics .",
    "more recently , rigid hard spheres served as the first prototypical model for fluids treated by computer simulation@xcite . today ,",
    "rigid bodies are used to model phenomena on a variety of different length scales : on molecular length scales , rigid bodies are used in the modeling of the microscopic dynamics of molecules in condensed phases@xcite , on a mesoscopic scale , they are used to construct simple models of polymers and other complex systems@xcite , while on a macroscopic level they play an important role in robotics .",
    "the dynamics of rigid bodies is also of relevance to the computer game industry , where many improvements in simulating rigid bodies have been developed@xcite .",
    "finally , on an even larger scale , many astrophysical objects such as planets , satellites and space crafts can be regarded as rigid bodies on certain time scales@xcite .    according to the laws of classical mechanics , the motion of a rigid body",
    "consists of translation of the center of mass of the body and rotation of the orientation of the body about its center of mass . in the most general case",
    "in which the body is subject to forces and torques , an analytical solution of the dynamics is not possible and a numerical scheme is required to integrate the equations of motion . with the advent of powerful computers ,",
    "much work has been devoted to finding stable and efficient integration schemes for rotating rigid bodies@xcite .",
    "the use of numerical integrators is now so widespread that they are frequently used even in cases where an analytical solution of the dynamics is available .",
    "this is unfortunate , since an exact solution can not only serve as a special case against which numerical integration schemes may be tested , but can also be directly used in so - called discontinuous molecular dynamics of rigid bodies , in which the bodies perform free motion in between interaction events .",
    "a hard sphere gas is the prototypical example of such a system . in these kinds of simulations , using an exact solution of the free dynamics yields an enormous computational benefit compared to having to integrate the free dynamics numerically ( see e.g.  refs . and ) .",
    "furthermore , for molecular dynamics of systems with a continuous potential , an exact solution is also often useful in constructing so - called symplectic integration schemes , and typically leads to enhanced stability@xcite .",
    "perhaps the principal reason why the analytical solution of the motion of a free rigid body is seldom used is that the general solution is simply not well - known .",
    "many advanced textbooks in mechanics avoid discussing the motion of general rigid bodies , and only consider certain symmetric cases@xcite in which the equations of motion are particularly simple .",
    "this probably is due to the fact that the general solution  apparently first found by rueb@xcite in 1834 and later completed by jacobi in 1849@xcite  involves special functions , called elliptic and theta functions , which are perhaps less familiar than other special functions .",
    "furthermore , even when the case of a general rotor is discussed@xcite , the treatment of its motion is often incomplete , in rather abstract form ( using complex - valued functions ) and presented in a special inertial coordinate frame rather than a general laboratory inertial frame .",
    "the goal of this paper is to demonstrate that none of these issues needs to be an obstacle to the use of the exact solution of the equations of motion of an asymmetric rigid body in numerical work .",
    "it will first be shown that although the derivation of the general solution of the equations of motion of a rigid body requires a bit of complex analysis , the final result can be expressed without any reference to complex arithmetic .",
    "secondly , the solution will be formulated in a general inertial frame and for general initial conditions of the rigid body .",
    "finally , it will be shown that the special functions occurring in the solution can be numerically implemented in an efficient fashion .",
    "based on these considerations , the numerical implementation of the ( admittedly non - trivial ) motion of an asymmetric rigid body in the absence of forces and torques is relatively straightforward .",
    "the paper is organized as follows : in section  [ motion ] , the motion of a rigid body is reviewed starting in subsection [ rigid ] with a brief overview of the properties of rigid bodies .",
    "subsequently , in subsection [ dynamics ] the equations of motion are given , while in [ force ] these are specialized to the case of free motion .",
    "the novel part of the paper starts in section [ explicit ] , where a new derivation of the exact solution of the time dependence of the orientation of the body is given , first in general and then explicitly for the spherical top , the symmetric top and the asymmetric top ( sections [ sssolution ] , [ sssolutionb ] and [ sssolutionc ] , respectively ) . in section  [ numerical ] ,",
    "some further numerical issues are addressed .",
    "an example is given in section  [ example ] and the paper ends in section  [ discussion ] with a discussion of the results and their possible applications .",
    "the shape of a rigid body is specified by the set of all material points @xmath0 of the body .",
    "the points @xmath1 are three - dimensional vectors with respect to a reference coordinate frame called the _ body frame _ , and constitute a reference orientation of the body@xcite .",
    "furthermore , a mass @xmath2 is associated with each material point .",
    "the mass distribution of the body plays an important role in its dynamics .",
    "since any translation or rotation acting on all points @xmath3 leaves the shape of the body unchanged , there is an arbitrariness in the choice of body frame which can be exploited . by a suitable translation",
    ", one may always set the center of mass to be in the origin , i.e. , @xmath4 furthermore , using a suitable rotation , the moment of inertia tensor @xmath5 can be brought to its principal form : @xmath6 for subsequent developments , it will be assumed that these transformations have been performed .    because the body frame is fixed to the body , the material points @xmath3 are independent of time .",
    "however since the body itself moves through physical space , the location of each point @xmath3 in the physical coordinate system , or _ lab frame _ , must be determined as a function of time to describe its motion .",
    "the position of mass point @xmath7 in the lab frame will be denoted by @xmath8 .",
    "since the body is rigid , its motion is a time - dependent orientation - and - distance - preserving transformation from the body frame to the lab frame .",
    "the most general such transformation is a combination of a translation and a rotation : @xmath9 here and below , matrix - vector and matrix - matrix products such as @xmath10 will be denoted implicitly , i.e , without a `` @xmath11 '' , which will only be used for inner products .",
    "for notational simplicity , the explicit time dependence will be omitted in most expressions , i.e. , @xmath12 will be denoted simply by @xmath13 .",
    "exceptions are if the time argument is equal to zero ( e.g.  @xmath14 ) or integrated over .    in eq .  , the vector @xmath15 denotes the position of the center of mass at time @xmath16 , while the orthogonal matrix @xmath17 represents the orientation of the body with respect to the center of mass at that time and is often called the _ attitude matrix_. note that @xmath18 transforms vectors from the lab to the body frame , while its transpose @xmath17 transforms vectors from the body to the lab frame .    the motions of the different material points of a rigid body are obviously closely related . instead of working with the ( linear ) velocities of all points ,",
    "one can instead use a formulation of the dynamics that utilizes the angular velocity vector @xmath19 of the body around its center of mass .",
    "this angular velocity vector is defined such that its direction coincides with the rotation axis and its magnitude coincides with the rate at which it rotates . as a consequence of this definition ,",
    "the velocity of any point of the rigid body satisfies the standard relation @xcite @xmath20 where @xmath21 is the velocity of the center of mass . defining the antisymmetric matrix @xmath22 and using eq .  , eq .",
    "can also be written as @xmath23 taking the time derivative of eq .   and using eq .",
    ", one sees that @xmath24 and @xmath25 are related via @xmath26    given the central role of rotation matrices below , it is useful to establish some notation .",
    "a rotation matrix @xmath27 is a special orthogonal matrix that can be specified by a rotation axis @xmath28 and an angle @xmath29 . here",
    "@xmath30 is a unit vector , so that one may also say that any non - unit vector @xmath31 can be used to specify a rotation , where its norm is equal to the angle @xmath29 and its direction is along the axis @xmath30 .",
    "in fact , one can express this rotation matrix as @xmath32 .",
    "the explicit form of this rotation matrix may be found using rodrigues formula@xcite .",
    "it is clear from eq .   that the motion of a rigid body as a function of time is determined by the time dependence of the center of mass vector @xmath15 and the attitude matrix @xmath18 .",
    "according to the mechanics of rigid bodies , these follow from the equations of motion @xmath33 here , @xmath34 is the sum of all forces acting on the body , @xmath35 ( with @xmath36 ) is the total momentum , @xmath37 the total torque with respect to the center of mass of the body and @xmath38 is the angular momentum .",
    "one may equivalently write @xmath39 the latter equation is more conveniently written in the body frame using @xmath40 , @xmath41 and @xmath42 , which yields @xmath43 where eq .",
    "was used to obtain the second equality , and the third equality was obtained using @xmath44 writing out eq .   in its components",
    "gives the so - called _",
    "euler equations_. solving these equations yields the time dependence of the angular velocities in the body frame . to consequently find the attitude matrix @xmath18 , one uses eqs .   and",
    "to find @xmath45      in the special case where all external forces and torques are zero , i.e. , @xmath46 and @xmath47 , the equations of motion to solve simplify to @xmath48 in the absence of forces and torques , the dynamics of the system is invariant under rotations and under translations in time and space . as a consequence of these symmetries ,",
    "the energy @xmath49 , momentum @xmath50 and angular momentum @xmath51 are conserved , where @xmath49 is given by @xmath52 with the translational and rotational energies equal to @xmath53 respectively .    the time dependence of the translational part of the motion follows from the equation of motion @xmath54 , which is easily solved to obtain @xmath55 since @xmath56 , the translational energy @xmath57 is conserved in the dynamics , which , in turn , implies that the rotational energy @xmath58 is also conserved .",
    "to solve the rotational equations of motion is less trivial .",
    "one has to solve the middle equation of , which , written out in components , reads @xmath59 the general solution of this set of equations will be presented below .",
    "given this solution , the remaining task is to determine the attitude matrix @xmath18 from eq .  .",
    "although the general solution for @xmath18 is hard to find in any textbook , it can be found in jacobi s treatise on rigid body motion from 1849@xcite .",
    "unfortunately , for mathematical elegance , the attitude matrix was only specified up to a rotation at a uniform speed which was not clearly identified , so that its numerical implementation is not altogether clear .",
    "furthermore , jacobi s derivation relies heavily on geometric arguments and euler angles , which often pose problems in numerical applications . for this reason ,",
    "the next section contains a novel derivation of the exact solution of @xmath18 without reference to euler angles , leading to an expression which is more readily implemented .",
    "while discussions of how to solve the euler equations in the body frame are common , one rarely sees any mention of how to go about integrating the equation for the attitude matrix .",
    "therefore , we have chosen to treat this derivation in a bit more detail than one would perhaps expect from a computational paper .",
    "first the general form of the solution will be derived , after which the three different case of rigid bodies are explicitly considered : spherical bodies ( section [ sssolution ] ) , symmetric tops ( section [ sssolutionb ] ) , and asymmetric tops ( section [ sssolutionc ] ) .    to obtain the general form of the attitude matrix @xmath18",
    ", we have to solve eq .  .",
    "since this is a linear equation , its solution can be written in the form @xmath60 here , @xmath61 is a time dependent matrix which also satisfies eq .  , but with initial condition @xmath62 .",
    "this corresponds to a case in which the body and lab frame initially coincide , i.e. , in which the body is in the `` upright '' position . in this upright lab frame ,",
    "the angular momentum vector is given by @xmath63    it will prove to be more convenient to work in a different lab frame , called the _ invariant frame _",
    "( with vectors in this frame denoted by primed quantities ) , in which the angular momentum vector is along the @xmath64-axis and is equal to @xmath65 .",
    "such a frame can be found by performing a rotation of the original frame through a rotation matrix @xmath66 ( the reason for the peculiar notation will become clear below ) .",
    "this rotation is not unique and can be chosen such that one first rotates around the @xmath64-axis until the rotated angular momentum vector no longer has a @xmath67-component , and then subsequently rotates around the @xmath67-axis to remove the @xmath68-component of the angular momentum vector as well . denoting @xmath69^{1/2}$ ] ,",
    "the combined rotation is easily shown to be one may take @xmath70 where the sign is chosen according to @xmath71 , i.e. , depending on whether in the original lab frame @xmath51 pointed in the positive or the negative @xmath64-direction . ]",
    "@xmath72 this rotation is defined such that if @xmath73 is a vector in the original lab frame , then @xmath74 is the corresponding vector in the invariant frame . to find the matrix corresponding to @xmath61 in this new frame , note that since @xmath61 relates vectors to the body frame through @xmath75 , so that @xmath76 , one can identify @xmath77 since @xmath78 is a constant matrix multiplying on the right , @xmath79 also satisfies eq .   with initial condition @xmath80 .",
    "the convenience of this choice of frame becomes clear when @xmath79 is written in terms of its columns , @xmath81                       \\label{columns}\\ ] ] and one notes that @xmath82 the components of which are known once the euler equations are solved .",
    "thus , by this choice of frame , one is able to determine the third column of the matrix @xmath79",
    ".    the remaining elements of @xmath79 can all be expressed in terms of a single time - dependent angle @xmath29 .",
    "this is due to the orthogonality of @xmath79 , which implies that the other two columns @xmath83 and @xmath84 must lie in a plane orthogonal to @xmath85 and must also be orthogonal to each other . denoting @xmath86 and @xmath87 as two chosen orthogonal unit vectors in this plane",
    ", one can therefore write @xmath88 where the unit - vectors @xmath86 and @xmath89 are chosen to be : one may take @xmath90 and @xmath91 . ]",
    "@xmath92 where @xmath93 , and we have used the fact that @xmath94 .",
    "other choices of orthogonal unit - vectors @xmath86 and @xmath87 change the as - of - yet undetermined time dependent angle @xmath29 by a time independent offset .",
    "the current choice has the advantage that the matrix @xmath95 $ ] is identical to @xmath78 , so that @xmath96 , and hence @xmath97 using eqs .   and",
    ", @xmath79 has effectively been written as a product of two rotation matrices , @xmath98 where @xmath99 =    \\begin{pmatrix }    \\frac{\\tilde{l}_{1}\\tilde{l}_{3}}{l\\tilde{l}_{\\perp } } &    -\\frac{\\tilde{l}_{2}}{\\tilde{l}_{\\perp } } &     \\frac{\\tilde{l}_{1}}{l}\\\\    \\frac{\\tilde{l}_{2}\\tilde{l}_{3}}{l\\tilde{l}_{\\perp } } &    \\frac{\\tilde{l}_{1}}{\\tilde{l}_{\\perp } } &     \\frac{\\tilde{l}_{2}}{l}\\\\    -\\frac{\\tilde{l}_{\\perp}}{l }   &    0   &    { \\frac{\\tilde{l}_{3}}{l } }    \\end{pmatrix }    \\label{r1 } \\\\    \\mathbf{t}'_{2 } & =    \\begin{pmatrix }       \\cos\\psi&\\sin\\psi&0\\\\",
    "-\\sin\\psi&\\cos\\psi&0\\\\       0&0&1     \\end{pmatrix }       = \\mathbf{u}(-\\psi\\hat{\\boldsymbol z } ) .",
    "\\label{r2}\\end{aligned}\\ ] ] note that @xmath100 in eq .   is a rotation matrix because @xmath86 , @xmath87 and @xmath85 form an orthogonal set by their construction in eqs .   and .",
    "the matrix @xmath61 can therefore be written as @xmath101 for the special cases of the spherical top and symmetric top , it is more convenient to express @xmath61 as a product of two rotation matrices ( implicitly also found in ref .  ):",
    "@xmath102 where @xmath103 note that @xmath104 and @xmath105 are determined by the solution of the euler equations and require no further manipulations once the general solution of @xmath106 is known .",
    "turning next to the matrix @xmath107 , noting that for any rotation @xmath108 and vector @xmath109 , @xmath110 and that @xmath111 , the matrix @xmath107 can written as a rotation by an angle of @xmath112 around the axis @xmath113 , i.e. , using eqs .   and",
    ", @xmath114    the final task to determine @xmath61 consists of deriving a differential equation for the time dependent angle @xmath29 and solving it subject to the initial condition @xmath115 ( cf .  eq .  ) . to obtain this differential equation , note that from eqs .  , and , it follows that @xmath116 and hence from eq .",
    "one finds @xmath117 taking the inner product with @xmath87 , using that @xmath118 and dividing by @xmath119 , one can instead take the inner product with @xmath86 and divide by @xmath120 , with the same result .",
    "] , yields the differential equation for the angle , @xmath121 , where the time dependent frequency @xmath122 can be expressed as @xmath123 it follows from eq .   and that @xmath124 using eq .",
    "yields @xmath125 and @xmath126 , whence @xmath127 , or , expressed in terms of conserved quantities and @xmath128 only , @xmath129 the angle @xmath29 is then given by @xmath130    the formal result for the matrix @xmath61 , given by eqs .",
    " , and , still contains a time integral for @xmath29 whose integrand depends on the angular velocity component @xmath128 . hence the time dependence of this component of the angular velocity",
    "must be specified to perform the integral and obtain @xmath29 .",
    "the solution of the components of the angular velocity in the body frame follows from the euler equations , which can be analyzed in three separate cases depending on the values of the principal moments of inertia .      for a spherical top ,",
    "all moments of inertia are the same : @xmath131 , and the euler equations in eq .",
    "become extremely simple , namely , @xmath132 .",
    "for the spherical top system , all components of the angular velocity in the body frame are therefore constant , and hence the components of the angular momentum in the body frame are constant as well .",
    "it therefore follows that the matrix @xmath105 in eq .   remains constant in time , so that @xmath133 the frequency @xmath122 can also easily be determined by noting that @xmath128 is constant and @xmath131 , so that eq .",
    "gives @xmath134 leading to @xmath135 .",
    "equation then gives , with @xmath136 , @xmath137 so that one recovers the well - known result that for a spherical rotor @xmath138 the rotation matrix @xmath61 corresponds to a rotation by an angle of @xmath139 around the axis @xmath140 .",
    "note that the minus sign in the angle arises here from the fact that if the body rotates one way , the lab frame , as seen from the body frame , rotates in the opposite way .      for the case of a symmetric top , @xmath141 but @xmath142 .",
    "in that case , one can solve the euler equations in terms of well - known functions : @xmath143 here , the precession frequency @xmath144 is given by @xmath145 . from these equations , it is evident that @xmath146^{1/2}$ ] is conserved for a symmetric top , which allows one to rewrite @xmath104 in eq .   as a rotation around the @xmath64-axis by an angle of @xmath147",
    ": @xmath148 the final rotation angle @xmath29 can be determined by noting that @xmath149 again this is a constant but , in contrast to the spherical case , no longer equal to @xmath150 , so @xmath151 the second rotation @xmath107 in eq .",
    "is therefore given by eq .   with @xmath152 ,",
    "i.e. , @xmath153 as a result , the rotation matrix @xmath61 for a symmetric top is given by @xmath154      for a general asymmetric top , all moments of inertia are distinct : @xmath155 . the moments of inertia can be ordered in increasing order of magnitude , and we will choose to call the middle one always @xmath156 , while either @xmath157 or @xmath158 is the largest one . in the absence of forces and torques , eq .",
    "is integrable since the energy @xmath58 and the norm of the angular momentum @xmath159 are conserved quantities in the body frame . to ensure all quantities occurring in the solutions",
    "are real - valued ( rather than complex - valued ) , one needs to consider the quantities @xmath58 and @xmath160 and make sure that@xcite @xmath161 we will refer to this as the jacobi ordering .",
    "either situation can always be realized by choosing which principal axis of the body to call the first , second or third .    once the jacobi ordering is adopted , the solution of the euler equations is given by@xcite @xmath162 where @xmath163 , @xmath164 and @xmath165 are jacobi elliptic functions@xcite , and @xmath166 where in the last equation , @xmath167 is the incomplete elliptic integral of the first kind@xcite , defined as where @xmath168 . ]",
    "@xmath169    to give an idea of the behavior of elliptic functions , figure  [ cnsndn ] shows a plot of the elliptic functions for two values of the elliptic parameter , @xmath170 and @xmath171 . it is evident from the plots that the elliptic functions are periodic functions of their first argument , and resemble the sine , cosine and the constant function @xmath172 unless the value of @xmath173 is close to one . in other words , the elliptic parameter @xmath173 determines how closely the elliptic functions resemble their trigonometric counterparts . for @xmath174 ,",
    "the functions @xmath164 , @xmath163 and @xmath165 reduce to @xmath175 , @xmath176 and @xmath172 , respectively .",
    "note that the constant function  @xmath172 is reminiscent of the conservation of @xmath128 ( cf .",
    "eq .  ) in the case of the symmetric top",
    "indeed , for @xmath141 , eq .   shows that @xmath174 .",
    "three more numbers can be derived from the elliptic parameter @xmath173 which play an important role in the properties of elliptic functions .",
    "these are the _ quarter - period _",
    "@xmath177 , the _ complementary quarter - period _ @xmath178 and the _ nome _ @xmath179 , which is a parameter that appears in various series expansions of elliptic functions .",
    "in fact , the period of the elliptic functions @xmath164 and @xmath163 is equal to @xmath180 , while that of @xmath165 is @xmath181 .",
    "\\(a ) @xmath170(b ) @xmath171     ( solid line ) , @xmath163 ( bold dashed line ) , @xmath165 ( dotted line ) for ( a ) @xmath170 ( @xmath182 , @xmath183 ) and ( b ) @xmath171 ( @xmath184 , @xmath185 ) .",
    "also plotted are the cosine ( short dashed line ) and sine ( thin short dashed line ) with the same period , for comparison.,title=\"fig : \" ]    ( solid line ) , @xmath163 ( bold dashed line ) , @xmath165 ( dotted line ) for ( a ) @xmath170 ( @xmath182 , @xmath183 ) and ( b ) @xmath171 ( @xmath184 , @xmath185 ) . also plotted",
    "are the cosine ( short dashed line ) and sine ( thin short dashed line ) with the same period , for comparison.,title=\"fig : \" ]    given the solution of the euler equations in eqs .",
    " , the matrix @xmath100 in eq .   is completely specified . on the other hand , to solve for the time dependence of @xmath186 in eq .",
    ", the integral in eq .   must be performed . unlike to previous two cases , the integrand @xmath122 of @xmath29 , as given by eq .  ,",
    "is not a constant . despite this complication , the integral can still be performed explicitly using some properties of elliptic functions as we will now show .",
    "it will require a bit of complex analysis to integrate @xmath122 over time , so the reader may wish to skip this technical part and move on to the answer in eq .   on page   ( where the function @xmath187 is the first jacobi function@xcite ) .    by definition ,",
    "an elliptic function is a complex function @xmath188 ( of a complex variable @xmath16 ) that is doubly periodic in the sense that @xmath189 , and whose singularities in the finite complex plane consist only of poles .",
    "the doubly periodic function is completely specified by the values it takes inside the _ fundamental parallelogram _ spanned by @xmath190 and @xmath191 in the complex plane .",
    "moreover , it may be shown that an elliptic function is determined by the singularities inside that parallelogram up to an additive constant@xcite .",
    "in fact , for a elliptic function @xmath192 having @xmath193 poles of order one at @xmath194 ( @xmath195 ) in the fundamental parallelogram with residues @xmath196 , one may write ( ref .  ,  21.5 ) @xmath197 where @xmath198 is an additive constant and @xmath199 is the first jacobi theta function@xcite .    in order to apply eq .  , the singularity structure of @xmath122 must be examined .",
    "a little analysis shows that the function @xmath165 appearing in @xmath128 in eq .",
    "has only two poles of order one with opposite residues in its fundamental parallelogram , and its periods are @xmath200 and @xmath201 ( ref .  ,",
    " 16.2 ) . since any rational function of elliptic functions is again an elliptic function , the function @xmath122 in eq .",
    "is also an elliptic function with the same periods .",
    "from the form of @xmath122 in eq .  , one easily sees that any pole @xmath202 of @xmath122 in the complex plane is due to a zero of the denominator , i.e. , @xmath203 note that the poles of @xmath128 itself cancel in the numerator and the denominator in eq .   leading to a limit value of @xmath204 , and do not to lead to poles in  @xmath122 .    using eq .  , eq .",
    "is solved by @xmath205 here @xmath206 and @xmath207 are arbitrary integers and the two @xmath208 signs are independent , thus denoting four possibilities . since @xmath165 changes sign when its argument is shifted over a half - period @xmath209@xcite , one @xmath208 sign in eq .   can be eliminated by changing the term @xmath210 to @xmath211 : @xmath212 using that @xmath213,\\ ] ] ( obtained by combining  16.3.3 ,  16.20.3 and  17.4.46 in ref .  )",
    ", one finds @xmath214   -\\varepsilon   + 2kn_{1}+2k'n_{2}i .\\ ] ] noting that for negative values of @xmath215 , one can write @xmath216 @xmath217 , we can rewrite this as @xmath218 where we have defined @xmath219 note that @xmath220 .    the periodic structure in eq .",
    "can be understood as follows .",
    "the function @xmath122 depends on  @xmath16 though @xmath221 , and @xmath165 has periods @xmath181 and @xmath222 .",
    "note that even though @xmath165 changes sign when its argument is shifted over @xmath209 , this sign change leaves @xmath221 and hence @xmath122 unchanged . from these considerations ,",
    "it is evident that the actual periods of @xmath122 are @xmath223 and @xmath224 .",
    "although the size of the fundamental parallelogram is dictated by the function under consideration , the choice of its origin is free . choosing the fundamental parallelogram to be @xmath225/\\omega_{p } , [ -k+k'i]/\\omega_{p})$ ] ,",
    "the two poles in the parallelogram are complex conjugates @xmath202 and @xmath226 , where @xmath227 the pole structure of the function @xmath228 is illustrated in fig .  [ poles ] .     as a function of the variable @xmath229 .",
    "the fundamental parallelogram is indicated by a bold dashed rectangle and the crosses are poles . ]",
    "it is straightforward to show that the residues of @xmath122 at these poles are given by @xmath230 for the pole at @xmath202 and @xmath231 for the pole at @xmath226 , so that , using eq .   with @xmath232 ,",
    "the integrand @xmath122 may be written as @xmath233 ,                       \\label{thetaexprr}\\end{aligned}\\ ] ] and further manipulated to obtain a form that can be easily integrated , @xmath234 \\nonumber                     \\\\*&=   a_{2 }   -\\frac{d}{dt}\\operatorname{im}\\log \\vartheta_{1}\\big(\\frac{\\pi}{2k}(\\omega_{p}t+\\varepsilon - i\\eta)\\big|m\\big )   \\nonumber\\\\ * & =   a_{2 }   -\\frac{d}{dt}\\arg \\vartheta_{1}\\big(\\frac{\\pi}{2k}(\\omega_{p}t+\\varepsilon - i\\eta)\\big|m\\big ) .",
    "\\label{thetaexpr}\\end{aligned}\\ ] ] the constant @xmath198 appearing in eq .   can be obtained using the point @xmath235 , at which time @xmath236 ( cf .",
    "eq .  ) and eq",
    ".   gives @xmath237 examining the right hand side of eq .  , noting that @xmath238 and using @xmath239 , eq .",
    "gives @xmath240 comparing eqs .   and",
    ", we see that @xmath241 equation   is now readily integrated to express the angle @xmath29 in terms of the theta function as : @xmath242 where @xmath243 and @xmath198 is given by eq .  .    with this expression for @xmath29 ,",
    "the matrix @xmath244 @xmath245 is now fully specified , with @xmath104 and @xmath107 given in eqs .   and , respectively . unlike the special cases of",
    "spherical and symmetric rotors , no further simplifications occur in the expressions for these matrices .",
    "in this section an efficient implementation of computing the exact solutions presented in the previous section is outlined . because the rotation matrices for spherical and symmetric tops in eqs .   and are easily implemented using rodrigues formula@xcite , we focus on the case of an asymmetric rigid rotor . for this case",
    ", the attitude matrix was expressed in terms of complex theta functions , which hinders a straightforward and efficient numerical implementation .",
    "first it will be shown how all matrix elements in the attitude matrix may expressed in terms of real quantities and implemented efficiently . at the end of the section ,",
    "an algorithm to compute the motion of an asymmetric rigid body will be presented .      as discussed above",
    ", the matrix @xmath61 can generally be written as a product of two rotation matrices in the form @xmath246 , or three rotations in the form @xmath247 .",
    "for the implementation of the free motion of the asymmetric top , we prefer the latter because it does not require rodrigues formula to be applied twice and the matrix @xmath186 is sparse which allows an efficient matrix multiplication",
    ". the extra matrix multiplication with @xmath248 can be circumvented by using @xmath249 .",
    "the matrix @xmath105 is given in eq .   in terms of the components of the angular momentum in the body frame , @xmath250 .",
    "the @xmath251 are given by eqs .",
    " , which involve the elliptic functions .",
    "although the occurrence of elliptic functions may seem complicated , there are standard numerical methods to calculate the elliptic functions @xmath163 , @xmath164 and @xmath165@xcite that are very efficient and which makes them no more problematic to use than standard transcendental functions such as @xmath176 or @xmath175 . the matrix @xmath100 can therefore be computed numerically in a straightforward way in terms of the standard elliptic functions .",
    "the matrix @xmath252 is given in eq .   and is a rotation by an angle @xmath29 around the @xmath64-axis , with @xmath29 given in . as is evident from eq .",
    ", only @xmath120 and @xmath119 rather than the angle @xmath29 itself need to be evaluated to construct @xmath186 .",
    "using eq .   and the addition formulas for @xmath175 and @xmath176 ,",
    "these may be expressed as @xmath253 where @xmath254 .",
    "clearly , to compute these expressions , the real and imaginary parts of @xmath187 as well as the real constants @xmath255 and @xmath198 must be computed .",
    "noting that the function @xmath187 has the following series expansion in the nome @xmath256 ( ref .  ,  16.27.1 ) , @xmath257 , \\label{theta1expansion}\\ ] ] the real and imaginary parts of @xmath187 in eq .",
    "for a complex argument @xmath258 , can be written as @xmath259 the convergence of these series is extremely rapid due to the appearance of the @xmath260 . in practice one rarely needs more than three or four terms to get to machine precision .",
    "based on the series expansion of @xmath187 , the constant @xmath255 given in eq .   can be evaluated as follows : @xmath261 where @xmath262 if @xmath263 , @xmath264 if @xmath265 and @xmath266 , and @xmath267 if @xmath265 and @xmath268 .    for the constant @xmath198 ,",
    "an expansion of the logarithmic derivative of @xmath187 can be utilized(ref .",
    ",  16.29.1 ) : @xmath269 using the expression for @xmath198 in eq .  , where @xmath270 is purely imaginary and noting that @xmath271 and @xmath272 , one can write @xmath273 using the series expansion in eq .",
    ", @xmath198 can be evaluated from @xmath274 , \\label{xiseries}\\ ] ] where @xmath275 the series in eq",
    ".   converges if @xmath276 . because @xmath277 and @xmath179 , one has @xmath278 so this series converges , and , because @xmath256 is typically small , usually quickly .",
    "the above derivation assumed that the jacobi ordering of eq .",
    "was satisfied .",
    "although this can always be realized by choosing which principal axis of the body to call the first , second or third , as is evident from eq .  , the choice of principal axes depends on the initial values of the angular velocities .",
    "often , instead of choosing the axis depending on the initial conditions , it is preferable to work with a fixed convention in which the principal axes are oriented in a particular way with respect to the masses of the body . in that case",
    ", one can adopt the jacobi ordering convention by introducing internal variables which differ when necessary from the physical ones by a rotation .",
    "for instance , if @xmath279 but it should be @xmath280 according to eq .  , one can apply the rotation matrix @xmath281 which transforms between the internal and physical choices of principal axes by exchanging the @xmath68 and @xmath64 components and reversing the @xmath67 component .",
    "if the order of the moments of inertia already follows the jacobi ordering , @xmath282 is effectively the identity matrix .",
    "based on the above , the following algorithm can be set up to calculate the position of a rigid body at any arbitrary time , given a set of initial conditions . for efficiency , the algorithm consists of two steps : an initialization routine , in which some expressions are pre - calculated , and an evolution routine that calculates @xmath283 and @xmath18 at time @xmath16 .    in the algorithm below ,",
    "the functions @xmath163 , @xmath164 , @xmath165 and @xmath167 are assumed to be available , but not the @xmath187 function .",
    "see refs .   for implementations of @xmath163 , @xmath164 , @xmath165 and @xmath167 .",
    "the initialization routine takes an initial angular velocity vector in the body frame @xmath284 and inertial moments @xmath285 , @xmath286 and @xmath287 ( where it is assumed that @xmath286 is the middle one ) , and pre - computes a few variables as follows ( in pseudo - code , in order to facilitate implementations in different programming languages ) :    initialization(@xmath285 , @xmath286 , @xmath287 , @xmath288 , @xmath289 , @xmath290 , @xmath291 )    compute @xmath292 + compute @xmath293 + if ( @xmath294 and @xmath295 ) or ( @xmath296 and @xmath297 ) then    set orderflag + set @xmath298 , @xmath299 and @xmath300 + set @xmath301 , @xmath302 and @xmath303 + compute @xmath304 + compute @xmath305 = \\begin{pmatrix }        -\\frac{l_{\\perp}}{l }        &        -\\frac{i_{2}i_{3}\\omega_{20}\\omega_{30}}{ll_{\\perp } }        &              \\frac{i_{1}i_{3}\\omega_{10}\\omega_{30}}{ll_{\\perp } }        \\\\        0        &        -\\frac{i_{1}\\omega_{10}}{l_{\\perp } }        &        -\\frac{i_{2}\\omega_{20}}{l_{\\perp } }        \\\\",
    "\\frac{i_{3}\\omega_{30}}{l }        &        -\\frac{i_{2}\\omega_{20}}{l }        &        \\frac{i_{1}\\omega_{10}}{l }        \\end{pmatrix }        $ ]    else    unset orderflag + set @xmath306 , @xmath299 and @xmath307 + set @xmath308 , @xmath309 and @xmath310 + compute @xmath304 + compute @xmath311 = \\begin{pmatrix }        \\frac{i_{1}i_{3}\\omega_{10}\\omega_{30}}{ll_{\\perp } }        &        \\frac{i_{2}i_{3}\\omega_{20}\\omega_{30}}{ll_{\\perp } }        &        -\\frac{l_{\\perp}}{l }        \\\\        -\\frac{i_{2}\\omega_{20}}{l_{\\perp } }        &        \\frac{i_{1}\\omega_{10}}{l_{\\perp } }        &        0        \\\\        \\frac{i_{1}\\omega_{10}}{l }        &        \\frac{i_{2}\\omega_{20}}{l }        &        \\frac{i_{3}\\omega_{30}}{l }        \\end{pmatrix }        $ ]    end if + compute @xmath312\\ , \\mathbf{a}(0)$ ] + compute @xmath313 + compute @xmath314 + compute @xmath315 + compute @xmath316 + compute @xmath317 + compute @xmath318 + compute @xmath319 + compute @xmath320 + compute @xmath321 + compute @xmath322 + compute @xmath323 + set @xmath324 + set @xmath264 + repeat    compute @xmath325 + increment @xmath198 by @xmath326 + increment @xmath193 by @xmath172    until @xmath327 machine precision + compute @xmath328 + set @xmath329 and @xmath330 + for @xmath262 to @xmath331 do    compute @xmath332=(-1)^{n}2q^{n(n+1)+1/4 }        \\cosh\\frac{(2n+1)\\pi\\eta}{2k}$ ] + compute @xmath333=(-1)^{n+1}2q^{n(n+1)+1/4 }        \\sinh\\frac{(2n+1)\\pi\\eta}{2k}$ ] + increment @xmath334 by @xmath332\\sin\\frac{(2n+1)\\pi\\varepsilon}{2k}$ ] + increment @xmath335 by @xmath333\\cos\\frac{(2n+1)\\pi\\varepsilon}{2k}$ ]    end for + if @xmath336 then @xmath337 else @xmath338 + compute @xmath339 + store orderflag , @xmath157 , @xmath156 , @xmath158 , @xmath340 , c_{i}[\\,]$ ] and @xmath341    end initialization    the evolution routine can use the pre - computed expressions in the following way :    evolution(@xmath16 )    compute @xmath342 + compute @xmath343 + compute @xmath344 + set @xmath345 and @xmath346 + for @xmath262 to @xmath331 do    increment @xmath347 by @xmath332\\sin((2n+1)\\pi ( \\omega_{p } t+\\varepsilon)/(2k))$ ] + increment @xmath348 by @xmath333\\cos((2n+1)\\pi ( \\omega_{p } t+\\varepsilon)/(2k))$ ]    end for + compute @xmath349 , @xmath350 + compute @xmath351 + compute @xmath352 + compute @xmath353 + if orderflag is set then    compute @xmath354 = \\begin{pmatrix }      -\\frac{l_{\\perp}}{l }      &      0      &      \\frac{i_{3}\\omega_{3}}{l }      \\\\      -\\frac{i_{2}i_{3}\\tilde{\\omega}_{2}\\tilde{\\omega}_{3}}{ll_{\\perp } }      &      -\\frac{i_{1}\\tilde{\\omega}_{1}}{l_{\\perp } }      &      -\\frac{i_{2}\\tilde{\\omega}_{2}}{l }      \\\\      \\frac{i_{1}i_{3}\\tilde{\\omega}_{1}\\tilde{\\omega}_{3}}{ll_{\\perp } }      &      -\\frac{i_{2}\\tilde{\\omega}_{2}}{l_{\\perp } }      &      \\frac{i_{1}\\tilde{\\omega}_{1}}{l }      \\end{pmatrix }      $ ] + swap @xmath355 and @xmath356 + change sign of @xmath357    else    compute @xmath354 = \\begin{pmatrix }      \\frac{i_{1}i_{3}\\tilde{\\omega}_{1}\\tilde{\\omega}_{3}}{ll_{\\perp } }      &      -\\frac{i_{2}\\tilde{\\omega}_{2}}{l_{\\perp } }      &      \\frac{i_{1}\\tilde{\\omega}_{1}}{l }      \\\\      \\frac{i_{2}i_{3}\\tilde{\\omega}_{2}\\tilde{\\omega}_{3}}{ll_{\\perp } }      &      \\frac{i_{1}\\tilde{\\omega}_{1}}{l_{\\perp } }      &      \\frac{i_{2}\\tilde{\\omega}_{2}}{l }      \\\\      -\\frac{l_{\\perp}}{l }      &      0      &      \\frac{i_{3}\\omega_{3}}{l }      \\end{pmatrix}$ ]    end if + compute @xmath358\\begin{pmatrix }      \\cos\\psi & \\sin\\psi & 0      \\\\",
    "-\\sin\\psi&\\cos\\psi & 0      \\\\      0&0&1      \\end{pmatrix}\\mathbf{b}$ ] + return @xmath355 , @xmath357 , @xmath356 and @xmath18    end evolution     + some remarks about this pseudo - code :    * the orderflag indicates whether the jacobi ordering convention eq .",
    "is satisfied . if not , @xmath282 in eq .",
    "is used . if eq .",
    "is satisfied , @xmath282 is set equal to the identity matrix . * with these definitions , @xmath61 is replaced by @xmath359 .",
    "this is accomplished simply by @xmath360 . * as a consequence , @xmath282 in eq .",
    "is only implicitly used in the combination @xmath361 $ ] * the initial value of @xmath291 occurs as @xmath362 , so in the initialization routine , we only need to store the combination @xmath363 . *",
    "the machine precision depends on the floating point precision used in the calculation ; for 64 bit double precision , this is of the order of @xmath364@xmath365 . * for clarity of the algorithm ,",
    "matrix products have not been explicitly written out , and efficiency improvements such as computing intermediate expressions and using a recursive evaluation for the @xmath176 s and @xmath175 s have not been shown here . *",
    "an implementation of this code in c , which includes these improvements , can be found on the internet at ` http://www.chem.utoronto.ca/staff/jms/rigidrotor.html ` and in the appendix .",
    "( a)(b )    , ( b ) position of the ` axes ' . for details",
    "see text.,title=\"fig:\",scaledwidth=45.0% ] , ( b ) position of the ` axes ' . for details",
    "see text.,title=\"fig:\",scaledwidth=45.0% ]    as an example , consider an object composed of six point masses which are arranged , in the body frame , at the points @xmath366 , @xmath367 , @xmath368 , @xmath369 , @xmath370 and @xmath371 .",
    "all points are assumed to have unit mass , so that the inertial moments are given by @xmath372 , @xmath373 and @xmath374 .",
    "choosing @xmath375 ensures @xmath280 .    in particular we will consider @xmath376 , @xmath377 and @xmath378 , yielding @xmath379 , @xmath380 and @xmath381 . as initial conditions we will take @xmath382 and @xmath383 . because of the large value of the @xmath67-component of the angular velocity , one may expect motion to consist primarily of rotation around the @xmath67-axis . in figure",
    "[ figure3]a the components of the angular velocity in the body frame have been plotted as a function of time , while in figure  [ figure3]b the projection on the @xmath384 plane of the point masses that in the body frame are located at @xmath366 ( the ` long axis ' ) , @xmath368 ( the ` middle ' axis ) and @xmath370 ( the ` short axis ' ) are plotted .",
    "it is clear that the rotational motion does not consist of small perturbations to a rotation around the @xmath67-axis .",
    "we stress once more that , up to machine precision , the results in figure  [ figure3 ] are exact .",
    "in this paper , the general solution of the rotational motion of a rigid body in the absence of external torques and forces was derived .",
    "explicit expressions for the angular velocities and the attitude matrix were obtained in terms of real quantities to facilitate numerical evaluation .",
    "note that even though the solution of rotational motion for bodies without a simple mass distribution contains generalizations of the familiar sine and cosine functions , the motion typically appears quite complex and notably different from that of a spherical top .",
    "the general solution of the equations governing rigid body dynamics in the absence of forces and torques presented here is potentially useful in several important applications .",
    "the primary advantage of having in hand analytical solutions of the equations of motion of a system lies in the fact that all relevant properties of a soluble system can be determined at arbitrarily many and arbitrarily distant moments in time .",
    "applications in which knowing exactly the position and orientation of a body at specific moments in time is paramount may benefit from the results presented here .",
    "such applications are abundant in a wide variety of contexts . for example , in astrophysics , many objects such as space crafts , asteroids , certain planets and moons , behave on short time scales as rigid bodies .",
    "these bodies are not free since they feel typically weak gravitational fields . however , if their dimensions are small enough compared to the gradients of the gravitational field , gravitational forces effectively influence motion only of the center of mass , while the rotational motion is that of a free rotor described here .",
    "another obvious application of the solution detailed in this paper is as a diagnostic tool for numerical integration techniques designed for rotating bodies with external torques .",
    "such techniques are of considerable interest , but to establish their accuracy , one needs to be able to compare results of approximate integration schemes with exact results . to date",
    "most comparisons are carried out for free systems with a high degree of symmetry and simple rotational motion@xcite .",
    "given the relative complexity of motion in the asymmetric case compared with that of a spherical rotor , such comparisons do not appear to be very stringent .",
    "the exact solution is also of practical use in symplectic integrators for use in continuous molecular dynamics@xcite .",
    "there are already various symplectic integrators using the exact solution of some part of the dynamics@xcite , which generally seems to improve stability and accuracy over simple splitting methods@xcite .",
    "however , these do not use the exact solution of the attitude matrix .",
    "the integrator of celledoni and sfstrm , for example , uses the exact solution of the euler equations but uses an approximate expression for the attitude matrix@xcite . using the exact solution of the attitude matrix",
    "further improves the stability and accuracy of this integrator@xcite .",
    "perhaps the most direct application of the implementation of the exact solution is in simulating complex rigid molecular systems using discontinuous molecular dynamics methods . in this approach ,",
    "various components of the system interact via discontinuous potentials , leading to impulsive forces and torques that act on molecules at specific moments in time@xcite . as a result",
    ", the motion of all bodies in the system is free between impulsive events that alter the trajectory of the body via discontinuous jumps in the momenta or angular velocities at discrete `` collision '' times . in order to determine the time at which molecules in the simulation interact",
    ", the exact location and orientation of all bodies in the system must be computable at arbitrary times . if the configurations of the system are computed through numerical integration ( using e.g. one of the integrators in refs .  )",
    ", such simulations would become inefficient .",
    "for this reason , to date , most simulations of rigid bodies interacting via discontinuous potentials have been restricted to systems in which rotational motion is governed by the equations of a spherical rotor ( see refs . ) .",
    "armed with the results of this paper , the technique of discontinuous molecular dynamics can now be applied to any rigid model  symmetric or asymmetric  with discontinuous interactions of step - potential form .",
    "examples of such studies can be found in refs .  .",
    "the authors would like to thank prof .",
    "sheldon opps , dr .  lisandro hernndez de la pea and prof .",
    "stuart whittington for useful discussions .",
    "this work was supported by a grant from the national sciences and engineering research council of canada .",
    ".... # define machprec 3.e-16 # define my_pi_2 1.57079632679489661923   / * the following macro performs an in - situ matrix multiplication : * / # define rightmultmatrix(m1 , m2 , x , y)\\    x = m1[0][0 ] ; y = m1[0][1];\\    m1[0][0 ] * = m2[0][0 ] ; m1[0][0 ] + = y*m2[1][0]+m1[0][2]*m2[2][0];\\    m1[0][1 ] * = m2[1][1 ] ; m1[0][1 ] + = x*m2[0][1]+m1[0][2]*m2[2][1];\\    m2[2][2 ] ; m1[0][2 ] + = x*m2[0][2]+y*m2[1][2];\\    x = m1[1][0 ] ; y = m1[1][1];\\    m1[1][0 ] * = m2[0][0 ] ; m1[1][0 ] + = y*m2[1][0]+m1[1][2]*m2[2][0];\\    m1[1][1 ] * = m2[1][1 ] ; m1[1][1 ] + = r*m2[0][1]+m1[1][2]*m2[2][1];\\    m1[1][2 ] * = m2[2][2 ] ; m1[1][2 ] + = r*m2[0][2]+y*m2[1][2];\\    x = m1[2][0 ] ; y = m1[2][1];\\    m1[2][0 ] * = m2[0][0 ] ; m1[2][0 ] + = y*m2[1][0]+m1[2][2]*m2[2][0];\\    m1[2][1 ] * = m2[1][1 ] ; m1[2][1 ] + = x*m2[0][1]+m1[2][2]*m2[2][1];\\    m1[2][2 ] * = m2[2][2 ] ; m1[2][2 ] + = x*m2[0][2]+y*m2[1][2 ] ;    / * a number of precomputed expressions are taken together in the     following structure : * / typedef struct {   int orderflag , nt ;   double i1 , i2 , i3 , omega1 m , omega2 m , omega3 m , omegap , freq , epsilon ,           a1 , a2 , l , m , * cr , * ci , b[3][3 ] ; } top ;    / * the following function performs some pre - calculations .",
    "input : ix ,   *   * iy and iz are the three principal inertial moments ( it is assumed   *   * that ix < iy < iz or ix > iy > iz ) , omegax , omegay and omegaz are the       *   * angular velocities in the principal axis ( i.e. body ) frame , and a   *   * is the initial attitude matrix .",
    "returns a top structure containing *   * all necessary precomputed parameters to efficiently calculate the   *   * omega 's and a 's at later times ( see the evolution function below ) : * / top initialization(double ix , double iy , double iz ,                      double omegax , double omegay , double omegaz , double a[3][3 ] ) {   double    a = ix*omegax ,                        / * l1 , angular momentum in x - direction * /    b = iy*omegay ,                        / * l2 , angular momentum in y - direction * /    c = iz*omegaz ,                        / * l3 , angular momentum in z - direction * /    d = a*a+b*b+c*c ,                    / * l.l , norm squared of angular momentum * /    e = a*omegax+b*omegay+c*omegaz ,                                       / * 2 e * /    f , omega1 , omega2 , omega3 , kp , q , r , i , s , g , h ;     int n ;   top r ;                                / * will contain the precomputed numbers * /   r.l = sqrt(d ) ;                                                         / * |l| * /   if ( ( e > d / iy & & ix < iz ) || ( e < d / iy & & ix > iz ) ) {     / * check if jacobi - ordering is obeyed : * /    r.orderflag = 1;/ * jacobi ordering ensured by swapping the order of x and z * /    r.i1 = iz ;                       / * directions and reversing the y direction * /    r.i2 = iy ;    r.i3 = ix ;    omega1 = omegaz ;    omega2 = -omegay ;    omega3 = omegax ;    f = hypot(b , c ) ;                                                      / * fill the matrix r.b with transpose of t1(0 ) , using ordering : * /    r.b[0][0 ] = -f / r.l ; r.b[0][1 ] = b*a / r.l / f ; r.b[0][2 ] = a*c / r.l / f ;    r.b[1][0 ] = 0 ;       r.b[1][1 ] = -c / f ;       r.b[1][2 ] = b / f ;    r.b[2][0 ] = a / r.l ;   r.b[2][1 ] = b / r.l ;      r.b[2][2 ] = c / r.l ;   } else {     r.orderflag = 0 ;                                 / * jacobi ordering correct * /     r.i1 = ix ;     r.i2 = iy ;     r.i3 = iz ;     omega1 = omegax ;     omega2 = omegay ;     omega3 = omegaz ;     f = hypot(a , b ) ;     / * fill the matrix   r.b with the transpose of t1(0 ) : * /     r.b[0][0 ] = a*c / r.l / f ; r.b[0][1 ] = b*c / r.l / f ; r.b[0][2 ] = -f / r.l ;     r.b[1][0 ] = -b / f ;       r.b[1][1 ] = a / f ;        r.b[1][2 ] = 0 ;     r.b[2][0 ] = a / r.l ;      r.b[2][1 ] = b / r.l ;      r.b[2][2 ] = c / r.l ;   }   rightmultmatrix(r.b , a , r , i ) ;                                / *   calculate b * /   a = d - e*r.i3 ;                                  / * compute four subexpressions * /   b = d - e*r.i1 ;   c = r.i1-r.i3 ;    d = r.i2-r.i3 ;   r.omega1m = copysign(sqrt(a / r.i1/c ) , omega1 ) ;    r.omega2m = -copysign(sqrt(a / r.i2/d ) , omega1 ) ;   r.omega3m = copysign(sqrt(-b / r.i3/c ) , omega3 ) ;   r.omegap = d*copysign(sqrt(b/(-d)/r.i1/r.i2/r.i3 ) , omega3 ) ;     / * prec .",
    "freq * /   r.m = a*(r.i2-r.i1)/(b*d ) ;                             / * ellipic parameter m * /   r.epsilon = f(omega2/r.omega2 m , r.m ) ;                        / * initial phase * /   r.freq = my_pi_2/f(1.0 , r.m ) ;             / * frequency relative to precession * /   kp = f(1.0 , 1.0-r.m ) ;                     / * k ' , complementary quarter period * /   q = exp(-2.0*r.freq*kp ) ;                                     / * elliptic nome * /   e = exp(r.freq*(copysign(kp , omega3)-f(r.i3*r.omega3m / r.l , 1.0-r.m ) ) ) ; ....      ....   f = e*e ;                                             / * this f is equal to xi * /   r.a2",
    "= r.l / r.i1+r.freq*r.omegap*(f+1)/(f-1 ) ;       / * first term in a2 series * /   a = 1.0 ;                                    / * a will be the 2n - th power of q * /   b = 1.0 ;                                     / * b will be the nth power of xi *",
    "/   n = 1 ;   do {    a * = q*q ;                                     / * update a and   b recursively * /    b * = f ;    c = -2.0*r.freq*r.omegap*a/(1-a)*(b-1/b ) ;             / * the next term in a2 * /    r.a2 + = c ;                                       / * add a term of the series * /    n++ ;   } while ( fabs(c / r.a2)>machprec & & n<10000);/ * stop if converged or n too big * /   / * determine upper bound on number of terms needed in theta function series : * /   r.nt = ( int)(log(machprec)/log(q)+0.5 ) ;   r.cr = ( double * ) malloc(sizeof(double)*(r.nt+1 ) ) ;          / * allocate memory * /   r.ci = ( double * ) malloc(sizeof(double)*(r.nt+1 ) ) ;    a = 1.0 ;                                    / * a will be the 2n - th power of q * /   b = 1.0 ;                                       / * b will be ( -1)^n q^{n(n+1 ) } * /   r.cr[0 ] =   ( e+1/e ) ;       / * zeroth term in the series for real and imag part * /   r.ci[0 ] = -(e-1/e ) ;    s = sin(r.freq*r.epsilon ) ;            / *   s = sin((2n+1)x ) ,   c = cos((2n+1)x ) * /   c = cos(r.freq*r.epsilon ) ;    g = 2.0*c*s ;                                                       / * sin(2x ) * /   h = 2.0*c*c-1.0 ;                                                   / * cos(2x ) * /   r = r.cr[0]*s ;                / * real part of the theta function , zeroth term * /   i = r.ci[0]*c ;           / * imaginary part of the theta function , zeroth term * /   for ( n = 1 ; n < =   r.nt ; n++ ) {    e * = f ;                                                  / * e   =   xi^{n+1/2 } * /    a * = q*q ;                                      / * update a and b recursively * /    b * = -a ;    r.cr[n ] = b*(e+1/e ) ;             / * compute next coefficient of theta series * /    r.ci[n ] = -b*(e-1/e ) ;     d = s ;                                    / * compute sin and cos recursively * /    s = h*s+g*c ;     c = h*c - g*d ;     r + = r.cr[n]*s ;                                            / * add next terms * /    i + = r.ci[n]*c ;     if ( ( fabs(r.cr[n ] ) < machprec ) & & ( fabs(r.ci[n ] ) < machprec ) )      r.nt = n-1 ;                                      / * if converged , adjust nt * /   }   r.a1 = atan2(i , r ) ;                                      / * compute arg(r , i ) * /   return r ;                              / * done , return all precomputed values * / }     / * the following function calculates the angular velocities and attitude      *    * matrix at a time t. input : r is a pointer to a top structure containing    *    * all necessary precomputed parameters to efficiently calculate the omega 's *   * and a 's , and t is a time .",
    "r should be generated by initialize function .",
    "*   * output : * omegax , * omegay and * omegaz are filled with the angular           *    * velocities in the principal axis ( i.e. body ) frame at time t and a is      *   * filled with the attitude matrix at time t.                                 * / void evolution(top * r , double t , double * omegax , double * omegay , double * omegaz ,                  double a[3][3 ] )   {   int n ;    double omega1 , omega2 , omega3 , r , i , u , s , c , g , h , f ;     u = r->omegap*t+r->epsilon ;         / * compute argument of elliptic functions * /   sncndn(u , r->m , & omega2 , & omega1 , & omega3 ) ;             / * compute sn , cn , dn * /   omega1 * = r->omega1 m ;                          / * multiply by the amplitudes   * /   omega2 * = r->omega2 m ;                          / * of the respective ang . vel .",
    "* /   omega3 * = r->omega3 m ;   if ( r->orderflag = = 1 ) {                         / * check for jacobi ordering * /    * omegax = omega3 ;               / * if adjusted , invert x and z and reverse y * /    * omegay = -omega2 ;     * omegaz = omega1 ;    omega1 * = r->i1 ;     omega2 * = r->i2 ;     omega3 * = r->i3 ;    f = hypot(omega1 , omega2 ) ;      / * compute t1(t ) , taking into account the ordering :   * /    a[0][0 ] = -f / r->l ;                a[0][1 ] = 0 ;          a[0][2 ] = omega3/r->l ;    a[1][0 ] = -omega2*omega3/r->l / f ; a[1][1 ] = -omega1/f ; a[1][2 ] = -omega2/r->l ;    a[2][0 ] = omega1*omega3/r->l / f ;   a[2][1 ] = -omega2/f ; a[2][2 ] = omega1/r->l ;   } else {    * omegax = omega1 ;                                 / * no adjustment necessary * /    * omegay = omega2 ;     * omegaz = omega3 ;    omega1 * = r->i1 ;     omega2 * = r->i2 ;     omega3 * = r->i3 ;    f = hypot(omega1 , omega2 ) ;         / * compute t1(t ) : * /    a[0][0 ] = omega1*omega3/r->l / f ; a[0][1 ] = -omega2/f ; a[0][2 ] = omega1/r->l ;    a[1][0 ] = omega2*omega3/r->l / f ; a[1][1 ] = omega1/f ;   a[1][2 ] = omega2/r->l ;    a[2][0 ] = -f / r->l ;               a[2][1 ] = 0 ;          a[2][2 ] = omega3/r->l ;   }   s = sin(r->freq*u ) ;     / * s = sin((2n+1)x ) , c = cos((2n+1)x ) with x = freq*u * /   c = cos(r->freq*u ) ;   g = 2.0*c*s ;                     / * g = sin 2x , h = cos 2x , used in recursion * /   h = 2.0*c*c-1.0 ;   r = r->cr[0]*s ;               / * zeroth term in series for the theta function * /   i = r->ci[0]*c ;                   for ( n = 1 ; n",
    "< = r->nt ; n++ ) {                              / * compute series * /    u = s ;    s = h*s+g*c ;            / * computes sin((2n+1)x ) and cos((2n+1)x recursively * /    c = h*c - g*u ;    r + = r->cr[n]*s ;                   / * next term in series for theta function * /     i + = r->ci[n]*c ;   }    s = sin(r->a1+r->a2*t ) ;                                / * s = sin(a_1+a_2 t ) * /    c = cos(r->a1+r->a2*t ) ;                                / * c = cos(a_1+a_2 t ) * /    u = s ;        / * use addition formula to compute s = sin psi and c = cos psi * /    s = s*r - c*i ;                              / * where psi = a_1+a_2 t+arg(r , i ) * /    c = c*r+u*i ;    u = hypot(r , i ) ;    s /= u ;    c /= u ;    for ( n = 0 ; n<3 ; n++ ) {                   / * perform multiplication with t2 ' * /     u = a[n][0 ] ;          a[n][0 ] = a[n][0]*c - a[n][1]*s ;     a[n][1 ] = a[n][1]*c+u*s ;    }    rightmultmatrix(a , r->b , r , i ) ;          / * gives the   final attitude matrix * / }         ....      * using the gnu scientific library@xcite : + .... double f(double x , double m )   { return x*gsl_sf_ellint_rf(1.0-x*x , 1.0-m*x*x , 1.0 , gsl_prec_double ) ; } void sncndn(double x , double m , double * s , double * c , double * d )   { ( void)gsl_sf_elljac_e(x , m , s , c , d ) ; } .... * using numerical recipes@xcite : + .... double f(double x , double m )   { return x*rf(1.0-x*x , 1.0-m*x*x , 1.0 ) ; } void sncndn(double x , double m , double * s , double * c , double * d )   { sncndn(x , 1.0-m , s , c , d ) ; } .... + to truly work in double precision , compared to ref .  , each ` float ` should be replaced by ` double ` and the following constants in the source code would have to be changed : + .... # define errtol 0.0025 # define ca 1e-8   .... + in rf and sncndn , respectively",
    ".    22 b.  j. alder and t.  e. wainwright , phase transition for a hard sphere system , j. chem .",
    "27 , 1208 ( 1957 ) ; b.  j. alder and t.  e. wainwright , studies in molecular dynamics .",
    "i. general method , j. chem .",
    "31 , 459 ( 1959 ) ; b.  j. alder and t.  e. wainwright , studies in molecular dynamics .",
    "ii . behavior of a small number of elastic spheres , j. chem .",
    "33 , 1439 ( 1960 ) .",
    "g.  a. chapela , s.  e. martnez - casas , and j.  alejandre , molecular dynamics for discontinuous potentials i. general method and simulation of hard polyatomic molecules , molecular physics 53 , 139 ( 1984 ) ; g.  a. chapela , h.  t. davis , and l.  e. sciven , molecular dynamics of discontinuous lennard - jonesium and water , chemical physics 129 , 201 ( 1989 ) ; b.  d. lubachevsky , how to simulate billiards and similar systems , j. comput .",
    "94 , 255 ( 1991 ) ; m.  marin , d.  risso , and p.  cordero , efficient algorithms for many - body particle molecular dynamics , j. comput .",
    "109 , 306 ( 1993 ) ; a.  donev , s.  torquato , and f.  h. stillinger , neighbor list collision - driven molecular dynamics simulation for nonspherical hard particles .",
    "i algorithmic details , j. comput .",
    "202 , 737 ( 2005 ) ; a.  donev , s.  torquato , and f.  h. stillinger , neighbor list collision - driven molecular dynamics simulation for nonspherical hard particles .",
    "ii applications to ellipses and ellipsoids , j. comput .",
    "202 , 765 ( 2005 ) ; c.  de michele , s.  gabrielli , p.  tartaglia , and f.  sciortino , dynamics in the presence of attractive patchy interactions , j. phys . chem .",
    "b 110 , 8064 ( 2006 ) .      l.  hernndez de  la pea , r.  van zon , j.  schofield , and s.  b. opps , discontinuous molecular dynamics for rigid bodies : applications .",
    "cond - mat/0607528 ; l.  hernndez de  la pea , r.  van zon , j.  schofield , and s.  b. opps , discontinuous molecular dynamics simulations of water .",
    "manuscript in preparation .",
    "d.  frenkel and j.  f. maguire , molecular dynamics study of the dynamical property of an assembly of infinitely thin hard rods , mol .",
    "49 , 503 ( 1983 ) ; m.  p. allen , d.  frenkel , and j.  talbot , molecular dynamics simulation using hard particles , comput .",
    "phys . rep .",
    "9 , 301 ( 1989 ) ; w.  van ketel , c.  das , and d.  frenkel , structural arrest in an ideal gas , phys . rev .",
    "94 , 135703 ( 4 pages ) ( 2005 ) .",
    "d.  baraff , dynamic simulation of non - penetration rigid bodies , ph.d .",
    "thesis , cornell university ( 1992 ) ; d.  baraff , analytical methods for dynamic simulation of non - penetrating rigid bodies , computer graphics 23 , 223 ( 1989 ) .",
    "y.  masutani , t.  iwatsu , and f.  miyazaki , motion estimation of unknown rigid body under no external forces and moments , in proc .",
    "conf . on robotics and automation 94 , pp .",
    "10661072 ( ieee computer society press , 1994 ) .",
    "volume 2 .",
    "s. r. buss .",
    "accurate and efficient simulations of rigid body rotations , j. comp . phys .",
    "164 , 377 ( 2000 ) ; t. f. miller iii , m. eleftheriou , p. pattnaik , a. ndirango , d. newns , and g. j. martyna , symplectic quaternion scheme for biophysical molecular dynamics , j. chem . phys .",
    "116 , 8649 ( 2002 ) ; h. kamberaj , r. j. low , m. p. neal , time reversible and symplectic integrators for molecular dynamics simulations of rigid molecules , j. chem .",
    "122 , 224114 ( 2005 ) .",
    "d. janezic and f. merzel , an efficient symplectic integration algorithm for molecular dynamics simulations , j. chem .",
    "35 , 321 ( 1995 ) ; d. janezic , m. praprotnik , and f. merzel , molecular dynamics integration and molecular vibrational theory . i. new symplectic integrators , j. chem .",
    "122 , 174101 ( 2005 ) .",
    "e.  t. whittaker , a treatise on the analytical dynamics of particles and rigid bodies ( cambridge university press , 1937 ) , 4th ed . ; l.  d. landau and e.  m. lifshitz , mechanics , vol .  1 of _ a course in theoretical physics _",
    "( pergamon press , 1976 ) , 3rd ed ."
  ],
  "abstract_text": [
    "<S> in this paper the exact analytical solution of the motion of a rigid body with arbitrary mass distribution is derived in the absence of forces or torques . </S>",
    "<S> the resulting expressions are cast into a form where the dependence of the motion on initial conditions is explicit and the equations governing the orientation of the body involve only real numbers . based on these results , an efficient method to calculate the location and orientation of the rigid body at arbitrary times is presented . </S>",
    "<S> this implementation can be used to verify the accuracy of numerical integration schemes for rigid bodies , to serve as a building block for event - driven discontinuous molecular dynamics simulations of general rigid bodies , and for constructing symplectic integrators for rigid body dynamics . </S>"
  ]
}