{
  "article_text": [
    "today s computational scientists face a growing number of challenges which affect their ability to fully exploit the computational resources available to them .",
    "firstly , they have an unprecedented amount of computational power available to them , which will continue to grow in the future . a new generation of high performance computing ( hpc ) machines are now coming online with up to tens of petaflops performance .",
    "secondly , the architectures of these large scale hpc machines point to a growing trend ; hpc machines made up of hybrids of scalar and vector processors , or multicore processors that include scalar and vector components on the same chip , are likely to be commonplace in the future @xcite .",
    "this challenges application scientists to ensure their code is optimised to take full advantage of the hybrid architecture of a specific machine .",
    "the scale and complexity of high end hpc resources lead to users focusing on exploiting only a small subset of the resources available to them , and treating those resources as single islands of computational power",
    ".    distributed e - infrastructure @xcite has sought to simplify end user access to and use of hpc resources , by establishing a common software platform for distributed computing conducted transparently across multiple administrative domains .",
    "however , the middleware tools developed to realize the computational ` grid ' concept have not always provided the transparency and ease of use envisaged @xcite .",
    "essential to realising the vision of a distributed e - infrastructure as ubiquitous , seamless to use and as transparent as the electrical power grid , as proposed by foster _",
    "@xcite , is the broker .",
    "the broker or meta - scheduler is a component of a distributed e - infrastructure system responsible for efficiently distributing jobs between grid resources , taking into account factors such as machine load and cost models .",
    "a broker provides a point of contact between the user and the grid , placing application instances submitted by the user onto appropriate resources .",
    "the broker means that expensive hpc resources are used as efficiently as possible , ensuring that one machine is not idle while another has a large queue of jobs .",
    "subsequent to the development of grid computing has been the rise of cloud computing .",
    "cloud computing adopts many different forms , but a unifying idea behind cloud computing is that a business model is used to monetize access to compute cycles in some way , and provide access to various resources such as cpu , memory and storage ( known as infrastructure as a service clouds ) and applications ( software as a service or _",
    "saas _ clouds ) .",
    "for example , with so called infrastructure as a service ( _ iaas _ ) clouds , a user can gain access to a virtualized sever , and have complete control over that server as if it were his own machine , even though it is running in an administratively distinct domain .",
    "cloud computing is a rapidly growing area due to major strategic investments from global software players such as microsoft , amazon , google and ibm .",
    "cloud storage today is thriving , particularly due to its shared data at low cost capabilities however there are many security and legal issues in cloud computing that are yet to be resolved .",
    "typically , access to cloud resources is metered , and users must pay for the amount of cpu time or number of megabytes of storage that they use , with cloud computing users entrusting their data and software to third - party providers .",
    "cloud providers may be commercial companies selling access for profit , or academic institutions , providing access under a research funding model .    within this paper",
    ", we use the term ` distribute e - infrastructure ' to mean any computing platform which implements some or all of the grid or cloud model ; we believe that the software we describe herein is amenable to both .",
    "in the high performance distributed e - infrastructure domain , all too often the user s time is spent investigating the availability of resources , marshalling data and minding their applications . for most computational scientists using high performance computing ,",
    "distributed e - infrastructures have failed to deliver their promise of providing transparent , ubiquitous computational power on demand .",
    "this is due to a lack of both appropriate tools and ones that present the right level of abstraction to the user @xcite , meaning that it is easier for users to carry on with their existing usage patterns , as if the e - infrastructure was not there .",
    "when the user has access to more than one computational e - infrastructure , each running a different middleware stack , the problem is compounded , with the user having to learn how to use different middleware client tools to interact with the multitude of resources available to them .",
    "hpc resource providers have been chasing ever increasing machine peak performance , with several petaflops machines now commonplace .",
    "however , the end user , the so called ` application scientist ' , is less interested in the peak performance of the machine they are using ; their primary concern is the total wallclock time to solution of the scientific problem that they are working on @xcite .",
    "many strategies have been employed to try to reduce the total time to solution , although they are of course highly dependent on the nature of the problem being solved .",
    "a second concern of the user of a distributed e - infrastructure platform is the cost of running their applications , the problem of choosing a resource ( or multiple resources ) in order to perform a simulation becoming a trade - off between the total cost of running the simulation and the wallclock time to achieve a result .",
    "we believe that with the right combination of tools and services , the original concept of a distributed e - infrastructure as a provider of transparent and ubiquitous computing power can be realised . to this end",
    ", we have developed the application hosting environment @xcite , a lightweight interface layer that provides a higher level of abstraction than many other middleware tools , to allow the user to concentrate on running their applications without having to worry about the minutiae of dealing with every possible combination of compiler , architecture and queuing system .",
    "however , ahe still requires users to choose the individual machines on which to run , and does not provide capabilities to help users to minimise their time to solution .",
    "we have therefore developed a flexible decentralised workload allocation system that implements a controlled computational market place , to enable the trading of time on hpc resources and allowing the user to control the aspects of the workload that they are interested in : the cost and the time to solution .",
    "we believe that this decentralised system is more scalable than currently available resource brokering technologies and is able to more efficiently allocate work between a set of resources based on cost minimization and run time optimisation .",
    "the decentralised nature allows resources to easily join and leave the system , potentially creating dynamic virtual organisations based on aggregated resources from federated resource providers .",
    "our system is based on a combinatorial , multi - attribute reverse auction mechanism , which we describe below .",
    "we performed a user needs analysis by examining common resource usage patterns to provide a basis for the design of our resource allocation market place .",
    "key features relating to the resource allocation mechanism are that it must be user initiated , capable of allowing users to specify their requirements for an application run , and permitting users to request access to multiple resources , specifically :    1",
    ".   the process of submitting an application should be initiated by the user and done at the user s convenience , rather than at a time specified by the computational resource provider .",
    "2 .   with current systems",
    "the onus is on the user to choose the resource on which they want to run , meaning that they often choose the one they think will be able to run their job fastest , or the one they are most comfortable using . instead of requiring users to choose resources ,",
    "our system allows the user to specify requirements for their application to run , such as the time they need the results to be produced by , or the maximum cost they are willing to pay in order to run the application .",
    "3 .   users may require access to multiple resources in order to run their application .",
    "for example , for an application that consists of a simulation code and a coupled visualization engine , the user would need access to a compute resource and a visualization resource @xcite .",
    "arising from these requirements we have developed a resource allocation system based on a combinatorial , multi - attribute reverse auction , in which resource providers compete for workloads offered by users .",
    "we name this system the resource allocation market place ( ramp ) .      in order to satisfy the requirements discussed above while maintaining a focus on usability",
    ", we have placed the following constraints on our resource allocation system :    * the user should not have to configure the details of every resource that he may wish to use .",
    "the system should automatically discover suitable resources as they become available .",
    "* the user should be able to specify what he requires from a resource in order to run an application .",
    "any requirements explicitally specified must be met by the responding resource . however ,",
    "if no resource can satisfy the requirements after _ n _ rounds of bidding , a resource can make its best offer to the user . *",
    "the ramp system is accessible through the same client used to access the ahe .",
    "the user should not be concerned with any details of where or how an application is run .",
    "multi - agent systems ( mas ) and distributed e - infrastructure environments possess a number of complementary features @xcite .",
    "in addition to the agent programming paradigm , agent development environments such as jade @xcite provide a framework in which much of the software tooling required to develop agents , establish inter - agent communication and so on is already provided , much simplifying the process of developing multi - agent systems .    in the context of the reverse auction based metascheduler",
    ", multi - agent systems also bring a number of other benefits .",
    "one of the drawbacks of some of the meta - schedulers is that they rely on central information services to aggregate data from resources and maintain their world view .",
    "the obvious limitation of this approach is that scheduling decisions may be made on out of date data . in the mas approach",
    "proposed , each agent is responsible for maintaining the view over its own sphere of the world , meaning that the data used to make scheduling decisions is more current .",
    "this accords with the devolved nature of a distributed e - infrastructure , and especially federated e - infrastructures .",
    "the application of multi - agent systems to auctions discussed above shows that trading systems and economies can be successfully built from interacting software agents .",
    "this model is thus also applicable to the distributed e - infrastructure economy that is developing as commercial providers trade compute power on an open market ( badged as ` cloud ' hpc ) .",
    "finally , mas provides a software development framework featuring a high level of abstraction for building autonomous , rationally functioning software systems .",
    "the distributed nature of e - infrastructure systems coincides with the distributed , multi - agent system model of programming , and leads to the development of fault tolerant peer - to - peer systems , in which the failure of one components does not have a fatal impact on the rest of the system .",
    "this makes the mas paradigm ideally suited to develop our distributed resource allocation system . within the system",
    ", software agents can act on behalf of the different entities involved , principally users and resources .",
    "two different bdi ( i.e. one characterized by its beliefs , desires and intentions ) types of agents feature in the system :    * resource management agents , responsible for maximising the utilization of a resource .",
    "a resource agent is run on each constituent resource of the distributed e - infrastructure .",
    "it maintains a predictive model of resource availability , which it uses to decide when it is able to run a job .",
    "it can vary the cost of the offers to run jobs that it makes to encourage jobs to run when the machine is free by lowering its prices , or increasing the cost when the machine is overloaded with jobs to maximize revenue , based on a set price range configured by the resource administrators .",
    "* user agents , responsible for gaining access to resources at a cost and availability specified by the user .",
    "the user agent runs on the client machine , and negotiates with the resource management agents for the most appropriate resource to run a particular application .",
    "users provide the agent with a description of their cost and time requirements for the job ; they can either ask for the job to be run in the fastest time possible , at the least cost , or at a specified maximum cost and/or wait time .",
    "the agent s goal states consist of minimising the cost of the job , minimising the wait time of the job , or at least matching the specified requirements .",
    "the agent then initiates multiple rounds of bidding with the resource management agents until the requirements are achieved and the application is launched , or if the requirements can not be met the user is presented with the best offer received .",
    "if no offer is received , the application fails to run .",
    "the user will be able to specify both static and dynamic constraints on their job , as defined in a request for quotation language ( rfql ) schema which we have developed .",
    "in addition , a banking agent acts as a collation point for all successfully actioned requests .      the process of participating in a reverse auction requires the agents involved to communicate in a structured way .",
    "fortunately , a standardized way exists to achieve this .",
    "the foundation for intelligent , physical agents ( * fipa * ) exists to develop standards relating to software agent technologies .",
    "the standards that fipa develop provide a mechanism for software agents to be mutually understood , regardless of underlying implementation technologies .",
    "the fipa agent communication language ( * acl * ) ( * ? ? ?",
    "* pages-10 - 17 ) specifies the structure of inter - agent messages , and defines a set of _ communicative acts _ ( cas ) , performed by the act of communicating .",
    "these cas , along with a bespoke content language , allow agents to participate in a reverse auction .",
    "we define three different procedures for agents to communicate in different circumstances :    * the reverse auction negotiation - the actual negotiation process required to conduct a reverse auction . *",
    "the banking update negotiation - the process of notifying the banking agent to record a successful auction result . * the cancellation negotiation - the process of a user cancelling a request .",
    "the reverse auction algorithm developed is adapted from that described by matsuo _",
    "the auction consists on _ n _ rounds of open bidding , where all sellers can see the bids made by other sellers .",
    "as the auction must be based on multiple attributes , the user is able to specify their requirements through a request for quotation ( described in ",
    "[ sec : rfql ] ) .",
    "the auction is combinatorial , meaning that multiple units can be requested .",
    "each sub - request should be treated as a separate auction in the system .",
    "this means that an inconsistent state could result , where some parts of an overall request are successful and others are not .",
    "therefore , the auction protocol incorporates a two - phase commit process to ensure the availability of all requested resources .",
    "briefly the algorithm flow is shown in figure [ fig : auction ] , and is as follows :    1 .",
    "a user agent initiates the auction by advertising their requirements with resource agents via an rfq ( ` fipa : call for proposals ` ) .",
    "resource agents evaluate the rfq and decide whether they can satisfy the request ( or section of a request in the case of a combinatorial request ) , based on their utilization and cpu hour cost .",
    "the resource agents which can satisfy the request make bids , which are propagated to the user agent ( ` fipa : propose ` ) .",
    "if the resource agent can not accept the request , it notifies the user agent ( ` fipa : refuse ` ) 3 .",
    "the user agent evaluates the requests it has received , and stores them in a ranked list if they meet its requirements , or else rejects them to the submitting resource agent ( ` fipa : reject proposal ` ) .",
    "when the next round of bidding commences , the user agent modifies its rfq to correspond to the best offer it has so far received , which is sent to the resource agents as its revised request .",
    "steps 2 and 3 are repeated ` n ` times .",
    "4 .   after `",
    "n ` rounds of bidding , the user agent evaluates the final set of bids received .",
    "the user agent selects the most optimal bid or bids that match requirements and notifies the winning resource agents(s ) ( ` fipa : accept proposal ` ) or , if no bid or bids match the requirements , the closest matching set are presented to the user for approval .",
    "the user can also configure the system to allow manual approval of all bids . 6 .",
    "[ step : agree ] the resource agent(s ) holds a slot for the winning bid on the machine queue by creating a reservation in the queuing system , and sends an acknowledgement back to the user agent that they are willing to proceed ( ` fipa : agree ` ) along with a reservation i d for the requested slot on the relevant resource . if the resource agent can not now satisfy the request ( because more jobs have been queued on the system in the meantime for example ) , the agent withdraws from the auction ( ` fipa : refuse ` ) .",
    "this is the _ voting phase _ of the two - phase commit .",
    "the user agent works through all offers received until all parts of the request have been agreed to . where a winning bid is subsequently refused",
    ", the user agent contacts the next best bid and so on until all available bids are exhausted .",
    "if all sections of a request are agreed to , the user agent notifies all successful resource agents ( ` fipa : confirm ` ) and sends a digitally signed copy of the rfq and the reservation i d back to the resource agent , signed using the user s personal x.509 credential .",
    "this establishes that the user has agreed to the reservation .",
    "the resource agent acknowledges this message ( ` fipa : confirm ` ) .",
    "this is the ` commit phase ` of the two - phase commit .",
    "if all sections of a request can not be agreed to , the user agent cancels all requests received ( ` fipa : cancel ` ) . 10 .",
    "when a resource agent receives the ( ` fipa : agree ` ) message ( step [ step : agree ] ) and creates a reservation slot in its queuing system , it begins a timer process .",
    "if the resource agent does not go on to receive a ( ` fipa : confirm ` ) message within a given time period , it cancels the reservation slot in the queue .",
    "this is the protocol employed by the user and resource agents to negotiate access to computational resources at user specified time periods .",
    "the sequence of fipa operations are shown in figure [ fig : reverse ] .",
    "this protocol is used to inform the banking agent that a request has been successfully fulfilled .",
    "after a successful negotiation , the resource agent proceeds as follows :    1 .",
    "the resource agent takes the signed message from the user agent , containing the rfq and reservation i d , and digitally signs it itself , using its own certificate .",
    "2 .   the resource agent sends this signed document to the banking agent ( ` fipa : request ` ) .",
    "3 .   the banking agent confirms the digital signatures applied to the message to establish that the veracity of the message , and then debits the user s account in accordance with the request and credits the resource s account commensurately .",
    "it then notifies the requesting resource agent ( ` fipa : agree ` ) .",
    "if the banking agent can not validate either signature , it responds to the requesting resource agent with ( ` fipa : refuse ` ) .",
    "the sequence of operations is shown in figure [ fig : notify ] .",
    "if a user needs to cancel a reservation once made , they can do so through the ramp system .",
    "if the resource agrees to the cancellation , the user s account will be re - credited with the cost of the resource slot .",
    "as we discussed earlier , the overriding concern of the hpc e - infrastructure user is the time to solution for the problem that she is working on , with a further concern of how much the application will cost to run . our task is to identify the terms which a user needs to specify her requirements from a machine in order to run her application , and to capture these terms in a request for quotation language ( rfql ) which provides a standard way of requesting quotations to run applications from resources .",
    "since the ahe takes care of maintaining information such as which resources have which applications installed , the rfql need not contain terms to specific to the instantiation of an application the user wants to run ( such as the location of a binary ) ; instead it need only contain the terms required to describe requirements from a machine to run the application .",
    "our language also needs to contain terms to allow the user to specify cost and deadline requirements , and aspects that might affect the performance of the application , such as operating system running on the resource , the maximum ram available , or the cpu ( or gpu ) architecture .",
    "the terms used in our rfq language are described below :    * * cpuhourcost * - the maximum cost per core hour that the user is prepared to pay in order to run her application . *",
    "* enddate * - the date by which the user requires her application run to be complete . *",
    "* endtime * - the time by which the user requires her application run to be complete . * * startdate * - the time after which the user needs her application ( or workflow component ) run to start .",
    "this is useful if the application run is part of a workflow and depends on a previous application run completing before it is able to start . *",
    "* starttime * - the time at which the user needs her application to start .",
    "* * operatingsystem * - the operating system that the user requires the grid resource to be running . *",
    "* osversion * - the version of the operating system that the user requires the execution resource to be running .",
    "* * architecture * - the cpu / gpu architecture that the user requires the execution resource to consist of . * * cpuspeed * - the minimum cpu / gpu speed that the user requires of her target resource . * * walltime * - the maximum time that the application will run for . * * totaldiskspace * - the total disk space that the user needs to be available in order to run her application ( this term and the nodediskspace term are mutually exclusive ) . *",
    "* nodediskspace * - the total disk space available on each compute node ( this term and the totaldiskspace term are mutually exclusive ) . * * internodebandwidth * - the minimum network bandwidth that the user requires between the nodes on the target resource . * * rampercore * - the minimum amount of ram that the user requires to be available per compute core . *",
    "* totalcores * - the total number of compute cores that the user needs to have access to ( this term and the nodecount / nodecores terms are mutually exclusive ) . *",
    "* nodecount * - the number of compute nodes that the user requires access to ( this term and the totalcores term are mutually exclusive ) . *",
    "* nodecores * - the number of cores per node that the user requires access to ( this term and the totalcores term are mutually exclusive ) .",
    "these terms are expressed using xml syntax , formally defined by an xml schema .",
    "several of the attributes are required in each instance of rfql : cpuhourcost , enddate , endtime and either totalcores or both nodecount and nodecores .",
    "the other attributes are optional , and it is assumed that the user is not interested in making a decision based on any attribute which is not specified .",
    "if an attribute is present , a resource must be able to satisfy it before responding to the rfq .",
    "the schema allows for multiple requests to be made within a single rfql document , meaning that a user can request a combination of resources in order to perform a workflow , or run a highly distributed application .",
    "no formal mechanism is provided to specify dependencies between individual requests , but the starttime and startdate terms allow the user to request resources sequentially in time . in this way , the user is able to specify complicated advanced ( co-)reservations for time on one or more resources .    the approach we have taken with rfql is to define a small vocabulary that captures the computational requirements that the user is interested in .",
    "this compares with the condor classads approach , which allows users and resource providers to define arbitrary terms in the job descriptions .",
    "we believe that our small , well defined vocabulary is the correct approach to take here , as it aids system development and improves the likelihood of request / resource matching . we do not expect users to code rfql by hand , but instead generate documents automatically through our interface tooling .",
    "an rfq , plus a response from a resource that satisfies the request , constitutes a contract between the user and the resource to allow the user access to the specified number of processor cores on the resource , for the specified period of time .",
    "it can be considered a dynamic service level agreement ( sla ) to provide a specific , one time service to a user at a defined cost .",
    "enforcement of the sla is beyond the scope of this paper however .",
    "we used the agent specifications and communication protocols , along with the request for quotation notation , to implement a multi - agent system in java using the jade framework .",
    "jade was chosen because it provides a distributed agents platform , supports coordination between different fipa compliant agents and provides a standard implementation of the fipa - acl communication languages .",
    "agents can be quickly constructed by extending the ` jade.core.agent ` class .",
    "the capabilities of the agent are then defined by implementing behaviour classes which extend subclasses of the ` jade.core.behaviours.behaviour ` .",
    "below we review the three agent types we have defined , and discuss the implemented behaviours that provide their capabilities .",
    "as mentioned , the user agent is responsible for purchasing resources on the instruction of its owner .",
    "each user has a single user agent to manage their requests .",
    "since it initiates and manages the auction process , it is the most complicated agent , comprising the greatest number of behaviours .",
    "the hierarchy of behaviours is shown by the class diagram presented in figure [ fig : useragent ] .",
    "* ` requestaquote ` : this behaviour is responsible for taking user requests in the form of rfq documents , translating them to the inter - agent communication ontology used by the ramp system and imitating and managing the rounds of bidding in the auction",
    ". the number of rounds and intervals between rounds are user configurable parameters . * ` requestmanager ` : the behaviour is used by the ` requestaquote ` behaviour to manage the individual rounds of bidding .",
    "it extends ` jade.core.behaviours.tickerbehaviour ` to trigger an event ( another bidding round ) at set time intervals . *",
    "` processoffers ` : this behaviour processes offers received from resource agents during the bidding process , and is responsible for sorting the offers received .",
    "a simple sorting algorithm is used , sorting first on cost , then deadline , then the order offers are received in . * ` resourcenotifier ` : this behaviour executes once the ` requestaquote ` behaviour completes , and is responsible for finalising the purchase of the resources requested .",
    "it implements the two phase commit required to ensure consistency when purchasing multiple units in an auction through two sub behaviours : * * ` phaseonebehaviour ` : this behaviour implements the _ voting phase _ of the two phase commit , instructing successful resources that the user would like to accept their offer , and processing confirmations or rejections from those resources . * * ` phasetwobehaviour ` : this behaviour implements the _ commit phase _ of the two phase commit , confirming the offer acceptance if all required resources are available , or cancelling the transaction if not . * ` renegotiatebehaviour ` : this behaviour is used by the user agent to initiate the cancellation procedure .",
    "the user initiates resource auctions by passing the user agent one or more rfq documents . to simplify this process",
    ", the user agent provides a graphical user interface , shown in figure [ fig : rampgui ] .",
    "this gui allows the user to load rfq documents , initiate and monitor auctions , and also view and manage purchased resources .",
    "each resource that participates in the resource allocation market place runs a resource management agent , which is responsible for responding to requests for quotation and negotiating the sale of cpu / gpu time . in order to do this ,",
    "the resource agent implements four distinct behaviours , shown in figure [ fig : resourceagent ] and described below :        * ` rfqresponseserver ` : this behaviour listens for requests for quotations made by user agents , evaluates those requests and then either submits an offer in response to the request , or else declines to participate . * ` purchaseordersserver ` : this behaviour listens for the acceptance of offers from user agents .",
    "when an offer is accepted , this behaviour creates a tentative reservation within the machine s queuing system to correspond to the offer . if the requested resource is no longer available , this behaviour declines the acceptance of the offer .",
    "it implements the voting phase of the two phase commit protocol on the resource agent side . * ` finaliseserver ` : this behaviour listens for messages from the user agent confirming the finalization of an offer .",
    "when an offer is finalized , it stops the time out set on the queue reservation , locking it in .",
    "it implements the commit phase of the two phase commit protocol on the resource agent side .",
    "once an offer is fully confirmed , this behaviour is responsible for initiating the reservation notification protocol described in section [ sec : notification ] . * ` cancelserver ` : this behaviour provides the cancellation capabilities .",
    "the resource agent maintains an internal representation of the resource that it manages in order to be able to respond to request for quotation .",
    "obviously , the resource must know details of the resource in terms of the cpu / gpu types available , memory per node and so on .",
    "the administrator of the resource therefore configures these static properties via a configuration file , prior to running the resource agent .",
    "these static properties correspond to the terms of the rfq specification ( _ cf .",
    "_  [ sec : rfql ] ) , but exclude the two dynamic properties relating to price and time , which the resource agent derives from the queuing system .",
    "note , we consider a resource to be made up of homogeneous compute nodes , although this does not always conform to reality , whereby a large hpc system could be made up of cpus / gpus / nodes with different speeds , nodes with different memory sizes and so on .",
    "systems that comprise heterogeneous architectures can be supported by running multiple instances of the resource agent , one for each distinct part of the machine .",
    "the resource agent will examine each rfq that it receives , and then decide whether to make an offer or not . evaluating",
    "a request involves two steps :    1 .",
    "first , the resource agent checks the static terms of the request ( such as the requested cpu type ) against its internal resource model .",
    "if the resource can not satisfy the this part of the request , then the resource declines the offer to participate .",
    ", the resource agent examines the current load on the resource . if sufficient free cpus exist at the point in time that they are required , the resource agent calculates an offer price ( see below ) , checks that this offer price meets the request , and then makes an offer .",
    "the resource agent must interact with the resource it manages to obtain a view of system utilization which can be used to respond to requests for quotation , and generate offer prices for those responses .",
    "the default implementation interfaces directly with the queuing system to obtain a measure of the load on the resource ( in terms of available cpus ) at the point in time when the requested job must be satisfied . while providing an adequate model of system usage ,",
    "the default queuing system is not without its drawbacks , in that when examining the queuing system to evaluate future availability , it makes calculations based on the wall time specified by the user for each running job .",
    "often , a user will use the system default wall - time , meaning that a job could finish long before the queuing system expects it to .",
    "obviously , the queuing system copes with this by running the next job in the queue , but this can lead to situations where the resource agent expects the system to be unavailable when it is not .",
    "however , the resource agent features a plug - in architecture that allows the resource administrators to substitute an alternative resource interface where available .",
    "for example , a resource administrator could implement an interface that queries a resource availability modelling service , such as the qbets batch queue prediction service @xcite .",
    "the qbets service can be used to predict a statistical upper bound on how long the job is likely to spend waiting in the queue prior to execution and given the job characteristics and a start deadline , can calculate the probability that the job begins execution by the deadline .",
    "the resource agent can then use this information to make offers , rather than relying on the basic queuing system interface .",
    "the resource agent is responsible for setting the offer price made to resource requests coming from user agents .",
    "the price offered is varied based on the load on the machine at the time the job must be run .",
    "if the machine is lightly loaded , the resource makes a low offer , in order to attract more work to the machine .",
    "if the resource is heavily loaded , the machine offers a higher price , or if it is saturated , refuses to participate in the auction at all .",
    "these prices depend on two resource administrator defined parameters , the ` start price ` and the ` minimum price ` .",
    "as its name suggests , the minimum price is the lowest price a resource agent will ever offer in an auction .",
    "these values are used to calculate the decrement by which the request is reduced by the resource when making an offer , according to the following formula    @xmath0    where @xmath1 is the starting price , @xmath2 is the minimum price , and @xmath3 is the percentage of the machine that will be allocated at the time the job is to be run , expressed as a decimal .",
    "although the number of bidding rounds is controlled by the user agent , the resource agent anticipates that there will be multiple bidding rounds using the @xmath4 parameter , so that the total decrement is not applied in one go , but gradually over several bidding rounds .",
    "this gives a value to decrease the request price by , @xmath5 , which results in a bespoke spot price for the resource at a given point in time and in response to a user s request .",
    "the banking agent is tasked with recording transactions between users and resources , and can provide an overview of the overall system of resource trading . to do this",
    "it implements three behaviours , described below :    * ` transactionupdatebehaviour ` : this behaviour listens for and processes update messages from the resource agents on the completion of successful transactions , to update the internal balances of resource and user agent . * ` cancellistenerbehaviour ` : this behaviour listens for and processes cancellation messages , and notifies both user and resource agent when the cancellation is complete .",
    "* ` balancerequestbehaviour ` : this simple behaviour can provide a user or resource with a statement of their balance on receipt of a digitally signed request .",
    "in order to verify the digital signatures appended to transaction update messages , the banking agent maintains a record of the public key of participants in the market place .",
    "this is done when accounts are credited be the banking agent administrator . within the ramp system ,",
    "a standard virtual currency is used .",
    "the banking agent is designed and implemented as a technical way to keep track of deals made between users and resources , but it is not intended to answer the policy questions that address how usage of resources is reconciled with real - world cash payments , which is beyond the scope of this paper .",
    "some of those policy questions relate to how the currency used in the system converts to real world currencies , how deals are enforced , and how overdrafts can be dealt with , and provide a rich and interesting vein of future work . within a production system , we envisage that one or more banking agents will be run by an independent , trusted third - party .",
    "peer to peer ( p2p ) systems are recognized as a way of building large , scalable distributed systems . like distributed e - infrastructure systems ,",
    "they have evolved as a way to share resources across administrative domains , but do so from a very different starting point and with very different requirements , in terms of security and availability @xcite .",
    "a key feature of the ramp system compared to other resource brokering / meta - scheduling systems is that there is no central service in overall control of the system . in effect , the resource agent and the user agent are peers in a peer to peer system , and connected together by a p2p network infrastructure .",
    "this means that ramp can leverage many of the benefits of p2p systems such as dynamic participation ( which may encourage more resource owners to devote some or all of their resource to the distributed e - infrastructure when the utilization falls below a certain level ) .",
    "resilience is a key requirement of the ramp system .",
    "many distributed scheduling systems rely on a single broker component , which results in a single point of failure which can render the whole system unusable .",
    "the jade development environment allows agents to be distributed across a network of machines and incorporates p2p network features to boost system stability and resilience .",
    "the key jade feature utilized by ramp is the _ main replication service_. all jade agents run within a _ container _ which provides basic agent communication and management capabilities .",
    "jade requires a _ main container _ to act as the control point for the distributed agent system .",
    "the main replication service allows the main container functionality to be replicated amongst a ring of containers , to which normal containers connect . in the ramp system",
    ", each resource agent runs in a replicated version of the system s main container .",
    "user agents run in normal containers ; a user agent s container can connect directly to any resource agent s main container and , via container replication , have access to all resource agents in the system .",
    "in addition , when a new resource agent connects to the system , in needs only connect to one of the main containers to join the whole market place .",
    "the jade _ address notification service _",
    "runs within all the containers in the system .",
    "it monitors agents and therefore containers entering and leaving the system , and reconfigurs the network accordingly . in this way , if one of the main containers crashes or otherwise exits the system , all of the user agent containers connected to that main container are reconfigured to automatically connect to another main container , and the connections in the main container ring are suitable adjusted .",
    "the fipa agent communication language terms discussed in section [ sec : protocol ] define the basic semantics of how agents interact in a fipa compatible multi - agent system .",
    "however , these basic actions do not cover the full , rich lexicon which agents need to possess in order to implement the negotiation protocols described earlier . within fipa compliant agents , ontologies",
    "are used to represent the set of concepts and symbols that agents need to communicate about .",
    "this standard method of inter - agent ` language ' based on a well defined ontology allows agents implemented using different software environments to be mutually intelligible .    in the ramp system",
    ", agents primarily need to communicate about requests for quotations .",
    "therefore we have developed an ontology that allows agents to communicate based around the terms of the rfql syntax described above . within jade , this is realized as a series of java classes that extend the ` jade.content.onto.ontology ` class , with each class corresponding to different ontological terms .",
    "ahe and ramp are independent systems , but are designed to closely interoperate .",
    "ahe provides a persistent job launching and execution management service .",
    "ramp provides a market place in which compute cycles can be traded between users and resources .",
    "the ahe is pre - configured with details of the applications which the user can run , and the static set of resources on which the applications are installed .",
    "this is in contrast to the condor approach , which stages application binaries to resources before they are run .",
    "the parallel mpi applications which the ahe was designed to run are often difficult to compile and need an expert user or system administrator to optimize them for a particular machine architecture , which makes binary staging impractical .",
    "the ramp system is designed to manage resource allocation across a set of high performance compute ( or cloud ) resources .",
    "deploying the system across such a set of resources in order to evaluate the performance and capabilities is impractical , since root access could be required to install tools that interact with the queuing system , machines could be taken down for maintenance periods and so on .",
    "therefore , we found it practical to develop a simulation environment which would allow us to evaluate ramp without the external difficulties inherent in using a production hpc e - infrastructure .",
    ".parallel workload archive project log files used in the simulation environment .",
    "[ cols=\"^,^,^,^,^ \" , ]      selecting optimal configuration parameters for a resource is a complex task . as figure",
    "[ fig : exp1-pricerange ] shows , offers made by a resource will roughly fall between the start and minimum prices set of the resource .",
    "however , the minimum price is seemingly the most important parameter ; where the mean price is set at a level comparable to other resources in the system , the mean offer price will usually be comparable to those other resources too , and somewhat higher than the minimum price .",
    "however , setting a high starting price will increase the attractiveness of the resource by increasing the amount which the resource is willing to reduce its offers by while bidding . in summary , to avoid being outbid and to increase the chance of auction success , a resource owner should try to set a minimum price around the same level to other resources in the system , but a high starting price .",
    "as we see from figure [ fig : exp3 - 1 ] and table [ tab : exp3results ] , as the number of auction rounds used by the user agent increases , the final offer price accepted is reduced , with a tail off at five rounds , suggesting that users wanting to optimize the price they pay for auction units could do so by running auctions with five bidding rounds . however , as the number of auction rounds increases , so does the time taken to complete the auction .",
    "this scales linearly with the number of auction units , as is to be expected since auction rounds are of a fixed duration .",
    "users must take into account this trade - off when initiating multi - round auctions .",
    "our multi - unit auction system is , we believe , unique , but it is also important that it is usable .",
    "a key aspect of usability is the responsiveness of the system .",
    "it is important that the ramp system responds well to user requests , and scales both with the number of units an individual is requesting ( in a multi - unit auction ) and with the number of simultaneous users of the system . to assess this performance , we conducted two investigations into system scalability :    * * investigation 1 * : we measured the performance of the system in terms of auction duration as the number of request units within a combinatorial reverse auction increase . * * investigation 2 * : we measured the performance of the system in terms of auction duration and average system response time as the number of user agents participating in the system increases . * * investigation 3 * : to assess the impact of network performance on a the responsiveness of a real - world deployment of ramp , we repeated investigation 2 with our resource agents deployed across a network of machines .      using the simulation environment outlined in table [ tab : exp2setup ] we sequentially submitted requests via a single resource agent in order to investigate how performance increases with the number of auction units . with each submission",
    "the number of units within the request increased , meaning the terms within the combinatorial reverse auction increased .",
    "the simulation environment was run on a single workstation to eliminate disruptions caused by network problems , with a separate resource agent for each simulated resource .",
    "runs were performed for auctions with 1 to 25 units ( the deadline and price of each unit was randomly generated ) , and the whole set of runs was repeated one hundred times , and mean response times calculated .",
    "the user configurable auction round duration parameter was set to five minutes , so that we could measure round duration without the auction ending .",
    "the times taken to complete bidding rounds , negotiate the final auction agreement , and the total time taken for the auction to complete are displayed in figure [ fig : exp2 ] .    to assess how the system performs when multiple individual users are using it , we performed an experiment using the simulation environment outlined above , whereby we ran multiple user agents simultaneously , each making a single unit request .",
    "we ran from 1 to 30 user agents consecutively , and repeated each run three times then calculated mean response times .",
    "again , the user agents were configured with a maximum bidding round duration of five minutes , so that auction rounds would not time out before all resource agents had been able to respond .",
    "0.5        0.5     we measured the mean time taken for a resource agent to respond to an individual request ( shown in figure [ fig : exp4 - 1 ] ) and how the number of competing agents within the system affects the duration of an auction ( shown in figure [ fig : exp4 - 2 ] ) . in real world applications ,",
    "the ramp system is intended to be deployed across a network of hpc class resources .",
    "our performance tests so far have only measured performance with ramp deployed using our simulation environment on a single machine . to ensure that network effects will not adversely affect the performance of the system",
    ", we repeated our tests on network deployment of ramp .",
    "the system was deployed across 15 networked servers . in a real world deployment",
    "we expect that ramp would be deployed across an internet wide set of hpc resources .",
    "the impracticalities of securing access to such resources in order to carry out our performance tests led to us deploying a system with 10 servers located within the centre for computational science research lab in university college london , with additional resource agents deployed at cineca ( italy ) , cyfronet ( two agents ) and psnc ( both poland ) , university of sheffield ( uk ) .",
    "the resource agents used the first 15 resource configurations listed in table [ tab : exp2setup ] .",
    "0.5        0.5     we repeated the previous investigation , running between 1 and 30 user agents simultaneously and measuring the impact of doing so on the mean time taken for a resource agent to respond to an individual request ( shown in figure [ fig : exp7 - 1 ] ) and how the number of competing agents affects the duration of an auction ( shown in figure [ fig : exp7 - 2 ] ) .",
    "as we see from figure [ fig : exp2 ] , the duration of the bidding rounds in an auction scales linearly with the number of units in an auction .",
    "this is to be expected , since the duration of the auction is increased by the number of requests the user agent has to make .",
    "surprisingly , the time taken to negotiate the auction does not increase with the number of units .",
    "adding an additional unit only adds a couple of seconds to the overall duration of the auction so this is unlikely to be of too much concern to the user .",
    "as the number of simultaneous users using the system increases , the responsiveness of the resource agents scales linearly , as we see from figure [ fig : exp4 - 1 ] .",
    "however , as shown in figure [ fig : exp4 - 2 ] , the time taken to complete an auction increases steeply with the first ten simultaneous users of the system , and then tails off as the number of users increases .",
    "the tailing off is well below the maximum auction duration we configured in the system , so we are not seeing the effect of this parameter .",
    "it is unclear why figure [ fig : exp4 - 2 ] is so shaped , and further work is required to understand the observations presented here . on the whole , the results we have obtained indicate that our system shows good responsiveness and scalability as both the number of auction units and number of users increase . when repeated using resource agents deployed across a network of hosts ( approximating a real - world deployment of ramp ) we found that the effects of the network did not have a significant impact on performance and similar scaling characteristics were obtained , although there was greater variance in the results obtained .",
    "we believe that distribute e - infrastructure platforms ( clouds and grids ) currently suffer from usability issues that prevent them from being exploited in a systematic fashion . to help improve usability ,",
    "we have developed ahe , a tool to allow users to focus on applications rather than machines .",
    "however , this does nothing to improve the users total time to solution , and hence needs to be coupled with a resource allocation mechanism .    in this paper we have presented our investigations into the performance and capabilities of our ramp resource allocation platform .",
    "we have shown that the system is capable of successfully allocating workloads to computational resources , optimising the price that the user pays and selecting the most attractive resources from the set of available machines .",
    "the decentralized nature of the system means that it does this without incurring the overheads and failure points present in a centralized brokering system where a single component is responsible for allocating jobs throughout a distributed e - infrastructure .",
    "our system shows good performance and scalability , even when deployed across a wides area network of machines .",
    "the ability of users to control the number of and duration of bidding rounds means that they can minimize the price they pay while at the same time placing an upper bound on the time taken to achieve a result .",
    "the next step we plan to take is to evaluate our ramp system formally , by conducting a usability study using real users , on a deployment of ramp across a production e - infrastructure .",
    "the work described herein has been funded by epsrc under the realitygrid project ( gr / r67699 ) , the eu fp7 _ vph - share _ ( no 269978 ) , _ vph - noe _ ( no 223920 ) , _ mapper _ ( no 261507 ) and _ compat _ ( no 223979 ) projects , the epsrc _ rapid prototyping of usable grid middleware _",
    "( gr / t27488/01 ) grant , and also by omii under the managed programme _ robust application hosting in wsrf::lite ( rahwl ) _ project .",
    "s.  j. zasada , m.  mamonski , d.  groen , j.  borgdorff , i.  saverchenko , t.  piontek , k.  kurowski , and p.  v coveney .",
    "distributed infrastructure for multiscale computing . in _ proceedings of the 2012 ieee / acm 16th international symposium on distributed simulation and real time applications _ , pages 6574 .",
    "ieee computer society , 2012 .",
    "i.  foster , n.  r.  jennings , and c.  kesselman .",
    "brain meets brawn : why grid and agents need each other . in",
    "_ proceedings of the third international joint conference on autonomous agents and multiagent systems - volume 1 _ , pages 815 .",
    "ieee computer society , 2004 .",
    "s.  j  .chapin , w.  cirne , r.  g.  feitelson , j.  patton jones , s.  t.   leutenegger , u.  schwiegelshohn , w.  smith , and d.  talby .",
    "benchmarks and standards for the evaluation of parallel job schedulers . in _ job scheduling strategies for parallel processing _ , pages 6790 .",
    "springer , 1999 ."
  ],
  "abstract_text": [
    "<S> computer simulation is finding a role in an increasing number of scientific disciplines , concomitant with the rise in available computing power . realizing this inevitably requires access to computational power beyond the desktop , making use of clusters , supercomputers , data repositories , networks and distributed aggregations of these resources . accessing one such resource entails a number of usability and security problems ; when multiple geographically distributed resources are involved , the difficulty is compounded . </S>",
    "<S> this presents the user with the problem of how to gain access to suitable resources to run their workloads as they need them . in this paper </S>",
    "<S> we present our solutions to this problem , a resource trading platform that allows users to purchase access to resources within a distributed e - infrastructure . </S>",
    "<S> we present the implementation of this resource allocation market place as a distributed multi - agent system , and show how it provides a highly flexible , efficient tool to schedule workflows across high performance computing resources .    grid computing , cloud computing , brokering , multi - agent systems , hpc </S>"
  ]
}