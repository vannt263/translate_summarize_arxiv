{
  "article_text": [
    "pattern recognition is the identification of structures or regularities in data .",
    "problems requiring a pattern recognition solution occur in all areas of scientific research and our everyday lives .",
    "this document describes the implementation of the pandora software development kit ( sdk ) , which aims to ease the process of designing , implementing and running pattern recognition algorithms .",
    "the pandora sdk was created to address the problem of identifying energy deposits from individual particles in fine granularity detectors in high energy physics ( hep ) .",
    "the ideas described in this document are , however , actually quite generic , covering a wide array of problems where the aim is to sort points in time or space into higher - level structures .",
    "figure [ fig::exampleproblems ] illustrates two typical pattern recognition problems in hep . figure [ fig::exampleproblemlc ] shows the simulated detector response to the production and hadronic decay of higgs and z bosons following high energy @xmath0 collisions at the compact linear collider ( clic ) . in order to extract measurements of the higgs boson properties , such as its coupling strengths , it is vital to reconstruct and classify the individual particles in large samples of events . figure",
    "[ fig::exampleproblemlar ] shows the simulated response of a liquid argon time projection chamber ( lar tpc ) to a charged current electron neutrino interaction . in order to understand neutrino mixing and cp - violation in the neutrino sector , it is crucial to identify and characterise each particle in this challenging topology .",
    "the idea underpinning the pandora sdk is that the interfaces for pattern recognition problems are well defined , as are the operations that must be performed by pattern recognition algorithms .",
    "whoever poses the pattern recognition problem must specify the building - blocks , or space - points , that define the problem .",
    "they must also be able to extract the output structures , such as clusters , that represent the solution .",
    "the algorithms that address the problem must be able to build clusters of space - points and should be able to manipulate clusters by splitting them up or merging them together .",
    "what differs between pattern recognition problems is the precise logic controlling the algorithm operations .",
    "the pandora project began in 2007 to provide the first particle flow calorimetry implementation for the proposed international linear collider ( ilc ) .",
    "a particle flow algorithm was developed , exploiting the fine granularity detectors in order to reconstruct the paths of individual visible particles .",
    "successful identification of the trajectories allows particle four - momenta to be extracted from the subdetector system in which they are best - measured , delivering unprecedented jet energy resolution .",
    "the pandora algorithm was used to perform the first systematic study of the potential of this approach to calorimetry at a high energy lepton collider@xcite .",
    "the original pandora algorithm demonstrated sophisticated pattern recognition ideas , but , in software - engineering terms , was only a proof - of - principle implementation .",
    "it was decided to develop a fully - featured software framework for pattern recognition algorithms and to reimplement the ilc particle flow approach in this new framework .",
    "this significant software - engineering project took place in 2009 - 2010 and resulted in the first versions of the pandora sdk and pandora linear collider content library .",
    "new algorithms were subsequently added to extend the pattern recognition functionality to higher energies , such as those relevant to the multi - tev lepton collider , clic .",
    "pandora was then used to provide the event reconstruction for the physics analyses described in the ilc technical design report@xcite and the clic conceptual design report@xcite .",
    "the performance of particle flow calorimetry at clic was characterised in detail@xcite .",
    "the pandora sdk was designed to be applicable to multiple pattern recognition problems .",
    "most recently , in 2013 - 2015 , a new library of pandora algorithms was developed to address the problem of particle reconstruction in the challenging event topologies seen in lar tpcs@xcite .",
    "this problem is very different to that originally tackled for the ilc , but the functionality required from the pattern recognition software framework remains exactly the same .",
    "the pandora sdk aims to provide a robust , reliable and easy - to - use environment for developing and running pattern recognition algorithms .",
    "its application programming interfaces ( apis ) are designed to create an environment in which :    * it is easy for users to provide the building - blocks defining a pattern recognition problem . *",
    "the logic required to solve pattern recognition problems is cleanly implemented in algorithms . * all operations to access or modify building - blocks , or to create new structures , are requested by algorithms and performed by the pandora framework .",
    "this design strategy is well - suited to an approach using large numbers of decoupled algorithms , each of which carefully address specific event topologies , typically controlling the merging or splitting of clusters .",
    "the pandora sdk consists of a dependency - free c++ library and carefully - designed apis .",
    "it provides a comprehensive event data model ( edm ) for managing pattern recognition problems .",
    "instances of objects in the edm are owned by pandora manager classes .",
    "the instances are stored in named lists and the managers are able to create new objects , delete objects , create and save new lists and move objects between lists .",
    "they provide a complete set of low - level operations that allow high - level operations requested by pattern recognition algorithms to be satisfied .    to use the pandora sdk ,",
    "a user must create a pandora client application .",
    "this provides the input building - blocks to describe the pattern recognition problem and receives the final output . the pattern - recognition logic is implemented by pandora algorithms , which ask the pandora sdk to provide services in order to create new objects or make any changes to existing instances .",
    "sophisticated visualisation and tree - writing monitoring functionality is available for use by algorithms .",
    "figure [ fig::pandorasetup ] illustrates the typical setup for addressing pattern recognition problems with the pandora sdk . with this setup in mind",
    ", this document will describe the key aspects of the pandora sdk in detail .",
    "the software setup for addressing pattern recognition problems using the pandora sdk.,scaledwidth=45.0% ]",
    "the pandora edm provides a mechanism for managing data describing pattern recognition problems and their possible solutions .",
    "it consists of a set of classes representing the input building - blocks for a problem and the structures that can be created using these building - blocks .",
    "a successful edm provides a well - defined development environment for pattern recognition algorithms .",
    "it also allows for independence of the algorithms , which can only communicate via the edm .",
    "algorithms are then successfully encapsulated and can be developed and maintained independently . an algorithm can be implemented to merge together clusters in close proximity , for instance , without needing to know anything concerning the construction of the clusters .",
    "the pandora edm aims to be self - describing , which is to say that each object provides all the information required to allow investigation and processing by pattern recognition algorithms .",
    "this enables pandora to be a reusable software solution , completely isolating the pattern recognition algorithms from the details of the software framework and i / o mechanism used to create or read the input building - blocks .",
    "the building - blocks for pattern recognition in the pandora sdk are as described below . these are pandora  input objects \" and",
    "are typically all created by the pandora client application before the pattern recognition algorithms are called ( see section [ sec::clientapp ] ) .",
    "these objects are completely defined when they are created and their properties can not be changed by the algorithms .",
    "the objects are instead used to build new constructs , termed  algorithm objects \" .",
    "the pandora sdk monitors the usage of all the input objects to ensure that no double - counting can occur , with no input object being used to create multiple algorithm objects .    *",
    "* calohit * the primary building - block for pattern recognition problems , a calohit defines a position and extent in space and time , together with an associated intensity or energy measurement . whilst calohits can represent points in free space",
    ", they can also provide information regarding their location in a particle detector .",
    "this includes details of the subdetector system in which energy was deposited and information about the calorimeter readout and geometry .",
    "the calohits hold estimators for the electromagnetic energy or hadronic energy associated with the space - point .",
    "it is for algorithms to select the appropriate energy estimator . *",
    "* track * continuous trajectories of well - defined space - points are represented by track objects .",
    "these are helix parameterisations of the space - points , providing details of particle positions and momenta ( track states ) along the trajectory .",
    "these objects were originally designed to represent tracks reconstructed in fine granularity , low material - budget tracking systems in particle detectors . as such , key information provided by pandora track objects include impact parameter details and a projected track state at the surface of the detector calorimeters .",
    "tracks can have parent - daughter and sibling relationships in order to fully - describe particle interactions and decays that can occur within a tracking detector . * * mcparticle * primarily for development purposes , mcparticles can be provided for access by the pattern recognition algorithms .",
    "these provide full details of the true pattern recognition solution for simulated events .",
    "mcparticle instances can have parent - daughter links and can fully describe particle decay cascades in simulated interactions .",
    "the mcparticles can store details of their association ( in terms of e.g. true energy deposited ) with each calohit and track . using mcparticles",
    ", it is possible for algorithms to cheat some , or all , aspects of the pattern recognition , allowing a wealth of development and debugging functionality .",
    "the pandora algorithm objects represent the higher - level structures created in order to solve pattern recognition problems .",
    "the pandora sdk carefully manages the allocation and manipulation of these objects and all non - const operations can only be requested by algorithms via the pandora apis .",
    "the pandora sdk is then able to perform the memory - management for the objects .    *",
    "* cluster * the main working - horse for pattern recognition algorithms , a cluster is a collection of calohits .",
    "it also provides derived information describing the combined properties of the calohit collection , such as energy estimators and the results of linear fits to the calohit spatial positions .",
    "the most typical tasks for pandora algorithms will be to create new clusters from lists of input calohits or to read lists of input clusters and selectively split or merge some clusters . * * vertex * the identification and classification of a specific point in space , vertices are typically used to flag positions of particle creation or decay .",
    "* * particleflowobject * a container of clusters , tracks and vertices , together with metadata describing the particle type and four - momentum .",
    "the particle flow object ( pfo ) is the ultimate output of the pattern recognition , grouping the input objects into structures that completely define the solution .",
    "pfos can have parent - daughter links in order to describe particle decay hierarchies .",
    "instantiation of objects in the pandora edm follows a design pattern that provides a clean and simple interface .",
    "object creation is typically requested by a client application ( input objects ) or an algorithm ( algorithm objects ) .",
    "the calling function must create a local instance of a pandora parameters object .",
    "there is one parameters class for each type of pandora object , each having public member variables to which values must be assigned .",
    "for instance , a pandoraapi::calohit::parameters instance will have public member variables such as the calohit position ( three - vector ) and dimensions .",
    "the calling function must assign to each of the member variables , then call the create api .",
    "failure to assign to any member variable in the parameters instance will lead to failure of the object creation .",
    "successful assignment will allow the pandora sdk to create the required object instance .",
    "the newly created instance is owned and managed by the pandora sdk , but can be accessed and manipulated by algorithms , as described in section [ sec::managers ] .",
    "it is possible , for advanced users of the pandora sdk , to add additional functionality to the base objects in the pandora edm .",
    "the user can inherit from the pandora base class for the relevant object .",
    "the user may also want to add additional content to the relevant parameters class and can also define a new class inheriting from the base parameters .",
    "the key step is for the user to provide an object instantiation factory , inheriting from the objectfactory template base class , to perform the actual object creation .",
    "the pandora sdk will continue to work with pointers to the base class for these derived objects , but algorithms can successfully access additional functionality via use of a dynamic cast .",
    "the pandora object creation mechanics are templated to allow for simple addition of new objects to the edm .",
    "such an addition would require only the definition of a new object type , plus the associated parameters class .",
    "the pandora client application is ultimately responsible for controlling pattern recognition reconstruction using the pandora sdk .",
    "the client application creates the pandora instances and then sends requests to these instances . during the initialisation step",
    ", it must use the pandora apis to perform the following operations :    1 .   create the required pandora instances .",
    "typically only a single instance is required , although advanced use - cases addressing problems where particles are split between multiple detectors may require more .",
    "a pandora instance , as shown in figure [ fig::pandorainstance ] , contains instantiations of the pandora manager classes and api implementations .",
    "2 .   register the required algorithm and algorithm tool factories with the pandora instance(s ) .",
    "these factories give a pandora instance the ability to create instances of the algorithms and algorithm tools ( see section [ sec::algorithmtools ] ) , if they are requested via the pandorasettings xml configuration file .",
    "3 .   ask the pandora instance(s ) to parse the provided pandorasettings xml files , which describe the chain of pattern recognition algorithms to be used to process each event .",
    "the pandora instance will create and manage the algorithm instances as required and will configure them as specified",
    ".    class diagram describing the structure of the pandora class .",
    "the member variables consist of the addresses of pandora manager instances , api implementation instances and a settings instance .",
    "the member functions provide a number of high - level services and are typically accessed via the pandora apis.,scaledwidth=29.0% ]    on a per - event basis , the client application must perform the following operations :    1 .",
    "ask the pandora instance(s ) to create the building - blocks for the pattern recognition problem . as described in section [ sec::edm ] , this involves assigning values to each of the fields required for the relevant object type .",
    "the pandora algorithms access the information stored in these building - blocks , but , crucially , do not need to know how the information has been obtained .",
    "the client application thus isolates algorithms from the user s software framework .",
    "2 .   ask each pandora instance to process the event .",
    "the thread will be passed to the pandora instance , which will then run the specified algorithms in the specified order , processing the requested building - blocks in order to produce output clusters , vertices and pfos .",
    "3 .   after algorithm processing , ask each pandora instance to provide its solution to the pattern recognition problem .",
    "this will typically be in the form of pfos .",
    "the client application can read the list of reconstructed pfos and access the building - blocks that form each pfo . by using the parent addresses / identifiers specified for each building - block ,",
    "the user can link the pfo constituents back to objects in the input software framework .",
    "the user will typically want to persist the output .",
    "4 .   ask to reset each pandora instance , in preparation for the next event .",
    "this will reset all of the pandora manager classes so that all input objects and algorithm objects are removed and all saved object lists are removed / reset .    the client application is thus responsible for defining the pattern - recognition problem and persisting the solution .",
    "it is also responsible for bringing together algorithm implementations and for configuring the pandora instances .",
    "algorithms can , for convenience , be bundled together into pandora content libraries .",
    "the client application can then simply ask to register factories for all the available algorithms in a given content library . the algorithms will depend on the pandora sdk , but",
    "can also have as many external dependencies as required by their implementation .",
    "the client application will depend on the pandora sdk and on the content libraries .",
    "the actual algorithm instances used in the reconstruction are not created until the pandora instances parse the pandorasettings xml file .",
    "the aim of the pandora sdk is to provide key services for pattern recognition algorithms , so that the algorithms can remain simple and focused on pattern recognition logic . at the heart of this design",
    "are the pandora manager classes , which own all instances of objects in the pandora edm .",
    "the managers aim to provide a complete set of low - level object manipulation functions .",
    "algorithms request high - level services , which are then satisfied when the api implementations , or the managers themselves , call the correct low - level manager functions in the correct order .",
    "this approach helps to ensure that the implementation is extensible , easy to maintain and rather human - readable .",
    "a key part of the design is that algorithms can _ only _ access managed objects via the pandora apis , so the managers are able to perform memory - management and book - keeping .",
    "the pandora manager classes are templated on the managed - object type , allowing for easy addition of new types to the pandora edm .",
    "there is a manager template base class and separate derived template classes for input object and algorithm object managers .",
    "there are also manager classes for each of the object types in the pandora edm , which derive from the appropriate base classes . these address small details specific to each object type .",
    "for instance , the track manager handles track parent - daughter and sibling relationships .",
    "a pandora instance owns manager instances for each of the object types in the edm .",
    "the structure of the manager classes is illustrated in figure [ fig::managers ] .",
    "class diagram describing the manager template base classes .",
    "the manager class provides functionality for supervising named lists of objects .",
    "the derived classes provide functionality that reflects the different rules governing creation and usage of algorithm objects and input objects .",
    "concrete object manager classes derive from the appropriate base classes.,scaledwidth=55.0% ]    pandora objects are heap - allocated and their addresses are stored in named object lists , owned by the object managers .",
    "the object lists are unordered sets , keyed on pointers to the objects .",
    "this storage strategy ensures efficient retrieval of specific object instances , although care is required if ever the objects must be sorted in a defined manner .",
    "each manager holds a map from the list name ( a string ) to the address of the object list .",
    "it also stores the set of saved list names , plus the name of the _ current _ list .",
    "algorithms can use the pandora apis in order to receive const references to the object lists from the managers .",
    "algorithms can access lists by name , or can simply ask for the current list .",
    "algorithms can also choose to replace the current list name with the name of another saved object list .",
    "this aids the development of reusable algorithms where , for instance , parent algorithms can control the current lists before running instances of daughter algorithms to process the contents of the current lists .    the manager classes all hold the address of the pandora instance with which they are associated .",
    "they also record details for all the algorithms that are currently running , such as the current list name when the algorithm was first called and details about any temporary lists the algorithm has created .",
    "note that the algorithm stack may have more than one entry , since parent algorithms can run daughter algorithms .",
    "the details of accessing object lists are common to all managers , but details concerning the creation of new object lists and saving lists are different for input objects and algorithm objects .",
    "input objects can be created , via the pandora apis , by any function with access to the relevant pandora instance .",
    "the most common point of creation is , however , a pandora client application .",
    "newly - requested objects are created on the heap , via the relevant manager , and their address is always stored in a specific named list : the  input \" list .",
    "the design idea is that input objects can not be modified or deleted by the pattern recognition algorithms , although new refined or reimagined objects could be created by algorithms .",
    "the input list , for a given manager , keeps a full record of all the objects created .",
    "algorithms can choose to work with this list , or , more typically , save new lists ( under new names ) containing only a subset of the input lists .",
    "copies of the pointers to input objects can appear in multiple saved lists .",
    "the memory - management is rather simple , as all input objects are deleted only when the client application asks to reset the managers at the end of an event .",
    "all objects in the input list can be deleted and all other lists simply cleared and deleted .",
    "memory - management for algorithm objects is considerably more complex than for input objects .",
    "algorithm objects will typically be created , modified and deleted as the pattern recognition reconstruction progresses .",
    "the pandora sdk enforces a specific approach to working with algorithm objects , which maintains flexibility whilst also enabling use of the powerful reclustering functionality described in .    in order to create a new algorithm object",
    ", the relevant manager must have a new , temporary object list as the current list , waiting to receive newly created instances .",
    "the creation of such a temporary list must be requested by an algorithm .",
    "if the temporary object list is not in - place , the object creation will be rejected .",
    "similarly , object creation is not possible once the algorithm finishes or chooses to run a daughter algorithm .",
    "if the temporary list is present , it will receive the address of any newly - created objects .",
    "the temporary list is associated with the algorithm that requested its creation . when this algorithm ceases running ,",
    "its associated temporary lists will be removed and all algorithm objects contained will be deleted . in order to persist the algorithm objects ,",
    "the algorithm must ask to save the objects in a ( new or existing ) named object list .",
    "once saved in a named list , additional apis are available to move ( subsets of ) objects between existing lists or to new lists . unlike input objects",
    ", it is enforced that the address of each algorithm object can exist in only one list . at the end of an event",
    ", algorithm objects are tidied - up by deleting all instances in all saved lists and then deleting all the lists .",
    "any algorithm objects that were created , but not explicitly saved , are deleted automatically upon algorithm completion .",
    "the mechanics for algorithm object management were designed with pandora reclustering ( section [ sec::reclustering ] ) firmly in mind .",
    "these mechanics keep the algorithm objects under extremely tight control .",
    "it could be argued that all objects in the pandora edm should behave as algorithm objects , and the implementation to achieve this would be trivial as all managers and apis are templated .",
    "the existing design decision , however , is simply to allow more flexibility for the input objects , where memory - management can be achieved rather simply .",
    "the algorithm objects are typically containers of other objects . clusters , for instance , are containers of calohits , whilst pfos are containers of clusters , tracks and vertices .",
    "an important role played by the manager classes is the monitoring of object usage , ensuring that no double - counting can occur . when an algorithm asks to create an algorithm object , or add to an algorithm object",
    ", the availability of the daughter objects is checked .",
    "if any of the daughter objects is flagged as unavailable , the algorithm object creation or modification will not be allowed . if the daughter objects are available , the operation can proceed and the daughter objects will be flagged as unavailable .",
    "removal of the daughter objects will reset their availability flags .",
    "algorithms can use the pandora apis to ask whether objects are available or have already been used , functionality which proves extremely useful .",
    "the availability monitoring is largely straightforward , with each instance of a daughter object having a boolean member variable that can only be modified by the relevant manager class . for calohits",
    "the operation is , however , complicated significantly by the pandora reclustering mechanism .",
    "this mechanism is described in detail in section [ sec::reclustering ] , and allows multiple cluster configurations to be explored simultaneously .",
    "the calohit manager performs calohit usage monitoring separately for each set of cluster configurations .",
    "it ensures that a calohit can appear simultaneously in multiple cluster candidates during reclustering , but can only feature once in the final selected clusters .",
    "pandora algorithms contain the step - by - step instructions for finding patterns in the provided data .",
    "the algorithms use the pandora apis to access the pandora objects and to request the pandora managers to make new objects or modify existing objects .",
    "algorithms inherit from the pandora process purely abstract base class .",
    "the inherited functionality controls the handshaking procedure between the pandora instance and the algorithm instance , establishing a communication channel between the two entities .",
    "the process base class also provides the ability to receive a readsettings callback with a provided xml handle from which any configurable parameters can be extracted .",
    "finally , process instances can also receive an initialise callback , providing an opportunity to finalise any constructs required before event processing can begin .",
    "the algorithm purely abstract base class then provides the interface for the crucial run callback , which is called each event and is the entry - point for all event processing .      as discussed in section [ sec::clientapp ] , the pandora client application is responsible for registering algorithm factories with a pandora instance .",
    "algorithm factories are extremely simple , each implementing a createalgorithm function that allocates an instance of the relevant derived algorithm class and returns a pointer to the algorithm base class .",
    "algorithm factories are registered with the pandora algorithm manager under specific names .",
    "pandora is configured by an xml file , the path to which is provided by the client application .",
    "when pandora parses the pandorasettings xml file , it will look for algorithm xml tags within the top - level pandora xml tags . for each algorithm xml tag found",
    ", pandora will extract the algorithm type , which must match the name of a registered algorithm factory .",
    "if there is a match , the algorithm manager will ask the factory to create a new instance of the desired algorithm type and will store the pointer to the algorithm base class .    after algorithm creation",
    ", the algorithm manager will call the readsettings member function of the new algorithm , providing a handle to the xml element describing the algorithm .",
    "this provides the mechanism by which pandora algorithms can be configured at run - time .",
    "the readsettings function can look for specific daughter xml tags and assign values to its member variables as required .",
    "the algorithm can demand that some xml tags be present , returning a context - specific error to halt execution if configuration details are missing .",
    "alternatively , each algorithm can assign default values to each of its configurable member variables , then provide the ability to override the default values if specific tags are found in the xml file .",
    "this allows an implementation in which algorithms need have no hard - coded parameters , but the xml configuration can remain clean and simple for most use - cases .    the algorithm manager will create and configure instances of all the algorithms specified in the top - level of the pandorasettings file . it will store the pointers to the algorithm base classes in an ordered container",
    "it will call the initialise method for each algorithm , then is ready for event processing . when the client application asks the pandora instance to process an event",
    ", the algorithm manager will call the run method for each of the algorithms in turn . upon completion of the final algorithm in the ordered list",
    ", the thread will be returned to the client application .",
    "the pandora algorithm manager will only search for algorithm xml tags within the top - level pandora xml tags .",
    "these are the algorithms that it will create , configure , initialise and then run , in order , each event . in the configuration step , however , when a new algorithm receives a callback to its readsettings method , the algorithm itself is given control of parsing any details contained within its xml tag .",
    "the algorithm can then search for daughter algorithm xml tags .",
    "daughter algorithms could be specified in a list , within a named xml tag , or may be identified by a xml description attribute .",
    "if found , the parent algorithm can use an api to instruct the algorithm manager to create a new instance of the specified algorithm type , configure the new algorithm instance and then return the unique name of the new algorithm instance . during event processing , the parent algorithm can use an api to ask to run the daughter algorithm instance with the stored unique name . this nesting of algorithms opens - up functionality whereby parent algorithms can manipulate the current object lists , for instance , then call reusable daughter algorithms to process the objects in the current lists .      using nested daughter algorithms to perform operations",
    "promotes the creation of small , reusable algorithms containing just the kernel of specific pattern - recognition logic .",
    "the design does mean , however , that the parent and daughter algorithms are completely decoupled and there can be no communication between the two , other than via manipulation of objects in the edm or the object lists .",
    "sometimes , the user will instead want to create algorithm tools , which can offer direct extensions to specific algorithms .",
    "an algorithm tool inherits from the pandora process purely abstract base class , so it has all the handshaking and configuration functionality of an algorithm .",
    "it does not , however , receive a run callback from the algorithm manager .",
    "instead , a parent algorithm defines the interface for its algorithm tools and is given direct access to the pointer to the algorithm tool instances .",
    "the parent algorithm can create some complicated construct ( e.g. comparing multiple clusters ) , then hand the construct directly to its algorithm tools for processing .",
    "the precise algorithm tools used can be specified via the pandorasettings xml file , allowing for simple run - time configuration .",
    "the structure of the algorithm and algorithm tool classes is illustrated in figure [ fig::algorithms ] .",
    "class diagram describing the structure of the algorithm and algorithm tool classes .",
    "the process base class provides all functionality for handshaking with a pandora instance and for xml - based configuration .",
    "algorithms must provide an implementation of the run method , which is their entry - point for event processing .",
    "algorithm tools have a user - defined interface and provide custom functionality to parent algorithms.,scaledwidth=45.0% ]",
    "the apis are static functions , which are typically templated to allow for operations on each of the different types in the pandora edm .",
    "the apis used by the pandora algorithms , for accessing and manipulating pandora content , take a reference to a pandora algorithm as their first argument .",
    "this allows the static functions to resolve a particular pandora instance and access the relevant instance of the api implementation .",
    "careful friending of classes ensures that the api implementation is in the privileged position of being able to call pandora manager functionality inaccessible to other classes .",
    "the api implementation typically calls manager functions directly , but sometimes provides simple logic , calling multiple functions in different managers in order to provide the high - level services requested by algorithms . the apis used by the client application instead take a reference to a pandora instance as their first argument , but otherwise work in an identical manner .",
    "typical uses of the pandora apis are demonstrated in algorithms [ alg::examplealg1 ] and [ alg::examplealg2 ] , which describe , in human - readable form , the api calls that are required in order to perform key operations .",
    "algorithm [ alg::examplealg1 ] illustrates access to a list of calohits , followed by the creation of clusters , which are saved in a named list .",
    "algorithm [ alg::examplealg2 ] shows the merging of pairs of clusters . in each case",
    ", the true implementation in a pandora algorithm will read in exactly the same manner , with the addition of encapsulated logic and decision - making procedures to determine exactly when to create a cluster or merge clusters .",
    "a comprehensive set of demonstrations and unit - tests are included in the pandora examplecontent library and test application , which are described in@xcite .",
    "create temporary cluster list get current calohit list find best host cluster add calohit to host cluster add calohit to a new cluster save new clusters in a named list    get current cluster list find best daughter cluster merge daughter cluster into parent",
    "the pandora reclustering mechanism exploits the functionality of the pandora sdk in order to reinvent the traditional pattern recognition approach .",
    "using reclustering allows algorithms to simultaneously explore multiple different cluster configurations .",
    "the resulting clusters can be compared and a decision made as to which configuration is best .",
    "the pandora sdk will then automatically tidy - up any discarded clusters .",
    "this approach means that , instead of selecting the best algorithmic approach to solve a problem , the user is able to control a process whereby the approach that best _ solved _ the problem is identified .",
    "this allows use of the pandora xml configuration to drop - in a ( potentially large ) number of independent approaches to solving a problem .",
    "the overall algorithm steering will then select the approach that is deemed most successful .",
    "the standard reclustering use - case is to examine the clusters produced by a clustering algorithm and identify problems or deficiencies with a subset of these clusters .",
    "for example , in the pandora linear collider event reconstruction , a significant discrepancy between measured inner detector track momentum and associated calorimeter cluster energy indicates a pattern recognition failure .",
    "a pandora algorithm identifying such a failure can use an api to ask to recluster any clusters ( and tracks ) in the current object lists .",
    "this request moves the relevant clusters from the current list into a new temporary cluster list .",
    "furthermore , calohits in the relevant clusters are copied into a new calohit list , which is set as the current calohit list .",
    "the tracks are copied into a new track list , set as the current track list",
    ".    the steering algorithm can then ask to run a daughter clustering algorithm .",
    "a new temporary cluster list is created to hold any newly - created cluster candidates .",
    "the temporary list is associated with the steering algorithm , which receives the temporary list name .",
    "the daughter clustering algorithm can access the current calohit and track lists and create an all - new cluster configuration , stored in the temporary list .",
    "the steering algorithm can repeatedly call daughter clustering algorithms , using differently - configured instances of the same algorithm or radically different clustering approaches .",
    "the result is a set of named temporary cluster lists , each holding cluster candidates .",
    "one named temporary list holds the original , input clusters .    by examining the different temporary cluster lists ,",
    "the steering algorithm makes a decision as to which cluster configuration is the best . for the linear collider reconstruction discussed above",
    ", this would be the configuration in which track momentum and associated cluster energy match most closely .",
    "the steering algorithm then only needs to call the endreclustering api , specifying the name of the chosen temporary cluster list .",
    "the desired clusters will be injected into the original current list , replacing those originally present .",
    "all other temporary lists will be cleaned by the cluster manager , deleting all the rejected cluster candidates and all the temporary lists .",
    "the end result is a seamless replacement of the original , deficient clusters using the best result from a large number of alternative ( black - box ) clustering algorithms .      in some use - cases ,",
    "a steering algorithm may not wish to use daughter clustering algorithms in order to reconfigure existing clusters .",
    "the algorithm may instead want to simply examine one alternative configuration and to directly compare the original and new cluster candidates side - by - side .",
    "this functionality is provided by a local reclustering mechanism offered by the pandora sdk .",
    "the steering algorithm must ask to fragment the original cluster candidates , which will move the relevant clusters into a new temporary cluster list , plus create a further temporary cluster list to receive any newly - created clusters .",
    "the same algorithm can now build a second set of cluster candidates , from the same constituent calohits , without violating the calohit usage monitoring requirements .",
    "the two sets of cluster candidates can be compared , before a decision must be made as to which of the configurations should be selected .",
    "the steering algorithm must ask to end the fragmentation process , specifying which of the two temporary cluster lists to keep and which to delete .",
    "the chosen clusters will seamlessly replace those in the input current list .",
    "in addition to the pandora edm and the functionality provided by the pandora apis , the pandora sdk offers a number of other key features to aid pattern recognition algorithm implementation , development and debugging .",
    "these include classes to complement the edm , providing three - vector algebra or performing ( sliding ) linear fits to clusters .",
    "the most important additional features are described in this section .",
    "the pandora sdk can be easily extended via the addition of plugins .",
    "these inherit from the pandora process purely abstract base class and have interfaces that define their specific usage .",
    "plugins are currently available to provide a number of services specific to pattern recognition in hep .",
    "these include particle identification , energy correction functionality and electromagnetic shower profile characterisation .",
    "plugins are also available to provide access to magnetic field maps and to divide regions of a particle detector into layers .",
    "the plugins are owned by a plugin manager and can be accessed by algorithms via a getplugins api .",
    "the plugins inherit from the process base class all functionality required for handshaking with the relevant pandora instance and for configuration via the pandorasettings xml file .",
    "the particle identification plugins receive a pandora cluster and return a boolean result recording whether the cluster matches the topology expected for a particular particle type .",
    "the energy correction plugins , meanwhile , receive a pandora cluster and implement a custom scheme for estimating the energy of the cluster , returning the energy estimate via a reference to a float .",
    "this plugin functionality allows for improvements whenever it is possible to obtain a better energy estimator using means other than simply summing the constituent calohit energies .",
    "this covers digital calorimeters , for instance , which record only whether a particle was detected in a particular readout cell , not an analogue energy measurement .",
    "specific to hep is the ability for the client application to provide detector geometry information , which can then be requested by pandora algorithms .",
    "the client application can specify details of subdetector systems such as the type ( e.g. electromagnetic calorimeter ) , name and spatial extent , where the assumption is that the subdetector will have a polygonal structure .",
    "details for each of the layers of active material can also be provided , as can information about gap regions in the detector active material .",
    "algorithms can choose to use the detector properties to help define their pattern recognition logic .",
    "in general , however , pandora algorithms try to avoid use of detector information and work with the self - describing calohits and tracks alone .",
    "the detector geometry information is then used predominantly for event visualisation purposes .",
    "algorithms can access a pandora monitoring library , which has a dependency on the root data analysis framework@xcite .",
    "root provides the ability to write tree structures , allowing information constructed within algorithms to be recorded and written to file .",
    "the trees can store information from large numbers of events and allow algorithm logic to be developed and tuned via examination of high - statistics distributions .",
    "root also offers a event visualisation environment ( eve ) , which provides an application framework for constructing event display programs .",
    "the pandora monitoring library provides the translation from the pandora edm to the root eve data model .",
    "algorithms can use the pandora monitoring apis to request visualisation of custom lists of any objects in the pandora edm , specifying the visualisation colour - scheme and providing a name to identify the objects in the gui ( where objects can be queried and toggled on or off ) .",
    "a typical approach is for algorithms to request visualisation of multiple lists of objects , then ask to view the event .",
    "the event can be examined in the gui and the pandora algorithm processing will be paused until the user hits return in the relevant terminal .",
    "the event display provides zoom and rotation functionality for examining events in three dimensions .",
    "algorithms can also choose to add reference marker points to highlight positions of particular interest in an event .",
    "visualisation can aid algorithm development .",
    "it is possible for a developer to visually check the results of a cluster selection procedure , for instance , by asking for separate displays of all clusters passing or failing the selection .",
    "when looking to merge clusters , the event display can show all the possible parent and daughter cluster combinations , alongside details of their association properties , which can be printed to the terminal .",
    "reusable event display algorithms , which can be included in the pandorasettings xml file in multiple locations , can provide visualisation of the pattern recognition progress at different points in the reconstruction , without the need to recompile any source code .",
    "this visual approach to development and debugging can be a particularly efficient and rewarding way to create pattern recognition algorithms .",
    "as described so far in this document , a pandora reconstruction is always controlled by a client application running in the user s chosen software framework .",
    "the client application asks the pandora sdk to create self - describing objects to define the pattern recognition problem .",
    "pandora persistency provides a means whereby the self - describing building - blocks can be written - to or read - from files .",
    "this allows a user to run a client application just once , calling the event writing algorithm , which uses the pandora persistency apis to write the events to binary pndr files ( small , but platform - specific ) or to xml files ( large , but platform - independent and easily compressed ) .",
    "subsequently , the user can run in a minimal pandora standalone application , using the event reading algorithm to recreate the self - describing objects for processing by the algorithms .",
    "this functionality allows for rapid development outside of complex software frameworks , such as those typically used in hep .",
    "the algorithms to solve specific pattern recognition problems can be distributed in pandora content libraries , which contain all the required algorithms , algorithm tools and plugins .",
    "client applications can register all products in a content library with a pandora instance by calling a single function .",
    "this document now brings together all the information from the preceding sections in order to describe the pandora solutions to the pattern recognition problems in figure [ fig::exampleproblems ] .",
    "the reconstructions are provided by separate pandora content libraries .",
    "the pattern recognition problems , and so algorithms , are rather different , but each uses many decoupled algorithms to gradually build particles , trying to avoid mistakes .      the pandora linear collider ( lc ) event reconstruction is performed by algorithms and plugins in the lccontent library .",
    "it aims to trace the paths of visible particles through a fine granularity detector consisting of inner tracking detectors , an electromagnetic calorimeter ( ecal ) , a hadronic calorimeter ( hcal ) and a series of muon chambers .",
    "a typical event topology , containing multiple particles in a dense jet environment , is displayed in figure [ fig::lcrecobefore ] .",
    "the tracking detectors provide highly accurate space - point measurements .",
    "the pattern recognition and fitting of tracks in the tracking detectors is performed outside of pandora , as described in@xcite .",
    "pandora tracks represent the reconstructed trajectories and serve as the input to the particle flow algorithm . the ecal and hcal are sampling calorimeters , consisting of absorber material , such as tungsten or steel , followed by layers of active material , such as silicon or scintillator , divided into individual cells .",
    "pandora calohits represent energy deposits in the calorimeter cells .",
    "typical cell volumes are in the ecal and in the hcal .    the lc event reconstruction is developed and tested using full geant4@xcite simulations of the ild@xcite and clic_ild@xcite detector concepts in mokka@xcite .",
    "monte carlo event samples for physics studies are generated using whizard@xcite .",
    "parton showering , hadronisation and fragmentation is performed using pythia@xcite .",
    "the pandora lc client application is implemented in the marlin@xcite software framework .",
    "algorithm [ alg::marlinpandora ] describes the operations that must be performed by this client application .",
    "create a pandora instance register algorithms and plugins provide detector geometry description ask pandora to parse xml settings file create track instances create calohit instances create mcparticle instances specify track - track relationships specify mcparticle - track relationships specify mcparticle - calohit relationships ask pandora to process the event get output pfos and write to file reset pandora before next event    the reconstruction proceeds as follows :    * calohits are clustered using a simple cone - based algorithm , which works outwards from the interaction point , either adding calohits to existing clusters or using them to create new clusters .",
    "clusters can be seeded by the projection of tracks to the front face of the ecal . *",
    "the clustering algorithm is configured so that it tends to split calohits from individual particles into multiple clusters , rather than risk merging energy deposits from multiple particles into single clusters .",
    "the clusters are instead carefully merged together by a series of algorithms implementing well - defined topological rules .",
    "* clusters are associated to tracks via careful comparison of cluster positions and directions ( obtained , for instance , via sliding linear fits ) with projected track positions and directions at the ecal . *",
    "the compatibility of associated tracks and clusters is assessed , via comparison of track momentum with associated cluster energies .",
    "significant discrepancies indicate pattern recognition problems and the reclustering approach described in section [ sec::reclustering ] is used to improve the clustering .",
    "* clusters without associated tracks are examined to assess whether they genuinely represent electrically neutral particles , or whether they are more likely to be fragments of any nearby track - associated clusters , representing charged particles .",
    "* pfos are formed from tracks and/or clusters , representing the final pattern - recognition output .",
    "particle identification plugins are used to label specific particle types . in the particle flow calorimetry approach",
    ", the properties of pfos are extracted from tracks when possible , otherwise they are determined from calorimeter information .",
    "+    the results of processing a typical event are displayed in figure [ fig::lcrecoafter ] .",
    "+ the performance of the lc event reconstruction is typically characterised by measuring the jet energy resolution .",
    "this is determined using samples of z particles , which are off - shell z bosons , produced at rest at different centre of mass energies .",
    "the z particles decay into light quarks and produce two back - to - back mono - energetic jets .",
    "the resolution of the jet energy , @xmath1 , can be determined from the total reconstructed energy distribution , @xmath2 as follows :    @xmath3    where the rms@xmath4 is defined as the smallest rms reconstructed in any region containing 90% of the events .",
    "it is introduced in order to reduce sensitivity to tails in a well - defined manner , because the effects of pattern recognition failures mean that the pfo energy distribution will be inherently non - gaussian .",
    "figure [ fig::lcperformance1 ] shows the total reconstructed energy distributions for z events at different energies in ild .",
    "figure [ fig::lcperformance2 ] shows the variation of the jet energy resolution as a function of the jet energy , for jets in the barrel region of the detector .",
    "the same figure shows the contributions to the jet energy resolution from the intrinsic calorimeter energy resolution and from pattern recognition failures .",
    "the intrinsic energy resolution contribution is dominant at low jet energies , but decreases with jet energy .",
    "the contribution from pattern recognition  confusion \" increases with jet energy and dominates at high jet energies .",
    "the jet energy resolutions surpass the challenging ilc and clic targets of .",
    "+    the cpu time and overall memory footprint for the lc event reconstruction is summarised in table [ tab::lcperformance ] .",
    "a more detailed breakdown of the memory usage is shown in table [ tab::lcmemory ] .",
    "it can be seen that the pandora instance itself has a rather small footprint , as do the algorithms .",
    "the input objects , for events with clic 3tev backgrounds , are much more significant , but it is the algorithm objects that prove most important .",
    "the optional root - based monitoring functionality makes a significant contribution to the memory usage .",
    "table [ tab::lccpu ] demonstrates that the pandora sdk operations represent a negligible amount of the lc event processing time .",
    "it is the operations performed within the algorithms that dictate the event processing rate , as the algorithms collect evidence to inform their pattern recognition decisions .",
    "the most time - consuming sdk operation is the reset of the pandora instance between events .",
    ".[tab::lcperformance]indicative cpu times and memory footprints for processing 200gev z events in the clic detector , with and without overlaid backgrounds .",
    "the mean numbers of tracks and calohits indicate the complexities of the events . the memory footprint is broken down into a virtual memory value and a resident set size value .",
    "the event times were recorded using a single socket , quad core , unthreaded core i5 - 3570 cpu ( clock speed 3.4ghz , specint2006 48.5 , specfp206 62.9 ) . [ cols=\"<,^,^ \" , ]",
    "the pandora sdk provides an efficient and reusable software solution for developing pattern recognition algorithms .",
    "the sdk was developed to address problems in the field of high energy physics .",
    "the pandora lccontent library provides the state of the art in particle flow analysis for events in fine granularity detectors , such as those designed for use at the proposed high - energy @xmath0 linear colliders ilc and clic .",
    "the lc algorithms are also helping to drive detector optimisation studies for the upgrade of the cms detector at the lhc . in the neutrino sector",
    ", the pandora larcontent library provides an advanced reconstruction of cosmic ray and neutrino - induced events in lar tpcs and is used by the microboone and dune experiments .",
    "this work was funded in part by the uk science and technology facilities council and by the european union under the advanced european infrastructures for detectors and accelerators ( aida ) project .",
    "the authors would like to acknowledge the help provided by peter speckmayer , aiding the development of the pandora visualisation , and andrew blake , aiding the development of algorithms for use with events in lar tpcs ."
  ],
  "abstract_text": [
    "<S> the development of automated solutions to pattern recognition problems is important in many areas of scientific research and human endeavour . </S>",
    "<S> this paper describes the implementation of the pandora software development kit , which aids the process of designing , implementing and running pattern recognition algorithms . </S>",
    "<S> the pandora application programming interfaces ensure simple specification of the building - blocks defining a pattern recognition problem . the logic required to solve the problem </S>",
    "<S> is implemented in algorithms . the algorithms request operations to create or modify data structures and the operations </S>",
    "<S> are performed by the pandora framework . </S>",
    "<S> this design promotes an approach using many decoupled algorithms , each addressing specific topologies . </S>",
    "<S> details of algorithms addressing two pattern recognition problems in high energy physics are presented : reconstruction of events at a high - energy @xmath0 linear collider and reconstruction of cosmic ray or neutrino events in a liquid argon time projection chamber . </S>"
  ]
}