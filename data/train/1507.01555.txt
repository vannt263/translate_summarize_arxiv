{
  "article_text": [
    "in this paper we are interested in several important algorithmic problems on finite metric spaces , including the construction of greedy permutations , the problem of selecting the @xmath8thdistance among all pairs of points in the space , and the problem of counting the number of points in a metric ball .",
    "these problems have known polynomial time algorithms ( for instance , the @xmath8thdistance may be found by applying a selection algorithm to the coefficients of the distance matrix ) ; however , we are interested in algorithms that scale well to large data sets , so we seek algorithms that take subquadratic time ( substantially smaller than the time to list all distances ) . to achieve this , we require the metric space to be defined _ implicitly _ , for instance as the distances in a sparse weighted graph or as the distances among points in a euclidean metric space . despite the increased difficulty of working with implicit metrics ,",
    "we show that the problems we study can be solved efficiently .      [",
    "sec : def ] in the first sections of this paper we are interested in an ordering problem on metric spaces : the construction of greedy permutations .",
    "we solve this problem exactly and approximately , for the shortest path metrics of sparse weighted graphs and for high - dimensional euclidean spaces .",
    "-net of the set @xmath9 of red and white points , where @xmath10 is the radius of the large yellow disks .",
    "the darker disks of radius @xmath11 are disjoint from each other , and the disks of radius @xmath10 together cover all of  @xmath9.,title=\"fig:\",height=120 ] -net of the set @xmath9 of red and white points , where @xmath10 is the radius of the large yellow disks",
    ". the darker disks of radius @xmath11 are disjoint from each other , and the disks of radius @xmath10 together cover all of  @xmath9.,title=\"fig:\",height=144 ]    [ fig : defs ]     + @xmath12     + @xmath12     + @xmath12     + @xmath12     +     + @xmath12     + @xmath12     + @xmath12    [ fig : multi : resolution ]    a permutation @xmath13 of the vertices of a metric space @xmath14 is a ( also called a _",
    "farthest - first traversal _ or _ farthest point sampling _ ) if each vertex @xmath15 is the farthest in @xmath9 from the set @xmath16 of preceding vertices ( , left ) .",
    "greedy permutations were introduced by rosenkrantz _",
    "et  al . _",
    "@xcite for the `` farthest insertion '' traveling salesman heuristic , and used by gonzalez  @xcite to 2-approximate the @xmath8-center .",
    "different prefixes of the greedy permutation provide different multi - resolution clusterings of the input point set ; see .",
    "greedy permutations are closely related to another concept for finite metric spaces , @xmath10-nets .",
    "an for the metric space @xmath14 and the numerical parameter @xmath10 is a subset @xmath17 of the points of @xmath9 such that no two of the points of @xmath17 are within distance @xmath10 of each other , and such that every point of @xmath9 is within distance @xmath10 of a point of @xmath17 .",
    "equivalently , the closed @xmath11-balls centered at the points of @xmath17 are disjoint , and the closed @xmath10-balls around the same points cover all of @xmath9 ( , right ) .",
    "each prefix of a greedy permutation is an @xmath10-net , for @xmath10 equal to the minimum distance between points in the prefix , and for every @xmath10 an @xmath10-net may be obtained as a prefix of a greedy permutation .",
    "greedy permutations may be computed for metric spaces in @xmath18 time , and for graphs in the same time as all pairs shortest paths , by a naive algorithm that maintains the distances of all points from the selected points .",
    "the only previous improvement on the naive algorithm , by har - peled and mendel  @xcite defines a concept of approximation for greedy permutations that we will also use .",
    "they showed that can be computed in @xmath19 time in metric spaces with constant doubling dimension ; these are permutations @xmath13 for which there exists a sequence of numbers @xmath20 such that    the maximum distance of a point of @xmath9 from @xmath21 is in the range @xmath22{0cm}{0.4cm}}\\right]}$ ] , and    the distance between every two points @xmath23 is at least @xmath24 .    in this paper we give approximation schemes for metric spaces defined by sparse graphs , and high - dimensional euclidean spaces , neither of which have constant doubling dimension .",
    "greedy permutations for graph distances were previously mentioned by gu _",
    "et  al._@xcite , in connection with an application in molecular dynamics , but rejected by them because the naive algorithm was too slow .",
    "one reason for interest in greedy or @xmath0-greedy permutations is that , in a single structure , they approximate an optimal clustering for all possible resolutions",
    ". specifically , the prefix of the first @xmath8 vertices in such a permutation , provides , for any @xmath8 , a @xmath25-approximation to the optimal @xmath8-center clustering of @xmath26 .",
    "the @xmath8-center problem may be 2-approximated in @xmath27 time by computing the first @xmath8 vertices of a greedy permutation , and is np - hard to approximate to a ratio better than  2  @xcite . for points in euclidean spaces of bounded dimension",
    "a linear - time 2-approximation is known  @xcite .",
    "thorup @xcite provided a fast @xmath8-center approximation for graph shortest path metrics with a single choice of  @xmath8 .",
    "the @xmath8-center problem may be solved exactly on trees and cactus graphs in @xmath28 time  @xcite .",
    "et  al._@xcite use an algorithm closely related to greedy permutation to approximate a different clustering problem , @xmath8-medians .    intuitively , every prefix of a greedy permutation is as informative as possible about the whole set , so greedy permutations form a natural ordering in which to stream large data sets .",
    "because of these properties , greedy permutations have many additional applications , including color quantization  @xcite , progressive image sampling  @xcite , selecting landmarks of probabilistic roadmaps for motion planning  @xcite , point cloud simplification  @xcite , halftone mask generation  @xcite , hierarchical clustering  @xcite , detecting isometries between surface meshes  @xcite , novelty detection and time management for autonomous robot exploration  @xcite , industrial fault detection  @xcite , and range queries seeking diverse sets of points in query regions  @xcite .",
    "[ sec : dist : count : select ]    the _ distance selection _ problem , in computational geometry , has as input a set of points in @xmath29 ; the output is the @xmath8thsmallest distance defined by a pair of points of @xmath30 .",
    "it is believed that such exact distance selection requires @xmath31 time in the worst case @xcite , even in the plane ( in higher dimensions the bound deteriorates ) .",
    "recently , har - peled and raichel @xcite provided an algorithm that @xmath0-approximates this distance in @xmath32 time .",
    "we are interested in solving the problem for the finite metric case .",
    "specifically , consider a shortest path metric defined over a graph @xmath26 with @xmath1 vertices and @xmath2 edges . given @xmath33",
    ", we would like to compute the @xmath8thsmallest distance in this shortest path metric .",
    "this problem was studied for trees @xcite , where frederickson and johnson @xcite provided a beautiful algorithm that works by using tree separators , and selection in sorted matrices @xcite .",
    "the `` dual '' problem to distance selection is _ distance counting_. here , given a distance @xmath10 , the task is to count the number of pairs of points of @xmath30 that are of distance @xmath34 . while the problems are essentially equivalent in the exact case , approximate distance counting seems to be significantly easier than selection .    throughout this paper",
    ", @xmath35 will denote an undirected graph with @xmath1 vertices and @xmath2 edges , with non - negative edge weights that obey the triangle inequality .",
    "the shortest path distances in @xmath26 induce a metric @xmath36 . specifically , for any @xmath37 , let @xmath38 denotes the shortest path between @xmath39 and @xmath40 in @xmath26 .",
    "given a graph @xmath41 , and a query distance @xmath10 , the pairs is @xmath42 in the problem , the task is to compute ( or approximate ) @xmath43 . in the problem , given @xmath44 , the task is to compute ( or approximate ) the smallest @xmath10 such that @xmath45 .",
    "distance counting is easy to approximate using known techniques , since this problem is malleable to random sampling , see @xcite and references therein .",
    "however , approximate distance selection is significantly _ harder _ , as random sampling can not be used in this case  indeed , trying to use approximate distance counting ( or sketches approach as in @xcite ) , may result in an arbitrarily bad approximation to the @xmath8thdistance , if the @xmath46thand @xmath47thdistance are significantly smaller and larger , respectively , than the @xmath8thdistance ( or similar sparse scenarios ) .      [ [ greedy - permutation - for - sparse - graphs . ] ] greedy permutation for sparse graphs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in , we show that an @xmath0-greedy permutation can be found for graphs with @xmath1 vertices and @xmath2 edges in time @xmath48 notation hides logarithmic factors in @xmath1 and polynomial terms in @xmath49 .",
    "we assume throughout the paper that @xmath50 . ] .",
    "[ [ approximate - greedy - permutation - for - high - dimensional - euclidean - space . ] ] approximate greedy permutation for high dimensional euclidean space .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in , we show that an approximate greedy permutation can be computed for a set of points in high - dimensional euclidean space .",
    "the algorithm runs in subquadratic time and has polynomial dependency on the dimension .",
    "our approximations are based on finding @xmath10-nets ( or in the euclidean case approximate @xmath10-nets ) for a geometric sequence of values of  @xmath10 in an earlier paper @xcite , the authors showed that for high dimensional point sets one can get a sparse spanner .",
    "applying the above algorithm for sparse graphs to this spanner yields a greedy permutation , but with significantly weaker bounds , as the stretch in the constructed spanner is at lease @xmath51 .    [",
    "[ exact - greedy - permutation - for - bounded - tree - width . ] ] exact greedy permutation for bounded tree - width .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in , with the details in the full version of this paper , we show how to find an exact greedy permutation for graphs of bounded treewidth , in time @xmath52 , by partitioning the input graph into small subgraphs separated from the rest of the graph by @xmath5 vertices , and by using an orthogonal range searching data structure in each subgraph to find the farthest vertex from the already - selected vertices .    [ [ distance - selection - in - planar - graphs . ] ] distance selection in planar graphs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in , we show how to @xmath5-approximate the @xmath8thdistance in a planar graph @xmath26 . specifically , given @xmath8 , the algorithm computes in near linear time , a number @xmath53 , such that the @xmath8thshortest distance in @xmath26 is at least @xmath53 , and at most @xmath54 .",
    "this algorithm uses a planar separator and distance oracles in an interesting way to count distances .     for space reasons we defer many proofs to the full version of this paper .",
    "[ sec : g : sparse][sec : naive ]    we are interested in approximating the greedy permutation for a graph @xmath26 . among other motivations ,",
    "this provides a good approximation for @xmath8-center clustering :    [ lemma : g : to : k : center ] if @xmath55 is a @xmath0-greedy permutation of @xmath56 , then , for all @xmath8 , @xmath57 provides a @xmath25-approximation to the optimal @xmath8-center clustering and minimax diameter @xmath8-clustering of @xmath58 .    by property ( a ) of such a permutation ( see ) , all points of @xmath59 can be covered by balls of radius @xmath60 centered at @xmath61 ; these balls have diameter @xmath62 .",
    "let @xmath63 , where @xmath40 is the farthest point in @xmath59 from @xmath57 . by the definition of @xmath24 and by property ( b ) of these permutations ,",
    "every two points in @xmath64 have distance at least @xmath24 , so no @xmath8 clusters of radius smaller than @xmath65 or diameter smaller than @xmath24 can cover the @xmath66 points in  @xmath64 .    a naive algorithm for computing the greedy permutation maintains for each vertex @xmath40 its distance @xmath67 to the set of centers picked so far , and uses these distances as priorities in a max - heap , which it uses to select each successive center , using dijkstra s algorithm to update the distances after each center is picked .",
    "there are @xmath1 instantiations of dijkstra s algorithm , taking time @xmath68 .    to improve performance , we may avoid adding a vertex @xmath40 to the min - heap used within dijkstra s algorithm unless its tentative distance is smaller than @xmath67 , preventing the expansion of vertices for which the distance from @xmath69 is no smaller than @xmath67 .",
    "this idea does not immediately improve the worst - case running time of the algorithm but will be important in our approximation algorithm .",
    "[ sec : net ]    we compute an @xmath10-net in a sparse graph using a variant of dijkstra s algorithm with the sequence of starting vertices chosen in a random permutation .",
    "a similar idea was used by mendel and schwob @xcite for a different problem ; however , using this method for our problem involves a more complicated analysis .",
    "let @xmath35 be a weighted graph with @xmath1 vertices and @xmath2 edges , let @xmath70 , and let @xmath15 be the @xmath71thvertex in a random permutation of  @xmath59 . for each vertex",
    "@xmath40 we initialize @xmath72 to  @xmath73 . in the @xmath71thiteration , we test whether @xmath74 , and if so we do the following steps :    add @xmath15 to the resulting net @xmath17 .",
    "set @xmath75 to zero .    perform dijkstra s algorithm starting from @xmath15 , modified to avoid adding a vertex @xmath39 to the priority queue unless its tentative distance is smaller than the current value of @xmath76 .",
    "when such a vertex @xmath39 is expanded , we set @xmath76 to be its computed distance from @xmath15 , and relax the edges adjacent to @xmath39 in the graph .",
    "the difference from the algorithm of mendel and schwob is that their algorithm initiates an instance of dijkstra s algorithm starting from every vertex @xmath15 , whereas we do so only when @xmath77 .",
    "the set @xmath17 is an @xmath10-net in @xmath26 .",
    "[ lemma : update : delta ] consider an execution of the algorithm , and any vertex @xmath78 .",
    "the expected number of times the algorithm updates the value of @xmath72 during its execution is @xmath79 , and more strongly the number of updates is @xmath80 with high probability .",
    "[ lemma : net : alg ] given a graph @xmath35 , with @xmath1 vertices and @xmath2 edges , the above algorithm computes an @xmath10-net of @xmath26 in @xmath81 expected time .    by , the two @xmath82 values associated with the endpoints of an edge get updated @xmath83 times , in expectation , during the algorithm s execution . as such , a single edge creates @xmath80 decrease - key operations in the heap maintained by the algorithm .",
    "each such operation takes constant time if we use fibonacci heaps to implement the algorithm .",
    "given a finite metric space @xmath14 defined over a set @xmath9 , its is the ratio between the maximum and minimum distance in the metric ; formally , @xmath84 let graph @xmath85 and @xmath86 be given .",
    "assume for now that the minimum edge length is @xmath87 , and that the diameter of @xmath26 is at most @xmath88 .",
    "set @xmath89 , for @xmath90 .",
    "we compute a sequence of nets in a sequence of iterations . in the first iteration ,",
    "compute an @xmath91-net @xmath92 of @xmath26 , using . in the beginning of the @xmath71thiteration , for @xmath93 , let @xmath94 . using dijkstra , mark as all vertices within distance @xmath24 of  @xmath95 .",
    "compute an @xmath24-net @xmath96 in @xmath26 , modifying the algorithm of by disallowing used vertices from being considered as net points .    after completing these computations ,",
    "combine the vertices into a single permutation in which the vertices of @xmath96 form the @xmath71thcontiguous block . within this block",
    ", the ordering of the vertices of @xmath96 is arbitrary .",
    "the following is easy to verify , and we omit the easy proof .",
    "let @xmath97 , for an arbitrary @xmath98 . then the distance of every vertex @xmath99 from @xmath17 is at most @xmath100 , and the distance between any pair of vertices of the net is at least @xmath100 .    that is , the net computed by the @xmath98thiteration is a `` perfect '' @xmath100 net . in between such blocks ,",
    "it might be less then perfect .",
    "formally , we have the following ( again , we omit the relatively easy proof ) .",
    "let @xmath101 be the permutation computed by the above algorithm , and consider the @xmath71thvertex @xmath15 in this permutation .",
    "assume that @xmath102 .",
    "then we have the following guarantees :    the distance between any two vertices of @xmath103 is at least @xmath100 .",
    "the distance of any vertex of @xmath78 from @xmath21 , is at most @xmath104 .",
    "[ lemma : greedy_spread ] let @xmath85 be a graph , let @xmath86 , and let @xmath105 be the spread of @xmath26 .",
    "then , one can compute a @xmath0-greedy permutation in @xmath106 expected time .",
    "a @xmath51-approximation to the diameter of @xmath26 can be found by running dijkstra s algorithm from an arbitrary starting vertex .",
    "the minimum distance in @xmath26 is achieved by an edge ( since the edge weights are positive ) , so it can be computed in linear time . after scaling ,",
    "we can use the above algorithm , with @xmath107 iterations , each using a modified version of the algorithm of .",
    "it is straightforward to modify the analysis to show that the each such iteration takes @xmath108 time in expectation .",
    "[ sec : elim - spread ]    an arbitrary graph @xmath26 may not have small enough spread to apply the previous algorithm directly . in this case , following by - now standard methods for eliminating the dependence on spread ( see section 4 of  @xcite ) , we simulate the algorithm more efficiently , using a value of @xmath109 smaller by a constant factor to make up for some additional approximation in our simulation .",
    "consider an iteration of the above algorithm for distance @xmath24 .",
    "edges longer than @xmath110 can be ignored or ( conceptually ) deleted , as they can not be used by the @xmath10-net algorithm of .",
    "similarly , edges of length @xmath111 can be collapsed and treated as having length zero .",
    "thus , an edge @xmath112 of length @xmath113 is active when @xmath24 is in the interval @xmath114{0cm}{0.4cm}}\\right]}$ ] , which happens for @xmath115 iterations .",
    "let @xmath116 be the number of active edges in the @xmath71thiteration , and let @xmath117 be the resulting graph , in which all the edges of lengths @xmath118 are contracted ( the resulting super vertex is identified with one of the original vertices ) , and all the edges of length @xmath119 are removed .",
    "any singleton vertex in this graph is not relevant for computing the permutation in this resolution , and it can be ignored .",
    "the running time of on @xmath117 is @xmath120 .",
    "when the algorithm moves to the next iteration , it needs to introduce into @xmath117 all the new edges that become active . using a careful implementation ,",
    "this can be done in @xmath121 amortized time , for any newly introduced edge .",
    "similarly , edges that become inactive should be deleted .",
    "of course , if there are no active edges , the algorithm can skip directly to the next resolution .",
    "this can be easily done , by putting the edges into a heap , sorted by their length , and adding the edges and removing them as the algorithm progresses down the resolutions .",
    "the overall expected running time of this algorithm is @xmath122 .",
    "however , since every edge is active in @xmath123 iterations , we get that the expected running time is @xmath124 .",
    "we thus get the following .",
    "[ theo : greedy - graph ] given a non - negatively weighted graph @xmath35 , with @xmath1 vertices and @xmath2 edges , and a parameter @xmath86 , one can compute a @xmath0-approximate greedy permutation for @xmath26 in expected time @xmath124 .",
    "[ sec : g : euclidean ]      [ lemma : jl ] for any @xmath125 , every set of @xmath1 points in euclidean space admits an embedding into @xmath126 , with distortion @xmath127 .",
    "let @xmath128 be a family of hash functions mapping @xmath29 to some universe @xmath129 .",
    "we say that @xmath128 is if for any @xmath130 it satisfies the following properties :    if @xmath131 then @xmath132\\geq p_1 $ ] .    if @xmath133 then @xmath132\\leq p_2 $ ] .",
    "[ lemma : lsh ] for any @xmath134 , dimension @xmath135 , and @xmath136 , there exists a @xmath137-sensitive family of hash functions for @xmath29 , where every function can be evaluated in time @xmath138 .",
    "we extend the notion of nets to , for @xmath139 , @xmath140 , and metric space @xmath14 .",
    "these are subsets @xmath17 of the points of @xmath9 such that no two of the points of @xmath17 are within distance @xmath10 of each other , and such that every point of @xmath9 is within distance @xmath141 of a point of @xmath17 .",
    "[ theo : high - dim - approx - net ] let @xmath135 , @xmath140 , @xmath125 . given a set @xmath142 of @xmath1 points in @xmath29",
    ", one can compute in expected running time @xmath143 a set @xmath144 such that @xmath17 is a @xmath0-approximate @xmath10-net for the euclidean metric on @xmath142 with high probability .    by we",
    "may assume that @xmath145 , since otherwise we can embed @xmath142 into euclidean space of dimension @xmath146 , with distortion @xmath147 .",
    "any @xmath148-approximate @xmath10-net for this new point set is a @xmath148-approximate @xmath10-net for @xmath142 .",
    "let @xmath149 .",
    "let @xmath128 be the @xmath150-sensitive family of hash functions given by , with @xmath151 , @xmath152 .",
    "we sample @xmath153 hash functions @xmath154 . for every @xmath155 , and for every @xmath156",
    ", we evaluate @xmath157 .",
    "we construct a set @xmath144 which is initially empty , and it will be the desired net at the end of the algorithm .",
    "initially , we consider all points in @xmath142 as being unmarked .",
    "we pick an arbitrary ordering @xmath158 of the points in @xmath142 , and we iterate over all points in this order .",
    "when the iteration reaches point @xmath159 , if it is already marked , we skip it , and continue with the next point . otherwise , we add @xmath159 to @xmath17 , and we proceed as follows .",
    "let @xmath160 be the set of all currently marked points .",
    "let @xmath161 be the set of unmarked points that are hashed to the same value in at least one of the sampled hash functions @xmath162 .",
    "we mark all points @xmath163 , such that @xmath164 .",
    "this completes the construction of the desired set @xmath17 .",
    "for the proof that this is indeed a @xmath165-approximate @xmath10-net , and the time analysis , see the full version of this paper .",
    "let @xmath166 , let @xmath142 be a set of @xmath1 points in @xmath29 , let @xmath86 , and let @xmath105 be the spread of the euclidean metric on @xmath142 .",
    "then , one can compute in @xmath167 expected time a sequence that is a @xmath0-greedy permutation for the euclidean metric on @xmath142 , with high probability .",
    "we use the algorithm from .",
    "a 2-approximate diameter can easily be computed in linear time , by choosing one point arbitrarily and finding a second point as far from it as possible .",
    "the only new needed observation is that it is sufficient for the algorithm to compute @xmath148-approximate @xmath10-nets , using , in place of @xmath10-nets . as in",
    ", the approximate @xmath10-net algorithm needs to be modified to mark near - neighbors of previously selected points as used , so that they are not selected as part of the net ; this step does not increase the total running time for the approximate @xmath10-net construction .",
    "the rest of the analysis remains the same .",
    "[ sec : approx - mst ]    as a tool for eliminating the dependence on the spread in our approximate greedy permutation algorithm , we will use an approximation to the minimum spanning tree .",
    "however , we do not wish to approximate the total edge length of the tree , as has been claimed by andoni and indyk  @xcite ; rather , we wish to approximate a different property of the minimum spanning tree , the fact that for every two vertices it provides a path that minimizes the maximum edge length among all paths connecting the same two vertices .",
    "[ lemma : approx - mst ] given @xmath1 points in a euclidean space of dimension  @xmath168 , and given a parameter @xmath125 , we may in expected time @xmath169 find a spanning tree @xmath170 of the points such that , for every two points @xmath39 and @xmath40 , the maximum edge length of the path in @xmath170 from @xmath39 to @xmath40 is at most @xmath0 times the maximum edge length of the path in the minimum spanning tree from @xmath39 to @xmath40 .",
    "the proof ( in the full version of this paper ) modifies borvka s algorithm for minimum spanning trees by using an approximate nearest neighbor data structure to find candidate edges out of each subtree in each phase of the algorithm .      as in",
    ", we will eliminate the @xmath171 term in the running time for our approximate greedy permutation algorithm by , in effect , contracting and uncontracting edges of a graph , the approximate minimum spanning tree of .",
    "let @xmath166 , let @xmath142 be a set of @xmath1 points in @xmath29 , and let @xmath86 , then , one can compute in @xmath172 expected time a sequence that is a @xmath0-greedy permutation for the euclidean metric on @xmath142 , with high probability .",
    "we maintain a partition of the input into subproblems , defined by subtrees of the spanning tree @xmath170 computed by .",
    "initially , there is one subproblem , defined by the whole tree , but it does not include all the input points .",
    "rather , as the algorithm progresses , certain points within each subproblem s subtree will be active , depending on the current value @xmath10 for which we are computing approximate @xmath10-nets .",
    "we delete edge @xmath112 from tree @xmath170 , splitting its subproblem into two smaller sub - subproblems , whenever @xmath10 becomes smaller than the length of @xmath112 divided by @xmath147 .",
    "we will include the endpoints of an edge @xmath112 into the active points of the subproblem containing @xmath112 whenever the current value of @xmath10 becomes smaller than @xmath173 times the length of @xmath112 ( for an appropriate constant @xmath174 ) . at each stage of the algorithm , when we construct approximate @xmath10-nets for some particular value of @xmath10 , we do so separately in each subproblem that has two or more active points .",
    "( in a subproblem with only one active point , that point must have been included in the approximate greedy permutation already , and so can not be chosen for the new @xmath10-net .",
    "however , the points that have been included in the permutation must remain active in order to prevent other points within distance @xmath10 of them from being added to the net . )",
    "each edge @xmath112 contributes to the size of a subproblem only for a logarithmic number of different values of @xmath10 , so the total time is as stated .",
    "[ sec : e : g : treewidth ]    let @xmath26 be an @xmath1-vertex graph of treewidth @xmath175 with non - negative edge weights . then in time @xmath176 we may construct an exact greedy permutation for @xmath26 .",
    "[ sec : planar : counting ]    in this section we give a near - linear time bicriterion approximation algorithm for counting pairs of vertices in a planar graph with a given pairwise distance @xmath140 .",
    "the result is approximate in the following sense .",
    "if we let @xmath165 and @xmath177 be the number of pairs with distance at most @xmath10 and at most @xmath178 respectively , for some @xmath125 , then we output a number @xmath179 $ ] .",
    "the following is due to thorup @xcite ( see also @xcite ) .",
    "[ theo : oracle ] for any @xmath1-vertex undirected planar graph with non - negative edge lengths , and for any @xmath125 , there exists a @xmath0-approximate distance oracle with query time @xmath180 , space @xmath181 , and preprocessing time @xmath182 .",
    "the basic idea is now to recursively decompose @xmath26 using planar separators .",
    "fortunately , one can do it in such a way , that when looking on a patch @xmath183 , with @xmath2 vertices , formed by this recursive decomposition , the distances between the boundary vertices of @xmath183 ( in the original graph ) are known .",
    "the details of how to compute this decomposition is described by fakcharoenphol and rao @xcite , and we recall their result .",
    "let @xmath41 be a graph .",
    "a of a graph is a subset @xmath184 , such that the induced subgraph @xmath185}$ ] is connected .",
    "a vertex @xmath186 is a vertex if there exists a vertex @xmath187 such that @xmath188 .",
    "a @xmath189 of @xmath26 is a set of subsets of the vertices of @xmath26 , that can be described via a binary tree @xmath190 , having patches of @xmath26 associated with each node of it .",
    "the root @xmath10 of tree is associated with the whole graph ; that is , @xmath191 .",
    "every node of @xmath192 has two children @xmath193 , such that @xmath194 , and @xmath195 .",
    "a leaf of this tree is associated with a single vertex of @xmath26 .",
    "finally , we require that for any patch @xmath196 in this decomposition , the set of its boundary vertices @xmath197 , has at most @xmath198 vertices .    for every @xmath199 ,",
    "the ( inner ) of @xmath196 , denoted by @xmath200 is a clique over @xmath197 , with @xmath201 assigned length @xmath202}(u , v)$ ] , i.e.  equal to the shortest distance of all paths between @xmath39 and @xmath40 , that are contained entirely inside @xmath185}$ ] .",
    "the _ dense distance graph _ associated with @xmath189 is the graph @xmath203 .",
    "[ theo : ft ] let @xmath26 be an @xmath1-vertex undirected planar graph with non - negative edge lengths .",
    "then , one can compute , in @xmath204 time , a hierarchical decomposition @xmath189 of @xmath26 , and all the inner and outer distance graphs associated with its patches ( i.e. , @xmath200 for all @xmath205 ) .",
    "we are now ready to prove the main result of this section .",
    "let @xmath26 be a given @xmath1-vertex undirected planar graph with non - negative edge lengths , let @xmath140 , and @xmath125 .",
    "let @xmath206 and @xmath207 , see .",
    "then , one can compute , in @xmath182 time , an integer @xmath53 , such that @xmath208 .",
    "we compute a hierarchical decomposition of @xmath189 , and for every @xmath209 , the distance graph @xmath200 , in total time @xmath210 , using .",
    "we consider all patches @xmath205 .",
    "if @xmath211 then we let @xmath212 . otherwise , our purpose here is to count the number of pairs of vertices @xmath213 , such that @xmath214 , and @xmath39 and @xmath40 belong to different children of @xmath196 .",
    "so , let @xmath215 be the two patches that are the children of @xmath196 in @xmath189 .",
    "let @xmath216 , @xmath217 be the set of border vertices of @xmath218 , @xmath219 , respectively , and let @xmath220 .",
    "let @xmath221 \\cup { \\mathcal{d}_{c_2}}$ ] , and @xmath222 \\cup { \\mathcal{d}_{c_1}}$ ] .",
    "that is , @xmath223 is the union of the subgraph of @xmath26 induced on the cluster @xmath218 , and the distance graph inside @xmath219 , and the distance graph outside @xmath224 .",
    "note that    @xmath225 ,    for any @xmath226 , we have @xmath227 , and    @xmath228 .",
    "therefore , for any @xmath229 , by running dijkstra s algorithm on @xmath230 starting from @xmath231 , we can compute the set of vertices @xmath232 in time @xmath233 .",
    "moreover , for any @xmath229 , for any @xmath234 , we can compute ( within the same time bounds ) its closest vertex in @xmath231 ; specifically , a vertex @xmath235 , with @xmath236 .",
    "let @xmath237 be the set of all vertices that are border vertices in some ancestor of @xmath238 in @xmath189 .",
    "for any @xmath239 , @xmath229 , let @xmath240 using we can find in time @xmath241 all pairs of vertices @xmath242 , with @xmath243 .",
    "that is , we compute the set of border vertex pairs @xmath244 we now explicitly count all the pairs of vertices that are in distance at most @xmath10 from a pair of vertices on the boundary , such that these boundary vertices in turn are in distance at most @xmath245 from each other .",
    "that is , we set @xmath246 finally , we return the value @xmath247 every ordered pair @xmath248 is counted exactly once in the above summation .",
    "moreover , every pair with @xmath249 contributes 1 , while every pair with @xmath250 contributes 0 , implying that @xmath208 , as required .",
    "it remains to bound the running time .",
    "constructing @xmath189 takes time @xmath204 .",
    "the hierarchical decomposition has @xmath80 levels . for every level",
    ", we spend a total of @xmath28 time running dijkstra s algorithm .",
    "we also spend a total time of @xmath251 computing the sets @xmath170 .",
    "finally , we spend @xmath182 time at the preprocessing step of the distance oracle from .",
    "therefore , the total running time is @xmath182 , which concludes the proof .",
    "we have found efficient approximation algorithms for greedy permutations in graphs and in high - dimensional euclidean spaces , and fast exact algorithms for graphs of bounded treewidth .",
    "this implies @xmath252-approximate @xmath8-center clustering of graph metrics in @xmath253 time ( ignoring the dependency on @xmath109 ) , for all values of @xmath8 simultaneously . for a single value of @xmath8 , and for graphs",
    "whose weights are positive integers , our technique can be used to construct a @xmath51-approximation to the @xmath8-center clustering in @xmath254 expected time ( section  2.4 in the full version ) .",
    "this compares favorably with a significantly more complicated algorithm of thorup @xcite that has running time worse by at least a factor of @xmath255 .",
    "we leave open for future research finding other graphs in which we may construct exact greedy permutations more quickly than the naive algorithm . another direction for research concerns hyperbolic spaces of bounded dimension .",
    "krauthgamer and lee  @xcite claim without details that for all @xmath125 , sets of @xmath1 points in hyperbolic spaces of bounded dimension have @xmath0-steiner spanners with @xmath256 vertices and edges . applying our graph algorithm to these spanners ( modified to avoid including steiner points in its @xmath10-nets )",
    "would give a near - linear time approximate greedy permutation for those spaces as well , but perhaps a more direct and more efficient algorithm is possible .",
    "s.  abbar , s.  amer - yahia , http://theory.lcs.mit.edu/~indyk/[p .",
    "indyk ] , s.  mahabadi , and http://www.cs.uiowa.edu/~kvaradar/[k .",
    "r. varadarajan ] . .",
    "in _ proc .",
    "29th annu .",
    "_ _ _ , pages 207214 , 2013 .",
    "http://sarielhp.org[s .",
    "har - peled ] , http://theory.lcs.mit.edu/~indyk/[p .",
    "indyk ] , and a.  sidiropoulos .",
    "euclidean spanners in high dimensions . in _ proc .",
    "24rd acm - siam sympos .",
    "discrete algs .",
    "_ , pages 804809 , 2013 ."
  ],
  "abstract_text": [
    "<S> in this paper , we consider two important problems defined on finite metric spaces , and provide efficient new algorithms and approximation schemes for these problems on inputs given as graph shortest path metrics or high - dimensional euclidean metrics . </S>",
    "<S> the first of these problems is the greedy permutation ( or farthest - first traversal ) of a finite metric space : a permutation of the points of the space in which each point is as far as possible from all previous points . </S>",
    "<S> we describe randomized algorithms to find @xmath0-approximate greedy permutations of any graph with @xmath1 vertices and @xmath2 edges in expected time @xmath3 , and to find @xmath0-approximate greedy permutations of points in high - dimensional euclidean spaces in expected time @xmath4 . </S>",
    "<S> additionally we describe a deterministic algorithm to find exact greedy permutations of any graph with @xmath1 vertices and treewidth @xmath5 in worst - case time @xmath6 . </S>",
    "<S> the second of the two problems we consider is distance selection : given @xmath7 , we are interested in computing the @xmath8thsmallest distance in the given metric space . we show that for planar graph metrics one can approximate this distance , up to a constant factor , in near linear time . </S>"
  ]
}