{
  "article_text": [
    "we study minimally rigid graphs in the plane .",
    "several characterizations of these graphs are known  @xcite including laman counting ( the graphs are also called _ laman graphs _ ) and tree partitions ( partitions with two trees by lovsz and yemini and partitions with three trees by crapo ) .",
    "tree partitions can be viewed as certificates for the property of a graph being minimally rigid .",
    "recently , i found a new characterization of laman graphs , a _ red - black hierarchy _ which is a hierarchical decomposition of a graph .",
    "a red - black hierarchy of a graph @xmath0 can be constructed in @xmath2 time @xcite .",
    "the first step of the construction uses a partition of @xmath3 into two spanning trees . using the algorithm by gabow and westermann @xcite this step actually",
    "can be done in @xmath5 time only .",
    "the remaining part is a recursive top - to - bottom construction of a red - black hierarchy .",
    "we show a slight modification for the processing of a vertex of the hierarchy such that the running time reduces to @xmath4 only .",
    "if @xmath6 children are added to a hierarchy vertex then @xmath6 trees are processed .",
    "the main idea is that a processing of @xmath7 trees suffices .",
    "surprisingly , this saves a significant time in computation .",
    "the existence of a red - black hierarchy is a necessary and sufficient condition for laman graphs .",
    "we show that the algorithm for constructing a red - black hierarchy can be modified to recognize laman graphs in the same time .",
    "this is similar to a recent algorithm developed by daescu and kurdia  @xcite .",
    "however their algorithm is different since it uses segment trees .",
    "_ henneberg construction_. daescu and kurdia  @xcite pointed out difficulties in using red - black hierarchies for computing a henneberg construction . in a final version , we show that a hierarchical approach can still be applied here .",
    "let @xmath0 be a graph and let @xmath8 be a rooted tree whose set of leaves is in one - to - one correspondence with @xmath9 .",
    "for a vertex @xmath10 of @xmath9 , let @xmath11 be the corresponding vertex of @xmath12 .",
    "a _ hierarchy _",
    "@xmath13 is defined as a graph with the set of vertices @xmath12 and the set of edges @xmath14 where @xmath15 is a map @xmath16 that maps an edge @xmath17 to a _",
    "cross edge _ of @xmath18 such that the endpoints of @xmath19 are corresponding ancestors of @xmath20 and @xmath11 .",
    "a hierarchy @xmath21 is called a _ red - black hierarchy _ if it satisfies the following conditions .",
    "* _ root rule_. the root has exactly two children . *",
    "_ leaf rule_. a vertex @xmath10 is the only child of its parent if and only if @xmath10 is a leaf . *",
    "_ cross - edge rule_. the endpoints of every non - tree edge have the same grandparent but different parents . * _ tree rule_. for any vertex @xmath10 , the cross edges incident to grandchildren of @xmath10 form a tree connecting all grandchildren of @xmath10 .",
    "we denote by @xmath22 the _ size _ of a tree @xmath23 , i.e. the number of its vertices .",
    "the algorithm in @xcite first constructs two spanning trees @xmath24 ( red ) and @xmath25 ( black ) of @xmath26 for an edge @xmath27 and then removes @xmath28 from @xmath25 making a forest @xmath29 .",
    "the main step takes as input a red tree @xmath24 , black forest @xmath29 corresponding to a vertex @xmath30 .",
    "then    \\1 .",
    "add @xmath31 children to @xmath10 so that each child @xmath32 corresponds to a tree @xmath33 .",
    "assign empty forest @xmath34 to each @xmath32 .",
    "find red edges across the black forest ( i.e. red edges whose endpoints are in different trees of @xmath29 ) .",
    "remove them from @xmath24 producing a red forest @xmath35 .",
    "each red tree @xmath23 in @xmath35 connects vertices from the same black tree @xmath36 and we add @xmath23 to @xmath34 .",
    "proceed recursively with each child @xmath32 , tree @xmath36 and forest @xmath34 .     of @xmath29 .",
    "( b ) the cross edges corresponding to @xmath37 . ]",
    "the main idea of improvement is to avoid unnecessary work in step 2 . to find the list @xmath37 of red edges across the black forest ,",
    "we process vertices @xmath10 of all trees @xmath33 except a maximum size tree @xmath38 . for each edge @xmath39 incident to @xmath10 , we add it to @xmath37 if @xmath40 is in a tree @xmath41 different from @xmath36 , i.e. @xmath42 . to test an edge in @xmath43 time , for each vertex ,",
    "we store a reference @xmath44 to a _ tree header _ which stores a name of the tree and its size .",
    "the total number of tested edges for adding to @xmath37 is @xmath45 .",
    "indeed , the total number of vertices in the trees @xmath46 is @xmath47 . the number of edges with both endpoints in @xmath36 is less than @xmath48 .",
    "the total number of such edges is @xmath49 .",
    "the time for computing @xmath37 is @xmath45 .",
    "we show that the total time for computing lists @xmath37 over all recursive calls is @xmath4 .",
    "the total complexity of lists @xmath37 is @xmath50 .",
    "we charge the vertices of @xmath46 for the remaining time @xmath49 .",
    "the size of each tree @xmath46 is at most @xmath51 where @xmath52 is the number of trees in @xmath29 .",
    "the trees of @xmath29 were created by edge removals from a single black tree in the previous level .",
    "thus , when a vertex is charged , its tree size has been reduced by at least half .",
    "then each vertex is charged @xmath53 times in total .",
    "the running time follows .",
    "_ edge removals_. we show that all edge removals can be done in @xmath4 time .",
    "the removal of an edge @xmath54 from a tree @xmath23 results in two trees , say @xmath55 and @xmath56 .",
    "we count the size of the smallest tree in @xmath57 time by parallel scanning the lists of vertices of @xmath55 and @xmath56 . without loss of generality @xmath58 and , thus @xmath59 .",
    "we create a new tree header for @xmath55 .",
    "then update the sizes of @xmath55 and @xmath56 and tree references for the vertices of @xmath55 .",
    "the total time is @xmath4 since the tree reference of every vertex changes @xmath53 times .",
    "let @xmath60 be a laman graph with @xmath1 vertices .",
    "if a partition of @xmath60 into two forests is given then a red - black hierarchy for @xmath60 can be constructed in @xmath4 time .",
    "the above algorithm for constructing a red - black hierarchy assumes that @xmath60 is a laman graph . on the other hand",
    "the red - black hierarchy is a certificate of laman graphs and the algorithm can be modified to test whether @xmath60 is a laman graph .",
    "we use the algorithm by gabow and westermann @xcite for partitioning a graph into two forests in @xmath5 time .",
    "the graph is not laman if there is no such partition .",
    "we run the above algorithm and test the red - black hierarchy rules on the fly .",
    "the root rule is easy to check and we do it only for the root .",
    "the current vertex @xmath10 has at least two children in the hierarchy since @xmath29 has at least two trees .",
    "thus the leaf rule holds for the children of @xmath10 .",
    "we check it for grandchildren of @xmath10 .",
    "if a forest @xmath34 contains a single tree @xmath23 then @xmath22 must be one ( otherwise @xmath60 is not laman and the algorithm stops ) .",
    "o.  daescu and a.  kurdia . recognizing minimally rigid graphs in the plane in subquadratic time . in _ the proceedings of the 17th fall workshop on computational and combinatorial geometry ( fwcg 07 ) _ , 2007 ."
  ],
  "abstract_text": [
    "<S> in @xcite , a new construction called _ red - black hierarchy _ characterizing laman graphs and an algorithm for computing it were presented . for a laman graph @xmath0 with @xmath1 vertices it runs in @xmath2 time assuming that a partition of @xmath3 into two spanning trees is given . </S>",
    "<S> we show that a simple modification reduces the running time to @xmath4 . </S>",
    "<S> the total running time can be reduced @xmath5 using the algorithm by gabow and westermann @xcite for partitioning a graph into two forests . </S>",
    "<S> the existence of a red - black hierarchy is a necessary and sufficient condition for a graph to be a laman graph . </S>",
    "<S> the algorithm for constructing a red - black hierarchy can be then modified to recognize laman graphs in the same time . </S>"
  ]
}