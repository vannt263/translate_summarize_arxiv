{
  "article_text": [
    "collision detection between moving solids @xcite is an ubiquitous issue in robotics and other fields , such as computer graphics or physics simulation .",
    "general - purpose strategies are available as well as algorithms tailored for specific situations . in general ,",
    "any algorithm is a trade - off between reliability , accuracy , and computation time . in some scenarios , for example in trajectory planning for high - speed heavy robots",
    ", collisions might have devastating effects .",
    "therefore , it is necessary to exclude them with certainty .",
    "this article presents an efficient algorithm that can give such a guarantee for collisions between polyhedra under certain assumptions on the motion .",
    "typical techniques of collision detection include time discretization ( * ? ? ?",
    "* section  2.4 ) , motion linearization , and the use of bounding volumes ( * ? ? ?",
    "* chapter  4 ) or hierarchies of bounding volumes ( * ? ? ?",
    "* chapter  6 ) and @xcite .",
    "careful application of discretization and linearization is critical , as collisions with a short time interval of interference may be missed .",
    "the algorithm we propose in this article uses hierarchies of bounding volumes but it exhibits some specialties with respect to their construction . when using bounding volumes , several potentially contradicting requirements have to be fulfilled @xcite : the computation of the bounding volumes must be efficient , the representation of moving and fixed object by not too many bounding volumes has to be accurate , and the collision queries for bounding volumes should be fast .    in this article , we present ideas for a collision detection algorithm that satisfies these criteria , at least to a certain extent .",
    "the novelty is to use a ball covering of the motion which we regard as a curve in the 12-dimensional space of affine displacements .",
    "this ball covering can be converted into a system of simple bounding volumes of elementary objects ( points , lines , planes , and polygons ) .",
    "unlike other methods for collision detection based on bounding balls , this requires only the covering of a one - dimensional object ( the motion ) as opposed to the covering of a 3d - solid .",
    "the bounding volumes are constructed from the geometry of the moving object _ and _ its motion and thus accurately represent the portion of space occupied by the object as it moves .",
    "it is possible to refine the bounding volumes by subdividing the motion . with every subdivision step , the number of bounding volumes doubles while their volume shrinks roughly by the factor @xmath0",
    "this is much better than for ball coverings of non - curve like objects in 3d .",
    "furthermore , the worst case complexity of subdivision is usually not achieved because large parts of motion or moving objects can be pruned away at a low recursion level .",
    "we expect our algorithm to work particularly well for objects that lend themselves to polyhedral approximations .",
    "other desirable properties include :    * the possibility to report approximate time and location of potential collisions , * simple , fast and robust implementation because of recursive function calls without the need of sophisticated data structures , * the use of fast and robust primitive procedures which are well - known in computational geometry , and * the possibility of parallelization .    assuming a robust numerical implementation , collisions up to a pre - defined accuracy",
    "will always be detected correctly and reported non - collisions are guaranteed .",
    "the ball covering in the space of affine displacements is based on an underlying object - oriented euclidean metric @xcite which is derived from a mass distribution in the space of the moving object .",
    "this mass distribution already saw applications in computational kinematics , for example @xcite .",
    "one of its important properties , the simplicity of certain orbit shapes with respect to balls of affine displacements , was observed in @xcite .",
    "it is our aim , to exploit this for guaranteed collision detection under certain not too restrictive assumptions on the motion .",
    "since collision detection is a well - explored research topic , we want to compare the algorithm we propose with other approaches known from literature .",
    "there is a number of techniques for detecting collisions or computing the distance of moving objects by means of covering balls or hierarchies of covering balls @xcite .",
    "we cover the moving objects by different bounding volumes ( portions of balls and hyperboloids of one or two sheets ) . however , our construction is based on a covering of a curve in @xmath1 ( the motion ) by balls .",
    "this latter problem is typically simpler and of lesser complexity than constructing ball coverings for 3d solids .",
    "depending on the particular situation , certain curve specifics , for example piecewise rationality , can be used to efficiently generate systems of bounding balls .",
    "in contrast to collision detection with covering balls , our algorithm typically requires exactly one quadratic bounding surface ( sphere or hyperboloid ) per vertex , edge , and face . as in case of bounding spheres , efficient collision queries",
    "are possible by evaluation of quadratic functions only .",
    "several authors suggest bounding volume shapes which are specifically tailored to the needs of collision detection .",
    "typical examples are the generalized cylinders of @xcite and the s - topes of @xcite . usually , they are derived from some ball covering .",
    "an s - tope is , for example , the convex hull of a finite set of spheres .",
    "these shapes visually resemble our bounding volumes .",
    "the crucial difference is that our construction takes into account the objects motion in such a way that it is guaranteed to stay within the volume _ during the whole motion .",
    "_ in this sense , it resembles the space - time solids of @xcite or the implementation for jammed random packing of ellipsoids described in @xcite .",
    "a non - collision guarantee is often possible by means of a coarse representation .",
    "only if a collision can not be excluded , the bounding volumes are adaptively refined .",
    "the prize we pay for this exact collision detection with arbitrary accuracy is the necessity to re - compute the bounding volumes if the motion changes .",
    "it has to be emphasized that our approach requires no time - discretization or motion linearization .",
    "we work with the motion as it is analytically defined over a parameter interval .",
    "moreover , our algorithm should not be confused with algorithms for ( approximate ) distance calculation although it can report whether or not the distance falls beyond a certain threshold during a given motion . naturally , our algorithm is considerably slower than many of the sophisticated existing algorithms but its outcome is of a high quality . a reported no - collision is guaranteed .",
    "our algorithm should only be used when such a certification is crucial .",
    "the remainder of this article is organized as follows . after presenting some preliminaries about the object - oriented metric in",
    ", we describe the orbits of geometric primitives in and their basic collision tests in . in",
    "we present some ideas for constructing bounding balls for motions ( curves in high - dimensional euclidean spaces ) and in we synthesize everything via motion subdivision into a collision detection algorithm .",
    "presents examples and timing results .",
    "measuring the `` distance '' between two displacements is a fundamental problem of computational kinematics with many important applications .",
    "it is also afflicted with irresolvable defects such as the incompatibility of units in angle and lengths and dependence on the chosen coordinate frames . for our algorithm , we require a euclidean metric in the space of euclidean displacements . following @xcite , we equip the space @xmath2 of affine displacements with a left - invariant object - oriented euclidean metric and embed the euclidean motion group @xmath3 into @xmath2 . after identification of @xmath2 with @xmath1 ,",
    "the euclidean motion group is a sub - variety of dimension six in this space .",
    "the distance concept is based on a positive borel measure ( mass distribution ) @xmath4 , which defines the scalar product @xmath5 and the squared distance @xmath6 for any @xmath7 . in practice ,",
    "the mass distribution is usually given by a number of feature points @xmath8 with positive weights @xmath9 whence the scalar product and squared distance become @xmath10 on the right - hand sides , we use the usual scalar product and norm in euclidean three - space @xmath11 . in this way , the space @xmath2 is endowed with a euclidean metric and it makes sense to speak of `` balls of affine displacements '' .    as usual with distance measures for displacements , there is a degree of arbitrariness in this definition .",
    "however , the moving object will often suggest a mass distribution in a natural way and we expect that the algorithm s performance will only marginally depend on the choice of feature points . both , angle and distance , depend only on the barycenter @xmath12 of the mass distribution and its inertia matrix @xmath13 .",
    "these are defined via @xmath14 where @xmath15 is the total mass and @xmath16 is the @xmath17-th coordinate of @xmath18 . in the discrete case ,",
    "these formulas become @xmath19 the feature points @xmath20 and weights @xmath21 as well as the mass distribution @xmath4 can always be replaced by equally weighted vertices of the ellipsoid with equation @xmath22 without changing the metric .",
    "this is also true in the continuous case . in spite of the general definition of inner product and distance in @xmath1 , their computation is _ always _ very efficient",
    "the orbit of a point set @xmath23 with respect to a set @xmath24 of affine displacements is the point set @xmath25 .",
    "the orbits of points , lines , and planes ( `` fat '' points , lines , and planes ) with respect to a ball @xmath26 ( center @xmath27 , radius @xmath28 ) of affine displacements have been computed in ( * ? ? ?",
    "* section  4 ) .",
    "when summarizing the results from that article we always assume that @xmath27 is the identity .",
    "if this is not the case , the orbit shapes have to be displaced by means of  @xmath27 .",
    "the orbit of a point @xmath29 with respect to @xmath30 is a ball @xmath31 .",
    "its radius @xmath32 depends on the radius @xmath28 of @xmath30 , the point @xmath33 , and the metric in @xmath1 .",
    "it is given by the formula @xmath34 where @xmath35 are the eigenvalues of the inertia matrix .",
    "we call the function @xmath36 defined by the _ distortion rate _ at @xmath33 .",
    "it is constant on ellipsoids with axes parallel to the eigenvectors of the inertia matrix and attains its minimum at the barycenter of the mass distribution .",
    "this observation helps to picture the distribution of distortion rate in space .    for sufficiently small @xmath28 , the orbit of a line @xmath37 with respect to @xmath30",
    "is bounded by a one - sheeted hyperboloid of revolution @xmath38 with axis @xmath37 and the orbit of a plane @xmath39 is bounded by a two sheeted hyperboloid @xmath40 with plane of symmetry @xmath39 .",
    "we consider the orbit of the line @xmath37 at first .",
    "there exist a parameterization @xmath41 , @xmath42 , @xmath43 of @xmath37 such that @xmath44 we call the real values @xmath45 and @xmath46 the _ metric data of @xmath37 . _",
    "denote by @xmath47 coordinates in an orthonormal frame with origin @xmath48 and first basis vector @xmath12 .",
    "then the equation of @xmath38 reads @xmath49 this describes a hyperboloid of revolution if @xmath50 .",
    "similarly , the plane @xmath39 admits a parameterization @xmath51 with orthonormal vectors @xmath52 , @xmath53 such that @xmath54 the real values @xmath45 , @xmath55 , and @xmath56 are the plane s _ metric data . _ in the orthonormal frame with origin @xmath48 and vector basis @xmath57 , the equation of @xmath40 reads @xmath58 this is a hyperboloid for @xmath59 .",
    "now we consider the orbit @xmath60 of a simple polygon @xmath61 with respect to the ball @xmath30 of affine displacements ( `` fat polygon '' ) . for sufficiently small radius @xmath28 ,",
    "it is a solid , bounded by patches of spheres ( vertex orbits ) , one - sheeted hyperboloids of revolution ( edge orbits ) , and a two sheeted hyperboloid @xmath40 ( face orbit ) . in order to find the boundary curves of these surfaces patches , we consider the balls @xmath62 .",
    "their envelope is precisely @xmath60 .",
    "thus , the patch on @xmath40 that actually contributes to the boundary of @xmath60 is the projection of @xmath61 onto @xmath40 via the surface normals .",
    "any point @xmath33 in the polygon s plane @xmath39 gives rise to two projected images on @xmath40 which are symmetric with respect to @xmath39 .",
    "the patch boundaries on @xmath40 are the projection of the polygon edges .",
    "the following proposition completely describes the projected image of  @xmath61 .",
    "its proof is a straightforward calculation .",
    "[ prop:1 ] denote by @xmath63 the non - uniform scaling @xmath64 the projection of a polygon @xmath61 in the plane @xmath65 onto the hyperboloid @xmath66 via the surface normals consists of those points @xmath47 whose orthographic projections @xmath67 into @xmath65 lie in  @xmath68 .",
    "proposition  [ prop:1 ] shows that the boundaries between the individual surface patches on the fat polygon @xmath60 are circular and hyperbolic arcs in planes which are `` vertical '' over @xmath39 .",
    "this is illustrated in figure  [ fig : fat - polygon ] .",
    "the left - hand drawing shows the original polygon in thick line - style , its scaled copy ( the orthographic back - projection of the patch boundaries ) and the relevant circular and hyperbolic arcs .",
    "the orbits of points , edges and faces with respect to balls of affine displacements are solids bounded by pieces of spheres , hyperboloids of revolutions and hyperboloids of two sheets .",
    "in particular , their boundary is composed of piecewise quadratic surfaces and allows to efficiently test for the basic collisions moving vertex vs. fixed face , moving edge vs. fixed edge and moving face vs. fixed vertex ( ( * ? ? ?",
    "* section  9.1 ) and @xcite ) .",
    "note that we need not care about `` degenerate '' collisions ( for example edge contained in face ) because we use fat points , edges and faces .",
    "it is important that the basic collision tests are implemented efficiently and reliably , and that numeric issues must not result in an invalid `` no - collision '' response . due to their simple nature ,",
    "this is possible .      via tolerancing",
    ", the moving vertices are converted into balls so that we actually have well - known sphere vs. polygon collision queries ( * ? ? ?",
    "* section 5.2.8 ) .",
    "these are especially efficient and simple to implement , if the fixed polygon @xmath69 is convex .      here",
    "we have to test whether a line segment intersects a hyperboloid of revolution between a pair of parallel circles .",
    "note that we do not have to test collision of the line segment with the bounding balls at either end of the moving edge because these are already handled by the preceding test .",
    "the intersection problem can be converted into a test whether a quadratic polynomial has zeros in a given interval : denote by @xmath48 and @xmath12 the intersection points of the line segment with the two parallel planes .",
    "( should the original line segment be parallel to the two planes , we have to test whether a similar function has real roots .",
    "this is even simpler . )",
    "we parameterize the line segment with end points @xmath48 and @xmath12 by @xmath70 , @xmath71 $ ] . plugging @xmath72 into the algebraic equation of the hyperboloid of revolution",
    ", we obtain a quadratic equation @xmath73 . the exact test whether it has roots in @xmath74 $ ] is a trivialization of more advanced algorithms @xcite .",
    "we have to test whether a point @xmath75 lies between the two sheets of a hyperboloid and whether the orthographic projection of this point lies in the scaled copy @xmath68 of the moving polyhedron . here , @xmath63 is the non - uniform scaling of equation  .",
    "these two tests amount to determining the sign of a quadratic function at @xmath75 and a point - in - polygon test ( * ? ? ?",
    "* section 5.4.1 ) .",
    "again , the hyperboloids and balls for edges and vertices can be ignored because their intersections are already handled by preceding tests .",
    "our collision detection algorithm also requires the computation of a bounding ball for a motion @xmath76 , considered as a curve in @xmath77 .",
    "this space is equipped with the object - oriented euclidean metric derived from a mass distribution @xmath4 in the space of the moving polygon .",
    "the problem of finding the ( unique ) minimal enclosing ball for an arbitrary curve @xmath76 in a euclidean space is hard .",
    "however , the requirements of our algorithm allow simplifications that make the problem not only tractable but allow efficient solutions in many relevant cases :    * we are not looking for the optimal bounding ball . a `` good '' approximation is acceptable as well .",
    "* we are allowed to subdivide the curve @xmath76 and compute bounding balls for the individual segments .",
    "if the curvature and arc - length of @xmath76 can be bounded , after a sufficient number of subdivisions one would assume that the ball over the diameter defined by the curve end - points will bound the complete curve .",
    "below , in we prove a slightly weaker statement .",
    "it gives bounding balls whose radius asymptotically equals half the curve length .",
    "for typical motions in robotics , bounds for arc - length and curvature can be obtained if such bounds are known for the joint angles .",
    "* for the important class of piecewise rational motions , the convex hull property allows to use the control polygon for efficient bounding spheres computation .",
    "here is a simple method to construct bounding balls for short curve segments with small curvature .",
    "[ prop:2 ] let @xmath78 be a @xmath79 curve parameterized by @xmath80 \\to    { \\mathbb{r}}^d$ ] with arc - length @xmath81 and curvature @xmath82 bounded by @xmath83 .",
    "define @xmath84 and @xmath85 .",
    "then the complete curve is contained in the ball @xmath86 with radius @xmath87 and center @xmath88 .",
    "the proof of is based on ( * ? ? ?",
    "* lemma  5 ) which we repeat here for convenience of the reader :    [ lem:1 ] assume that @xmath89 is an interval with @xmath90 and @xmath91 is an arc length parameterization of a @xmath79 curve @xmath78 with curvature @xmath82 such that @xmath83 . then there is a parameterization @xmath92 of @xmath78 such that @xmath93 , @xmath94 is a unit vector orthogonal to @xmath95 , @xmath96 and @xmath97 .     with bounded arc length and curvature .",
    "]    this lemma gives us a bounding volume for the curve @xmath78 :    [ lem:2 ] we use the same notation and assumptions as in . in case @xmath98",
    ", the curve @xmath99 parameterized by the restriction of @xmath100 to @xmath101 $ ] is contained in the area bounded by    * the circular arcs @xmath48 , @xmath102 of radius @xmath32 and length @xmath103 which start at @xmath104 and share the oriented tangent with @xmath99 in this point and * the segments @xmath105 , @xmath106 of involutes to these circular arcs which connect the point @xmath107 with the arc end points @xmath108 ,  @xmath109    ( ) . in case of @xmath110 , the curve @xmath99 is contained in the volume obtained by rotating this area about the curve tangent in  @xmath104 .",
    "we consider the case @xmath111 first",
    ". implies that the curve point @xmath76 lies in the exterior of the two circles through @xmath48 , @xmath102 .",
    "because of the bounded arc length @xmath103 , the curve will not go beyond the circular involutes @xmath105 , @xmath106 .",
    "if @xmath110 , the claim follows by considering the graph of the function @xmath112 in the plane spanned by @xmath95 and @xmath113 .",
    "the curve @xmath78 has an arc - length parameterization that satisfies the criteria of .",
    "hence , we can enclose it in the volume given by . in order to prove the proposition",
    ", we have to show that the ball @xmath114 contains this volume .",
    "center @xmath115 and radius @xmath17 are chosen such that the start points @xmath116 , @xmath108 and @xmath109 of curve and involutes lie on the ball boundary .",
    "it is a little tedious but possible to verify that it also contains the involute arcs @xmath105 ,  @xmath106 for any value @xmath117 $ ] ( ) .",
    "now we sketch an algorithm for collision detection by means of toleranced motions .",
    "we describe only the case of collisions between a fixed polygon @xmath69 and a moving polygon @xmath61 , undergoing a motion @xmath76 .",
    "these polygons are assumed to be simple and we think of them as being composed of vertices , edges , and one face .",
    "for the actual implementation , it is advantageous to have access to lists of vertices and edges . collision detection for the case of polyhedra can be reduced to this situation .",
    "the basic idea of motion tolerancing is to cover a given one - parametric motion by a sequence of full - dimensional motions and then test the orbits of geometric entities ( balls , straight - line segments , polygons ) with respect to these full - dimensional motions for collision .",
    "if no collision occurs , it can also be excluded for the originally given motion .",
    "if this is not the case , the sequence of covering motions needs to be refined .",
    "the motion @xmath76 is a curve on @xmath118 , defined over an interval @xmath119 $ ] .",
    "we assume that we can compute a `` small '' bounding ball for the restriction of @xmath76 to any sub - interval of @xmath120 . here , the words `` ball '' and `` small '' refer to the object - oriented euclidean metric in @xmath1 , induced via a positive borel measure @xmath4 in the space of the moving polygon ( ) .",
    "we start our algorithm by a pre - processing step where we compute for every edge @xmath121 of the moving polygon @xmath61 and for the plane @xmath39 of @xmath61 the metric data as defined by and .",
    "this gives us a pair @xmath122 for every edge and a triple @xmath123 for  @xmath39 . from a computational point of view , this amounts to the principal axis transform of a one- or two - dimensional quadric .",
    "transcendental functions are involved only at this stage of the algorithm . since the metric data depends only on the moving polygon @xmath61 and the borel measure @xmath4 ,",
    "it can be re - used for different motions @xmath76 and different fixed polygons  @xmath69 .    in the algorithm itself ,",
    "we construct a bounding ball @xmath124 of @xmath76 and test the toleranced moving polygon @xmath61 with respect to this ball for collision with the fixed polygon @xmath69 .",
    "the necessary tests are described in section  [ sec : collision - tests ] .",
    "we perform them with respect to a certain `` zero - position '' of @xmath61 in the plane with equation @xmath65 .",
    "this requires the prior transformation of @xmath69 via @xmath125 . in return for the necessary inversion of a @xmath126 matrix",
    "we get an easier and cleaner implementation .",
    "if the orbit of @xmath61 with respect to @xmath124 intersects @xmath69 , we recursively subdivide the motion @xmath76 and repeat the collision test .",
    "if a `` no - collision '' predicate can not be given before the termination criterion , the algorithm returns a time interval of possible collisions .",
    "otherwise , if no collision occurs , it returns an empty interval .",
    "it is possible to add information on the location and type of collision .",
    "moreover , the sub - tasks obtained from the repeated subdivision of @xmath76 can be solved in parallel .",
    "we suggest to terminate this recursive algorithm as soon as the product @xmath127 of current bounding ball radius @xmath28 and maximal distortion rate attained inside the moving polygon is smaller than a pre - defined value @xmath128 .",
    "pre - computing this value amounts to solving a quadratic program . with this termination criterion",
    "only sub - motions that bring the two polygons within a distance of @xmath129 to each other remain without a no - collision guarantee . given the limited accuracy of robot motion ,",
    "this is probably desirable anyway .",
    "parameter interval of @xmath100 too many recursions @xmath130 center @xmath27 , radius @xmath28 parameter interval of @xmath100 radius too small @xmath131 @xmath132 $ ] ( empty list )    @xmath133 @xmath134 true true true false    the complete algorithm in pseudo - code is displayed in listings  [ alg:1 ] and [ alg:2 ] .",
    "the first call of procedure should have the complete vertex , edge and face lists of both , moving and fixed polygon as arguments .",
    "a limit on the recursion depth is good programming practice but , from a theoretical point of view , not necessary .",
    "[ rem:1 ] at this point we would like to mention one implementation detail we have not explained so far : it is possible that the radius @xmath28 of the bounding ball @xmath124 is so large that the fat edge or face is no longer bounded by a hyperboloid , compare equations   and .",
    "the simplest method to circumvent this problem is to subdivide the motion and thus decrease the ball radius @xmath28 .",
    "but it is also possible to exploit this behavior for simplified collision tests :    * if the inequality @xmath135 holds for edge @xmath121 , the fat edge is contained in the union of the two fat points over its end - points .",
    "thus , we may be able to exclude a collision by testing for the intersection of a line segment with balls ( * ? ? ?",
    "* section  5.3.2 ) . * if @xmath136 , the fat vertices of the moving polygon envelope the complete fat polygon . the collision between @xmath61 and @xmath69 can be tested by solely checking possible intersections of @xmath69 with these vertex balls ( * ? ? ?",
    "* section  5.2.8 ) . * if either @xmath137 or @xmath138 hold , the vertex spheres not necessarily envelope the toleranced position of @xmath69 . by the cauchy interlacing theorem @xcite ,",
    "there exist two straight lines in the plane of @xmath61 through the point of minimal distortion rate that divide the plane into four regions . in the interior of each of these regions ,",
    "the situation is either as in the case @xmath139 or as in the case @xmath140 and can be handled accordingly .",
    "should @xmath61 overlap two or more regions we may subdivide  @xmath61 .    finally , we would like to point out a possibility to considerably speed up the algorithm if the recursive subdivision and bounding ball construction for the motion @xmath76 produces a _ nested _ ball covering , that is , a ball covering where the balls after subdivision are contained in the ball before subdivision . in this case , it is sufficient to test only those elements for collision for which a collision at a preceding recursion level could not be excluded .",
    "it is possible to incorporate this in the presented algorithm by maintaining lists of vertices , edges and faces that still require collision testing .",
    "methods for generating nested ball coverings are available @xcite .",
    "their applicability in our algorithm depends on the type of motion we consider .",
    "in this section , we describe a couple of examples in more detail .",
    "the first group of examples considers a single fixed and a single moving polygon that undergoes two different motions , one with collision , the other without .",
    "the second group of examples is designed to demonstrate the asymptotic behavior of our algorithm .",
    "we consider the collision of two squares after subdivision into @xmath141 sub - squares .",
    "the reader will notice that we always consider convex polygons .",
    "this simplifies the implementation , in particular the collision test of moving vertex and fixed face .",
    "non - convex faces can always be decomposed into convex parts .",
    "the impact on the overall performance should be small .    for the computation of examples we used a personal computer with an intel core 2 duo cpu with 3000 mhz , 8 gb system memory and a 64-bit ubuntu 14.04 .",
    "programming language for this simple implementation is c++ , the code was compiled using g++ in version 4.8.2 .      in this section",
    "we consider two different motions of a moving polygon @xmath61 and its possible collisions with a fixed polygon @xmath69 ( see figures  [ fig : showmotion - ni ] and [ fig : showmotion - i ] ) . the polygons @xmath61 and @xmath69 are convex octagons . during the first motion ,",
    "the two polygons do not collide , during the second motion , they do . in both cases ,",
    "the motion is rational of degree eight .",
    "in fact , the motions differ only by a constant translation .",
    "the borel measure is derived from point masses of equal weight in the vertices of the moving polygon  @xmath61 and in a point over the barycenter of @xmath61 with comparably small distance to the plane of @xmath61 .",
    "this ensures that a scaled copy of the inertia ellipsoid roughly captures the shape of  @xmath61 .",
    "the motion is a rational bzier curve @xmath76 of degree eight in @xmath142 with positive weights .",
    "we use the curve point @xmath143 as center of a bounding ball @xmath124 and choose the radius @xmath28 as the maximal distance to a control point .",
    "should this ball be too large to exclude collisions , we subdivide the curve by means of de casteljau s algorithm , compute bounding balls for both parts and test again for collisions .",
    "this procedure we repeat until we can exclude a collision or until we reach the termination criterion described in",
    ".    it would be possible to use different strategies for computing bounding balls , for example the minimal bounding ball of the control polygon @xcite or an approach inspired by .",
    "we do nt expect much difference but remark that neither approach is guaranteed to produce a nested ball covering .",
    "thus , we can not profit from pruning away non - colliding objects from previous stages .",
    "we did not implement a special handling for balls of large radius as explained in remark  [ rem:1 ] but simply subdivide in this case .    in the first example , a collision can be excluded .",
    "the total computation time minus the time for pre - processing is 0.1427 seconds .",
    "the maximal recursion depth is eight but only 173 collision tests polygon vs. fat polygon are performed . from we",
    "can infer that excluding a collision in this example is rather difficult because the moving polygon is always `` near '' the fixed polygon .",
    "if we translate the moving polygon by about half of its diameter away from the fixed polygon , the computation is roughly half as long .    in the second example , the two polygons interfere during a time interval .",
    "we require a maximum of eight recursions and 0.0075 seconds until we reach the termination criterion . the value of @xmath129 is set to about one percent of the polygon diameters .",
    "a total of nine collision tests polygon vs. fat polygon are performed .",
    "in example  2 ]     in example  2 ]      now we consider the potential collision of two polyhedral surfaces that were obtained from two squares by subdivision into @xmath141 sub - squares .",
    "thus , we have @xmath144 collision tests of moving vs. fixed polygon .",
    "of course this example is artificial but the algorithm does not profit at all from the regular structure so that conclusions for large polyhedral surfaces in general seem justified .",
    "the two subdivided squares undergo three different rational motions of degree eight : one with a collision , one with a near - collision and one with a `` clear '' no - collision .",
    "the rotational component of these motions is always the same , they differ only in a constant translation .",
    "we run the algorithm for @xmath145 until we have a no - collision guarantee or reach the termination criterion of the previous examples .",
    "the recorded data is the total time ( average over 100 runs ) , the total time per moving polyhedron ( that is , collision of one moving square with @xmath141 fixed squares ) and the average time of one collision test square vs. square .",
    "finally , we distinguish between two different strategies : we either use one global mass distribution for the complete moving polyhedral surface or we compute an individual mass distribution for each moving square .",
    "the aim is to explore whether the additional computational burden of the latter strategy is compensated by the faster detection of a non - collision .",
    ".test data for collision , near - collision and no - collision with a global mass distribution [ cols= \" > , > , > , > , > , > , > \" , ]      +    the data for total and average time is displayed in table  [ tab:1 ] for a global mass distribution and in table  [ tab:2 ] for individual mass distributions .",
    "the total time per moving polygon is visualized in figure  [ fig : time - per - moving - square ] for a global mass distribution and in figure  [ fig : time - per - moving - square-2 ] for individual mass distributions . in these figures ,",
    "we plot the time per moving square as a histogram over the moving squares .",
    "the height of each box is proportional to the time for excluding a collision or reaching the termination criterion without a no - collision guarantee .",
    "the latter case is indicated by a colored box .",
    "we see that collisions or near - collisions occur only at one corner and observe an increase of computation time in the vicinity of this corner .",
    "c|cccc & @xmath146 & @xmath147 & @xmath148 & @xmath149 + collision & & & & + yes &        &        &        &         + near &        &        &        &         + no &        &        &        &        c|cccc & @xmath146 & @xmath147 & @xmath148 & @xmath149 + collision & & & & + yes &        &        &        &         + near &        &        &        &         + no &        &        &        &        the examples of this section allow to draw the following conclusions :    * the asymptotic behavior is linear in the total number @xmath144 of collision tests .",
    "this is to be expected since large @xmath150 means also a large number of no - collisions .",
    "the total time roughly equals the average time for the exclusion of a collision times the number of intersection tests for two polygons . *",
    "it is better to use individual mass distributions , in particular in the presence of collisions .",
    "the reason is that the time for computing the mass distribution is negligible but very often speeds up the detection of a non - collision .",
    "the ratio of total times is between approximately 1.5 in case of no collision and 2.0 in case of a collision .",
    "this is probably because many near - collisions in the latter case are recognized as no - collisions at a lower recursion depth . *",
    "the algorithm can greatly profit from a hierarchy of bounding polyhedra .",
    "this is nicely illustrated by figures  [ fig : time - per - moving - square ] and [ fig : time - per - moving - square-2 ] . in order to give a no - collision guarantee , it is sufficient to subdivide only the squares that , at a given recursion depth , correspond to colored boxes .",
    "at least in our examples , large parts of the polyhedral surface can be pruned away at low recursion depths .",
    "in this paper we exploited the simple orbit shape of points , lines , planes and polygons with respect to balls @xmath151 of affine displacements for an efficient collision detection algorithm .",
    "emphasis is put on reliable no - collision guarantee , simple implementation and fast detection of intervals with no collision .",
    "a prototype implementation demonstrates that real - time collision detection for reasonably simple polyhedral shapes undergoing a rational motion is possible , provided there are few expected collisions or near - collisions .",
    "our algorithm works with affine deformations while for many of the envisaged applications just rigid body displacements are required .",
    "thus , one might wonder whether something could be gained by a restriction to euclidean motions .",
    "however , the tolerancing analysis in @xcite gives no evidence for this believe .",
    "linearization of @xmath152 and subsequent error estimation comes at the cost of more complicated orbit shapes .",
    "for example , the orbits of points with respect to the intersection of a ball with @xmath3 are contained in offsets to ellipsoids .",
    "collision tests with these surfaces are so much harder than with balls that one is certainly willing to accept more recursions instead .",
    "a necessary ingredient in our algorithm is the possibility to efficiently generate bounding balls for curve segments .",
    "we already remarked that for sufficiently short curves of small curvature one can probably use the ball for which the curve end points are antipodal .",
    "it would be good to have a more precise statement .",
    "moreover , we emphasize the need for efficient algorithms that generate nested ball coverings for motions of technical relevance , in particular piecewise rational motions .",
    "this is topic of future research .",
    "this research was supported by the austrian science fund ( fwf ) : p23831-n13 .",
    "schrcker , b.  jttler , m.  aigner , evolving four - bars for optimal synthesis , in : m.  ceccarelli ( ed . ) , proceedings of eucomes 08 , springer , 2009 , pp .",
    "http://dx.doi.org/10.1007/978-1-4020-8915-2 [ ] .",
    "s.  quinlan , efficient distance computation between non - convex objects , in : proceedings of ieee conference on robotics and automation , vol .  4 , san diego , united states , 1994 , pp .",
    "http://dx.doi.org/10.1109/robot.1994.351059 [ ] .",
    "m.  greenspan , k.  burtnyk , obstacle count independent real - time collision avoidance , in : proceedings of ieee international conference on robotics and automation , minneapolis , minnesota , us , 1996 , pp . 10731080 .",
    "b.  martnez - salvador , a.  p. del pobil , m.  prez - francisco , very fast collision detection for practical motion planning part i : the spatial representation , in : proceedings of ieee conference on robotics and automation , leuven , belgium , 1998 , pp .",
    "624629 .",
    "r.  weller , g.  zachmann , a unified approach for physically - based simulations and haptic rendering , in : proceedings of the 2009 acm siggraph symposium on video games , sandbox 09 , acm , new york , ny , usa , 2009 , pp .",
    "e.  j. bernabeu , j.  tornero , m.  tomizuka , collision prediction and avoidance amidst moving objects for trajectory planning applications , in : proceedings of ieee conference on robotics and automation , seoul , korea , 2001 , pp .",
    "38013806 .",
    "a.  donev , s.  torquato , f.  h. stillinger , neighbor list collision - driven molecular dynamics for nonspherical hard particles : ii .",
    "applications to ellipses and ellipsoids , journal of computational physics 202 ( 2005 ) 765793 ."
  ],
  "abstract_text": [
    "<S> we present a method for guaranteed collision detection with toleranced motions . </S>",
    "<S> the basic idea is to consider the motion as a curve in the 12-dimensional space of affine displacements , endowed with an object - oriented euclidean metric , and cover it with balls . </S>",
    "<S> the associated orbits of points , lines , planes and polygons have particularly simple shapes that lend themselves well to exact and fast collision queries . </S>",
    "<S> we present formulas for elementary collision tests with these orbit shapes and we suggest an algorithm , based on motion subdivision and computation of bounding balls , that can give a no - collision guarantee . </S>",
    "<S> it allows a robust and efficient implementation and parallelization . </S>",
    "<S> at hand of several examples we explore the asymptotic behavior of the algorithm and compare different implementation strategies .    </S>",
    "<S> keywords : toleranced motion , collision detection , bounding ball , bounding volumes .    </S>",
    "<S> 2010 msc : 65d18 , 70b10 </S>"
  ]
}