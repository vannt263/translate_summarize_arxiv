{
  "article_text": [
    "atomic - scale modeling plays an important role in analyzing , understanding , and predicting materials behavior .",
    "many phenomena and processes of interest in this context involve length scales that require simulations of tens of thousands to several millions of atoms over time scales that span nanoseconds or more . the application of electronic structure methods for this purpose commonly referred to as _ ab initio _",
    "models is not only prohibitively expensive from a computational standpoint but many times even unnecessary as the relevant interactions do not require an explicit description of the electronic structure .",
    "this is the realm of semi - empirical methods , most notably interatomic potentials , for which the computation of interatomic forces is not only several orders of magnitude faster than with popular electronic structure methods such as density functional theory @xcite ( dft ) but also exhibits a much more favorable scaling with system size .",
    "in contrast to e.g. , dft , where generic exchange - correlation functionals are available that can be applied to materials of almost arbitrary composition , interatomic potentials are typically constructed for specific elements and compounds , and often with particular applications in mind .",
    "since the development of interatomic potentials is frequently a tedious and time consuming process , it requires tools that are both efficient and flexible .",
    "while various potential development tools have been developed for internal use by research groups , relatively few have been made widely available including e.g. , potfit @xcite , garffield @xcite , meamfit @xcite , the `` eam alloy potential generator '' @xcite , and the package for artificial neural network ( ann ) potentials @xcite .",
    "several of these codes target specific potential types and/or functional forms ; also they can be difficult to extend and/or integrate with other processing pipelines , in particular the popular python scripting language .",
    "the complexity of systems targeted by atomic scale modeling continues to increase while the possibilities for machine learning and systematic model construction multiply .",
    "thus there is a need for efficient and flexible potential construction tools that are extensible and can be integrated in more complex model development setups . in response to this need",
    "we have developed the atomicrex code , the main features of which are    * support for a variety of interatomic potential forms , * the possibility for the user to define arbitrary functional forms via a built - in math expression parser , * very high computational efficiency enabling large training and validation sets , * a range of predefined properties that can be combined to generate more complex properties , in particular energy differences , defect energies , etc . , which can be included in both training and validation stages , * an interface to the popular python programming language , which enables interfacing with various third - party libraries , and * an object - oriented code framework that readily allows addition of new potential models , structures , and properties .    the models created using atomirex can be used for e.g. , in simulation codes such as lammps @xcite or atomistica @xcite but can also be made available to the scientific community e.g. , via the knowledgebase for interatomic potentials @xcite .    in the following",
    "we first provide a rough outline of the atomicrex workflow from a user perspective ( sect .",
    "[ sect : work - flow ] ) and introduce some key concepts ( sect .",
    "[ sect : key - concepts ] ) .",
    "we continue by summarizing the optimization algorithms ( sect .",
    "[ sect : optimization - algorithms ] ) and potential formats ( sect .",
    "[ sect : potentials ] ) that are currently supported as well as the specification of atomic structures ( sect .",
    "[ sect : structures ] ) and user - defined properties ( sect .",
    "[ sect : derived - properties ] ) .",
    "we close with an outlook indicating directions of possible future developments ( sect .",
    "[ sect : conclusions - and - outlook ] ) .",
    "atomicrex is available under the gnu general public license and is hosted in a public git repository on gitlab , where its source code is available for download and which can be accessed via http://atomicrex.org .",
    "most of the code base is written in c++ , with python bindings enabling integration with third - party libraries and custom model fitting schemes .",
    "an extensive user guide that contains a comprehensive description of features , input file parameters , and the python interface along with various examples is available online .",
    "a separate documentation of the c++ and python application programming interfaces ( apis ) are available as well .",
    "from a technical viewpoint , atomicrex processes a user - supplied input file in extended markup language ( xml ) format that describes the job to be performed . here , we will not discuss the specific format of this file or any of the parameters it contains , as a very extensive user guide including various examples is available online . in the following ,",
    "we rather emphasize key steps and concepts of the program .",
    "a general overview of the objects and entities that play a role in the architecture of atomicrex is provided in fig .",
    "[ fig : overview ] .",
    "generally , a job can be divided into two parts , the training phase and the output phase . during the training phase selected degrees of freedom ( parameters ) of the model ( usually an interatomic potential )",
    "are varied such that the predicted properties ( energies , forces , elastic constants , etc .",
    ", see sect .",
    "[ sect : properties ] ) most closely match the target data .",
    "the training phase is followed by the validation phase . here",
    ", additional properties of interest can be calculated that were not included in the fitting .",
    "this allows a convenient separation of the available data into training and validation sets , where the latter serve to assess the predictive capability of a model .",
    "once the training process has been completed , the resulting model can be exported in various forms adequate for the use with popular atomistic simulation codes such as lammps @xcite .",
    "atomicrex operates with two principal types of entities : potentials ( models ) and structures .    *",
    "a _ potential _ consists of a parameter set and a specific routine that calculates the total energy and the forces given an atomic structure . * a _ structure _ consists of a simulation cell with or without periodic boundary conditions and a list of atoms .",
    "potentials and structures each possess a set of _ degrees of freedom _ and a set of _ properties _ , which will be discussed next .",
    "a degree of freedom ( dof ) describes an aspect of a model or structure that can be continuously varied .",
    "the dofs of a potential are varied during the training process to minimize the objective function and optimize the model with respect to the desired properties whereas the dofs of an atomic structure may be varied during structure relaxation , i.e. commonly in order to minimize the potential energy of a configuration .",
    "the calculation of properties for a given set of model parameters may involve relaxation of atomic structures ; dofs of an atomic structure are therefore varied in an inner optimization loop .",
    "the dofs of the model are varied in an outer optimization loop as part of the fitting process .",
    "there exist different classes of dofs : in the most simple case , a dof is a scalar variable that describes a single parameter , e.g. , the parameters of a lennard - jones potential or the lattice parameter of a cubic lattice .",
    "furthermore , multi - dimensional dofs exist that control more complex aspects , e.g. , the atomic positions of a structure or the coefficients of a spline potential function .",
    "each type of potential or structure in atomicrex exposes a certain set of such dofs .",
    "the user has to specify an initial value in the input file for each dof .",
    "while by default every dof is static , i.e. , its value does not change during a job , the user can mark selected dofs to be included in the fitting process .",
    "properties are quantities that can be calculated from the dofs of a structure or model , i.e. , they are functionals of the dofs .",
    "the calculation of properties of a structure , e.g. , its elastic constants , can be rather complex and involve the evaluation of energy and forces  possibly multiple times and including an inner relaxation loop .",
    "by contrast , properties of potentials can be directly derived from the current values of the dofs of the model .",
    "this complexity is handled efficiently and transparently by the framework of atomicrex .",
    "each type of structure and potential is associated with a specific set of properties . by default only very few of them",
    "are calculated , such as the potential energy and the volume of a structure .",
    "however , the user can enable the calculation of additional properties ( e.g. , elastic constants , energy differences , lattice parameters , etc . ) independently for the training and/or the final validation stage .",
    "when including a property in the training phase , one has to specify a target value for that property .",
    "the target value is a scalar in the case of simple properties , e.g. , the energy of a structure , or it can be multi - dimensional ( vector ) data such as the forces acting on the atoms of a structure . as discussed below",
    ", each property included in the training set contributes according to its weight to the objective function , which is minimized during the fitting process .",
    "note that properties are calculated after the dofs of a structure have been relaxed .",
    "this implies that , if relaxation is enabled for certain dofs , the fitting process consists of two nested minimization loops : each time the objective function for the potential fitting is evaluated in the outer optimization loop , the energy of all structures is first minimized with respect to the structural dofs .",
    "a third level of variation may exist if the relaxation of the atomic positions has been enabled . in that case",
    ", the atomic positions must be relaxed each time the total energy is calculated for a given trial configuration of the dofs for which relaxation is enabled .      the objective ( or cost ) function is the main quantity being computed by atomicrex in order to optimize the model toward the target values .",
    "it can be written in the general form @xmath0 with the _ relative weight factors _ @xmath1 which can be assigned by the user at the level of structure groups , structures , and individual properties providing fine - grained control over the importance of different targets during the fitting process .",
    "the residual @xmath2 is calculated for each property from the predicted , @xmath3 , and the target value , @xmath4 , according to the selected _ residual style _",
    ", which can be specified by the user .",
    "for example , the ` squared ` residual style implies @xmath5 ^ 2 .",
    "\\label{eq : residual}\\end{aligned}\\ ] ] here , @xmath6 is the _ tolerance _ that has been specified for the property as explained below .    the rationale behind this nested weight model described by eq .",
    "( [ eq : objective - function ] ) is as follows .",
    "when fitting potentials , certain structures are usually more important than others .",
    "for example , in the case of silicon the diamond structure should naturally be given a higher weight than , say , the face - centered cubic structure , whereas the opposite applies to e.g. , aluminum or gold . to achieve this balance one can set the weights of individual structures ( @xmath7 ) as well as structure groups ( @xmath8 ) .",
    "note that these weights are normalized on each individual hierarchy level such that the ratio between structures remains the same when the weights of individual properties are changed .",
    "similarly , it is advantageous to use `` intuitive '' weights to express for example the notion that the cohesive energy of a certain structure is `` three times more important '' than the bulk modulus .",
    "these properties , however , have very different units and thus the differences between predicted and target values , @xmath9 , can be of very different magnitudes . it is usually inconvenient to adjust the property weights manually to correct for this discrepancy .",
    "one can partially remedy the situation by normalizing the residual by the target value of the property , essentially making it unitless : @xmath10 ^ 2.\\end{aligned}\\ ] ] however , this approach obviously has problems when the target value is zero .",
    "a more refined approach is to use the _ tolerance _",
    "parameter @xmath11 , introduced in eq .",
    "( [ eq : residual ] ) , that enables one to specify the acceptable range of deviation for each property .",
    "it naturally carries the same unit as the property such that all residuals are unitless .",
    "this allows one to use this parameter rather sensibly .",
    "for example , it is often reasonable to aim for a cohesive energy to agree within , say , @xmath12 with the target value , whereas for an elastic constant @xmath13 could be an acceptable deviation . for convenience atomicrex provides several presets , which assign default tolerance factors based on the unit of each property .",
    "sectionoptimization algorithms [ sect : optimization - algorithms ]    at present atomicrex _ directly",
    "_ supports the following local and global optimization algorithms , which are selected in the input file :    * the limited - memory broyden - fletcher - goldfarb - shanno ( l - bfgs - b ) minimizer , which is a popular quasi - newton method with support for bound constraints , * the `` simply poking around '' ( spa ) minimizer , which randomly samples the parameter space , and * all algorithms provided by the nlopt library @xcite , which includes methods for global optimization , local derivative - free optimization , and local gradient - based methods .",
    "in addition an even larger number of optimization algorithms are accessible via the python interface ( sect .",
    "[ sect : python - interface ] ) in combination with third - party libraries such as scipy @xcite and scikit - learn @xcite .",
    "in other words , atomicrex provides an efficient compute engine that can be used as a kernel in optimization algorithms implemented in the python language .",
    "atomicrex supports a number of different potential types that at present include e.g ,    * the embedded atom method ( eam ) @xcite , * the modified embedded atom method ( meam ) @xcite , * tersoff - abell style potentials @xcite , * analytic bond - order potentials in the generalized brenner format @xcite , * the concentration dependent embedded - atom method ( cd - eam ) format @xcite , * the angular dependent potential ( adp ) format @xcite , and * stillinger - weber style potentials @xcite ,    where the latter two are examples for potential formats that can be generated using the math parser functionality described below .",
    "these types can be combined to develop potentials for complex multi - component systems that can not be described by a single model .    within the spectrum of potential types listed above ,",
    "atomicrex enables the user to choose functional forms with considerable freedom .",
    "this functionality is implemented by integrating the muparser math parsing library @xcite . for example , a general , single - element eam potential consists of three functionals , each of which can be specified freely by the user in terms of the mathematical form and the number of parameters ( degrees of freedoms ) it contains .",
    "for multi - element potentials , functionals can be defined once and shared between several ( pair - wise or other ) interactions . and",
    "it is possible to link parameters that occur in more than one functional in order to reduce the effective number of degrees of freedom to be fitted .",
    "the user guide contains a number of examples that demonstrate this functionality in practice and exhibit its flexibility .",
    "structures are one of the principal entities in atomicrex .",
    "they are specified in the main input file and can be compiled into groups , which is particularly convenient when dealing with large sets of structures .",
    "each structure exhibits a set of computable properties that can be included in the cost function during training or solely in the validation phase , e.g. , in order to assess the predictive power of a model .    for structure specification , the user can resort to a large database of predefined structures , which includes practically all important crystalline as well as some non - periodic structures for single and two component systems as well as a number of ternary structures .",
    "these procedural structures are all parametrized in terms of lattice parameter , axial ratio , internal degrees of freedom , etc .",
    "this enables to efficiently relax structures with respect to these structural parameters , e.g. for directly fitting to properties such as the cohesive energy or both clamped and relaxed - ion elastic constants .    in addition , it is possible to include custom structures , which can be either specified directly in the xml input file or imported from external files in standard data formats used by dft and md simulation codes .",
    "structure databases can be kept in separate files to reference and re - use them from more than one fitting job .",
    "when training potential models it is often key to include information that pertains to ( energy ) _ differences _ between structures .",
    "this concerns for example point defects ( vacancies , interstitials , substitutional atoms ) , line defects ( dislocations ) , and planar defects ( e.g. , surfaces , interfaces , antiphase boundaries , or stacking faults ) but also structural energy differences ( e.g. , hexagonal close - packed vs. face - centered cubic or face - centered cubic vs. body - centered cubic ) .    to this end , atomicrex provides a mechanism that enables the user to define a defective structure ( including e.g. , a vacancy or an interstitial atom ) based on a reference structure , typically represented by a primitive unit cell . the computation of defect formation or binding energies is then accomplished by defining a so - called _ derived property _ , which links several other properties , often from more than one structure .",
    "for example , it is possible for the user to define a defect formation energy by subtracting the reference energy , computed from an ideal unit cell , from the total energy of a supercell containing the defect .",
    "atomicrex takes care of computing all input properties that enter into the user - defined formula for the _ derived property _ , making it possible to readily fit a model to defect formation energies , energy differences between phases , surface energies , or specific phonon frequencies .",
    "atomicrex can be used as a standalone tool and , via its python interface , also from scripts and other programs . in standalone mode",
    ", the program simply processes the xml input file , which completely specifies all inputs to the fitting problem , the optimization method to use , and the output to generate .",
    "the python interface has been developed to give additional flexibility for customized model development setups and to provide a direct interface with , for example , first - principles codes via the atomic simulation environment ( ase ) @xcite . to this end",
    ", the python interface provides full access to the current model parameters , atomic structures , properties , and weights .",
    "atomicrex natively supports the ase atomic structure format for exchange with other frameworks and simulation codes .",
    "furthermore , the code exposes the current model parametrization as a linear state vector and allows to evaluate the objective function in order to enable the rapid implementation of new optimization schemes and to leverage the wide spectrum of powerful optimization algorithms that are readily available in the python ecosystem .",
    "in this paper we have described the atomicrex code , which provides a flexible , extensible , and efficient framework for the construction of atomic scale models suitable for e.g. , molecular dynamics and monte carlo simulations .",
    "atomicrex supports a variety of interatomic potential types , and their functional form can be freely determined by the user via a built - in math parser .",
    "the code has been optimized for computational efficiency , enabling larger training and validation sets .",
    "while it already includes an extensive database of predefined structures and properties , it also allows the inclusion of custom structures and the definition of complex `` derived '' properties that are based on the combination of several individual properties and/or structures .",
    "finally , atomicrex provides an interface to the python scripting environment for integration with many advanced scientific libraries available in the python ecosystem .",
    "the code is provided under an open - source license and available via http://atomicrex.org .",
    "we also provide an extensive user guide with many examples and a comprehensive description of features .",
    "atomicrex continues to be developed with an emphasis on code extensibility and speed .",
    "in fact , while it already provides an excellent platform not only for the development of potentials using `` classic '' functional forms ( eam , abop , meam etc . ) , it can be extended to include e.g. , artificial neural network ( ann ) potentials @xcite , tight binding models @xcite , or gaussian approximation potentials @xcite . in this context",
    ", we provide a full documentation of the application programming interface ( available as part of the git repository ) to enable other researchers to contribute to the development e.g. , via new models ( potentials ) or optimization schemes .",
    "as pointed out above , the python interface allows easy and seamless integration with various existing libraries for scientific computing and machine learning like scipy @xcite , scikit - learn @xcite , or tensorflow @xcite .",
    "this opens up the possibility to employ variable training and validation sets for e.g. , bayesian error estimation ( see e.g. , @xcite ) , or manipulate the parameter vector using genetic algorithms . finally , via its ase interface",
    ", atomicrex can be readily integrated in a dynamic workflow that spans from the generation of reference data using first - principles codes via training and validation of an atomistic model all the way to deployment of the model in molecular dynamics or monte carlo simulations .",
    "hence , it can be employed in , for example , on - the - fly scale - bridging simulations @xcite .",
    "funding by the knut and alice wallenberg foundation , the deutsche forschungsgemeinschaft ( dfg ) through grant no .",
    "stu 611/1 - 1 , the swedish research council , and the helmholtz joint research group 411 ( ods - hits ) is gratefully acknowledged .",
    "10 url # 1#1urlprefix[2][]#2 jones r  o 2015 _ reviews of modern physics _ * 87 * 897923"
  ],
  "abstract_text": [
    "<S> we introduce atomicrex , an open - source code for constructing interatomic potentials as well as more general types of atomic - scale models . </S>",
    "<S> such effective models are required to simulate extended materials structures comprising many thousands of atoms or more , because electronic structure methods become computationally too expensive at this scale . </S>",
    "<S> atomicrex covers a wide range of interatomic potential types and fulfills many needs in atomistic model development . as inputs , </S>",
    "<S> it supports experimental property values as well as _ </S>",
    "<S> ab initio _ energies and forces , to which models can be fitted using various optimization algorithms . </S>",
    "<S> the open architecture of atomicrex allows it to be used in custom model development scenarios beyond classical interatomic potentials while thanks to its python interface it can be readily integrated e.g. , with electronic structure calculations or machine learning algorithms . </S>"
  ]
}