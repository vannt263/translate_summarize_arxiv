{
  "article_text": [
    "combinatorics on words has strong connections to several areas of mathematics and computing .",
    "it is well known that words are very suitable objects to formulate fundamental properties of computations .",
    "one such property that may be formulated in terms of operations on words is the exceptional concept of undecidability .",
    "a problem is called undecidable if there exists no algorithm that can solve it .",
    "a famous example is post s correspondence problem ( pcp ) originally proved undecidable by emil post in 1946 @xcite .",
    "it plays a central role in computer science due to its applicability for showing the undecidability of many computational problems in a very natural and simple way .",
    "there are surprisingly many easily defined problems whose decidability status is still open . in some cases",
    "we believe that an algorithm solving the problem may exist , but finding it would require the solution to fundamental open problems in mathematics .",
    "for other problems , the current tools for showing undecidability are not directly applicable and new techniques need to be invented to explore the border between decidable and undecidable problems .    in this paper",
    ", we introduce the identity correspondence problem ( icp ) in the spirit of post s correspondence problem : whether a finite set of pairs of words ( over a group alphabet ) can generate an identity pair by a sequence of concatenations .",
    "we prove that icp is undecidable by a reduction of post s correspondence problem via several new encoding techniques that are used to guarantee the existence of an identity pair only in the case of a correct solution existing for the pcp instance .",
    "it is our belief that the identity correspondence problem may be useful in identifying new areas of undecidable problems related to computational questions in abstract algebra , logic and combinatorics on words .    in the second part of the paper",
    ", we use the identity correspondence problem to answer several long standing open problems concerning matrix semigroups @xcite . taking products of matrices",
    "is one of the fundamental operations in mathematics .",
    "however , many computational problems related to the analysis of matrix products are algorithmically hard and even undecidable . among the oldest results",
    "is a remarkable paper by m.  paterson , where he shows that it is undecidable whether the multiplicative semigroup generated by a finite set of @xmath2 integer matrices contains the zero matrix ( also known as the mortality problem ) , see @xcite .",
    "since then , many results were obtained about checking the freeness , boundedness and finiteness of matrix semigroups and the decidability of different reachability questions such as the membership problem , vector reachability , scalar reachability etc .",
    "see @xcite for several related decidability results .",
    "the membership problem asks whether a particular matrix is contained within a given semigroup .",
    "the membership problem is undecidable for @xmath2 integral matrix semigroups due to paterson s results and also for the special linear group sl(@xmath3 , @xmath4 ) of @xmath5 integer matrices of determinant @xmath6 , shown by mikhailova @xcite .",
    "another important problem in matrix semigroups is the identity problem : decide whether a finitely generated integral matrix semigroup contains the identity matrix .",
    "the identity problem is equivalent to the following group problem : given a finitely generated semigroup @xmath0 , decide whether a subset of the generator of @xmath0 generates a non - trivial group . in general",
    ", it is undecidable whether or not the monoid described by a given finite representation is a group .",
    "however , this decision problem is reducible to a very restricted form of the uniform word problem and it does not immediately imply that the group problem in finitely generated semigroups ( without a set of relations ) is undecidable @xcite .",
    "the question about the membership of the identity matrix for matrix semigroups is a well known open problem and was recently stated in `` unsolved problems in mathematical systems and control theory '' , @xcite and also as problem  5 in @xcite .",
    "the embedding methods used to show undecidability in other results do not appear to work here @xcite . as far as we know",
    ", only two decidability results are known for the identity problem . very recently",
    "the first general decidability result for this problem was proved in the case of @xmath7 integral matrix semigroups , see @xcite .",
    "it is also known that in the special case of commutative matrix semigroups , the problem is decidable in any dimension @xcite .",
    "in this paper we apply icp to answer the long standing open problem : `` is it decidable for a finitely generated semigroup @xmath0 of square integral matrices whether or not the identity matrix belongs to @xmath0 ? '' .",
    "we show that the identity problem is undecidable starting from dimension four even when the number of matrices in the generator is fixed .",
    "in other words , we can define a class of finite sets @xmath8 of four dimensional matrices such that there is no algorithm to determine whether or not the identity matrix can be represented as a product of these matrices . from this fact",
    ", we can immediately derive that the fundamental problem of whether a finite set of @xmath5 matrices generates a group is also undecidable . in our proofs",
    "we use the fact that free groups can be embedded into the multiplicative group of @xmath7 integral matrices .",
    "this allows us to transfer the undecidability of icp into undecidability results on matrices .",
    "we also provide a number of other corollaries . in particular , the identity and group problems are undecidable for double quaternions and a set of rotations on the @xmath9-sphere .",
    "therefore , there is no algorithm to check whether a set of linear transformations or a set of rotations in dimension @xmath3 is reversible .",
    "also , the question of whether any diagonal matrix can be generated by a @xmath5 integral matrix semigroup is undecidable .",
    "* notation : * given an alphabet @xmath10 , we denote the concatenation of two letters @xmath11 by @xmath12 or @xmath13 .",
    "a _ word _ over @xmath14 is a concatenation of letters from alphabet @xmath14 , i.e. , @xmath15 .",
    "we denote throughout the paper the _ empty word _ ( or identify element ) by @xmath16 .",
    "we shall denote a _ pair of words _ by either @xmath17 or @xmath18 .",
    "the free group over a generating set @xmath19 is denoted by @xmath20 , i.e. , the free group over two elements @xmath21 and @xmath22 is denoted as @xmath23 .",
    "for example , the elements of @xmath23 are all the words over the alphabet @xmath24 that are reduced , i.e. , that contain no subword of the form @xmath25 or @xmath26 ( for @xmath27 ) .",
    "note that @xmath28 .",
    "[ idpcp_prob ] identity correspondence problem ( icp ) - let @xmath10 be a binary alphabet and @xmath29 determine if there exists a nonempty finite sequence of indices @xmath30 where @xmath31 such that @xmath32 where @xmath16 is the empty word ( identity ) .",
    "a first step towards the proof of undecidability of problem  [ idpcp_prob ] was shown in @xcite where the following theorem was presented ( although in a different form ) .",
    "[ icpcp]@xcite - index coding pcp - let @xmath10 be a binary alphabet and @xmath33 it is undecidable to determine if there exists a finite sequence @xmath30 where @xmath34 and _ exactly one _ @xmath35 such that @xmath36    unfortunately , theorem  [ icpcp ] can not be directly used to prove the identity problem or the group problem are undecidable .",
    "we may , however , immediately use problem  [ idpcp_prob ] for this purpose ( and do so in section  [ app_sec ] ) once we have proved that it is undecidable",
    ".    the reason theorem  [ icpcp ] does not prove problem  [ idpcp_prob ] is undecidable is the restriction that the final pair of words @xmath37 is used exactly one time . despite many attempts ,",
    "it is not clear how one may remove this restriction in the construction of the proof , since it is essential that this pair be used once to avoid the pathological case of several incorrect solutions cancelling with each other and producing an identity element .",
    "the main idea of this paper is to show a new non - trivial encoding which contains the encoding used in theorem  [ icpcp ] but avoids the requirement that a specific element be used one time .",
    "the idea is that by encoding the set @xmath38 _ four times _ using four different alphabets and adding ` borders ' to each pair of words such that for cancellation to occur , each of these alphabets must be used in a specific ( cyclic ) order , any incorrect solutions using a single alphabet will not be able to be cancelled later on .",
    "more details of this encoding with four alphabets will be given later , in lemmas  [ onecycle ] , [ lem_concat ] and [ arbproduct ] and the example that follows them , which provides some intuition as to why three alphabets is not sufficient in the encoding .",
    "we shall reduce a restricted form of post s correspondence problem ( pcp ) @xcite to the identity correspondence problem in a constructive way .",
    "we shall require the following theorem :    [ gpcp ] @xcite restricted pcp - let @xmath10 be a binary alphabet and @xmath39 be a set of pairs of words where @xmath40 .",
    "it is undecidable to determine if there exists a finite sequence of indices @xmath30 with each @xmath41 such that : @xmath42 this result holds even for @xmath43 .",
    "we now show the reduction of an instance of the restricted post s correspondence problem of theorem  [ gpcp ] to an instance of the identity correspondence problem .",
    "let here and throughout @xmath44 and define new alphabets @xmath45 for @xmath46 and @xmath47 such that the alphabets are distinct ( specifically , the intersection of the free groups generated by any two different alphabets equals @xmath48 ) .",
    "let us define mappings @xmath49 by @xmath50 , @xmath51 , @xmath52 and @xmath53 for @xmath46 .",
    "note that each @xmath54 is a homomorphism that may be applied to words over @xmath55 in a natural way .",
    "let @xmath56 .",
    "define @xmath57 by @xmath58 .",
    "similarly , let @xmath59 be defined by @xmath60 .",
    "these morphisms will be used to ensure a product is in a specific order . as an example of these morphisms",
    "we see that @xmath61 and @xmath62 .",
    "let @xmath63 be a given restricted pcp instance .",
    "we shall define an instance of icp consisting of a set of @xmath64 pairs of words : @xmath65 @xmath66 where @xmath67 , @xmath68 for @xmath69 and @xmath46 , thus @xmath70 and @xmath71 .",
    "given any two words @xmath72 , recall that we denote by @xmath18 the pair of words @xmath73 in the above table .",
    "note that each word in each pair from @xmath74 has a so called ` border letter ' on the left and right from @xmath75 .",
    "these are used to restrict the type of sequence . ] that can lead to an identity pair .",
    "the central element of each word ( i.e. excluding the ` border letters ' ) corresponds to particular words from @xmath76 and we encode instance @xmath76 four times separately , first in @xmath77 , secondly in @xmath78 etc . using different alphabets for each encoding .",
    "such that @xmath79 ) , the use of different alphabets for the four parts creates a sequence of non - empty parts that can not be trivially cancelled from the left or right side .",
    "] this may be seen in figure  [ fig_1 ] , where @xmath80 and @xmath81 each separately encode instance @xmath76 .",
    "this forms the set @xmath82 .",
    "let us define the @xmath83-word to mean the first word from pair of words @xmath84 and the @xmath85-word for the second word of this pair .",
    "the @xmath85-words from each pair in @xmath86 use an encoding which ensures that the set of @xmath83-words is concatenated in a particular order within each @xmath80 and @xmath81 part .",
    "we show in lemma  [ secondwordsencoding ] that this encoding enforces a correct encoding of the restricted pcp instance @xmath76 within each part if that part gets reduced to two letters in the second word ( the first and last ` border letters ' ) .",
    "we adapt here our recently introduced index encoding technique from @xcite .",
    "one of the important encoding concepts is a _ cycle _ of set @xmath86 .",
    "we see that the first and last letters from each word of any pair of words from set @xmath87 only cancel with a pair of words from set @xmath88 for @xmath89 and with elements from @xmath74 itself if @xmath90 .",
    "we shall now define a ` cycle ' of set @xmath86 .",
    "an element @xmath91 is called a cycle of @xmath86 if it is of the form : @xmath92 for some @xmath93 : @xmath89 , where @xmath94 if @xmath95 and @xmath96 if @xmath97 .",
    "for example a cycle could use element @xmath98 followed by a product of elements from @xmath99 , then element @xmath100 , followed by a product of elements from @xmath101 etc .",
    "as previously mentioned , the idea of the encoding is that a correct solution to the restricted pcp instance @xmath76 will be encoded _ four times _ in a correct solution to @xmath86 , in elements from @xmath102 and @xmath103 separately .",
    "we now define a _ pattern generated by cycle insertions_. by this , we mean a product where cycles can be inserted within other cycles or appended to the end of them .",
    "for example , given an element @xmath104 where @xmath105 , @xmath106 , @xmath107 , @xmath108 and @xmath109 are all cycles , then this would form a pattern generated by cycle insertions since it can be decomposed into cycles being nested or concatenated in the required way .    [ lem_cycles ]",
    "if instance @xmath86 of the identity correspondence problem has a solution , it must be constructed by an element @xmath91 which forms either a single _ cycle _ or a pattern generated by cycle insertions ( including concatenation ) .",
    "it is not difficult to see that the border symbols from @xmath110 give us constraints on the type of patterns which can be considered as possible solutions to the icp instance , i.e. , which may have some form of word cancellation .",
    "these constraints can be considered as the state system represented in figure  [ fig_1 ] and require that a cycle is completed in a clockwise direction .",
    "note that for any @xmath111 where @xmath97 , it holds that @xmath112 is not equal to @xmath113 since the left and right borders of each word are separated by a nonempty word from an alphabet not containing inverse elements .",
    "let us assume that we have a pair of words from @xmath74 for some @xmath93 .",
    "the only possible way to cancel its border symbols is to complete a chain of cancellations by inverse border elements which will correspond to a clockwise traversal of states represented in figure  [ fig_1 ] .",
    "since at any time we can start to build a new cycle and all cycles must be completed we have that the only sequence of word pairs that can be equal to @xmath113 must be represented as a single cycle or a pattern generated by cycle insertions .    for any product @xmath114",
    "we shall denote by a _ decomposition by parts _ of @xmath115 , the decomposition @xmath116 where for each @xmath117 , if @xmath118 then @xmath119 where @xmath120 and @xmath121 .    for a cycle @xmath122 , the decomposition by parts of @xmath122 clearly gives either @xmath3 or @xmath123 parts in the decomposition .",
    "for example , we may have @xmath124 where @xmath125 and thus @xmath126 etc .",
    "@xmath127 is either empty or uses the same alphabet as @xmath128 .",
    "the @xmath83-words from each @xmath129 part of figure  [ fig_1 ] will store all words from the instance of restricted pcp , @xmath76 separately using distinct alphabets .",
    "if we concatenate the @xmath83-words of one of these parts in the correct order and have the empty word ( excluding initial and final ` border letters ' ) , then this corresponds to a solution of @xmath76 . by a correct order ,",
    "we mean that if we have @xmath130 for example , then they should be concatenated with @xmath131 .",
    "if the concatenation of these words equals @xmath16 , then we have a correct solution to @xmath76 .",
    "let us here illustrate this fact with a simple example . take a ( standard ) pcp instance @xmath132 .",
    "clearly we have a solution to this instance since @xmath133 . using the above encoding , we can alternatively write this as : @xmath134 which can also be seen as a solution where the words on the left are from the first words of each pair in @xmath76 and the words on the right are the inverse of the second words from @xmath76 .",
    "the idea is that on the right , using the inverse elements of the alphabet , we should have a palindrome of the word on the left and they should occur in the correct order .",
    "here we used the sequence @xmath135 on the left thus used the reverse sequence on the right , namely @xmath136 .",
    "the encoding in the second words using @xmath137 and @xmath138 is used to ensure that any solution to @xmath86 _ must _ use such a correct ordering in each @xmath129 part .",
    "the next lemma formalizes this concept and is a modification of the technique presented in @xcite .",
    "it also can be seen as a variant of index coding pcp , see @xcite , which is simpler to prove .",
    "[ secondwordsencoding ] given any part @xmath139 , if the second word of @xmath38 consists of only the initial and final ` border letters ' @xmath140 , then the second word of @xmath38 must be of the form @xmath141 where @xmath142 .",
    "( this corresponds to a ` correct ' palindromic encoding of the restricted pcp instance @xmath76 within this part .",
    "we see that all elements except @xmath143 and @xmath144 will be cancelled . )",
    "since @xmath38 is a single part , we see that @xmath145 depending on the type of part @xmath38 .",
    "let us consider the case that @xmath38 is a product over elements from @xmath146 ( part a in figure  [ fig_1 ] ) .",
    "the proof for the other ` parts ' , @xmath147 and @xmath81 is analogous .",
    "consider the morphisms used in the second words of these elements .",
    "if we have for example a word starting with the element from @xmath148 , by the choice of ` border letters ' , it must be followed by an element from @xmath149 or @xmath150 for cancellation to occur . in the former case ( excluding ` border letters ' )",
    "it will thus be of the form @xmath151 where each @xmath152 . the only way to cancel this final @xmath153 is to eventually use @xmath150 ( even if we use no element from @xmath149 ) since this is the only element whose second word starts with @xmath154 and this is the only other element within @xmath86 cancelling the ` border letter ' of @xmath155 .",
    "after this we must use an element from @xmath156 to cancel the @xmath157 values since each @xmath158 starts with @xmath159 .",
    "it is not difficult to see that we in fact must use these elements in the order @xmath160 otherwise the ` @xmath154 ' at the end of some @xmath161 will not be cancelled on the left .",
    "the only way to cancel this ` @xmath154 ' would be to use @xmath155 but this can not follow @xmath162 by the choice of ` border letters ' . with a correct sequence of @xmath162 elements , all the letters of the second words will cancel leaving the empty word @xmath16 ( again excluding the ` border letters ' ) .",
    "if we do not use this sequence , by the choice of the morphisms @xmath163 and @xmath164 , the letters can not be reduced to @xmath16 .",
    "see @xcite for further details .    finally note that if we do not start with the element from @xmath148 then , since the left ` border letter ' of the pair of words in this element is @xmath165 , we can not use it to cancel the product later on , since this border essentially splits the pair of words in two .",
    "it is not difficult to see that without this element we can not reduce a product to @xmath16 however since without the @xmath166 element in the second word to cancel the last letter of @xmath150 or @xmath162 elements , they can not be reduced .",
    "thus we must have the given structure given in the lemma .",
    "[ pcpsol ] if there exists a solution to the restricted pcp instance @xmath76 , then there exists a solution to the identity correspondence problem instance @xmath86 .",
    "assume we have a solution to @xmath76 with indices @xmath167 , i.e. , @xmath168 .",
    "we can explicitly define a product which will give a correct solution to the icp instance @xmath86 .",
    "define a word @xmath169 such that each @xmath170 .",
    "if @xmath171 , then @xmath172 . if @xmath173 , then @xmath174 will be chosen from @xmath175 using the indices @xmath176 for @xmath177 . finally ,",
    "if @xmath178 , then @xmath174 will be chosen from @xmath175 using the indices @xmath179 for @xmath177 .",
    "a simple computation shows that since this sequence gave a correct solution to @xmath76 , then @xmath112 will be equal to @xmath180 and thus a solution to the icp instance @xmath86 .",
    "let us introduce several notations which will be useful for the analysis of cancellations that may occur in the construction .",
    "we shall define four ` types ' of parts , @xmath181 where type @xmath182 parts use alphabet @xmath183 , type @xmath184 parts use @xmath185 , type @xmath186 parts use @xmath187 and type @xmath81 parts use @xmath188 as in figure  [ fig_1 ] .",
    "a cycle thus has a decomposition which is a permutation of @xmath189 .",
    "we shall now define a function @xmath190 . given any product @xmath114 with the decomposition by parts @xmath116",
    ", we first define the set of pairs of words @xmath191 where @xmath192 is a pair of words constructed from @xmath193 where we exclude the initial and final letters ( from @xmath110 ) in each pair of words in @xmath193 .",
    "we let @xmath194 denote the sum of non - identity words from @xmath191 .",
    "note that @xmath195 for some @xmath196 .",
    "thus for a single cycle @xmath122 , @xmath197 since it can be decomposed to a maximum of @xmath123 parts .",
    "if the first and second words in each decomposed part have a non - reducible word in between the borders , we have that @xmath198 is equal to @xmath199 .",
    "if @xmath198 equals @xmath200 , it means that all words in between the border elements are reducible to identity .",
    "[ onecycle ] if there exists no solution to the encoded restricted pcp instance @xmath76 then for any cycle @xmath201 having decomposition by parts @xmath124 , the following holds :    * @xmath202 for all @xmath203 where @xmath204 ; * @xmath205 ; * @xmath206 , i.e. , a single cycle can not be a solution to the identity correspondence problem .",
    "let @xmath122 be a single cycle of the form  ( [ wform1 ] ) . since it is a cycle , the ` border letters ' of each pair will all cancel with each other and thus we may ignore letters from @xmath75 ( except for the first and last such border letters ) .",
    "let @xmath124 be its decomposition by parts ( thus @xmath127 can be empty and four of the ` parts ' use different alphabets ) .",
    "let us consider some @xmath207 where @xmath204 .",
    "we will show that @xmath207 can not be equal to @xmath113 .    since @xmath122 is a cycle , which has a specific structure , the first word of @xmath207 , when concatenated , equals @xmath208 for some @xmath209 and @xmath210 .",
    "if @xmath211 for all @xmath212 with @xmath213 then this is a correct encoding of the restricted pcp instance @xmath76 which we have assumed has no solution , thus this word does not equal @xmath16 in this case . therefore the elements must not be in a correct sequence if the first word equals @xmath16 . in this case",
    "however , the second word will now not equal @xmath16 by the choice of the morphisms @xmath214 and @xmath215 as shown in lemma  [ secondwordsencoding ] .",
    "if we have such an incorrect ordering then when we multiply the second set of words ( since also each morphism uses a different alphabet ) they never equal @xmath16 which is not difficult to see .    so assuming that there is no solution to the restricted pcp instance @xmath76 , for any part @xmath207 , @xmath216 , i.e. , at least one word in the pairs of words of each part does not equal @xmath16 ( even ignoring initial and final border letters ) .",
    "thus , crucially , if there exists no solution to the encoded restricted pcp instance @xmath76 , then @xmath217 for a cycle @xmath218 .",
    "it follows from lemma  [ onecycle ] that the statements of lemma  [ lem_cycles ] can be restricted further .",
    "lemma  [ lem_cycles ] asserts that the solution of icp can be either a single cycle or a pattern that is formed by a nested insertion of cycles ( including concatenation ) .",
    "it follows from lemma  [ onecycle ] that if the restricted pcp instance @xmath76 does not have a solution , then a single cycle can not be equal to @xmath113 .",
    "we prove now that any solution to the corresponding icp instance @xmath86 can not be in the form of cycle insertion unless the solution is in the form of a concatenation of several cycles each of which starts with the same element .",
    "[ lem_concat ] if there exists no solution to the restricted pcp instance @xmath76 , any solution to the corresponding icp instance @xmath86 can not be in the form of cycle insertion unless the solution is in the form of a concatenation of several cycles each of which starts with the same element .",
    "let us assume that a sequence of indices gives us a solution to icp in the form @xmath219 , where @xmath220 and @xmath122 is a cycle . we show that if @xmath221 then @xmath122 is not inserted inside of any other cycles and @xmath219 is a concatenation of cycles each of which starts with the same element .",
    "if @xmath219 is equal to @xmath113 then @xmath222 .",
    "by @xmath223 let us define pairs of words constructed from @xmath224 where we exclude the initial and final border letters .",
    "let us assume that the single cycle @xmath122 is in the form where it starts and finishes with border letters @xmath225 and @xmath226 , i.e. , @xmath227 where element @xmath228 , when reduced ( i.e. removing consecutive inverse elements ) , is in @xmath229 where @xmath230 , @xmath231 and @xmath232 for some border letters @xmath233 .",
    "since @xmath228 can not be equal to @xmath113 by lemma  [ onecycle ] and @xmath222 we have that the cycle @xmath122 can only be cancelled by a concatenation with @xmath234 .",
    "thus the reduced form of @xmath235 is in @xmath229 and @xmath234 must therefore be in the form of concatenations of cycles starting with a border symbol @xmath236 : @xmath237 .",
    "we see that @xmath238 is therefore a concatenation of cycles .",
    "since the cycle @xmath122 can be factorized into two parts @xmath239 separated by border letters @xmath240 , i.e. @xmath241 , we have that @xmath242    thus @xmath219 is in the form of concatenation of cycles starting from a border letter @xmath243 as required .",
    "in the next lemma , we show that if the encoded restricted pcp instance @xmath76 has no solution , then a concatenation of cycles also can not form a solution .",
    "[ arbproduct ] given an instance of the identity correspondence problem @xmath86 encoding an instance @xmath76 of restricted post s correspondence problem , if there exists no solution to @xmath76 then for any product @xmath244 , it holds that @xmath245 , i.e. , if there is no solution to @xmath76 , there is no solution to @xmath86 .",
    "let @xmath246 be the decomposition by parts of @xmath38 .",
    "assume @xmath247 is a solution to @xmath86 , then since @xmath76 has no solution by our assumption , lemma  [ lem_concat ] proves that @xmath38 is a concatenation of cycles , each of which begins with the same element .",
    "note further that if any concatenation of cycles @xmath248 ( where each cycle starts with the same element ) equals @xmath180 , then this implies that we may cyclically permute the product so that it begins with element @xmath249 ( at least one @xmath249 element must be present in any product of @xmath86 giving an identity pair since we require at least one cycle ) .    due to the ` border constraints ' , lemma  [ lem_concat ] gives us a restricted form of sequences that may lead to an identity pair , i.e. , a type @xmath182 pair of words must be followed by a type @xmath184 pair of words which must be followed by a type @xmath186 pair of words etc .",
    "this implies that at least one ( cyclic ) permutation of @xmath38 must be of the form @xmath250 if it equals @xmath180 since a single cycle is not a solution to @xmath86 by lemma  [ onecycle ] .    assuming that there is no solution to the restricted pcp instance @xmath76 , for any part , @xmath193",
    ", we proved in lemma  [ onecycle ] that @xmath251 , i.e. , at least one word in the pairs of words of each part does not equal @xmath16 ( even excluding initial and final border letters ) . thus , crucially , if there exists no solution to @xmath76 , then @xmath217 for any cycle @xmath218 .",
    "we have that @xmath252 for any cycle @xmath253 .",
    "we shall now prove that @xmath254 where @xmath255 is also a cycle , i.e. , by adding another cycle to the existing one , the number of ` empty parts ' does not decrease .",
    "this means that we can not reduce such a product to @xmath256 and thus if there exists no solution to instance @xmath76 , there exists no solution to the identity correspondence problem instance @xmath86 as required . to see this , consider how many parts can be cancelled by adding a cycle .",
    "for example if the first word of @xmath257 has an @xmath182 part which cancels with the @xmath182 part of @xmath258 , then the first word for the @xmath259 parts of @xmath257 must be @xmath16 .",
    "but since no part can be equal to @xmath256 we know that in @xmath257 , the second word of the @xmath259 parts must not equal @xmath16 . the only element that can cancel the second word of @xmath257 is thus the @xmath81 part of @xmath258 .",
    "however this implies that the second word of the @xmath80 parts of @xmath258 all equal @xmath16 , thus the first word of the @xmath147 parts of @xmath258 can not be @xmath16 and we have at least four non-@xmath16 parts ( the first and second words of the @xmath147 parts ) .",
    "the same argument holds to cancel any part , thus we can not reduce more than @xmath3 parts by the concatenation of any two cycles",
    ". the first word can cancel at most two parts and the second words can cancel at most two parts but since we start with eight nonempty parts we remove only four parts at most leaving four remaining parts . thus @xmath260 as required .",
    "in fact , it is not difficult to see that this argument can be applied iteratively and thus @xmath261 always holds for any @xmath262 . if there is no solution to the restricted pcp instance @xmath76 then a concatenation of cycles can not form a solution .    as an example of this lemma ,",
    "take the following decomposition by parts ( ignoring ` border letters ' ) where @xmath263 is any nonempty word from @xmath264 ( where each @xmath263 is understood to be distinct ) : @xmath265 here we cancel four parts in total and we are left with another four parts . the next @xmath189 cycle that we concatenate can not have @xmath180 for its first two parts however which will not thus cancel with the last non @xmath16 part above and thus the next concatenation of @xmath189 can not reduce the number of empty parts by less than four as we showed above , this is the iterative argument that we apply .",
    "the identity correspondence problem is undecidable for @xmath266 where @xmath267 is the minimal number of pairs for which restricted pcp is known to be undecidable ( currently @xmath43 ) .",
    "given an instance of the identity correspondence problem , @xmath268 which encodes an instance of restricted post s correspondence problem @xmath76 .",
    "if there exists a solution to @xmath76 , lemma  [ pcpsol ] shows that there also exists a solution to @xmath86 .",
    "lemma  [ arbproduct ] then shows that if there does not exist a solution to the restricted pcp instance @xmath76 , there does not exist a solution to the identity correspondence problem instance either , thus proving its undecidability . since the restricted version of post s correspondence problem is known to be undecidable for instances of size @xmath269 by theorem  [ gpcp ] , this implies that icp is undecidable for @xmath270 by the construction of @xmath86 .",
    "it remains to prove that we may define the problem over a binary group alphabet @xmath24 .",
    "this is not difficult however by a technique which we now outline .",
    "given a group alphabet @xmath271 and a binary group alphabet @xmath272 .",
    "define @xmath273 by @xmath274 and @xmath275 .",
    "it can be seen that this is an injective morphism ( see @xcite , for example ) and applying iteratively to each letter in each word of @xmath86 proves the undecidability of the identity correspondence problem over a binary group alphabet .",
    "in this section we will provide a number of new results in semigroups using the undecidability of icp .",
    "we first consider the `` group problem '' defined on a semigroup of pairs of words .",
    "group problem - given an alphabet @xmath10 , is the semigroup generated by a finite set of pairs of words @xmath276 a group ?",
    "the _ group problem _ is undecidable for @xmath266 pairs of words where @xmath267 is the minimal number of pairs for which restricted pcp is known to be undecidable ( currently @xmath43 ) .",
    "let us assume by contradiction that the group problem is decidable for a semigroup @xmath0 defined by pairs of words over a group alphabet and the operation of pairwise concatenation .",
    "if the identity element can be generated by the concatenation of word pairs @xmath277 then any cyclic permutation of words in this concatenation is also equal to @xmath278 .",
    "thus every element in the set of all pairs used in the generation of identity has an inverse element and this set generates a subgroup .",
    "therefore the identity problem can be solved by checking if some nonempty subset of the original pairs generates a group .",
    "if there is a subset of @xmath0 which generates a group then the identity element is in @xmath0 .",
    "otherwise the identity element is not generated by @xmath0 .",
    "it was not previously known whether the identity problem for matrix semigroups was decidable for any dimension greater than two .",
    "the identity problem in the two dimensional case for integral matrices was recently proved to be decidable in @xcite .",
    "[ idmatrix ] given a semigroup @xmath0 generated by a fixed number @xmath267 of square four dimensional integral matrices , determining whether the identity matrix belongs to @xmath0 is undecidable .",
    "this holds even for @xmath279 .",
    "we shall use a standard encoding to embed an instance of the identity correspondence problem into a set of integral matrices .",
    "given an instance of icp say @xmath280 where @xmath281 generates a free group .",
    "define the morphism @xmath282 : @xmath283 it is known from the literature that @xmath284 is an injective homomorphism , i.e. , the group generated by @xmath285 is free , see for example @xcite . for each pair of words @xmath286 , define the matrix @xmath287 where @xmath288 denotes the direct sum of two matrices .",
    "let @xmath0 be a semigroup generated by @xmath289 .",
    "if there exists a solution to icp , i.e. , @xmath290 , then we see that @xmath291 where @xmath292 is the @xmath5 identity matrix . otherwise , since @xmath284 is an injective homomorphism , @xmath293 .",
    "it follows from the above construction that another open problem concerning the reachability of any diagonal matrix in a finitely generated integral matrix semigroup stated in @xcite and as open problem  6 in @xcite , is also undecidable .    given a finitely generated semigroup of integer matrices @xmath0 ,",
    "determining whether there exists any diagonal matrix in @xmath0 is algorithmically undecidable .",
    "this result follows from the proof of theorem  [ idmatrix ] .",
    "note that in that theorem , the morphism @xmath284 is injective and thus the only diagonal matrix in the range of @xmath284 is the @xmath7 identity matrix @xmath294 ( corresponding to @xmath295 ) , since diagonal matrices commute . clearly then",
    ", the only diagonal matrix in the semigroup @xmath0 of theorem  [ idmatrix ] is given by @xmath296 where @xmath292 is the @xmath5 identity matrix . since determining if this matrix is in @xmath0 was shown to be undecidable , it is also undecidable to determine if there exists any diagonal matrix in @xmath0 .    given a finite set of rotations on the @xmath9-sphere .",
    "determining whether this set of rotations generates a group is undecidable .",
    "we shall use the notation @xmath297 to denote the set of quaternions .",
    "more details of quaternions used in this theorem can be found in @xcite .",
    "the set of all unit quaternions forms the unit @xmath9-sphere and any pair of unit quaternions @xmath21 and @xmath22 can represent a rotation in @xmath3 dimensional space .",
    "a point @xmath298 on the @xmath9-sphere may be represented by a quaternion @xmath299 and rotated using the operation : @xmath300 .",
    "this gives a quaternion @xmath301 representing the rotated point @xmath302 .",
    "we can define a morphism @xmath303 from a group alphabet to unitary quaternions : @xmath304    it was proven in @xcite that @xmath303 is an injective homomorphism .",
    "we may thus convert pairs of words from an instance of the identity correspondence problem into pairs of quaternions @xmath305 .",
    "therefore we reduce the group problem for pairs of words over a group alphabet to the question of whether a finite set of rotations , @xmath306 , represented by pairs of quaternions , generates a group .",
    "in this paper we introduced the identity correspondence problem , proved that it is undecidable and applied it to answer long standing open problems in matrix semigroups .",
    "in particular , we proved that the membership problem for the identity matrix in @xmath5 integral matrix semigroups is undecidable . the identity matrix membership problem for @xmath7 matrix semigroups",
    "was shown to be decidable in @xcite , but the problem in dimension @xmath9 remains open .",
    "we believe that the identity correspondence problem will be useful in identifying new areas of undecidable problems not only related to matrix problems but also to computational questions in abstract algebra , logic and combinatorics on words .",
    "p. bell , i. potapov , on the undecidability of the identity correspondence problem and its applications for word and matrix semigroups , international journal of foundations of computer science , world scientific , vol .",
    "21 , issue 6 , 2010 .",
    "v. d. blondel , j. cassaigne and j. karhumki , problem 10.3 , freeness of multiplicative matrix semigroups . in : v.  d.",
    "blondel , a. megretski ( eds . ) , unsolved problems in mathematical systems and control theory , princeton university press , 309 - 314 , 2004 ."
  ],
  "abstract_text": [
    "<S> in this paper we study several closely related fundamental problems for words and matrices . </S>",
    "<S> first , we introduce the identity correspondence problem ( icp ) : whether a finite set of pairs of words ( over a group alphabet ) can generate an identity pair by a sequence of concatenations . </S>",
    "<S> we prove that icp is undecidable by a reduction of post s correspondence problem via several new encoding techniques . in the second part of the paper we use icp to answer a long standing open problem concerning matrix semigroups : `` is it decidable for a finitely generated semigroup @xmath0 of integral square matrices whether or not the identity matrix belongs to @xmath0 ? '' . </S>",
    "<S> we show that the problem is undecidable starting from dimension four even when the number of matrices in the generator is @xmath1 . from this fact </S>",
    "<S> , we can immediately derive that the fundamental problem of whether a finite set of matrices generates a group is also undecidable . </S>",
    "<S> we also answer several questions for matrices over different number fields . apart from the application to matrix problems </S>",
    "<S> , we believe that the identity correspondence problem will also be useful in identifying new areas of undecidable problems in abstract algebra , computational questions in logic and combinatorics on words </S>",
    "<S> . + * keywords : * combinatorics on words , group problem , post s correspondence problem , matrix semigroups , undecidability . </S>"
  ]
}