{
  "article_text": [
    "many engineering problems such as chemical reaction processes , heat conduction , nuclear reactors , population dynamics etc . are governed by coupled convection - diffusion - reaction partial differential equations ( pdes ) with non - linear source or sink terms .",
    "it is a significant challenge to solve such pdes numerically when they are convection / reaction - dominated . as a model problem , we consider the coupled quasi - stationary equations arising from the time discretization of time - dependent non - linear diffusion - convection - reaction equations @xcite    [ 1 ] @xmath0    with @xmath1 are bounded , open , convex domains in @xmath2 with boundaries @xmath3 , @xmath4 , @xmath5 are the diffusivity constants , @xmath6 are the source functions , @xmath7 are the velocity fields , @xmath8 are the dirichlet boundary conditions , @xmath9 are the neumann boundary conditions , and @xmath10 and @xmath11 denote the vector of unknowns and normal vector to the boundary , respectively .",
    "the coefficients of the linear reaction terms , @xmath12 , stand for the temporal discretization , corresponding to @xmath13 , where @xmath14 is the discrete time - step .",
    "moreover , we assume that the non - linear reaction terms are bounded , locally lipschitz continuous and monotone , i.e. satisfy for any @xmath15 , @xmath16 the following conditions @xcite    @xmath17    the non - linear reaction terms @xmath18 occur in chemical engineering usually in the form of products and rational functions of concentrations , or exponential functions of the temperature , expressed by the arrhenius law .",
    "such models describe chemical processes and they are strongly coupled as an inaccuracy in one unknown affects all the others . hence , efficient numerical approximation of these systems is needed . for the convection",
    "/ reaction - dominated problems , the standard galerkin finite element methods are known to produce spurious oscillations , especially in the presence of sharp fronts in the solution , on boundary and interior layers .    in last two decades",
    "several stabilization and shock / discontinuity capturing techniques were developed for linear and non - linear stationary and time dependent problems . for linear convection",
    "dominated problems , the streamline upwind petrov - galerkin(supg ) method is capable to stabilize the unphysical oscillations @xcite .",
    "nevertheless , in non - linear convection dominated problems , spurious oscillations are still present in crosswind direction .",
    "therefore , supg is used with the anisotropic shock capturing technique as supg - sc for reactive transport problems @xcite .",
    "it was shown that supg - sc is capable of reducing the unphysical oscillations in cross - wind direction .",
    "the parameters of the supg and supg - sc should be designed carefully for the efficient solution of the discretized equations .",
    "in contrast to the standard galerkin conforming finite element methods , discontinuous galerkin finite element(dgfem ) methods produce stable discretizations without the need for stabilization strategies , and damp the unphysical oscillations for linear convection dominated problems . in @xcite , several non - linear convection dominated problems of type ( [ 1 ] ) are solved with dg - sc , discontinuous galerkin method with the shock - capturing technique in @xcite . for an accurate solution of non - linear convection dominated problems , higher order finite elements are used because they are less diffusive and avoid artificial mixing of chemical species under discretization , for supg - sc and dg - sc , respectively .",
    "the main advantages of dgfem are the flexibility in handling non - matching grids and in designing hp - refinement strategies @xcite , which allow easily adaptive grid refinement . in this paper",
    "we extend the adaptive discontinuous galerkin method in @xcite to the convection dominated non - linear problems of type ( 1 ) .",
    "we show on several examples the effectiveness and accuracy of dgafem capturing boundary and internal layers very sharply and without significant oscillations .",
    "an important drawback is that the resulting linear systems are more dense than the continuous finite elements and ill - conditioned .",
    "the condition number grows rapidly with the number of elements and with the penalty parameter .",
    "therefore , efficient solution strategies such as preconditioning are required to solve the linear systems . while more robust compared to iterative solvers , direct solvers are usually more memory and time consuming due to fill - in",
    "furthermore , they are known to be less scalable on parallel architectures .",
    "therefore , in this paper we use an iterative method which is robust and efficient .",
    "because the dg method requires more degrees of freedom than the standard galerkin method , in @xcite linear diffusion - convection - reaction equations are discretized near the boundary and inter layers by the interior penalty dg method , away from the layers by continuous galerkin method .",
    "it was shown that combination of both methods will not affect the stability of the dg method",
    ". another important class of non - linear diffusion - convection equations are those with the non - linear convective term , including the viscous burger s equation . in the recent years , several effective interior penalty dg methods with efficient time integrators and with space and time adaptivity for this class of problems are developed , see for example @xcite .",
    "an important class of non - linear convection - diffusion equations are the pellet equations , which model the intra - particle mass and heat transport in porous catalyst pellets . a comprehensive review of weighted residual methods , the orthogonal collocation , galerkin , tau and least squares methods is given in @xcite for solving the the linear and non - linear pellet equations , where the methods are compared with respect to convergence of the residuals and computational efficiency .",
    "the rest of this work is organized as follows . in the next two sections , we give the dg discretization and describe the residual based adaptivity for non - linear diffusion - convection - reaction problems . in section 4 , we have compared the dgfem and dgafem with another class of stabilized methods , the glsfem ( galerkin least square finite element method ) for a linear convection dominated problem .",
    "section [ linear ] deals with an efficient solution technique for solving the linear system arising from the dg discretization . in section [ numerical ] , we demonstrate the effectiveness and accuracy of dgafem for handling the sharp layers arising in several examples with different type of non - linear reaction mechanisms .",
    "the paper ends with some conclusions .",
    "in this section , we describe the dg discretization of the model problem ( 1 ) .",
    "we begin with the classical weak formulation of the scalar equation ( @xmath19 ) of ( [ 1 ] ) : find @xmath20 such that    @xmath21    where the solution space @xmath22 and the test function space @xmath23 are given by    @xmath24    under the assumptions given in the previous section , the problem ( [ 2 ] ) has a unique solution in @xmath22 .",
    "the next step of the classical ( continuous ) fem is to find an approximation to the problem ( [ 2 ] ) using a conforming , finite - dimensional subspace @xmath25 , which requires that the space @xmath26 contains functions of particular smoothness ( e.g. when @xmath27 , then we choose @xmath28 ) . on the other hands ,",
    "discontinuous galerkin methods make it easy to use the non - conforming spaces , in which case the functions in @xmath29 are allowed to be discontinuous on the inter - element boundaries .    in this article , the discretization of the problem ( [ 1 ] ) is based on the symmetric discontinuous interior penalty galerkin ( sipg ) method , a type of discontinuous galerkin methods , for the diffusion part @xcite and the upwinding for the convection part @xcite .",
    "let @xmath30 be a family of shape regular meshes with the elements ( triangles ) @xmath31 satisfying @xmath32 and @xmath33 for @xmath34 , @xmath35 @xmath36 .",
    "let us denote by @xmath37 , @xmath38 and @xmath39 the set of interior , dirichlet boundary and neumann boundary edges , respectively , so that @xmath40 forms the skeleton of the mesh .",
    "for any @xmath41 , let @xmath42 be the set of all polynomials of degree at most @xmath43 on @xmath44 .",
    "then , set the finite dimensional solution and test function space by @xmath45 note that the trial and test function spaces are the same because the boundary conditions in discontinuous galerkin methods are imposed in a weak manner ( see the sipg construction below ) .",
    "since the functions in @xmath26 may have discontinuities along the inter - element boundaries , along an interior edge , there would be two different traces from the adjacent elements sharing that edge . in the light of this fact ,",
    "let us first introduce some notations before starting the construction of sipg formulation .",
    "let @xmath34 , @xmath46 ( @xmath47 ) be two adjacent elements sharing an interior edge @xmath48 ( see fig.[jump ] ) .",
    "denote the trace of a scalar function @xmath49 from inside @xmath34 by @xmath50 and from inside @xmath35 by @xmath51 . then , set the jump and average values of @xmath49 on the edge @xmath52 @xmath53= v_{i}{\\bf n}_e- v_{j}{\\bf n}_e , \\quad \\ { v\\}=\\frac{1}{2}(v_{i}+ v_{j}),\\ ] ] where @xmath54 is the unit normal to the edge @xmath52 oriented from @xmath34 to @xmath35",
    ". similarly , we set the jump and average values of a vector valued function @xmath55 on e @xmath56= { \\bf q}_{i}\\cdot { \\bf n}_e- { \\bf q}_{j}\\cdot { \\bf n}_e , \\quad \\ { { \\bf q}\\}=\\frac{1}{2}({\\bf q}_{i}+ { \\bf q}_{j}),\\ ] ] observe that @xmath57 $ ] is a vector for a scalar function @xmath49 , while , @xmath58 $ ] is scalar for a vector valued function @xmath55 . on the other hands , along any boundary edge @xmath59 , we set @xmath53= v_{i}{\\bf n } , \\quad \\",
    "{ v\\}=v_{i } , \\quad [ { \\bf q}]={\\bf q}_{i}\\cdot { \\bf n } , \\quad \\ { { \\bf q}\\}={\\bf q}_{i}\\ ] ] where @xmath11 is the unit outward normal to the boundary at @xmath52 .    ( 35 , 10 ) ( 5,7)(1,1)6 ( 5,7)(1,-1)6 ( 17,7)(-1,1)6 ( 17,7)(-1,-1)6 ( 7,7)@xmath60 ( 12,9)@xmath61 ( 10,3)@xmath52 ( 11,7)(1,0)2 ( 13,6)@xmath62    ( 25,7)(1,1)6 ( 25,7)(1,-1)6 ( 27,7)@xmath60 ( 32,9)@xmath63 ( 30,3)@xmath52 ( 31,7)(1,0)2 ( 33,6)@xmath11    ( 11,1)(0,1)12 ( 31,1)(0,1)12    now , we are ready to construct the sipg discretization of the diffusion part of the problem .",
    "we start with the continuous ( i.e. assume for the moment that the unknown solution @xmath64 is smooth enough ) poisson problem    @xmath65    we multiply the equation ( [ poisson ] ) by a test function @xmath66 , we integrate over @xmath67 and we split the integrals : @xmath68 apply the divergence theorem on every element integral @xmath69 or using the jump definitions ( @xmath66 are element - wise discontinuous ) @xmath70ds = \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } fvdx+\\sum \\limits _ { e \\in \\gamma_{n } } \\int_{e } g^nvds\\ ] ] one can easily verify that @xmath71=\\ { \\nabla u\\}\\cdot [ v]+ [ \\nabla u]\\cdot\\ { v\\}$ ] . then , using also the fact that @xmath72=0 $ ] ( @xmath64 is assumed to be smooth enough",
    "so that @xmath73 is continuous ) , we get @xmath74ds = \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } fvdx+\\sum \\limits _ { e \\in \\gamma_{n } } \\int_{e } g^nvds\\ ] ] yet , the left hand side is not coercive , even not symmetric . to handle this , noting that @xmath75=0 $ ] along the interior edges ( @xmath64 is assumed to be continuous ) , we reach at @xmath74ds -\\sum \\limits _ { e \\in \\gamma_{0 } } \\int_{e } \\ { \\nabla v\\}\\cdot [ u]ds\\ ] ] @xmath76\\cdot [ v]ds = \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } fvdx+\\sum \\limits _ { e \\in \\gamma_{n } } \\int_{e } g^nvds\\ ] ] where @xmath77 denote the length of the edge @xmath52 and @xmath78 is called the penalty parameter , which is a sufficiently large to have the coercivity .",
    "finally , we add to the both sides the edge integrals on the dirichlet boundary edges ( keeping unknown on the left hand side and imposing dirichlet boundary condition on the right hand side ) @xmath74ds",
    "-\\sum \\limits _ { e \\in \\gamma_{0}\\cup\\gamma^{d } } \\int_{e } \\ { \\nabla v\\}\\cdot [ u]ds\\ ] ] @xmath79\\cdot [ v]ds = \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } fvdx+\\sum \\limits _ { e \\in \\gamma_{d } } \\int_{e } g^d\\left ( \\frac{\\sigma}{h_{e}}v-\\nabla v\\cdot { \\bf n}\\right)ds+\\sum \\limits _ { e \\in \\gamma_{n } } \\int_{e } g^nvds\\ ] ] which gives the sipg formulation .",
    "now , we give the sipg discretized system to the problem ( [ 1 ] ) combining with the upwind discretization for the convection part : find @xmath80 such that @xmath81    [ 3 ] @xmath82 ds -\\sum \\limits _ { e \\in \\gamma_{0}\\cup\\gamma^{d}}\\int_{e } \\{\\epsilon \\nabla u_{h}\\ } \\cdot [ v_{h } ] ds \\nonumber \\\\ & + \\sum \\limits_{k \\in { \\xi}_{h}}\\int_{\\partial k^-\\setminus\\partial\\omega } { \\bf b}\\cdot { \\bf n } ( u_{h}^{out}-u_{h}^{in } )   v_{h } ds - \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{\\partial k^-\\cap \\gamma^{- } } { \\bf b}\\cdot { \\bf n } u_{h}^{in } v_{h }   ds \\nonumber   \\\\ & + \\sum \\limits _ { e \\in \\gamma_{0}\\cup\\gamma^{d}}\\frac{\\sigma \\epsilon}{h_{e } } \\int_{e } [ u_{h } ] \\cdot [ v_{h } ] ds , \\nonumber   \\\\ b_{h}(u_{h } , v_{h } ) = & \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } r(u_{h } ) v_{h } dx , \\nonumber   \\\\ l_{h } ( v_{h})= &   \\sum \\limits_{k \\in { \\xi}_{h } } \\int_{k } f v_{h } dx + \\sum \\limits_{e \\in \\gamma^{d } } \\int_e g^d \\left ( \\frac{\\sigma \\epsilon}{h_{e } } v_{h } -   { \\epsilon\\nabla v_{h } } \\cdot { \\bf",
    "n } \\right ) ds   \\nonumber \\\\ & - \\sum \\limits_{k \\in { \\xi}_{h}}\\int_{\\partial k^-\\cap \\gamma^{- } } { \\bf b}\\cdot { \\bf n } g^d v_{h }   ds + \\sum \\limits_{e \\in \\gamma^{n } } \\int_e g^n v_{h } ds , \\nonumber\\end{aligned}\\ ] ]    where @xmath83 and @xmath84 indicates the corresponding inflow parts , and @xmath85 , @xmath86 denotes the values on an edge from outside and inside of an element @xmath44 , respectively .",
    "the parameter @xmath87 is called the penalty parameter which should be sufficiently large ; independent of the mesh size @xmath88 and the diffusion coefficient @xmath89 @xcite [ sec .",
    "we choose the penalty parameter @xmath78 for the sipg method depending on the polynomial degree @xmath43 as @xmath90 on interior edges and @xmath91 on boundary edges .",
    "most of the convection dominated problems lead to internal / boundary layers and one has to find accurate approximations in order to handle the nonphysical oscillations .",
    "a naive approach is to refine the mesh uniformly .",
    "but it is not desirable as it highly increases the degrees of freedom and refines the mesh unnecessarily in regions where the solutions are smooth . instead ,",
    "the mesh is refined locally using an adaptive strategy . in this section ,",
    "we describe the adaptive strategy for non - linear diffusion - convection - reaction problems .",
    "our adaptive algorithm is based on the standard adaptive finite element ( afem ) iterative loop ( fig.[adapstr ] ) .",
    "( 140,105 )    ( 70,100)(20,8 ) ( 62,98 ) ( 70,96)(0,-1)6 ( 40,90)(1,0)78 ( 40,80)(1,0)78 ( 40,80)(0,1)10 ( 118,80)(0,1)10 ( 42,84 ) ( 70,80)(0,-1)10 ( 60,70)(1,0)24 ( 60,63)(1,0)24 ( 60,63)(0,1)7 ( 84,63)(0,1)7 ( 62,65 ) ( 70,63)(0,-1)6 ( 45,57)(1,0)65 ( 45,50)(1,0)65 ( 45,50)(0,1)7 ( 110,50)(0,1)7 ( 46,52 ) ( 70,50)(0,-1)4 ( 72,42)(25,8 ) ( 63,41 ) ( 70,38)(0,-1)6 ( 60,33 ) ( 45,32)(1,0)65 ( 45,24)(1,0)65 ( 45,24)(0,1)8 ( 110,24)(0,1)8 ( 70,24)(0,-1)6 ( 47,26 ) ( 37,18)(1,0)90 ( 37,10)(1,0)90 ( 37,10)(0,1)8 ( 127,10)(0,1)8 ( 70,10)(0,-1)6 ( 38,12 ) ( 70,0)(20,8 ) ( 65,-2 ) ( 32,8)(1,0)38 ( 32,8)(0,1)68 ( 32,76)(1,0)38 ( 135,20 ) ( 133,0)(-1,0)53 ( 133,0)(0,1)43 ( 84,43)(1,0)49    the first step , solve , is to solve the sipg discretized system ( [ ds ] ) on a given triangulation @xmath92 . the estimate step is the key part of the adaptive procedure , by which we are able to determine the elements having large error to be refined using computed solution and given data ( a posteriori ) .",
    "as an estimator , we use a residual based error indicator based on the modification of the error estimator given in schtzau and zhu @xcite for a single linear convection dominated diffusion - convection - reaction equation to the diffusion - convection equation with non - linear reaction mechanism , which is robust , i.e. independent of the pclet number . to do this , we include in the a posteriori error indicator the non - linear reaction term as local contributions to the cell residuals and not to the interior / boundary edge residuals [ chp . 5.1.4 , @xcite ] .",
    "let @xmath93 be the solution to ( [ ds ] ) .",
    "then , for each element @xmath94 , we define the local error indicators @xmath95 as    @xmath96    in ( [ res ] ) , @xmath97 denote the cell residual @xmath98 while , @xmath99 , @xmath100 and @xmath101 stand for the edge residuals coming from the jump of the numerical solution on the interior , dirichlet boundary and neumann boundary edges , respectively @xmath102\\|_{l^2(e)}^2+\\frac{1}{2}(\\frac{\\epsilon\\sigma}{h_e}+\\kappa h_e+\\frac{h_e}{\\epsilon})\\| [ u_h]\\|_{l^2(e)}^2\\right ) , \\nonumber \\\\ \\eta_{e_k^d}^2 & = & \\sum \\limits_{e \\in \\partial k\\cap\\gamma^{d}}(\\frac{\\epsilon\\sigma}{h_e}+\\kappa h_e+\\frac{h_e}{\\epsilon})\\| g^d - u_h\\|_{l^2(e)}^2 , \\nonumber \\\\ \\eta_{e_k^n}^2 & = & \\sum \\limits_{e \\in \\partial k\\cap\\gamma^{n}}\\epsilon^{-\\frac{1}{2}}\\rho_e\\| g^n-\\epsilon\\nabla u_h\\cdot { \\bf n}\\|_{l^2(e)}^2 , \\nonumber\\end{aligned}\\ ] ] as in schtzau and zhu @xcite with the modified @xcite extra term @xmath103 corresponding to the local indicator on the neumann boundary edges .",
    "the weights @xmath104 and @xmath105 , on an element @xmath44 , are defined as @xmath106 for @xmath107 .",
    "when @xmath108 , we take @xmath109 and @xmath110 . then , our a posteriori error indicator is given by @xmath111 we also introduce the data approximation error , @xmath112 where    @xmath113    according to @xcite , with @xmath114 and @xmath115 denoting the mean integrals of @xmath116 and @xmath117 , respectively .    in the mark step , if the given tolerance is not satisfied , we determine the set of elements @xmath118 to be refined using the error indicator defined in ( [ res ] ) .",
    "to do this , we use the bulk criterion proposed by dfler @xcite , by which the approximation error is decreased by a fixed factor for each loop . in the light of bulk criterion",
    ", we choose the set of elements @xmath118 satisfying @xmath119 for a user defined parameter @xmath120 . here",
    ", bigger @xmath121 results in more refinement of triangles in a single loop , where , smaller @xmath121 causes more refinement loops .    finally , refine step , we refine the marked elements @xmath122 using the newest vertex bisection method @xcite .",
    "this process can be summarized as ( see fig.[bisect ] ) : for each element @xmath41 , we label one vertex of @xmath44 as a newest vertex . the opposite edge of the newest vertex is called as the refinement edge .",
    "then , a triangle is bisected to two new children triangles by connecting the newest vertex to the midpoint of the refinement edge , and this new vertex created at the midpoint of the refinement edge is assigned to be the newest vertex of the children .",
    "following a similar rule , these two children triangles are bisected to obtain four children elements belonging to the father element ( the refined triangle @xmath122 ) .",
    "after bisecting all @xmath122 , we also divide some elements @xmath123 to keep the conformity of the mesh , i.e. hanging nodes are not allowed .",
    "( 50 , 11 )    ( 2,2)(1,0)12 ( 2,2)(3,4)6 ( 8,2)(0,1)8 ( 14,2)(-3,4)6 ( 1,2)2 ( 14.5,2)3 ( 8,10.5)1 ( 7,0.5)4 ( 8,2 )    ( 20,2)(1,0)12 ( 20,2)(3,4)6 ( 26,2)(0,1)8 ( 32,2)(-3,4)6 ( 19,2)2 ( 32.5,2)3 ( 26,10.5)1 ( 25,0.5)4 ( 26,2 ) ( 26,2)(3,4)3 ( 29,6 ) ( 29,7)right    ( 37,2)(1,0)12 ( 37,2)(3,4)6 ( 43,2)(0,1)8 ( 49,2)(-3,4)6 ( 36,2)2 ( 49.5,2)3 ( 43,10.5)1 ( 42,0.5)4 ( 43,2 ) ( 43,2)(-3,4)3 ( 40,6 ) ( 38,7)left    .",
    "[ bisect ]    in the case of coupled problems , instead of a single component problem , we refine the elements being the union of the set of the elements to be refined for each component , i.e. , let @xmath124 and @xmath95 be the computed local error indicators corresponding to each unknown component of a two component system .",
    "next , we determine the set of elements @xmath125 and @xmath126 satisfying @xmath127 then , we refine the marked elements @xmath128 using the newest vertex bisection method .",
    "the adaptive procedure ends after a sequence of mesh refinements up to attain a solution with an estimated error within a prescribed tolerance .",
    "numerical studies show the capability of the error indicator to find the layers properly .      in order to measure the error",
    ", we use the energy norm    @xmath129\\|_{l^2(e)}^2,\\ ] ] and the semi - norm @xmath130 and the constant @xmath131 satisfies @xmath132 for a non - negative @xmath133 . the first condition in ( [ erassmp ] )",
    "is needed to make the bilinear form @xmath134 coercive ( well - posedness of the linear part of the problem ) , and the latter is used to prove the reliability of our a posteriori error estimator @xcite .",
    "the terms @xmath135 and @xmath136\\|_{l^2(e)}^2 $ ] in ( [ semin ] ) are used to bound the convection part , whereas , the term @xmath137\\|_{l^2(e)}^2 $ ] is used to bound the linear reaction part of the discrete system . in order to bound the non - linear reaction part",
    ", we use the boundedness property ( 2a ) [ chp . 5.1.1 - 4 , @xcite ] .",
    "then , for the solution @xmath64 to the scalar equation of ( [ 1 ] ) , following the procedures in @xcite and using the boundedness of the non - linear reaction term , we can easily obtain the a posteriori error bounds    @xmath138",
    "for linear pdes , the weak form in the standard galerkin method is obtained by multiplying the differential equation with a test function @xmath49 and integrating over a suitable function space @xmath23 @xmath139 where @xmath140 is the linear part of the diffusion - convection - reaction equation ( 1 ) . defining the residual as @xmath141",
    ", the standard galerkin method can be interpreted in form of the residual orthogonality @xmath142 . in the case of non self - adjoint differential operators like the the diffusion - convection - reaction operator @xmath143",
    ", it can happen that @xmath144 is not coercive or symmetric on @xmath23 , and the resulting fem discretization may be unstable .    for transport problems ,",
    "another popular approach is based on the least squares formulation of the galerkin fem .",
    "let us write the model problem ( 1 ) as    [ model2 ] @xmath145    define the least - squares functional @xmath146 a minimizer of @xmath147 is obtained by @xmath148 which yields the least - squares term @xmath149 for linear problems with @xmath150 , the least squares galerkin method reduces to the minimization problem @xmath151 where the functional @xmath152 is defined by @xmath153 the first order optimality condition leads to the least squares galerkin method @xmath154 the bilinear form @xmath155 is symmetric and coercive and has stronger stability properties compared to the standard galerkin method .",
    "there are many publications on the galerkin least squares finite element methods ( glsfem ) .",
    "we mention here two books @xcite and the review article @xcite .",
    "there are mainly two variants of the glsfems ; the stabilized and the direct versions .",
    "+ _ stabilized finite elements method @xcite _ : the standard ( continuous ) galerkin fem for the problem ( [ model2 ] ) reads : find @xmath156 such that @xmath157 where @xmath158 is the standard bilinear form to the linear part of ( [ model2 ] ) .",
    "the general stabilized fems formulation reads as : for all @xmath159 , find @xmath156 such that @xmath160 where the stabilization parameter is defined on each element @xmath44 as @xcite @xmath161 one way to proceed glsfems is then to use the least - squares term @xmath162 as the stabilization term @xmath163 in ( [ stfem ] ) , i.e. : for all @xmath164 , find @xmath165 such that @xmath166 note that , being another stabilized fem , streamline upwind petrov - galerkin ( supg ) method is obtained by setting @xmath167 with different choices of the parameter @xmath168 .",
    "+ _ the direct variant of glsfem : _ the second way to proceed the glsfems is to consider and discretize just the least - squares term @xmath169 . one may solve this problem in a straightforward manner : for all @xmath170 , find @xmath171 such that @xmath172 , i.e. @xmath173 which is not only a fourth order problem but also the solution and trial subspaces @xmath174 and @xmath26 need to consist of continuously differentiable functions making it complicated to construct bases functions ( standard finite element spaces can not be used anymore ) and the assembly of the stiffness matrix .",
    "the condition number of the stiffness matrix is order of @xmath175 instead of order @xmath176 for the standard galerkin fem .",
    "hence , this approach is impractical . instead ,",
    "being the most common practical way , the problem ( [ model2 ] ) is converted into a first - order system as @xcite .",
    "@xmath177 then , we define now the least - square functional for @xmath178 as @xmath179 a minimizer of @xmath180 is obtained by the identity @xmath181 which yields a least - squares term of order two . using this approach ,",
    "we solve the resulting least - squares term , which is a second - order problem now , using ( discontinuous ) finite elements solution and trial spaces @xmath182",
    "( @xmath183 ) and @xmath184 ( @xmath185 ) , respectively .",
    "the condition number of the stiffness matrix is retained as @xmath186 as in the standard galerkin method @xcite .",
    "for convection dominated problems , the resulting linear systems of equations are solved usually with preconditioned conjugate gradient method due to large condition numbers , as reported in @xcite for glsfem solution of singularly perturbed diffusion - convection problems .    in order to compare the glsfem with the dgfem",
    ", we consider the linear problem @xcite @xmath187 with @xmath188 , @xmath189 and @xmath190 .",
    "the load function @xmath191 and dirichlet boundary conditions are chosen so that the exact solution is @xmath192    as we can see from the from the fig.[glserr ] , the dgfems produce smaller errors than the glsfem for the convection dominated problem ( [ lconvdiff ] ) .",
    "the approximate solution to the discrete problem ( [ ds ] ) has the form @xmath193 where @xmath194 s are the basis polynomials spanning the dgfem space @xmath26 , @xmath195 s are the unknown coefficients to be found , @xmath196 denotes the number of triangles and @xmath197 is the number of local dimension depending on the degree of polynomials @xmath43 , for instance , for @xmath198 we have @xmath199 ( in 2d , @xmath200 ) . in dg methods ,",
    "we choose the piecewise basis polynomials @xmath194 s in such a way that each basis function has only one triangle as a support , i.e. we choose on a specific triangle @xmath201 , @xmath202 , the basis polynomials @xmath203 which are zero outside the triangle @xmath201 , @xmath204 . by this construction",
    ", the stiffness matrix obtained by dg methods has a block structure , each of which related to a triangle ( there is no overlapping as in continuous fem case ) .",
    "the product @xmath205 gives the degree of freedom in dg methods . inserting the linear combination of @xmath93 in ( [ ds ] ) and choosing the test functions as @xmath206 , @xmath204 , @xmath207 , the discrete residual of the system ( [ ds ] ) in matrix vector form",
    "is given by @xmath208 where @xmath209 is the vector of unknown coefficients @xmath195 s , @xmath210 is the stiffness matrix corresponding to the bilinear form @xmath211 , @xmath212 is the vector function of @xmath22 related to the non - linear form @xmath213 and @xmath214 is the vector to the linear form @xmath215 .",
    "the explicit definitions are given by @xmath216    @xmath217 where all the block matrices have dimension @xmath197 : @xmath218    @xmath219    obviously , the condition number of the stiffness matrix obtained by the sipg discretization increases by the degree @xmath43 of basis polynomials .",
    "one of the reasonable ways to handle this drawback is to choose a suitable set of basis polynomials .",
    "there are a variety of basis polynomial functions such as lagrange shape functions , monomial bases , legendre polynomials . in our study",
    ", we use the orthogonal dubiner basis defined on the reference triangle @xcite @xmath220 ( all the integral terms above are computed on this reference triangle using an affine map between the reference triangle and physical triangles ) . the construction of such basis polynomials based on the collapsed coordinate transform between the reference triangle @xmath221 and the reference square @xmath222 ^ 2 $ ] ( see fig.[trans ] ) .",
    "( 55 , 17 ) ( 15,2)(-3,4)8 ( 7,2)(0,1)13 ( 7,2)(1,0)10 ( 9,5 ) ( 7.5,15)@xmath223 ( 16,3)@xmath224 ( 4,0)@xmath225 ( 13,0)@xmath226 ( 3,12)@xmath227    ( 22,15)@xmath228 ( 22,12)@xmath229 ( 34,9)(-1,0)12 ( 22,6)(1,0)12 ( 22,3)@xmath230 ( 22,0)@xmath231    ( 42,2)(1,0)10 ( 42,2)(0,1)10 ( 42,12)(1,0)10 ( 52,2)(0,1)10 ( 47,7)(0,1)7 ( 47,7)(1,0)7 ( 44,5 ) ( 47.5,14)@xmath232 ( 54,8)@xmath233 ( 39,0)@xmath234 ( 50,0)@xmath235 ( 39,13)@xmath236 ( 50.5,13)@xmath237    .",
    "[ trans ]    first , the basis polynomials on the square @xmath238 is formed by a generalized tensor product of the jacobi polynomials on the interval @xmath239 $ ] , and then , these basis polynomials are transformed to the reference triangle @xmath221 using the collapsed coordinate transform in fig.[trans ] .",
    "the explicit forms of dubiner basis polynomials on the reference triangle @xmath221 are given by @xmath240 where @xmath241 s denote the corresponding @xmath242-th order jacobi polynomials on the interval @xmath239 $ ] , which are orthogonal polynomials under the jacobi weight @xmath243 , i.e. @xmath244 this property of the jacobi polynomials yields the orthogonality of the dubiner basis on the reference triangle @xmath221 as @xmath245 the advantage of the dubiner basis is that its orthogonality leads to diagonal mass matrix by which one may obtain better - conditioned matrices compared to the other basis polynomials ( see fig.[basiscond ] ) , and it provides high accuracy in the approximation of the integrals .    ) with @xmath150 , scaledwidth=80.0% ]      the penalty parameter @xmath78 in the sipg formulation ( [ ds ] ) should be selected sufficiently large to ensure the coercivity of the bilinear form [ @xcite , sec .",
    "27.1 ] , which is needed for the stability of the convergence of the dg method .",
    "it ensures that the matrix arising from the dg discretization of the diffusion part of ( [ ds ] ) is symmetric positive definite . at the same time",
    "it should not be too large since the conditioning of the matrix arising from the bilinear form increases linearly by the penalty parameter ( see fig.[penalty_cond ] ) . in the literature , several choices of the penalty parameter are suggested . in @xcite ,",
    "computable lower bounds are derived , and in @xcite , the penalty parameter is chosen depending on the diffusion coefficient @xmath89 .",
    "the effect of the penalty parameter on the condition number was discussed in detail for the dg discretization of the poisson equation in @xcite and in @xcite for layered reservoirs with strong permeability contrasts , e.g. @xmath89 varying between @xmath246 and @xmath247 . since the penalty parameter , in sipg formulation",
    ", is mainly related to the laplace operator , to examine the effect of the penalty parameter , we study on the poisson problem ( pure elliptic case ) @xmath248 with the appropriate load function @xmath191 and dirichlet boundary conditions using the exact solution @xmath249 . in fig.[penalty_err ] , we have plotted the maximum nodal errors for the poisson problem ( [ poisson2 ] ) depending on the penalty parameter to show the instability bound of the scheme for different degrees of bases , where the triangular symbols indicate our choice @xmath250 .     with different polynomial degree @xmath43 for the poisson equation ( [ poisson2]),scaledwidth=80.0% ]     with different polynomial degree @xmath43 for the poisson equation ( [ poisson2]),scaledwidth=80.0% ]    similarly , the condition number of the stiffness matrix increases with decreasing mesh - size and increasing order of the dg discretization for the linear diffusion - convection - reaction problem ( 3 ) with @xmath150 , ( see fig.[hmax_cond ] ) , which affects the efficiency of an iterative solver .",
    "similar results can be found in @xcite for the poisson problem .     with different polynomial degree @xmath43 for the linear model problem ( [ 1 ] ) with @xmath150 , scaledwidth=80.0% ]    besides the choice of a suitable basis polynomials , in this section ,",
    "we describe also an efficient solution technique for the large ill - conditioned linear systems arising from the linearization of the dg discretization .",
    "this technique is based on reordering of matrix elements and preconditioning .      because the stiffness matrices obtained by dgfem become ill - conditioned and dense for higher order dg elements @xcite , several preconditioners are developed for the efficient and accurate solution of linear diffusion - convection equations @xcite .",
    "we apply the matrix reordering and partitioning technique in @xcite , which uses the largest eigenvalue and corresponding eigenvector of the laplacian matrix .",
    "this reordering allows us to obtain a partitioning and a preconditioner based on this partitioning .",
    "since our matrices are non - symmetric , as the first step , we compute the symmetric structure by adding its transpose to itself .",
    "a symmetric , square and sparse matrix could be represented as a graph where same index rows and columns are mapped into vertices and nonzeros of the sparse matrix are mapped into the edges of the graph . since the matrix is symmetric , the corresponding graph is undirected .",
    "the laplacian matrix ( @xmath143 ) is , then , defined as follows @xmath251 in which the @xmath252 is the degree of the vertex i. in this paper , the reordering we use is based on the unweighted laplacian matrix given above . if the graph contains only one connected component , the eigenvalues of @xmath143 are @xmath253 , otherwise there are as many zero eigenvalues as the number of connected components .    certain eigenvalues and corresponding eigenvectors of the laplacian matrix have been studied extensively .",
    "most notably the second nontrivial eigenvalue of the laplacian and the corresponding eigenvector known as the algebraic connectivity and the fiedler vector of the graph @xcite .",
    "nodal domain theorem in @xcite shows that the eigenvectors corresponding to the eigenvalues other than the first and the second smallest eigenvalue give us the connected components of the graph . in @xcite , the fiedler vector for permuting the matrices to reduce the bandwidth",
    "is proposed . reordering to obtain effective and scalable parallel banded preconditioners",
    "is proposed in @xcite .",
    "we use a sparse matrix reordering for partitioning and solving linear systems using the largest eigenvalue and the corresponding eigenvector of the laplacian matrix . using this reordering ,",
    "we show that one can reveal underlying structure of a sparse matrix .",
    "a simple matlab code to find the reordered matrix and the permutation matrix can be found at ( http://www.ceng.metu.edu.tr/~manguoglu/matrixreorder.m )    to solve the discrete problem ( [ ds ] ) , we use the newton - raphson method .",
    "we start with a non - zero initial vector @xmath254 .",
    "the linear system arising from @xmath255-newton - raphson iteration step has the form @xmath256 , where @xmath257 is the jacobian matrix to @xmath258 ( i.e. @xmath259 and it remains unchanged among the iteration steps ) , @xmath260 is the newton correction , and @xmath261 denotes the residual of the system at @xmath262 ( @xmath263 ) .",
    "we construct a permutation matrix @xmath264 using the matrix reordering technique described above , applied to the sparse matrix j. then , we apply the permutation matrix @xmath264 to obtain the permuted system @xmath265 where @xmath266 , @xmath267 and @xmath268 . after solving the permuted system ,",
    "the solution of the unpermuted linear system can be obtained by applying the inverse permutation , @xmath269 .",
    "given a sparse linear system of equations @xmath265 , after reordering , one way to solve this system is via block lu factorization .",
    "suppose , the permuted matrix @xmath270 , the right hand side @xmath271 and the solution @xmath272 is partitioned as follows : @xmath273 a block lu factorization of the coefficient matrix can be given as @xmath274 where @xmath275 and @xmath276 , also known as the schur complement matrix .",
    "if the cost can be amortized , one can form @xmath22 and @xmath277 once and use them for solving linear systems with the same coefficient matrix and different right hand sides .",
    "after this factorization , there are various approaches that one can take to solve the system .",
    "one way is to solve the system via block backward and forward substitution , by first solving the linear system @xmath278 , and then solving the schur complement system @xmath279 and obtaining @xmath280 .",
    "this method is summarized in algorithm [ algorithm : linear ] .",
    "* input : * the coefficient matrix : @xmath281 and the right hand side : @xmath282 + * output : * the solution vector : @xmath283 +    solve @xmath278 solve @xmath279 compute @xmath280    [ algorithm : linear ]    we note that this approach involves solving two linear systems of equations with the coefficient matrix @xmath284 and @xmath277 .",
    "these linear systems can be solved directly or iteratively which requires effective preconditioners .",
    "other approaches could involve solving the system @xmath265 iteratively where the preconditioner could take many forms .",
    "there are many other techniques for solving block partitioned and saddle point linear systems , we refer the reader to @xcite for a more detailed survey of some of these methods .",
    "in this section , we give several numerical examples demonstrating the effectiveness and accuracy of the dgafem for convection dominated non - linear diffusion - convection - reaction equations .",
    "our first example is taken from @xcite with dirichlet boundary condition on @xmath285 with @xmath286 , @xmath287 , @xmath190 and @xmath288 .",
    "the source function @xmath191 and dirichlet boundary condition are chosen so that @xmath289 is the exact solution .",
    "the problem is characterized by an internal layer of thickness @xmath290 around @xmath291 .",
    "the mesh is locally refined by dgafem around the interior layer ( fig.[ex1_mesh ] ) and the spurious solutions are damped out in fig.[ex1_sol ] , similar to the results as in @xcite using supg - sc , in @xcite with sipg - sc .",
    "on adaptively and uniformly refined meshes , from the fig.[adapuniform ] , it can be clearly seen that the adaptive meshes reduce the substantial computing time .",
    "on uniform meshes , the sipg is slightly more accurate as shown in @xcite than the the supg - sc in @xcite .",
    "the error reduction by increasing degree of the polynomials is remarkable on finer adaptive meshes ( fig.[adapuniform ] , bottom ) .    :",
    "global errors : comparison of the methods by quadratic elements(top ) , adaptive dg for polynomial degrees 1 - 4(bottom).,title=\"fig:\",scaledwidth=80.0% ] : global errors : comparison of the methods by quadratic elements(top ) , adaptive dg for polynomial degrees 1 - 4(bottom).,title=\"fig:\",scaledwidth=80.0% ]    in table [ table_pol ] , we give the results using the solution technique in section [ linear ] for the _ bicgstab _ with the stopping criterion as @xmath292 for @xmath293 ( @xmath294 is the residual of the corresponding system at the @xmath255 iteration ) applied to the unpermuted system and schur complement system with and without preconditioning on the finest levels of uniformly ( @xmath295 refinement level with dof 196608 and 32768 triangular elements ) and adaptively ( @xmath296 refinement level with dof 70716 and 11786 triangular elements ) refined meshes . as a preconditioner , the incomplete lu factorization of the schur complement matrix @xmath277 ( ilu(@xmath277 ) ) is used for the linear system with the coefficient matrix @xmath277 .",
    "the linear systems with the coefficient matrix @xmath284 are solved directly .",
    "table [ table_pol ] shows that solving the problem via the block lu factorization using the schur complement system with the preconditioner ilu(@xmath277 ) is the fastest .",
    ".example [ ex1 ] : average number of newton iterations , average number of _ bicgstab _ iterations , total computation time in seconds corresponding to the uniformly refined ( adaptively refined ) mesh . [ cols=\"<,<,<,<\",options=\"header \" , ]     the time for applying the permutation to obtain the reordered matrix and the permutation matrix @xmath264 takes @xmath297 seconds , whereas , it takes @xmath298 seconds to form the schur complement matrix @xmath277 and @xmath299 seconds to compute the ilu(@xmath277 ) on a pc with intel core - i7 processor and 8 gb ram using the 64-bit version of matlab - r2010a .",
    "we note that since the jacobian matrix does not change during the non - linear iterations , the permutation , the schur complement matrix and ilu(@xmath277 ) is computed only once for each run .    in all of the following results and figures ,",
    "the jacobian matrix @xmath257 is scaled by a left jacobi preconditioner before reordering to obtain a well conditioned matrix .",
    "the reordering procedure is applied to the scaled jacobian matrix .",
    "reordering times , which are included in the total computation time , for the uniform and adaptive refinements are @xmath300 seconds and @xmath301 seconds , respectively .",
    "fig.[ex1_cond ] shows the condition numbers of the jacobian matrices @xmath257 of the original system , @xmath277 and @xmath284 of the block lu factorized system on the uniformly and adaptively refined meshes .",
    "the condition numbers of the coefficient matrix @xmath284 are almost constant for uniform refinement by different orders of dg discretizations and around @xmath302 , whereas the condition number of @xmath277 lower than of the jacobian matrix @xmath257 .",
    "this is due to the clustering of nonzero elements around the diagonal ( fig.[ex1_spy ] ) due to the matrix reordering .",
    "for adaptive refinement , fig.[ex1_cond ] , bottom , we observe the same behavior , whereas the conditions numbers are larger of order one than for the uniform refinement . for comparison ,",
    "we provide results by using bicgstab with two block preconditioners . the preconditioning matrices @xmath303 and @xmath304 for the permuted full systems are given as @xmath305 total number of iterations and time for different algorithms are given in table [ table_pol ] .",
    "our proposed method where we compute the block lu factorization of the partitioned matrix and solve the system involving the schur complement iteratively via preconditioned bicgstab is the best in terms of the total time compared to other methods for both uniform and adaptive refinement . in fig.[time_dof ] and fig.[its_dof ] , we present the total time and the average number of linear solver iterations , respectively , for uniform and adaptive refinements as the problem size has been increased .",
    "we observe that the proposed preconditioned linear solver has been the best in terms of time with a reasonable number of iterations for different problem sizes regardless refinement type .    :",
    "computation time vs. dof : uniform refinement ( top ) and adaptive refinement ( bottom),title=\"fig:\",scaledwidth=80.0% ] : computation time vs. dof : uniform refinement ( top ) and adaptive refinement ( bottom),title=\"fig:\",scaledwidth=80.0% ]    : # average _ bicgstab _ iterations vs. dof : uniform refinement ( top ) and adaptive refinement ( bottom),title=\"fig:\",scaledwidth=80.0% ] : # average _ bicgstab _ iterations vs. dof : uniform refinement ( top ) and adaptive refinement ( bottom),title=\"fig:\",scaledwidth=80.0% ]    : condition number of the matrices j ( unpermuted matrix ) , s ( schur complement matrix ) and a ( left top block of permuted matrix ) : uniform refinement ( top ) and adaptive refinement ( bottom).,title=\"fig:\",scaledwidth=80.0% ] : condition number of the matrices j ( unpermuted matrix ) , s ( schur complement matrix ) and a ( left top block of permuted matrix ) : uniform refinement ( top ) and adaptive refinement ( bottom).,title=\"fig:\",scaledwidth=80.0% ]    : sparsity patterns of the unpermuted ( left ) , permuted ( middle ) and the schur complement ( right ) matrices at the final refinement levels : uniform refinement ( top ) with dof 196608 and adaptive refinement ( bottom ) with dof 70716.,title=\"fig:\",scaledwidth=90.0% ] : sparsity patterns of the unpermuted ( left ) , permuted ( middle ) and the schur complement ( right ) matrices at the final refinement levels : uniform refinement ( top ) with dof 196608 and adaptive refinement ( bottom ) with dof 70716.,title=\"fig:\",scaledwidth=90.0% ]      we consider the monod type non - linearity in @xcite : @xmath306 on @xmath285 with the convection field @xmath307 , diffusion coefficient @xmath308 and the source function @xmath309 . the dirichlet boundary condition is prescribed as @xmath310 for @xmath311 and @xmath312 on the remaining parts of the lower boundary as well as on the right and upper boundary . moreover , @xmath313 for @xmath314 where * n * is the outer unit normal .    .",
    "[ ex2_cross ]    there are both internal and boundary layers on the mesh ( fig.[ex2_cross ] , left ) , around them oscillations occur .",
    "fig.[ex2_cross ] , right , shows that by dgafem , the oscillations are almost disappear , similar to the results in @xcite for the supg - sc and in @xcite for sipg - sc .",
    "fig.[ex2_cross ] , left , shows that the adaptive process leads to correctly refined meshes .",
    "moreover , by increasing polynomial degree of the basis functions ( @xmath315 ) , the oscillations are completely eliminated on the outflow boundary ( fig.[ex2_cross ] , bottom ) and the sharp front is preserved .",
    "this is not the case for supg - sc @xcite and sipg - sc @xcite , where still small oscillations are present .    as in case of polynomial non - linearity , example 5.1 ,",
    "the block lu factorized system solved by bicgstab with the preconditioner ilu(s ) is the most efficient solver , with an average number of @xmath316 newton iterations .",
    "the computing times for the uniform refinement was 20.6 seconds , and 30.5 for the adaptive refinement .",
    "next example is the non - linear reaction for a two - component system in @xcite : @xmath317 on @xmath285 with the convection field @xmath318 , the diffusion constant @xmath308 , the reaction rate coefficient @xmath319 and the quotient of the activation energy to the gas constant @xmath320 . the unknowns @xmath321 and @xmath322 represent the temperature of the system and the concentration of the reactant , respectively .",
    "[ plot_arh ]    there are oscillations around the layers , even small , for the uniform refinement ( fig.[plot_arh ] , left ) as for sipg - sc in @xcite . on the other hand ,",
    "these oscillations are completely dumped out by dgafem with almost half of the dof used in the uniform refinement ( fig.[plot_arh ] , right ) .",
    "the block lu factorization based algorithm with the preconditioner ilu(s ) requires 10.5 seconds for the uniform and 24.4 seconds for the adaptive refinements .",
    "matrix reordering and permutation took 2.44 seconds for the uniform and 2.17 seconds for adaptive refinements , respectively .",
    "our final problem is the modification of the non - stationary transport problem , example 2 , in @xcite .",
    "the problem is stated as the following :    @xmath323    on the rectangular domain @xmath324 with the convection field @xmath325 , the diffusion constant @xmath326 and linear reaction constant @xmath327 . on the left , right and lower parts of the boundary of the domain ,",
    "neumann boundary conditions are prescribed . on the remaining part of the boundary ,",
    "dirichlet boundary conditions are chosen as @xmath328    @xmath329    there is a boundary layer on the outflow boundary , fig.[ex4_mesh ] .",
    "fig.[ex4_plot ] shows that oscillations are almost damped using dgafem approximations , similar to those results in @xcite using supg - sc .",
    "it can be seen from fig.[ex4_mesh ] that the mesh is correctly refined by dgafem near the boundary layer .",
    ": adaptive mesh , quartic elements with dof 33690.,scaledwidth=50.0% ]",
    "we have shown that using dgafem with the sparse linear solver is an efficient method for solving non - linear convection dominated problems accurately and avoids the design of the parameters in the shock capturing technique as for the supg - sc and dg - sc methods .",
    "the numerical examples demonstrate that dgafem allows to capture the interior and boundary layers very sharply without any significant oscillation . as a future study",
    ", we will apply space - time adaptive dg methods for time - dependent convection dominated non - linear diffusion - convection - reaction equations .",
    "the authors would like to thank the reviewer for the comments and suggestion that help improve the manuscript . this work has been partially supported by turkish academy of sciences distinguished young scientist award tuba - gebip/2012 - 19 , tbitak career award eeag111e238 and metu bap-07 - 05 - 2013 - 004 .",
    "antonietti , p. f. , sli , e. ( 2009 ) .",
    "domain decomposition preconditioning for discontinuous galerkin approximations of convection - diffusion problems .",
    "_ domain decomposition methods in science and engineering xviii , eds .",
    "m. bercovier , m. j. gander , r. kornhuber , o. widlund , lecture notes in computational science and engineering _ , volume 70 , 259 - 266 .",
    "bause , m. ( 2010 ) . stabilized finite element methods with shock - capturing for non - linear convection - diffusion - reaction models . in _",
    "numerical mathematics and advanced applications _ 2009 , 125 - 134 .",
    "springer berlin heidelberg .",
    "bause , m. , & schwegler , k. ( 2012 ) .",
    "analysis of stabilized higher - order finite element approximation of nonstationary and non - linear convection - diffusion - reaction equations .",
    "methods appl . mech .",
    "_ , 209 - 212 184 - 196 .",
    "bause , m. , & schwegler , k. ( 2013 ) .",
    "higher order finite element approximation of systems of convection  diffusion  reaction equations with small diffusion . _",
    "journal of computational and applied mathematics _",
    ", 246 , 52 - 64 .",
    "brooks , a.n . , & hughes , t.j.r . ( 1982 ) .",
    "streamline upwind / petrov - galerkin formulations for convection dominated flows with particular emphasis on the incompressible navier / stokes equations . _ comp .",
    "_ , 32 , 199 - 259 .",
    "cangiani , a. , chapman , j. , georgoulis , e. , & jensen , m. ( 2013 ) . on the stability of continuous of discontinuous galerkin methods for advection  diffusion",
    " reaction problems . _ j. journal of scientific computing _",
    ", 57 , 313330 .",
    "chen , l. ( 2008 ) .",
    "@xmath330fem : an innovative finite element method package in matlab , an innovative finite element methods package in matlab . _ tech .",
    "rep.:department of mathematics , university of california , irvine_.      dobrev , v.a . ,",
    "lazarov , r.d . , &",
    "zikatanov , l.t . (",
    "preconditioning of symmetric interior penalty discontinuous galerkin fem for elliptic problems . in : _",
    "domain decomposition methods in science and engineering xvii , lecture notes in computer science and engineering _ , 60 , 3344 .",
    "springer .",
    "hughes , t.j.r , franca , l.p , & hulbert , g.m . ( 1989 ) . a new finite element formulation for fluid dynamics : viii .",
    "the galerkin / least - squares method for the advection - diffusion equations .",
    "methods appl .",
    "_ , 73 , 173189 .      r.d .",
    "lazarov and p.s .",
    "vassilevski ( 2000 ) .",
    "least - squares streamline diffusion finite element approximations to singularly perturbed convection - diffusion problems .",
    "_ analytical and numerical methods for singularly perturbed problems _ , ( l.g .",
    "vulkov , j.j.h .",
    "miller , and g.i .",
    "shishkin , eds . ) , nova science publishing house , 8394 .",
    "manguolu , m. , koyutrk , m. , sameh , a.h . , & grama , a. ( 2010 ) .",
    "weighted matrix ordering and parallel banded preconditioners for iterative linear system solvers .",
    "_ siam journal on scientific computing _ , 32 , 1201 - 1216 .",
    "solsvik , j. , tangen , s. , & jakobsen , h. a. ( 2013 ) .",
    "evaluation of weighted residual methods for the solution of the pellet equations : the orthogonal collocation , galerkin , tau and least - squares methods",
    ". _ computers and chemical engineering _ , 58 , 223259 .",
    "tari , o. , & manguolu , m. ( 2013 ) .",
    "revealing the saddle point structure using the largest eigenvector of the laplacian .",
    "international conference on preconditioning techniques for scientific and industrial applications ( 19 - 21 june 2013 ) , oxford , uk .",
    "tezduyar , t.e . , & park , y.j .",
    "discontinuity - capturing finite element formulations for non - linear convection - diffusion - reaction equations . _ computer methods in applied mechanics and engineering _ , 59 , 307 - 325 .",
    "ycel , h. , heinkenschloss , m. , & karaszen , b. ( 2013 ) .",
    "distributed optimal control of diffusion - convection - reaction equations using discontinuous galerkin methods , in : a. cangiani , r. davidchack , e. georgoulis , a. gorban , j. levesley , m. tretyakov ( eds . ) , numerical mathematics and advanced applications .",
    "enumath 2011 , 398 - 397 .",
    "springer , heidelberg .",
    "ycel , h. , stoll , m. , & benner , p. ( 2013 ) .",
    "discontinuous galerkin finite element methods with shock - capturing for non - linear convection dominated models . _ computers and chemical engineering _ , 58 , 278 - 287 ."
  ],
  "abstract_text": [
    "<S> in this work , we apply the adaptive discontinuous galerkin ( dgafem ) method to the convection dominated non - linear , quasi - stationary diffusion - convection - reaction equations . we propose an efficient preconditioner using a matrix reordering scheme to solve the sparse linear systems iteratively arising from the discretized non - linear equations . </S>",
    "<S> numerical examples demonstrate effectiveness of the dgafem to damp the spurious oscillations and resolve well the sharp layers occurring in convection dominated non - linear equations .    </S>",
    "<S> non - linear diffusion - convection reaction , discontinuous galerkin , adaptivity , matrix reordering , preconditioning </S>"
  ]
}