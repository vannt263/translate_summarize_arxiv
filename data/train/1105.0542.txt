{
  "article_text": [
    "exact solution of a given many - body model in quantum mechanics is usually expressed in terms of eigenvalues and eigenfunction of its hamiltonian @xmath1 but it can be also expressed through analytic solution for general transition amplitude @xmath2 from the initial state @xmath3 to the final state @xmath4 during the time of propagation @xmath5 .",
    "calculation of transition amplitudes is more suitable if one uses path integral formalism @xcite , but in principle , if eigenproblem of the hamiltonian can be solved , one should be able to calculate general transition amplitudes , and vice versa .",
    "however , mathematical difficulties may prevent this , and even more importantly , exact solutions can be found only in a very limited number of cases .",
    "therefore , use of various analytic approximation techniques or numerical treatment is necessary for detailed understanding of the behavior of almost all models of interest .    in numerical approaches it could be demanding and involved to translate numerical knowledge of transition amplitudes to ( or from ) eigenstates , but",
    "practically can be always achieved .",
    "it has been implemented in various setups , e.g. through extraction of the energy spectra from the partition function @xcite , and using the diagonalization of space - discretized matrix of the evolution operator , i.e. matrix of transition amplitudes @xcite .",
    "all these applications use the imaginary - time formalism @xcite , typical for numerical simulations of such systems .",
    "recently introduced effective action approach @xcite provides an ideal framework for exact numerical calculation of quantum mechanical amplitudes .",
    "it gives systematic short - time expansion of amplitudes for a general potential , thus allowing accurate calculation of short - time properties of quantum systems directly , as has been demonstrated in refs .",
    "@xcite . for numerical calculations that require long times of propagation to be considered using e.g. monte carlo method ,",
    "effective action approach provides improved discretized actions leading to the speedup in the convergence of numerically calculated discretized quantities to their exact continuum values .",
    "this has been also demonstrated in monte carlo calculations of energy expectation values using the improved energy estimators @xcite .    in this paper",
    "we present speedup codes @xcite which implement the effective action approach , and which were used for numerical simulations in refs .",
    "the paper is organized as follows . in section [ sec : theory ] we briefly review the recursive approach for analytic derivation of higher - order effective actions .",
    "speedup mathematica codes capable of symbolic derivation of effective actions for a general one- and many - body theory as well as for specific models is described in detail in section [ sec : mathematica ] , while in section [ sec : c ] we describe speedup path integral monte carlo c code , developed for numerical calculation of transition amplitudes for 1d models .",
    "section [ sec : conclusions ] summarizes presented results and gives outlook for further development of the code .",
    "from inception of the path integral formalism , expansion of short - time amplitudes in the time of propagation was used for the definition of path integrals through the time - discretization procedure @xcite .",
    "this is also straightforwardly implemented in the path integral monte carlo approaches @xcite , where one usually relies on the naive discretization of the action .",
    "several improved discretized actions , mainly based on the trotter formula and its generalizations , were developed and used in the past @xcite .",
    "a recent analysis of this method can be found in jang et al @xcite .",
    "several related investigations dealing with the speed of convergence have focused on improvements in short - time propagation @xcite or the action @xcite .",
    "more recently , split - operator method has also been developed @xcite , later extended to include higher - order terms @xcite , and systematically improved using the multi - product expansion @xcite .",
    "the effective action approach is based on the ideal discretization concept @xcite .",
    "it was introduced first for single - particle 1d models @xcite and later extended to general many - body systems in arbitrary number of spatial dimensions @xcite .",
    "this approach allows systematic derivation of higher - order terms to a chosen order @xmath0 in the short time of propagation .",
    "recursive method for deriving discretized effective actions , established in ref .",
    "@xcite , is based on solving the underlying schr \" odinger equation for the amplitude .",
    "it has proven to be the most efficient tool for treatment of higher - order expansion . in this section",
    "we give brief overview of the recursive method , which will be implemented in mathematica in the next section .",
    "we start with the case of single particle in 1d , used in the speedup c code . throughout the paper we will use natural system of units , in which @xmath6 and all masses are set to unity .      in the effective action approach ,",
    "transition amplitudes are expressed in terms of the ideal discretized action @xmath7 in the form @xmath8 which can be also seen as a definition of the ideal action @xcite .",
    "therefore , by definition , the above expression is correct not only for short times of propagation , but for arbitrary large times @xmath5 .",
    "we also introduce the ideal effective potential @xmath9 , @xmath10\\ , , \\ ] ] reminiscent of the naive discretized action , with the arguments of the effective potential ( @xmath11 , @xmath12 , @xmath5 ) usually written as @xmath13 , to emphasize that we will be using mid - point prescription .",
    "however , ideal effective action and effective potential can be calculated analytically only for exactly solvable models , while in all other cases we have to use some approximative method .",
    "we use expansion in the time of propagation , assuming that the time @xmath5 is small .",
    "if this is not the case , we can always divide the propagation into @xmath14 time steps , so that @xmath15 is small .",
    "long - time amplitude is than obtained by integrating over all short - time ones , @xmath16 paving the way towards path integral monte carlo calculation , which is actually implemented in the speedup c code .",
    "if we consider general amplitude @xmath17 , introduce the mid - point coordinate @xmath18 and deviation @xmath19 , and express @xmath20 using the effective potential , @xmath21 the time - dependent schr \" odinger equation for the amplitude leads to the following equation for @xmath9 @xmath22 where @xmath23 , i.e. @xmath24 , @xmath25 .",
    "the short - time expansion assumes that we expand @xmath9 to power series in @xmath26 to a given order , and calculate the appropriate coefficients using eq .",
    "( [ eq : eqw ] ) . we could further expect that this results in coefficients depending on the potential @xmath27 and its higher derivatives . however , this scheme is not complete , since the effective potential depends not only on the mid - point @xmath28 , but also on the deviation @xmath29 , and the obtained equations for the coefficients can not be solved in a closed form . in order to resolve this in a systematic way , we make use of the fact that , for short time of propagation , deviation @xmath29 is on the average given by the diffusion relation @xmath30 , allowing double expansion of @xmath9 in the form @xmath31 restricting the above sum over @xmath32 to @xmath33 leads to level @xmath0 effective potential @xmath34 which gives expansion of the effective action @xmath35 to order @xmath36 , and hence the level designation @xmath0 for both the effective action and the corresponding potential @xmath37 . thus ,",
    "if the diffusion relation is applicable ( which is always the case in monte carlo calculations ) , instead of the general double expansion in @xmath29 and @xmath26 , we are able to obtain simpler , systematic expansion in @xmath26 only .    as shown previously @xcite , when used in path integral monte carlo simulations for calculation of long time amplitudes according to eq .",
    "( [ eq : amc ] ) , use of level @xmath0 effective action leads to the convergence of discretized amplitudes proportional to @xmath36 , i.e. as @xmath38 , where @xmath14 is the number of time steps used in the discretization .",
    "if we insert the above level @xmath0 expansion of the effective potential to eq.([eq : eqw ] ) , we obtain the recursion relation derived in ref .",
    "@xcite , @xmath39 where the sum over @xmath40 goes from @xmath41 to @xmath42 .",
    "this recursion can be used to calculate all coefficients @xmath43 to a given level @xmath0 , starting from the known initial condition , @xmath44 .",
    "the diagonal coefficients can be calculated immediately , @xmath45 and for a given value of @xmath46 , the coefficients @xmath43 follow recursively from evaluating ( [ eq:1drec ] ) for @xmath47 , as illustrated in fig .",
    "[ fig : order ] .     are calculated : diagonal ones from eq .",
    "( [ eq : diagonal ] ) , off - diagonal from recursion ( [ eq:1drec]).,width=226 ]      the above outlined approach can be straightforwardly applied to many - body systems . again",
    "the amplitude is expressed through the effective action and the corresponding effective potential , which now depends on mid - point positions and deviations of all particles .",
    "for simplicity , these vectors are usually combined into @xmath48 dimensional vectors @xmath49 and @xmath50 , where @xmath51 is spatial dimensionality , and @xmath52 is the number of particles . in this notation , @xmath53 where initial and final position @xmath54 and @xmath55 are analogously defined @xmath48 dimensional vectors . here we will not consider quantum statistics of particles . the required symmetrization or antisymmetrization must be applied after transition amplitudes are calculated using the effective potential .",
    "many - body transition amplitudes satisfy @xmath48-dimensional generalization of the time - dependent schr \" odinger equation , which leads to the equation for the effective potential similar to eq .",
    "( [ eq : eqw ] ) , with vectors replacing previously scalar quantities , @xmath56 the effective potential for short - time amplitudes again can be written in the form of the double expansion in @xmath26 and @xmath50 .",
    "however , it turns out to be advantageous to use the expansion @xmath57 and work with fully contracted quantities @xmath58 @xmath59 rather than with the respective coefficients @xmath60 . in this way we avoid the computationally expensive symmetrization over all indices @xmath61 . after inserting the above expansion into the equation for the effective potential ,",
    "we obtain the recursion relation which represents a generalization of previously derived eq .",
    "( [ eq:1drec ] ) for 1d case , and has the form @xmath62 the sum over @xmath40 runs from @xmath41 to @xmath42 , while diagonal quantities @xmath63 can be calculated directly , @xmath64 the above recursion disentangles , in complete analogy with the previously outlined case of one particle in 1d , and is solved in the order shown in fig .",
    "[ fig : order ] .",
    "the effective action approach can be used for numerically exact calculation of short - time amplitudes if the effective potential @xmath37 can be analytically derived to sufficiently high values of @xmath0 such that the associated error is smaller than the required numerical precision .",
    "the error @xmath36 for the effective action , obtained when level @xmath0 effective potential is used , translates into @xmath65 for a general many - body short - time amplitude .",
    "however , when amplitudes are calculated using the path integral monte carlo speedup c code @xcite , which will be presented in the next section , the errors of numerically calculated amplitudes are always proportional to @xmath66 , where @xmath14 is number of time - steps in the discretization of the propagation time @xmath5 .",
    "therefore , accessibility of higher - order effective actions is central to the application of this approach if it is used for direct calculation of short - time amplitudes @xcite , as well as in the case when pimc code is used @xcite .",
    "however , increase in the level @xmath0 leads to the increase in complexity of analytic expressions for the effective potential . on one hand",
    ", this limits the maximal accessible level @xmath0 by the amount of memory required for symbolic derivation of the effective potential . on the other hand , practical use of large expressions for @xmath37 may slow down numerical calculations , and one can opt to use lower than the maximal available level @xmath0 when optimizing total cpu time required for numerical simulation .",
    "the suggested approach is to study time - complexity of the algorithm in practical applications , and to choose optimal level @xmath0 by minimizing the execution time required to achieve fixed numerical precision .",
    "we have implemented efficient symbolic derivation of higher - order effective actions in mathematica using the recursive approach .",
    "all source files described in this section are located in the mathematica directory of the speedup code distribution .",
    "speedup code @xcite for symbolic derivation of the effective potential to specified level @xmath0 is implemented in mathematica @xcite , and is available in the effectiveaction-1d.nb notebook .",
    "it implements the algorithm depicted in fig .",
    "[ fig : order ] and calculates the coefficients @xmath43 for @xmath67 and @xmath68 , starting from the initial condition @xmath69 . for a given value of @xmath32 , the diagonal coefficient @xmath70 is first calculated from eq .",
    "( [ eq : diagonal ] ) , and then all off - diagonal coefficients are calculated from the recursion ( [ eq:1drec ] ) .    in this code the potential @xmath27 is not specified , and the effective potential is derived for a general one - particle 1d theory .",
    "the resulting coefficients @xmath43 and the effective potential are expressed in terms of the potential @xmath71 and its higher derivatives .",
    "level @xmath0 effective potential , constructed as @xmath72 contains derivatives of @xmath71 to order @xmath73 .",
    "the only input parameter of this mathematica code is the level @xmath0 to which the effective potential should be calculated .",
    "as the code runs , it prints used amount of memory ( in mb ) and cpu time .",
    "this information can be used to estimate the required computing resources for higher values of @xmath0 .",
    "the calculated coefficients can be exported to a file , and later imported for further numerical calculations . as an illustration ,",
    "the file effectiveaction-1d - export - p5.m contains exported definition of all the coefficients @xmath43 calculated at level @xmath74 , while the notebook effectiveaction-1d-matching-p5.nb contains matching output from the interactive session used to produce the above @xmath74 result .",
    "the execution of this code on a typical 2 ghz cpu for level @xmath75 requires 10 - 15 mb of ram and several seconds of cpu time .",
    "we have successfully run this code for levels as high as @xmath76 @xcite .",
    "speedup c code implements effective actions to the maximal level @xmath77 , with the size of the corresponding c function around 2 mb .",
    "if needed , higher levels @xmath0 can be easily implemented in c and added to the existing speedup code .",
    "although we have developed mathematica code capable of deriving effective actions for a general many - body theory in arbitrary number of spatial dimensions , in practical applications in 2d and 3d it can be very advantageous to use simpler codes , able to produce results to higher levels @xmath0 than the general code @xcite .",
    "this is done in files effectiveaction-2d.nb and effectiveaction-3d.nb , where the recursive approach is implemented directly in 2d and 3d .",
    "execution of these codes requires more memory : for @xmath75 effective action one needs 60 mb in 2d case , while in 3d case the needed amount of memory increases to 860 mb . on the other hand ,",
    "the execution time is several minutes for 2d code and around 30 minutes for 3d code .",
    "the distribution of the speedup code contains exported @xmath74 definitions of contractions @xmath78 for both 2d and 3d general potential , as well as matching outputs from interactive sessions used to generate these results .      when general expressions for the effective actions , obtained using the above described speedup mathematica codes , are used in numerical simulations",
    ", one has to specify the potential @xmath71 and its higher derivatives to order @xmath73 in order to be able to calculate transition amplitudes .",
    "such approach is justified for systems where the complexity of higher derivatives increases .",
    "however , for systems where this is not the case , or where only a limited number of derivatives is non - trivial ( e.g. polynomial interactions ) , it might be substantially beneficial to specify the potential at the beginning of the mathematica code and calculate the derivatives explicitly when iterating the recursion .    using this approach ,",
    "one is able to obtain coefficients @xmath43 and the effective potential @xmath9 directly as functions of the mid - point @xmath28 .",
    "this is implemented in the notebooks effectiveaction-1d-aho.nb and effectiveaction-2d-aho.nb for the case of anharmonic oscillators in 1d and 2d , @xmath79 these codes can be easily executed within few seconds and with the minimal amounts of memory even for @xmath80 . for 1d anharmonic",
    "oscillator we have successfully calculated effective actions to excessively large value @xmath81 , and in 2d to @xmath82 @xcite , to illustrate the advantage of this model - specific method .    similar approach can be also used in another extreme case , when the complexity of higher derivatives of the potential @xmath71 increases very fast , so that entering the corresponding expressions to the code becomes impractical . even in this situation expressions for effective actions",
    "can be usually simplified using some appropriate model - specific ansatz .",
    "the form of such ansatz can be deduced from the form of model - specific effective potentials , and then used to simplify their derivation .",
    "such use - case is illustrated in the speedup mathematica code for the modified p \" oscl - teller potential , @xmath83 for this potential , the coefficients @xmath43 of the effective potential can be expressed in the form @xmath84 and newly introduced constant coefficients @xmath85 can be calculated using the model - specific recursion in effectiveaction-1d-mpt.nb .",
    "the form of the ansatz ( [ eq:1d - mptansatz ] ) is deduced from the results of executing general 1d mathematica code , with the model - specific potential ( [ eq:1d - mpt ] ) defined before the recursion calculation of the coefficients is performed . using this approach",
    ", we were able to obtain maximal level @xmath86 effective action @xcite .",
    "speedup mathematica code for calculation of effective action for a general many - body theory is implemented using the mathtensor @xcite package for tensorial calculations in mathematica .",
    "this general implementation required some new functions related to the tensor calculus to be defined in the source notebook effectiveaction-manybody.nb provided with the speedup code .",
    "the function gennewind[n ] generates the required number n of upper and lower indices using the mathtensor function uplo , with the assigned names up1 , lo1 ,  , as well as lists upi and loi , each containing n strings corresponding to the names of generated indices .",
    "these new indices are used in the implementation of the recursion for calculation of derivatives of @xmath58 , contractions of the effective potential , and for this reason had to be explicitly named and properly introduced .",
    "the expressions obtained by iterating the recursion contain large numbers of contractions , and function newdefunique[contr ] replaces all contracted indices with the newly - introduced dummy ones in the contraction contr , so that they do not interfere with the calculation of derivatives in the recursion .",
    "this is necessary since the derivatives in recursion do not distinguish contracted indices from non - contracted ones if their names happen to be generated by the function gennewind .",
    "note that the expression contr does not have to be full contraction , i.e. function newdefunique will successfully act on tensors of any kind if they have contracted indices , while it will leave them unchanged if no contractions are present .",
    "the function newderivativevec[contr , vec , ind ] implements calculation of the first derivative of the tensor contr ( which may or may not contain contracted indices , but if it does , they are supposed to be uniquely defined dummy ones , which is achieved using the function newdefunique ) . the derivative is calculated with respect to vector vec with the vectorial index ind .",
    "the index ind can be either lower or upper one , and has to be generated previously by the function gennewind .",
    "finally , the function newlaplacianvec[contr , vec ] implements the laplacian of the tensor contr with respect to the vector vec , i.e. it performs the calculation of contractions of the type @xmath87    after all described functions are defined , the execution of the code proceeds by setting the desired level of the effective action p , generating the needed number of named indices using the function call gennewind[2 p + 2 ] , and then by performing the recursion according to the scheme illustrated in fig .",
    "[ fig : order ] .",
    "the use of mathtensor function canall in the recursion ensures that the obtained expressions for w[m , k ] will be simplified if possible .",
    "this is achieved in mathtensor by sorting and renaming all dummy indices using the same algorithm and trying to simplify the expression obtained in such way . by default , mathematica will distinguish contracted indices in two expressions if they are named differently , and mathtensor works around it using the renaming scheme implemented in canall .",
    "the computing resources required for the execution of the many - body speedup mathematica code depend strongly on the level of the effective action .",
    "for example , for level @xmath74 the code can be run within few seconds with the minimal memory requirements .",
    "the notebook with the matching output of this calculation is available as effectiveaction-manybody-matching-p5.nb , and the exported results for w[m , k ] are available in effectiveaction - manybody - export - p5.m . we were able to achieve maximal level @xmath75 @xcite , with the cpu time of around 2 days on a recent 2 ghz processor .",
    "the memory used by mathematica was approximately 1.6 gb .    note that exporting the definition of the effective potential from mathematica to a file will yield lower and upper indices named ll1 , uu1 , etc . in order to import previous results and use them for further calculations with the provided mathematica code",
    ", it is necessary to replace indices in the exported file to the proper index names used by the function gennewind .",
    "this is easily done using find / replace feature of any text editor .",
    "prior to importing definition of the effective potential , it is necessary to initialize mathtensor and all additional functions defined in the notebook effectiveaction-manybody.nb , and to generate the needed number of named indices using the function call gennewind[2p+2 ] .",
    "for short times of propagation , the effective actions derived using the above described mathematica codes can be directly used .",
    "this has been extensively used in refs .",
    "@xcite , where speedup codes were applied for numerical studies of several lower - dimensional models and calculation of large number of energy eigenvalues and eigenfunctions .",
    "the similar approach is used in ref .",
    "@xcite , where speedup code was used to study properties of fast - rotating bose - einstein condensates in anharmonic trapping potentials .",
    "the availability of a large number of eigenstates allowed not only precise calculation of global properties of the condensate ( such as condensation temperature and ground state occupancy ) , but also study of density profiles and construction of time - of - flight absorption graphs , with the exact quantum treatment of all available eigenfunctions .",
    "however , in majority of applications the time of propagation can not be assumed to be small .",
    "the effective actions are found to have finite radius of convergence @xcite , and if the typical propagation times in the considered case exceed this critical value , path integral monte carlo approach must be used in order to accurately calculate the transition amplitudes and the corresponding expectation values @xcite . as outlined earlier , in this case the time of propagation @xmath5",
    "is divided into @xmath14 time steps , such that @xmath15 is sufficiently small and that the effective action approach can be used .",
    "the discretization of the propagation time leads to the following expression for the discretized amplitude @xmath88 where @xmath89 stands for the discretized level @xmath0 effective action , @xmath90 , \\label{eq : snp}\\ ] ] and @xmath91 , @xmath92 , @xmath93 , @xmath94 .",
    "level @xmath0 discretized effective action is constructed from the corresponding effective potential @xmath37 , calculated as power series expansion to order @xmath95 . since it enters the action multiplied by @xmath26 , this leads to discretized actions correct to order @xmath36 , i.e. with the errors of the order @xmath96 .",
    "the long - time transition amplitude @xmath97 is a product of @xmath14 short - time amplitudes , and its errors are expected to scale as @xmath98 , as has been shown in refs .",
    "@xcite for transition amplitudes , and in refs .",
    "@xcite for expectation values , calculated using the corresponding consistently improved estimators .",
    "speedup c source is located in the src directory of the code distribution @xcite .",
    "it uses the standard path integral monte carlo algorithm for calculation of transition amplitudes .",
    "the trajectories are generates by the bisection algorithm @xcite , hence the number of time - steps @xmath14 is always given as a power of two , @xmath99 .",
    "when the amplitude is calculated with @xmath100 time steps , we can also easily calculate all discretized amplitudes in the hierarchy @xmath101 , ",
    ", @xmath102 at no extra cost .",
    "this requires only minor additional cpu time and memory , since the needed trajectories are already generated as subsets of maximal trajectories with @xmath100 time - steps .",
    "the trajectory is constructed starting from bisection level @xmath103 , where we only have initial and final position of the particle . at bisection level",
    "@xmath104 the propagation is divided into two time - steps , and we have to generate coordinate @xmath105 of the particle at the moment @xmath106 , thus constructing the piecewise trajectory connecting points @xmath11 at the time @xmath107 , @xmath105 at @xmath108 , and @xmath12 at @xmath109 .",
    "the coordinate @xmath105 is generated from the gaussian probability density function centered at @xmath110 and with the width @xmath111 .",
    "the procedure continues iteratively , and each time a set of points is added to the piecewise trajectory . at each bisection level @xmath112 the coordinates are generated from the gaussian centered at mid - point of coordinates generated at level @xmath113 , with the width @xmath114 . to generate numbers @xmath115 from the gaussian centered at zero we use box - m \" uller method , @xmath116 where numbers @xmath117 and @xmath118",
    "are generated from the uniform distribution on the interval @xmath119 $ ] , using the sprng library @xcite .",
    "if the target bisection level is @xmath120 , then at bisection level @xmath121 we generate @xmath122 numbers using the above formula , and construct the new trajectory by adding to already existing points the new ones , according to @xmath123=\\eta_i+\\frac{q[i\\cdot 2^{s - n+1}]+q[(i+1)\\cdot 2^{s - n+1}]}{2}\\ , , \\ ] ] where @xmath124 runs from 0 to @xmath125 .",
    "this ensures that at bisection level @xmath120 we get trajectory with @xmath99 time - steps , consisting of @xmath126 points , with boundary conditions @xmath127=a$ ] and @xmath128=b$ ] . at each lower bisection level @xmath112 ,",
    "the trajectory consists of @xmath129 points obtained from the maximal one ( level @xmath120 trajectory ) as a subset of points @xmath130 $ ] for @xmath131 .",
    "the use of trajectories generated by the bisection algorithm requires normalization factors from all gaussian probability density functions with different widths to be taken into account .",
    "this normalization is different for each bisection level , but can be calculated easily during the initialization phase .",
    "the basic c code is organized in three source files , main.c , p.c and potential.c , with the accompanying header files .",
    "the file potential.c ( its name can be changed , and specified at compile time ) must contain a user - supplied function v0 ( ) , defining the potential @xmath71 .",
    "for a given input value of the coordinate , v0 ( ) should initialize appropriate variables to the value of the potential @xmath71 and its higher derivatives to the required order @xmath73 .",
    "when this file is prepared , speedup code can be compiled and used .",
    "the distributed source contains definition of 1d - aho potential in the file potential.c , the same as in the file 1d - aho.c .",
    "the execution of the speedup code starts with the initialization and allocation of memory in the main ( ) function , and then the array of amplitudes and associated mc error estimates for each bisection level @xmath132 is calculated by calling the function mc ( ) . after printing the output , main ( )",
    "deallocates used memory and exits .",
    "function mc ( ) which implements the described mc algorithm is also located in the file main.c , as well as the function distr ( ) , which generates maximal ( level @xmath120 ) trajectories .",
    "the function mc ( ) contains main mc sampling loop . in each step new level @xmath120 trajectory",
    "is generated by calling the function distr ( ) .",
    "afterwards , for each bisection level @xmath112 , function func ( ) is invoked .",
    "this function is located in the file p.c , and returns the value of the function @xmath133 , properly normalized , as described earlier .",
    "this value ( and its square ) is accumulated in the mc loop for each bisection level @xmath112 and later averaged to obtain the estimate of the corresponding discretized amplitude and the associated mc error .",
    "the function func ( ) makes use of c implementation of earlier derived effective actions for a general 1d potential . for",
    "a given trajectory at the bisection level @xmath112 , func ( ) will first initialize appropriate variables with the values of the potential and its higher derivatives ( to the required level @xmath73 ) by calling the user - supplied function v0 ( ) , located in the file potential.c . afterwards",
    "the effective action is calculated according to eq .",
    "( [ eq : snp ] ) , where the effective potential is calculated by the function wp ( ) , located in the file p.c .",
    "the desired level @xmath0 of the effective action is selected by defining the appropriate pre - processor variable when the code is compiled .",
    "in addition to this basic mode , when speedup code uses general expression for level @xmath0 effective action , we have also implemented model - specific mode , described earlier .",
    "if effective actions are derived for a specific model , then user can specify an alternative p.c file to be used within the directory src / models/<model > , where corresponds to the name of the model .",
    "if this mode is selected at compile time , the compiler will ignore p.c from the top src directory , and use the model - specific one , defined by the user .",
    "the distributed source contains model definitions for 1d - aho and 1d - mpt potentials in directories src / models/1d - aho and src / models/1d - mpt .",
    "note that in this mode the potential is specified directly in the definition of the effective potential , and therefore the function v0 ( ) is not used ( nor the potential.c file ) .",
    "speedup c source can be easily compiled using the makefile provided in the top directory of the distribution .",
    "the compilation has been thoroughly tested with gnu , intel and ibm xlc compilers . in order to compile",
    "the code one has to specify the compiler which will be used in the makefile by setting appropriately the variable compiler , and then to proceed with the standard command of the type make < target > , where could be one of all , speedup , sprng , clean - all , clean - speedup , clean - sprng .",
    "the sprng library @xcite is an external dependency , and for this reason it is located in the directory src / deps / sprng4.0 . in principle",
    ", it has to be compiled only once , after the compiler has been set .",
    "this is achieved by executing the command make sprng . afterwards",
    "the speedup code can be compiled and easily linked with the already compiled sprng library .",
    "note that if the compiler is changed , sprng library has to be recompiled with the same complier in order to be successfully linked with the speedup code .    to compile the code with level @xmath75 effective action and user - supplied function v0 ( ) located in the file src/1d - aho.c",
    ", the following command can be used : +   + if not specified , potential = potential.c is used , while the default level of the effective action is p=1 . to compile the code using a model - specific definition of the effective potential , instead of the potential variable , we have to appropriately set the model variable on the command line .",
    "for example , to compile the supplied p.c file for 1d - mpt model located in the directory src / models/1d - mpt using the level @xmath74 effective action , the following command can be used : +   + all binaries compiled using the potential mode are stored in the bin directory , while the binaries for the model mode are stored in the appropriate bin / models/<model > directory .",
    "this information is provided by the make command after each successful compilation is done .",
    "the compilation is documented in more details in the supplied readme.txt files .",
    "the distribution of the speedup code also contains examples of compilation with the gnu , intel and ibm xlc compilers , as well as matching outputs and results of the execution for each tested compiler , each model , and for a range of levels of the effective action @xmath0 .     of 1d - mpt potential as a function of the number of time steps @xmath14 , calculated with level @xmath134 effective actions , with the parameters of the potential @xmath135 .",
    "the full lines give the fitted functions ( [ eq : fit ] ) , where the constant term @xmath136 corresponds to the continuum - theory amplitude @xmath137 .",
    "the number of monte - carlo samples was @xmath138.,width=359 ]    once compiled , the speedup code can be used to calculate long - time amplitudes of a system in the specified potential @xmath71 .",
    "if executed without any command - line arguments , the binary will print help message , with details of the usage .",
    "the obligatory arguments are time of propagation t , initial and final position a and b , maximal bisection level s , number of mc samples nmc and seed for initialization of the sprng random number generator .",
    "all further arguments are converted to numbers of the double type and made available in the array par to the function v0 ( ) , or to the model - specific functions in the file src / models/<model>/p.c .",
    "the output of the execution contains calculated value of the amplitude for each bisection level @xmath139 and the corresponding mc estimate of its error ( standard deviation ) . at bisection level @xmath103 , where no integrals are actually calculated and the discretized @xmath140 amplitude is simply given by an analytic expression , zero is printed as the error estimate .     effective action and parameters @xmath141 , @xmath142",
    "the discretization cutoff was @xmath143 , spacing @xmath144 , and time of propagation @xmath145 .",
    "( right ) results for the double - well potential , @xmath146 , @xmath147 , @xmath148 , @xmath149 , @xmath150 . on both graphs , left @xmath151-axis corresponds to @xmath27 and energy eigenvalues , while scale on the right @xmath151-axis corresponds to values of eigenfunctions , each vertically shifted to level with the appropriate eigenvalue.,title=\"fig:\",width=272 ]   effective action and parameters @xmath141 , @xmath142 .",
    "the discretization cutoff was @xmath143 , spacing @xmath144 , and time of propagation @xmath145 .",
    "( right ) results for the double - well potential , @xmath146 , @xmath147 , @xmath148 , @xmath149 , @xmath150 . on both graphs , left @xmath151-axis corresponds to @xmath27 and energy eigenvalues , while scale on the right @xmath151-axis corresponds to values of eigenfunctions , each vertically shifted to level with the appropriate eigenvalue.,title=\"fig:\",width=272 ]    fig .",
    "[ fig : conv ] illustrates the typical results obtained from the speedup code on the example of 1d - mpt theory . in this figure",
    "we can see the convergence of numerically calculated amplitudes with the number of time - steps @xmath14 to the exact continuum value , obtained in the limit @xmath152 .",
    "such convergence is obtained for each level @xmath0 of the effective action used .",
    "however , the convergence is much faster when higher - order effective action is used .",
    "note that all results corresponding to the one value of level @xmath0 on the graph are obtained from a single run of the speedup code with the maximal bisection level @xmath153 .",
    "the simplest way to estimate the continuum value of the amplitude is to fit numerical results from single run of the code to the appropriate level @xmath0 fitting function @xcite , @xmath154 the constant term obtained by fitting corresponds to the best estimate of the exact amplitude which can be found from the available numerical results .",
    "as mentioned earlier , the effective action approach can be used for accurate calculation of a large number of energy eigenstates and eigenvalues by diagonalization of the space - discretized matrix of transition amplitudes @xcite .",
    "[ fig : phi4states ] illustrates this for the case of an anharmonic and double - well potential .",
    "the graph on the left gives several eigenvalues and eigenstates for 1d - aho potential with @xmath141 and quartic anharmonicity @xmath142 , while the graph on the right gives low - lying spectrum and eigenfunctions of the double - well potential , obtained for @xmath146 , with the moderate anharmonicity @xmath147 .",
    "more details on this approach , including study of all errors associated with the discretization process , can be found in refs .",
    "in this paper we have presented speedup mathematica and c codes , which implement the effective action approach for calculation of quantum mechanical transition amplitudes .",
    "the developed mathematica codes provide an efficient tool for symbolic derivation of effective actions to high orders for specific models , for a general 1d , 2d and 3d single - particle theory , as well as for a general many - body systems in arbitrary number of spatial dimensions .",
    "the recursive implementation of the code allows symbolic calculation of extremely high levels of effective actions , required for high - precision calculation of transition amplitudes .    for calculation of long - time amplitudes",
    "we have developed speedup c path integral monte carlo code .",
    "the c implementation of a general 1d effective action to maximal level @xmath77 and model - specific effective actions provide fast @xmath38 convergence to the exact continuum amplitudes .",
    "further development of the speedup c codes will include parallelization using mpi , openmp and hybrid programming model , c implementation of the effective potential to higher levels @xmath0 , as well as providing model - specific effective actions for relevant potentials , including many - body systems .",
    "the authors gratefully acknowledge useful discussions with axel pelster and vladimir slavni ' c. this work was supported in part by the ministry of education and science of the republic of serbia , under project no .",
    "on171017 , and bilateral project nad - bec funded jointly with the german academic exchange service ( daad ) , and by the european commission under eu fp7 projects prace-1ip , hp - see and egi - inspire .",
    "r. p. feynman , rev .",
    "phys . * 20 * , 367 ( 1948 ) .",
    "r. p. feynman and a. r. hibbs , _ quantum mechanics and path integrals _ ( mcgraw - hill , new york , 1965 ) .",
    "h. kleinert , _ path integrals in quantum mechanics , statistics , polymer physics , and financial markets _ , 5th ed .",
    "( world scientific , singapore , 2009 ) .",
    "d. stojiljkovi ' c , a. bogojevi ' c , and a. bala , phys .",
    "lett . a * 360 * , 205 ( 2006 ) .",
    "a. bogojevi ' c , i. vidanovi ' c , a. bala , and a. beli ' c , phys .",
    "lett . a * 372 * , 3341 ( 2008 ) .",
    "a. sethia , s. sanyal , and y. singh , j. chem . phys . * 93 * , 7268 ( 1990 ) . a. sethia , s. sanyal , and f. hirata , chem .",
    ". lett . * 315 * , 299 ( 1999 ) .",
    "i. vidanovi ' c , a. bogojevi ' c , and a. beli ' c , phys .",
    "e * 80 * , 066705 ( 2009 ) .",
    "i. vidanovi ' c , a. bogojevi ' c , a. bala , and a. beli ' c , phys .",
    "e * 80 * , 066706 ( 2009 ) .",
    "a. bala , i. vidanovi ' c , a. bogojevi ' c , and a. pelster , phys .",
    "a * 374 * , 1539 ( 2010 ) .",
    "r. p. feynman , _ statistical mechanics _ ( w. a. benjamin , new york , 1972 ) .",
    "g. parisi , _ statistical field theory _",
    "( addison wesley , new york , 1988 ) . a. bogojevi ' c , a. bala , and a. beli ' c , phys . rev .",
    "* 94 * , 180403 ( 2005 ) .",
    "a. bogojevi ' c , a. bala , and a. beli ' c , phys .",
    "b * 72 * , 064302 ( 2005 ) .",
    "a. bogojevi ' c , a. bala , and a. beli ' c , phys .",
    "a * 344 * , 84 ( 2005 ) .",
    "a. bogojevi ' c , a. bala , and a. beli ' c , phys .",
    "e * 72 * , 036128 ( 2005 ) .",
    "a. bala , a. bogojevi ' c , i. vidanovi ' c , and a. pelster , phys .",
    "e * 79 * , 036701 ( 2009 ) .",
    "j. gruji ' c , a. bogojevi ' c , and a. bala , phys .",
    "a * 360 * , 217 ( 2006 ) .",
    "speedup code distribution , http://www.scl.rs/speedup/    d. m. ceperley , rev .",
    "phys . * 67 * , 279 ( 1995 ) .",
    "m. takahashi and m. imada , j. phys .",
    ". jpn . * 53 * , 3765 ( 1984 ) .",
    "x. p. li and j. q. broughton , j. chem . phys . *",
    "86 * , 5094 ( 1987 ) .",
    "h. de  raedt and b. de  raedt , phys .",
    "a * 28 * , 3575 ( 1983 ) .",
    "s. jang , s. jang , and g. voth , j. chem .",
    "phys . * 115 * , 7832 ( 2001 ) .",
    "n. makri and w. h. miller , chem .",
    "* 151 * , 1 ( 1988 ) ; n. makri and w. h. miller , j. chem . phys . * 90 * , 904 ( 1989 ) .",
    "n. makri , chem .",
    ". lett . * 193 * , 435 ( 1992 ) .",
    "m. alford , t. r. klassen , and g. p. lepage , phys .",
    "d * 58 * , 034503 ( 1998 ) .",
    "s.  a. chin and e.  krotscheck , phys .",
    "e * 72 * , 036705 ( 2005 ) .",
    "e. r. hern ' andez , s. janecek , m. kaczmarski , e. krotscheck , phys .",
    "b * 75 * , 075108 ( 2007 ) .",
    "o. ciftja and s.  a. chin , phys .",
    "b * 68 * , 134510 ( 2003 ) .",
    "k. sakkos , j. casulleras , and j. boronat , j. chem",
    ". phys . * 130 * , 204109 ( 2009 ) . s. janecek and e. krotscheck , comput .",
    ". comm . * 178 * , 835 ( 2008 ) .",
    "a.  d. bandrauk and h. shen , j. chem . phys .",
    "* 99 * , 1185 ( 1993 ) . s.  a. chin and c.  r. chen , j. chem . phys . * 117 * , 1409 ( 2002 ) .",
    "i.  p. omelyan , i.  m. mryglod , and r. folk , comput .",
    ". commun . * 151 * , 272 ( 2003 ) .",
    "g. goldstein and d. baye , phys .",
    "e * 70 * , 056703 ( 2004 ) .",
    "s. a. chin , arxiv:0809.0914 .",
    "s. a. chin , s. janecek , and e. krotscheck , comput .",
    "* 180 * , 1700 ( 2009 ) .",
    "s. a. chin , s. janecek , and e. krotscheck , chem .",
    ". lett . * 470 * , 342 ( 2009 ) .",
    "mathematica software package , http://www.wolfram.com/mathematica/ mathtensor package , http://smc.vnet.net/mathtensor.html scalable parallel random number generator library , http://sprng.fsu.edu/"
  ],
  "abstract_text": [
    "<S> we present path integral monte carlo c code for calculation of quantum mechanical transition amplitudes for 1d models . </S>",
    "<S> the speedup c code is based on the use of higher - order short - time effective actions and implemented to the maximal order @xmath0=18 in the time of propagation ( monte carlo time step ) , which substantially improves the convergence of discretized amplitudes to their exact continuum values . </S>",
    "<S> symbolic derivation of higher - order effective actions is implemented in speedup mathematica codes , using the recursive schr \" odinger equation approach . </S>",
    "<S> in addition to the general 1d quantum theory , developed mathematica codes are capable of calculating effective actions for specific models , for general 2d and 3d potentials , as well as for a general many - body theory in arbitrary number of spatial dimensions . </S>"
  ]
}