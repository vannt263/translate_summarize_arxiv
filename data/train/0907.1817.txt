{
  "article_text": [
    "numerical approaches to solve partial differential equations ( pde s ) on surfaces have received growing interest over last decade .",
    "however , they are still not well - understood .",
    "partial differential equations need to be solved intrinsically and numerically for data defined on 3d surfaces in many applications .",
    "for instance , such examples exist in texture synthesis ( turk@xcite , witkin and kass@xcite ) , vector field visualization ( diewald , preufer and rumpf@xcite ) , weathering ( dorsey and hanrahan@xcite ) and cell - biology ( ayton , mcwhirter , mcmurty and voth 2005 ) .",
    "usually , surfaces are presented by triangular or polygonal forms .",
    "partial differential equations are then solved on these triangular or polygonal meshes with data defined on them .",
    "the use of triangular or polygonal meshes is very popular in all areas dealing with 3d models .",
    "however , it has not yet been a widely accepted method to compute differential characteristics such as principal directions , curvatures and laplacians ( chen and wu@xcite , wu , chen and chi @xcite , taubin@xcite ) .",
    "this is because that there is no unified , simple and effective method to compute these first and second order differential characteristics of the triangular or polygonal surface and to solve pde s for data defined on triangular or polygonal meshes . in chen , chi and wu@xcite ,",
    "the authors proposed a new intrinsic simple algorithm to handle this difficulty . in this note",
    ", we shall use this new technique to solve pde s on surfaces .    in bertalmio , cheng , osher and sapiro@xcite",
    "proposed a framework , the implicit surface algorithm , to solve variational problems and pde s for scalar and vector - valued data defined on surfaces.their key idea is to use , instead of a triangular or polygonal representation , an implicit representation .",
    "the surface under consideration is the zero - level set of a higher dimensional embedding function .",
    "then they smoothly extend the original data on the surface to the 3d domain , adapt the pde s accordingly , and implement all the numerical computations on the fixed cartesian grid corresponding to the embedding function .",
    "the advantage of their method is the use of the cartesian grid instead of a triangular mesh for the numerical implementation .",
    "in ths section we first propose our discrete intrinsic algorithm for solving pde s on regular surfaces .",
    "we divide our algorithm into two main steps : first .",
    "we approximate the given surface by a suitable triangular mesh according to the accuracy demand .",
    "second , we use our new intrinsic differential method developed in chen , chi and wu@xcite to compute the numerical pde on the fixed triangular mesh .",
    "the first step is now easy to implement since one can find some good and efficient algorithms in the public domain .",
    "the difficult part lies in the second step .",
    "namely , how can one effectively compute differential quantities on functions on a triangular mesh ?",
    "next , we shall compare our algorithm with the implicit algorithm proposed by bertalmio , cheng , osher and sapiro@xcite .",
    "we list the key steps of these two algorithms about solving pde s on surfaces as follows .    [ cols=\"<,<\",options=\"header \" , ]     one can tell from this comparison that our method is much simpler and more intrinsic . in many applications ,",
    "one usually starts with triangular meshes instead of regular surfaces . in this case",
    ", we do not need step 1 in our intrinsic algorithm .",
    "however , in the implicit surface algorithm , one will need one extra processing step : construct an accurate implicit surface from a triangular mesh .",
    "note that the triangular mesh may compose of a lot of triangles .",
    "this will cost large computations to obtain the accurate implicit surface .",
    "next , we shall describe a new , simple and effective method to define the discrete gradient and the discrete lb operator on functions on a triangular mesh . in order to do so , we first recall the gradient and the lb operator on functions in a regular surface @xmath0 in the 3d euclidean space @xmath1 .",
    "we consider a parameterization @xmath2 at a point @xmath3 , where @xmath4 is an open subset of the 2d euclidean space @xmath5 .",
    "we can choose , at each point @xmath6 of @xmath7 , a unit normal vector @xmath8 .",
    "the map @xmath9 is the local gauss map from an open subset of the regular surface @xmath0 to the unit sphere in the 3d euclidean space @xmath1 .",
    "the gauss map @xmath10 is differentiable .",
    "denote the tangent space of @xmath0 at the point @xmath3 by @xmath11 .",
    "the tangent space @xmath12 is a linear space spanned by @xmath13 where @xmath14 are coordinates for @xmath4 .",
    "the gradient @xmath15 of a smooth function @xmath16 on @xmath0 can be computed from    @xmath17    where @xmath18 , @xmath19 , and @xmath20 are the coefficients of the first fundamental form and    @xmath21    see do carmo@xcite for the details .",
    "note that the gradient @xmath15 assigns to each point @xmath6 in @xmath0 a tangent vector @xmath22 such that we have for all @xmath23 , @xmath24 where the smooth curve @xmath25 is in @xmath0 with @xmath26 and @xmath27 .",
    "the lb operator @xmath28 acting on the function @xmath16 is defined by the integral duality    @xmath29    for all smooth function @xmath30 on @xmath0 .",
    "a direct computation yields the following local representation for the lb operator on a smooth function @xmath16 :    @xmath31 \\cr   & + \\frac{1}{\\sqrt{eg - f^2}}\\left [ \\frac{\\partial}{\\partial v}(\\frac{e}{\\sqrt{eg - f^2}}\\frac{\\partial g}{\\partial v } ) - \\frac{\\partial } { \\partial v}(\\frac{f}{\\sqrt{eg - f^2}}\\frac{\\partial g}{\\partial u } ) \\right ] \\end{array}\\ ] ]    to move from regular surfaces to triangular meshes , one need to avoid the problem of local parametrization @xmath32 around a vertex @xmath3 .",
    "in other word , one does not have the fist fundamental form @xmath18 , @xmath19 , @xmath20 and their derivatives for the computation of the gradient and the laplacian operator of a function on a triangular mesh . to handle this problem",
    ", we give a novel method in chen , chi and wu@xcite to compute these differential quantities .",
    "the primary ideas were developed in chen , chi and wu@xcite where we try to estimate the discrete partial derivatives for 2d scattered data points .      in this section",
    "we shall describe a unified , simple and effective method to define the discrete gradient and the discrete laplacian operator on functions on a triangular mesh .",
    "the primary ideas were developed in chen , chi and wu@xcite where we try to estimate the discrete partial derivatives of functions on 2d scattered data points .",
    "indeed , the method that we shall use to develop our algorithm is divided into two main steps : first we lift the 1-neighborhood points to the tangent space and obtain a local tangential polygon .",
    "second , we use some geometric idea to lift functions and vectors to the tangent space and then we can compute their derivatives in the 2d tangent space .",
    "this means that the lifting process allows us to reduce the 2d curved surface problem to the 2d euclidean problem and hence the methods in @xcite and@xcite can be applied .",
    "consider a triangular mesh @xmath33 , where @xmath34 is the list vertices and @xmath35 is the list of triangles .",
    "next , we introduce the notion of the local tangential polygon @xmath36 at the vertex @xmath37 of @xmath38 as follows :    1 .",
    "the normal vector @xmath39 at the vertex @xmath37 in @xmath38 is given by @xmath40 where @xmath41 is the unit normal to a triangle face @xmath42 and the centroid weight is given in @xcite by @xmath43 here , @xmath44 is the centroid of the triangle face @xmath42 determined by @xmath45 2 .",
    "the tangent plane @xmath46 of @xmath38 at @xmath37 is now determined by @xmath47 3 .",
    "the local tangential polygon @xmath36 of @xmath37 in @xmath46 is formed by the vertices @xmath48 which is the lifting vertex of @xmath49 adjacent to @xmath37 in @xmath38 .",
    "@xmath50 as in figure [ tangential ] .",
    ".,height=234 ]    let @xmath51 be a function on @xmath52 .",
    "we will lift locally the function @xmath51 to a function , denoted by @xmath53 , on the vertices @xmath48 in @xmath36 by simply setting @xmath54 and @xmath55 where @xmath56 is the origin of @xmath46 .",
    "one can then extend the function @xmath53 to a piecewise linear function , still denoted by @xmath53 , on @xmath36 as follows .",
    "consider a face @xmath42 with vertices @xmath37 , @xmath49 and @xmath57 in @xmath19 .",
    "we obtain a lifting face @xmath58 with vertices @xmath56 , @xmath48 and @xmath59 in @xmath36 .",
    "every point @xmath3 in @xmath58 can be written as a linear combination of @xmath48 and @xmath59 .",
    "that is , @xmath60 where @xmath61 and @xmath62 .",
    "then we define @xmath63 hence , the extended function @xmath53 is affine on each triangle @xmath58 of @xmath36 and is differentiable on @xmath58 .",
    "the gradient @xmath64 of @xmath53 at the origin @xmath56 can be obtained by @xmath65 where the coefficients @xmath66 and @xmath67 satisfy the relations : @xmath68    as easy computation gives @xmath69    to obtain the gradient @xmath70 of @xmath51 on @xmath38 at the vertex @xmath37 , we use again the weighted combination method .",
    "namely , we set @xmath71 with @xmath72 where @xmath73 is the centroid of the lifting triangle face @xmath58 and is determined by @xmath74    next we explain how to obtain a good discrete laplacian @xmath75 of a function @xmath51 on the triangular mesh @xmath38 . from the discussions above",
    ", we obtain the gradient @xmath70 of @xmath51 on @xmath38 at each vertex @xmath37 .",
    "we can use the method of parallel transport to lift the vector @xmath76 at @xmath49 to a vector @xmath77 in the tangential space @xmath46 .",
    "the idea is to define a orthonormal linear map from @xmath78 to @xmath46 .",
    "to do so , we choose an orthonormal basis for @xmath46 by @xmath79 the corresponding orthonormal basis for @xmath78 is then given by @xmath80 then , the linear map @xmath81 of the parallel transport is given by @xmath82 for @xmath83 in @xmath78 .",
    "see figure [ parallel ] .        in this way",
    ", we can set the tangential gradient @xmath84 at @xmath48 by @xmath85 hence we obtain a tangential gradient @xmath84 of @xmath51 at each vertex @xmath48 in the tangential polygon @xmath36 and we also set @xmath86 see figure [ tildeh ] .",
    ", height=234 ]    fix an orthonormal basis @xmath87 for @xmath46 .",
    "the tangential gradient @xmath88 can be written as @xmath89 the coefficients @xmath90 and @xmath91 can now be viewed as functions on the vertices @xmath48 of the tangential polygon @xmath36 . as before , we can then obtain their gradients @xmath92 and @xmath93 at origin .",
    "namely ,    @xmath94    with the centroid weights @xmath95 as in ( [ centroidweight ] )",
    ".    put them in the matrix form to give @xmath96 therefore we have the laplacian @xmath97 of @xmath51 at the vertex @xmath37 of @xmath38 : @xmath98    theoretically the definition of the laplacian @xmath97 is independent of the choice of the orthonormal basis @xmath87 .",
    "as a simple example to illustrate our new algorithm , let us consider a linear diffusion equation on a regular surface @xmath0 :    @xmath99    for @xmath100 , @xmath101 , where @xmath28 is the surface laplacian on @xmath0 and @xmath102 is a smooth function on @xmath0 .",
    "for the numerical implementation of our intrinsic algorithm , we take the regular surface @xmath0 to be ( 1 ) the unit sphere @xmath103 or ( 2 ) a torus @xmath104 . in the case of the sphere @xmath103 , we consider the function    @xmath105    figure [ sphere ] and figure [ shpere_final ] give the solution of ( [ heatequation ] ) and ( [ function_g ] ) with initial functions @xmath106 .",
    "different time steps are shown until the stationary solution is reached .",
    "consider the torus @xmath107 for @xmath108 $ ] with @xmath109 .",
    "we take @xmath110 , @xmath111 and choose the function    @xmath112\\ ] ]    figure [ torus ] and figure [ torus_final ] give the solution of ( [ heatequation ] ) and ( [ function_g2 ] ) with initial functions @xmath106 . as",
    "above , different timesteps are depicted until the stationary solution is reached .",
    "the original idea about how reaction - diffusion equations can be used to create patterns was first introduced in ( turing@xcite ) . the basic idea is to have a number of chemicals that diffuse at different rates and that react with each others .",
    "after the works of ( turk@xcite , witkin and kass@xcite ) , the use of reaction - diffusion equations for texture synthesis attracted a lot of attentions in computer graphics .",
    "turk , witkin and kass used these equations for planar textures and textures on surfaces .",
    "then the patterns are analyzed by assigning a brightness value to the concentration of one of the `` chemicals '' .",
    "where @xmath66 and @xmath67 are two constants representing the diffusion rates and @xmath42 and @xmath16 are functions that describe the reaction . for simple isotropic patterns ,",
    "turing chose the functions @xmath42 and @xmath16 to be          in the case of the sphere @xmath103 , figure [ diffusion_sphere ] and figure [ diffusion_sphere_final ] give the solution of ( [ du ] ) and ( [ fg ] ) with initial functions and different timesteps are shown until the stationary solution is reached .",
    "on the torus @xmath119 for @xmath108 $ ] figure [ diffusion_torus ] and figure [ diffusion_torus_final ] give the solution of ( [ du ] ) and ( [ fg ] ) with initial functions @xmath120 and @xmath121 , @xmath122 , @xmath123 .",
    "different timesteps are shown until the stationary solution is reached .",
    "bertalmio , m. sapiro , g. cheng l.t . and",
    "osher , s. a framework for solving surface partial differential equations for computer graphics applications.(2000 ) cam report00 - 43 , ucla , mathematics department ."
  ],
  "abstract_text": [
    "<S> in this note we shall introduce a simple , effective numerical method for solving partial differential equations for scalar and vector - valued data defined on surfaces . even though we shall follow the traditional way to approximate the regular surfaces under consideration by triangular meshes , the key idea of our algorithm </S>",
    "<S> is to develop an intrinsic and unified way to compute directly the partial derivatives of functions defined on triangular meshes . </S>",
    "<S> we shall present examples in computer graphics and image processing applications .    ,    and    gradient , laplacian , tangential lifting method , diffusion equations </S>"
  ]
}