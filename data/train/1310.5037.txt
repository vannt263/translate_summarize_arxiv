{
  "article_text": [
    "the _ minimum path cover _ ( minpc ) problem is a well - known problem in graph theory  @xcite . given a _ directed acyclic graph _ ( dag )",
    ", minpc asks for a minimum - cardinality set @xmath0 of paths such that each vertex of @xmath1 belongs to at least one path of @xmath0 .",
    "the problem can be solved in polynomial time with an algorithm based on the well - known dilworth s theorem for partially ordered sets  @xcite , which allows to relate the size of a minimum path cover to that of a maximum matching in a bipartite graph obtained from the input dag .",
    "the minimum path cover problem has important applications in several fields ranging from bioinformatics  @xcite to software testing  @xcite .",
    "in particular , in bioinformatics the minimum path cover problem is applied to the reconstruction of a set of highly - similar sequences starting from a large set of their short fragments ( called _ short reads _ )  @xcite .",
    "more precisely , each fragment is represented by a single vertex and two vertices are connected if the alignments of the corresponding reads on the genomic sequence overlap . in  @xcite ,",
    "the paths on such a graph represent putative transcripts and a minimum - cardinality set of paths `` covering '' all the vertices represents a set of protein isoforms which are likely to originate from the observed reads . on the other hand , in  @xcite the paths on such a graph represent the genomes of putative viral haplotypes and a minimum - cardinality set of paths covering the whole graph represents the likely structure of a viral population .",
    "recently , different constraints have motivated the definition of new variants of the minimum path cover problem . in  @xcite , given a dag @xmath2 and a set @xmath3 of required paths , the proposed problem asks for a minimum cardinality set of paths such that : ( 1 )  each vertex of the graph belongs to some path , and ( 2 )  each path in @xmath3 is a subpath of a path of the solution .",
    "the authors have described a polynomial - time algorithm to solve this problem by collapsing each required path into a single vertex and then finding a minimum path cover on the resulting graph .",
    "other constrained problems related to minimum path cover have been proposed in the context of social network analysis and , given an edge - colored graph , ask for the maximum number of vertex - disjoint uni - color paths that cover the vertices of the given graph  @xcite . some constrained variants of the minimum path cover problem have been introduced in the past by ntafos and hakimi in the context of software testing  @xcite and appear to be relevant for some sequence reconstruction problems of recent interest in bioinformatics .",
    "more precisely , in software testing each procedure to be tested is modeled by a graph where vertices correspond to single instructions and two vertices are connected if the corresponding instructions are executed sequentially .",
    "the test of the procedure should check each instruction at least once , hence a minimum path cover of the graph represents a minimum set of execution flows that allows to test all the instructions .",
    "clearly , not all the execution flows are possible .",
    "for this reason , ntafos and hakimi proposed the concept of required pairs , which are pairs of vertices that a feasible solution must include in a path , and that of impossible pairs , which are pairs of vertices that a feasible solution must not include in the same path .",
    "in particular , one of the problems introduced by ntafos and hakimi is the _ minimum required pairs cover _ ( minrpc ) problem where , given a dag and a set of required pairs , the goal is to compute a minimum set of paths _ covering _ all the required pairs , _",
    "i.e. _ ,  a minimum set of paths such that , for each required pair , at least one path contains both vertices of the pair .",
    "the concept of required pairs is also relevant for sequence reconstruction problems in bioinformatics , as short reads are often sequenced in pairs ( _ paired - end reads _ ) and these pairs of reads must align to a single genetic sequence . as a consequence",
    ", each pair of vertices corresponding to paired - end reads must belong to the same path of the cover .",
    "paired - end reads provide valuable information that , in principle , could greatly improve the accuracy of the reconstruction .",
    "however , they are often used only to filter out the reconstructed sequences that do not meet such constraints , instead of directly exploiting them during the reconstruction process .",
    "notice that minrpc asks for a solution that covers only the required pairs , while in bioinformatics we are also interested in covering all the vertices .",
    "for this reason , we consider a variant of the minimum path cover problem , called _ minimum path cover with required pairs _",
    "( minpcrp ) , that , given a dag and a set of required pairs , asks for a minimum set of paths covering all the vertices and all the required pairs .",
    "clearly , minpcrp is closely related to minrpc .",
    "in fact , as we show in section  [ sec : pre ] , the same reduction used in  @xcite to prove the np - hardness of minrpc can be applied to our problem , leading to its intractability . in this paper",
    ", we continue the analysis of  @xcite by studying the complexity of path covering problems with required pairs .",
    "more precisely , we study how the complexity of these problems is influenced by two parameters relevant for the sequence reconstruction applications in bioinformatics : ( 1 )  the minimum number of paths covering all the vertices and all the required pairs and ( 2 )  the maximum _ overlapping degree _",
    "( defined later ) . in the bioinformatics applications we discussed , the first parameter ",
    "the number of covering paths  is often small , thus an algorithm exponential in the size of the solution could be of interest .",
    "the second parameter we consider in this paper , the maximum overlapping degree , can be informally defined as follows .",
    "two required pairs overlap when there exists a path that connects the vertices of the pairs , and the path can not be split in two disjoint subpaths that separately connect the vertices of the two pairs .",
    "then , the overlapping degree of a required pair is the number of required pairs that overlap with it . in the sequence reconstruction applications ,",
    "as the distance between two paired - end reads is fixed , the maximum overlapping degree is small compared to the number of vertices , hence it is a natural parameter for investigating the computational complexity of the problem .",
    "first , we investigate how the computational complexity of minpcrp is influenced by the first parameter . in this paper",
    "we prove that it is np - complete to decide if there exists a solution of minpcrp consisting of at most three paths ( via a reduction from the @xmath4-coloring problem ) .",
    "we complement this result by giving a polynomial - time algorithm for computing a solution with at most @xmath5 paths , thus establishing a sharp tractability borderline for minpcrp when parameterized by the size of the solution .",
    "these results significantly improve the hardness result that ntafos and hakimi  @xcite presented for minrpc ( and that holds also for minpcrp ) , where the solution contains a number of paths which is polynomial in the size of the input .",
    "then , we investigate how the computational complexity of minpcrp is influenced by the second parameter , the overlapping degree .",
    "unfortunately , minpcrp is np - hard even if the maximum overlapping degree is 0 .",
    "in fact , this can be easily obtained by modifying the reduction presented in  @xcite to hold also for restricted instances of minpcrp with no overlapping required pairs . a natural heuristic approach for solving minpcrp",
    "is the one which computes a solution by iteratively adding a path that covers a maximum set of required pairs not yet covered by a path of the solution .",
    "this approach leads to a natural combinatorial problem , the _ maximum required pairs with single path _ ( maxrpsp ) problem , that , given a dag and a set of required pairs , asks for a path that covers the maximum number of required pairs .",
    "we investigate the complexity of maxrpsp and we show that it is not only np - hard , but also w[1]-hard when the parameter is the number of covered required pairs .",
    "similarly as minpcrp , we consider the maxrpsp problem parameterized by the maximum overlapping degree but , differently from minpcrp , we give a fixed - parameter algorithm for this case .",
    "this positive result shows a gap between the complexity of maxrpsp and the complexity of minpcrp when parameterized by the maximum overlapping degree .",
    "the rest of the paper is organized as follows .",
    "first , in section  [ sec : pre ] we give some preliminary notions and we introduce the formal definitions of the two problems . in section  [ sec : sharptract ] , we investigate the computational complexity of minpcrp when the solution consists of a constant number of paths : we show that it is np - complete to decide if there exists a solution of minpcrp consisting of at most three paths , while the existence of a solution consisting of at most two paths can be computed in polynomial time . in section  [ sec : maxrpsp ] , we investigate the computational complexity of maxrpsp : we prove its w[1]-hardness when the parameter is the number of required pairs covered by the path ( section  [ sec : maxrpsp : w - hard ] ) and we give a fixed - parameter algorithm when the parameter is the maximum overlapping degree ( section  [ sec : maxrpsp : fptalgo ] ) .",
    "in this section , we introduce the basic notions used in the rest of the paper and we formally define the two combinatorial problems we are interested in .    while our problems deal with directed graphs , we consider both directed and undirected graphs .",
    "we denote an _ undirected graph _ as @xmath6 where @xmath7 is the set of vertices and @xmath8 is the set of ( undirected ) edges , and a _ directed graph _ as @xmath9 where @xmath10 is the set of vertices and @xmath11 is the set of ( directed ) arcs .",
    "we denote an edge of @xmath6 as @xmath12 where @xmath13 .",
    "moreover , we denote an arc of @xmath9 as @xmath14 where @xmath15 .    given a directed graph @xmath9 , a _ path _",
    "@xmath16 from vertex @xmath17 to vertex @xmath18 , denoted as @xmath19-path , is a sequence of vertices @xmath20 such that @xmath21 , @xmath22 and @xmath23 .",
    "we say that a vertex @xmath17 _ belongs to _ a path @xmath24 , denoted as @xmath25 , if @xmath26 , for some @xmath27 .",
    "given a path @xmath24 , we say that a path @xmath28 , with @xmath29 , is a subpath of @xmath16 . given a set @xmath30 of vertices , a path @xmath16",
    "@xmath31 if every vertex of @xmath31 belongs to @xmath16 .",
    "in the paper , we consider a set @xmath32 of pairs of vertices in @xmath10 .",
    "we denote each pair as @xmath33}}$ ] , to avoid ambiguity with the notations of edges and arcs .",
    "now , we are able to give the definitions of the combinatorial problems we are interested in .    _",
    "minimum path cover with required pairs _",
    "( minpcrp ) + _ input : _ a directed acyclic graph @xmath9 , a source @xmath34 , a sink @xmath35 , and a set @xmath36 } } \\mid v_x , v_y\\in n , v_x\\neq v_y\\}$ ] of required pairs .",
    "+ _ output : _ a minimum cardinality set @xmath37 of directed @xmath38-paths such that every vertex @xmath39 belongs to at least one @xmath38-path @xmath40 and every required pair @xmath41 } } \\in r$ ] belongs to at least one @xmath38-path @xmath42 , i.e.  @xmath43 , @xmath44 belongs to @xmath45 .",
    "_ maximum required pairs with single path _ ( maxrpsp ) + _ input : _ a directed acyclic graph @xmath9 , a source @xmath34 , a sink @xmath35 and a set @xmath36 } } \\mid v_x , v_y\\in n , v_x\\neq v_y\\}$ ] of required pairs .",
    "+ _ output : _ an @xmath38-path @xmath16 that covers a set @xmath46 } } \\mid v_x , v_y\\in \\pi \\}\\subseteq r$ ] of maximum cardinality .    two required pairs @xmath47}}$ ] and @xmath48}}$ ] in @xmath32 _ overlap _ if there exists a path @xmath16 in @xmath2 such that the four vertices appear in @xmath16 in one of the following orders ( assuming that the vertex @xmath49 appears before @xmath50 in @xmath16 ) , where @xmath51 and @xmath50 are two distinct vertices of @xmath1 ( see fig .",
    "[ fig : ex : overl - pair ] ) :    @xmath52 ( the two required pairs are _ alternated _ ) ;    @xmath53 ( the required pair @xmath48}}$ ] is _ nested _ in @xmath47}}$ ] ) .",
    "notice that , from this definition , the required pairs @xmath54}}$ ] and @xmath55}}$ ] do not overlap .",
    "finally , consider a required pair @xmath47}}$ ] of @xmath32 .",
    "we define the _ overlapping degree _ of @xmath47}}$ ] as the number of required pairs in @xmath32 that overlap with @xmath47}}$ ] .    } } $ ] and @xmath48}}$ ] are represented by dashed lines . in ( a ) the required pairs",
    "are _ alternated _ , while in ( b ) they are _",
    "nested_. ]    [ [ hardness - of - minpcrp . ] ] hardness of minpcrp .",
    "+ + + + + + + + + + + + + + + + + + + +    as we mentioned in the introduction , minpcrp is related to a combinatorial problem which has been studied in the context of program testing  @xcite , where it is shown to be np - hard .",
    "more precisely , given a directed acyclic graph @xmath9 , a source @xmath56 , a sink @xmath35 and a set @xmath36 } } \\mid v_x , v_y\\in n , v_x\\neq v_y\\}$ ] of required pairs , the _ minimum required pairs cover _ ( minrpc ) problem asks for a minimum cardinality set @xmath37 of directed @xmath38-paths such that every required pair @xmath41 } } \\in r$ ] belongs to at least one @xmath38-path @xmath42 , i.e.  @xmath57 .",
    "minrpc can be easily reduced to minpcrp due to the following property : each vertex of the graph @xmath2 ( input of minrpc ) must belong to at least one required pair .",
    "indeed , if this condition does not hold for some vertex @xmath17 , we can modify the graph @xmath2 by contracting @xmath17 ( that is removing @xmath17 and adding an edge @xmath58 to @xmath11 , for each @xmath59 such that @xmath60 ) .",
    "this implies that , since in an instance of minrpc all the resulting vertices belong to some required pair , a feasible solution of that problem must cover every vertex of the graph .",
    "then , a solution of minrpc is also a solution of minpcrp , which implies that minpcrp is np - hard .",
    "minpcrp on _ directed _ graphs ( not necessarily acyclic ) is as hard as minpcrp on dags .",
    "in fact , since each strongly connected component can be covered with a single path , we can replace them with single vertices , obtaining a dag and without changing the size of the solution . clearly , minpcrp on general graphs and requiring that the covering paths are simple is as hard as the hamiltonian path problem , which is np - complete .",
    "in this section , we investigate the computational complexity of minpcrp and we give a sharp tractability borderline for @xmath61-pcrp , the restriction of minpcrp where we ask whether there exist @xmath61 paths that cover all the vertices of the graph and all the set of required pairs . first , we show ( sect .",
    "[ sec : pcrp3 ] ) that @xmath4-pcrpis np - complete .",
    "this result implies that @xmath61-pcrpdoes not belong to the class xp , , can be solved in time @xmath62 so it is probably hopeless to look for an algorithm having complexity @xmath63 , and hence for a fixed - parameter algorithm in @xmath61 .",
    "we complement this result by giving ( sect .",
    "[ sec : pcrp2 ] ) a polynomial time algorithm for @xmath5-pcrp , thus defining a sharp borderline between tractable and intractable instances of minpcrp .      in this section",
    "we show that @xmath4-pcrpis np - complete .",
    "we prove this result via a reduction from the well - known @xmath4-coloring ( 3c ) problem which , given an undirected ( connected ) graph @xmath6 , asks for a coloring @xmath64 of the vertices of @xmath1 with exactly @xmath4 colors , such that , for every @xmath65 , we have @xmath66 .    starting from an undirected graph @xmath6 ( instance of 3c ) , we construct a corresponding instance @xmath67 of @xmath4-pcrpas follows . for every subset @xmath68 of cardinality @xmath5 of @xmath7 , we define a graph @xmath69 ( in the following we assume that , for each @xmath70 associated with set @xmath68 , @xmath71 ) .",
    "the vertex set @xmath72 is @xmath73 .",
    "the set @xmath74 of arcs connecting the vertices of @xmath72 can have two possible configurations , depending on the fact that @xmath68 belongs or does not belong to @xmath8 . in the former case , that is @xmath75",
    ", @xmath70 is in _ configuration ( 1 ) _ ( see fig .  [",
    "fig : minpcrp3-config](a ) ) and : @xmath76    in the latter case , that is @xmath77 , @xmath70 is in _ configuration ( 2 ) _ ( see fig .  [",
    "fig : minpcrp3-config](b ) ) and : @xmath78     associated with a pair @xmath68 of vertices of a graph @xmath6 . ]",
    "the whole graph @xmath9 is constructed by concatenating the graphs @xmath70 ( for all @xmath79 ) according to the lexicographic order of their indices @xmath80 .",
    "the sink @xmath81 of each graph @xmath70 is connected to the source @xmath82 of the graph @xmath83 which immediately follows @xmath83 .",
    "a distinguished vertex @xmath84 is connected to the source of @xmath85 ( _ i.e. _ ,  the first subgraph ) , while the sink of @xmath86 ( _ i.e. _ ,  the last subgraph ) is connected to a second distinguished vertex @xmath87 .",
    "[ fig : minpcrp3-graph ] depicts such a construction .",
    "the set @xmath32 of required pairs is defined as follows .",
    "@xmath88 } } \\mid \\{v_i , v_j\\ } \\in e \\ }",
    "\\cup \\bigcup_{1 \\le i    \\le n } r_i \\text{\\quad where } r_i = \\ { { \\ensuremath{[n_i^{i , j } , n_i^{i , h } ] } } \\mid 1 \\leq j \\leq h \\leq n \\}\\ ] ]     associated with graph @xmath6 .",
    "grey boxes represent subgraphs @xmath70 in one of the two possible configurations of fig .",
    "[ fig : minpcrp3-config ] . ]",
    "the following lemmas prove the correctness of the reduction .",
    "[ lem:3-minpcrp - hard1 ] let @xmath6 be an undirected ( connected ) graph and let @xmath89 be the corresponding instance of @xmath4-pcrp .",
    "then , given a @xmath4-coloring of @xmath1 we can compute in polynomial time three paths of @xmath2 that cover all its vertices and every required pair in @xmath32 .",
    "consider a @xmath4-coloring of @xmath1 and let @xmath90 be the tri - partition of @xmath7 induced by the @xmath4-coloring .",
    "we show how to compute in polynomial time three paths @xmath91 , @xmath92 , @xmath93 that cover all the vertices of @xmath2 and every required pair in @xmath32 . for each @xmath94",
    ", path @xmath95 passes through vertices @xmath96 of subgraphs @xmath70 for every @xmath97 , while for each subgraph @xmath98 such that @xmath99 , @xmath95 passes through verteces @xmath100 .",
    "notice that each @xmath95 is well - defined , since when @xmath96 , @xmath101 are associated with the same color @xmath102 , @xmath70 is in configuration ( 2 ) , hence the path can pass through both vertices @xmath96 and @xmath101 .",
    "we show that @xmath91 , @xmath92 , @xmath93 cover every required pair in @xmath32 .",
    "notice that for each @xmath65 , since @xmath103 and @xmath104 have different colors , by construction one of the paths @xmath91 , @xmath92 , @xmath93 passes through @xmath96 , while another one passes through @xmath101 .",
    "now , we show that every required pair in @xmath105 is covered . by construction ,",
    "the vertices @xmath96 of @xmath2 associated with the same vertex @xmath103 of @xmath1 belong to the same path @xmath95 where @xmath102 is the color of @xmath103 .",
    "therefore , all the required pairs in each @xmath105 are covered by one of the three paths .",
    "now , we show that @xmath91 , @xmath92 , @xmath93 cover the required pairs @xmath106 } } \\mid 1 \\leq i < j \\leq n \\}$ ] .",
    "indeed , consider a subgraph @xmath70 , and assume w.l.o.g .",
    "that @xmath103 has color @xmath102 and that @xmath104 has color @xmath107 . by construction , path @xmath108 ( with @xmath109 )",
    "passes through @xmath110 .",
    "then , @xmath91 , @xmath92 , @xmath93 cover all the required pairs in @xmath32 .    finally , in order to show that all the vertices of @xmath2 are covered by at least one path , the only vertices that might be not covered are @xmath111 and @xmath81 , for @xmath112 , since they do not belong to any required pair .",
    "however , these vertices are articulation points , hence all the three paths necessarily pass through them .",
    "[ lem:3-minpcrp - hard2 ] let @xmath6 be an undirected graph and let @xmath89 be the corresponding instance of @xmath4-pcrp .",
    "then , given three paths in @xmath2 that cover all its vertices and every required pair in @xmath32 we can compute in polynomial time a @xmath4-coloring of @xmath1 .    consider three paths @xmath91 , @xmath92 , @xmath93 of @xmath2 that cover all the vertices of @xmath2 and every required pair in @xmath32 .",
    "we define the corresponding @xmath4-coloring of the graph @xmath1 , consisting of the colors @xmath113 , @xmath114 , @xmath115 .",
    "first , we prove a property of the three paths @xmath91 , @xmath92 , @xmath93 .",
    "we show that , given a vertex @xmath116 , there exists at least one path among @xmath91 , @xmath92 , @xmath93 that covers all the required pairs in @xmath105 .",
    "consider a vertex @xmath116 .",
    "since @xmath1 is connected , it follows that there exists at least one vertex adjacent to @xmath103 , w.l.o.g .",
    "@xmath104 , such that @xmath75 .",
    "now , consider the subgraph @xmath70 . by construction , since @xmath70 has a configuration ( 1 ) , a solution of minpcrp must contain three different paths , each one passing through one of the vertices @xmath96 , @xmath101 , @xmath110 . now , assume that path @xmath91 passes through @xmath96 .",
    "notice that @xmath92 , @xmath93 can not pass through @xmath96 .",
    "but then , since @xmath91 is the only path that covers @xmath96 and since @xmath105 contains a pair @xmath117}}$ ] , for each @xmath118 , it follows that all the vertices @xmath119 , @xmath120 , must belong to @xmath91 .",
    "it follows that , given a vertex @xmath116 , there exists one path in @xmath121 that covers all the required pairs in @xmath105 .",
    "moreover , since all the three paths pass through the vertices @xmath111 and @xmath81 for @xmath112 , then all the vertices of @xmath2 are covered by @xmath121 .",
    "now , we define a @xmath4-coloring of @xmath1 , where @xmath122 is the set of colors .",
    "if a required pair in @xmath105 is covered by a path @xmath123 , @xmath124 , then we assign the color @xmath125 to vertex @xmath103 .",
    "notice that the coloring is feasible , that is @xmath66 when @xmath126 .",
    "indeed , consider two vertices @xmath103 , @xmath104 associated with the same color , and consider the two corresponding sets @xmath105 , @xmath127 of required pairs . by construction",
    ", it follows that @xmath105 , @xmath127 are covered by the same path , say @xmath91 . consider the subgraph @xmath70 . since @xmath105 ,",
    "@xmath127 are both covered by @xmath91 , it follows that @xmath70 must have a configuration ( 2 ) , hence @xmath128 .",
    "hence we have defined a @xmath4-coloring of @xmath1 .    as a consequence of the previous lemmas",
    ", we can easily prove the following result .",
    "[ teo : minpcrp3hard ] @xmath4-pcrpis np - complete .    the np - hardness of @xmath4-pcrpfollows directly from lemma  [ lem:3-minpcrp - hard1 ] and lemma  [ lem:3-minpcrp - hard2 ] and from the np - completeness of 3c  @xcite .",
    "@xmath4-pcrpis in np , since , given three paths @xmath91 , @xmath92 , @xmath93 , we can verify in polynomial time that @xmath91 , @xmath92 , @xmath93 cover all the vertices of @xmath2 and that every required pair in @xmath32 is covered by some path in @xmath129 .      in this section",
    "we give a polynomial time algorithm for computing a solution of @xmath5-pcrp .",
    "notice that @xmath130-pcrp can be easily solved in polynomial time , as there exists a solution of @xmath130-pcrp if and only if the reachability relation of the vertices of the input graph is a total order .",
    "the algorithm for solving @xmath5-pcrpis based on a polynomial - time reduction to the @xmath5-clique partition problem , which , given an undirected graph @xmath6 , asks whether there exists a partition of @xmath7 in two sets @xmath131 , @xmath132 both inducing a clique in @xmath1 .",
    "the @xmath5-clique partition problem is polynomial - time solvable  ( * ? ? ?",
    "* probl .",
    "gt15 ) . to perform this reduction",
    "we assume that given @xmath133 , instance of @xmath5-pcrp , every vertex of the graph @xmath2 belongs to at least one required pair in @xmath32 .",
    "otherwise , we add to @xmath32 the required pairs @xmath134}}$ ] for all @xmath135 that do not belong to any required pair . therefore , a solution that covers all the required pairs in @xmath32 covers also all the vertices , hence it is a feasible solution of @xmath5-pcrp .",
    "moreover , notice that this transformation does not affect the solution of @xmath5-pcrp , since all the paths start from @xmath84 and cover all the nodes of the graph , including the additional required pairs .",
    "the algorithm , starting from an instance @xmath136 of @xmath5-pcrp , computes in polynomial time a corresponding undirected graph @xmath6 where :    * @xmath137 * @xmath138    given a set of required pairs @xmath139 , we denote by @xmath140 the corresponding set of vertices of @xmath1 ( _ i.e. _ ,  @xmath141 ) .    the algorithm is based on the following fundamental property .",
    "[ lem:2-case - clique ] given an instance @xmath136 of @xmath5-pcrpand the corresponding graph @xmath6 , then there exists a path @xmath16 that covers a set @xmath142 of required pairs if and only if @xmath140 is a clique of @xmath1 .    we prove the lemma by induction on the number @xmath61 of required pairs ( vertices , resp . ) of @xmath142 ( @xmath140 , resp . ) .    when @xmath143 the lemma trivially holds , in fact having no required pairs , _",
    "i.e. _ ,  @xmath144 , induces an empty clique , _",
    "i.e. _ ,  @xmath145 .",
    "if @xmath146 , then we can assume that there exists at least one path in @xmath2 that covers the only required pair @xmath102 ( otherwise no solution for @xmath5-pcrpexists ) , and @xmath147 induces a clique ( of size @xmath130 ) in @xmath1 .",
    "now , assume that the lemma holds for every set of required pairs in @xmath32 ( or set of vertices of @xmath1 ) of size @xmath61 , we show that it holds also for a set of required pairs in @xmath32 ( or set of vertices of @xmath1 ) of size @xmath148 .",
    "consider a path @xmath16 that covers a set @xmath142 of @xmath148 required pairs .",
    "we show that @xmath140 induces a clique in @xmath1 .",
    "let @xmath102 be a required pair in @xmath142 and let @xmath149 . by induction hypothesis",
    ", @xmath150 is a clique of @xmath1 .",
    "since @xmath16 passes through all the vertices belonging to required pairs of @xmath142 , it follows that there exists a path covering both the required pairs @xmath151 and @xmath102 , for every @xmath152 .",
    "hence , by construction , @xmath153 , for every @xmath154 , and so we can conclude that @xmath140 is a clique of @xmath1 .    consider a clique @xmath140 of size @xmath148 .",
    "we show that there exists a path covering the set @xmath142 of required pairs .",
    "let @xmath155}}$ ] be a required pair in @xmath142 and let @xmath156 .",
    "clearly , @xmath150 induces a clique of size @xmath61 in @xmath1 . by induction hypothesis",
    ", there exists a path @xmath16 that covers all the required pairs in @xmath157 . starting from path @xmath16 , we can compute ( in polynomial time ) a path @xmath158 that covers @xmath142 .",
    "notice that either @xmath159 or @xmath160 does not belong to @xmath16 , otherwise @xmath16 would already cover the required pair @xmath102 .",
    "assume w.l.o.g .",
    "that @xmath159 does not belong to @xmath16 .",
    "since for each vertex @xmath154 there exists an edge @xmath161 in @xmath1 , it follows that for each required pair @xmath152 there exists a path @xmath162 connecting the vertices of @xmath151 and @xmath102 ( hence , in particular , @xmath162 passes through @xmath159 ) .",
    "consider the vertices of @xmath157 in the total order induced by @xmath16 .",
    "there exists a vertex @xmath163 in @xmath16 ( possibly @xmath163 is the source @xmath84 ) such that @xmath163 belongs to a required pair @xmath164 , and @xmath163 is the last vertex in @xmath16 of a required pair in @xmath157 for which the path @xmath165 passes through @xmath163 and then @xmath159 . let @xmath166 be the successor of @xmath163 in @xmath16 and let @xmath167 the required pair containing @xmath166 .",
    "notice that @xmath168 passes through @xmath159 and then @xmath166 .",
    "now , we can compute a path @xmath169 by concatenating the following subpaths : the subpath of @xmath16 from @xmath84 to @xmath163 , the subpath of @xmath165 from @xmath163 to @xmath159 , the subpath of @xmath170 from @xmath159 to @xmath166 and the subpath of @xmath16 from @xmath166 to @xmath87 . by construction",
    "it is easy to see that @xmath16 is a subpath of @xmath169 , hence @xmath169 covers all the required pairs in @xmath157 and passes through @xmath159 .",
    "a similar construction can be applied to @xmath169 to cover @xmath160 ( if @xmath160 does not already belong to @xmath16 ) , hence obtaining a path @xmath158 that covers every required pair in @xmath142 .    from lemma  [ lem:2-case - clique ] , it follows that , in order to compute the existence of a solution of @xmath5-pcrpover the instance @xmath136 ( in which every vertex of @xmath2 belongs to at least one required pair in @xmath32 ) , we have to compute if there exists a @xmath5-clique partition of the corresponding graph @xmath1 .",
    "computing the existence of a @xmath5-clique partition over a graph @xmath1 is equivalent to compute if there exists a @xmath5-coloring of the complement graph @xmath171 ( hence deciding if @xmath171 is bipartite ) , which is well - known to be solvable in polynomial time  ( * ? ? ?",
    "* probl .",
    "gt15 ) . we can conclude that @xmath5-pcrpcan be decided in polynomial time .",
    "in this section , we consider the parameterized complexity of maxrpsp . we show that although maxrpsp is w[1]-hard when parameterized by the optimum , _",
    "i.e. _ ,  the number of required pairs covered by a single path ( section  [ sec : maxrpsp : w - hard ] ) , the problem becomes fixed - parameter tractable if the maximum number of overlapping required pairs is a parameter ( section  [ sec : maxrpsp : fptalgo ] ) .      in this section ,",
    "we investigate the parameterized complexity of maxrpsp when parameterized by the size of the solution , that is the maximum number of required pairs covered by a single path , and we prove that the problem is w[1]-hard ( notice that this result implies the np - hardness of maxrpsp ) .",
    "for details on parameterized reductions , we refer the reader to  @xcite .",
    "we prove this result via a parameterized reduction from the maximum clique ( maxclique ) problem .",
    "given an undirected graph @xmath6 , maxclique asks for a clique @xmath172 of maximum size . here , we consider the two decision versions of maxclique and maxrpsp , @xmath173-clique and @xmath61-rpsp respectively , parameterized by the sizes of the respective solutions .",
    "for example , given an undirected graph @xmath6 , the @xmath173-clique problem consists of deciding if there exists a clique @xmath172 of size @xmath173 .",
    "we recall that @xmath173-clique is known to be w[1]-hard  @xcite .",
    "first , we start by showing how to construct an instance of @xmath61-rpsp starting from an instance of @xmath173-clique . given an ( undirected ) graph @xmath6 with @xmath174 vertices @xmath175 , we construct the associated directed acyclic graph @xmath176 as follows . the set @xmath10 of vertices is defined as : @xmath177 informally , @xmath10 consists of two distinguished vertices @xmath178 and of @xmath173 copies @xmath179 of every vertex @xmath103 of @xmath1 .",
    "the set of arcs @xmath11 is defined as : @xmath180 informally , we connect every two consecutive copies associated with vertices that are adjacent in @xmath1 , the source vertex @xmath84 to all the vertices @xmath181 , with @xmath182 , and all the vertices @xmath183 , with @xmath182 , to the sink vertex @xmath87 .        by construction , the vertices in @xmath10 ( except for @xmath84 and @xmath87 ) are partitioned into @xmath173 _ independent sets _ @xmath188 , with @xmath189 , each one containing a copy of every vertex of @xmath7 .",
    "moreover , the arcs of @xmath11 only connect two vertices of consecutive subsets @xmath190 and @xmath191 , with @xmath192 .",
    "figure  [ fig : graph - construction ] presents an example of directed graph @xmath2 associated with an undirected graph @xmath1 .",
    "associated with an instance @xmath6 of the @xmath173-clique problem .",
    "each gray box highlight an independent set @xmath190 composed of one copy of the vertices in @xmath7 .",
    "edges @xmath193 , @xmath194 , and @xmath195 are some of the directed edges in @xmath11 associated with edges @xmath196 . ]",
    "[ lem : max - clique ] let @xmath6 be an undirected graph and @xmath197 be the associated instance of @xmath61-rpsp .",
    "then : ( 1 ) starting from an @xmath173-clique in @xmath1 we can compute in polynomial time an @xmath38-path @xmath16 in @xmath2 that covers @xmath198 required pairs of @xmath32 ; ( 2 ) starting from an @xmath38-path @xmath16 in @xmath2 that covers @xmath198 required pairs we can compute in polynomial time an @xmath173-clique in @xmath1 .",
    "\\(1 ) starting from an @xmath173-clique @xmath199 in @xmath1 we show how to compute a path @xmath16 in @xmath2 that covers @xmath198 required pairs of @xmath32 .",
    "let @xmath200 be a clique of @xmath1 and let @xmath201 be an arbitrary ordering of @xmath199 .",
    "let @xmath202 be a sequence of vertices obtained by selecting the vertex @xmath203 for each independent set @xmath190 , with @xmath189 ( in addition to vertices @xmath84 and @xmath87 ) . since @xmath199 is a clique of @xmath1 , by construction of @xmath2 , every pair of vertices @xmath204 is connected by an arc , hence @xmath205 is an @xmath38-path of @xmath2 .",
    "moreover , the @xmath38-path @xmath205 covers exactly @xmath198 required pairs of @xmath32 because , by construction of @xmath32 , there exists a pair between every two copies of vertices which are adjacent in @xmath1 .",
    "more precisely , since the clique @xmath199 has all the possible edges among its @xmath173 vertices , the number of required pairs covered by the @xmath38-path @xmath205 is @xmath198 .",
    "\\(2 ) let @xmath16 be an @xmath38-path in @xmath2 that covers a set @xmath139 of @xmath198 required pairs , then we show how to compute in polynomial time an @xmath173-clique @xmath199 in @xmath1 .",
    "notice that , by construction of @xmath2 , the @xmath38-path @xmath16 must contain exactly one vertex @xmath206 , @xmath27 and @xmath207 , for each independent set @xmath190 of @xmath2 . by construction of set @xmath32",
    ", each vertex @xmath206 of @xmath16 appears in at most @xmath208 required pairs of @xmath142 .",
    "hence , the total number of required pairs covered by the @xmath38-path @xmath16 , which contains exactly @xmath173 inner vertices @xmath206 , is at most @xmath209 .",
    "let @xmath199 be the set @xmath210 .",
    "we claim that @xmath199 is an @xmath173-clique .",
    "first , we prove that @xmath199 contains @xmath173 vertices .",
    "suppose to the contrary that @xmath199 has less than @xmath173 vertices .",
    "then , there exist two vertices @xmath211 and @xmath212 of @xmath16 that correspond to the same vertex @xmath103 of @xmath199 , that is @xmath213 . since @xmath214 } }",
    "\\notin r$ ] , it follows that each @xmath215 , @xmath216 appears in at most @xmath217 required pairs of @xmath142 . as a consequence ,",
    "the total number of required pairs covered by the @xmath38-path @xmath16 is strictly less than @xmath198 , violating the initial hypothesis that @xmath16 covers @xmath198 required pairs of @xmath32 .",
    "hence @xmath199 contains @xmath173 vertices .",
    "as all the internal vertices of @xmath16 ( _ i.e. _ ,  all its vertices but @xmath84 and @xmath87 ) represent distinct vertices of @xmath1 , then all the required pairs covered by @xmath16 represent distinct edges of @xmath1 .",
    "the only undirected graph with @xmath173 vertices and @xmath198 edges is the complete graph , hence @xmath199 is an @xmath173-clique of @xmath1 .            in this section",
    "we propose a parameterized algorithm for the maxrpsp problem , where the parameter is the maximum overlapping degree of the required pairs in @xmath32 .",
    "for the rest of the section , let @xmath136 be an instance of the maxrpsp problem . a required pair @xmath47 } } \\in r$ ] is _ maximal _ if it is not nested in another required pair @xmath48}}$ ] .",
    "for ease of exposition , we fix an order of the required pairs in @xmath32 and we represent the @xmath218-th required pair of the ordering as @xmath219}}$ ] .",
    "whenever no confusion arises , we will refer to that required pair as _",
    "@xmath218-pair_. intuitively , we want that the order of the required pairs is `` compatible '' with the topological order of the vertices .",
    "more formally , given two distinct required pairs @xmath220}}$ ] and @xmath219}}$ ] with @xmath221 , then pair @xmath220}}$ ] is nested in @xmath219}}$ ] or there does not exist a path @xmath16 from @xmath84 to @xmath222 that covers both the required pairs ( that is , @xmath16 passes through @xmath222 before @xmath223 ) .",
    "clearly , an order that satisfies this condition can be easily computed from the topological order of the vertices .",
    "we present a parameterized algorithm based on dynamic programming for the maxrpsp problem when the parameter @xmath224 is the maximum number of overlapping required pairs .",
    "in fact , we can decompose a path @xmath16 , starting in @xmath84 , ending in a vertex @xmath17 , and covering @xmath61 required pairs , into two subpaths : the first one@xmath91starts in @xmath84 , ends in a vertex @xmath51 , and covers @xmath225 required pairs , while the other one@xmath92starts in @xmath51 , ends in @xmath17 , and covers the remaining @xmath226 required pairs ( possibly using vertices of @xmath91 ) .",
    "the key point to define the dynamic programming recurrence is that , for each required pair @xmath224 , we keep track the set of required pairs overlapping @xmath224 and covered by the path . to this aim , for each required pair @xmath219}}$ ] , we define the set @xmath227}})$ ] as the set of vertices @xmath17 such that @xmath17 belongs to a required pair that overlaps @xmath219}}$ ] and such that @xmath223 is reachable from @xmath17 . by a slightly abuse of the notation , we consider that @xmath227}})$ ] always contains vertex @xmath228 .",
    "the recurrence relies on the following observation .",
    "let @xmath16 be a path covering a set @xmath3 of required pairs and let @xmath229 be the set of vertices belonging to the required pairs in @xmath3 .",
    "consider two required pairs @xmath219}}$ ] and @xmath220}}$ ] in @xmath3 , with @xmath221 .",
    "then , either @xmath220}}$ ] is nested in @xmath219}}$ ] ( hence the fact that @xmath16 covers the pair @xmath220}}$ ] can be checked by the recurrence looking only at the required pairs that overlap with @xmath219}}$ ] ) or pairs @xmath219}}$ ] and @xmath220}}$ ] are alternated . in the latter case , since @xmath219}}$ ] is in @xmath3 , we only have to consider the vertices in the set @xmath230 } } ) \\cap { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_j , v^2_j]}})$ ] .",
    "moreover , let @xmath231 be the number of required pairs that overlap the required pair @xmath219}}$ ] , then @xmath232}})|$ ] is at most @xmath233 .",
    "hence , the cardinality of set @xmath230 } } ) \\cap { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_j , v^2_j]}})$ ] is bounded by @xmath234 . moreover , given two sets @xmath235 and @xmath236 of vertices such that @xmath237}})$ ] and @xmath238}})$ ] , we say that @xmath235 is in _ agreement _ with @xmath236 if @xmath239 } } ) \\cap { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_j , v^2_j ] } } ) ) = s ' \\cap ( { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_i , v^2_i ] } } ) \\cap { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_j , v^2_j]}}))$ ] .",
    "informally , when @xmath235 and @xmath236 are in agreement , they must contain the same subset of vertices of @xmath227 } } ) \\cap { \\ensuremath{\\mathit{op}}}({\\ensuremath{[v^1_j , v^2_j]}})$ ] .    let @xmath240 } } , s)$ ] denote the maximum number of required pairs covered by a path @xmath16 ending in vertex @xmath223 and such that the set @xmath241}})$ ] is covered by @xmath16 .",
    "in the following we present the recurrence to compute @xmath240 } } , s)$ ] .",
    "for ease of exposition we only focus on vertices that appear as second vertices of the required pairs .",
    "in fact , paths that do not end in such vertices are not able to cover new required pairs .",
    "furthermore , for simplicity , we consider the source @xmath84 as the second vertex of a fictitious required pair ( with index @xmath242 ) @xmath243}}$ ] which does not overlap any other required pair .",
    "such a fictitious required pair does not contribute to the total number of required pairs covered by the path .",
    "the recurrence is : @xmath244 } } , s ) = \\max_{\\substack{\\text{${\\ensuremath{[v^1_j , v^2_j]}}$\\ ! not\\ ! nested\\ ! in\\ !",
    "$ { \\ensuremath{[v^1_i , v^2_i]}}$\\ ! and\\ !",
    "$ j < i$};\\\\      s ' \\text { in agreement with } s;\\\\      \\exists \\text { a path from } v^2_j \\text { to } v^2_i\\\\      \\text { convering all vertices in } s \\setminus s ' ;    } }    \\hspace{-2.1em}\\left\\ { p({\\ensuremath{[v^1_j , v^2_j ] } } , s ' ) +      |ov({\\ensuremath{[v^1_i , v^2_i ] } } , s , s')|\\right\\}\\ ] ] where @xmath245 } } , s , s ' ) = \\{{\\ensuremath{[v^1_h , v^2_h ] } } \\mid { \\ensuremath{[v^1_h , v^2_h ] } } \\text { is nested in } { \\ensuremath{[v^1_i , v^2_i ] } } \\land v^1_h \\in s \\land v^2_h \\in s\\setminus s ' \\}$ ] .",
    "notice that each required pair is assumed to be nested in itself .",
    "[ lem : rpsp : dp1 ] if @xmath240 } } , s ) = k$ ] , then there exists a path @xmath16 in @xmath2 ending in @xmath223 , such that every vertex in @xmath235 belongs to @xmath16 and the number of required pairs covered by @xmath16 is @xmath61 .",
    "we prove the lemma by induction on the index @xmath218 .",
    "it is easy to see that the base case holds .",
    "assume that the lemma holds for index values less than @xmath218 , we prove that the lemma holds for @xmath218 .",
    "let @xmath240 } } , s ) = k$ ] . by eq .",
    ", there exists a vertex @xmath222 with @xmath221 , such that @xmath247 } } , s ' ) = k_1 $ ] for some set @xmath236 in agreement with @xmath235 .",
    "assume that @xmath248 } } , s , s')|=k_2 $ ] , with @xmath249 .",
    "by induction hypothesis , since @xmath247 } } , s')=k_1 $ ] , there exists a path @xmath158 ending in @xmath222 , convering every vertex in @xmath236 , and such that @xmath158 covers @xmath225 required pairs .",
    "furthermore , the @xmath250 covered required pairs have at least one vertex in @xmath251 , hence the vertices of such required pairs belong to a path @xmath169 which starts in @xmath222 and ends in @xmath223 ( path @xmath169 exists by hypothesis ) .",
    "but then , the path obtained by the concatenation of @xmath158 and @xmath169 covers @xmath252 required pairs .",
    "[ lem : rpsp : dp2 ] let @xmath16 be a path in @xmath2 ending in @xmath223 and covering @xmath61 required pairs .",
    "let @xmath235 be the set of all the vertices belonging to required pairs covered by @xmath16 and overlapping @xmath219}}$ ]",
    ". then @xmath240 } } , s ) \\ge k$ ] .",
    "we prove the lemma by induction on the index @xmath218 .",
    "it is easy to see that the base case holds .",
    "assume that the lemma holds for index values less than @xmath218 , we prove that the lemma holds for @xmath218 .",
    "let @xmath16 be a path , ending in @xmath223 , that covers @xmath61 required pairs and let @xmath235 be the set of vertices that belong to the required pairs covered by @xmath16 and overlapping @xmath219}}$ ] .",
    "we claim that @xmath240 } } , s ) \\ge k$ ] .",
    "consider the rightmost vertex @xmath222 of @xmath16 such that @xmath222 belongs to a required pair covered by @xmath16 and not nested in the @xmath218-pair .",
    "decompose path @xmath16 into two parts : one@xmath158from @xmath84 to @xmath222 , and the other one@xmath169from @xmath222 to @xmath223 .",
    "let @xmath236 be the set of vertices that belong to the required pairs covered by @xmath16 and overlapping @xmath220}}$ ] .",
    "let @xmath253 be the number of required pairs covered by @xmath158 and @xmath254 be the number of the remaining required pairs covered by @xmath16 ( that is , @xmath255 ) .",
    "first , notice that @xmath256 } } , s , s')|$ ] .",
    "by induction hypothesis @xmath247 } } , s')=k_1 $ ] for some @xmath257 .",
    "moreover , by construction , @xmath236 is in agreement with @xmath235 and the subpath of @xmath16 from @xmath222 to @xmath223 covers all the vertices in @xmath251 . as a consequence , by eq .  , @xmath240 } } , s)$ ] is at least @xmath258 , which concludes the proof .",
    "let @xmath224 be the maximum number of overlapping required pairs in @xmath2 ( that is , @xmath259 ) .",
    "it follows that the number of possible subsets @xmath235 is bounded by @xmath260 .",
    "then , each entry @xmath261 $ ] requires time @xmath262 to be computed , and , since there exist @xmath262 entries , the recurrence requires time @xmath263 . from lemma  [",
    "lem : rpsp : dp1 ] and lemma  [ lem : rpsp : dp2 ] , it follows that an optimal solution for maxrpsp can be obtained by looking for the maximum of the values @xmath261 $ ] .",
    "hence , the overall time complexity of the algorithm is bounded by @xmath263 .",
    "eriksson , n. , pachter , l. , mitsuya , y. , rhee , s.y . ,",
    "wang , c. , gharizadeh , b. , ronaghi , m. , shafer , r.w . ,",
    "beerenwinkel , n. : viral population estimation using pyrosequencing .",
    "plos comput biol 4(5 ) , e1000074 ( 2008 )            trapnell , c. , williams , b.a . ,",
    "pertea , g. , mortazavi , a. , kwan , g. , van baren , m.j . , salzberg , s.l .",
    ", wold , b.j .",
    ", pachter , l. : transcript assembly and quantification by rna - seq reveals unannotated transcripts and isoform switching during cell differentiation .",
    "nature biotechnology 28(5 ) , 516520 ( 2010 )"
  ],
  "abstract_text": [
    "<S> the minimum path cover problem on directed acyclic graphs ( dags ) is a classical problem that provides a clear and simple mathematical formulation for several applications in different areas and that has an efficient algorithmic solution . in this paper </S>",
    "<S> , we study the computational complexity of two constrained variants of minimum path cover motivated by the recent introduction of next - generation sequencing technologies in bioinformatics . </S>",
    "<S> the first problem ( minpcrp ) , given a dag and a set of pairs of vertices , asks for a minimum cardinality set of paths `` covering '' all the vertices such that both vertices of each pair belong to the same path . for this problem , </S>",
    "<S> we show that , while it is np - hard to compute if there exists a solution consisting of at most three paths , it is possible to decide in polynomial time whether a solution consisting of at most two paths exists . the second problem ( maxrpsp ) , given </S>",
    "<S> a dag and a set of pairs of vertices , asks for a path containing the maximum number of the given pairs of vertices . </S>",
    "<S> we show its np - hardness and also its w[1]-hardness when parametrized by the number of covered pairs . on the positive side , </S>",
    "<S> we give a fixed - parameter algorithm when the parameter is the maximum overlapping degree , a natural parameter in the bioinformatics applications of the problem . </S>"
  ]
}