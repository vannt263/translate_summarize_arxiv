{
  "article_text": [
    "in numerous tasks , we need to jointly make decisions subject to boolean constraints .",
    "many of these tasks can trivially be reduced to the max - sat problem .",
    "examples include learning the structure of a markov network @xcite , multi - agent plan recognition @xcite , and automated planning and scheduling @xcite . given a number of variables and constraints in the form of clauses converted to conjunctive normal form ( cnf ) , the goal in max - sat is to find an assignment that maximizes the number of satisfies clauses . unfortunately , the problem is np - hard , and for the max-3-sat variant ( limited to clauses of size 3 ) , it is hard to approximate optimal solutions within a factor of more than @xmath0  @xcite .",
    "algorithms for max - sat are often categorized as either complete or incomplete .",
    "the former guarantee the optimality of the output but may fail to deliver any solution at all within a given time .",
    "incomplete algorithms , in contrast , can deliver a solution within a given time but do not guarantee its optimality , instead seeking to find near - optimal solutions within a reasonable time .    for the incomplete category of both regular sat and max - sat ,",
    "a number of stochastic local search ( sls ) algorithms have been proposed , including gsat @xcite , walksat  @xcite , probsat  @xcite , and configuration checking ( cc )  @xcite . for max - sat , iterated robust tabu search  @xcite was ranked first in the max - sat evaluation 2012 , but , overall , the results were not particularly good . demonstrating that ideas from incomplete algorithms for sat can be applied to max - sat , a variant of cc named ccls  @xcite was ranked highest in the unweighted random track of the max - sat evaluations 2013 and 2015 , respectively , improving considerably over previous results .    yet , despite the success of purely probabilistic strategies for sat , to the best of our knowledge , no one has succeeded in adopting such a strategy for max - sat , due to the different nature of the problem .    * contributions . *",
    "our main contribution is a new probability distribution - based algorithm for max - sat , while in recent years there have only been few effective random max - sat solvers , most of which adopt a greedy sls strategy .",
    "we present a novel probabilistic strategy for variable selection .",
    "our proms ( probability distribution - based max - sat solving ) algorithm is shown to outperform the previous state - of - the - art on hard random problem instances .",
    "as additional contributions , we present new optimizations for more efficient calculations , which are also applicable to other sls solvers .",
    "our input is a formula @xmath1 in conjunctive normal form ( cnf ) , where @xmath2 are disjunctive clauses that consist of literals ( boolean variables or their negations ) on a set of variables @xmath3 .",
    "a max-@xmath4-sat formula is a cnf such that each clause contains at most @xmath4 literals .",
    "a complete assignment @xmath5 is a candidate solution such that each variable has a truth value of 0 ( _ false _ ) or 1 ( _ true _ ) .",
    "the max - sat problem consists in finding an @xmath5 that minimizes the number of unsatisfied clauses .",
    "we use @xmath6 to denote the set of unsatisfied clauses .",
    "we also define @xmath7 as the ratio of clauses to variables , where @xmath8 is the total number of boolean variables and @xmath9 is the number of clauses .    given a cnf @xmath10 and a complete assignment @xmath5 , the _ break value _",
    "@xmath11 of a variable @xmath12 is the number of clauses in @xmath10 that will transition from satisfied to unsatisfied after flipping @xmath12 under @xmath5 , and the _ make value _",
    "@xmath13 of such a @xmath12 is the number of clauses in @xmath10 that will transition from unsatisfied to satisfied after flipping @xmath12 under @xmath5 .",
    "stochastic local search algorithms proceed by repeatedly selecting variables to flip . for probsat",
    ", the variable picking function first randomly selects an unsatisfied clause @xmath14 ( like walksat ) , and then a variable @xmath12 in @xmath14 is chosen with probability @xmath15 , where @xmath16 is a probability function for variables @xmath12 .",
    "the best known probability function for random 3-sat , based on empirical studies , has the form @xmath17 , with @xmath18 for the phase transition point .",
    "this improves over walksat by mapping each @xmath11 to a specific probability .",
    "thus , successful sat methods @xcite choose variables @xmath12 using a function of the form @xmath19 , i.e.  relying only on the break value .",
    "our proposal is that for max - sat , the make value , as well , is a crucial piece of information about a variable , and hence our function should take the form @xmath20 . in other words ,",
    "@xmath16 will depend on both the make and break values of a variable @xmath12 .",
    "we conjecture that for sat , when two variables both have high break values ( which means they are not worth flipping ) , it is preferable to pick variables somewhat blindly to escape local optima , whilst for max - sat , there are more variables with high break value due to the bigger @xmath6 . in this case , the make values are needed to guide the search process towards assignments with fewer unsatisfied clauses .",
    "the benefits of the @xmath13 values thus greatly compensate for the cost of calculating them .",
    "[ [ theoretical - justification . ] ] theoretical justification .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    let @xmath10 be a uniform random 3-cnf with @xmath8 variables and @xmath9 clauses .",
    "further , let @xmath21 be the number of assignments that satisfy at least @xmath22 clauses in @xmath10 and let @xmath23 be the number of clauses that a random assignment @xmath5 satisfies in @xmath10 .",
    "we have @xmath24=2^n pr[x_\\alpha \\geq s]$ ] .",
    "the event that each clause is satisfied by an @xmath5 is independent , so assuming that @xmath25 denotes @xmath5 satisfying a random clause in @xmath10 , we find that @xmath26 = pr[x^{\\mathrm{c}}_{\\alpha}]^s \\binom{m}{s } = \\left(\\frac{7}{8}\\right)^s \\binom{m}{s}$ ] , and thus @xmath27 = 2^n \\left(\\frac{7}{8}\\right)^s \\binom{m}{s}.      \\label{eq : expnassignments}\\ ] ] suppose @xmath28 with @xmath14 being a constant . in this case , eq .  [ eq : expnassignments ] becomes ( omitting the polynomial ) @xmath27 = 2^n \\left(\\frac{7}{8}\\right)^{m - c } \\binom{m}{c } \\sim 2^n \\left(\\frac{7}{8}\\right)^m.\\ ] ] if @xmath29 for some positive constant @xmath30 , then @xmath24 = 2^{-\\omega(n)}$ ] . by applying markov s inequality , we obtain @xmath31 = pr[x_s \\ge 1 ] \\le \\mathbb{e}[x_s ] = 2^{-\\omega(n)}.\\ ] ] in other words , for a large enough random 3-sat formula with ratio greater than a threshold , it is almost impossible to obtain a solution that only violates a constant number of clauses .",
    "the sat problem is a special case for @xmath32 .",
    "we conjecture that for random @xmath4-cnf with ratio lower than the threshold , there is no need to distinguish sat and max - sat algorithms , i.e.  for such instances , an ideal algorithm for sat is also optimal for max - sat .",
    "combinations of violated clauses , fixing the variables in them , and checking the satisfiability of the remaining formulas using a sat algorithm . for this analysis",
    ", we do not consider specific algorithms but only aim to characterize its existence theoretically . ] in max - sat evaluation , in order to determine the effectiveness of max - sat solvers , all random 3-cnf formulas have ratios greater than 5.2 , ranging from 7.5 to 21.5 ( while high girth is another category ) .",
    "in fact , one can show that for such formulas , @xmath33 clauses must be violated .",
    "now let @xmath34 with @xmath35 .",
    "using the fact that @xmath36 @xcite , we obtain @xmath37 \\sim 2^n \\left(\\frac{1}{1-\\lambda}\\right)^m \\left(\\frac{7(1-\\lambda)}{8\\lambda}\\right)^{\\lambda m}.\\label{eq : explambda}\\ ] ]    by setting eq .",
    "[ eq : explambda ] to 1 , we obtain a mapping function @xmath38 ( recall that @xmath39 ) .",
    "this implies that for each specific ratio @xmath40 , at most @xmath41 clauses can be satisfied , i.e.  the probability of the existence of a @xmath42-solution vanishes rapidly in an inverse exponential law when @xmath8 goes to infinity .",
    "however , finding a near - threshold solution ( slightly worse than optimal ) is much easier .",
    "for example , @xmath43 , which means that for a large enough random 3-cnf with ratio of 21.5 , it is almost impossible to satisfy more than @xmath44 clauses .",
    "but the number of near - threshold solutions that satisfy @xmath45 clauses is @xmath46 \\sim 1.913^n$ ] .",
    "this implies that the hamming distance between a random assignment and a near - threshold solution is @xmath47 , and this is extremely easy to be reached by modern solvers @xcite .",
    "considering the incremental process of finding a solution for max - sat , the convergence time for reaching a near - threshold solution is important .",
    "comparing to break - only probability functions , assigning a greater probability mass to variables with higher make values encourages the algorithm to decrease the number of unsatisfied clauses more quickly , which reduces the convergence time dramatically .",
    "this comes at the price of a smaller coverage of the search space .",
    "we will later introduce a special modification to our variable selection , the pure random mode , allowing us to recover such coverage .",
    "our experiments later confirm that our choice leads to highly favorable results .",
    "as given in algorithm [ alg : proms ] , proms first randomly generates a complete assignment , and then repeatedly picks a variable and flips it , for up to a maximal number @xmath48 of steps . in each step , once a clause has been selected , the incident variables are chosen with probability @xmath49 according to a distribution function @xmath50 .",
    "we then update the current assignment .",
    "if the number of unsatisfied clauses is now lower than for the previous best assignment @xmath51 , we update @xmath51 to be the current assignment .",
    "ultimately , the best found assignment is returned .          following our analysis in section  [ sec : analysis ] , we select variables @xmath12 for flipping based on both the make values @xmath13 and the break values @xmath11 , while @xmath13 is not used in algorithms like walksat and probsat for the sat problem . in particular , we define @xmath53 , where @xmath54 , @xmath55 are parameters . based on the scoring function @xmath50 , our algorithm iterates over variables @xmath12 and picks them with probability @xmath56 where @xmath57 denotes",
    "the score of a clause @xmath14 and @xmath30 is a threshold parameter .",
    "when @xmath58 is very low , which means that all incident variables have high break values and thus there are no promising variables , every variable within the clause is chosen with equal probability .",
    "such a purely random selection is also used for diversification in dynamic local search  @xcite . due to the influence of the make values @xmath13 on @xmath16",
    ", our algorithm could fall into local optima much faster than with a break - only function .",
    "thus the purely random mode neutralizes excessive greediness and prevents our algorithm from performing poorly .",
    "when @xmath58 is above the threshold , every variable is allowed to flip with a probability greater than 0 ( note that @xmath13 is always positive because we choose variables from an unsatisfied clause ) , while in walksat , some flips are forbidden when 0-break variables exist .      instead of computing break values on demand in every iteration ( the non - caching scheme ) ,",
    "the xor - caching technique involves maintaining the break values incrementally with xor scheme optimization , which is 20% faster than the standard caching implementation  @xcite .",
    "non - caching , however , can be quite successful @xcite , because for the walksat family , when the current break value exceeds the minimal break value encountered , the computation can be terminated .",
    "these two schemes are only for sat problems with short clauses .",
    "* mcbc : the original implementation , calculating both @xmath13 and @xmath11 with xor - caching * mcbn : calculate @xmath13 with caching , but @xmath11 with non - caching * mnbc : calculate @xmath13 with non - caching but @xmath11 with xor - caching * mnbn : calculate both @xmath13 and @xmath11 with non - caching    note that the xor scheme is for reducing the complexity of maintaining the break value when the number of true literals transitions to 2 or from 1 . the transitions that cause the @xmath13 value to change are different , so in mcbn , we prefer the faster choice , without xor scheme .      studies of walksat - family algorithms focused on the variable picking strategy . only recently with probsat was the strategy of selecting unsatisfied clauses investigated further  @xcite .",
    "this work suggested pseudo breadth first search ( pbfs ) instead of random selection ( rs ) to select unsatisfied clauses .",
    "the unsatisfied clauses @xmath6 are usually implemented as an array with dynamic length @xmath9 to store the actual clauses , and a position array to record the indices of the unsatisfied clauses . in each update step ,",
    "when a clause turns unsatisfied , one adds the new unsatisfied clause to the end of the array , increasing @xmath9 and updating the position array ( the break step ) .",
    "when a clause turns satisfied , it is swapped with the last element in the array , @xmath9 is decremented , and the position array updated ( the make step ) .",
    "the rs strategy picks a random clause index from @xmath59 , while pbfs picks it as @xmath60 , where @xmath22 is the number of iterations .",
    "c.  anstegui , r.  bjar , c.  fernndez , and c.  mateu .",
    "generating hard sat / csp instances using expander graphs . in _ proceedings of the twenty - third aaai conference on artificial intelligence _ ,",
    "pages 14421443 , 2008 .",
    "a.  balint , a.  biere , a.  frhlich , and u.  schning .",
    "improving implementation of sls solvers for sat and new heuristics for k - sat with long clauses .",
    "in _ theory and applications of satisfiability testing - sat 2014 - 17th international conference _",
    ", pages 302316 , 2014 .",
    "a.  balint and u.  schning .",
    "choosing probability distributions for stochastic local search and the role of make versus break .",
    "in _ theory and applications of satisfiability testing  sat 2012 _ , pages 1629 .",
    "springer , 2012 .",
    "j.  corander , t.  janhunen , j.  rintanen , h.  j. nyman , and j.  pensar .",
    "learning chordal markov networks by constraint satisfaction .",
    "in _ advances in neural information processing systems 26 : 27th annual conference on neural information processing systems 2013 _ , pages 13491357 , 2013 .",
    "b.  selman , h.  levesque , and d.  mitchell . a new method for solving hard satisfiability problems . in _ proceedings of the tenth national conference on artificial intelligence _ ,",
    "aaai 1992 , pages 440446 .",
    "aaai press , 1992 .",
    "d.  a. tompkins and h.  h. hoos .",
    ": an implementation and experimentation environment for sls algorithms for sat and max - sat . in _ theory and applications of satisfiability testing",
    "_ , pages 306320 .",
    "springer , 2005 .",
    "h.  h. zhuo , q.  yang , and s.  kambhampati .",
    "action - model based multi - agent plan recognition . in _ advances in neural information processing systems 25",
    ": 26th annual conference on neural information processing systems 2012 _ , pages 377385 , 2012 ."
  ],
  "abstract_text": [
    "<S> many real - world problems involving constraints can be regarded as instances of the max - sat problem , which is the optimization variant of the classic satisfiability problem . in this paper </S>",
    "<S> , we propose a novel probabilistic approach for max - sat called proms . </S>",
    "<S> our algorithm relies on a stochastic local search strategy using a novel probability distribution function with two strategies for picking variables , one based on available information and another purely random one . </S>",
    "<S> moreover , while most previous algorithms based on walksat choose unsatisfied clauses randomly , we introduce a novel clause selection strategy to improve our algorithm . </S>",
    "<S> experimental results illustrate that proms outperforms many state - of - the - art stochastic local search solvers on hard unweighted random max - sat benchmarks . </S>"
  ]
}