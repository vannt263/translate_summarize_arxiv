{
  "article_text": [
    "with the advent of new application domains such as multilingual databases , computational biology , text retrieval , pattern recognition and function approximation , there is a need for proximity searching , that is , searching for elements similar to a given query element .",
    "similarity is modeled using a distance function ; this distance function along with a set of objects defines a metric space .",
    "computing distance function can be expensive , for example , one of the requirements in multilingual database systems is to find similar strings , where the distance(_edit distance _ ) between the strings is computed using an o(mn ) algorithm where m , n are the length of the strings compared .",
    "this necessitates the use of an efficient indexing technique which would result in fewer distance computations at query time .",
    "having an indexing structure serves the dual purpose of decreasing both cpu and i / o costs .",
    "existing index structures such as b+ trees used in exact matching proves inadequate for the above requirements .",
    "+   + various indexing structures have been proposed for similarity searching in metric spaces .",
    "we present the performance analysis of these structures in terms of the percentage of database scanned by varying edit distances from 10% to 100% .",
    "+ after providing a preliminary background in section 2 , we move on to the description of the existing index structures in section 3 . section 4 describes the experimental set up and the analysis is presented in section 5 .",
    "section 6 concludes the paper .",
    "a metric space comprises of a collection of objects and an assosciated distance function satisfying the following properties .",
    "* symmetry + @xmath0 * non - negativity + @xmath1 if @xmath2 and @xmath3 if @xmath4 * triangle inequaltiy + @xmath5    a , b , c are objects of the metric space . +   + edit distance(_levenshtein distance _ ) satisfies the above mentioned properties .",
    "the edit distance between two strings is defined as the total number of simple edit operations such as additions , deletions and substitutions required to transform one string to another . for example , consider the strings _ paris _ and _ spire_. the edit distance between these two strings is 4 , as the transformation of _ paris _ to _ spire _ requires one addition , one deletion and two substitutions",
    ". edit distance computation is expensive since the alogorithmic complexity is o(mn ) where m , n are the length of the strings compared .",
    "+ one of the common queries in applications requiring similarity search is to find all elements within a given edit distance to a given query string .",
    "indexing structures for similarity search make use of the triangle inequality to prune the search space .",
    "consider an element p with an assosciated subset of elements x such that + @xmath6 + we want to find all strings within edit distance e from given query string q. that is reject all strings x such that @xmath7 from the triangle inequality , @xmath8 .",
    "hence @xmath9 which reduces to @xmath10 from equations ( [ cond1 ] ) and ( [ cond2 ] ) , the criterion reduces to @xmath11 if the inequality is satisfied , the entire subset x is eliminated from consideration .",
    "+ however , we need to compute the o(mn ) edit distance for all the elements in the subsets that do not satisfy the above criterion .",
    "@xcite proposes bag distance which is given as @xmath12 where @xmath13 is the set of the characters in x after dropping all common elements and @xmath14 gives the number of characters in ( x - y ) .",
    "the algorithmic complexity for this computation is o(m+n ) where @xmath15 = m , @xmath16 = n. since @xmath17 , bag distance can be used to filter out some of the candidate strings thereby reducing the search cost .",
    "in this section , we provide a brief description of the data structures used for similarity indexing . here ,    * u is the set of all strings .",
    "* n is the number of tuples in the dataset . *",
    "b is the bucket size , i.e. , the maximum number of tuples a leaf node can hold .",
    "* d(a , b ) is the edit distance between strings a and b. * q is the query string . *",
    "e is the _ search distance _ ,",
    "i.e. , all strings within an edit distance of e from q should be returned on a proximity search .",
    "the burkhard - keller tree(bk tree ) presented in @xcite is probably the first general solution to search in metric spaces .",
    "a pivot element p is selected from the data set u and the dataset is partitioned into subsets @xmath18 such that ( @xmath19 ) .",
    "each of the subsets is recursively partioned until there are no more than b elements in a subset .",
    "+ for a given query and search distance , the search starts at the root(pivot element p ) and traverses all subtrees at distance i such that @xmath20 holds and proceed recursively till a leaf node is reached . in the leaf node , the query string is compared with all the elements .      fixed queries trees @xcite is a variation of bk trees .",
    "this tree is basically a bk tree where all the pivot elements at the same level are identical .",
    "the search algorithm is identical to that for bk trees .",
    "the benefit of fq trees over bk trees is that some of the comparisons between the query string and the internal node pivots are saved along the backtracking that occurs in the tree .      in fixed height fq trees @xcite , all leaves are at the same height .",
    "this makes some leaves deeper than necessary , but no additional costs are incurred as the comparison between the query and intermediate level pivot may already have been performed .",
    "bisector tree(bs tree ) @xcite is a binary tree built recursively as follows : two routing objects @xmath21 and @xmath22 are chosen . while insertion , elements closer to @xmath21 are inserted in the left subtree and those closer to @xmath22 are inserted in the right subtree . for each routing object ,",
    "the maximum covering radius(@xmath23 ) , i.e. , the maximum distance of @xmath24 with any element in its subtree is stored . in our implementation , the distance of the element with its parent routing object is also stored .",
    "this helps in reducing some of the distance computations as shown in @xcite .",
    "+ for a given query and edit distance , search starts at the root and recursively traverses the left subtree if @xmath25 and the right subtree if a similar condition holds for @xmath22 .",
    "the bisector tree can be extended to m - ary tree @xcite by using m routing objects in the internal node instead of two .",
    "we select m routing objects for the first level . together with each routing object is stored a covering radius that is the maximum distance of any object in the subtree associated with the routing object .",
    "a new element is compared against the m routing objects and inserted into the _ best subtree _ defined as that causing the subtree covering radius to expand less and in the case of ties selecting the closest representative . thus it can be viewed that associated with each routing object @xmath24 , is a region of the metric space reg(@xmath26 ) where @xmath23 is the covering radius .",
    "further , each subtree is partitioned recursively .",
    "+ in the internal node , @xmath24 and @xmath23 are stored together with a pointer to the associated subtree .",
    "further to reduce distance computations m tree also stored precomputed distances between each routing object and its parent .",
    "+ for a given query string and search distance , the search algorithm starts at the root node and recursively traverses all the paths for which the associated routing objects satisfy the following inequalities .",
    "@xmath27    and @xmath28    in equation ( [ mtree-1 ] ) , we take advantage of the precomputed distance between the routing object and its parent .      vantage point tree(vp tree ) @xcite is basically a binary tree in which pivot elements called _ vantage points _ partition the data space into spherical cuts at each level to enable effective filtering in similarity search queries .",
    "it is built using a top down approach and proceeds as follows .",
    "a vantage point @xmath29 is chosen from the dataset and the distances between the vantage point and the elements in its subtree are computed .",
    "the elements are then grouped into the left and right subtrees based on the median of the distances , i.e. , those elements whose distance from the vantage point is less than or equal to the median is inserted in the left subtree and others are inserted in the right subtree .",
    "this partitioning continues till the elements in the subtree fit in a leaf .",
    "the median value m is retained at each internal node to aid in the insertion and search process .",
    "in addition , each element in both the internal and leaf node holds the distance entries for every ancestor , which helps in cutting down the number of distance computations at query time .",
    "an optimized tree can be obtained by using heuristics to select better vantage points .",
    "+ search for a given query string starts at the root node .",
    "the distance between q and the vantage point at the node(@xmath29 ) is computed and left subtree is recursively traversed if @xmath30 similarly , right subtree is traversed recursively if the following inequality holds . @xmath31",
    "once a leaf node is reached , the query string need to be compared with all the elements in the leaf node , but some of the distance computations can be saved using the ancestral distance information .",
    "vp tree can be easily generalized to a multiway tree structure called multiple vantage point tree @xcite .",
    "a notable feature of mvp tree is that multiple vantage points can be chosen at each internal node and each of them can partition the data space into m groups .",
    "hence it is required to store multiple cut off values instead of a single median value at each internal node .",
    "the various parameters that can be tuned to improve the efficiency of mvp tree are    * the number of vantage points at each internal node ( v ) . * the number of partitions created by each vantage point ( m ) . * the number of ancestral distances associated with each element in the leaf ( p ) .",
    "the insertion procedure starts by selecting a vantage point @xmath32 from the dataset .",
    "the elements under the subtree of @xmath32 are ordered with respect to their distances from @xmath32 and partitioned into m groups . the m-1 cut off values",
    "are recorded at the internal node .",
    "the next vantage point @xmath33 is a data point in the rightmost ( m-1 ) partitions , which is farthest from @xmath32 and it divides each of the m partitions into m subgroups .",
    "it can be observed that the nth vantage point is selected from the rightmost ( m - n+1 ) partitions and the fan out at each internal node is @xmath34 .",
    "this is continued until all elements in the subgroup fit in a leaf node . at the leaf ,",
    "each element keeps information about its distance from its first p ancestors .",
    "+ given a query string q and an edit distance e , q is compared with the v vantage points at each internal node starting at the root .",
    "let the distance between the vantage point @xmath35 and q be d(@xmath35 , q ) and @xmath36 be the cut off value between subtrees @xmath37 and @xmath38 .",
    "@xmath37 is recursively traversed if the both the inequalities @xmath39 and @xmath40 hold . for traversing",
    "the first subtree , only ( [ mvp_cond1 ] ) need to be satisfied .",
    "similarly , the inequality ( [ mvp_cond2 ] ) is used to traverse the last subtree .",
    "a detailed description of the search procedure can be found in @xcite .",
    "another technique used in similarity searching to reduce search cost is clustering . clustering partitions the collection of data elements into groups called clusters such that similar entities fall into the same group .",
    "similarity is measured using the distance function , which satisfies the triangle inequality .",
    "a representative called clusteroid is chosen from each cluster .",
    "while searching , the query string is compared against the clusteroid and the associated cluster can be eliminated from consideration in case criterion ( [ criterion ] ) does not hold , which helps in reducing the search cost .",
    "+ @xcite proposes bubble for clustering data sets in arbitrary metric spaces .",
    "the two distance measures used in the algorithm are given as +   + * rowsum * let o = @xmath41 be a set of data elementsin metric space with distance function d. the rowsum of an object o @xmath42 o is defined as rowsum(o ) = @xmath43 .",
    "the clusteroid c is defined as the object c @xmath42 o such that @xmath44 .",
    "+   + * average inter - cluster distance * let @xmath45 and @xmath46 be two clusters with number of elements n1 and n2 respectively .",
    "the average inter - cluster distance is defined as @xmath47 .",
    "+   + insertion in bubble starts by creating a cf * tree , which is a height balanced tree .",
    "each non - leaf node has entries of the form ( @xmath48 , @xmath49 ) where @xmath48 is the _ cluster feature _ , i.e. , the summarized representation of the subtree pointed to by @xmath49 .",
    "the leaf node entries are of the form ( @xmath48 , @xmath50 ) where @xmath48 is the clusteroid and @xmath50 points to the associated cluster . when an element x is to be inserted , it is compared against all the cf * entries in the internal node using the average inter - cluster distance @xmath51 and the child pointer associated with the closest cf * entry is followed . on reaching a leaf node , the cluster closest to x is the one having minimum rowsum value .",
    "if the distance between x and the closest clusteroid is less than a threshold value t , it is inserted in that cluster , a new clusteroid is selected and the cf * entries in the path from root to this leaf node are updated . in case the difference is greater than t , a new cluster is formed . in our implementation , each element entry in the cluster contains its distance with the clusteroid to reduce the number of distance computations .",
    "+ for a given query string and search distance , the query is compared with all the clusteroids . if it does not satisfy the ( [ criterion ] ) , the cluster elements need to be searched for similar strings .",
    "the precomputed distances can be used to eliminate some distance computations .          in case of m tree ,",
    "a new element x is compared with the routing objects at the internal node and inserted into the best subtree .",
    "the best subtree is defined as the one for which the insertion of this element causes the least increase in the covering radius of the associated routing object . in the case of ties ,",
    "the closest representative is selected .",
    "this continues until we reach a leaf node .",
    "this may cause physically close elements to fall into different subtrees . along the path ,",
    "the covering radii of the selected routing objects are updated if x is farther from p than any other element in its subtree .",
    "thus there are no bounds on the covering radii associated with the routing objects .",
    "a possible optimzation is to bound the elements in the leaf nodes to be within a given threshold of the routing objects in its parent node .",
    "also , the new element is inserted into the subtree associated with the closest routing object , there by keeping the physically close elements together .",
    "these two optimizations result in a new indexing structure , which we call _ m tree with bounds_(mtb ) .",
    "thus , in the case of mtb the insertion of an element that causes the covering radius of the routing object of the lowest level internal to exceed the threshold results in a partition of the leaf node entries such that the threshold requirements are maintained .",
    "searching is similar to that of the basic tree implementation .",
    "we have performed an analysis of the various similarity indexing structures described in the previous section .",
    "the metric used for comparing the performance is the percentage of the database scanned for a given query and search distance , which is a measure of the cpu cost incurred .",
    "+ the experimental analysis were performed on a pentium iii(coppermine ) 768 mhz celeron machine running linux 2.4.18 - 14 with 512 mb ram .",
    "all the indexing structures were implemented in c. the o(mn ) dynamic programming algorithm to compute the edit distance between a pair of strings was used in the experiments .",
    "the dataset used for the analysis was an english dictionary dataset comprising of 100,000 words .",
    "the average word length of the dataset is around 9 characters .",
    "six query sets each of 500 entries were chosen at random from the data set for the experiments .",
    "the results presented are obtained by averaging over the results for these query sets .",
    "the page size is assumed to be 4k bytes .",
    "in this section , we provide the analysis and the experimental results on the performance of the various similarity indexing structures .",
    "the implementation details of the various index structures are presented in the next subsection followed by the results .",
    "assuming a page size of 4k bytes , the bucket size is taken to be 512 entries for bk tree , fq tree and fh tree as each entry is 8 bytes .",
    "the routing data elements are chosen at random from the dataset .",
    "+ the leaf node for vp tree as proposed in @xcite has a single entry .",
    "the routing element is selected using the best spread heuristic @xcite . for mvp trees ,",
    "we ran the experiments for different values of parameters m , v and p and the values 2 , 2 and 10 were shown to give better performance . for p",
    "= 10 , the number of leaf node entries is found to be 110 .",
    "the vantage point is selected at random for mvp tree .",
    "+ in the case of bisector tree and m tree , the two farthest elements are chosen as pivot elements at the time of split of a full node . for m tree , we ran the experiment with the number of entries in the internal node m taking values 5 and 254 .",
    "+ in clustering and indexing with bounds , the threshold value used in our runs was chosen to be 5 .",
    "in all the indexing structures , the criterion ( [ criterion ] ) , which is obtained from the triangle inequality is used to prune the search space . as the search distance is increased , the number of pivots(or routing objects ) that fail to satisfy the criterion ( [ criterion ] ) also increases resulting in an increase in the percentage of the database scanned .",
    "+ figure 1 shows the performance of the various similarity indexing structures with variation in the search distance .",
    "it can be seen that fq tree and fh tree perform better than bk tree .",
    "this can be attributed to two reasons : the number of pivot element comparisons is less in case of fq tree and fh tree as these trees have one fixed key per level .",
    "whereas , in case of bk tree , there are as many distinct pivot elements per level as the number of nodes at that level .",
    "further , fq tree and fh tree use a better splitting technique resulting in more partitions as compared to bk tree . hence , some of the partitions can be eliminated using ( [ criterion ] ) .",
    "consider the case when a subset @xmath52 as shown in figure 2 is to be split in bk tree .",
    "then the pivot element selected is some @xmath53 .",
    "thus the maximum number of partitions that can result is 2i .",
    "however , in case of fq tree , since a fixed pivot element is selected for each level , the chosen pivot is away from the subset , which may result in more partitions .",
    "it is shown in @xcite that this results in better performance . in fh tree",
    "all the leaves are at the same level .",
    "also , since we have already performed the comparison between the query and pivot of an intermediate level , we eliminate for free the need to consider a leaf .",
    "hence fh tree performs slightly better than fq tree .",
    "+ our implementation of vp tree uses the best spread heuristic @xcite for selecting the vantage points .",
    "in addition , each internal node maintains the lower and upper bounds of the distance of elements in left and right subtrees .",
    "this can be used to cut down the distance computations using the triangle inequality .",
    "because of these factors the performance is better as compared to bk tree .",
    "however , just like bk tree , as the vantage point is selected from the subset that is being partitioned and there are multiple distinct vantage points at any given level , fq tree and fh tree show better performance . +",
    "as can be seen from the plots in figure 1 , mvp tree outperforms vp tree . each leaf node entry in the mvp tree stores its distance to the first 10 ancestors .",
    "these precomputed distances help in reducing the search cost as compared to vp tree .",
    "in addition , mvp tree needs two vantage points to partition the data space into four regions whereas vp tree requires three vantage points for the same .",
    "this further reduces the number of distance computations at the internal nodes at search time .",
    "the left partition obtained using vantage point @xmath32 is partitioned again using the farthest point @xmath33 which is present in the right partition .",
    "also , for smaller values of the edit distances(@xmath54 ) the internal node comparisons dominate the results . in case of the mvp tree ,",
    "since there are multiple keys at each internal node , it results in more distance computations as compared to the fh and fq tree , which have one fixed key per level .",
    "this explains the crossover in the curves of the fq tree , fh tree and mvp tree at search distance 0.4 .",
    "+        the clustering technique partitions the dataset into a fixed number of clusters @xmath55 .",
    "this number varies inversely as the threshold i.e. the cluster radius . at search time , the query string is compared against each of the cluster representatives , the clusteroids .",
    "these comparisons are performed irrespective of the search distance . for a threshold of five , the clustering algorithm partitioned the dataset into 17,912 clusters .",
    "this explains the comparitively large number of searches for smaller values of search radii in figure 1 . for clusteroids that do not satisfy the test in ( [ criterion ] ) , the associated cluster elements are sequentially compared against the query string .",
    "+ in the case of bisector tree , the insertion of a new data element may result in an increase in the covering radius of the routing object .",
    "the covering radii values depend upon the order in which the elements are inserted and may have large values.due to this , at search time , a number of routing objects satisfy the test in equation ( [ mtree-1 ] ) .",
    "thus , the bisector tree shows poor performance as compared to the other indexing structures . with m trees , even though the new element is inserted into a subtree such that the resulting increase in the covering radius is the least , there are no bounds on covering radius value .",
    "so the performance is identical to that of bisector tree .",
    "the poor performance can also be attributed to the presence of more number of routing objects to partition the data space .",
    "+ it can be observed from the graph in figure 3 that mtb that combines the features of m tree and clustering shows better performance .",
    "this can be attributed to the two optimzations used , which result in well formed clusters . for lower values of the search distance , the overhead of the comparisons with large number of routing objects at the internal nodes results in poor performance .",
    "+        the graph in figure 4 shows comparison of the various indexing structures when bag distance computation is used to reduce some of the edit distance computations .",
    "the graph shows the edit distance computations needed with search distances varying from 10 to 100% .",
    "bk tree & 0.5789 + bk tree ( with bag distance ) & 0.4164 + fq tree & 0 .. 5825 + fq tree ( with bag distance ) & 0.4124 + fh tree & 0.5746 + fh tree ( with bag distance ) & 0.4090 + vp tree & 0.4951 + m tree ( with bag distance ) & 0.3041 + cluster & 0.6531 + mtb ( with bag distance ) & 0.1465 +      table 1 lists the average search time(ms ) per query taken by various indexing structures .",
    "it can be observed that mtb tree takes comparatively lesser time .",
    "bag distance computation helps in reducing the time complexity .",
    "we have presented a performance study of the search efficiency of similarity indexing structures .",
    "mtb , which combines the features of clustering and m tree is found to perform better than all the other indexing structures for most search distances .",
    "bag distance computation , which is cheaper than edit distance computation , was used in the experiments .",
    "its use resulted in reduced time complexity .",
    "further , in applications where the required search distance is low and the string lengths are large , even better performance might result . +",
    "it can be observed that index structures like mvp tree , which make use of precomputed distances with ancestors to prune the search space perform better than others . in similarity",
    "searching , since multiple paths are traversed , keeping a fixed key per level as in fq tree minimizes the search cost by reusing the precomputed distance at that level .",
    "thus , reusing the pre computed distances results in better performance .",
    "some indexed structures were shown to perform better with smaller values of edit distances(@xmath56 ) whereas some others perform better at higher values .",
    "it would be advantageous to maintain multiple index structures and depending upon the edit distance , select the appropriate one .",
    "using cheaper distance computation algorithms can also significantly reduce the cpu cost .",
    "the quality of partioning is largely dependent on the heuristic used for selecting the pivots . as a future work ,",
    "we propose to analyse the performance of various index structures with different heuristics .",
    "we thank a kumaran of database systems lab , iisc for his advice during the work .",
    "99 w. a. burkhard , r. m. keller , some approaches to best - match file searching , _ comm . of the acm , 16(4):230236 _ , 1973 .",
    "r. baeza - yates , w. cunto , u. manber , s. wu , proximity matching using fixed - queries trees , _ the 5th combinatorial pattern matching , volume 807 of lecture notes in computer science , pages 198 - 212 _ , 1994 .",
    "v. ganti , r. ramakrishnan , j. gehrke , a. powell , j. french , clustering large datasets in arbitrary metric spaces , _ in the proceedings of international conference on data engineering _ , 1999 .",
    "p. ciaccia , m. patella , p. zezula , m - tree : an efficient access method for similarity search in metric spaces , _ in proceedings of the 23rd vldb international conference , athens , greece _ , september 1997 .",
    "edgar chavez , gonzalo navarro , ricardo baeza - yates , jose luis marroquin , searching in metric spaces , _ acm computing surveys _ , 1999 .",
    "peter n. yianilos , data structures and algorithms for nearest neighbor search in general metric spaces , _ proceedings of the fourth annual acm - siam symposium on discrete algorithms , p.311 - 321 _ , january 25 - 27 , 1993 .",
    "tolga bozkaya , meral ozsoyoglu , indexing large metric spaces for similarity search querie , _ acm transactions on database systems , vol .",
    "3 , pages 361 - 404 _ ,",
    "september 1999 .",
    "ilaria bartolini , paolo ciaccia , marco patella , string matching with metric trees using an approximate distance , _",
    "spire 2002 : 271 - 283_. i. kalantari , g. mcdonald , a data structure and an algorithm for the nearest point problem , _ ieee transactions on software engineering , 9(5 ) _ , 1983 ."
  ],
  "abstract_text": [
    "<S> similarity searching finds application in a wide variety of domains including multilingual databases , computational biology , pattern recognition and text retrieval . </S>",
    "<S> similarity is measured in terms of a distance function ( _ edit distance _ ) in general metric spaces , which is expensive to compute . </S>",
    "<S> indexing techniques can be used reduce the number of distance computations . </S>",
    "<S> we present an analysis of various existing similarity indexing structures for the same . </S>",
    "<S> the performance obtained using the index structures studied was found to be unsatisfactory . </S>",
    "<S> we propose an indexing technique that combines the features of clustering with m tree(mtb ) and the results indicate that this gives better performance . </S>"
  ]
}