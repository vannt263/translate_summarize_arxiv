{
  "article_text": [
    "we present optimal online algorithms for two known interrelated problems involving steiner arborescences .",
    "those were discussed in separate studies in the past . yet",
    ", we managed to improve the solution of the continuous one ( @xmath0 @xcite , defined below ) by solving first the discrete one .",
    "we then used this improved solution of the continuous problem , to improve further the solution of the discrete one . for",
    "the sake of clarity of the exposition and the motivation , let us start with the discrete problem .",
    "the online multimedia content delivery ( @xmath2 ) problem on line networks was presented originally by papadimitriu , ramanathan , and rangan @xcite , to capture the tradeoff between the storage and the delivery costs .",
    "they considered a movie residing initially at some _ origin _ node .",
    "requests arrived at various nodes at various times .",
    "_ serving _ a request meant delivering a copy to the requesting node .",
    "an algorithm could serve every request by delivering a copy from the origin at the time of the request , incurring a high delivery cost .",
    "alternatively , a movie already delivered to some nodes , could be stored there , and delivered later from there .",
    "this could reduce delivery costs , but incur storage cost .",
    "more formally , given an undirected line network , papadimitriu et al .",
    "defined a grid of network@xmath3time .",
    "the full formal definitions of this this grid , the problem and the online model , appear in section [ sec : preliminaries ] .",
    "let us now describe the ideas .",
    "a request @xmath14 for a movie copy arriving at a network node @xmath15 at time @xmath16 was modeled as a request at a grid _ vertex _ @xmath17 .",
    "the storage at a node @xmath15 from time @xmath16 until @xmath18 was modeled as an edge directed away from a grid vertex @xmath17 to vertex @xmath19 .",
    "an algorithm had to _ serve _ the requests , in the order they arrived .",
    "initially , only some origin node was served .",
    "that is , the origin had a copy of the movie at time @xmath20 .",
    "suppose that the origin continued to store this copy indefinitely .",
    "this was modeled by an algorithm selecting the origin vertex @xmath21 as well as the directed path @xmath22 .",
    "the edge @xmath23 modeled the storage of a copy at the origin @xmath20 from time @xmath16 to time @xmath18 .",
    "similarly , an algorithm could select some other ( directed ) _ storage edges _ , that is , edges of the type @xmath24 , representing the storage of a copy in @xmath15 from @xmath16 to @xmath18 . a _ delivery _",
    "edge of the type @xmath25 modeled the _ delivery _ of a copy , at time @xmath16 , from network node @xmath15 to network node @xmath26 .",
    "as opposed to storage edges that had to be directed from @xmath16 to @xmath18 , a delivery edge could lead either from @xmath17 to @xmath27 or vice versa .",
    "serving a scenario ( a list ) of requests was modeled by an algorithm constructing a steiner arborescence rooted at @xmath21 in which all the requests where terminal vertices in the grid network@xmath3time .",
    "an efficient solution was a steiner tree with a minimum number of edges ( whether directed or not ) .",
    "the reader can find an example of an _ offline _ approximation algorithm ( algorithm @xmath28 of charikar et .",
    "al @xcite ) in section [ sec : preliminaries ] .    in the online version of @xmath2 ,",
    "when a request @xmath29 arrives for some network node @xmath15 and some time @xmath16 , the algorithm must have already served all previous requests ( those with smaller times , as well as those that have the same time but appear earlier than @xmath14 in the input sequence ) . moreover",
    ", the online algorithm must serve request @xmath14 from some vertex @xmath30 that is already on the solution steiner arborescence at this point in the algorithm execution .",
    "hence , to be able to serve later requests , the algorithm must already add some ( directed ) arcs from some grid vertices of the form @xmath30 to the corresponding grid vertices @xmath31 , since this can not be performed later than the time all the requests for time @xmath16 are served . in the case of @xmath2 ( but not of @xmath0 ) , the algorithm knows when no additional requests for time @xmath16 will arrive , and can add such arcs @xmath32 at that point .",
    "the continuous version of the above problem is the symmetric rectilinear steiner arborescence ( @xmath0 ) problem studied by berman and coulston @xcite in the context of steiner arborescences .",
    "there , a request can arrive at any real point @xmath33 , provided that the @xmath34 coordinates are non decreasing . instead of selecting edges to augment the steiner tree solution ( as in @xmath2 )",
    ", the algorithm may augment the steiner arborescence by selecting either segments that is parallel to the @xmath35 axis , or segments that are parallel to the @xmath34 axis .",
    "papadimitriu et al .",
    "assumed some constraints on the input .",
    "those constraints were lifted in the paper of charikar , halperin , and motwani .",
    "the upper bound ( in charikar et al . ) on the competitive ratio was @xmath5 for the network problem ( where @xmath7 was the size of the network ) and the lower bound was @xmath9 .",
    "the bounds of berman and coulston for @xmath0 were very similar .",
    "the upper bound was @xmath4 , where @xmath6 was the number of terminals , the _",
    "normalized _ size of the network . for simplicity ,",
    "we present results for @xmath7 , the size of the network .",
    "however , an easy consequence of our sections [ sec : opt strsa ] and [ sec : optimal - mcd - for - few - requests ] is that we can show the same results for @xmath36 rather than for @xmath7 . ] .",
    "the lower bound was @xmath8 .",
    "clearly , the upper bounds are quadratic in the lower bounds .",
    "berman and coulston conjectured that both the upper bound and the lower bound could be improved .",
    "[ [ our - results ] ] our results + + + + + + + + + + +    in this paper , we disprove the above conjecture and close these quadratic gaps for both problems .",
    "we first present an @xmath10 deterministic competitive algorithm for @xmath2 on the line .",
    "we then translate the online algorithm to become a competitive optimal algorithm @xmath37 for @xmath0 .",
    "the competitive ratio is @xmath11 .",
    "finally , we translate @xmath37 back to solve the @xmath2 problem .",
    "this reverse translation improves the upper bound to @xmath12 .",
    "that is , this final algorithm is competitive optimal for @xmath2 even in the case that the number of requests is small .",
    "( intuitively , the `` reverse translation '' gets rid of the dependance on the network size , using the fact that in the definition of @xmath38 , there is no network ; this trick can be a useful twist on the common idea of a translation between continuous and discrete problems ) .",
    "we also present a @xmath13{\\log n})$ ] lower bound on the competitiveness of any randomized algorithm .",
    "some parts of the techniques we used may be of interest .",
    "in particular , a common difficulty in computing a competitive ratio is , of course , the fact that one does not know the competing algorithm of the adversary .",
    "we go around this fact by comparing the costs of the online algorithm to the costs of a constant approximation offline algorithm ( of charikar , halperin , and motwani ) .",
    "[ [ some - additional - related - work ] ] some additional related work + + + + + + + + + + + + + + + + + + + + + + + + + + + +    as pointed out in @xcite , they were also motivated by their dynamic servers problem .",
    "that is , @xmath2 is a variant of a problem that is useful for data structures for the maintenance of kinematic structures , with numerous applications .",
    "of course , steiner trees , in general , have many applications , see e.g. @xcite for a rather early survey that already included hundreds of items .",
    "in particular , online steiner _ arborescence _ problems are useful in modeling the time dimension in a process .",
    "intuitively , as is the case in the motivation of papadimitriu at al . explained above , directed edges represent the passing of time .",
    "since there is no way to go back in time in such processes , all the directed edges are directed away from the initial state of the problem , hence , resulting in an arborescence .",
    "additional examples given in the literature included processes in constructing a vlsi , optimization problems computed in iterations ( where it was not feasible to return to results of earlier iterations ) , dynamic programming , and problems involving dna , see , e.g. @xcite .",
    "berman and coulston also presented online algorithms for the rectilinear steiner arborescence ( continuous ) problem @xmath39 .",
    "there , each horizontal line segment in the steiner arborescence was required to be directed from a low @xmath35 coordinate value to a high one .",
    "( in addition , as in @xmath0 , each vertical segment was required to be directed from a low @xmath34 coordinate value to a high one ) .",
    "the offline version of @xmath39 was studied e.g. by rao , sadayappan , hwang , and shor @xcite .",
    "@xmath39 was attributed to @xcite who gave an exponential integer programming solution and to @xcite who gave an exponential time dynamic programming algorithm .",
    "a ptas was presented by @xcite .",
    "the results of @xcite generalized the logarithmic upper bound of online @xmath2 to general networks .",
    "[ [ paper - structure . ] ] * paper structure . * + + + + + + + + + + + + + + + + + +    in section [ sec : mcd opt as a function of net size ] , we provide an optimal upper bound on the competitive ratio for @xmath2 as a function of the network size . in section [ sec :",
    "opt strsa ] , we use the above solution in order to solve the ( continuous ) @xmath0 problem . in section",
    "[ sec : optimal - mcd - for - few - requests ] we use the solution of @xmath0 in order to improve the solution of @xmath2 ( to be optimal also as a function of the number of steiner points ) .",
    "finally , the lower bound is given in section [ sec : randomized_lb ] .",
    "[ sec : preliminaries ]    in this section , we present some of the definitions already given in the introduction , but in a somewhat more formal and detailed form .",
    "this allows us to introduce notations we use later .",
    "[ [ the - networktimestime - grid ] ] the network@xmath3time grid + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    a _ line network _",
    "@xmath40 is a network whose vertex set is @xmath41 and its edge set is @xmath42 . given a line network @xmath40 ,",
    "construct  time - line ",
    "graph @xmath43 , intuitively , by `` layering '' multiple copies of @xmath44 , one per time unit .",
    "connect each node in each copy to the same node in the next copy ( see fig .",
    "[ figure : timenet ] ) . when it is clear from the context , we may omit @xmath45 from @xmath46 and write just @xmath35 , for every @xmath47 . formally , the node set @xmath48 contains a _ node replica _",
    "( sometimes called just a _ replica _ ) @xmath49 of every @xmath50 , for every time step @xmath51 .",
    "that is , @xmath52 .",
    "the set of edges @xmath53 contains _ horizontal edges _",
    "@xmath54 , connecting network edges in every time step ( round ) , and directed _ vertical edges _ , called _ arcs _ , @xmath55 , connecting different copies of @xmath56 . notice that @xmath57 can be viewed geometrically as a square grid of @xmath7 by @xmath58 whose grid points are the replicas . following fig .",
    "[ figure : timenet ] , we consider the time as if it proceeds upward .",
    "an example of a time - line graph @xmath59 .",
    "each node in @xmath48 is represented by a circle ; each horizontal edge in @xmath60 is represented by a horizontal segment ( see , as an example , @xmath61 for an horizontal edge in the left marked rectangle ) ; each arc in @xmath62 is represented by a horizontal arrow ( see , as an example , @xmath63 for an arc in the right marked rectangle ) . , scaledwidth=40.0% ]",
    "* _ srsa _ : formal definition * the symmetric rectilinear steiner arborescence ( @xmath0 ) problem is defined as follows .",
    "a path connecting two terminals is _ rectilinear _ if it traverses a number of line segments , where each line segment is either vertical or horizontal .",
    "this path is also @xmath64-_monotone _ if during the traversal , the @xmath64 coordinates of the successive points are never decreasing . the input is a set of _ requests _ @xmath65 , that is , a set of terminals ( sometimes called points ) @xmath66 in the positive quadrant of the plane .",
    "a feasible solution @xmath67 to the problem is a set of rectilinear segments connecting all the @xmath6 terminals to the origin @xmath21 ( sometime called the _ root _ ) in which each terminal can be reached from the origin by a rectilinear @xmath64-monotone path .",
    "the goal is to find a feasible solution in which the sum of lengths of all the segments is the minimum possible .",
    "the definition of @xmath2 is almost identical , except that it uses @xmath57 instead of the continuous quarter of the plane .    *",
    "_ mcd _ : formal definition * we are given a line network @xmath68 , an _ origin _",
    "node @xmath69 and a set of _ requests _ @xmath70 .",
    "a feasible solution @xmath67 is a subset of edges @xmath71 that spans the set of requests @xmath65 . for convenience ,",
    "the endpoints @xmath72 of edges in @xmath67 are also considered parts of the solution . for a given algorithm @xmath73 , let @xmath74 be the solution of @xmath73 , and let @xmath75 , ( the cost of an algorithm @xmath73 ) , be @xmath76 .",
    "the goal is to find a minimum cost feasible solution . in our analysis",
    ", @xmath77 is the set of edges in some optimal solution whose cost is @xmath78 .",
    "[ [ app : online ] ] * online model * + + + + + + + + + + + + + +    in the online versions of the problems , the algorithm receives as input a sequence of events .",
    "one type of events is a request in the ( now ordered ) set @xmath65 of requests @xmath79 .",
    "a second type of events is assumed in the case of @xmath2 only .",
    "specifically , we also assume for @xmath2 a clock that tells the algorithm that time @xmath16 is ending , and also that time @xmath18 is starting .",
    "this allows the algorithm ( for @xmath2 only ) to know e.g. that no additional requests for time @xmath16 are about to arrive , or that there are no requests for some time @xmath16 at all .",
    "when handling an event @xmath80 , the algorithm only knows the following : ( a ) all the previous requests @xmath81 ; and ( b ) the solution arborescence @xmath82 it constructed so far ( originally containing only the origin ) . in the case of @xmath2 ,",
    "it is also meaningful to say that ( c ) the algorithm knows the current time @xmath16 ( even if no request arrives at time @xmath16 ) . in each event",
    "( either a request arrival , or , in @xmath2 , a clock event ) , the algorithm may need to make decisions of two types , before seeing future requests :    * if the event is the arrival of a request , then from which current ( time @xmath16 ) cache ( a point already in the solution arborescence @xmath82 when @xmath83 arrives ) to serve @xmath83 by adding horizontal edges to @xmath82 .",
    "note that , at time @xmath16 , the online algorithm can not add nor delete any edge with an endpoint that corresponds to previous times . * which segments to add from a point already in the solution arborescence to @xmath83 . as opposed to the case of @xmath2 , here",
    "both horizontal and vertical segments may be added .",
    "the segments added by the algorithm can not include any point @xmath33 for @xmath84 , where @xmath85 is the time of @xmath86 .",
    "* at which nodes to store a movie copy for time @xmath18 , for future use .",
    "that is , select some replica ( or replicas ) @xmath17 already in the solution @xmath82 and add an edge directed from @xmath17 to @xmath19 to @xmath82 . * similarly to the @xmath2 case : first , choosing some points of the form @xmath87 from the points already selected to be in the solution arborescence @xmath82 such that @xmath88 ; second , adding to @xmath82 a segment directed from @xmath87 to some later point @xmath89 . as opposed to the case for @xmath2 , here",
    ", @xmath90 is not necessarily @xmath18 , so that algorithm also must choose @xmath90 .    similarly to @xcite , we assume that the online algorithm may replicate the movie for efficient delivery , but at least one copy of the movie must remain in the network at all times .",
    "alternatively , the system ( but not the algorithm ) can have the option to delete the movie altogether , this decision is then made known to the online algorithm .",
    "this natural assumption is also necessary for having a competitive algorithm .",
    "[ [ a - tool - the - offline - algorithm - mboxsc - triangle - of - charikar - et .- al ] ] * a tool : the offline algorithm @xmath28 of charikar et .",
    "al * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    consider a requests set @xmath91 such that @xmath92 .",
    "when algorithm @xmath28 starts , the solution includes just @xmath93 ( intuitively , a `` pseudo request '' ) .",
    "then , @xmath28 handles , first , request @xmath94 , then request @xmath95 , etc ... in handling a request @xmath96 , the algorithm may add some edges to the solution .",
    "( it never deletes any edge from the solution . ) after handling @xmath96 , the solution is an arborescence rooted at @xmath97 that spans the request replicas @xmath98 . for each such request @xmath99",
    ", @xmath28 performs the following ( see fig . [ figure : triangle ] ) .",
    "* chose a replica @xmath100 s.t .",
    "@xmath101 is already in the solution and the distance from @xmath101 to @xmath96 is minimum ( over the replicas already in the solution ) .",
    "call @xmath101 the _ serving replica _ of @xmath86 .",
    "* define the _ radius _ @xmath102 of @xmath96 as @xmath103 .",
    "also define the _",
    "base_. there , @xmath104 is the base of the triangle defined there ( that triangle is illustrated in fig .",
    "[ figure : triangle ] ) . ]",
    "@xmath104 of @xmath96 as the set of replicas at time @xmath16 of distance at most @xmath102 from @xmath96 .",
    "that is , @xmath105 .",
    "similarly , the _ edge base _ of @xmath96 is @xmath106 . *",
    "deliver a copy to a replica in @xmath104 .",
    "this is done by delivering a copy from @xmath107 to @xmath108 ( meaning that node @xmath109 stores a copy from time @xmath110 to time @xmath85 ) .",
    "more formally , add the arcs of @xmath111 $ ] to the solution .",
    "* deliver a copy to all replicas in @xmath104 .",
    "this is done by adding all the edges of @xmath112 to the solution , except the one that closes a circle ( if such exists ) .",
    "it is easy to verify @xcite that the cost of @xmath28 for serving the @xmath113th request @xmath96 is @xmath114 at most .",
    "denote by @xmath115 the feasible solution of @xmath28 , where @xmath116 and @xmath117 $ ] .",
    "note that @xmath118 is an arborescence rooted at @xmath119 spanning the base replicas of @xmath120 . rewording the theorem of @xcite ,",
    "somewhat ,    @xcite @xmath28 computes a @xmath121-approximate solution . also",
    ", @xmath122 .",
    "[ thm : triangle is a 3-approx ]        [ [ general - definitions - and - notations . ] ] * general definitions and notations . *",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    consider an interval @xmath123 and two integers @xmath124 , s.t .",
    "let @xmath126 $ ] ( fig .",
    "[ figure : subgraphj ] ) be the _ `` rectangle subgraph '' _ of @xmath57 corresponding to vertex set @xmath127 and time interval @xmath128 $ ] .",
    "this rectangle consists of the replicas and edges of the nodes of @xmath127 corresponding to time interval @xmath128 $ ] . for a given subsets @xmath129 , @xmath130 and @xmath131 ,",
    "denote by ( 1 ) @xmath132 $ ] replicas of @xmath133 corresponding to times @xmath134 .",
    "define similarly ( 2 ) @xmath135 $ ] for horizontal edges of @xmath136 ; and ( 3 ) @xmath137 $ ] arcs of @xmath138 .",
    "( when @xmath139 , we may write @xmath140={\\mathcal{x}}[s , t]$ ] , for @xmath141 . )",
    "a subgraph rectangle @xmath126 $ ] , where @xmath142.,scaledwidth=40.0% ]    consider also two nodes @xmath143 s.t .",
    "let @xmath145={\\mathcal{p}}_{\\mathcal{h}}[{(u , t)},{(v , t)}]$ ] be the set of horizontal edges of the shortest path from @xmath49 to @xmath146 .",
    "that is , @xmath145=\\{({(w , t)},{((w+1),t)})\\mid v\\leq w",
    "let @xmath147 $ ] be the set of arcs of the shortest path from @xmath148 to @xmath49 .",
    "that is , @xmath147=\\{({(v , z)},{(v , z+1)})\\mid s\\leq z < t\\}$ ] .",
    "let @xmath149 be the distance from @xmath150 to @xmath49 .",
    "formally , @xmath151 ( if @xmath125 , otherwise , @xmath58 ) .",
    "[ [ subsec : online on the line sqrt(log n ) ] ] * algorithm @xmath152 . *",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    like algorithm @xmath28 , algorithm @xmath153 , handles requests one by one , according to the order of arrival .",
    "however , in step ( t3 ) , @xmath28 may perform an operation that no online algorithm can perform ( if @xmath154 ) . serving a request @xmath96",
    "must be preformed from some replica @xmath155 $ ] that holds a copy at time @xmath85 in the execution of the online algorithm on @xmath65 .",
    "thus ( in addition to selecting from which nodes to deliver copies ) , algorithm @xmath153 at time @xmath156 had to also select the nodes that store copies for the consecutive time @xmath85 ( so that @xmath157 mentioned above would be one of them ) .",
    "let us start with some definitions .",
    "[ [ partitions - of-1n - into - intervals . ] ] * partitions of @xmath158 $ ] into intervals . *",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    define @xmath159 for some positive integer @xmath160 to be chosen later . for convenience , we assume that @xmath159 is a power of @xmath161 .",
    "( it is trivial to generalize it ) .",
    "define @xmath162 _ levels _ of partitions of the interval @xmath158 $ ] . in level @xmath163 ,",
    "partition @xmath158 $ ] into @xmath164 intervals , @xmath165 , @xmath166, ... ,@xmath167 , each of size @xmath168 ( fig .",
    "[ figure : intervalsa ] ) .",
    "@xmath169 , for every @xmath170 and every @xmath171 .",
    "let @xmath172 be the set of all such intervals .",
    "let @xmath173 be the _ level _ of an interval @xmath174 , i.e. , @xmath175 .",
    "denote by @xmath176 ( for every node @xmath177 and every level @xmath178 ) the interval in level @xmath163 that contains @xmath15 .",
    "that is , @xmath179 ( fig .",
    "[ figure : intervalsb ] ) .",
    "an example of a line network of size @xmath180 , where @xmath181 .",
    "there are @xmath182 partition levels . at level @xmath163 , the interval [ 1,96 ] partitions into @xmath183 intervals @xmath184 , each of size @xmath168",
    "( see for example , level 3 ) .",
    ", scaledwidth=45.0% ]    for a given interval @xmath185 , denote by @xmath186 , for @xmath187 ( respectively , @xmath188 , for @xmath189 ) the _ neighbor _ interval of level @xmath163 that is on the right ( resp .",
    ", left ) of @xmath190 ( see fig .",
    "[ figure : neighborsa ] ) .",
    "that is , @xmath191 and @xmath192 .",
    "define that @xmath193 and @xmath194 .",
    "let @xmath195 we say that @xmath196 is the _ neighborhood _ of @xmath197 .",
    "[ [ subsection : def delta active intervals ] ] * active intervals . * + + + + + + + + + + + + + + + + + + +    an interval @xmath198 is called _ active _ at time @xmath16 , if a replica in @xmath199 $ ] is also in @xmath200 , i.e. , @xmath201\\not=\\emptyset$ ] ( see fig . [",
    "figure : deltaactive ] ) . intuitively , the pseudo online kept a movie copy in , at least , one of the nodes of @xmath197 , at least once , and `` not to long '' before time @xmath16 .",
    "we say that @xmath197 _",
    "@xmath202 _ , intuitively ,",
    "if @xmath197 is * not * `` just about to stop being active '' , that is , if @xmath203\\not=\\emptyset$ ] .",
    "denote by @xmath204 , the set of replicas corresponding to the nodes that store copies from time @xmath16 to time @xmath18 in a @xmath153 execution . also , @xmath205 .",
    "we chose to leave a copy in @xmath206 always . to help us later in the analysis",
    ", we also added an auxiliary set @xmath207 .",
    "initially , @xmath208 . for each time",
    "@xmath209 , consider first the case that there exists at least one request corresponding to time @xmath16 , i.e. , @xmath210=\\{{r}_{j}, ... ,{r}_k\\}\\not=\\emptyset$ ] .",
    "then , for each request @xmath211 $ ] , @xmath153 simulates @xmath28 to find the radius @xmath102 and the set of base replicas @xmath104 of @xmath96 .",
    "next , @xmath153 delivers a copy to every such base replica @xmath212 ( this is called the _ `` delivery phase '' _ ) .",
    "that is , for each @xmath213 do :    * chose a closest ( to @xmath96 ) replica @xmath214 of time @xmath16 already in the solution ; * add the path @xmath215\\cup{\\mbox{\\sc base}}_{\\mathcal{h}}(i)$ ] to the solution .",
    "let @xmath216 .",
    "( note that @xmath217 is served from @xmath218 , after that , the path @xmath219 is added ; and @xmath220 is served from @xmath221 , etc . ) clearly , the delivery phase of time @xmath16 ensures that ( at least ) the nodes of @xmath222 $ ] have copies at the end of that phase .",
    "it is left to decide which of the above copies to leave for time @xmath18 .",
    "that is ( the _ `` storage phase '' _ ) , @xmath153 chooses the set @xmath223 $ ] .",
    "initially , @xmath224 ( as we chose to leave a copy at @xmath206 always ) .",
    "then , for each level @xmath225 in an _ increasing _ order select as follows .    *",
    "while there exists a level @xmath163 interval @xmath174 that is ( @xmath226 ) @xmath202 at @xmath16 ; but ( @xmath227 ) no replica has been selected in @xmath197 s neighborhood ( i.e. , @xmath228=\\emptyset$ ] ) , then perform steps ( s1.1-s1.3 ) below . *",
    "add the tuple @xmath229 to the set @xmath230 ( we say that @xmath197 _ commits _ at time @xmath16 ) .",
    "* select some replica @xmath231\\cup { \\mathcal{c}}_{t}$ ] such that @xmath232 ( by observation [ obser : complete onalg ] below , such a replica does exist ) . * add @xmath233 to @xmath204 and add the arc @xmath234 to the solution .",
    "the pseudo code of @xmath153 and an example for an execution of @xmath153 are given in fig .",
    "[ figure : onalg ] and fig .",
    "[ figure : lineon ] , respectively .",
    "the solution constructed by @xmath153 is denoted @xmath235 , where @xmath236 represents the horizontal edges added in the delivery phases and @xmath237 represents the arcs added in the storage phase . before the main analysis , we make some easy to prove but crucial observations .",
    "recall that the notation of active ( including @xmath202 ) refer to the fact the nodes of some base replicas belong to some interval @xmath197 in the past .",
    "observations [ obser : complete onalg ] and [ obser : i is active = > n(i)cap ct neq emptyset ] state , intuitively , that @xmath153 leaves a copy in the _ neighborhood _ @xmath196 of @xmath197 as long as @xmath197 is active .",
    "( `` well defined '' ) .",
    "if an interval @xmath174 is @xmath202 at time @xmath16 , then there exists a replica @xmath238 $ ] such that @xmath232 .",
    "[ obser : complete onalg ]    moreover , a @xmath202 interval keeps a copy in its neighborhood longer .",
    "( `` an active interval has a near by copy '' ) .",
    "if an interval @xmath197 is @xmath239 at time @xmath16 , then , either ( 1 ) there is some base replica in @xmath197 s neighborhood at @xmath16 ( @xmath240\\not=\\emptyset$ ] ) , or ( 2 ) at least one of the nodes of @xmath196 stores a copy for time @xmath16 ( @xmath241\\cap { \\mathcal{c}}_{t}\\not=\\emptyset$ ] ) .",
    "[ obser : i is active = > n(i)cap ct neq emptyset ]    ( `` bound from above on @xmath242 '' ) .",
    "@xmath243|\\leq |{\\mbox{\\sc commit}}|$ ] .",
    "[ obser : |commit|=|charge|=|aon-0| ]             = 0.2 cm      we , actually , prove that @xmath244 this implies the desired competitive ratio of @xmath245 by theorem [ thm : triangle is a 3-approx ] .",
    "proving a competitive ratio by comparing an online algorithm to an approximation algorithm ( rather then to the unknown adversary ) may be a useful approach for other competitiveness proofs .",
    "we first show , that the number of horizontal edges in @xmath246 ( _ `` delivery cost '' _ ) is @xmath247 .",
    "then , we show , that the the number of arcs in @xmath248 ( _ `` storage cost '' _ ) is @xmath249 .",
    "optimizing @xmath160 , we get a competitiveness of @xmath245 .    [",
    "[ delivery - cost - analysis . ] ] * delivery cost analysis . * + + + + + + + + + + + + + + + + + + + + + + + + +    for each request @xmath99 , the delivery phase ( step ( d2 ) ) adds @xmath215\\cup{\\mbox{\\sc base}}_{\\mathcal{h}}(i)$ ] to the solution .",
    "define the _ online _ radius of @xmath96 as @xmath250 .",
    "since @xmath251 , it follows that , @xmath252 it remains to bound @xmath253 as a function of @xmath102 from above .",
    "intuitively , @xmath102 includes the distance from some base replica @xmath254 to @xmath255 .",
    "that is , @xmath102 includes the distance from @xmath256 to @xmath257 and the time difference between @xmath258 and @xmath85 . restating observation [ obser :",
    "i is active = >",
    "n(i)cap ct neq emptyset ] somewhat differently ( claim [ claim : dist(v , c t+rho ) leq 4 delta rho ] below ) , we can use the distance @xmath259 and the time difference @xmath260 for bounding @xmath253 .",
    "that is , we show the @xmath153 has a copy at time @xmath85 ( of @xmath96 ) at a distance at most @xmath261 from @xmath257 ( of @xmath262 ) .",
    "since , @xmath263 , @xmath153 has a copy at distance at most @xmath264 from @xmath256 ( of @xmath96 ) .    consider some base replica @xmath265 and some @xmath266 , such that , @xmath267",
    ". then , there exists a replica @xmath268 such that @xmath269 ( fig .",
    "[ figure : anadevcostclaim ] ) .",
    "[ claim : dist(v , c t+rho ) leq 4 delta rho ]        @xmath270 .",
    "[ lemma : delivery cost ]        the following corollary follows from the above lemma , inequality ( [ ineq :    3-approx ] .",
    "[ corollary : delivery cost ]    [ [ storage - cost - analysis . ] ] * storage cost analysis . * + + + + + + + + + + + + + + + + + + + + + + + +    by observation [ obser : |commit|=|charge|=|aon-0| ] , it remains to bound the size of @xmath272 from above .",
    "let @xmath273 if @xmath274 ( otherwise 0 ) .",
    "hence , @xmath275 . we begin by bounding the number of commitments in @xmath153 made by level @xmath276 intervals .",
    "@xmath277 [ obser : base acounts level l=0 committments ]    the following is our main lemma ;    @xmath278 .",
    "[ lem : storage cost < hoff + aoff ]    * proof sketch . * the @xmath279 term in the statement of the lemma follows from observation [ obser : base acounts level l=0 committments ] for level @xmath276 intervals . the rest of the proof deals with commitments in intervals @xmath174 whose level @xmath280 .",
    "we now group the commitments of each such an interval into _",
    "`` bins''_. later , we shall `` charge '' the commitments in each bin on certain costs of the offline algorithm @xmath28 .",
    "consider some level @xmath281 interval @xmath174 and an input @xmath65 .",
    "we say that @xmath197 is a _ committed - interval _ if @xmath197 commits at least once in the execution of @xmath153 on @xmath65 . for each committed - interval @xmath197 ( of level @xmath280 ) , we define ( almost )",
    "non - overlapping _",
    "`` sessions '' _",
    "( one session may end at the same time the next session starts ; hence , two consecutive sessions may overlap on their boundaries ) .",
    "the first session of @xmath197 does _ not _ contain any commitments ( and is termed an _ uncommitted - session _ ) ; it begins at time @xmath20 and ends at the first time that @xmath197 contains some base replica .",
    "every other session ( of @xmath197 ) contains at least one commitment ( and is termed a _ committed - session _ ) .",
    "each commitment ( in @xmath153 ) of @xmath197 belongs to some committed session .",
    "given a commitment @xmath274 that @xmath197 makes at time @xmath16 , let us identify @xmath229 s session .",
    "let @xmath282 be the last time ( before @xmath16 ) there was a base replica in @xmath197 .",
    "similarly , let @xmath283 be the next time ( after @xmath16 ) there will be a base replica in @xmath197 ( if such a time does exist ; otherwise , @xmath284 ) .",
    "the session of commitment @xmath229 starts at @xmath285 and ends at @xmath286 .",
    "similarly , when talking about the @xmath113 s session of interval @xmath197 , we say that the session starts at @xmath287 and ends at @xmath288 .",
    "when @xmath197 is clear from the context , we may omit @xmath289 .",
    "a bin is a couple @xmath290 of a commitment - interval and the @xmath113th commitment - session of @xmath197 .",
    "clearly , we assigned all the commitments ( of level @xmath281 intervals ) into bins .",
    "the bins do not overlap ( except , perhaps , on their boundaries ) .",
    "[ obser : mcd : bin do not overlap ]    let us now point at costs of algorithm @xmath28 on which we shall `` charge '' the set of commitments @xmath291 in bin @xmath290 .",
    "we now consider only a bin @xmath290 whose committed session is not the last .",
    "note that the bin corresponds to a rectangle of @xmath292 by @xmath293 replicas .",
    "expand the bin by @xmath292 replicas left and @xmath292 replicas right , if such exist ( to @xmath197 s neighborhood @xmath196 ) .",
    "this yields the _ payer _ of bin @xmath290 ; that is the payer is a rectangle subgraph of @xmath294 by @xmath293 replicas .",
    "we point at specific costs @xmath28 had in this payer .",
    "recall that every non last session of @xmath197 ends with a base replica in @xmath197 .",
    "let @xmath295 $ ] be some base replica in @xmath197 at the ending time of the session .",
    "the solution of @xmath28 must contain a route ( @xmath28 route ) that starts at the root and reaches @xmath296 by the definition of a base replica .",
    "for the charging , we use _ some _ ( detailed below ) of the edges in the intersection of the @xmath28 route and the payer rectangle .",
    "the easiest case is that the @xmath28 route enters the payer at the payer s bottom ( @xmath297 ) and stays in the payer until @xmath298 ( see fig .",
    "[ figure : be ] ) . in this case",
    "( * eb * , for entrance from below ) , each time ( @xmath299 ) there is a commitment in the bin , there is also an arc @xmath300 in the @xmath28 route ( from time @xmath16 to time @xmath18 ) .",
    "we charge that commitment on that arc @xmath300 .",
    "intuitively , the same arc @xmath300 may be charged also for one bin on the left of @xmath290 and one bin on its right , since the payer rectangles are 3 times wider than the bins .",
    "note that arc @xmath300 may also belong to additional @xmath301 payers ( of bins of intervals that contain @xmath197 or are contained in @xmath197 ) .",
    "the crucial point is that @xmath300 is _ not _ charged for those additional bins .",
    "that is , we claim that there are no commitments for those other bins .",
    "intuitively , @xmath153 was designed such that if @xmath197 commits at time @xmath16 , @xmath153 also stores a copy in @xmath197 s neighborhood for time @xmath18 .",
    "hence , an interval @xmath127 whose neighborhood contains the neighborhood of @xmath197 , does not need to commit ( see the decision when not commit in ( s1 ) in @xmath153 ) .",
    "thus , an arc of the @xmath28 route is charged only by 3 commitments at most ( this also proven formally later in claim [ claim : an arc is assignd to 3 session ] ) .",
    "the remaining case ( * se * , for side entrance ) is that the @xmath28 route enters the payer from either the left or the right side of the payer .",
    "( that is , @xmath28 delivers a copy from some other node @xmath302 outside @xmath197 s neighborhood , rather than stores copies at @xmath197 s neighborhood from some earlier time , see fig .",
    "[ figure : se ] ) .",
    "therefore , the route must `` cross '' either the left neighbor interval of @xmath197 or the right neighbor interval in that payer .",
    "thus , there exists at least @xmath303 horizontal edges in the intersection between the payer ( @xmath304 ) , of @xmath290 and the @xmath28 route .    on the other hand ,",
    "the number of commitments in bin @xmath290 is @xmath305 at most .",
    "( to commit , an interval must be active ; to be active , it needs a base replica in the last @xmath306 times ; a new base replica would end the session . )",
    "that is , we charged the payer @xmath160 times more horizontal edges than there are commitments in the bin . on the other hand , each horizontal edge participates in @xmath301 payers ( payers of 3 intervals at most in each level ; and payers of 2 bins of each interval at most , since two consecutive sessions may intersect only at their boundaries ) .",
    "this leads to the term @xmath307 before the @xmath308 in the statement of the lemma .        for each interval @xmath197 ,",
    "it is left to account for commitments in @xmath197 s last session .",
    "that is , we now handle the bin @xmath309 where @xmath197 has @xmath310 commitment - sessions .",
    "this session may not end with a base replica in @xmath197 , so we can not apply the argument above that @xmath28 must have a route reaching a replica in @xmath197 at @xmath311 . on the other hand , the first session of @xmath197 ( the uncommitted - session ) does end with a base replica in @xmath197 , but has no commitments .",
    "intuitively , we use the payer of the first session of @xmath197 to pay for the commitments of the last session of @xmath197 .",
    "specifically , in the first session , the @xmath28 route must enter the neighborhood of @xmath197 from the side ; ( note that the @xmath28 route still starts outside @xmath197 ; this because the origin @xmath206 who holds a copy , is not in @xmath197 s neighborhood ; otherwise , @xmath197 would not have been a committed interval . )",
    "hence , we apply the argument of case se above . _",
    "( end of proof sketch . ) _    [ [ formal - proof - of - the - lemma . ] ] formal proof of the lemma .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    extending the sketch into a some definitions omitted from sketch .",
    "let us now start , give a formal definitions of the aforementioned assignment of commitments to bins and the two charging assignments of offline horizontal edges and arcs .",
    "let @xmath312 . for every bin @xmath313 ,",
    "let @xmath314 .",
    "let @xmath315 $ ] , if @xmath290 is not the last session of @xmath197 , otherwise @xmath316 $ ] .",
    "denote the charged set ( of offline horizontal edges ) for bin @xmath290 by @xmath317 and denote the charged set ( of offline arcs ) for bin @xmath290 by @xmath318    in addition to the above definitions , the following claim shows , formally , that each offline arc is charged for 3 bins at most .    for every arc @xmath319 ,    @xmath320 .",
    "[ claim : an arc is assignd to 3 session ]    denote the set in the statement of the claim by @xmath321 .",
    "consider an arc @xmath322 .",
    "recall that , @xmath323 , if @xmath232 and @xmath324 . thus , @xmath325 as @xmath326 .",
    "we first analyze for the set corresponding to @xmath327 rather than @xmath232 .",
    "we show that @xmath328 that is , we prove that @xmath329 assume that there exists a level @xmath330 such that @xmath331 .",
    "consider some @xmath332 .",
    "assume ( by way of contradiction ) that @xmath333 .",
    "thus , in step * ( 3 ) * of @xmath153 , some replica @xmath334 of a node @xmath335 is added to @xmath204 .",
    "thus , when @xmath153 consider the @xmath330th iteration at time @xmath16 , the neighborhood of @xmath336 at @xmath16 , contains some replica ( specifically , @xmath334 ) that belongs to @xmath204 ( since @xmath337 ) .",
    "thus , @xmath338 .",
    "this contradict the assumption that @xmath331 . now , consider some @xmath339 .",
    "the condition in step * ( 1 ) * of @xmath153 , implies that @xmath340 , since @xmath341 .",
    "hence , ineq .",
    "( [ ineq : < i , t > in assign v in i ] ) holds .    to prove that the claim holds , it is still left to prove similar inequalities for the set of left neighbors ( of intervals that includes @xmath15 ) and for the set of right neighbors",
    "first , let us show that , @xmath342 we prove in fact , something equivalent .",
    "that is , we prove that @xmath343 ) .",
    "the proof is very similar to that of ineq .",
    "( [ ineq : < i , t > in assign v in i ] ) . assume that there exists a level @xmath330 such that @xmath344 .",
    "for every @xmath345 , we have @xmath346 , while for every @xmath339 , we have @xmath347 ( see fig . [ figure : neigh2 ] ) . because of the condition in step * ( 1 ) * of @xmath153 , we have that @xmath348 , for every @xmath349 . hence ineq .",
    "( [ ineq : < i , t > in assign v in nli(i ) ] ) holds .",
    "similar arguments prove that @xmath350 the claim follows by combining this together with inequalities ( [ ineq : < i , t > in assign v in i ] ) and ( [ ineq : < i , t > in assign v in nli(i ) ] ) .",
    "( claim [ claim : an arc is assignd to 3 session ] )     @xmath351 , thus @xmath352 and @xmath353 .",
    ", scaledwidth=40.0% ]     we can see that @xmath354 . thus , @xmath355 , for every @xmath356 such that @xmath357 .",
    ", scaledwidth=40.0% ]    let us now restate formally ( but in a very formal condensed way ) the claims defined informally in the sketch .",
    "first , we bound the number of bins charging an horizontal edge .",
    "as sketch above , each offline edge is charged for @xmath358 bins at most .",
    "thus , @xmath359 at the same time claim [ claim : an arc is assignd to 3 session ] yields a bound on the number of bins charging an arc .",
    "@xmath360    it is left to count the number of edges and arcs assigned to each bin . in case",
    "eb ( the @xmath28 route enter the payer of bin @xmath290 from below ) , @xmath361 . in case se , @xmath362",
    "thus , the edges and arcs assigned to bin @xmath290 obey @xmath363 , @xmath364 now combine inequality ( [ ineq : |commit| leq sum ( i , i ) in session arcbin+delta horbin ] ) with inequalities ( [ ineq : sum horbin leq 3|aoff| ] ) and ( [ ineq : sum arcbin leq 3|aoff| ] ) . lemma [ lem : storage cost < hoff + aoff ] follows .",
    "we now optimize a tradeoff between the storage coast and the delivery cost of @xmath153 .",
    "on the one hand , lemma [ lem : storage cost < hoff + aoff ] shows that a large @xmath160 reduces the number of commitments . by observation [ obser : |commit|=|charge|=|aon-0| ] , this means a large @xmath160 reduces the storage cost of @xmath153 . on the other hand , corollary [ corollary : delivery cost ]",
    "shows that a _ small _ @xmath160 reduces the delivery cost . to balance this tradeoff",
    ", we need to `` manipulate '' lemma [ lem : storage cost < hoff + aoff ] somewhat , since it uses variables that are different than those used in corollary [ corollary : delivery cost ] .",
    "we use the following observation ( 1 ) @xmath365|\\leq |{\\mbox{\\textsc{opt}}}|\\leq { cost}({\\mbox{\\sc triangle}},{\\mathcal{r}})$ ] ; ( 2 ) @xmath366 ; and ( 3 ) @xmath367 . substituting the above ( 1)(3 ) in observation [ obser :    @xmath368 to optimize the tradeoff , fix @xmath369 .",
    "corollary [ corollary : delivery cost ] , and inequality ( [ ineq : |aon| leq 5 frac 3 aoff + 6log n ] ) imply that @xmath370 .",
    "thus , by theorem [ thm : triangle is a 3-approx ] , the following holds .",
    "@xmath153 is @xmath245-competitive for @xmath2 on the undirected line network .",
    "[ thm : onalg is sqrt(log netsize ) competitive ]",
    "let us now transform @xmath153 into an optimal algorithm for the online problem of @xmath0 @xcite .",
    "note that without such a transformation , our solution for @xmath2 ( section [ sec : mcd opt as a function of net size ] ) does not yet solve @xmath0 . in @xmath2 , the @xmath35 coordinate of every request ( in the set @xmath65 )",
    "is taken from a known set of size @xmath7 ( the network nodes @xmath371 ) .",
    "on the other hand , in @xmath0 , the @xmath35 coordinate of a _ point _ is arbitrary . the immediate idea how to bridge",
    "this problem is problematic .",
    "intuitively , it looks as if it is enough just to translate the @xmath35 coordinates of points of @xmath0 into network nodes of @xmath2 .",
    "one problem in such an idea would be that in @xmath2 , the number of network nodes is known in advance , while the number of points in @xmath0 is not .",
    "a more serious problem is somewhat more delicate .",
    "intuitively , for @xmath153 to work correctly , the translation must maintain the proportion of the distances .",
    "that is , assume that some two points are very close to each other while some two other points are very far from each other .",
    "the first two points must be translated to network nodes that are close to each other , while the latter two points must be translated to network nodes that are far from each other .",
    "the competitive ratio of @xmath153 on such an input would have been bad , since it would have depended on this proportion .    to overcome these problems , we first `` assume them away '' .",
    "then , we make a series of modifications that remove the assumptions .",
    "first , assume that we know in advanced a `` good '' guess @xmath45 on the number @xmath372 of points .",
    "( here , @xmath7 is a `` good '' guess if @xmath373{{n}}\\leq { n}\\leq { n}$ ] ; intuitively , this ensures that @xmath374 ; recall that @xmath245 is the upper bound we established for @xmath2 and @xmath375 is the upper bound are shooting for in this section for @xmath0 . ) also , assume that we know in advanced a `` good '' guess @xmath376 on @xmath377 the largest @xmath35 coordinate of any point .",
    "( specifically , here the guess @xmath376 is `` good '' if @xmath378 ; intuitively , we pay @xmath379 and @xmath77 pays @xmath380 . )",
    "given those assumptions , we define a network ( of @xmath2 ) with @xmath45 nodes .",
    "the length of a graph edge is thus , @xmath381 ( less than @xmath382 ) .",
    "another important assumption is not about our knowledge , but rather on the input itself .",
    "that is , we assume that @xmath383 .",
    "( though , later in @xmath2 , the length of an edge is `` normalized '' to 1 . )",
    "the details are left for the full paper .",
    "algorithm @xmath37 is optimal and is @xmath375-competitive .",
    "[ thm : onrsa ]",
    "algorithm @xmath153 was optimal as the function of the network size ( theorem [ thm : onalg is sqrt(log netsize ) competitive ] ) .",
    "this means that it may not be optimal in the case that the number of requests is much smaller than the network size . in this section ,",
    "we use theorem [ thm : onrsa ] and algorithm @xmath37 to derive an improve algorithm for @xmath2 .",
    "this algorithm , @xmath384 , is competitive optimal ( for @xmath2 ) for any number of requests . intuitively , we benefit from the fact that @xmath37 is optimal for any number of points ( no notion of network size exists in @xmath0 ) .",
    "this requires the solution of some delicate point .",
    "given an instance @xmath385 of @xmath2 , we would have liked to just translate the set @xmath386 of @xmath2 requests into a set @xmath387 of @xmath0 points and apply @xmath37 on them .",
    "this may be a bit confusing , since @xmath37 performs by converting back to @xmath2 . specifically , recall that @xmath37 breaks @xmath387 into several subsets , and translates back first the first subset @xmath388 into an the requests set @xmath389 of a new instance @xmath390 of @xmath2 .",
    "then , @xmath37 invokes @xmath153 on this new instance @xmath390 .",
    "the delicate point is that @xmath390 is different than @xmath391 .",
    "in particular , the fact that @xmath388 contains only _ some _ of the points of @xmath386 , may cause @xmath37 to `` stretch '' their @xmath35 coordinates to fit them into the network of @xmath391 .",
    "going carefully over the manipulations performed by @xmath37 reveals that the solution of @xmath37 may not be a feasible solution of @xmath2 ( even though it applied @xmath153 plus some manipulations ) . intuitively , the solution of @xmath37 may `` store copies '' in places that are not grid vertices in the grid of @xmath391 .",
    "thus the translation to a solution of @xmath392 is not immediate .    intuitively , to solve this problem",
    ", we translate a solution of @xmath37 to a solution of @xmath391 in a way that is similar to the way we translated a solution of @xmath153 to a solution of @xmath0 .",
    "that is , each request of @xmath391 we move to a `` nearby '' point of @xmath37 .",
    "the details are left for the full paper .",
    "algorithm @xmath384 is optimal and it + @xmath393-competitive .",
    "we obtain an @xmath13{\\log { n}})$ ] lower bound on the competitive ratio of any _ randomized _ online algorithm for @xmath2 on a line network .",
    "first , we describe a probability distribution @xmath394 on instances .",
    "we show that the expected size of the solution returned by any _",
    "deterministic _ algorithm executed on instances taken from to @xmath394 is larger than the optimal offline solution by a factor of @xmath13{\\log { n}})$ ] .",
    "the lower bound then follows from yao s min - max principle  @xcite .",
    "the details are left for the full paper",
    ".    the competitive ratio of any _ randomized _ online algorithm for @xmath2 on the line network is @xmath13{\\log n})$ ] .",
    "we would like to thank to reuven bar - yehuda and dror rawitz for insights and helpful dissections .",
    "r.  bar - yehuda , e.  kantor , s.  kutten , and d.  rawitz .",
    "growing half - balls : minimizing storage and communication costs in cdns . in _",
    "39th international colloquium automata , languages , and programming ( icalp)(2 ) _ , pages 416427 , 2012 .",
    "papadimitriou , s.  ramanathan , and p.v .",
    "information caching for delivery of personalized video programs for home entertainment channels . in _",
    "ieee international conf . on multimedia computing and systems _ ,",
    "pages 214223 , may 1994 ."
  ],
  "abstract_text": [
    "<S> we present optimal competitive algorithms for two interrelated known problems involving steiner arborescence . </S>",
    "<S> one is the continuous problem of the symmetric rectilinear steiner arborescence ( @xmath0 ) , studied by berman and coulston as a symmetric version of the known rectilinear steiner arborescence ( @xmath1 ) problem .    </S>",
    "<S> a very related , but discrete problem ( studied separately in the past ) is the online multimedia content delivery ( @xmath2 ) problem on line networks , presented originally by papadimitriu , ramanathan , and rangan . </S>",
    "<S> an efficient content delivery was modeled as a low cost steiner arborescence in a grid of network@xmath3time they defined . </S>",
    "<S> we study here the version studied by charikar , halperin , and motwani ( who used the same problem definitions , but removed some constraints on the inputs ) .    the bounds on the competitive ratios introduced separately in the above papers are similar for the two problems : @xmath4 for the continuous problem and @xmath5 for the network problem , where @xmath6 was the number of terminals to serve , and @xmath7 was the size of the network . </S>",
    "<S> the lower bounds were @xmath8 and @xmath9 correspondingly . </S>",
    "<S> berman and coulston conjectured that both the upper bound and the lower bound could be improved .    </S>",
    "<S> we disprove this conjecture and close these quadratic gaps for both problems . </S>",
    "<S> we first present an @xmath10 deterministic competitive algorithm for @xmath2 on the line , matching the lower bound . </S>",
    "<S> we then translate this algorithm to become a competitive optimal algorithm @xmath11 for @xmath0 . finally , we translate the latter back to solve @xmath2 problem , this time competitive optimally even in the case that the number of requests is small ( that is , @xmath12 ) </S>",
    "<S> . we also present a @xmath13{\\log n})$ ] lower bound on the competitiveness of any randomized algorithm . </S>",
    "<S> some of the techniques may be useful in other contexts . </S>",
    "<S> ( for example , rather than comparing to the unknown optimum , we compared the costs of the online algorithm to the costs of an approximation _ offline _ algorithm ) .    </S>",
    "<S> # 1 # 1    # 1 # 1 # 1    # 1    # 1    [ [ keywords - online - algorithm - approximation - algorithm - video - on - demand ] ] * keywords : online algorithm , approximation algorithm , video - on - demand * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + </S>"
  ]
}