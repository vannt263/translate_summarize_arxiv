{
  "article_text": [
    "decoding techniques , especially when applied to low - density parity - check ( ldpc ) codes , have attracted a great attention recently . in these techniques , decoding is based on a tanner graph determined by a parity - check matrix of the code , which does not necessarily , and typically does not , have full rank .",
    "it is well known that the performance of iterative decoding algorithms in case of binary erasure channels depends on the sizes of the stopping sets associated with the tanner graph representing the code @xcite .",
    "several interesting results on stopping sets associated with tanner graphs of given girths are given in @xcite .",
    "there are more specific results for classes of codes represented by particular tanner graphs , see , e.g. , @xcite , as well as more general results pertaining to ensembles of ldpc codes , see e.g. , @xcite .    in this paper",
    ", we define the notion of dead - end sets to explicitly show the dependency of the performance on the stopping sets .",
    "we then present several results that show how the choice of the parity - check matrix of the code , which determines decoding complexity , affects the stopping and the dead - end sets , which determine decoding performance .",
    "our study differs from the aforementioned studies , but agrees with the studies by schwartz and vardy @xcite , hollmann and tolhuizen @xcite , han and siegel @xcite , and weber and abdel - ghaffar @xcite , in its focus on the relationship between the stopping sets on one hand and the underlying code representation , rather than the code itself , on the other hand .",
    "since linear algebra is used to study this relationship , for our purpose , parity - check matrices are more convenient than the equivalent tanner graphs for code representation .",
    "let @xmath0 be a binary linear @xmath1 $ ] block code , where @xmath2 , @xmath3 , and @xmath4 denote the code s length , dimension , and hamming distance , respectively .",
    "such a code is a @xmath3-dimensional subspace of the space of binary vectors of length @xmath2 , in which any two different elements differ in at least @xmath4 positions .",
    "the set of codewords of @xmath0 can be defined as the null space of the row space of an @xmath5 binary parity - check matrix @xmath6 of rank @xmath7 . assuming all rows in @xmath8 are different , @xmath9 the row space of @xmath8 is the @xmath10 $ ] dual code @xmath11 of @xmath0 .",
    "the support of a binary word @xmath12 is the set @xmath13 and the weight of @xmath14 is the size of its support .",
    "for the zero word @xmath15 , the support is the empty set , @xmath16 , and the weight is zero . since a binary word",
    "@xmath17 is a codeword of @xmath18 if and only if @xmath19 , the parity - check matrix @xmath8 gives rise to @xmath20 parity - check equations , denoted by @xmath21 an equation @xmath22 is said to check @xmath17 in position @xmath23 if and only if @xmath24 .    on the binary erasure channel , each bit of the transmitted codeword",
    "is erased with probability @xmath25 , while it is received correctly with probability @xmath26 , where @xmath27 . for a received word @xmath28 ,",
    "the erasure set is @xmath29 a received word can be decoded unambiguously if and only if it matches exactly one codeword of @xmath0 on all its non - erased positions .",
    "since @xmath0 is a linear code , this is equivalent to the condition that the erasure set @xmath30 does not contain the support of a non - zero codeword .",
    "if @xmath30 does contain the support of a non - zero codeword , then it is said to be _",
    "incorrigible_. a decoder for @xmath0 which achieves unambiguous decoding whenever the erased set is not incorrigible",
    "is said to be optimal for the binary erasure channel .",
    "an exhaustive decoder searching the complete set of codewords is optimal .",
    "however , such a decoder usually has a prohibitively high complexity .",
    "iterative decoding procedures may form a good alternative , achieving close to optimal performance at much lower complexity @xcite , in particular for ldpc codes . here , we consider a well - known algorithm , often expressed in terms of a tanner graph , which exploits the parity - check equations in order to determine the transmitted codeword .",
    "initially , we set @xmath31 and @xmath32 .",
    "if @xmath33 checks @xmath34 in exactly one erased position @xmath35 , then we use ( [ pce ] ) to set @xmath36 and we remove @xmath35 from the erasure set @xmath37 . applying this procedure iteratively , the algorithm terminates if there is no parity - check equation left which checks exactly one erased symbol .",
    "erasure sets for which this is the case have been named _ stopping sets _ @xcite . in case",
    "the final erasure set @xmath37 is empty , the iterative algorithm retrieves all erased symbols , and thus the final word @xmath34 is the transmitted codeword . in case",
    "the final erasure set @xmath38 is a non - empty stopping set , the iterative decoding process is unsuccessful .",
    "the final erasure set @xmath37 is the union of the stopping sets contained in @xmath30 , and thus @xmath37 is empty if and only if @xmath30 contains no non - empty stopping set .",
    "therefore , we introduce the notion of a _",
    "dead - end set _ for an erasure set which contains at least one non - empty stopping set . in summary , on the binary erasure channel , an optimal decoder is unsuccessful if and only if @xmath30 is an incorrigible set , and an iterative decoder is unsuccessful if and only if @xmath30 is a dead - end set .",
    "this paper is organized as follows . in section  [ definition ]",
    "we characterize codeword supports , incorrigible sets , stopping sets , and dead - end sets in terms of a parity - check matrix and derive basic results from this characterization .",
    "we also review results from @xcite and @xcite which are most relevant to this work .",
    "dead - end sets and stopping sets are studied in sections  [ sec ds ] and [ sec ss ] , respectively .",
    "conclusions are presented in section  [ conc ] .",
    "again , let @xmath0 be a linear binary @xmath1 $ ] block code with an @xmath5 binary parity - check matrix @xmath39 of rank @xmath7 .",
    "let @xmath40 be a subset of @xmath41 .",
    "for any @xmath8 and @xmath42 , let @xmath43 denote the @xmath44 submatrix of @xmath45 consisting of the columns indexed by @xmath40 .",
    "a set @xmath42 is the support of a codeword if and only if all rows in @xmath43 have even weight , i.e. , if and only if @xmath46 a set @xmath42 is an incorrigible set if and only if it contains the support of a non - zero codeword . a set @xmath42 is a stopping set for the parity - check matrix @xmath8 if and only if @xmath47 does not contain a row of weight one , i.e. , if and only if @xmath48 hence , the support of any codeword is a stopping set .",
    "a set @xmath49 is a dead - end set for the parity - check matrix @xmath8 if and only if it contains a non - empty stopping set .",
    "the polynomial @xmath50 , where @xmath51 is the number of codewords of weight @xmath52 , is called the _ weight enumerator _ of code @xmath0 .",
    "similarly , @xmath53 , where @xmath54 is the number of incorrigible sets of size @xmath52 , is called the _",
    "incorrigible set enumerator _ of @xmath0 . clearly , @xmath55 and @xmath56 the incorrigible set enumerator satisfies @xmath57 where the last property follows from the observation that any set @xmath42 of size @xmath58 contains the support of a non - zero codeword as the rank of @xmath43 is at most @xmath7 .",
    "the polynomials @xmath59 , where @xmath60 is the number of stopping sets of size @xmath52 , and @xmath61 , where @xmath62 is the number of dead - end sets of size @xmath52 , are called the _ stopping set enumerator _ and the _ dead - end set enumerator _ , respectively , of parity - check matrix @xmath8 . from the observation",
    "that ( [ eqcw ] ) and ( [ eqss ] ) are equivalent for sets @xmath42 with @xmath63 , it follows that @xmath64 in particular , @xmath65 , @xmath66 , and @xmath67 for any parity - check matrix of a code of minimum distance @xmath68 .",
    "let @xmath69 denote the smallest size of a non - empty stopping set ( and thus the smallest size of a dead - end set ) , i.e. , @xmath70 the number @xmath69 is called the stopping distance for the parity - check matrix @xmath8 in @xcite . for any parity - check matrix @xmath8 of a binary linear @xmath1 $ ] block code @xmath0",
    ", it holds that the stopping set enumerator satisfies @xmath71 where the first property follows from ( [ 012 ] ) and ( [ basica ] ) , the second property follows from the definition of @xmath69 , and the third property follows from the fact that the weight of any row in @xmath43 is either @xmath72 or at least equal to @xmath73 for any @xmath42 with @xmath74 .",
    "further , again for any parity - check matrix @xmath8 , it follows from the definitions of the various enumerators , ( [ basici ] ) , and ( [ basics ] ) , that the dead - end set enumerator satisfies @xmath75    for code @xmath18 on the binary erasure channel , the probability of unsuccessful decoding ( ud ) for an optimal ( opt ) decoder is @xmath76 similarly , the probability of unsuccessful decoding for an iterative ( it ) decoder based on parity - check matrix @xmath8 is @xmath77 hence , these two probabilities are completely determined by the incorrigible and dead - end set enumerators .",
    "notice from ( [ popt ] ) and ( [ pit ] ) that iterative decoding is optimal if and only if @xmath78 . at small erasure probabilities , @xmath79 and @xmath80 are dominated by the terms @xmath81 and @xmath82 , respectively . actually , for sufficiently small values of @xmath25 , the parameters @xmath4 and @xmath69 are the most important parameters characterizing the performance of optimal decoding and iterative decoding , respectively . in ( [ 012 ] ) it is stated that if @xmath83 , then @xmath84 .",
    "therefore , @xmath85 for any parity - check matrix @xmath8 of a code with @xmath86 , which is derived as theorem  3 in @xcite . here , we show that this can not be extended further .",
    "[ badh ] for any code @xmath0 with hamming distance @xmath87 , there exists a parity - check matrix @xmath8 for which @xmath88 .",
    "we may order the positions so that @xmath0 has a codeword composed of @xmath4 ones followed by @xmath89 zeros .",
    "in particular , the first @xmath4 columns in any given parity - check matrix of @xmath0 are linearly dependent , but no @xmath90 columns are such .",
    "the row space of the submatrix composed of these first @xmath4 columns has dimension @xmath90 and a sequence of length @xmath4 belongs to this row space if and only if its weight is even . by elementary row operations , we can obtain a parity - check matrix of the form @xmath91 for some matrices @xmath92 and @xmath93 of appropriate sizes , where @xmath94 is the @xmath95 matrix given by @xmath96 clearly , @xmath97 is a stopping set for @xmath8 as no row of @xmath43 has weight one .",
    "contrary to the weight enumerator and the incorrigible set enumerator , which are fixed for a code @xmath0 , the stopping and dead - end set enumerators depend on the choice of the parity - check matrix @xmath8 .",
    "theorem  [ badh ] shows that no matter how large the hamming distance of the code is , a bad choice of the parity - check matrix may lead to very poor performance .",
    "therefore , it is important to properly select the parity - check matrix of a code when applying iterative decoding .",
    "clearly , adding rows to a parity - check matrix does not increase any coefficient of the stopping set enumerator or the dead - end set enumerator . on the contrary",
    ", these coefficients may actually decrease at the expense of higher decoding complexity .",
    "the rows to be added should be in the dual code @xmath98 of @xmath99 . by having all @xmath100 codewords in @xmath98 as rows ,",
    "we obtain a parity - check matrix that gives the best possible performance , but also the highest complexity , when applying iterative decoding .",
    "since the order of the rows does not affect the decoding result , we refer to such matrix , with some ordering imposed on its rows which is irrelevant to our work , as the complete parity - check matrix of the code @xmath0 , and denote it by @xmath101 .",
    "its stopping set enumerator is denoted by @xmath102 , its dead - end set enumerator by @xmath103 , and its stopping distance by @xmath104 .",
    "since the support of any codeword is a stopping set for any parity - check matrix , we have @xmath105 consequently , @xmath106 , and @xmath107 and @xmath108 are called the code s optimal stopping set enumerator and optimal dead - end set enumerator , respectively . schwartz and",
    "vardy @xcite have shown that @xmath109 and the results derived recently by hollmann and tolhuizen @xcite imply , in addition , that @xmath110 and @xmath111    actually , schwartz and vardy @xcite have shown that , for @xmath68 , it is possible to construct a parity - check matrix with at most @xmath112 rows for which @xmath85 .",
    "they also obtain interesting results on the minimum number of rows in a parity - check matrix for which @xmath85 .",
    "they obtain general bounds on this minimum number , which they call the stopping redundancy , as well as bounds for specific codes such as the golay code and reed - muller codes .",
    "han and siegel @xcite derived another general upper bound on the stopping redundancy for @xmath113 given by @xmath114 .",
    "hollmann and tolhuizen @xcite specified rows that can be formed from any @xmath115 parity - check matrix of rank @xmath7 to yield a parity - check matrix for which @xmath116 for @xmath117 , where @xmath118 is any given integer such that @xmath119 .",
    "they have shown that the number of rows in the smallest parity - check matrix achieving this is at most @xmath120    [ ex1 ] let @xmath0 be the @xmath121 $ ] reed - muller code .",
    "one of the parity - check matrices of @xmath0 is @xmath122 for @xmath123 , deleting the last @xmath124 rows in @xmath125 still gives a parity - check matrix @xmath126 for the code @xmath0 .",
    "table  i gives the stopping set enumerator @xmath127 and the dead - end set enumerator @xmath128 for the parity - check matrix @xmath126 for @xmath129 , @xmath130 , and @xmath131 .",
    "the table also gives @xmath107 and @xmath108 corresponding to the complete parity - check matrix @xmath101 , and the weight enumerator @xmath132 and the incorrigible set enumerator @xmath133 .",
    "we point out that the matrix @xmath134 is a frequently used full rank matrix for this code . for this matrix @xmath88 .",
    "the matrix @xmath135 is the matrix proposed by schwartz and vardy @xcite to achieve @xmath136 .",
    "for this matrix @xmath137 .",
    "the matrix @xmath125 is constructed based on the techniques proposed by hollmann and tolhuizen to achieve @xmath138 . for later purposes",
    ", we also define the matrix @xmath139 whose rows are the fourteen non - zero codewords in @xmath140 of weight four .",
    "the stopping set enumerator and the dead - end set enumerator for this parity - check matrix are also listed in the table .",
    "in this section , we investigate parity - check matrices for which the iterative decoding procedure achieves optimal performance , i.e. , for which @xmath142 in order to satisfy ( [ sisdcor ] ) , it is necessary and sufficient that the dead - end set enumerator equals the incorrigible set enumerator , i.e. , @xmath78 . from ( [ dstar ] ) , we know that this is the case for the complete parity - check matrix , which contains @xmath100 rows . however , from a decoding complexity point of view , it may be desirable or required to reduce the number of rows in the parity - check matrix .",
    "hence , an interesting research challenge is to find a parity check matrix @xmath8 for code @xmath0 , with a minimum number of rows , but still having @xmath78 .",
    "as stated before , it is shown in @xcite that there exists a parity - check matrix @xmath8 with at most @xmath143 rows for which @xmath116 , @xmath144 , for any @xmath145 . by taking @xmath146 and noticing that @xmath116 for @xmath147 from ( [ basici ] ) and ( [ basicd ] )",
    ", we deduce the following result .",
    "[ holtol ] let @xmath0 be an @xmath1 $ ] binary linear code with @xmath148 .",
    "then , there exists a parity - check matrix with at most @xmath149 rows for which @xmath78 .",
    "hollmann and tolhuizen also show that for some codes , and in particular for hamming codes , @xmath150 for any parity - check matrix with less than @xmath149 rows .",
    "however , depending on the code , it may be possible to reduce the number of rows in a parity - check matrix for which @xmath78 below @xmath149 as we show next .",
    "[ di1 ] let @xmath8 be the matrix whose rows are the non - zero codewords in @xmath151 of weight at most @xmath152 .",
    "then , @xmath8 is a parity - check matrix for @xmath0 and for this matrix @xmath78 .",
    "let @xmath92 be an @xmath115 parity - check matrix for the code @xmath0 .",
    "then , there is a subset @xmath40 of @xmath41 of size @xmath7 such that @xmath153 is an @xmath154 matrix of rank @xmath7 .",
    "the row space of this matrix contains every unit weight vector of length @xmath7 .",
    "therefore , the row space of @xmath92 contains @xmath7 vectors such that each vector has exactly a single one in a unique position indexed by an element in @xmath40 .",
    "since these vectors have weight at most @xmath152 and are linearly independent , it follows that @xmath8 , which contains all of them as rows , has rank @xmath7 and is indeed a parity - check matrix for @xmath0 .",
    "next , we prove that for this matrix @xmath78 , i.e. , @xmath116 for @xmath155 . from ( [ 012 ] ) , ( [ basici ] ) , and ( [ basicd ] ) , it suffices to show that @xmath116 for @xmath156 .",
    "for such an @xmath52 , assume that @xmath157 is a subset of @xmath41 of size @xmath52 which does not contain the support of a non - zero codeword .",
    "then , the columns of the @xmath115 parity - check matrix @xmath92 indexed by the elements in @xmath158 are linearly independent .",
    "as @xmath92 has rank @xmath7 , there is a set @xmath159 such that @xmath160 and @xmath161 is an @xmath154 matrix of rank @xmath7 . from the argument given in the first part of this proof",
    ", @xmath45 contains @xmath7 vectors such that each vector has exactly a single one in a unique position indexed by an element in @xmath159 , and in particular each vector has weight at most @xmath152 .",
    "the existence of any one of the @xmath52 vectors with a single one in a position indexed by an element in @xmath157 proves that @xmath157 is not a stopping set for @xmath45 .",
    "we conclude that every stopping set of size @xmath52 for @xmath8 contains the support of a non - zero codeword .",
    "hence , @xmath116 for all @xmath52 .",
    "let @xmath162 denote the well - known binary entropy function @xmath163 for @xmath164 .",
    "[ dopt ] let @xmath0 be an @xmath1 $ ] binary linear code with @xmath165 .",
    "then , there exists a parity - check matrix with at most @xmath166 rows for which @xmath78 .    from the bounds on the sum of binomial coefficients",
    "as presented on page 310 of @xcite , it follows that the number of codewords in the dual code of weight less than or equal to @xmath152 is at most equal to @xmath166 .",
    "hence , the result follows from theorem  [ di1 ] .",
    "note that the bound from theorem  [ dopt ] improves upon the bound from theorem  [ holtol ] for low - rate codes .",
    "as stated earlier , iterative decoding based on a parity - check matrix is optimal , in the sense of having the smallest possible unsuccessful decoding probability on the binary erasure channel , if and only if @xmath128 for this matrix is identical to @xmath133 for code @xmath0 .",
    "this holds for the complete parity - check matrix as well as other matrices , whose sizes are bounded in section  [ sec ds ] . for @xmath128 to be identical to @xmath133 , we should have @xmath85 and @xmath167 .",
    "table  i shows that it is possible to achieve optimal decoding using parity - check matrices , such as @xmath125 , with much smaller number of rows than in the complete parity - check matrix @xmath101 .",
    "this is true in spite of the fact that these smaller matrices have stopping set enumerators that are different from @xmath107 .",
    "we may wonder then what is the effect , if any , of the stopping set coefficients @xmath60 for @xmath168 on performance .",
    "notice that in this paper we defined the probability of unsuccessful decoding as the probability that the decoder fails to retrieve the transmitted codeword .",
    "although an iterative decoder is unsuccessful in case the erasure set is a dead - end set , it still succeeds in retrieving those erased bits whose indices do not belong to any of the stopping sets contained in the erasure set .",
    "therefore , it may be desirable to choose parity - check matrices for which @xmath84 not only for @xmath169 but also for @xmath168 . since @xmath170 in example  [ ex1 ]",
    ", it follows that this is not possible in general .",
    "in fact , theorem  [ thmsstara ] will show that @xmath171 only for a rather degenerate class of codes .",
    "hence , the best that we may hope for is to have parity - check matrices , smaller than the complete parity - check matrix to reduce complexity , for which @xmath172 .",
    "the matrix @xmath173 , specified in theorem  [ di1 ] , is one such matrix for the @xmath121 $ ] reed - muller code .",
    "actually , it can be checked that this is the smallest parity - check matrix for this code satisfying @xmath172 .",
    "[ ex2 ] let @xmath18 be the @xmath121 $ ] reed - muller code considered in example  [ ex1 ] . from table",
    "i , we notice that the iterative decoders based on @xmath101 , @xmath173 , and @xmath125 achieve the smallest possible probability of unsuccessful decoding , while the iterative decoders based on @xmath134 and @xmath135 do not .",
    "although @xmath173 is larger than @xmath174 and both achieve the maximum successful decoding probability , there are advantages in using @xmath173 instead of @xmath125 .",
    "for instance , suppose that the erasure set is @xmath175 .",
    "this erasure set is an incorrigible set since it contains @xmath176 which is the support of a non - zero codeword in the code .",
    "therefore , any decoding method fails in retrieving the transmitted codeword .",
    "however , iterative decoding based on @xmath173 succeeds in determining the erased bit @xmath177 from the parity - check equation @xmath178 since @xmath179 is a row in @xmath173 . on the other hand ,",
    "iterative decoding based on @xmath125 does not succeed in retrieving any of the erased bits .",
    "actually , since the coefficient of @xmath180 in the stopping set enumerator of @xmath173 is zero , it follows that if the erasure set is a dead - end set of size five , it is always possible to retrieve one of the erased bits using @xmath173 .",
    "this is not true if matrix @xmath125 is used instead .",
    "we will show that the range @xmath181 specified by ( [ 012 ] ) for which @xmath84 can be considerably extended in case @xmath8 is the complete parity - check matrix @xmath101 .",
    "first we start with two lemmas .",
    "[ ldi0 ] for any non - empty set @xmath182 which does not contain the support of a non - zero codeword , each binary vector of length @xmath183 appears exactly @xmath184 times as a row in @xmath185 .    since @xmath42",
    "does not contain the support of a non - zero codeword , the @xmath186 matrix @xmath185 has rank @xmath183 .",
    "hence , there are @xmath183 linearly independent rows in @xmath185 . the linear combinations of these @xmath183 rows generate the space of all binary vectors of length @xmath183 , and thus each of these @xmath187 vectors appears exactly @xmath188 times as a row in @xmath185 .",
    "[ ldi1 ] for any set @xmath182 which contains exactly one support @xmath157 of a non - zero codeword , each binary vector of length @xmath183 , with even weight on the positions indexed by @xmath157 and any weight on the positions indexed by @xmath189 , appears exactly @xmath190 times as a row in @xmath185 .",
    "since @xmath42 contains exactly one support @xmath157 of a non - zero codeword , the @xmath186 matrix @xmath191 has rank @xmath192 .",
    "hence , there are @xmath192 linearly independent rows in @xmath193 . the linear combinations of these @xmath192 rows generate the space of all binary vectors of length @xmath183 with even weight on the positions indexed by @xmath157 and any weight on the positions indexed by @xmath189 , and thus each of these @xmath194 vectors appears exactly @xmath195 times as a row in @xmath193 .",
    "[ shs ] for any code , @xmath196 i.e. , the enumerators @xmath107 and @xmath132 are equal in at least the first @xmath197 coefficients .",
    "since the result is trivial for @xmath198 , we may assume @xmath199 .",
    "suppose that @xmath42 is a stopping set of size @xmath52 for @xmath101 , which is not the support of a codeword .",
    "this set @xmath42 contains at most one support of a non - zero codeword , since it follows from the griesmer bound @xcite that any linear code of dimension greater than @xmath200 and hamming distance at least @xmath4 has a length of at least @xmath201 .",
    "it follows from lemmas  [ ldi0 ] and [ ldi1 ] that @xmath185 contains at least one row of weight one .",
    "together with ( [ eqss ] ) , we reach a contradiction to the assumption that @xmath42 is a stopping set for @xmath101 .",
    "hence , any stopping set of size @xmath52 for @xmath101 is the support of a codeword . in conclusion ,",
    "@xmath202 , and together with ( [ si ] ) we obtain the result presented in ( [ sis ] ) .    in the remainder of this section",
    ", we give a complete characterization of codes that have parity - check matrices for which @xmath203 , i.e. , codes with parity - check matrices for which every stopping set is a support of a codeword . for convenience ,",
    "such codes are called minimum stopping . from ( [ si ] ) , we conclude that a code is minimum stopping if and only if its optimal stopping set enumerator equals its weight enumerator , i.e. , @xmath171 .",
    "we start by giving three classes of codes satisfying this condition .",
    "\\(i ) @xmath204 is the @xmath205 $ ] repetition code consisting of the all - zero and all - one vectors of length @xmath2 . from theorem  [ shs ]",
    ", it follows that @xmath206 for @xmath155 . hence , @xmath207 , @xmath208 , and @xmath209 for @xmath210 .",
    "\\(ii ) @xmath211 is the @xmath212 $ ] full - code consisting of all binary vectors of length @xmath2 .",
    "clearly , @xmath213 for @xmath155 .",
    "\\(iii ) @xmath214 is the @xmath215 $ ] zero - code consisting of one codeword only , which is the all - zero vector of length @xmath2 .",
    "since all vectors of length @xmath2 , including those of weight one , belong to the complete parity - check matrix of the code , it follows that @xmath209 for @xmath216 , and @xmath207 .",
    "next , we introduce a useful notation . for @xmath217 ,",
    "let @xmath218 be a binary linear @xmath219 $ ] block code .",
    "then , we define @xmath220 i.e. , @xmath221 is the set of all sequences obtained by juxtaposing codewords in @xmath222 in this order . clearly , @xmath221 is an @xmath223 $ ] binary linear block code .    finally , recall that two codes are equivalent if there is a fixed permutation of indices that maps one to the other @xcite , and that a code is said to have no zero - coordinates if and only if there is no index @xmath224 such that @xmath225 for every codeword @xmath226 .",
    "[ lem ccct ] the code @xmath221 is minimum stopping if and only if @xmath218 is minimum stopping for all @xmath227 .",
    "first , notice that the code @xmath228 has a block diagonal parity check matrix @xmath229 defined by @xmath230 where @xmath126 is a parity check matrix for @xmath218 .",
    "the complete parity - check matrix @xmath101 of @xmath0 has all elements of the row space of the matrix from ( [ hoh ] ) as its rows .",
    "next , let @xmath42 be a subset of @xmath231 . for @xmath217 ,",
    "define @xmath232 then , it follows from ( [ cct ] ) that @xmath42 is the support of a codeword in @xmath233 if and only if @xmath234 is the support of a codeword in @xmath218 for all @xmath217 .",
    "further , @xmath40 is a stopping set for @xmath101 if and only if @xmath234 is a stopping set for @xmath235 for all @xmath217 .",
    "this follows from the fact that a sequence @xmath236 is a row in @xmath101 if and only if it can be written as @xmath237 where @xmath238 is a row in @xmath235 for all @xmath217 .",
    "hence , a sequence @xmath236 is a row in @xmath239 if and only if it can be written as @xmath240 where @xmath238 is a row in @xmath241 for all @xmath217 .",
    "if for some @xmath217 , @xmath234 is not a stopping set for @xmath235 , then @xmath241 has a row of weight one .",
    "juxtaposing this row with the all - zero rows in @xmath242 , for all @xmath243 , gives a row in @xmath185 of weight one .",
    "this implies that @xmath244 is not a stopping set for @xmath101 . on the other hand , if for all @xmath217 , @xmath234 is a stopping set for @xmath235 , then for all @xmath52 , @xmath245 has no row of weight one . juxtaposing rows of weights other than one yields a row of weight other than one",
    "hence , @xmath42 is a stopping set for @xmath101 .",
    "we conclude that @xmath42 is a stopping set for @xmath101 which is the support of a codeword in @xmath246 if and only if , for all @xmath217 , @xmath234 is a stopping set for @xmath247 which is the support of a codeword in @xmath218 .",
    "hence , @xmath221 is minimum stopping if and only if , for all @xmath217 , @xmath248 is minimum stopping .",
    "[ lem_4 ] let @xmath0 be a minimum stopping binary linear @xmath1 $ ] block code with @xmath113 and no zero - coordinates .",
    "if @xmath249 , then @xmath18 is @xmath204 .",
    "otherwise , @xmath250 and @xmath0 is equivalent to @xmath251 for some binary linear @xmath252 $ ] block code @xmath253 with @xmath254 and no zero - coordinates .",
    "up to equivalence , we may assume that @xmath0 has a codeword composed of @xmath4 ones followed by @xmath89 zeros .",
    "in particular , the first @xmath4 columns in any given parity check matrix of @xmath0 are linearly dependent , but no @xmath90 columns are such .",
    "the row space of the submatrix composed of these first @xmath4 columns has dimension @xmath90 and a sequence of length @xmath4 belongs to this row space if and only if its weight is even .",
    "therefore , in case @xmath249 , @xmath0 has a full - rank @xmath95 parity check matrix of the form @xmath255 which shows that @xmath0 is the repetition code of length @xmath2 .",
    "further , in case @xmath256 , @xmath0 has a full - rank @xmath257 parity check matrix of the form @xmath258 where @xmath92 and @xmath93 are @xmath259 and @xmath260 matrices , respectively .",
    "notice that @xmath261 has at least one row since @xmath262 by the singleton bound and if equality holds with @xmath263 , then @xmath0 is the even weight code of length @xmath264 which has @xmath265 as a stopping set for @xmath101 which is not the support of a codeword .",
    "this contradicts the assumption that @xmath0 is minimum stopping . clearly , @xmath93 is a matrix of rank @xmath266 since @xmath45 in ( [ eq_lem31 ] ) is a full - rank matrix . if @xmath267 , then @xmath93 has rank @xmath89 and @xmath18 has zero - coordinates .",
    "therefore , @xmath250 . to complete the proof , it suffices to show that the row space of @xmath92 is a subspace of the row space of @xmath93 since , in this case , by elementary row operations , @xmath0 has a parity - check matrix @xmath268 and thus @xmath269 where @xmath253 is the code with parity check matrix @xmath93 .",
    "this code has length @xmath89 , dimension @xmath270 , and hamming distance @xmath271 with no zero - coordinates . now ,",
    "suppose , to get a contradiction , that the above is not true , i.e. , the row space of @xmath92 is not a subspace of the row space of @xmath93 .",
    "then , the null space of @xmath93 is not a subspace of the null space of @xmath92 .",
    "let @xmath272 be a vector of length @xmath89 which belongs to the null space of @xmath93 but not to the null space of @xmath92 .",
    "up to equivalence , we may assume that @xmath272 is composed of @xmath273 ones followed by @xmath274 zeros , where @xmath273 , @xmath275 , is the weight of @xmath272 .",
    "we claim that @xmath276 is a stopping set for @xmath101 which is not the support of a codeword in @xmath18 . from ( [ eq_lem31 ] )",
    ", we have @xmath277 notice that any nontrivial linear combination of the rows of @xmath278 yields a non - zero vector of even weight .",
    "furthermore , since @xmath272 , which starts with @xmath273 ones followed by @xmath274 zeros , is in the null space of @xmath93 , it follows that any linear combination of the rows of @xmath279 yields an even weight vector .",
    "we conclude that no linear combination of the rows of @xmath280 yields a vector of weight one .",
    "hence , @xmath276 is a stopping set for @xmath101 .",
    "next , notice that if @xmath276 is the support of a codeword in @xmath0 , then the columns in @xmath280 in ( [ eq_lem32 ] ) should add up to zero . from ( [ eq_pcmr ] ) , we know that the first @xmath4 columns add up to zero",
    ". therefore , the columns of @xmath281 should add up to the zero .",
    "however , this can not be the case as @xmath272 , which starts with @xmath273 ones followed by @xmath274 zeros , is not in the null space of @xmath92 .",
    "in conclusion , we have shown that @xmath276 is a stopping set for @xmath101 which is not the support of a codeword in @xmath18 .",
    "this contradicts the fact that @xmath18 is minimum stopping .",
    "[ lem_5 ] if @xmath0 is a minimum stopping binary linear @xmath1 $ ] block code with @xmath113 and no zero - coordinates , then @xmath18 is equivalent to @xmath282 for some integers @xmath283 and @xmath284 such that @xmath285 .",
    "the lemma trivially holds for all codes of lengths two or less .",
    "we use induction and assume that it holds for all codes of length less than @xmath2 . from lemma  [ lem_4 ]",
    ", we know that either @xmath286 is equivalent to @xmath204 , which is consistent with the statement of the lemma , or @xmath250 and @xmath0 is equivalent to @xmath251 for some binary linear @xmath252 $ ] block code @xmath253 with @xmath287 and no zero - coordinates . from lemma  [ lem ccct ] , we know that @xmath288 is a minimum stopping code .",
    "since @xmath253 has length @xmath289 , it follows from the induction hypothesis that @xmath288 is equivalent to @xmath290 , for some integers @xmath291 and @xmath292 such that @xmath293 .",
    "then , @xmath251 has the same form as given in the lemma .",
    "[ thmsstara ] a binary linear @xmath1 $ ] block code @xmath0 is minimum stopping , i.e. , satisfies @xmath171 , if and only if it is equivalent to @xmath294 for some nonnegative integers @xmath295 and @xmath296 , where @xmath297 and @xmath298 .    in the theorem",
    ", we allow @xmath299 in which case @xmath0 is equivalent to @xmath300 .",
    "we also allow @xmath301 and/or @xmath302 , in which case the corresponding code with length zero disappears from @xmath303 .",
    "the `` if''-part of the theorem follows from lemma  [ lem ccct ] and the observations that the @xmath171 property holds for any repetition code @xmath304 , the full - code @xmath305 , and the zero - code @xmath306 .",
    "next , we proof the `` only if''-part of the theorem . up to equivalence , we may assume that @xmath307 , where @xmath308 is the number of zero - coordinates of @xmath0 , @xmath309 is the number of codewords of weight one in @xmath0 , i.e. , the number of all - zero columns in any parity check matrix of @xmath0 , and @xmath310 is a binary linear code of length @xmath311 with @xmath113 and no zero - coordinates .",
    "here we assume that if @xmath311 , @xmath309 , or @xmath308 equal zero , then the corresponding code disappears from @xmath312 .",
    "if @xmath313 does not disappear , then it can be written as stated in lemma  [ lem_5 ] .",
    "in this paper , we examined how the performance of iterative decoding when applied to a binary linear block code over an erasure channel depends on the parity - check matrix representing the code .",
    "this code representation determines the complexity of the decoder .",
    "we have shown that there is a trade - off between performance and complexity .",
    "in particular , we have shown that , regardless of the choice of the parity - check matrix , the stopping set enumerator differs from the weight enumerator except for a degenerate class of codes . in spite of that , it is always possible to choose parity - check matrices for which the dead - end set enumerator equals the incorrigible set enumerator .",
    "iterative decoding based on such matrices is optimal , in the sense that it gives the same probability of unsuccessful decoding on the binary erasure channel as an exhaustive decoder .",
    "we presented bounds on the number of rows in parity - check matrices with optimal dead - end set enumerators , thus bounding the complexity of iterative decoding achieving optimal performance .",
    "d. burshtein and g. miller , `` asymptotic enumeration methods for analyzing ldpc codes , '' _ ieee trans .",
    "inform . theory _",
    "11151131 , june 2004 .",
    "c. di , d. proietti , i.e. telatar , t.j .",
    "richardson , and r.l .",
    "urbanke , `` finite - length analysis of low - density parity - check codes on the binary erasure channel , '' _ ieee trans .",
    "inform . theory _",
    "48 , no . 6 , pp .",
    "1570 - 1579 , june 2002 .",
    "h. d. l. hollmann and l. m. g. m. tolhuizen .",
    "( 2005 , july ) . on parity check collections for iterative erasure decoding that correct all correctable erasure patterns of a given size .",
    "arxiv : cs.it/0507068 .",
    "[ online ] .",
    "r. ikegaya , k. kasai , t. shibuya , and k. sakaniwa , `` asymptotic weight and stopping set distributions for detailedly represented irregular ldpc code ensembles , '' proceedings of the ieee international symposium on information theory , chicago , usa , p. 208",
    ", june 27 - july 2 , 2004 .",
    "n. kashyap and a. vardy , `` stopping sets in codes from designs , '' proceedings of the ieee international symposium on information theory , yokohama , japan , p. 122",
    ", june 29 - july 4 , 2003 .",
    "c. kelley , d. sridhara , j. xu , and j. rosenthal , `` pseudocodeword weights and stopping sets , '' proceedings of the ieee international symposium on information theory , chicago , usa , p. 67",
    ", june 27 - july 2 , 2004 .",
    "a. orlitsky , r. urbanke , k. viswanathan , and j. zhang , `` stopping sets and the girth of tanner graphs , '' proceedings of the ieee international symposium on information theory , lausanne , switzerland , p. 2",
    ", june 30 - july 5 , 2002 .",
    "j. h. weber and k. a. s. abdel - ghaffar , `` stopping set analysis for hamming codes , '' proceedings of the information theory workshop on coding and complexity , rotorua , new zealand , pp .",
    "244247 , august 28september 1 , 2005 ."
  ],
  "abstract_text": [
    "<S> the performance of iterative decoding techniques for linear block codes correcting erasures depends very much on the sizes of the stopping sets associated with the underlying tanner graph , or , equivalently , the parity - check matrix representing the code . in this paper , we introduce the notion of dead - end sets to explicitly demonstrate this dependency . </S>",
    "<S> the choice of the parity - check matrix entails a trade - off between performance and complexity . </S>",
    "<S> we give bounds on the complexity of iterative decoders achieving optimal performance in terms of the sizes of the underlying parity - check matrices . </S>",
    "<S> further , we fully characterize codes for which the optimal stopping set enumerator equals the weight enumerator .    </S>",
    "<S> dead - end set , iterative decoding , linear code , parity - check matrix , stopping set . </S>"
  ]
}