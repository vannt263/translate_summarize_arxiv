{
  "article_text": [
    "the rotor - router model is a deterministic analogue of random walk , first defined by priezzhev et al .  under the name `` eulerian walkers '' @xcite and popularized more recently by jim propp @xcite . to define rotor - router walk on a tree @xmath3 , for each vertex of @xmath3 we choose a cyclic ordering of its neighbors .",
    "each vertex is assigned a `` rotor '' which points to one of the neighboring vertices .",
    "a chip walks on the vertices of @xmath3 according to the following rule : when the chip reaches a vertex @xmath4 , the rotor at @xmath4 rotates to point to the next neighbor in the ordering , and the chip steps in direction of the newly rotated rotor . in _ rotor - router aggregation _ , we grow a cluster of points in @xmath3 by repeatedly starting chips at a fixed vertex @xmath5 and letting them walk until they exit the cluster . beginning with @xmath6 , define the cluster @xmath7 inductively by @xmath8 where @xmath9 is the endpoint of a rotor - router walk started at @xmath5 and stopped on first exiting @xmath10 .",
    "we do not change the positions of the rotors when adding a new chip .",
    "thus the sequence @xmath11 depends only on the choice of the initial rotor configuration .",
    "recent interest has focused on rotor - router aggregation in the integer lattice @xmath12 .",
    "jim propp noticed from simulations in @xmath13 that the shape @xmath7 is extremely close to circular , and asked why this was so @xcite . the spherical shape of @xmath7 in @xmath12 is proved in @xcite . here",
    "we prove an analogous result for rotor - router aggregation on the infinite @xmath14-regular tree .",
    "we say that a rotor configuration is _ acyclic _ if the rotors form no oriented cycles . on a tree , this condition is equivalent to forbidding oriented cycles of length  2 : there is no pair of neighboring vertices @xmath15 such that both the rotor at @xmath16 points to @xmath17 and the rotor at @xmath17 points to @xmath16 . as the following result shows ,",
    "provided we start with an acyclic rotor configuration , the occupied cluster @xmath7 is a perfect ball for suitable values of @xmath18 .",
    "[ aggregintro ] let @xmath3 be the infinite @xmath14-regular tree , @xmath19 , and let @xmath20 be the ball of radius @xmath21 centered at the origin @xmath22 , where @xmath23 is the number of edges in the path from @xmath5 to @xmath16 .",
    "write @xmath24 let @xmath7 be the region formed by rotor - router aggregation in @xmath3 , starting from @xmath18 chips at @xmath5 . if the initial rotor configuration is acyclic , then @xmath25    the proof of theorem  [ aggregintro ] uses the _ sandpile group _ of a wired regular tree ( that is , a finite regular tree with the leaves collapsed to a single vertex , and an edge added from the root to this vertex ) , whose structure was found in @xcite . in section  2",
    "we define the _ rotor - router group _ of a graph and show that it is isomorphic to the sandpile group .",
    "we then use this isomorphism in section  3 to prove theorem  [ aggregintro ] .",
    "much previous work on the rotor - router model has taken the form of comparing the behavior of rotor - router walk with the expected behavior of random walk .",
    "for example , cooper and spencer @xcite show that for any configuration of chips on even lattice sites in @xmath12 , letting each chip perform rotor - router walk for @xmath18 steps results in a configuration that differs by only constant error at each point from the expected configuration had the chips performed independent random walks . in section  4 , we continue in this vein by investigating the recurrence and transience of rotor - router walk on trees .",
    "a walk which never returns to the origin visits each vertex only finitely many times , so the positions of the rotors after a walk has escaped to infinity are well - defined .",
    "we construct two `` extremal '' rotor configurations on the infinite ternary tree , one for which walks exactly alternate returning to the origin with escaping to infinity , and one for which every walk returns to the origin .",
    "the latter behavior is something of a surprise : to our knowledge it represents the first example of rotor - router walk behaving fundamentally differently from the expected behavior of random walk .    in between these two extreme cases , a variety of intermediate behaviors are possible .",
    "we say that a binary word @xmath0 is an _ escape sequence _ for the infinite ternary tree if there exists an initial rotor configuration on the tree so that the @xmath1-th chip escapes to infinity if and only if @xmath2 . the following result characterizes all possible escape sequences on the ternary tree .",
    "let @xmath26 be a binary word . for @xmath27 write @xmath28 .",
    "then @xmath29 is an escape sequence for some rotor configuration on the infinite ternary tree if and only if for each @xmath30 and each @xmath31 , every subword of @xmath32 of length @xmath33 contains at most @xmath34 ones .",
    "we conclude in section  5 with an open question about the transience of rotor - router walk in @xmath12 for @xmath35 .",
    "in this section we define the _ rotor - router group _ of a graph and show it is isomorphic to the sandpile group .",
    "the definition of the sandpile group is recalled below . in the next section we use this isomorphism together with the results of @xcite to study the rotor - router aggregation model on a regular tree .",
    "the isomorphism between the rotor - router and sandpile groups , theorem  [ groupisom ] , is mentioned in the physics literature ; see @xcite . to our knowledge the details of the proof are not written down anywhere . while our main focus is on the tree ,",
    "the isomorphism is just as easily proved for general graphs , and it seems to us worthwhile to record the general proof here .",
    "let @xmath36 be a strongly connected finite directed graph , which may have multiple edges but not loops . fix a vertex @xmath37 in @xmath36 and",
    "call it the sink . to define rotor - router",
    "walk on @xmath36 , for each vertex @xmath38 we fix a cyclic ordering of the edges emanating from @xmath16 . a _ rotor configuration _",
    "@xmath3 on @xmath36 assigns to each non - sink vertex @xmath16 an edge @xmath39 emanating from @xmath16 .",
    "each step of the walk then consists of two parts : if the chip is located at @xmath16 , we first increment the rotor @xmath39 to the next edge in the ordering of the edges emanating from  @xmath16 , and then move the chip along this new edge . given a rotor configuration  @xmath3 , write @xmath40 for the rotor configuration resulting from starting a chip at @xmath16 and letting it walk according to the rotor - router rule until it reaches the sink .",
    "( note that if the chip visits a vertex infinitely often , it visits all of its outbound neighbors infinitely often ; since @xmath36 is strongly connected , the chip eventually reaches the sink . )    the set of edges @xmath41 in a rotor configuration forms a spanning subgraph of @xmath36 in which every vertex except the sink has out - degree one .",
    "if this subgraph contains no directed cycles ( equivalently , no cycles ) , we call it an _ oriented spanning tree _ of @xmath36",
    ". write @xmath42 for the set of oriented spanning trees of @xmath36 .",
    "note that as we have defined them , oriented spanning trees are always rooted at the sink ( i.e. , all paths in the tree lead to the sink ) .    if @xmath43 , then @xmath44 .",
    "let @xmath45 be any collection of vertices of @xmath36 .",
    "if the chip started at @xmath16 reaches the sink without ever visiting @xmath45 , then the rotors at vertices in @xmath45 point the same way in @xmath40 as they do in @xmath3 , so they do not form an oriented cycle . if the chip does visit @xmath45 ,",
    "let @xmath46 be the last vertex it visits .",
    "then either @xmath47 , or the rotor at @xmath17 points to a vertex not in @xmath45 ; in either case , the rotors at vertices in @xmath45 do not form an oriented cycle .",
    "we will need slightly more refined information about the intermediate states that occur before the chip falls into the sink .",
    "these states may contain oriented cycles , but only of a very restricted form . for a vertex @xmath16",
    "we write @xmath48 for the set of rotor configurations @xmath49 such that    * @xmath49 contains an oriented cycle ; and * if the rotor @xmath50 is deleted , the resulting subgraph contains no oriented cycles .",
    "[ cyclecriterion ] starting from a rotor configuration @xmath51 with a chip at @xmath52 , let @xmath53 and @xmath54 be the rotor configuration and chip location after @xmath1 steps of rotor - router walk . then    * if @xmath55 , then @xmath56",
    ". * if @xmath57 , then @xmath58 .",
    "\\(i ) it suffices to show that any oriented cycle in  @xmath53 contains  @xmath54 .",
    "let  @xmath45 be any set of vertices of  @xmath36 not containing  @xmath54 .",
    "if  @xmath45 is disjoint from @xmath59 , then the rotors at vertices in  @xmath45 point the same way in  @xmath53 as they do in  @xmath60 , so they do not form an oriented cycle .",
    "otherwise , let @xmath46 be the vertex visited latest before time  @xmath1 .",
    "the rotor  @xmath61 points to a vertex not in  @xmath45 , so the rotors at vertices in  @xmath45 do not form an oriented cycle .    \\(ii ) suppose @xmath62 .",
    "let  @xmath63 , and for @xmath64 let  @xmath65 be the target of the rotor  @xmath66 .",
    "then the last exit from  @xmath54 before time  @xmath1 was to  @xmath67 , and by induction if @xmath68 are different from  @xmath54 , then  @xmath69 was visited before time  @xmath1 , and the last exit from  @xmath69 before time  @xmath1 was to  @xmath70 .",
    "it follows that  @xmath71 for some  @xmath72 , and hence  @xmath53 contains an oriented cycle .",
    "if @xmath73 and @xmath74 , then @xmath75 .    we will show that any @xmath76 can be recovered from @xmath40 by reversing one rotor step at a time .",
    "given rotor configurations @xmath77 and vertices @xmath78 , we say that @xmath79 is a predecessor of @xmath80 if a chip at @xmath81 with rotors configured according to @xmath82 would move to @xmath17 in a single step with resulting rotors configured according to @xmath49 .",
    "given @xmath49 and @xmath17 , for each neighbor @xmath83 of @xmath17 whose rotor @xmath84 points to @xmath17 , there is a unique predecessor of the form @xmath85 , which we will denote @xmath86 .",
    "suppose @xmath80 is an intermediate state in the evolution from @xmath3 to @xmath40 .",
    "if @xmath87 , then by case ( i ) of lemma  [ cyclecriterion ] there is a cycle of rotors @xmath88 in @xmath49 .",
    "if @xmath83 is a vertex different from @xmath89 whose rotor @xmath84 points to @xmath17 , then @xmath83 is not in this cycle , so the predecessor @xmath86 has a cycle disjoint from its chip location .",
    "thus @xmath86 does not belong to @xmath42 or to @xmath90 , so by lemma  [ cyclecriterion ] it can not be an intermediate state in the evolution from @xmath3 to @xmath40 .",
    "the state immediately preceding @xmath80 in the evolution from @xmath3 to @xmath40 must therefore be @xmath91 .",
    "now suppose @xmath92 . by case ( ii ) of lemma  [ cyclecriterion ] ,",
    "@xmath49 is the rotor configuration when @xmath17 is first visited . if @xmath93 , then @xmath94 .",
    "otherwise , let @xmath95 be the path in @xmath49 from @xmath16 to the sink .",
    "then the last exit from @xmath16 before visiting @xmath17 was to @xmath96 . by induction , if @xmath97 are different from @xmath17 , then @xmath98 was visited before @xmath17 and the last exit from @xmath98 before visiting @xmath17 was to @xmath99 .",
    "it follows that @xmath100 for some @xmath101 , and the state immediately preceding @xmath80 must be @xmath102 .",
    "thus for any vertex @xmath16 of @xmath36 , the operation @xmath103 of adding a chip at @xmath16 and routing it to the sink acts invertibly on the set of states @xmath42 whose rotors form oriented spanning trees rooted at the sink .",
    "it is for this reason that we call these states recurrent .",
    "we define the _ rotor - router group _",
    "@xmath104 as the subgroup of the permutation group of @xmath42 generated by @xmath105 .",
    "for any two vertices @xmath16 and @xmath17 , the operators @xmath103 and @xmath106 commute ; this commutativity is proved in @xcite for a broad class of models encompassing both the abelian sandpile and the rotor - router . hence the group @xmath104 is abelian .    [ transitivity ] @xmath104 acts transitively on @xmath42 .    given @xmath73 , for each vertex",
    "@xmath38 let @xmath107 be the number of rotor turns needed to get from @xmath108 to @xmath109 .",
    "let @xmath110 be the number of chips ending up at  @xmath16 if @xmath111 chips start at each vertex  @xmath17 , with rotors starting in configuration  @xmath112 , and each chip takes a single step .",
    "after each chip has taken a single step , the rotors are in configuration @xmath113 , hence @xmath114    letting @xmath115 we obtain @xmath116 .",
    "given vertices @xmath16 and @xmath17 , write @xmath117 for the number of edges in @xmath36 from @xmath16 to @xmath17 , and write @xmath118 for the outdegree of @xmath16 .",
    "[ groupisom ] let @xmath36 be a strongly connected finite directed graph without loops , let @xmath104 be its rotor - router group , and @xmath119 its sandpile group .",
    "then @xmath120 .",
    "let @xmath121 be the vertex set of @xmath36 .",
    "the sandpile group of @xmath36 @xcite is the quotient @xmath122 where @xmath123 is the sink and @xmath124 define @xmath125 by @xmath126 starting with @xmath127 chips at a vertex @xmath16 and letting each chip take one rotor - router step results in @xmath117 chips at each vertex @xmath17 , with the rotors unchanged , hence @xmath128 thus @xmath129 .",
    "since also @xmath130 , the map @xmath131 descends to a map @xmath132 .",
    "this latter map is surjective since @xmath131 is surjective ; to show that @xmath133 is injective , by lemma  [ transitivity ] we have @xmath134 where the equality on the right is the matrix - tree theorem @xcite .",
    "fix @xmath35 , and let @xmath3 be the infinite @xmath14-regular tree",
    ". fix an origin vertex  @xmath5 in  @xmath3 . in _",
    "rotor - router aggregation _",
    ", we grow a cluster of points in  @xmath3 by repeatedly starting chips at the origin and letting them walk until they exit the cluster . beginning with @xmath6 , define the cluster  @xmath7 inductively by @xmath135 where @xmath9 is the endpoint of a rotor - router walk started at  @xmath5 and stopped on first exiting  @xmath10 .",
    "we do not change the positions of the rotors when adding a new chip . in this section",
    "we use the group isomorphism in theorem  [ groupisom ] to show that @xmath7 is a perfect ball for suitable values of @xmath18 ( theorem  [ treecirc ] ) .    a function @xmath136 on the vertices of a directed graph @xmath36 is _ harmonic _ at a vertex @xmath16 if @xmath137 where @xmath117 is the number of edges from  @xmath16 to  @xmath17 , and  @xmath127 is the outdegree of  @xmath16 .",
    "[ hpinvariant ] let @xmath138 be a finite directed graph without loops .",
    "suppose chips on @xmath36 can be moved by a sequence of rotor - router steps , starting with @xmath107 chips at each vertex @xmath16 and ending with @xmath110 chips at each vertex @xmath16 , in such a way that the initial and final rotor configurations are the same .",
    "if @xmath136 is a function on @xmath121 that is harmonic at all vertices which emitted chips , then @xmath139    let @xmath140 be the intermediate configurations .",
    "if @xmath141 is obtained from @xmath142 by routing a chip from @xmath143 to @xmath70 , then @xmath144 if the initial and final rotor configurations are the same , then each rotor makes an integer number of full turns , so the sum in ( [ stepbystep ] ) can be written @xmath145 where @xmath146 is the number of full turns performed by the rotor at  @xmath16 . by the harmonicity of @xmath136 , the inner sum on the right",
    "vanishes whenever @xmath147 .",
    "next we describe our choice of graph @xmath36 and harmonic function @xmath136 . by the _ @xmath14-regular tree of height  @xmath18",
    "_ we will mean the finite rooted tree in which each non - leaf vertex has @xmath148 children , and the path from each leaf to the root has @xmath149 edges .",
    "we denote this tree by  @xmath150 .",
    "let @xmath151 be the graph obtained from @xmath150 by adding a single additional leaf @xmath5 whose parent is the root @xmath21 of @xmath150 .",
    "this is an undirected graph ; when applying the results above , which are phrased in terms of directed graphs for maximum generality , we think of it as _ bidirected _ : each edge is replaced by a pair of directed edges pointing in opposite directions .",
    "denote by @xmath152 the simple random walk on @xmath151 , and let @xmath153 be the first hitting time of the set of leaves . fix a leaf @xmath154 , and let @xmath155 be the probability that random walk started at @xmath16 and stopped at time @xmath156 stops at @xmath83 .",
    "this function is harmonic at all non - leaf vertices .",
    "we briefly recall the well - known martingale argument from gambler s ruin used to find the value of @xmath157 .",
    "the process @xmath158 is a martingale , where @xmath159 and @xmath23 denotes the number of edges in the path from @xmath5 to @xmath16 .",
    "since @xmath160 has bounded increments and @xmath161 , we obtain from optional stopping @xmath162 where @xmath163 . solving for @xmath164",
    "we obtain @xmath165 in the event that the walk stops at a leaf @xmath154 , by symmetry it is equally likely to stop at any such leaf .",
    "since there are @xmath166 such leaves , we obtain from ( [ gamblersruin ] ) @xmath167    the _ wired @xmath14-regular tree _ of height @xmath18 is the graph  @xmath168 obtained from  @xmath151 by collapsing all the leaves to a single vertex  @xmath37 , the _ sink_. we do not collapse edges ; thus each neighbor of the sink except for @xmath21 has @xmath159 edges to the sink .",
    "the proof of theorem  [ treecirc ] will use the following fact about the sandpile group of the wired regular tree .",
    "[ degreeofroot ] the root @xmath21 of @xmath168 has order @xmath169 in the sandpile group @xmath170 .",
    "see @xcite , proposition  4.2 .",
    "the next lemma concerns rotor - router walk on @xmath151 stopped on hitting the leaves .",
    "the leaves play the role of sinks , and the dynamics are the same as for rotor - router walk on the wired tree @xmath168 .",
    "however , we are interested in counting how many chips stop at each leaf , which is why we preserve the distinction between @xmath151 and @xmath168 . since the rotors at the leaves play no role , we view our rotor configuration as living on @xmath168 .",
    "such a configuration is _ acyclic _ if no two neighboring vertices have rotors pointing to one another ; in the notation of the previous section , the acyclic configurations are precisely those in @xmath171 .",
    "[ exitmeasure ] let @xmath159 .",
    "given an acyclic rotor configuration on @xmath168 , starting with @xmath169 chips at the root @xmath21 of @xmath151 , and stopping each chip when it reaches a leaf , exactly one chip stops at each leaf @xmath154 , and the remaining @xmath172 chips stop at @xmath5 . moreover , the starting and ending rotor configurations are identical .    by theorem  [ groupisom ] and lemma  [ degreeofroot ] , the element @xmath173 has order @xmath174 , so @xmath175 is the identity permutation of @xmath171 , hence the starting and ending rotor configurations are identical .",
    "fix a leaf @xmath154 of @xmath151 and let  @xmath136 be the function on vertices of @xmath151 given by ( [ ourharmonicfunction ] ) . since @xmath136 is harmonic on the non - leaf vertices , by lemma  [ hpinvariant ] and ( [ hittingprobofleaf ] ) ,",
    "the number of chips stopping at @xmath83 is @xmath176 since there are @xmath166 leaves @xmath154 , the remaining @xmath177 chips stop at o.    the _ principal branches _ of the infinite @xmath14-regular tree @xmath3 are the @xmath14 subtrees rooted at the neighbors of the origin .",
    "the ball of radius @xmath178 centered at the origin in @xmath22 is @xmath179 where @xmath23 is the number of edges in the path from @xmath5 to @xmath16 .",
    "write @xmath180 as the following result shows , provided we start with an acyclic configuration of rotors , the rotor - router aggregation cluster @xmath7 is a perfect ball at those times when an appropriate number of chips have aggregated .",
    "it follows that at all other times , the cluster is as close as possible to a ball : if @xmath181 then @xmath182 .",
    "[ treecirc ] let @xmath7 be the region formed by rotor - router aggregation on the infinite @xmath14-regular tree , starting from @xmath18 chips at the origin .",
    "if the initial rotor configuration is acyclic , then @xmath183 for all @xmath184 .",
    "define a modified aggregation process @xmath185 as follows .",
    "stop the @xmath18-th chip when it either exits the occupied cluster @xmath186 or returns to @xmath5 , and let @xmath187 where @xmath188 is the point where the @xmath18-th chip stops . by relabeling the chips ,",
    "this yields a time change of the original process , i.e.  @xmath189 for some sequence @xmath190 .",
    "thus it suffices to show @xmath191 for some sequence @xmath192 .",
    "we will show by induction on @xmath178 that this is the case for @xmath193 and that after @xmath194 chips have stopped , the rotors are in their initial state . for the base case @xmath195 , we have @xmath196 .",
    "the first chip stops at @xmath5 , and the next @xmath14 stop at each of the neighbors of @xmath5 , so @xmath197 .",
    "since the rotor at @xmath5 has performed one full turn , it is back in its initial state .",
    "assume now that @xmath198 and that the rotors are in their initial acyclic state .",
    "starting with @xmath199 chips at @xmath5 , let each chip in turn perform rotor - router walk until either returning to @xmath5 or exiting the ball @xmath200 .",
    "then each chip is confined to a single principal branch of the tree , and each branch receives  @xmath201 chips . by lemma  [ exitmeasure ] ,",
    "exactly one chip will stop at each leaf @xmath202 , and the remainder will stop at @xmath5 . thus @xmath203 .",
    "moreover , by lemma  [ exitmeasure ] , once all chips have stopped , the rotors are once again in their initial state , completing the inductive step .",
    "in the regular ternary tree ( top ) , the branch @xmath204 ( left ) , and its sub - branches @xmath205 and @xmath206.,title=\"fig : \" ] +   +   +   in the regular ternary tree ( top ) , the branch @xmath204 ( left ) , and its sub - branches @xmath205 and @xmath206.,title=\"fig : \" ]    in this section we explore questions of recurrence and transience for the rotor - router walk on regular trees .",
    "we aim to study to what extent the rotor - router walk behaves as a deterministic analogue of random walk .",
    "we find that the behavior depends quite dramatically on the initial configuration of rotors .    a chip performing rotor - router walk starting at the origin @xmath5 in the infinite @xmath14-regular tree either returns to the origin or escapes to infinity within a single principal branch of the tree , leaving the rotors in the other branches unchanged .",
    "therefore , as shown in figure  1 , we focus on a single branch  @xmath204 of the ball  @xmath207 in the @xmath14-regular tree . in the notation of the previous section ,",
    "@xmath204 is the graph obtained from @xmath151 by collapsing all the leaves except for @xmath5 to a single vertex , which we label @xmath208 for boundary .",
    "starting chips at the root  @xmath21 of  @xmath204 , and stopping them either when they reach  @xmath208 or return to  @xmath5 , we will compare the hitting rates of  @xmath5 and  @xmath208 for rotor - router walk with the expected hitting rates for random walk .",
    "to each rotor direction we associate an index from @xmath209 , with direction @xmath14 corresponding to a rotor pointing to the parent vertex .",
    "rotors cycle through the indices in order . in the ternary tree ( @xmath210 )",
    "we will sometimes refer to the three rotor directions as left ( direction @xmath211 ) , right ( direction @xmath212 ) and up ( direction @xmath213 ) .",
    "[ ternarycase ] suppose @xmath210 .",
    "if all rotors in @xmath204 initially point in direction  @xmath211 , then the first @xmath214 chips started at  @xmath21 alternate , the first stopping at  @xmath208 , the next stopping at  @xmath5 , the next at  @xmath208 , and so on .",
    "after this sequence of @xmath215 walks , all rotors again point in direction  @xmath211 .",
    "induct on @xmath18 . in the base case",
    "@xmath216 , there is only one rotor , which sends the first chip in direction @xmath212 to @xmath208 , the next chip up in direction @xmath213 to @xmath5 , and the third chip in direction @xmath211 to @xmath208 , at which point the rotor is again in its initial state .",
    "now suppose that the lemma holds for @xmath217 .",
    "let @xmath205 and @xmath206 be the two principal branches of @xmath204 .",
    "we think of @xmath205 and @xmath206 as each having a rotor that points either to @xmath208 or back up to @xmath21 .",
    "the initial state of these rotors is pointing to @xmath21 .",
    "the first chip is sent from the root to @xmath206 , which by induction sends it to @xmath208 .",
    "note that the root rotor is now pointing towards @xmath206 , the @xmath206-rotor is pointing to @xmath208 , and the @xmath205-rotor is pointing to @xmath21 ( figure  [ fig : foursteps]a ) .",
    "we now observe that the next four chips form a pattern that will be repeated .",
    "the second chip is sent directly to @xmath5 ( figure  [ fig : foursteps]b ) and the third chip is sent to @xmath205 which sends it to @xmath208 ( figure  [ fig : foursteps]c ) .",
    "the fourth chip is sent to @xmath206 , but by induction this chip is returned and then it is sent to @xmath5 ( figure  [ fig : foursteps]d ) .",
    "finally , the fifth chip is sent to @xmath205 , returned , sent to @xmath206 , and through to  @xmath208 ( figure  [ fig : foursteps]e ) .",
    "note that the root rotor is now again pointing towards @xmath206 , the @xmath206-rotor is again pointing to  @xmath208 , and the @xmath205-rotor is again pointing to @xmath21 . in this cycle of four chips , the two branches @xmath206 and",
    "@xmath205 see two chips apiece .",
    "this cycle repeats @xmath218 times , and each subtree sees @xmath219 chips .    . ]",
    "recall that the first chip was sent to @xmath206 , so @xmath206 it has seen a total of @xmath220 chips . by induction ,",
    "all the rotors in @xmath206 are in their initial configuration .",
    "we have sent a total of @xmath221 chips .",
    "the next chip is sent to @xmath5 , and the last to @xmath205 , which sends it to @xmath208 .",
    "now @xmath205 has seen @xmath222 chips , so by induction all of its rotors are in their initial configuration .",
    "the root rotor is pointing towards @xmath205 , its initial configuration .",
    "we have sent a total of @xmath223 chips , alternating between @xmath208 and @xmath5 , and all of the rotors of @xmath204 are in the initial configuration , so the inductive step is complete .",
    "we remark that the obvious generalization of lemma  [ ternarycase ] to trees of degree @xmath224 fails ; indeed , we do not know of a starting rotor configuration on trees of higher degree which results in a single chip stopping at @xmath5 alternating with a string of @xmath148 chips stopping at @xmath208 .",
    "consider now the case of the infinite ternary tree @xmath3 .",
    "a chip performing rotor - router walk started at the origin @xmath225 must either return to @xmath5 or escape to infinity visiting each vertex only finitely many times .",
    "thus the state of the rotors after a chip has escaped to infinity is well - defined .",
    "we can therefore run a sequence of  @xmath226 rotor - router walks and count the number  @xmath227 that return to the origin .",
    "the following result shows that there is an initial rotor configuration on the tree for which the rotor - router walk behaves as an exact quasirandom analogue to the random walk , in which chips exactly alternate returning to the origin with escaping to infinity .",
    "[ ternarythm ] let @xmath3 be the infinite ternary tree , with principal branches labeled @xmath228 , @xmath229 , and @xmath230 in correspondence with the direction indexing of the rotor at the origin .",
    "set the rotors along the rightmost path to infinity in @xmath230 initially pointing in direction  @xmath212 , and all remaining rotors initially pointing in direction  @xmath211 .",
    "let @xmath231 be the expected number of chips that return to the origin if @xmath226 chips perform independent random walks on  @xmath3 .",
    "let @xmath227 be the number of chips that return to the origin if @xmath226 chips sequentially perform rotor - router walks on  @xmath3 .",
    "then @xmath232 for all @xmath226 .",
    "lemma  [ ternarycase ] implies that for the branches @xmath228 and @xmath229 , the chips sent to a given branch alternate indefinitely with the first escaping to infinity , the next returning to @xmath5 , and so on .",
    "likewise , chips sent to @xmath230 will alternate indefinitely with the first returning to @xmath5 , the next escaping to infinity , and so on .",
    "since chips on the full tree @xmath3 are routed cyclically through the branches beginning with @xmath229 , we see that the chips too will alternate indefinitely between escaping to infinity and returning to the origin , with the first escaping to infinity .",
    "thus @xmath233 .",
    "taking @xmath234 in ( [ gamblersruin ] ) we obtain @xmath235 , and the result follows .",
    "[ finitetreesreturn ] for any @xmath35 , if all rotors in  @xmath204 initially point in direction @xmath148 , then the first @xmath149 chips started at  @xmath21 all hit  @xmath5 before hitting  @xmath208 .",
    "after these @xmath149 chips have stopped at  @xmath5 , the final rotors all point in direction  @xmath14 .",
    "induct on @xmath18 . in the base case @xmath216 , the first chip steps directly from @xmath21 to @xmath5 , leaving the single rotor pointing in direction @xmath14 .",
    "now suppose the lemma holds for @xmath217 .",
    "let @xmath236 be the principal branches of @xmath204 .",
    "the first chip placed at  @xmath21 is sent directly to  @xmath5 . by the inductive hypothesis , the first @xmath237 chips that are sent to each branch @xmath238",
    "are returned to  @xmath21 before hitting  @xmath208 .",
    "thus each of the next @xmath237 chips started at  @xmath21 is sent to @xmath239 , returned to  @xmath21 , sent to @xmath240 , and so on until it is sent to @xmath241 , returned to  @xmath21 and then routed to  @xmath5 .",
    "the root rotor now points in direction  @xmath14 , and since each branch  @xmath238 received exactly @xmath237 chips , its final rotors all point in direction  @xmath14 by the inductive hypothesis .",
    "our next result shows that , perhaps surprisingly , the initial rotors can be set up so as to make rotor - router walk on the @xmath14-regular tree recurrent .",
    "[ infinitetreesreturn ] on the infinite @xmath14-regular tree @xmath3 , if all rotors initially point in direction @xmath148 , then every chip in an infinite succession of chips started at the origin eventually returns to the origin .    by lemma  [ finitetreesreturn ]",
    ", for each @xmath18 , the @xmath18-th chip sent to each principal branch  @xmath45 returns to the origin before hitting height @xmath242 of  @xmath3 .",
    "note also that if all the rotors in the first @xmath149 levels of  @xmath3 initially point in direction @xmath148 , and all remaining rotors initially point in direction  @xmath14 , then after @xmath149 chips have been sent to a given branch @xmath45 and returned to the origin , by lemma  [ finitetreesreturn ] all rotors in @xmath45 point in direction  @xmath14 , so the next chip sent to  @xmath45 escapes to infinity .",
    "we continue our exploration of recurrence and transience on the infinite ternary tree  @xmath3 , allowing now for arbitrary rotor configurations .",
    "we focus on a single principal branch  @xmath45 of the infinite tree , rooted at a neighbor  @xmath21 of the origin @xmath225 .",
    "we include the edge  @xmath243 in  @xmath45 , so that  @xmath21 has degree  @xmath14 in  @xmath45 , and  @xmath5 has degree one",
    ". thus each chip started at the origin will move to @xmath21 on its first step .",
    "given a rotor configuration on  @xmath45 , we define the _ escape sequence _ for the first  @xmath18 chips to be the binary word @xmath244 , where for each  @xmath30 , @xmath245 as noted previously , a chip can not stay within a finite height indefinitely without returning to the origin , so @xmath29 is well - defined .",
    "we define a map @xmath246 associating to an escape sequence @xmath247 a pair of shorter sequences .",
    "first , we rewrite @xmath29 as the concatenation of subwords @xmath248 where each @xmath249 .",
    "since at least one of any three consecutive chips entering  @xmath45 is routed back to the origin by the rotor at the root  @xmath21 of  @xmath45 , at most two of any three consecutive letters in an escape sequence  @xmath29 can be ones .",
    "therefore , any escape sequence can be factored in this way up to the possible concatenation of an extra @xmath250 .",
    "now we define @xmath251 by @xmath252    in the other direction , given a pair of binary words @xmath253 and @xmath14 , each of length  @xmath226 , define @xmath254 , where @xmath255 note that @xmath131 is a left inverse of @xmath246 , i.e.  @xmath256 , up to possible concatenation of an extra @xmath250 .",
    "[ phi ] let @xmath45 be a principal branch of the infinite ternary tree . fix a rotor configuration on @xmath45 with the root rotor pointing to @xmath5 .",
    "let @xmath253 and @xmath14 be the escape sequences for the configurations on the left and right sub - branches of @xmath45 , respectively . then @xmath257 is the escape sequence for the full branch @xmath45 .",
    "we claim that each word @xmath258 is the escape sequence for the @xmath259 full rotation of the root rotor .",
    "note that after the root rotor has performed @xmath260 full rotations , each of the sub - branches @xmath205 and @xmath206 of @xmath45 has seen exactly @xmath260 chips , so the next chip sent to @xmath205 ( resp .",
    "r ) will either return to @xmath21 or escape to infinity accordingly as @xmath261 or @xmath262 ( resp .",
    "@xmath263 or @xmath264 ) .",
    "consider first the case @xmath265 .",
    "after @xmath260 full rotations of the root rotor , the next chip that enters @xmath45 will be routed first to @xmath205 , then returned to @xmath21 , sent to @xmath206 , returned to @xmath21 , and finally routed back up to the origin .",
    "the root rotor has now performed a full turn , with corresponding escape sequence @xmath266 . if @xmath267 , the next chip entering @xmath45 will be routed to @xmath205 , where it escapes to infinity .",
    "the following chip will be routed to @xmath206 and then back up to the origin , completing a full rotation of the root rotor . in this case",
    "we have escape sequence @xmath268 .",
    "if @xmath269 , the next chip entering @xmath45 will be routed to @xmath205 , back up to @xmath21 , and then to @xmath206 where it escapes to infinity .",
    "the following chip will be routed directly up to the origin leaving the root rotor pointing up once again .",
    "again , in this case @xmath268 . finally ,",
    "if @xmath270 , the next two chips entering @xmath45 will escape to infinity , the first through @xmath205 and the second through @xmath206 .",
    "the following chip will be routed directly up to the origin , once again leaving the root rotor pointing up . in this case",
    "we have @xmath271 .    to adapt lemma  [ phi ] to the case when the root rotor is not pointing up , we define _ extended escape sequences _ @xmath272 and @xmath273 associated to the two sub - branches .",
    "if the root rotor initially points to @xmath205 , let @xmath274 and @xmath275 .",
    "if the root rotor initially points to @xmath206 , let @xmath274 and @xmath276 .",
    "then @xmath277 is the escape sequence of the full branch @xmath45 .",
    "we now introduce the condition that is central to characterizing which words can be escape sequences :    @xmath278    we next show that the map @xmath246 preserves this requirement .",
    "[ psi ] let @xmath29 be a binary word satisfying @xmath279 and let @xmath251 as defined in ( [ psidef ] ) . then @xmath253 and @xmath14 each satisfy @xmath280 .",
    "let @xmath272 be a subword of @xmath253 of length @xmath281 and let @xmath273 be the corresponding subword of @xmath14 .",
    "let @xmath282 , which is a subword of @xmath283 . the formula for @xmath131 guarantees that @xmath284 has one zero for each letter of @xmath272 ,",
    "so @xmath284 has @xmath281 zeros .",
    "since the last letter of @xmath284 is zero , and @xmath29 satisfies @xmath285 , it follows that @xmath284 has at most @xmath34 ones ( else after truncating the final zero , the suffix of @xmath284 of length @xmath33 has at most @xmath286 zeros , hence at least @xmath287 ones ) .",
    "let @xmath226 be the number of ones in @xmath272 .",
    "since the instances of @xmath288 and @xmath289 alternate in the formula for @xmath290 , it follows that @xmath273 must have at least @xmath291 ones .",
    "since the number of ones in @xmath272 and @xmath273 combined equals the number of ones in @xmath284 , we obtain @xmath292 , hence @xmath293 . the same argument with the roles of @xmath253 and @xmath14 reversed shows that @xmath14 has at most @xmath294 ones .",
    "[ branch - escape ] let @xmath295 be a binary word of length @xmath18 . then @xmath29 is an escape sequence for some rotor configuration on the infinite branch @xmath45 if and only if @xmath29 satisfies @xmath279 for all @xmath1 .",
    "suppose @xmath29 is an escape sequence .",
    "we prove that @xmath29 satisfies @xmath279 for each @xmath1 by induction on @xmath1 .",
    "that @xmath29 satisfies @xmath296 is trivial .",
    "now suppose that every escape sequence satisfies @xmath280 and let @xmath253 and @xmath14 be the extended escape sequences of the left and right sub - branches respectively . then @xmath297 up to the possible concatenation of an extra zero .",
    "let @xmath284 be a subword of @xmath29 of length @xmath298 , and let @xmath299 .",
    "then there are words @xmath300 and @xmath301 each of which is a subword of @xmath253 or @xmath14 , and which are equal to @xmath272 and @xmath273 , respectively , except possibly in the first letter ; moreover the first letters satisfy @xmath302 and @xmath303 .    by the formula for @xmath246 , the number of ones in @xmath284 is the sum of the number of ones in @xmath272 and @xmath273 .",
    "if @xmath272 has length at most @xmath281 , then since @xmath253 and @xmath14 satisfy @xmath280 , each of @xmath272 and @xmath273 has at most @xmath294 ones , and therefore @xmath284 has at most @xmath34 ones . on the other hand ,",
    "if @xmath272 has length at least @xmath34 , then the number of zeros in @xmath284 is at least @xmath281 .",
    "thus @xmath284 has at most @xmath34 ones , so @xmath29 satisfies @xmath279 .",
    "the proof of the converse is by induction on @xmath18 . for @xmath304",
    "the statement is trivial .",
    "suppose that every binary word of length @xmath149 satisfying @xmath279 for each @xmath1 is an escape sequence .",
    "then by lemma  [ psi ] , @xmath251 gives a pair of binary words each satisfying @xmath279 for all @xmath1 .",
    "if @xmath253 and @xmath14 have length @xmath149 or less , then they are escape sequences by induction , hence @xmath29 is an escape sequence by lemma  [ phi ] .",
    "if @xmath253 and @xmath14 are of length  @xmath18 , then the definition of  @xmath246 implies that @xmath305 for all @xmath306 , in which case @xmath29 is an escape sequence by the remark following proposition  [ infinitetreesreturn ] .",
    "we can now establish our main result characterizing all possible escape sequences on the infinite ternary tree .",
    "[ escape ] let @xmath295 be a binary word . for @xmath27 write @xmath28 .",
    "then @xmath29 is an escape sequence for some rotor configuration on the infinite ternary tree @xmath3 if and only if each @xmath32 satisfies @xmath279 for all @xmath1 .",
    "let @xmath228 , @xmath229 , and @xmath230 be the three principal branches of @xmath3 assigned so that the rotor at the origin initially points to @xmath230 .",
    "then @xmath29 is the escape sequence for @xmath3 if and only if @xmath307 is the escape sequence for @xmath308 .",
    "the result now follows from lemma  [ branch - escape ] .",
    "we conclude with an open question . while theorem  [ escape ]",
    "completely characterizes the possible escape sequences for rotor - router walk on the infinite ternary tree , we know nothing about the possible escape sequences for rotor - router walk on another natural class of transient graphs , namely @xmath12 for @xmath35 .",
    "the open question is this : does there exist a rotor configuration on @xmath12 for @xmath35 , analogous to the configuration on the tree described in proposition  [ infinitetreesreturn ] , so that every chip in an infinite sequence of chips started at the origin eventually returns to the origin ? we remark that jim propp has found such a configuration on @xmath13 .",
    "the authors thank yuval peres , jim propp and parran vanniasegaram for useful discussions ."
  ],
  "abstract_text": [
    "<S> the rotor - router model is a deterministic analogue of random walk . </S>",
    "<S> it can be used to define a deterministic growth model analogous to internal dla . </S>",
    "<S> we show that the set of occupied sites for this model on an infinite regular tree is a perfect ball whenever it can be , provided the initial rotor configuration is acyclic ( that is , no two neighboring vertices have rotors pointing to one another ) . </S>",
    "<S> this is proved by defining the _ rotor - router group _ of a graph , which we show is isomorphic to the sandpile group . </S>",
    "<S> we also address the question of recurrence and transience : we give two rotor configurations on the infinite ternary tree , one for which chips exactly alternate escaping to infinity with returning to the origin , and one for which every chip returns to the origin . </S>",
    "<S> further , we characterize the possible  escape sequences \" for the ternary tree , that is , binary words @xmath0 for which there exists a rotor configuration so that the @xmath1-th chip escapes to infinity if and only if @xmath2 . </S>"
  ]
}