{
  "article_text": [
    "the _ orienteering problem _ ( op ) is a well - known integer programming problem in combinatorial optimisation , introduced by @xcite .",
    "op emerges from a combination between the travelling salesman problem and the knapsack problem .",
    "therefore , it is a routing problem where travelling to all vertices is often not feasible due to limited resources and the available time .",
    "the objective of the op is to find the combination of nodes that maximises the total rewards collected .",
    "tourist trip design ( @xcite ) , home fuel delivery ( @xcite ) and asset protection during wildfire ( @xcite)are some examples of application found in the literature .",
    "various extensions of the op have been inspired by real - world problems , such as the _ team orienteering problem with time window _",
    "( toptw ) ( @xcite ) , time - dependent orienteering problem ( @xcite ) and other variants ( @xcite ) .",
    "readers are referred to the survey articles by @xcite , for a complete list of applications and extensions .",
    "the orienteering problem is np - hard ( @xcite ) .",
    "an extensive number of exact and heuristic approaches have been proposed to solve this problem . in the literature ,",
    "a few papers have focused on exact methods(@xcite ) but most papers deal with heuristic approaches(@xcite ) .",
    "given a set of nodes in a toptw problem a subset of vertices should be visited in order to collect corresponding rewards ( @xcite ) .",
    "an extension to toptw is the _ * cooperative * _ _ orienteering problem with time windows _ ( coptw ) , proposed by @xcite .",
    "this problem arises when some tasks that need to be undertaken at certain locations can only be accomplished by two or more individuals acting cooperatively . in coptw",
    "each node has a unique resource requirement .",
    "collecting the corresponding reward at any individual vertex is upon the condition of meeting the requirements within its time window .",
    "depending on the requirement of each node , one or more team members must be available there to start the service simultaneously .",
    "this study seeks to propose a heuristic approach for solving the coptw , for the first time .    in all orienteering problems with time windows the routes are very sensitive ,",
    "either a minor change in service start time at any node or even a single swap in orientation of the nodes requires additional computational effort to double - check all constraints for every single route .",
    "this very attribute motivates developing a fast and efficient heuristic to solve the problem .",
    "we handled the existing complexity of the coptw by proposing a new robust enhancement to the _ clarke and wright _",
    "( cw ) algorithm followed by boosted operators .",
    "the main feature of the heuristic algorithm is its simplicity which facilitates the handling of the problem constraints .",
    "the remainder of the paper is organised as follows : section 2 describes the mathematical formulation of the coptw problem . in section 3",
    "we introduce the general scheme of the proposed heuristic approach .",
    "our findings from an extensive experimental study are discussed in section 4 .",
    "finally , the conclusion and potential future research directions are stated in section 5 .",
    "coptw generalises the toptw formulation ( see @xcite and @xcite for a detailed discussion ) , where a certain number of team members ( resources ) @xmath0 are required at vertices @xmath1 .",
    "the location @xmath2 is considered served if @xmath3 team members arrive at the vertex within the time window @xmath4 $ ] and start the service simultaneously at time @xmath5 for a duration of @xmath6 units of time . in coptw , a homogeneous fleet of @xmath7 team members start their route from @xmath8 and must return to depot @xmath9 by time @xmath10 , where both @xmath8 and @xmath9 represent a same location .",
    "for any two vertices , @xmath11 indicates the required time for each team member to travel from @xmath12 to @xmath13 .",
    "the binary decision variable @xmath14 , takes the value @xmath15 if @xmath3 team members visit @xmath2 within the appropriate time window for the required duration , @xmath16 otherwise .",
    "the other decision variable is @xmath17 which takes @xmath15 if arc @xmath18 is traversed , otherwise @xmath16 .",
    "furthermore , @xmath19 represents the number of team members travelling from @xmath12 to @xmath13 .",
    "lastly , @xmath20 defines a set of arcs that can be traversed if a team member departs vertex @xmath12 at @xmath21 and arrives vertex @xmath13 by @xmath22 . following the definition of @xmath20 , feasible arcs that can be traversed to and from node @xmath12 are shown by @xmath23 and @xmath24 , respectively .",
    "the mathematical formulation of the coptw as a mixed - integer program is as follows :    @xmath25    @xmath26    @xmath27    @xmath28    @xmath29    @xmath30    @xmath31    @xmath32    @xmath33    @xmath34    the objective function ( 1 ) maximises the sum of the rewards @xmath35 collected at each vertex @xmath12 . constraint ( 2 ) ensures all members depart from and return to a designated depot .",
    "constraint ( 3 ) guarantees flow conservation by enforcing the equality of incoming and outgoing arcs to each node . constraints ( 4 ) and ( 5 ) ensure that the collection of a reward ( ie a score ) at each location is dependent upon the condition of fulfilling its resource requirement , and travelling members of a fleet through an arc never exceeds the total @xmath7 .",
    "constraint ( 6 ) ensures that at each vertex the service can only be started when the previously visited location has been served completely and there is sufficient time to travel to the vertex .",
    "constraints ( 7 ) and ( 8) enforce every vertex is visited within its time window .",
    "integer and binary conditions are defined in constraints ( 9 ) and ( 10 ) .",
    "a graphical representation of a sample solution for coptw is sketched in fig . 1 as below .",
    "two of the main attributes of each node , the resource requirement ( @xmath3 ) and corresponding reward ( @xmath35 ) , are specified .",
    "three team members leave the depot and ( @xmath3 ) members must be at each vertex @xmath12 before starting the service to collect associated the reward .",
    "the numbers over each arc represent the travelling members of the team through an arc .",
    "it is infeasible to visit all vertices within their time frames .",
    "considering the set of all feasible solutions a schedule is produced that maximises the score ( ie the sum of rewards collected ) .",
    "the requirement in coptw problems that two or more members of a team are required to be at some of the locations and within specified time windows pose complications observed in neither vrp s nor op s .",
    "robust enhancements are applied to the classical clarke and wright saving ( cws ) heuristic ( @xcite ) followed by modified operators to tackle the challenges introduced by coptw .",
    "the resulting algorithm is named as the _ modified clarke and wright _ ( mcw ) heuristic .    while coptw aims to maximise the collected score by meeting the resource requirements of vertices within their associated time windows , this can be achieved along with construction of the shortest possible routes , at least in most cases . in the proposed saving function",
    "the first two terms are inspired by extensive studies in this area .",
    "particularly , @xcite introduced a new saving function which not only covers the accomplished improvements by @xcite but also integrates a sweep algorithm for further enhancements .",
    "however , the last term is developed to explain the orienteering problem attribute to maximise the total collected score .",
    "the first term of the saving function improves the reshaping ability of the classical cw heuristic and its circumference characteristic .",
    "motivation of the second term is to give early placement to pairs in vicinity of the depot by including @xmath36 , which is the value of constructed angles between pairs .",
    "therefore , pairs with acute angle climb in the saving pair list while the ones with absolute angles get penalise .",
    "the last term is award - based , as pairs with higher score should be at high priorities in the saving pair list , with less impression from other factors .",
    "the proposed saving function for the mcw heuristic is therefore as follows : @xmath37{0pt}{20pt }      \\end{gathered}\\ ] ]    where @xmath38 represents the angle between customer @xmath12 and @xmath13 resulted by two rays originating from the depot and crossing them . in the above formulation,@xmath39 ,",
    "@xmath40 and @xmath41 demonstrate saving value , distance and score , respectively . in equation ( 11 ) , @xmath42 is the maximum distance and @xmath43 is the average score for each node .",
    "moreover , three parameters namely @xmath44 , @xmath45 and @xmath46 are finely tuned to equip the mcw heuristic to perturbation move . to ensure the assignment of nodes with highest",
    "saving values prior to others , we implemented parallel route construction in the mcw algorithm which fit the best with underlying nature of the problem .    in the well - known classical cw saving heuristic @xcite ,",
    "all vertices are initially connected to the depot . then , saving values of pairs are obtained by joining each of the two nodes in succession .",
    "the procedure adds a new vertex at a time to the ends of tours .",
    "but , the mcw heuristic is equipped with more than one insertion operator . covering vertices in the mcw",
    "begins by checking the ends of the constructed tours for insertion . in case of failure",
    ", the new vertices will be added within tours , as inspired by the cheapest insertion algorithm ( see @xcite ) in accordance with the associated saving values .",
    "it is worthwhile to mention that none of the constraints should be violated and no removal is allowed before starting the @xmath47 function . in the other words ,",
    "the algorithm is equipped with the same logic as exists in the ejection chains ( @xcite ) .",
    "figure 2 illustrates the effect of taking advantage from the sweep algorithm and the saving algorithm in the mcw heuristic .",
    "the depot is denoted as `` d '' and associated rewards are defined in figure 2(c ) .",
    "the cw heuristic constructs circumferenced routes ( figure 2(b ) ) while the sweep algorithm forms routes based on polar angles with the depot regardless of distance between any pairs(figure 2(c ) ) .",
    "the proposed saving function reshapes the constructed routes in figure 2(a ) by integrating the cosine value .",
    "as can be observed nodes with higher rewards are covered in figure 2(c ) , which proves the importance of the last term in equation 11 .",
    "the existing routes in figure 2(c ) can be improved after implementation of the @xmath47 function operators .",
    "as far as the parameters in the saving function are concerned , the computational effort is positively correlated to the intervals for @xmath48 triplets .",
    "based on extensive tests and considering the compromise between the search effort and solution quality , promising incremental size and intervals for the coefficients are defined .",
    "it was decided to change the parameters within @xmath49 $ ] for @xmath50 pairs and @xmath51 $ ] for @xmath46 , all with an increment of @xmath52 .",
    "the large interval and step - size assist the heuristic to explore a broader area of the solution space .",
    "the pseudo - code of the presented solution is given in algorithm 1 .",
    "call the @xmath53 function call the @xmath54 function _ @xmath55 _ @xmath56 _ @xmath57 _ @xmath58 , @xmath59 * end for * , update @xmath60 * end for * @xmath61 , @xmath62 call the @xmath63 function * end for * * return @xmath64 * ;    at first , a saving pair list is initialised by calling the function @xmath65 . after that ,",
    "unvisited nodes based on the pairs that they belong to and their saving values should be assigned to sufficient number of routes .",
    "vertices with satisfied resource requirements are marked as serviced and relevant information are updated .",
    "however , nodes with less number of visits than their resource requirements must be removed , before applying the local search to the solution .    the @xmath66 function is represented in algorithm 2 .",
    "the saving values of feasible pairs are defined in tuples .",
    "the saving function is designed based on the sweep algorithm and cw heuristic ( @xcite ) where a new additional term is added to give early placement to vertices with higher scores .",
    "the coefficient interval for this term is broader compare to the other two as it plays a crucial rule in maximisation of the objective function . since frequent update in the @xmath67",
    "is required after each insertion or removal , this procedure is described in algorithm 3 .",
    "generate @xmath68 * initialise : * @xmath69 @xmath70    insert @xmath39 to a vector of tuples @xmath71 * end for * * return @xmath72 * ;    insertion and removal of each vertex can trigger significant changes in the problem environment as revision of the feasibility matrix may be required . in algorithm 3 ,",
    "the start time of the service at each node is the maximum value of the latest arrival time of team members to a node and its opening time .",
    "the generated solution by the mcw heuristic is already promising due to the applied logic in the saving function and the insertion operators ; however algorithm 4 is designed to further improve the solution quality .",
    "* require : * ( temporary routes @xmath60 ) @xmath73 * end for * compute @xmath74 @xmath75 * end for * @xmath76 @xmath77 * end for * * return @xmath78 * ;    * require : * ( best collected award @xmath79 , best routes @xmath80 ) @xmath81 seek to insert i call the @xmath82 function insert i and remove j update @xmath80 update @xmath79 @xmath83 update @xmath80 update @xmath79 call the @xmath54 function * end for * * return @xmath80 and @xmath79 * ;    the solution then undergoes a local search improvement for further enhancements which is described in algorithm [ euclid ] . saving values of pairs",
    "bring on assignment of vertices in an efficient manner which cause the least additional travel distance and thereby saving more time for score collection at as many locations as possible .",
    "the @xmath47 function checks whether any of the inserted vertices can be substituted with the unvisited ones with the possibility of improving the objective function while satisfying all constraints .",
    "finally , it is noteworthy that , while we switch the search space by changing the parameters ( perturbation move ) , the @xmath47 function acts as a local search algorithm .",
    "extensive numerical studies were conducted to evaluate the efficacy of the proposed solution approach .",
    "a set of benchmark instances was generated by adding the problem - specific attribute to the well - known existing benchmark sets ( see @xcite ) .",
    "the resource requirement attribute was added to each vertex by picking a random number from a set of @xmath84 , which indicates how many members of the team are required to collect the associated reward at each node . in the first study , truncated benchmark sets are designed to solve sufficiently small - size instances by means of both the cplex commercial solver and the mcw algorithm .",
    "furthermore , we explored the trade - off between an increased number of available members for service on the one hand and the computation time and objective value on the other hand .",
    "we furthermore showed the efficient performance of the proposed heuristic in term of time and accuracy on the large - size designed benchmark instances .",
    "all the above computational work was performed on a single node of the national computational infrastructure .",
    "each node is equipped with dual 8-core intel xeon ( sandy bridge 2.6 ghz ) processors and 32 gb of ram .",
    "the algorithm was programmed in c++ , using a gcc 5.2.0 compiler . where applicable , milp models were solved by the cplex 12.6.3 commercial solver in deterministic parallel optimisation mode .",
    "all tables show the execution times as elapsed times in seconds .",
    "for the parameter studies , after running 584 instances with various parameter settings , we tuned them in a way to define the best possible trade - off between runtime and solution quality .",
    "it was decided to change the parameters within @xmath49 $ ] for @xmath50 pairs and @xmath51 $ ] for @xmath46 .",
    "based on the authors observations the value of @xmath46 plays a significant role in the solution quality , thus a broader interval is considered for the newly introduced term in the saving function .",
    "additionally , an incremental size of @xmath52 is large enough to search the feasible region sufficiently and to avoid redundant iterations . for validation and performance evaluation a collection of 456 small - size benchmark instances",
    "were generated and solved by means of both cplex and the mcw heuristic .",
    "a summary of the tests for @xmath85 nodes with @xmath86 and @xmath87 team members on instance sets c100 , r100 and rc100 is provided in table 1 .",
    "the size of truncated instances are chosen in a way to investigate the correlation between the increase in problem size and exponential growth in computational effort .",
    "it is worthwhile to mention that , infeasible edges are excluded in milp formulations to simplify models for cplex .    in table 1 computation times are reported for all problems in seconds and the optimality gap is defined by `` opt gap % '' .",
    "the average gap from optimal solutions in table 1 is @xmath88 which shows the promising performance of the proposed heuristic .",
    "moreover , it can be seen that the computation time increases drastically with minor changes in the problem size for cplex , while that of mcw heuristic experiences negligible change .",
    "table 2 gives the summary of results for @xmath89 vertices with the same number of available team members .",
    "one can see that cplex solves larger problems from the sets c200 , r200 and rc200 compared to those in table 1 .",
    "this is due the nature of the studied benchmark groups as the time window intervals are different in length and a larger portion of customers can be covered by the same number of team members . in table 2",
    ", the heuristic average computational time remains below one second for all instances , while it takes hours to solve some sets by cplex . in table 2 ,",
    "the average deviation of mcw heuristic from optimal solutions is just @xmath90 which is reasonable for a heuristic solution .    to further verify",
    "the reliability of mcw , more truncated instances from ( pr01-pr10 ) and ( pr11-pr20 ) sets were tested and results are demonstrated in table 3 and 4 .",
    "the proposed algorithm performs similarly in all examined cases which assures its reliability for further runs on larger problems .",
    "[ cols=\"^,^,^,^,^,^,^,^,^,^,^ \" , ]     an instance where the mcw achieved an optimal solution on a small set is demonstrated in fig .",
    "3 . for the sake of better presentation",
    ", nodes are assigned into the cells of arrays .",
    "the times for starting the service and the corrsponding time window for each succeeding vertex are provided .",
    "consider for example , three members leave the depot and arrive at customer number 5 within its time window [ 15,67 ] , where they start the service simultaneously to collect the associated score at 15.1 .",
    "after that , second and third members leave customer 5 toward vertex number 3 .",
    "finally , all the team members finish their tour by returning to depot before @xmath91 .",
    "one can see that the illustrated routes are highly dependent in a sense that any minor change in orientation of nodes at any tour requires reconstruction of other routes .",
    "the proposed solution method was examined on truncated sets and results were discussed .",
    "after the superior performance of the heuristic approach analysed , we carried out further tests on larger instances by using the same approach .",
    "finally , in table 5 we report a summary of tests for 50 and 100 vertices with 6 and 12 team members .",
    "more team members are considered in order to cover a substantial portion of available nodes . among the ( pr01-pr20 ) test instances those with an insufficient number of nodes are excluded in the reported results . as can be observed ,",
    "our implementation attains an optimality gap of 2.61% on instances for which the optimal results are known and solves benchmarks with realistic size within short computational times .",
    "in this paper we investigated the cooperative orienteering problem with time windows , and a new efficient heuristic algorithm is presented to tackle the problem - specific complexities .",
    "although the problem is not newly introduced , we have developed the first heuristic solution to this problem .",
    "the proposed algorithm generates optimal solutions for 64.5% of instances for which the best results are known . in this study",
    ", we introduced a new modification to the cw saving heuristic to improve solution quality without losing its simplicity .    to evaluate the solution approach , a new benchmark set was generated for the coptw problem .",
    "this was achieved by adding the resource requirement attribute to the existing benchmarks ( @xcite ) for the toptw poblem .",
    "then , the small - sized instances were solved by both the cplex solver and the mcw heuristic and results analysed .",
    "the optimality gaps and computational times demonstrated the efficiency of the algorithm .",
    "the coptw is an important class of problem that arises naturally in many applications .",
    "for example , in disaster relief aid workers transported by bus must be present at the same locations and time windows as a truck carrying relief supplies so that these supplies can be distributed .",
    "as the applications grow , further developments will most likely be neded to represent factors such as soft time windows , and real - time changes to route and capacity constraints . adding new constraints will require more efficient algorithms where our mcw heuristic at the very least will be able to generate high quality and reliable results that can be used as initial solutions .",
    "the second author is supported by the australian research council under the discovery projects funding scheme ( project dp140104246 ) ."
  ],
  "abstract_text": [
    "<S> the cooperative orienteering problem with time windows ( coptw)is a class of problems with some important applications and yet has received relatively little attention . in the coptw a certain number of team members are required to collect the associated reward from each customer simultaneously and cooperatively . this requirement to have one or more team members simultaneously available at a vertex to collect the reward , poses a challenging or task . </S>",
    "<S> exact methods are not able to handle large scale instances of the coptw and no heuristic schemes have been developed for this problem so far . in this paper , a new modification to the classical clarke and wright saving heuristic </S>",
    "<S> is proposed to handle this problem . a new </S>",
    "<S> benchmark set generated by adding the resource requirement attribute to the existing benchmarks . </S>",
    "<S> the heuristic algorithm followed by boosting operators achieves optimal solutions for 64.5% of instances for which the optimal results are known . </S>",
    "<S> the proposed solution approach attains an optimality gap of 2.61% for the same instances and solves benchmarks with realistic size within short computational times . </S>"
  ]
}