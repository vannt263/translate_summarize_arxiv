{
  "article_text": [
    "the _ edge dominating set problem _ ( eds ) , to find an edge dominating set of minimum size in a graph , is one of the basic problems highlighted by garey and johnson in their work on np - completeness  @xcite .",
    "it is known that the problem is np - hard even when the graph is restricted to planar or bipartite graphs of maximal degree three  @xcite .",
    "the problem in general graphs and in sparse graphs has been extensively studied in approximation algorithms  @xcite .",
    "note that a maximum matching is a 2-approximation for eds .",
    "the 2-approximation algorithm for the weighted version of eds is considerably more complicated  @xcite .",
    "recently , eds also draws much attention from the exact - and parameterized algorithms community .",
    "randerath and schiermeyer  @xcite designed an @xmath8 algorithm for eds which was improved to @xmath9 by raman _",
    "et al . _",
    "@xcite .- notation suppresses polynomial factors . ] here @xmath10 and @xmath11 are the number of vertices and edges in the graph .",
    "et al . _ ,  @xcite further improved this result to @xmath12 by considering the treewidth of the graph .",
    "rooij and bodlaender  @xcite designed an @xmath13 algorithm by using the ` measure and conquer method . '    for _ parameterized edge dominating set _ ( peds ) with the parameter @xmath4 being the size of the edge dominating set , fernau  @xcite gives an @xmath14 algorithm .",
    "et al . _",
    "@xcite obtain an @xmath15-time and exponential - space algorithm based on dynamic programming on bounded treewidth graphs .",
    "unfortunately , their paper only briefly sketches the description and analysis of this algorithm .",
    "faster algorithms are known for graphs that have maximal degree three .",
    "the eds and peds problems in degree-3 graphs can be solved in @xmath16  @xcite and @xmath17  @xcite .    in this paper , we present two new algorithms for peds .",
    "the first one is a simple and elegant algorithm that runs in @xmath18 time and polynomial space .",
    "we improve the running - time bound to @xmath6 by using a technique that deals with remaining graphs of maximal degree three .",
    "we also design a linear - time algorithm that obtains a quadratic kernel which is smaller than previously - known kernels .",
    "our algorithms for peds are based on the technique of enumerating minimal vertex covers .",
    "we introduce the idea of the algorithms in section  [ sec_enumeration ] and introduce some basic techniques in section  [ sec_rules ] .",
    "we present a simple algorithm for peds in section  [ sec_firsalg ] and an improved algorithm in section  [ sec_improved ] .",
    "we moved the proof of a technical lemma to appendix  [ analy3 ] . in section  [ sec_kernel ]",
    "we discuss the problem kernel .",
    "as in many previous algorithms for the edge dominating set problem  @xcite our algorithms are based on the enumeration of minimal vertex covers . note that the vertex set of an edge dominating set is a vertex cover .",
    "conversely , let @xmath19 be a minimal vertex cover and @xmath3 be a minimum edge dominating set containing @xmath19 in the set of its endpoints . given @xmath19 ,",
    "@xmath3 can be computed in polynomial time by computing a maximum matching in induced graph @xmath20 $ ] and adding an edge for each unmatched vertex in @xmath19 .",
    "this observation reduces the problem to that of finding the right minimal vertex cover @xmath19 .",
    "now , the idea is to enumerate all minimal vertex covers . moon and",
    "moser showed that the number of minimal vertex covers is bounded by @xmath21 and this shows that one can solve eds in @xmath22 time  @xcite .    for peds ,",
    "we want to find an edge dominating set of size bounded by @xmath4 .",
    "it follows that we need to enumerate minimal vertex covers of size only up to @xmath23 .",
    "we use a branch - and - reduce method to find vertex covers .",
    "we fix some part of a minimal vertex cover and then we try to extend it with at most @xmath24 vertices .",
    "initially @xmath25 .",
    "in fact , in our algorithms , we may not really enumerate all minimal vertex covers of size up to @xmath24 .",
    "but we will guarantee that at least one of the right vertex covers will be considered if a solution exists .    for a subset @xmath26 and an independent set @xmath27 in @xmath5 , an edge dominating set @xmath3",
    "is called a _ @xmath28-eds _ if @xmath29 in the search for the vertex cover @xmath30 of a minimum @xmath28-eds @xmath3 , we keep track of a partition of the vertices of @xmath5 in four sets : @xmath19 , @xmath31 , @xmath32 and @xmath33 . initially @xmath34 and @xmath35 .",
    "the following conditions are kept invariant .    1 .",
    "@xmath31 is an independent set in @xmath5 , and 2 .",
    "each component of @xmath36 $ ] is a clique component of @xmath37 $ ] .",
    "the vertices in @xmath38 are called _ undecided _ vertices .",
    "we use a five - tuple @xmath39 to denote the state described above .",
    "we let @xmath40 denote the number of vertices of a clique component @xmath41 of @xmath36 $ ] .",
    "rooij and bodlaender proved the following lemma in  @xcite .",
    "[ lemma clique ] if @xmath42 then a minimum @xmath28-eds @xmath3 of @xmath5 can be found in polynomial time .    when there are no undecided vertices in the graph we can easily find a minimum @xmath28-eds .",
    "lemma  [ lemma clique ] tells us that clique components in the _ undecided graph _",
    "@xmath43 $ ] do not cause trouble .",
    "we use some branching rules to deal with vertices in @xmath33 .",
    "consider the following simple branching rule .",
    "for any vertex @xmath44 consider two branches that either include @xmath45 into the vertex cover or exclude @xmath45 from the vertex cover . in the first branch we move @xmath45 into @xmath19 . in the second branch we move @xmath45 into @xmath31 and move the set @xmath46 of neighbors of @xmath45 into @xmath19 .",
    "when we include a number of vertices into the vertex cover , we reduce the parameter @xmath24 by the same value . furthermore , in each branch we move any newly - found clique component @xmath47 in @xmath48 $ ] into @xmath32 and reduce @xmath24 by @xmath49 .",
    "the reason is that each clique has at most one vertex that is not in the vertex cover .",
    "let @xmath50 denote the worst - case running time to enumerate vertex covers up to size @xmath24 .",
    "then we have the following inequality : @xmath51 where @xmath52 ( resp . , @xmath53 ) denotes the sum of @xmath49 over all cliques @xmath47 in @xmath48 $ ] that appear after removing @xmath45 ( resp . , @xmath46 ) from @xmath33 .    at worst ,",
    "both @xmath52 and @xmath53 are 0 .",
    "then we end up with the recurrence @xmath54 note that one can always branch on vertices of degree at least @xmath55 in @xmath48 $ ] . in this manner",
    "fernau  @xcite solves the edge dominating set problem in @xmath56 time which stems from the solution of the fibonacci recurrence @xmath57 fomin _ et.al._ ,  @xcite refine this as follows .",
    "their algorithm first branches on vertices in @xmath48 $ ] of degree at least @xmath58 and then it considers the treewidth of the graph when all the vertices in @xmath48 $ ] have degree one or two .",
    "if the treewidth is small the algorithm solves the problem by dynamic programming and if the treewidth is large the algorithm branches further on vertices of degree two in @xmath48 $ ] .",
    "this algorithm uses exponential space and its running time depends on the running time of the dynamic programming algorithms .",
    "the method of iteratively branching on vertices of maximum degree is powerful when this is more than two .",
    "unfortunately , it seems that we can not avoid some branchings on vertices of degree @xmath55 , especially when each component of @xmath48 $ ] is a @xmath55-path , _ i.e. _ , a path that consists of two edges .",
    "we say that we are in the _ worst case _ when every component of @xmath48 $ ] is a @xmath55-path .",
    "our algorithms branch on vertices of maximum degree and on some other local structures in @xmath48 $ ] until @xmath48 $ ] has only @xmath55-path components .",
    "when we are in the worst case our algorithms deal with the graph in the following way .",
    "let @xmath59 be a @xmath55-path in @xmath48 $ ] .",
    "we say @xmath60 is _ signed _ if @xmath61 , and _ unsigned _ if @xmath62 .",
    "we use an efficient way to enumerate all signed @xmath55-paths in @xmath48 $ ] .    in the next section",
    "we introduce our branching rules .",
    "besides the simple technique of branching on a vertex , we also use the following branching rules . recall that in our algorithm , once a clique component @xmath47 appears in @xmath48 $ ] , we move @xmath63 into @xmath32 and reduce @xmath24 by @xmath49 .      let the vertex @xmath64 have degree two .",
    "assume that @xmath64 has one neighbor @xmath65 of degree one and that the other neighbor @xmath66 has degree @xmath67 .",
    "then we call the path @xmath68 a _ tail_.    in this paper , when we use the notation @xmath68 for a tail , we implicitly mean that the first vertex @xmath65 is the degree-@xmath69 vertex of the tail .",
    "_ branching on a tail _",
    "@xmath68 means that we branch by including @xmath66 into the vertex cover or excluding @xmath66 from the vertex cover .",
    "[ clique ] if @xmath48 $ ] has a tail then we can branch with the recurrence @xmath70    let the tail be @xmath68 . in the branch",
    "where @xmath66 is included into @xmath19 , @xmath71 becomes a clique component and this is moved into @xmath32",
    ". then @xmath24 reduces by @xmath69 from @xmath66 and by @xmath69 from @xmath71 . in the branch",
    "where @xmath66 is included into @xmath31 , @xmath72 is included into @xmath19 . since @xmath73",
    ", @xmath24 also reduces by @xmath55 in this branch .",
    "we say that @xmath75 is a _",
    "@xmath74-cycle _ if there exist the four edges @xmath76 , @xmath77 , @xmath78 and @xmath79 in the graph .",
    "xiao  @xcite used the following lemma to obtain a branching rule for the maximum independent set problem . in this paper",
    "we use it for the edge dominating set problem .",
    "[ 4-cycle ] let @xmath75 be a @xmath74-cycle in graph @xmath5 , then any vertex cover in @xmath5 contains either @xmath80 and @xmath81 or @xmath82 and @xmath83 .",
    "as our algorithm aims at finding a vertex cover , it branches on a @xmath74-cycle @xmath75 in @xmath48 $ ] by including @xmath80 and @xmath81 into @xmath19 or including @xmath82 and @xmath83 into @xmath19 .",
    "notice that we obtain the same recurrence as in lemma  [ clique ] .",
    "our first algorithm is described in fig .",
    "the search tree consists of two parts .",
    "first , we branch on vertices of maximum degree , tails and @xmath74-cycles in lines  3 - 4 until every component in @xmath48 $ ] is a @xmath55-path .",
    "second , we enumerate the unsigned @xmath55-paths in @xmath48 $ ] . in each leaf of the search tree we find an edge dominating set in polynomial time by lemma  [ lemma clique ] .",
    "we return a smallest one .    4= @xmath84      to show the correctness of the algorithm we explain line  6 and line  8 .    for each @xmath55-path in",
    "@xmath48 $ ] we need at least one edge to dominate it .",
    "so , we must have that @xmath85 and @xmath86 .",
    "this explains the condition in line  6 .",
    "it is also easy to see that for each unsigned @xmath55-path we need at least two different edges to dominate it .",
    "let @xmath87 be the number of unsigned @xmath55-paths . in line  8 , we enumerate the possible sets @xmath88 of unsigned @xmath55-paths .",
    "notice that @xmath89    we analyze the running time of this algorithm .",
    "lemma  [ lemma clique ] guarantees that the subroutine in line  @xmath90 runs in polynomial time .",
    "we focus on the exponential part of the running time .",
    "we prove a bound of the size of the search tree in our algorithm with respect to measure @xmath24 .",
    "first , we consider the running time of lines  3 - 4 .",
    "[ branch3 ] if the graph has a vertex of degree @xmath91 then algorithm @xmath92 branches with @xmath93    if the algorithm branches on a tail or a @xmath74-cycle we have the upperbound given by ( [ equation 2 - 2 ] ) . else",
    "the algorithm branches on a vertex of maximum degree and generates a recurrence covered by ( [ equation branch_3 ] ) .",
    "notice that ( [ equation branch_3 ] ) covers ( [ equation 2 - 2 ] ) .",
    "this proves the lemma .",
    "[ pathandcycle ] if all components of the graph are paths and cycles then the branchings of algorithm @xmath92 before line  5 satisfy  ( [ equation branch_3 ] ) .",
    "if there is a path component of length @xmath94 , then there is a tail and the algorithm branches on it with ( [ equation 2 - 2 ] ) .",
    "if there is a component @xmath95 which is an @xmath96-cycle in @xmath48 $ ] , the algorithm deals with it in this way : if the cycle is a @xmath58-cycle , the algorithm moves it into @xmath32 without branching since it is a clique .",
    "if the cycle is a @xmath74-cycle then , according to lemma  [ 4-cycle ] , our algorithm branches on it with ( [ equation 2 - 2 ] ) .    if the cycle has length at least @xmath97 , our algorithm selects an arbitrary vertex @xmath65 and branches on it .",
    "subsequently it branches on the path that is created as long as the length of the path is greater than @xmath55 .",
    "when the cycle is a @xmath97-cycle we obtain the recurrence @xmath98    when the cycle is a @xmath99-cycle we obtain the recurrence @xmath100    the two recurrences above are covered by ( [ equation branch_3 ] ) .",
    "straightforward calculations show that when the cycle has length @xmath101 , we also get a recurrence covered by ( [ equation branch_3 ] ) . for brevity",
    "we omit the details of this analysis .    by lemma  [ branch3 ] and lemma  [ pathandcycle ] we know that the running time of the algorithm , before it enters line  5 is @xmath102 , where @xmath103 is the size of @xmath19 upon entering the loop in line  8 .",
    "we now consider the time that is taken by the loop in line  8 and then analyze the overall running time .",
    "first we derive a useful inequality .",
    "[ lemma ine ] let @xmath104 be a positive integer .",
    "then for any integer @xmath105",
    "@xmath106    notice that @xmath107 where @xmath108 is the @xmath109 fibonacci number .",
    "we have @xmath110 .",
    "now we are ready to analyze the running time of the algorithm .",
    "it is clear that the loop in line  8 takes less than @xmath111 basic computations .",
    "first assume that @xmath112 .",
    "we have that @xmath113 thus @xmath114 .",
    "if we apply lemma  [ lemma ine ] with @xmath115 we find that the running time of the loop in line  8 is @xmath116 . by lemmas  [ branch3 ] and  [ pathandcycle ] the running time of the algorithm",
    "is therefore bounded by @xmath117 .",
    "assume that @xmath118 .",
    "we now use that @xmath119 thus @xmath120 . by lemma  [ lemma ine ]",
    "the running time of step  8 is @xmath121 .",
    "now @xmath122 and @xmath118 .",
    "the running time of the algorithm is therefore bounded by @xmath123    we summarize the result in the following theorem .",
    "[ result1 ] algorithm @xmath92 solves the parameterized edge dominating set problem in @xmath18 time and polynomial space .",
    "in this section we present an improvement on algorithm @xmath92 . the improved algorithm is described in fig .  [ eds1 ] .",
    "the search tree of this algorithm consists of three parts .",
    "first , we iteratively branch on vertices of degree @xmath124 until @xmath48 $ ] has no such vertices anymore ( line  @xmath58 ) .",
    "then we partition the vertices in @xmath33 into two parts : @xmath125 and @xmath126 , where @xmath60 is the set of @xmath55-path components in @xmath48 $ ] and @xmath127 . then the algorithm branches on vertices in @xmath126 until @xmath126 becomes empty ( line  @xmath74-@xmath97 ) . finally , we enumerate the number of unsigned @xmath55-paths in @xmath60 ( line  @xmath90 ) and continues as in algorithm @xmath92 .    in algorithm",
    "@xmath128 a subroutine @xmath129 deals with some components of maximum degree @xmath58 .",
    "it is called in line  5 .",
    "this is the major difference with algorithm @xmath92 .",
    "algorithm @xmath129 is described in fig .",
    "[ eds3d ] .",
    "the algorithm contains several simple branching cases .",
    "they could be described in a shorter way but we avoided doing that for analytic purposes .",
    "we show the correctness of the condition in  line  7 of algorithm @xmath128 .",
    "the variable @xmath130 in algorithm @xmath131 marks the decrease of p by subroutine @xmath129 .",
    "note that no vertices in @xmath125 are adjacent to vertices in @xmath132 .",
    "let @xmath133 be the set of edges in the solution with at least one endpoint in @xmath126 and let @xmath134 be the set of edges in the solution with at least one endpoint in @xmath125",
    ". then @xmath135 .",
    "the correctness of algorithm @xmath128 now follows since the only difference is the subroutine @xmath129 .",
    "4= @xmath84    4= @xmath84      we put the proof of the following lemma in appendix  [ analy3 ] .",
    "[ lemma 3 g ] the branchings of algorithm @xmath129 satisfy the recurrence @xmath136    algorithm @xmath128 first branches on vertices of degree at least @xmath74 .",
    "these branchings of the algorithm satisfy @xmath137    recall that the subroutine @xmath129 reduces @xmath24 by @xmath130 .",
    "the analysis without the subroutine is similar to the analysis of algorithm @xmath92 in section  [ analysis eds ] except that @xmath4 is replaced by @xmath138 and that formula  ( [ equation branch_3 ] ) is replaced by formula  ( [ equation branch_4 ] ) .",
    "thus without the subroutine @xmath129 the algorithm has a run - time proportional to @xmath139    by lemma  [ lemma 3 g ] the running time of the algorithm is therefore bounded by @xmath140    this proves the following theorem .",
    "[ theorem eds1 ] algorithm @xmath128 solves the parameterized edge dominating set problem in @xmath6 time and polynomial space .",
    "a _ kernelization algorithm _ takes an instance of a parameterized problem and transforms it into an equivalent parameterized instance ( called the _ kernel _ ) , such that the new parameter is at most the old parameter and the size of the new instance is a function of the new parameter . for the parameterized edge dominating set problem prieto",
    "@xcite presented a quadratic - time algorithm that finds a kernel with at most @xmath141 vertices by adapting ` crown reduction techniques . '",
    "fernau  @xcite obtained a kernel with at most @xmath142 vertices .",
    "we present a new linear - time kernelization that reduces a parameterized edge dominating set instance @xmath143 to another instance @xmath144 such that @xmath145 in the graph in linear time .",
    "let @xmath146 , then we may assume that @xmath147 otherwise @xmath148 solves the problem directly .",
    "let @xmath149 since @xmath148 is a maximal matching , we know that @xmath150 is an independent set . for a vertex @xmath151 , let @xmath152 .",
    "we call vertex @xmath151 _ overloaded _ , if @xmath153 .",
    "let @xmath154 be the set of overloaded vertices .",
    "[ overloaded ] let @xmath3 be an edge dominating set @xmath3 of size at most @xmath4 . then @xmath155    if an overloaded vertex @xmath156 then all neighbors of @xmath157 are in @xmath30 . note that at least one endpoint of each edge in @xmath148 must be in @xmath30 and that @xmath158 and @xmath159 are disjoint .",
    "therefore , @xmath160 . since @xmath157 is an overloaded vertex we have that @xmath161 .",
    "this implies that @xmath162 which is a contradiction .",
    "lemma  [ overloaded ] implies that all overloaded vertices must be in the vertex set of the edge dominating set .",
    "we _ label _",
    "these vertices to indicate that these vertices are in the vertex set of the edge dominating set .",
    "we also label a vertex @xmath45 which is adjacent to a vertex of degree one .",
    "our kernelization algorithm is presented in fig .",
    "[ kernel ] . in the algorithm",
    "the set @xmath163 denotes the set of labeled vertices .",
    "the correctness of the algorithm follows from the following observations .",
    "assume that there is a vertex @xmath164 only adjacent to labeled vertices .",
    "then we can delete it from the graph without increasing the size of the solution .",
    "the reason is this .",
    "let @xmath165 be an edge that is in the edge dominating set of the original graph where @xmath80 is a labeled vertex .",
    "then we can replace @xmath165 with another edge that is incident with @xmath80 to get an edge dominating set of the new graph .",
    "this is formulated in the reduction rule in line  4 of the algorithm .",
    "we add a new edge for each labeled vertex in line  5 to enforce that the labeled vertices are selected in the vertex set of the edge dominating set .",
    "4= @xmath84    it is easy to see that each step of the algorithm can be implemented in linear time .",
    "therefore , the algorithm takes linear time .",
    "we analyze the number of vertices in the new graph @xmath166 returned by algorithm @xmath167 .",
    "note that @xmath163 is a subset of @xmath168 .",
    "let @xmath169 .",
    "let @xmath170 be the number of edges between @xmath150 and @xmath171 .",
    "then    @xmath172 let @xmath173 each vertex in @xmath174 is adjacent to a vertex in @xmath171 .",
    "since there are at most @xmath170 edges between @xmath174 and @xmath171 we have @xmath175    notice that all vertices of @xmath176 have only neighbors in @xmath163 . in line 4",
    "the algorithm deletes all vertices that have only neighbors in @xmath163 . in line 5",
    "the algorithm adds a new vertex @xmath177 and a new edge @xmath178 for each vertex @xmath45 in @xmath163 .",
    "thus @xmath176 is the set of new vertices that are added in line 5 .",
    "this proves @xmath179    the total number of vertices in the graph is @xmath180    note that the maximal value of @xmath181 as a function of @xmath11 is attained for @xmath182 .",
    "so the function @xmath181 is decreasing for @xmath183 .    to obtain a bound for the number of edges we partition the edge set into three disjoint sets .    1 .",
    "let @xmath184 be the set of edges with two endpoints in @xmath168 ; 2 .",
    "let @xmath185 be the set of edges between @xmath163 and @xmath150 , and 3 .",
    "let @xmath186 be the set of edges between @xmath171 and @xmath150 .",
    "it is easy to see that @xmath187 by the analysis above @xmath188 algorithm @xmath189 runs in linear time and linear space and it returns a kernel with at most @xmath190 vertices and @xmath7 edges .",
    "there are standard techniques to reduce the _ parameterized maximal matching problem _ that finds a maximal matching of size @xmath4 in a graph to the parameterized edge dominating set problem without increasing the input size and the parameter  @xcite . by theorem",
    "we have    [ corollary 1 ] the parameterized maximal matching problem can be solved in @xmath6 time and polynomial space .",
    "another related problem is the _",
    "parameterized matrix domination problem_. let @xmath3 be an @xmath191 matrix with entries being @xmath192 or @xmath69 and let @xmath4 be an integer @xmath4 .",
    "the problem is to find a subset @xmath193 of the @xmath69-entries in @xmath3 such that @xmath194 and every row and column of @xmath3 contains at least one @xmath69-entry in @xmath193 .",
    "a parameterized matrix domination instance reduces directly to a parameterized edge dominating set problem in a bipartite graph  @xcite .",
    "[ corollary 2 ] the parameterized matrix domination problem can be solved in @xmath6 time and polynomial space .",
    "99 cardinal ,  j. , s.  langerman , e.  levy , improved approximation bounds for edge dominating set in dense graphs , _ theor .",
    "sci . _ * 410 * ( 2009 ) , pp .",
    "949957 .",
    "fernau , h. , edge dominating set : efficient enumeration - based exact algorithms , in ( h.  bodlaender , m.  langston eds . ) , _ proceedings iwpec _ , springer - verlag lncs  4169 ( 2006 ) , pp .  142153 .",
    "fomin ,  f. , s.  gaspers , s.  saurabh , a.  stepanov , on two techniques of combining branching and treewidth , _ algorithmica _ * 54*(2 ) ( 2009 ) , pp .",
    "181207 .",
    "fujito , t. , h.  nagamochi , a 2-approximation algorithm for the minimum weight edge dominating set problem , _ discrete applied mathematics _",
    "* 118*(3 ) ( 2002 ) , pp .",
    "19207 .",
    "garey ,  m.r . , d.  s.  johnson , _ computers and intractability : a guide to the theory of np - completeness _ ,",
    "freeman , san francisco , 1979 .",
    "johnson ,  d. , m.  yannakakis , c.  papadimitriou , on generating all maximal independent sets , _",
    "information processing letters _ * 27*(3 ) ( 1988 ) , pp .  119123 .",
    "moon ,  j.  w. and l.  moser , on cliques in graphs , _ israel j. math . _",
    "* 3 * ( 1965 ) , pp .",
    "prieto ,  e. , _ systematic kernelization in fpt algorithm design _ ,",
    "phd - thesis , the university of newcastle , australia , 2005 .",
    "randerath ,  b. , i.  schiermeyer , exact algorithms for minimum dominating set . technical report zaik 2005 - 501 , universitt zu kln , germany , 2005 .",
    "raman , v. , s.  saurabh , s.  sikdar , efficient exact algorithms through enumerating maximal independent sets and other techniques , _ theory of computing systems _ * 42*(3 ) ( 2007 ) , pp .",
    "563587 .",
    "rooij ,  j.  m. , h.  l.  bodlaender , exact algorithms for edge domination , in ( m.  grohe , r.  niedermeier , eds . ) , _ proceedings iwpec _ , springer - verlag lncs  5018 ( 2008 ) , pp .",
    "214225 .",
    "xiao ,  m. , a simple and fast algorithm for maximum independent set in 3-degree graphs , in ( md .  s.  rahman and s.  fujita , eds . ) , _ proceedings walcom _ , springer - verlag lncs  5942 ( 2010 ) , pp .  281292 .",
    "xiao ,  m. , h.  nagamochi , exact algorithms for annotated edge dominating set in cubic graphs .",
    "tr 2011 - 009 .",
    "kyoto university .",
    "a preliminary version appeared as : m.  xiao , exact and parameterized algorithms for edge dominating set in 3-degree graphs , in ( w.  wu , o.  daescu , eds . ) , _ proceedings cocoa _ , springer - verlag lncs  6509 ( 2010 ) , pp .",
    "387400 .",
    "xiao ,  m. , h.  nagamochi , parameterized edge dominating set in cubic graphs , _",
    "proceedings faw - aaim _ , springer - verlag lncs  6681 ( 2011 ) .",
    "yannakakis , m. , f.  gavril , edge dominating sets in graphs , _ siam j. appl . math .",
    "* 38*(3 ) ( 1980 ) , pp .",
    "in this section , we analyze algorithm @xmath129 presented in fig .",
    "[ eds3d ] and we prove lemma  [ lemma 3 g ] . initially @xmath195 $ ] contains no component that is a 2-path .",
    "we prove that in each line of step 3 , algorithm @xmath129 branches with ( [ equation 3 g ] ) , or with a better recurrence , without leaving any newly - created 2-path components . to be exact ,",
    "some 2-path components may be created but they are removed immediately by an application of line  2 in the following step . in the analysis we merge these operations into one recurrence .",
    "we limit the number of @xmath55-paths that are created in each step to prove the upperbound on the run - time .",
    "[ lemma path ] if there is a path component @xmath60 of length @xmath96 in @xmath196 $ ] then algorithm @xmath129 branches with the following recurrences until @xmath197 contains no more vertices of @xmath60 .",
    "@xmath198    let @xmath60 be the path @xmath199 . the algorithm branches on tails of paths .",
    "it is easy to see that formulas  ( [ equation 1 - 2 ] ) , ( [ equation 2 - 2_1 ] ) and ( [ equation 2 - 3 ] ) hold . when @xmath200 , we first branch on @xmath201 . in the branch",
    "where @xmath201 is included into the vertex cover @xmath19 , we get a clique component @xmath202 and a @xmath55-path @xmath203",
    ". then we can further reduce @xmath24 by at least one from @xmath202 and branch with ( [ equation 1 - 2 ] ) on @xmath203 . in the branch",
    "where @xmath201 is included into the independent set @xmath31 , @xmath204 and @xmath205 are included into @xmath19 and we end up with two clique component @xmath130 and @xmath206 .",
    "then @xmath24 reduces further by at least one from @xmath206 . summarizing the above leads to formula  ( [ equation 3 - 3 - 4 ] ) .",
    "when @xmath207 then , no matter whether @xmath201 is included into the vertex cover @xmath19 or not , @xmath24 reduces by at least two .",
    "then , in the first branch the algorithm branches further on an @xmath208-path and in the second branch it branches further on an @xmath209-path .",
    "this leads to formulas  ( [ equation 3 - 4 - 4 - 4 ] ) and  ( [ equation 34 - 5 ] ) .    to prove formula  ( [ equation 35 - 46 ] ) we use induction on @xmath96 .",
    "assume that for all @xmath210 the inequality holds true .",
    "we prove that ( [ equation 35 - 46 ] ) also holds true for @xmath211 , where @xmath212 . in the branch",
    "where @xmath201 is included into the vertex cover @xmath19 , the algorithm branches further on an @xmath213-path . in the branch where @xmath66 is not included into the vertex cover , the algorithm continues branching on an @xmath214-path .",
    "we have that @xmath215 . the worst recurrence among  ( [ equation 2 - 3 ] ) , ( [ equation 3 - 3 - 4 ] ) , ( [ equation 3 - 4 - 4 - 4 ] ) , ( [ equation 34 - 5 ] ) and ( [ equation 35 - 46 ] ) is formula  ( [ equation 3 - 4 - 4 - 4 ] ) and",
    "the second worst recurrence is formula  ( [ equation 35 - 46 ] ) .",
    "furthermore , ( [ equation 3 - 3 - 4 ] ) is worse than ( [ equation 34 - 5 ] ) . thus the two branches that occur after branching on @xmath66 are bounded as follows .",
    "assume that @xmath216 $ ] contains a component which is a cycle @xmath217 of length @xmath96 .",
    "if the cycle is a @xmath58-cycle , the algorithm moves it to @xmath32 without branching since it is a clique .",
    "if the cycle is a @xmath74-cycle then according to lemma  [ 4-cycle ] the algorithm branches with formula  ( [ equation 2 - 2 ] ) . if the cycle is a cycle of length at least five , the algorithm selects a vertex and branches on it .",
    "subsequently , it branches on the paths created in each subbranch . by lemma  [ lemma path ]",
    "we obtain the following recurrences for @xmath95 .",
    "straightforward computations yield formulas  ( [ equation c4 ] ) , ( [ equation c5 ] ) and ( [ equation c6 ] ) .",
    "we prove ( [ equation c7 ] ) .",
    "in the two branches we get two paths of length @xmath219 and @xmath220 . formulas  ( [ equation 3 - 4 - 4 - 4 ] ) and ( [ equation 35 - 46 ] ) are the two worst recurrences among ( [ equation 2 - 2_1 ] ) , ( [ equation 2 - 3 ] ) , ( [ equation 3 - 3 - 4 ] ) , ( [ equation 3 - 4 - 4 - 4 ] ) , ( [ equation 34 - 5 ] ) and ( [ equation 35 - 46 ] ) .",
    "this gives formula  ( [ equation c7 ] ) .",
    "assume @xmath45 is a degree-@xmath58 vertex with two degree-@xmath69 neighbors in @xmath216 $ ] .",
    "the algorithm selects @xmath45 and branches ; either it includes @xmath45 into @xmath19 or it includes @xmath45 into @xmath31 ( and adds @xmath222 to @xmath19 ) .",
    "we are interested in the number of @xmath55-paths that are created in each branch . in the first branch at most one @xmath55-path component",
    "is created .",
    "if this occurs then the second branch creates no @xmath55-path .",
    "let the pair @xmath223 denote that there are @xmath80 @xmath55-paths created in the first branch and @xmath82 @xmath55-paths created in the second branch .",
    "then the possible values for @xmath223 are @xmath224 , @xmath225 , @xmath226 and @xmath227 .    once a @xmath55-path component is created the algorithm branches on it . in the first case",
    "this gives a recurrence @xmath228 and it leaves no @xmath55-path component . in the second case the algorithm branches with @xmath229 and it leaves no @xmath55-paths . in the third case the algorithm branches with @xmath230 this case leaves no @xmath55-paths .",
    "it is easy to see the above three recurrences are covered by ( [ equation 233 ] ) .      in case  @xmath80 the first branch after deleting @xmath45 has a path of length @xmath99 and then the algorithm branches further according to recurrence  ( [ equation 3 - 4 - 4 - 4 ] ) . in the second branch",
    "the algorithm branches further on two @xmath55-paths with the recurrence @xmath231 summarizing , we get @xmath232    in case  @xmath82 the first branch after deleting @xmath45 causes the algorithm to branch further on a degree-@xmath58 vertex and so on .",
    "we obtain the recurrence @xmath233 in the second branch of case  @xmath82 the algorithm branches further on two @xmath55-paths . putting these together we obtain @xmath234    in case  @xmath81 , in the first branch after deleting @xmath45 the algorithm branches on a degree-@xmath58 vertex and so on .",
    "this yields @xmath235 in the second branch of case  @xmath81 the algorithm branches on two @xmath55-paths .",
    "if we take them together we get @xmath236            assume that @xmath68 is the tail and @xmath66 is a degree-@xmath55 vertex in @xmath196 $ ] . the algorithm branches on @xmath66 by including it into @xmath19 or including it into @xmath31 ( and including its neighbors into @xmath19 ) .",
    "we consider the number of @xmath55-paths that are created in each branch . if the component that contains the tail is a @xmath97-path , then the algorithm branches on it according to recurrence  ( [ equation 3 - 3 - 4 ] ) .",
    "otherwise , it is impossible to create a @xmath55-path component after removing @xmath66 .",
    "there are at most two @xmath55-path components created in the second branch since there is no degree-@xmath58 vertex adjacent to two degree-@xmath69 vertices",
    ". if only one @xmath55-path component is created , the algorithm branches according to @xmath239 if two @xmath55-path components are created the algorithm branches with @xmath240 all the recurrences above are weaker than @xmath241 .",
    "this proves the lemma .",
    "assume that @xmath45 is a degree-@xmath58 vertex having one degree-@xmath69 neighbor in @xmath196 $ ] .",
    "the algorithm branches on @xmath45 by including it into @xmath19 or including it into @xmath31 . since line  3.1 and line  3.2 do no longer apply we can simply assume that in @xmath196 $ ] there is no more degree-@xmath58 vertex adjacent to two degree-@xmath69 vertices nor any tail @xmath68 with @xmath66 being a degree-@xmath55 vertex .",
    "let @xmath242 be a @xmath55-path created after removing @xmath45 ( or @xmath46 ) .",
    "then there are at least two edges between @xmath243 and @xmath45 ( or @xmath46 ) otherwise , before branching on @xmath45 the condition of line  3.1 or line  3.2 holds .",
    "this implies that , after removing @xmath45 , at most one @xmath55-path component is created .      if no @xmath55-path component is created in the first branch then at most two @xmath55-path components are created in the second branch . in the worst case we first branch on the degree-@xmath58 vertex @xmath45 and then branch on two @xmath55-path components in the second branch with @xmath245 therefore ,",
    "we get @xmath246 it follows that the worst recurrence is @xmath241 .",
    "let @xmath247 be a @xmath74-cycle in @xmath196 $ ] , the algorithm branches by including @xmath64 and @xmath248 or by including @xmath66 and @xmath249 into the vertex cover .",
    "note that after line  3.5 there are no more degree-@xmath69 vertices in @xmath196 $ ] .",
    "thus in each branch at most one @xmath55-path component is created .",
    "therefore , the algorithm branches first with @xmath250 for the @xmath74-cycle and then it possibly branches further on a @xmath55-path in each branch .",
    "this leads to the recurrence @xmath251 this is covered by @xmath241 .          in the second branch , where @xmath46 is moved into @xmath19 , there are at most two @xmath55-path components created .",
    "note that for any @xmath55-path component @xmath242 that is created after removing @xmath46 there are at least two edges between @xmath243 and @xmath46 , and at least one vertex in @xmath46 is a degree-@xmath55 vertex .",
    "therefore , we have ( [ equation b3b22 ] ) as an upperbound .",
    "notice that lemmas  [ lemma step3.1 ] , [ lemma step3.2 ] , [ lemma step3.3 ] , [ lemma step3.4 ] , [ lemma step3.5 ] and [ lemma step3.6 ] guarantee that , if any of the lines  3.1 - 3.6 are called , the algorithm branches according to formula  ( [ equation 3 g ] ) .    in line  3.7",
    "the induced subgraph @xmath196 $ ] has only two kinds of components : each component is either a cycle or a @xmath58-regular graph without any @xmath74-cycle .",
    "lemma  [ lemma cycle ] proves that the branching on a cycle gives a recurrence which is no worse than  ( [ equation 3 g ] ) .",
    "now we may assume that there are only @xmath58-regular components .",
    "in this case the algorithm selects an arbitrary vertex @xmath45 and branches on it .",
    "according to the analysis in the proof of lemma  [ lemma step3.6 ] no @xmath55-path components are created after removing @xmath45 . in the branch where @xmath46 is removed at most one @xmath55-path is created .",
    "note that for any @xmath55-path component @xmath242 , created after removing @xmath46 , there are five edges between @xmath243 and @xmath46 , because each vertex is a degree-@xmath58 vertex before the branching . in the worst case the algorithm still branches with @xmath252",
    "this is weaker than formula  ( [ equation 3 g ] ) ."
  ],
  "abstract_text": [
    "<S> an edge dominating set of a graph @xmath0 is a subset @xmath1 of edges in the graph such that each edge in @xmath2 is incident with at least one edge in @xmath3 . in an instance of the parameterized edge dominating set problem </S>",
    "<S> we are given a graph @xmath0 and an integer @xmath4 and we are asked to decide whether @xmath5 has an edge dominating set of size at most @xmath4 . in this paper we show that the parameterized edge dominating set problem can be solved in @xmath6 time and polynomial space . we show that this problem can be reduced to a quadratic kernel with @xmath7 edges . </S>"
  ]
}