{
  "article_text": [
    "the capacitated vehicle routing problem ( @xmath3 ) is an extensively studied combinatorial optimization problem ( see e.g. , the book  @xcite and references therein ) . @xmath3is defined on a metric space @xmath4 , where @xmath5 is a finite set of locations / vertices and @xmath6 a distance function that is symmetric and satisfies triangle inequality .",
    "there is a depot vertex @xmath7 that contains an infinite supply of an identical item , and each vertex @xmath8 demands some units @xmath9 of this item .",
    "a single vehicle of capacity @xmath10 is used to distribute the items .",
    "the objective is to find a minimum length tour of the vehicle that satisfies all demands subject to the constraint that the vehicle carries at most @xmath11 units at any time .",
    "@xmath3is closely related to the traveling salesman problem ( @xmath12 ) .",
    "it is clear that @xmath3reduces to @xmath12 in the absence of capacity constraint .",
    "more interestingly , a reverse relation is also known  essentially the best known approximation algorithm for @xmath3  @xcite achieves a guarantee of @xmath13 , where @xmath14 is the best approximation ratio for @xmath12 . in practice",
    ", it is natural to have a fleet of _ multiple _ vehicles that can run in parallel .",
    "the objective can then be to either minimize the sum of completion times of all the vehicles or to minimize the maximum completion time over all vehicles ( or the makespan of the routing ) .",
    "furthermore the vehicles can all be identical ( same speed ) or heterogeneous ( have different speeds ) . in either case , it is not hard to see that the total completion time objective reduces to the usual @xmath3on a single maximum - speed vehicle , and constant - factor approximation algorithms readily follow .    when the objective is to minimize the makespan with identical vehicles , ideas for approximating the regular @xmath3problem using a tour - splitting heuristic introduced by frederickson et al .",
    "@xcite can be easily adapted to derive a constant - factor approximation algorithm ( see below ) .",
    "this motivates the _ heterogenous capacitated vehicle routing problem _ ( @xmath15 ) that we consider . in this problem , a fleet of @xmath1 vehicles with",
    "non - uniform speeds _ and uniform capacities is initially located at the depot vertex @xmath0 .",
    "the objective is to satisfy the demands subject to the capacity constraints while minimizing the makespan .",
    "our main result is a constant - factor approximation algorithm for @xmath15 .",
    "most of our algorithmic ideas lie in solving the special case of @xmath15when there is no capacity constraint .",
    "this problem , which we call @xmath16 , is a generalization of @xmath12that might be of independent interest . for most of this paper ,",
    "we will focus on obtaining a constant - factor approximation for @xmath16 .",
    "* tour - splitting solutions : * to illustrate the use of known techniques , we outline how to obtain a constant - factor approximation algorithm for @xmath16with uniform speeds  @xcite .",
    "first , notice that the union of the tours of @xmath17 connects all vertices , and hence a minimum spanning tree has length at most @xmath18 .",
    "then consider an @xmath19 , duplicate its edge and take an euler tour @xmath20 , which is of length @xmath21 .",
    "now split @xmath20 into @xmath1 segments of lengths at most @xmath22 by removing edges .",
    "finally , the tour for the @xmath23 vehicle is obtained by connecting both endpoints of the @xmath23 segment of @xmath20 to the depot .",
    "since twice the distance from the depot to any vertex is a lower bound on @xmath17 , the length of each tour is at most @xmath24 and hence this solution is a 3-approximation .",
    "we remark that this can be extended to obtain an @xmath25-approximation for @xmath15with uniform speeds ( e.g. , using theorem  [ th : vrptotsp ] in section  [ sec : hvrp ] ) .    at a very high level",
    ", this strategy has two main components : ( 1 ) partitioning an @xmath19into manageable - sized connected parts ; ( 2 ) assigning these parts to vehicles .",
    "this simple idea  which was already present in the 70s  is the central piece of many heuristics and approximations for vehicle routing problems ( e.g. ,  @xcite ) .",
    "however , it is not clear how to employ this technique in the presence of vehicles with multiple speeds .",
    "this is because the two main components now need some correlation : a small part of the @xmath19 , which should be assigned to a slower vehicle , must also be relatively closer to the depot in order to be reachable by this vehicle .",
    "* set - cover based solutions : * for @xmath16with non - uniform speeds , previous approaches seem to give only a logarithmic approximation , as follows .",
    "guess the optimal makespan @xmath26(within a constant factor ) .",
    "if each vehicle of speed @xmath27 is given a length budget of @xmath28 , then the vehicles can collectively cover all vertices .",
    "using an approximation algorithm for @xmath1-@xmath19  @xcite ( or the related orienteering problem  @xcite ) within a maximum - coverage framework ( see e.g ..",
    "@xcite ) , we can obtain tours of length @xmath26that cover a constant fraction of all vertices .",
    "repeating this coverage step until all vertices are covered gives a solution to @xmath16of makespan @xmath29 .",
    "the intrinsic problem of this approach is that it is too general  in fact , the above algorithm also yields a logarithmic approximation even in the setting where the metric faced by each vehicle is arbitrary ( instead of just scaling by its speed ) , and this generalization of @xmath16can be shown to be set - cover hard .",
    "it is unclear whether the approximation of this set - covering based approach can be improved for @xmath16 .",
    "we extend the first tour - splitting approach described above to obtain the following result .",
    "there are constant - factor approximation algorithms for @xmath16and @xmath15 .    in order to obtain the approximation for @xmath16",
    ", we abstract the requirements of the two components in the tour - splitting strategy . as a preprocessing step",
    ", we round the speeds of vehicles to powers of two and guess the optimum makespan @xmath30 .",
    "first , we specify conditions which guarantee that a collection of @xmath0-rooted trees is `` assignable '' , that is , each vehicle can visit the nodes of the trees assigned to it within time @xmath31 ( definition  [ def : assignable ] ) .",
    "the conditions in definition  [ def : assignable ] are based on the lp to obtain a 2-approximation for _ scheduling in unrelated parallel machines _ by lenstra et al .",
    "@xcite .",
    "secondly , instead of partitioning an @xmath19as in the previous section , we consider more structured spanning trees which we call level - primtrees .",
    "consider grouping the vertices ordered according to their distance from @xmath0 into levels , where the @xmath32th level includes all vertices within distance @xmath33 .",
    "can only be served by vehicles of speed @xmath34 or higher given the makespan bound @xmath30 .",
    "] the level - primtree is simply the tree resulting from running prim s algorithm with the restriction that all nodes in a level are spanned before starting to pull in nodes from the next .",
    "a level - primtree has two important properties : ( i ) the vertices along every root - leaf path are monotonically nondecreasing in level and ( ii ) for every suffix of levels , the subgraph induced on it costs at most @xmath25 times its induced @xmath19 .",
    "the first condition , which is the departing point from @xmath19s , greatly simplifies the decomposition procedure carried in the next step .",
    "the second property is related to the assignability conditions in definition  [ def : assignable ] and guarantees that the we can decompose a level - primtree into an assignable collection .",
    "these properties are formalized in theorem  [ thm : lprim ] .",
    "the level - primconstruction combine both @xmath19and shortest - path distances from a root , so it is not surprising that this structure is related to _",
    "light approximate shortest - path trees _ ( last ) introduced by khuller et al .",
    "indeed , we use the existence of a suitably defined lastin proving theorem  [ thm : lprim ] .",
    "we remark , however , that the properties guaranteed by lasts are not enough for our purposes ( see section [ sec : levelprim ] ) .    the third main component of our approximation for @xmath16is decomposing level - priminto an assignable collection of @xmath0-rooted trees . roughly , we partition the edges of level - priminto subtrees while ensuring that each subtree consisting of vertices in levels up to @xmath32 ( and hence is at a distance of about @xmath33 from the root ) also has length approximately @xmath33 , and thus can be assigned to a vehicle of speed about @xmath34 .",
    "this partition , which relies on the two properties of level - prim , gives a collection of _ unrooted _ trees which is assignable .",
    "due to the length of these trees , the extra distance to connect them to the root @xmath0 can be charged to their edges , hence this collection can be turned into a @xmath0-rooted assignable collection .    in order to obtain an approximation to @xmath15 , we reduce this problem to approximating @xmath16 in a suitably modified metric space .",
    "this new distance function encodes any additional trips to and from the root that a vehicle has to make if it runs out of capacity .",
    "the exact transformation is presented in section  [ sec : hvrp ] .      for the @xmath3 , the best known approximation ratio  @xcite is essentially @xmath13 where @xmath14 is the best guarantee for @xmath12 .",
    "the current best values for @xmath14 are @xmath35 for general metrics  @xcite , and @xmath36 ( for any constant @xmath37 ) for constant dimensional euclidean metrics  @xcite .",
    "this has been improved slightly to @xmath38 when @xmath39  @xcite .",
    "recently , das and mathieu  @xcite gave a quasi - polynomial time approximation scheme for @xmath3on the euclidean plane .",
    "several variants of @xmath12have been studied , most of which have a min - sum objective .",
    "one related problem with min - max objective is _ nurse station location _",
    "@xcite , where the goal is to obtain a collection of trees ( each rooted at a distinct depot ) such that all vertices are covered and the maximum tree length is minimized .",
    "even et al .",
    "@xcite gave a 4-approximation algorithm for this problem .",
    "this is based on partitioning the @xmath19and assigning to trees along the lines of section  [ sec : previoustech ] ; their second step , however , involves a non - trivial bipartite matching subproblem .",
    "in proving the properties of level - prim , we use _ light approximate shortest - path trees _ introduced by khuller , raghavachari and young  @xcite , building on the work on shallow - light trees of awerbuch , baratz and peleg  @xcite .",
    "an @xmath40-lastis a rooted tree that has ( a ) length at most @xmath41 times the @xmath19and ( b ) the distance from any vertex to the root ( along the tree ) is at most @xmath42 times the distance in the original metric .",
    "khuller et al .",
    "@xcite showed that every metric has an @xmath43-last(for any @xmath44 ) and this is best possible .",
    "one phase of our algorithm uses some ideas from scheduling on parallel machines  @xcite , which also has a min - max objective . in this problem",
    ", job @xmath45 has processing time @xmath46 on machine @xmath32 and the goal is to assign jobs to machines while minimizing the maximum completion time .",
    "lenstra et al .",
    "@xcite gave an lp - based 2-approximation algorithm for this problem .",
    "the input to the _ heterogenous tsp _ ( @xmath16 ) consists of a metric @xmath4 denoting distances between vertices , a depot @xmath7 and @xmath1 vehicles with speeds @xmath2 greater than or equal to 1 .",
    "the goal is to find tours @xmath47 ( starting and ending at @xmath0 ) for each vehicle so that every vertex is covered in some tour and which minimize the _ maximum completion time _ @xmath48 .    at the loss of a factor of two in the approximation",
    ", we assume that the @xmath49 s are all ( non - negative integral ) powers of @xmath50 .",
    "then , for each integer @xmath51 we use @xmath52 to denote the number of vehicles with speed @xmath34 .",
    "we let @xmath26denote the optimal value of this modified instance of @xmath16 .",
    "we let @xmath53 be the complete graph on vertices @xmath5 with edge - weights corresponding to the distance function @xmath54 .",
    "for any set @xmath55 of edges , we set @xmath56 . given any ( multi)graph @xmath57 and a subset @xmath58 of its vertices , @xmath59 $ ] denotes the subgraph induced on @xmath58 and @xmath60 denotes the graph obtained by contracting vertices @xmath58 to a single vertex ( we retain parallel edges ) .",
    "moreover , for any pair of vertices @xmath61 in @xmath57 , we use @xmath62 to denote the length of the shortest path in @xmath57 between @xmath63 and @xmath64 .",
    "assume that we have correctly guessed a value @xmath30 such that @xmath65 .",
    "( this value can be found via binary search and we address this in the end of section [ sec : decomp ] . )",
    "we partition the set of vertices @xmath5 according to their distance to @xmath0 : @xmath66 @xmath67\\ } , \\mbox { for all } i\\ge 0.\\ ] ] the vertices in @xmath68 are referred to as _ level @xmath32 _ vertices . for any @xmath51",
    ", we use @xmath69 as a shorthand for @xmath70 and similarly @xmath71 .",
    "we also define the _ level of an edge _ @xmath72 as the larger of the levels of @xmath63 and @xmath64 . for each @xmath51",
    ", @xmath73 denotes the edges in @xmath74 of level @xmath32 .",
    "note that @xmath75 for all @xmath76 , since both end - points of @xmath77 are in @xmath69 and the triangle inequality bounds its distance by the two - hop path via the root .",
    "we use the notation @xmath78 and @xmath79 .",
    "we start by studying collections of trees that can be assigned to vehicles in a way that each vehicle takes time @xmath31 to visit all of its assigned trees .",
    "[ def : assignable ] a collection of @xmath0-rooted trees @xmath80 covering all vertices @xmath5 is called @xmath40-_assignable _ if it satisfies the following properties .    1 .   for each @xmath51 and every @xmath81 , @xmath82 .",
    "2 .   for each @xmath51 , @xmath83 .    intuitively , the trees in @xmath84 can be assigned to vehicles with speed @xmath34 so as to complete in time @xmath85 .",
    "condition ( 2 ) guarantees that the trees @xmath86 targeted by vehicles of speed @xmath34 and above stand a chance of being handled by them within makespan @xmath87 .",
    "interestingly , these minimal conditions are enough to eventually assign all trees in collection to vehicles while guaranteeing makespan @xmath88 .    [",
    "lem : assignable ] given an assignable collection @xmath80 of @xmath0-rooted trees , we can obtain in polynomial time an @xmath89-approximation for @xmath16 .    to prove this lemma is also possible , but",
    "the route we take reveals more properties of the requirement at hand and could potentially be useful in tackling generalizations of @xmath16 . ] , we show that condition ( 2 ) guarantees the existence of a fractional assignment of trees where each vehicle incurs load at most @xmath90 . then using condition ( 1 ) and a result on scheduling on parallel machines  @xcite , we round this assignment into an integral one while increasing the load on each vehicle by at most @xmath91 .",
    "we loose an extra factor of 2 to convert the trees into routes .    [",
    "[ fractional - assignment . ]",
    "] fractional assignment .",
    "+ + + + + + + + + + + + + + + + + + + + + +    consider the bipartite graph @xmath57 whose left side contains one node for each tree in @xmath92 and whose right side contains one node for each vehicle .",
    "( we identify the nodes with their respective trees / vehicles . )",
    "there is an arc between the tree @xmath81 and a vehicle of speed @xmath93 if @xmath94 .",
    "consider the following @xmath95-matching problem in @xmath57 : for each tree @xmath81 , we set @xmath96 and for each vehicle @xmath63 of speed @xmath93 we set @xmath97 .",
    "a ( left - saturating ) @xmath95-matching is one which fractionally assigns all @xmath98 units of each tree @xmath99 such that no vehicle @xmath63 is assigned more than @xmath100 units .",
    "notice that a feasible @xmath95-matching gives a fractional assignment of trees where each vehicle incurs load at most @xmath90 .",
    "then our goal is to show the existence of a @xmath95-matching in @xmath57 . using a standard generalization of hall s theorem ( e.g. ,",
    "see page 54 of @xcite ) , we see that @xmath57 has a feasible @xmath95-matching iff for every set @xmath5 of trees , @xmath101 is at most @xmath102 , where @xmath103 is the neighborhood of @xmath5 .",
    "however , the structure of @xmath57 allows us to focus only on sets @xmath5 which are equal to @xmath104 for some @xmath32 . contains a tree in @xmath84 then @xmath103 already contains all vehicles of speed @xmath93 for @xmath94 . then adding to @xmath5 extra trees in @xmath104 does not change its neighborhood and thus leads to a dominating inequality . ] using this revised condition , @xmath57 has a @xmath95-matching iff for all @xmath32 , @xmath105 . since this is exactly condition ( 2 ) in definition",
    "[ def : assignable ] , it follows that @xmath57 indeed has a @xmath95-matching ( which can be obtained in polynomial time using any maximum flow algorithm  @xcite ) .",
    "[ [ scheduling - parallel - machines . ] ] scheduling parallel machines .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we show how to round the fractional assignment obtained in the previous section .",
    "we consider each tree as a `` job '' and each vehicle as a  machine \" , where the `` processing time '' @xmath106 of a tree @xmath99 in a vehicle @xmath63 of speed @xmath93 is @xmath107 ; then the `` makespan '' of a vehicle is exactly equal to the sum of the processing times of the trees assigned to it .",
    "let @xmath108 denote the fraction of tree @xmath99 assigned to vehicle @xmath63 given by scaling down a @xmath95-matching in @xmath57 ( i.e. , if the matching assigns @xmath54 units of @xmath99 to vehicle @xmath63 , we have @xmath109 ) .",
    "the feasibility of the matching gives @xmath110 for all @xmath63 .",
    "moreover , by construction of the edges of @xmath57 , @xmath111 for @xmath81 implies that @xmath63 has speed at least @xmath112 .",
    "then using property ( 1 ) of assignable trees we get that @xmath111 implies @xmath113 .",
    "these two properties guarantee that @xmath114 is a feasible solution for the natural lp formulation for the scheduling problem with a feasible makespan value of @xmath90 and the maximum processing time @xmath115 set to @xmath116 .",
    "theorem 1 of @xcite then asserts that @xmath114 can be rounded into an integral assignment of trees to vehicles such that the load on any vehicle is at most @xmath117 .",
    "as in section [ sec : previoustech ] , we can transform each tree in @xmath118 into a cycle while at most doubling its length , which then gives a @xmath119 approximation for @xmath16 .",
    "this concludes the proof of lemma [ lem : assignable ] .      in order to obtain an assignable collection of @xmath0-rooted trees for our instance , we formally introduce level - primtrees .",
    "these are the trees obtained by the the following procedure .",
    "[ alg : stagei ]    for each @xmath120 , let @xmath121 be an @xmath19for @xmath122 / v _ { < i}$ ] . @xmath123 .",
    "note that level - primtrees can alternately be defined by modifying prim s algorithm such that nodes in level @xmath32 are only considered to be added to the tree after all nodes in levels below @xmath32 have already been added .",
    "[ thm : lprim ] a level - primtree @xmath124 satisfies the following :    the vertex - levels along every root - leaf path are non - decreasing .    for each @xmath51 , @xmath125 .",
    "note that the second property in theorem  [ thm : lprim ] mirrors the second property in definition  [ def : assignable ] .",
    "a formal connection between the two is established via the following lemma that uses an optimal vehicle routing solution to derive a feasible spanning tree connecting a suffix of the level sets .",
    "[ lem : lb ] for each level @xmath126 , @xmath127 .",
    "consider an optimal solution for @xmath16and let @xmath128 be the set of edges traversed by vehicles in this solution ; label each edge in @xmath128 by the vehicle that traversed it .",
    "clearly @xmath128 connects all vertices to the root @xmath0 .",
    "observe that only vehicles having speed at least @xmath129 can even reach any vertex in @xmath130 ( since a vehicle of speed @xmath27 travels distance at most @xmath131 ) .",
    "thus every edge in @xmath132 must be labeled by some vehicle of speed at least @xmath129 .",
    "this implies that @xmath133 , since the right hand side is a bound on the total length traversed by vehicles having speed at least @xmath129 .    on the other hand ,",
    "since @xmath128 connects all vertices , @xmath132 contains a spanning tree of @xmath134 .",
    "thus we have @xmath135 .",
    "we then get the following corollary of theorem  [ thm : lprim ] .",
    "[ cor : lprim ] a level - primtree @xmath124 satisfies the following :    the vertex - levels along every root - leaf path are non - decreasing .    for each @xmath51 , @xmath136 .",
    "in the rest of this section , we prove theorem  [ thm : lprim ] .",
    "it is easy to see that for every @xmath137 , @xmath138 spans @xmath139 $ ] , hence the procedure produces a spanning tree for @xmath140 .",
    "moreover , by construction we obtain that every root - leaf path in @xmath141 traverses the levels in non - decreasing order as desired .",
    "thus , we focus on proving the second property in the theorem .    instead of comparing the length of the edges in @xmath141 with an @xmath142",
    ", it turns out to be much easier to use a specific lasttree as proxy for the latter .",
    "the following lastis implicit in the construction given in  @xcite ; for completeness we outline a proof in appendix  [ app : spider ] . recall that a _ spider _ is a tree with at most one vertex ( the center ) having degree greater than two .",
    "[ thm : last ] given any metric @xmath4 with root @xmath0 , there exists a spanning spider @xmath143 with center @xmath0 such that :    for each @xmath8 , the distance from @xmath0 to @xmath63 in @xmath143 is at most @xmath144 .",
    "the length of @xmath143 is at most four times the @xmath19 in @xmath4 , i.e. @xmath145 .",
    "we remark that we can not use a lastdirectly instead of level - primsince the former does not need to have the properties asserted by theorem [ thm : lprim ] ; it is easy to find a lastwhich does not satisfy the first property , while figure [ fig : last ] also shows that the second can also be violated by an arbitrary amount . using these spider",
    "lasts we can obtain the main lemma needed to complete the proof of theorem [ thm : lprim ] .    [",
    "lem : lprim - length ] for any graph @xmath140 and any level - primtree @xmath141 on @xmath140 , we have @xmath146 .",
    "consider a spider last@xmath143 for @xmath140 and let @xmath147denote the set of all root - leaf paths in @xmath143 ; note that @xmath148 is edge - disjoint .",
    "consider any root - leaf path @xmath149 in @xmath147 .",
    "we claim that @xmath150 crosses levels almost in an increasing order .",
    "specifically , there does not exist a pair of nodes @xmath151 with @xmath152 , @xmath153 and @xmath154 .",
    "suppose ( for a contradiction ) that this were the case ; then we would have that @xmath155 where the last inequality uses @xmath156 . on the other hand , @xmath157 since @xmath154",
    "; so we obtain @xmath158 , which contradicts the definition of @xmath143 ( see theorem  [ thm : last ] ) .",
    "now we transform @xmath143 into another spider @xmath159 which traverses levels in non - decreasing order as follows . for each root - leaf path @xmath160 , perform the following modification .",
    "let @xmath161 be the subsequence of @xmath150 consisting of the vertices in _ even numbered _ levels , i.e. each @xmath162 for some @xmath163 .",
    "similarly , let @xmath164 be the subsequence of @xmath150 consisting of the vertices in _ odd numbered _ levels . define two paths @xmath165 ( shortcutting @xmath150 over nodes @xmath166 s ) and @xmath167 ( shortcutting @xmath150 over @xmath168 s ) .",
    "observe that both @xmath169 and @xmath170 cross levels _ monotonically _ : if not then there must be some @xmath152 in @xmath150 with @xmath153 and @xmath171 , contrary to the previous claim .",
    "also , by employing the triangle inequality we have that @xmath172 .",
    "finally define the spider @xmath159 as the union of the paths @xmath173 over all root - leaf paths @xmath174 .    by construction ,",
    "the vertex levels along each root - leaf path of @xmath159 are non - decreasing .",
    "additionally @xmath175 , by theorem  [ thm : last ] .",
    "now partition the edges of @xmath159 as : @xmath176 & \\mbox { if } \\ell=0,\\\\ l'[v_{\\le \\ell}]\\setminus l'[v_{\\le \\ell-1 } ] & \\mbox { if } \\ell\\ge 1 . \\end{array } \\right.\\ ] ]    by the monotone property of paths in @xmath159 , it follows that @xmath177 $ ] is connected for every @xmath126 .",
    "thus @xmath178 is a _ spanning tree _ in graph @xmath139/v_{<\\ell}$ ] . since @xmath179 in the level - primconstruction ,",
    "is chosen to be an @xmath19 in @xmath139/v_{<\\ell}$ ] , we obtain @xmath180 .",
    "so , @xmath181 . this completes the proof of the lemma .    [ [ completing - proof - of - theoremthmlprim . ] ] completing proof of theorem  [ thm : lprim ] .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we now prove the second property in theorem  [ thm : lprim ] .",
    "lemma  [ lem : lprim - length ] directly implies this property for @xmath182 .",
    "for any level @xmath183 consider the graph @xmath184 ; observe that @xmath185 is a level - primtree for @xmath186 ( due to the iterative construction of @xmath187 ) .",
    "thus applying lemma  [ lem : lprim - length ] to graph @xmath186 and its level - prim@xmath185 , we have @xmath188 .      in this section",
    "we decompose a level - primtree into an assignable collection @xmath118 of @xmath0-rooted trees . motivated by corollary [ cor : lprim ] ,",
    "the idea is to essentially break each subgraph @xmath121 into many pieces and connect them to @xmath0 in order to form the set of trees @xmath84 .",
    "more specifically , assume for now that each connected component in @xmath121 is large enough , i.e. has length at least @xmath33 .",
    "then for each @xmath120 , break the connected components of @xmath121 into trees of length approximately @xmath33 ; add to each tree the shortest edge connecting them to @xmath0 and set @xmath84 as the collection of @xmath0-rooted trees obtained . by construction",
    "we get that @xmath118 satisfies the first property of an assignable collection .",
    "moreover , notice that each edge added to connect a tree to the root has approximately the same length as the tree itself ; this guarantees that @xmath189 .",
    "it then follows that the collection @xmath118 is assignable .",
    "notice that it was crucial to break @xmath121 into trees of length at least approximately @xmath34 .",
    "but this is problematic when @xmath121 has a small connected component . in this case",
    "we show that such a small component is always attached to ( `` dangling '' from ) a large enough component in @xmath190 ( otherwise the dangling edge to a much earlier level will already make this component heavy enough not to be small ) ; then we simply treat the small component as an integral part of the latter .",
    "now we formally describe the proposed decomposition procedure",
    ".    * step 1 .",
    "* let @xmath191 contain the subtree @xmath192 .",
    "for each level @xmath193 : partition edges @xmath194 into a collection @xmath195 of ( unrooted ) subtrees such that each subtree contains exactly one edge from @xmath196 to @xmath68 . for any @xmath197 call the unique edge from @xmath196 to @xmath68 its _ head - edge _ @xmath198 .",
    "note that such a partition is indeed possible since @xmath199/v_{<i}$ ] is connected .",
    "any subtree in @xmath195 ( for @xmath51 ) is referred to as a level @xmath32 subtree .",
    "note that head - edges are defined only for subtrees in level @xmath200 and above",
    ".    * step 2 .",
    "* for each level @xmath51 : _ mark _ those @xmath197 that have @xmath201 .",
    "in addition , _ mark _ the tree @xmath202 in @xmath191 .",
    "let @xmath203 and @xmath204 denote the marked and unmarked subtrees in @xmath195 .",
    "* for each level @xmath193 and unmarked @xmath205 : define @xmath206 as the subtree in @xmath207 containing the other end - point of @xmath208 .",
    "[ cl : decomp1 ] for @xmath193 and unmarked @xmath205 , @xmath209 .",
    "moreover , @xmath206 is marked .    since @xmath210 is unmarked in level @xmath193 , @xmath211 .",
    "so the end - point @xmath64 of @xmath208 in @xmath206 satisfies @xmath212 , otherwise @xmath213 .",
    "in particular @xmath214 and thus @xmath215 .    for",
    "the second part of the claim , notice that if @xmath216 then @xmath217 , which is always marked .",
    "so suppose @xmath218 . from the above",
    ", @xmath206 is in level @xmath219 and hence contains a head - edge .",
    "this implies that @xmath206 contains some vertex @xmath220 , namely an end - point of @xmath221 .",
    "but then @xmath222 , where we used @xmath223 since @xmath220 and @xmath224 from above . thus @xmath206 must be marked .",
    "* for each level @xmath51 and marked @xmath225 : define @xmath226 as the set of all unmarked @xmath227 having @xmath228 .",
    "clearly @xmath229 for all @xmath230 .",
    "* for each level @xmath51 and marked @xmath225 : partition the tree @xmath231 into subtrees @xmath232 such that the first @xmath233 trees have length in the range @xmath234 $ ] and @xmath235 has length at most @xmath236 . notice that this is possible since all edges of @xmath231 belong to @xmath237 and hence have length at most @xmath238 .",
    "finally , add the shortest edge from @xmath0 to each of these new subtrees to obtain a collection @xmath239 of @xmath0-rooted trees .",
    "[ cl : decomp2 ] for any @xmath240 , we have @xmath241 .",
    "notice that every @xmath242 consists of a @xmath243 ( for some @xmath244 ) and an edge from @xmath0 to a node in @xmath245 .",
    "since the former has length at most @xmath246 and the latter has length at most @xmath247 , it follows that @xmath248 .",
    "@xmath249 $ ] .",
    "[ cl : decomp3 ]    we break the analysis into two cases depending of @xmath250 .",
    "suppose @xmath251 , namely @xmath239 consists of a single tree @xmath99 . in this case",
    "@xmath252 , where @xmath77 is an edge to @xmath0 .",
    "if @xmath253 then @xmath254 and the result holds directly . if @xmath183 then @xmath255 has a node in @xmath256 and hence @xmath257 . because @xmath255 is marked and different than @xmath202 , the lower bound on its length implies that @xmath258 .",
    "the result follows by adding the length of @xmath231 to both sides .",
    "now suppose @xmath259 .",
    "since all trees in @xmath239 lie in @xmath260 , each edge from the root in @xmath239 has length at most @xmath261 .",
    "so the left hand side is at most @xmath262 .",
    "but for @xmath263 we have @xmath264 , so the last term of the previous expression can be upper bounded by @xmath265 .",
    "this bound is smallest when @xmath266 , which then gives @xmath267 .",
    "this concludes the proof of the claim .",
    "* for each level @xmath51 : define @xmath268 .",
    "the following lemma summarizes the main property of our decomposition procedure .",
    "[ lem : isassignable ] the collection @xmath269 obtained from the above procedure is @xmath270-assignable .    by claim  [ cl : decomp2 ] , each tree in @xmath84 has length at most @xmath271 . so the collection satisfies condition  ( 1 ) of definition  [ def : assignable ] .",
    "fix any @xmath51 for condition ( 2 ) in definition  [ def : assignable ] . due to corollary [ cor : lprim ]",
    ", it suffices to prove that @xmath272 . using claim  [ cl : decomp3 ]",
    "we obtain that @xmath273 = 5\\cdot d(\\subt^m_j ) + 5\\cdot d(\\subt^u_{j+1}).\\ ] ] the last equality above uses the fact that that @xmath274 is a partition of @xmath275 .",
    "thus : @xmath276 this concludes the proof of lemma [ lem : isassignable ] .",
    "[ [ summary - of - the - algorithm . ] ] summary of the algorithm .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + +    our algorithm starts with an initial low guess of @xmath30 and runs the level - primprocedure .",
    "if the second condition in corollary  [ cor : lprim ] does not hold for this run , we double the guess for @xmath30 and repeat until it is satisfied ( this happens the first time that @xmath30 reaches the condition for the correct guess : @xmath65 ) .",
    "we use the decomposition in this section summarized in lemma  [ lem : isassignable ] to obtain a ( 6,40)-assignable collection of trees .",
    "using lemma  [ lem : assignable ] on this collection gives us the desired constant approximation ratio by observing that the guess @xmath30 in this step obeys @xmath277 .",
    "the input to the _ heterogenous cvrp _ ( @xmath15 ) consists of a metric @xmath4 denoting distances between vertices , depot @xmath7 ( containing an infinite supply of items ) , demands @xmath278 and @xmath1 vehicles with speeds @xmath2 , each having capacity @xmath11 . a solution to @xmath15consists of tours @xmath279 ( starting and ending at @xmath0 ) for each vehicle so that all demands are satisfied and each vehicle carries at most @xmath11 items at any point in time .",
    "the objective is to minimize the _ maximum completion time _ ,",
    "we study the `` split - delivery '' version of @xmath3here , where demand at a vertex may be served by multiple visits to it ; however , our result easily extends to the `` unsplit - delivery '' @xmath15 .",
    "we show that the @xmath15problem can be reduced to @xmath16 in an approximation preserving way ; so we also obtain an @xmath25-approximation for @xmath15 . the idea in this reduction",
    "is to modify the input metric based on lower - bounds for @xmath3  @xcite . in order to avoid ambiguity",
    ", we use @xmath281 to denote the optimum for @xmath282 and @xmath283 to denote the optimum for @xmath284 .",
    "[ th : vrptotsp ] consider an instance @xmath285of @xmath15 . there is a poly - time constructible instance @xmath286of @xmath16such that @xmath287 .",
    "moreover , a solution to @xmath286of makespan @xmath30 can be converted in poly - time to a solution to @xmath285with makespan @xmath31 .",
    "let @xmath285be an instance of @xmath15as specified above .",
    "standard scaling arguments can be used to ensure that @xmath11 is polynomial in @xmath288 and @xmath289 for all @xmath290 ( details in the full version ) .",
    "let @xmath53 denote the complete graph on vertices @xmath5 with edge - weights equal to distances @xmath54 .",
    "augment @xmath140 to a new graph @xmath57 by adding vertices @xmath291\\}$ ] , and edges @xmath292\\}$ ] ; each edge @xmath293 has weight @xmath294 . for any vertex @xmath290 , the vertices @xmath295\\}$ ]",
    "are referred to as copies of @xmath64 .",
    "let @xmath296 denote the metric induced on vertices @xmath297 where @xmath137 denotes the shortest - path distances in graph @xmath57 .",
    "we let @xmath286be the instance of @xmath16on metric @xmath296 with depot @xmath0 and @xmath1 vehicles having speeds @xmath2 . since @xmath298 this reduction runs in polynomial time .    for any graph @xmath143 and subset @xmath299 of vertices ,",
    "let @xmath300 denote the minimum length steiner tree connecting @xmath299 .",
    "for any subset @xmath301 and @xmath290 let @xmath302 denote the number of @xmath64-copies in @xmath99 ; also define @xmath303 .",
    "observe that for any @xmath301 we have @xmath304 by the definition of graph @xmath57 .",
    "we first show that @xmath305 .",
    "consider an optimal solution @xmath279 to @xmath285 .",
    "for each @xmath306 $ ] , let @xmath307 $ ] denote the units of demand at vertex @xmath290 served by vehicle @xmath32 , and let @xmath308 .",
    "note that @xmath309 for all @xmath290 ; hence we can choose @xmath310 for each @xmath311 $ ] such that @xmath312 and @xmath313 for all @xmath314 $ ] . since @xmath315 is a capacitated tour in @xmath140 serving demands @xmath316 , we have @xmath317 using the ( connectivity and capacitated routing ) lower - bounds for @xmath3  @xcite .",
    "thus @xmath318 .",
    "now consider the solution to @xmath286where the @xmath23 vehicle visits vertices @xmath319 along the minimum tsp tour on @xmath320 , for all @xmath311 $ ] ; the distance traversed by the @xmath23 vehicle is at most @xmath321 .",
    "so the @xmath16objective value of this solution is at most @xmath322 } \\frac{4\\cdot d(\\sigma_i)}{\\lambda_i}=4\\cdot { \\ensuremath{{\\sf opt_{vrp}}}\\xspace}({\\ensuremath{\\mathcal{i}}\\xspace})$ ] .",
    "now consider a solution @xmath47 to @xmath286with makespan @xmath30 .",
    "let @xmath323 denote the vertices that are served by each vehicle @xmath306 $ ] . since @xmath324 is a tsp tour on @xmath325 , we have @xmath326 . now fix @xmath327 $ ] and consider the instance of @xmath3on vertices @xmath328 with demands @xmath329 . as mentioned in the previous paragraph , @xmath330 is a lower - bound for this instance , and the algorithm from  @xcite returns a solution @xmath315 within a @xmath331 factor of this lower - bound .",
    "it readily follows that @xmath332 is a feasible solution to @xmath285with makespan at most @xmath322 } \\frac{\\rho\\cdot d(\\tau_i)}{\\lambda_i}= o(m)$ ] .",
    "we note that this algorithm returns a _",
    "non - preemptive _ @xmath15solution , i.e. , each item once picked up at the depot stays in its vehicle until delivered to its destination .",
    "moreover , the lower - bounds used by the @xmath15algorithm also hold for the ( less restrictive ) _ preemptive _ version , where items might be left temporarily at different vertices while being moved from the depot to their final destination .",
    "thus our algorithm also bounds the `` preemption gap '' ( ratio of optimal non - preemptive to preemptive solutions ) in @xmath15by a constant .",
    "one interesting open question regards the approximability of @xmath284 and @xmath282 when vehicles are located in multiple different depots across the space .",
    "the current definition of an assignable collection and the definition of level - primcrucially depend on the assumption of a unique depot , hence an extension to the multi - depot case is likely to require new ideas .",
    "another interesting direction is to consider @xmath15with non - uniform capacities , where the ideas presented in section [ sec : hvrp ] do not seem to generalize directly .",
    "we will show that the following algorithm produces an @xmath333-spider for @xmath140 .",
    "consider an @xmath19for @xmath140 and traverse it in preoder to obtain a path @xmath334 such that @xmath335 .",
    "[ alg : shortcutif ] @xmath336 to @xmath299 and * mark * @xmath337 .",
    "[ alg : shortcut ] marked node @xmath337 , remove @xmath338 from @xmath299 .",
    "[ alg : delete ] @xmath339 .      since the algorithm keeps adding edges to the path @xmath341 , it is clear that before step  [ alg : delete ] only the root @xmath342 and marked nodes have degree larger than 2 .",
    "moreover , each marked node has degree exactly 3 .",
    "thus , after step  [ alg : delete ] we have that only the root has degree larger then 2 , and the lemma follows .",
    "first we prove that @xmath343 for all @xmath32 .",
    "to see this , consider @xmath299 right before step [ alg : delete ] .",
    "it follows from step [ alg : shortcut ] that @xmath344 for all @xmath32 . noticing that @xmath340 is a shortest path tree of @xmath299 from node @xmath342 implies the desired result .",
    "now we prove that @xmath340 satisfies the second property of @xmath333-spider .",
    "define @xmath345 and let @xmath346 be the @xmath32th node marked by the algorithm .",
    "it is clear that @xmath347 ; so our goal is to upper bound the last summation .",
    "fix a node @xmath346 . consider the beginning of the iteration where @xmath346 is marked .",
    "notice that at this point @xmath348 , since edge @xmath349 was already added to @xmath299 ; since @xmath341 is subgraph of @xmath299 , it is also clear that the right hand side is at most @xmath350 .",
    "however , since @xmath346 was marked , we have that @xmath351 , and then using the previous bounds we obtain that @xmath352 .    adding the previous inequality over all @xmath346",
    "s we get that @xmath353 noticing that @xmath354 and reorganizing leads to @xmath355 .",
    "finally , notice that @xmath356 : this follows from traversing the path @xmath341 and using the triangle inequality .",
    "this gives the bound @xmath357 ."
  ],
  "abstract_text": [
    "<S> the _ capacitated vehicle routing problem _ ( cvrp )  @xcite involves distributing ( identical ) items from a depot to a set of demand locations , using a single capacitated vehicle . </S>",
    "<S> we study a generalization of this problem to the setting of multiple vehicles having non - uniform speeds ( that we call _ heterogenous cvrp _ ) , and present a constant - factor approximation algorithm .    </S>",
    "<S> the technical heart of our result lies in achieving a constant approximation to the following tsp variant ( called _ heterogenous tsp _ ) . </S>",
    "<S> given a metric denoting distances between vertices , a depot @xmath0 containing @xmath1 vehicles having respective speeds @xmath2 , the goal is to find a tour for each vehicle ( starting and ending at @xmath0 ) , so that every vertex is covered in some tour and the maximum completion time is minimized . </S>",
    "<S> this problem is precisely heterogenous cvrp when vehicles are uncapacitated .    </S>",
    "<S> the presence of non - uniform speeds introduces difficulties for employing standard tour - splitting techniques . in order to get a better understanding of this technique in our context </S>",
    "<S> , we appeal to ideas from the 2-approximation for scheduling in parallel machine of lenstra et al .  </S>",
    "<S> @xcite . </S>",
    "<S> this motivates the introduction of a new approximate mst construction called _ level - prim _ , which is related to _ </S>",
    "<S> light approximate shortest - path trees _  @xcite . </S>",
    "<S> the last component of our algorithm involves partitioning the level - prim tree and matching the resulting parts to vehicles . </S>",
    "<S> this decomposition is more subtle than usual since now we need to enforce correlation between the size of the parts and their distances to the depot . </S>"
  ]
}