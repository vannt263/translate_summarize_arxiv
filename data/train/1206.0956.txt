{
  "article_text": [
    "the write - once memory ( wom ) model was introduced in @xcite to study storage devices consisting of @xmath0-ary ( @xmath1 ) memory cells whose values can not be decreased .",
    "it was originally introduced to model the behavior of optical disks and study coding schemes that would allow one to write data several times on a disk even though each bit can only be written once . by allowing data from a previous write",
    "to be `` forgotten '' when a new write occurs , one can show that the total amount of information that can be stored on such a disk is greater if several small pieces of information are stored and forgotten one after the other than if the whole disk is written at once .",
    "the model is now mainly studied because of its similarity with flash memories , on which the value of a cell can be decreased , but at an extremely high cost . since the original paper by rivest and shamir @xcite , several other works on this topic have appeared , both in terms of code constructions , capacity , and error - correction .",
    "see , for instance , @xcite and references therein .",
    "recently , lattice - based constructions have been proposed .",
    "for instance , in @xcite lattice - based @xmath2-write codes for multilevel cells were presented . for applications to flash memories ,",
    "see @xcite .",
    "the fundamental problem in the wom model is , considering an array of @xmath3 empty @xmath0-ary cells , to know how much information one can store using exactly @xmath2 writes ( also called _ generations _ ) .",
    "the coding schemes that are used to fulfill this goal are called _",
    "@xmath2-write wom codes_. the following definition is taken from @xcite .",
    "an @xmath4_q$ ] @xmath2-write @xmath0-ary wom code @xmath5 is a coding scheme for @xmath3 @xmath0-ary wom cells , which consists of @xmath2 pairs of encoding and decoding mappings @xmath6 and @xmath7 ( @xmath8 ) such that    1 .",
    "2 .   for @xmath10 : * @xmath11 , * @xmath12 , @xmath13 .",
    "3 .   for @xmath8 , @xmath14 , and * @xmath15 , @xmath16 , * for @xmath10 , @xmath17 , @xmath18 .    1 .   @xmath9 .",
    "2 .   for @xmath10 : * @xmath11 , * @xmath12 , + @xmath13 .",
    "3 .   for @xmath8 , @xmath14 , and * @xmath15 , @xmath16 , * for @xmath10 , @xmath17 , @xmath18 .    for simplicity , in the remainder of the paper",
    ", we will refer to wom codes simply as codes .",
    "the rate of the above code , referred to as the wom - rate , or sometimes just as the rate of the code , is defined as follows @xcite .",
    "the rate of generation @xmath19 of an @xmath4_q$ ] @xmath0-ary code @xmath5 is @xmath20 and the wom - rate of @xmath5 is defined as @xmath21    the fundamental problem of the wom model is therefore to find a code of maximum wom - rate given @xmath2 and @xmath0 , and sometimes @xmath3 .    for some codes",
    ", the state of the cells is enough to determine the current generation ( i.e. , how many times the memory has been written ) .",
    "however , some codes have a structure such that the same state of the memory can appear at different generations .",
    "this is not a problem if the same state of the memory at different generations corresponds to the same message , but when it is not the case , the decoder has to be given the knowledge of the current generation in order to successfully decode the memory .",
    "we say that a code is _ decodable _ if for any state of the cells @xmath22 and any @xmath23 and @xmath24 with @xmath25 , @xmath26 .",
    "a code that does not satisfy this property is called _ nondecodable_. a stronger property is given in @xcite : a code is called _ _ synchronous _ _ if the current state of the memory provides enough information to know the current generation , i.e. , the sets @xmath27 are disjoint for @xmath8 .",
    "synchronous codes are decodable .",
    "however , the reverse does not always hold .",
    "the work in @xcite also considers a way to guarantee synchronousness : _ laminar _ codes are codes such that the _ weight _ of the cells , defined as the @xmath28-norm of the @xmath0-ary cell vector , is an injective function of the generation , i.e. , for @xmath29 and @xmath30 , @xmath31 . in the binary case , the weight reduces to the standard hamming weight .",
    "the authors of @xcite give a construction of laminar codes for @xmath32 being a power of two , with wom - rate @xmath33 .",
    "however , synchronous codes have not been extensively studied in the literature .",
    "note that nonsynchronous codes can still be directly decoded if , when the decoder can not determine the current generation , the choice of @xmath7 has no impact on the decoded symbol . in section  [ sec : mainidea ] , we give examples of laminar , synchronous ( but nonlaminar ) , and decodable ( but nonsynchronous ) codes .    a nondecodable @xmath34_2 $ ] binary code @xmath5 can be made decodable ( and even synchronous ) by simply concatenating @xmath35 instances of @xmath5 with a block of @xmath36 cells that store the current generation ( by being filled one by one at each write , starting at the second generation ) .",
    "the resulting code is a synchronous code with parameters @xmath37_2 $ ] . as @xmath35 goes to infinity ,",
    "the wom - rate of this code approaches the wom - rate of the original code , @xmath38 .",
    "most of the state - of - the - art high - rate codes are not _ directly _ decodable .",
    "indeed , a common approach in the literature is to design ( nondecodable ) codes that approach the boundaries of the capacity region ( see , e.g. , @xcite ) , and then make them decodable using the method above . however , for short - to - moderate block lengths , making a nondecodable code decodable by appending @xmath36 cells containing no data can significantly degrade its wom - rate .",
    "for instance , consider @xmath39 and @xmath40 , and assume that we do not know a decodable code of length @xmath41 . in this case , we could select a nondecodable @xmath42-write code of length @xmath43 , and append @xmath43 cells to store the current generation .",
    "the resulting wom - rate is half the original one , as the additional cells only carry information about the current generation .    in this paper , we propose a different approach to make a nondecodable @xmath44-write code @xmath5 decodable .",
    "our main focus is on binary codes , but we also extend our results to @xmath45 . the key idea is to append ( for a @xmath44-write nondecodable binary code of length @xmath46 ) @xmath36 additional cells which store not only the current generation but also new data , by using a @xmath44-write synchronous code with length @xmath36 , and writing generations of @xmath5 and of the synchronous code simultaneously . since synchronous codes are at the basis of the proposed method , we consider first the construction of synchronous codes .",
    "our main focus is on laminar codes .",
    "the construction of synchronous ( laminar ) codes was already addressed in @xcite .",
    "however , @xcite only considered the case where @xmath32 and @xmath2 is a power of @xmath47 . here",
    ", we construct small laminar codes for both @xmath32 and @xmath48 , and propose a construction for synchronous codes of higher values of @xmath2 .",
    "lifting the constraint @xmath32 allows to achieve higher wom - rates .",
    "the obtained codes are then used to make nondecodable codes decodable . whereas the main focus of this paper is on _ unrestricted - rate _",
    "codes @xcite , i.e. , we allow the individual writes to use a different number of inputs , we also extend our construction to _ fixed - rate _",
    "codes , i.e. , codes for which all writes store the same number of messages .",
    "the remainder of this paper is organized as follows . in section  [ sec : mainidea ] , we introduce the main idea to turn nondecodable codes into decodable ones , and provide some examples . in section",
    "[ sec : w(imi)=i ] , we consider a simple family of laminar codes with @xmath32 , as well as very short codes from this family .",
    "we also give bounds on the sizes of their generations , and construct better laminar codes with @xmath48 by local manipulations of the codes with @xmath32 . in section  [ sec : construction ] , we propose a construction of synchronous codes with good properties to reach higher values of @xmath2 by concatenating instances of a synchronous code using a second synchronous code to decide , at each generation , which of the instances of the first code are going to be modified . in section",
    "[ sec : fixed_rate ] , we study the case of fixed - rate codes , and we extend our results on the binary case to nonbinary scenarios in section  [ sec : qary ] . finally , in section  [ sec : results ] , we compare our method of making nondecodable codes decodable with the method that only adds cells containing no data .",
    "some conclusions are drawn in section  [ sec : conclu ] .",
    "let @xmath5 be a nondecodable code with parameters @xmath34_2 $ ] , and wom - rate @xmath49 . the standard approach to turn @xmath5 into a decodable code",
    "is to append @xmath36 cells that store the current generation , thus obtaining a code of length @xmath50 .",
    "this incurs a rate loss @xmath51 the main idea in this paper is very simple : instead of adding cells that do not contain information , we append to the original code cells that also store actual data .",
    "this is achieved by appending to @xmath5 a @xmath44-write synchronous code of length @xmath52 , and writing generations of @xmath5 and of the synchronous code simultaneously . appending a synchronous code to @xmath5 results in an overall decodable ( and also synchronous ) code ( the synchronousness of the appended code guarantees that by observing the @xmath36 new cells , the decoder can always determine the current generation , and use this knowledge to decode the overall code ) , while allowing to store extra data .",
    "let @xmath53 be the wom - rate of the synchronous code that we append to the nondecodable code .",
    "the rate loss introduced by this method , denoted by @xmath54 , is @xmath55 @xmath56 which is smaller than @xmath57 , since we can choose @xmath58 ( or slightly above ) .",
    "note that @xmath54 is decreasing with @xmath59 when @xmath3 , @xmath60 , and @xmath61 are fixed .",
    "the main ingredient of the proposed technique is therefore a @xmath44-write synchronous code of length @xmath36 . to increase @xmath59 one",
    "may also consider synchronous codes with @xmath60 slightly larger than @xmath36 ( the length of the resulting overall code would be slightly larger than that of the code obtained applying the standard method .",
    "however , the increase in length is compensated by a larger wom - rate @xmath59 ) .",
    "the following sections are devoted to the construction of @xmath2-write synchronous codes of length @xmath62 ( or slightly larger ) to be used to make a nondecodable code decodable as explained above .",
    "ideally , we would like to design synchronous codes that maximize the wom - rate .",
    "however , this is overly complex .",
    "instead we first construct small laminar codes , and then propose a construction method to construct synchronous codes for larger values of @xmath2 by concatenating smaller codes .",
    "the use of laminar codes makes the computer search more tractable .    the construction method in section  [ sec : construction ] requires component codes which do not contain the all - zero codeword .",
    "therefore , in section  [ sec : w(imi)=i ] we construct small laminar codes which do not contain the all - zero codeword .",
    "note that for codes that do not contain the all - zero codeword , the number of writes is limited by the code length , @xmath63 .",
    "thus , our approach is to construct @xmath64-write synchronous codes with length @xmath62 from component codes which do not contain the all - zero codeword , and then obtain a @xmath2-write synchronous code with length @xmath62 by simply adding a generation that only contains the all - zero codeword .    to ease the understanding of the paper , in the following we clarify this and the concepts of synchronous , laminar , and decodable ( but not synchronous ) codes with some examples . for later use ,",
    "if an @xmath4_q$ ] code is synchronous , we will frequently use the superscript `` @xmath65 '' ,  @xmath4_q{^{\\mathrm{sync}}}$ ] . also , in the binary case , the cells that can be written from @xmath66 to @xmath67 but not from @xmath67 to @xmath66 are called _ wits _ @xcite .",
    "[ ex : laminar ] an example of a binary @xmath68_2 $ ] laminar code is depicted in fig .",
    "[ fig : example_laminar ] by a state diagram describing all four writes .",
    "the four - bit vector in each state is the memory - state .",
    "the different types of edges ( solid , dashed , dotted , and dash - dotted ) correspond to different input data bits . as can be seen from the figure ,",
    "the weight of the cells uniquely identifies the generation .",
    "a binary @xmath68_2 $ ] laminar four - write code .",
    "the different types of edges ( solid , dashed , dotted , and dash - dotted ) correspond to different input data bits . ]     a binary @xmath68_2 $ ] laminar four - write code .",
    "the different types of edges ( solid , dashed , dotted , and dash - dotted ) correspond to different input data bits . ]",
    "[ ex : sync_not_laminar ] an example of a quaternary @xmath69_4 $ ] synchronous ( but nonlaminar ) code is depicted in fig .",
    "[ fig : example_sync_nonlaminar ] by a state diagram describing all four writes .",
    "the two - symbol vector in each state is the memory - state .",
    "the different types of edges ( solid , dashed , and dotted ) correspond to different input data symbols .",
    "as can be seen from the figure , the cells of the memory can not be in the same state at different generations , which implies that the code is synchronous , but the weight ( or @xmath28-norm ) of the cell state @xmath70 of the third generation and the weight of the cell state @xmath71 ( or @xmath72 ) of the fourth generation are the same .",
    "thus , the weight is _ not _ an injective function of the generation , and the code is not laminar .",
    "a quaternary @xmath69_4 $ ] synchronous ( but nonlaminar ) four - write code .",
    "the different types of edges ( solid , dashed , and dotted ) correspond to different input data symbols . ]     a quaternary @xmath69_4 $ ] synchronous ( but nonlaminar ) four - write code .",
    "the different types of edges ( solid , dashed , and dotted ) correspond to different input data symbols . ]    a simple example of a decodable ( but nonsynchronous ) binary code , taken from @xcite , that enables two bits to be written into three memory cells twice , is given in table  [ table : nonsync ] , which describes the encoding and decoding rules for the code .",
    "the code is nonsynchronous , since for the second write , if the information to be encoded does not change , then the state of the memory does not change either .",
    "thus , the current state of the memory does not provide enough information to tell the current generation .    .a",
    "binary @xmath73_2 $ ] decodable ( but nonsynchronous ) code .",
    "[ cols=\"^,^,^ \" , ]     [ table : rates_256 ]",
    "in this section , we use the synchronous codes derived in the previous sections to construct decodable codes from nondecodable ones as explained in section  [ sec : mainidea ] ( binary case ) and section  [ sec : qary ] ( nonbinary case ) . we compare the proposed method with the basic method that adds @xmath74 cells containing no data . for this comparison ,",
    "we consider two different target code lengths , @xmath75 and @xmath76 .",
    "we then assume for each value of @xmath3 and for some specific values of @xmath44 , that there exists a @xmath44-write code with wom - rate equal to the best ( i.e. , of highest wom - rate ) codes from @xcite , and with length @xmath77 , where @xmath60 is the length of the synchronous code .",
    "note that we do not use the actual code lengths at which these state - of - the - art wom - rates are reached because they are very large @xcite and not explicitly stated in @xcite .",
    "however , this gives a meaningful comparison , since the rate loss with our approach ( see ( [ eq : gsync ] ) ) is an increasing function of @xmath49 when @xmath3 , @xmath60 , and @xmath53 are fixed . since no code ( for any block length ) of strictly higher wom - rate than the ones reported in @xcite is ( as far as we can tell ) currently known , and considering a specific block length @xmath46 will likely reduce the wom - rate of the best nondecodable code , the comparison is a sort of worst - case scenario for our approach .",
    "the results for the binary case are reported in tables [ table : rates_64 ] and [ table : rates_256 ] .",
    "we consider values for @xmath44 between @xmath42 and @xmath78 .",
    "the second column of each table reports the state - of - the - art wom - rate of nondecodable codes , for each value of @xmath44 .",
    "the third column shows the wom - rate that is obtained by appending @xmath36 cells with no data to a length @xmath79 code with wom - rate equal to the one reported in the second column .",
    "the next two columns show , for various synchronous codes , the wom - rate that we obtain for the same target length .",
    "the @xmath80_2{^{\\mathrm{sync}}}$ ] , @xmath81_2{^{\\mathrm{sync}}}$ ] , @xmath82_2{^{\\mathrm{sync}}}$ ] , and @xmath83_2{^{\\mathrm{sync}}}$ ] codes are obtained by adding to the codes @xmath84_2{^{\\mathrm{sync}}}$ ] , @xmath85_2{^{\\mathrm{sync}}}$ ] , @xmath86_2{^{\\mathrm{sync}}}$ ] , and @xmath87_2{^{\\mathrm{sync}}}$ ] from section  [ sec : w(imi)=i ] a generation containing the all - zero codeword . , @xmath88 , which implies that a @xmath89_2{^{\\mathrm{sync}}}$ ] code may exist .",
    "however , we have not been able to identify such a code in a ( nonexhaustive ) computer search .",
    "the best code found was a @xmath87_2{^{\\mathrm{sync}}}$ ] code . ]",
    "the @xmath90_2{^{\\mathrm{sync}}}$ ] code is obtained in a similar manner from the @xmath91_2{^{\\mathrm{sync}}}$ ] code in section  [ sec : w(imi)_disjoint ] , and the @xmath92_2{^{\\mathrm{sync}}}$ ] code is obtained by adding a generation with the all - zero codeword to the @xmath93_2{^{\\mathrm{sync}}}$ ] code from the construction of section  [ sec : construction ] .    to better quantify the gains of the proposed approach , we have included in the tables the rate losses compared to the nondecodable code , and also their fraction ( the rate loss reduction factor ) , which quantifies the reduction in rate loss of the proposed approach compared to the basic approach of appending @xmath36 cells containing no data . for both lengths , our technique yields higher wom - rates compared to just appending a block of @xmath36 cells with no information .",
    "for instance , for @xmath94 and @xmath75 , the rate loss with the basic approach is as high as @xmath95 . with the improved approach",
    "the rate loss is reduced to @xmath96 , which is a reduction by a factor of @xmath97 ( see the sixth column of table  [ table : rates_64 ] ) .",
    "as can be seen from the tables , the rate loss of the basic approach grows with @xmath44 . in all cases we are able to demonstrate a rate loss reduction factor of @xmath98 to @xmath97 using our approach , which is significant .",
    "furthermore , the tabulated wom - rates are ( to the best of our knowledge ) also higher than the best wom - rates for binary multiple - write codes ( and hence better than the wom - rates of any directly decodable code ) known prior to @xcite , which justifies our approach .    cccccc @xmath44 & rate of nondec .",
    "& rate of dec .",
    "& & rate loss + & code & with no data & sync .",
    "code & rate & reduction factor + 5 & 3.9328 @xcite & 3.8099 ( 3.13% ) & @xmath99_4 $ ] & 3.8907 ( 1.07% ) & 2.92 + 6 & 4.2594 @xcite & 4.1263 ( 3.13% ) & @xmath100_4 $ ] & 4.1979 ( 1.44% ) & 2.17 + * 7 & * 4.3394 @xcite & * 4.2038 ( 3.13% ) & @xmath101_4 $ ] & 4.2507 ( 2.04% ) & 1.53 + [ 0.5 mm ] 8 & 4.5088[multiblock footnote omitted ] & 4.2975 ( 4.69% ) & @xmath102_4 $ ] & 4.4121 ( 2.14% ) & 2.19 + 9 & 4.5836 & 4.3687 ( 4.69% ) & @xmath103_4 $ ] & 4.4743 ( 2.38% ) & 1.97 + [ 0.5 mm ] 10 & 4.6932 & 4.4732 ( 4.69% ) & @xmath104_4 $ ] & 4.5631 ( 2.77% ) & 1.69 + 11 & 4.7193    & 4.4243 ( 6.25% ) & @xmath105_4 $ ] & 4.6457 ( 1.56% ) & 4.01 +    [ table : q4rates_64 ]    cccccc @xmath44 & rate of nondec . &",
    "rate of dec .",
    "& & rate loss + & code & with no data & sync .",
    "code & rate & reduction factor + 5 & 3.9328 @xcite & 3.9021 ( 0.78% ) & @xmath99_4 $ ] & 3.9223 ( 0.27% ) & 2.92 + 6 & 4.2594 @xcite & 4.2261 ( 0.78% ) & @xmath100_4 $ ] & 4.2440 ( 0.36% ) & 2.17 + * 7 & * 4.3394 @xcite & * 4.3055 ( 0.78% ) & @xmath101_4 $ ] & 4.3172 ( 0.51% ) & 1.53 + [ 0.5 mm ] 8 & 4.5088[multiblock footnote omitted ] & 4.4560 ( 1.17% ) & @xmath102_4 $ ] & 4.4846 ( 0.54% ) & 2.19 + 9 & 4.5836 & 4.5299 ( 1.17% ) & @xmath103_4 $ ] & 4.5563 ( 0.60% ) & 1.97 + 10 & 4.6932 & 4.6382 ( 1.17% ) & @xmath104_4 $ ] & 4.6607 ( 0.69% ) & 1.69 + 11 & 4.7193    & 4.6456 ( 1.56% ) & @xmath105_4 $ ] & 4.7009 ( 0.39% ) & 4.01 +    [ table : q4rates_256 ]    the results for the nonbinary case with @xmath106 are reported in tables [ table : q4rates_64 ] and [ table : q4rates_256 ] for @xmath75 and @xmath76 , respectively . here",
    ", we consider values for @xmath44 between @xmath107 and @xmath108 . as in the binary case ,",
    "the second column of each table reports the state - of - the - art wom - rate of nondecodable quaternary codes , for each value of @xmath44 that we consider .",
    "the third column shows the wom - rate that would be obtained by appending @xmath109 cells containing no data to a code of length @xmath110 and wom - rate equal to the one reported in the second column .",
    "note that similar to the binary case , the codes that we have constructed in section  [ sec : qary ] can be extended by a single generation containing the all - zero codeword only .",
    "thus , when we speak below about codes that are constructed in previous sections , we implicitly assume that they have been extended in this way .",
    "now , the codes @xmath101_4{^{\\mathrm{sync}}}$ ] and @xmath104_4{^{\\mathrm{sync}}}$ ] are taken from section  [ sec : qary ] ( the second and third rows of table  [ tab : sec2q34 ] ( the right table ) , respectively ) , ( the second and third rows of table  [ tab : sec2q4 ] , respectively ) , the codes @xmath102_4{^{\\mathrm{sync}}}$ ] and @xmath103_4{^{\\mathrm{sync}}}$ ] are obtained by merging the last three ( resp .",
    "two ) generations of the @xmath104_4{^{\\mathrm{sync}}}$ ] code , and the codes @xmath99_4{^{\\mathrm{sync}}}$ ] , @xmath100_4{^{\\mathrm{sync}}}$ ] , and @xmath105_4{^{\\mathrm{sync}}}$ ] are taken from section  [ subsec : construction ] .",
    "note that as in the binary case our technique yields higher wom - rates compared to just appending a block of @xmath109 cells with no information , for both target lengths . also , as in the binary case , the rate loss of the basic approach grows with @xmath44 , and we demonstrate a rate loss reduction by a factor between @xmath111 and @xmath112 in all cases considered , which is significant .    for the ternary case , to the best of our knowledge ,",
    "no tables of the best possible wom - rates have been presented in the literature .",
    "there are however constructions that can be used .",
    "see , for instance , ( * ? ? ?",
    "* theorem 7 ) for constructing @xmath0-ary @xmath47-write codes . here , we will use a construction from @xcite ( which was inspired by a similar idea proposed in @xcite ) giving a @xmath0-ary @xmath113-write code of wom - rate @xmath114 , where @xmath115 is the best possible wom - rate of a @xmath47-write binary code .",
    "thus , there exists a ternary @xmath42-write code of wom - rate @xmath116 where the wom - rate of the @xmath47-write code is taken from ( * ? ? ?",
    "* table vi ) .",
    "now , from the second row of table  [ tab : sec2q34 ] ( the left table ) , we can see that now , from the second row of table  [ tab : sec2q3 ] , we can see that there exists a @xmath117_3{^{\\mathrm{sync}}}$ ] code ( by merging the last two generations ) that does not contain the all - zero codeword .",
    "assuming a block length of @xmath75 , our method gives a wom - rate of @xmath118 , while the method of appending @xmath119 cells with no data gives a wom - rate of only @xmath120 .",
    "this amounts to a rate loss reduction by a factor of @xmath121 .",
    "in this paper , we proposed short synchronous wom codes as a basic tool to make nondecodable codes decodable while preserving the wom - rate as much as possible .",
    "we considered both binary and nonbinary codes , as well as the fixed - rate and the unrestricted - rate setups .",
    "we constructed short synchronous ( laminar ) codes for small values of @xmath2 .",
    "we also proposed a construction method to build synchronous codes for higher values of @xmath2 by concatenating shorter synchronous codes . compared to the construction by rivest and shamir , which considers @xmath32 with @xmath2 being a power of @xmath47 ,",
    "our construction is more general , since it lifts both constraints .",
    "finally , we used the obtained synchronous codes to make some nondecodable codes decodable .",
    "compared to the standard approach of appending cells containing no data , the proposed approach achieves a significant reduction of the rate loss for short - to - moderate block lengths .",
    "the authors wish to thank s.  kayser for valuable discussions and the anonymous reviewers for their valuable comments and suggestions that helped improve the presentation of the paper .",
    "fu and a.  j.  h. vinck , `` on the capacity of generalized write - once memory with state transitions described by an arbitrary directed acyclic graph , '' _ ieee trans .",
    "inf . theory _ ,",
    "45 , no .  1 ,",
    "308313 , jan . 1999 .",
    "s.  kayser , e.  yaakobi , p.  h. siegel , a.  vardy , and j.  k. wolf , `` multiple - write wom - codes , '' in _ proc .",
    "48th annual allerton conf .",
    "commun . , control , and computing _ , monticello , il , sep./oct .",
    "2010 , pp . 10621068 .",
    "r.  gabrys , e.  yaakobi , l.  dolecek , p.  h. siegel , a.  vardy , and j.  k. wolf , `` non - binary wom - codes for multilevel flash memories , '' in _ proc .",
    "theory workshop ( itw ) _ , paraty , brazil , oct .",
    "2011 , pp . 4044 .",
    "h.  mahdavifar , p.  h. siegel , a.  vardy , j.  k. wolf , and e.  yaakobi , `` a nearly optimal construction of flash codes , '' in _ proc .",
    "inf . theory ( isit ) _ , seoul , korea , jun./jul .",
    "2009 , pp ."
  ],
  "abstract_text": [
    "<S> in the framework of write - once memory ( wom ) codes , it is important to distinguish between codes that can be decoded directly and those that require that the decoder knows the current generation to successfully decode the state of the memory . a widely used approach to construct wom codes is to design first nondecodable codes that approach the boundaries of the capacity region , and then make them decodable by appending additional cells that store the current generation , at an expense of a rate loss . in this paper , we propose an alternative method to make nondecodable wom codes decodable by appending cells that also store some additional data . </S>",
    "<S> the key idea is to append to the original ( nondecodable ) code a short _ synchronous _ wom code and write generations of the original code and of the synchronous code simultaneously . </S>",
    "<S> we consider both the binary and the nonbinary case . </S>",
    "<S> furthermore , we propose a construction of synchronous wom codes , which are then used to make nondecodable codes decodable . for short - to - moderate block lengths , the proposed method significantly reduces the rate loss as compared to the standard method .    coding theory , decodable codes , flash memories , synchronous write - once memory ( wom ) codes . </S>"
  ]
}