{
  "article_text": [
    "there has been a growing interest in dynamic graph algorithms over the last two decades due to their applications in a variety of contexts including operating systems , information systems , network management , assembly planning , vlsi design and graphical applications .",
    "typical dynamic graph algorithms maintain a certain property ( e.g. , connectivity information ) of a graph that changes ( a new edge inserted or an existing edge deleted ) dynamically over time .",
    "an algorithm or a problem is called _ fully dynamic _ if both edge insertions and deletions are allowed , and it is called _ partially dynamic _ if only one ( either only insertion or only deletion ) is allowed .",
    "if only insertions are allowed , the partially dynamic algorithm is called incremental ; if only deletions are allowed , it is called decremental .",
    "while a number of fully dynamic algorithms have been obtained for various properties on undirected graphs ( see  @xcite and references therein ) , the design and analysis of fully dynamic algorithms for directed graphs has turned out to be much harder ( e.g. ,  @xcite ) .",
    "much of the research on directed graphs is therefore concentrated on the design of partially dynamic algorithms instead ( e.g. ,  @xcite ) . in this paper , we focus on the analysis of algorithms for maintaining a topological ordering of directed graphs in an incremental setting .",
    "a topological order @xmath2 of a directed graph @xmath3 ( with @xmath4 and @xmath5 ) is a linear ordering of its nodes such that for all directed paths from @xmath6 to @xmath7 ( @xmath8 ) , it holds that @xmath9 .",
    "a directed graph has a topological ordering if and only if it is acyclic .",
    "there are well - known algorithms for computing the topological ordering of a directed acyclic graph ( dag ) in @xmath10 time in an offline setting ( see e.g.  @xcite ) . in a fully dynamic setting , each time an edge is added or deleted from the dag , we are required to update the bijective mapping  @xmath2 . in the online / incremental variant of this problem ,",
    "the edges of the dag are not known in advance but are inserted one at a time ( no deletions allowed ) . as the topological order remains valid when removing edges , most algorithms for online topological ordering can also handle the fully dynamic setting . however , there are no good bounds known for the fully dynamic case .",
    "most algorithms are only analyzed in the online setting .",
    "given an arbitrary sequence of edges , the online cycle detection problem is to discover the first edge which introduces a cycle .",
    "till now , the best known algorithm for this problem involves maintaining an online topological order and returning the edge after which no valid topological order exists .",
    "hence , results for online topological ordering also translate into results for the online cycle detection problem .",
    "online topological ordering is required for incremental evaluation of computational circuits  @xcite and in incremental compilation  @xcite where a dependency graph between modules is maintained to reduce the amount of recompilation performed when an update occurs .",
    "an application for online cycle detection is pointer analysis  @xcite .    for inserting @xmath11 edges , the nave way of computing an online topological order each time from scratch with the offline algorithm takes @xmath12 time .",
    "@xcite gave an algorithm that can insert @xmath11 edges in @xmath13 time .",
    "@xcite ( ahrsz ) proposed an algorithm  @xcite which runs in @xmath14 time per edge insertion with @xmath15 being a local measure of the insertion complexity .",
    "however , there is no analysis of ahrsz for a sequence of edge insertions .",
    "@xcite ( kb )  @xcite analyzed a variant of the ahrsz algorithm and obtained an upper bound of @xmath16 for inserting an arbitrary sequence of @xmath11 edges .",
    "the algorithm by @xcite ( pk ) @xcite empirically outperforms the other algorithms for random edge insertions leading to sparse random dags , although its worst - case runtime is inferior to kb .",
    "@xcite ( afm )  @xcite proposed a new algorithm with runtime @xmath1 , which asymptotically outperforms kb on dense dags .    as noted above , the empirical performance on random edge insertion sequences ( reis ) for the above algorithms",
    "are quite different from their worst - cases .",
    "while pk performs empirically better for reis , kb and afm are the best known algorithms for worst - case sequences .",
    "this leads us to the theoretical study of online topological ordering algorithms on reis .",
    "a nice property of such an average - case analysis is that ( in contrast to worst - case bounds ) the average of experimental results on reis converge towards the real average after sufficiently many iterations .",
    "this can give a good indication of the tightness of the proven theoretical bounds .",
    "our contributions are as follows :    * we show an expected runtime of @xmath17 for inserting all edges of a complete dag in a random order with pk ( cf .  section  [ sec : pk ] ) . * for ahrsz and kb , we show an expected runtime of @xmath18 for complete random edge insertion sequences ( cf",
    ".  section  [ sec : ahrsz ] ) .",
    "this is significantly better than the known worst - case bound of @xmath19 for kb to insert @xmath20 edges . * additionally , we show that for such edge insertion sequences , the expected number of edges which force any algorithm to change the topological order ( `` invalidating edges '' ) is @xmath21 ( cf .",
    "section  [ sec : inval ] ) , which is the first such result .",
    "the remainder of this paper is organized as follows .",
    "the next section describes briefly the three algorithms ahrsz , kb , and pk . in section",
    "[ sec : rand ] we specify the random graph models used in our analysis . sections  [ sec : pk]-[sec : inval ] prove our upper bounds for the runtime of the three algorithms and the number of invalidating edges .",
    "section  [ sec : exp ] presents an empirical study , which provides a deeper insight on the average case behavior of ahrsz and pk .",
    "this section first introduces some notations and then describes the three algorithms ahrsz , kb , and pk .",
    "we keep the current topological order as a bijective function @xmath22 $ ] . in this and",
    "the subsequent sections , we will use the following notations : @xmath23 denotes @xmath24 , @xmath25 is a short form of @xmath26 , @xmath27 denotes an edge from  @xmath28 to  @xmath29 , and @xmath30 expresses that @xmath29 is reachable from  @xmath28 . note that @xmath31 , but _ not _ @xmath32 .",
    "the _ degree _ of a node is the sum of its in- and out - degree .",
    "consider the @xmath33-th edge insertion @xmath34 .",
    "we say that an edge insertion is _ invalidating _ if @xmath35 before the insertion of this edge .",
    "we define @xmath36 , @xmath37 and @xmath38 .",
    "let @xmath39 denote the number of nodes in @xmath40 and let @xmath41 denote the number of edges incident to nodes of @xmath40 .",
    "note that @xmath40 as defined above is different from the adaptive parameter  @xmath42 of the bounded incremental computation model .",
    "if an edge is non - invalidating , then @xmath43 .",
    "note that for an invalidating edge , @xmath44 as otherwise the algorithms will just report a cycle and terminate .",
    "we now describe the insertion of the @xmath33-th edge @xmath34 for all the three algorithms .",
    "assume for the remainder of this section that @xmath27 is an invalidating edge , as otherwise none of the algorithms do anything for that edge .",
    "we define an algorithm to be _ local _ if it only changes the ordering of nodes  @xmath45 with @xmath46 to compute the new topological order  @xmath47 of @xmath48 .",
    "all three algorithms are local and they work in two phases  a `` discovery phase '' and a `` relabelling phase '' .    in the discovery phase of * pk * , the set @xmath40 is identified using a forward depth - first search from  @xmath29 ( giving a set @xmath49 ) and a backward depth- first search from  @xmath28 ( giving a set @xmath50 ) .",
    "the relabelling phase is also very simple .",
    "it sorts both sets @xmath49 and @xmath50 separately in increasing topological order and then allocates new priorities according to the relative position in the sequence @xmath50 followed by @xmath49 .",
    "it does not alter the priority of any node not in  @xmath40 , thereby greatly simplifying the relabeling phase .",
    "the runtime of pk for a single edge insertion is @xmath51 .",
    "@xcite used the bounded incremental computation model  @xcite and introduced the measure @xmath15 .",
    "for an invalidated topological order  @xmath2 , the set @xmath52 is a _ cover _ if for all @xmath53 .",
    "this states that for any connected @xmath45 and @xmath54 which are incorrectly ordered , a cover @xmath55 must include @xmath45 or @xmath54 or both . @xmath56 and @xmath57 denote the number of nodes and edges touching nodes in  @xmath55 , respectively .",
    "we define @xmath58 and a cover @xmath59 to be _ minimal _ if @xmath60 for any other cover  @xmath55 .",
    "thus , @xmath15 captures the minimal amount of work required to calculate the new topological order  @xmath47 of @xmath48 assuming that the algorithm is local and that the adjacent edges must be traversed .    * * ahrsz**s _ discovery phase _ marks the nodes of a cover  @xmath55 by marking some of the unmarked nodes @xmath61 with @xmath62 and @xmath63 .",
    "this is done recursively by moving two frontiers starting from  @xmath29 and  @xmath28 towards each other . here ,",
    "the crucial decision is which frontier to move next .",
    "ahrsz tries to minimize @xmath64 by balancing the number of edges seen on both sides of the frontier .",
    "the recursion stops when forward and backward frontier meet .",
    "note that we do not necessarily visit all nodes in  @xmath49 ( @xmath50 ) while extending the forward frontier ( backward frontier ) .",
    "it can be proven @xcite that the marked nodes indeed form a cover  @xmath55 and that @xmath65 .",
    "the _ relabeling phase _ employs the dynamic priority space data structure due to @xcite .",
    "this permits new priorities to be created between existing ones in @xmath66 amortized time .",
    "this is done in two passes over the nodes in  @xmath55 . during the first pass",
    ", it visits the nodes of  @xmath55 in reverse topological order and computes a strict upper bound on the new priorities to be assigned to each node . in the second phase",
    ", it visits the nodes in  @xmath55 in topological order and computes a strict lower bound on the new priorities .",
    "both together allow to assign new priorities to each node in  @xmath55 .",
    "thereafter they minimize the number of different labels used to speed up the operations on the priority space data structure in practice .",
    "it can be proven that the discovery phase with @xmath15 priority queue operations dominates the time complexity , giving an overall bound of @xmath67 .",
    "* kb * is a slight modification of ahrsz . in the discovery phase ahrsz",
    "counts the total number of edges incident on a node .",
    "kb counts instead only the in - degree of the backward frontier nodes and only the out - degree of the forward frontier nodes .",
    "in addition , kb also simplified the relabeling phase .",
    "the nodes visited during the extension of the forward ( backward ) frontier are deleted from the dynamic priority space data - structure and are reinserted , in the same relative order among themselves , after ( before ) all nodes in @xmath50 ( @xmath49 ) not visited during the backward ( forward ) frontier extension .",
    "the algorithm thus computes a cover @xmath68 and its complexity per edge insertion is @xmath69 .",
    "the worst case running time of kb for a sequence of @xmath11 edge insertions is @xmath70 .",
    "@xcite introduced and popularized random graphs .",
    "they defined two closely related models : @xmath71 and @xmath72 . the @xmath71 model ( @xmath73 )",
    "consists of a graph with @xmath74 nodes in which each edge is chosen independently with probability @xmath75 . on the other hand ,",
    "the @xmath72 model assigns equal probability to all graphs with @xmath74 nodes and exactly @xmath76 edges .",
    "each such graph occurs with a probability of @xmath77 , where @xmath78 .    for our study of online topological ordering algorithms",
    ", we use the random dag model of @xcite .",
    "they obtain a random dag by directing the edges of an undirected random graph from lower to higher indexed vertices .",
    "depending on the underlying random graph model , this defines the @xmath79 and @xmath80 model .",
    "we will mainly work on the @xmath80 model since it is better suited to describe incremental addition of edges .",
    "the set of all dags with @xmath74 nodes is denoted by @xmath81 . for a random variable  @xmath82 with probability space @xmath81 , @xmath83}}$ ] and @xmath84}}$ ]",
    "denotes the expected value in the @xmath80 and @xmath79 model , respectively . for the remainder of this paper , we set @xmath85 } } : = { \\ensuremath{\\textup{\\textbf{e$_m$}}\\left[f\\right]}}$ ] and @xmath86 .",
    "the following theorem shows that in most investigations the models @xmath79 and @xmath80 are practically interchangeable , provided @xmath76 is close to @xmath87 .",
    "[ thm : rand_mod_dag ] given a function @xmath88 $ ] with @xmath89 and @xmath90 for all @xmath91 and functions @xmath75 and @xmath76 of @xmath74 with @xmath92 and @xmath93 .    1 .",
    "if @xmath94  then   @xmath95 } } \\leq { \\ensuremath{\\textup{\\textbf{e$_p$}}\\left[f\\right ] } } + o(1 ) .",
    "if   @xmath96  then   @xmath97 } } \\leq { \\ensuremath{\\textup{\\textbf{e$_m$}}\\left[f\\right ] } } + o(1 ) .",
    "$ ]    the analogous theorem for the undirected graph models @xmath71 and @xmath72 is well known",
    ". a closer look at the proof for it given by @xcite reveals that the probabilistic argument used to show the close connection between @xmath71 and @xmath72 can be applied in the same manner for the two random dag models @xmath79 and @xmath80 .",
    "we define a random edge sequence to be a uniform random permutation of the edges of a complete dag , i.e. , all permutations of @xmath98 edges are equally likely . if the edges appear to the online algorithm in the order in which they appear in the random edge sequence , we call it a random edge insertion sequence ( reis ) .",
    "note that a dag obtained after inserting @xmath76 edges of a reis will have the same probability distribution as @xmath80 . to simplify the proofs ,",
    "we first show our results in @xmath79 model and then transfer them in the @xmath80 model by theorem  [ thm : rand_mod_dag ] .",
    "when inserting the @xmath33-th edge @xmath34 , pk only regards nodes in @xmath99 with `` @xmath100 '' defined according to the current topological order . as discussed in section  [ sec : algo ] , pk performs @xmath101 operations for inserting the @xmath33-th edge .",
    "the intuition behind the proofs in this section is that in the early phase of edge - insertions ( the first @xmath102 edges ) , the graph is sparse and so only a few edges are traversed during the dfs traversals . as the graph grows , fewer and fewer nodes are visited in dfs traversals ( @xmath39 is small ) and so the total number of edges traversed in dfs traversals ( bounded above by @xmath41 ) is still small .",
    "theorems  [ thm : delta1 ] and  [ thm : delta3 ] of this section show for a random edge insertion sequence ( reis ) of @xmath103  edges that @xmath104 and @xmath105 } } = { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n})$ ] .",
    "this proves the following theorem .",
    "[ thm : pk ] for a random edge insertion sequence ( reis ) leading to a complete dag , the expected runtime of pk is @xmath17 .    a comparable pair ( of nodes )",
    "are two distinct nodes @xmath45 and @xmath54 such that either @xmath106 or @xmath107 .",
    "we define a potential function @xmath108 similar to katriel and bodlaender  @xcite .",
    "let @xmath108 be the number of comparable pairs after the insertion of @xmath33 edges . clearly , @xmath109{220pt }",
    "$ \\delta\\phi_i:=\\phi_i-\\phi_{i-1}\\geq 0 $ \\quad for all",
    "$ 1\\leq i \\leq m$,\\\\      \\hspace*{.7cm}$\\phi_0=0$,\\quad and\\quad   $ \\phi_m \\leq n(n-1 ) / 2$. \\end{minipage}\\label{eq : phi1}\\ ] ]    [ thm : di ] for all edge sequences , ( i ) @xmath110 and ( ii ) @xmath111 .",
    "consider the @xmath33-th edge @xmath112 . if @xmath113 , the theorem is trivial since @xmath114 .",
    "otherwise , each vertex of @xmath115  and @xmath116 ( as defined in section  [ sec : algo ] ) gets newly ordered with respect to @xmath28 and @xmath29 , respectively . the set @xmath117 .",
    "this means that overall at least @xmath118 node pairs get newly ordered : @xmath119 also , since in this case @xmath120 , @xmath121 .",
    "[ thm : delta1 ] for all edge sequences , @xmath122 .    by theorem  [ thm : di ] ( i ) , we get @xmath123    the remainder of this section provides the necessary tools step by step to finally prove the desired bound on @xmath124 in theorem  [ thm : delta3 ]",
    ". one can also interpret @xmath108 as a random variable in @xmath80 with @xmath125 .",
    "the corresponding function @xmath126 for @xmath79 is defined as the total number of comparable node pairs in @xmath79 .",
    "@xcite showed the following theorem .",
    "[ thm : pittel ] for @xmath127 and @xmath128 , @xmath129 } }   = ( 1+o(1))\\ , \\frac{n^2}{2 } \\left(1-\\frac{1}{c}\\right)^2 $ ] .    using theorem  [ thm : rand_mod_dag ] , this result can be transformed to @xmath130 as defined above for @xmath80 and gives the following bounds for @xmath131}}$ ] .",
    "[ thm : phi_bound ] for @xmath132 , @xmath133 } } = ( 1+o(1))\\ , \\frac{n^2}{2 } \\left(1-\\frac{(n-1)\\log{n}}{2(k +",
    "n \\log{n})}\\right)^2.\\ ] ] for @xmath134 , @xmath133 } } = ( 1+o(1 ) ) \\frac{n^2}{2 } \\!\\left(1-\\frac{(n -1)\\log{n}}{2(k + \\sqrt{\\log{n}\\,(n - k)})}\\right)^2.\\ ] ]    the function @xmath135 $ ] and @xmath136 wherever @xmath91 .",
    "the later inequality is true as the nodes already ordered in @xmath137 will still remain ordered in  @xmath138 . for @xmath139 , consider @xmath140 . then @xmath141 and @xmath142 since all the conditions of theorem  [ thm : rand_mod_dag ] are satisfied for these values of @xmath143 and @xmath75 , @xmath144 } } = o({\\ensuremath{\\textup{\\textbf{e$_p$}}\\left[\\psi\\right]}})$ ] . in particular , @xmath133 } }           = { \\ensuremath{\\textup{\\textbf{e$_{p=(k+n \\log{n})/n}$}}\\left[\\psi\\right ] } } + o(1 )          = ( 1+o(1 ) ) \\frac{n^2}{2 } \\left(1-\\frac{(n -1)\\log{n}}{2(k + n \\log{n})}\\right)^2.\\ ] ] for @xmath134 , we choose @xmath145 .",
    "clearly , @xmath146 using this , we get @xmath147 observe that @xmath148 has its minimum at @xmath149 since @xmath150 and @xmath151 . hence , we conclude that @xmath152 is monotonically decreasing in our interval @xmath153 and attains its minimum at @xmath154 .",
    "therefore , @xmath155 , which in turn proves @xmath156 and @xmath157 together with theorem  [ thm : pittel ] , this yields @xmath158 } }          & = { \\ensuremath{\\textup{\\textbf{e$_{p=(k+\\sqrt{\\log{n}\\,(n - k)})/n}$}}\\left[\\psi\\right ] } } + o(1)\\\\          & = ( 1+o(1))\\ , \\frac{n^2}{2 } \\left(1-\\frac{(n-1)\\log{n}}{2(k + \\sqrt{\\log{n}\\,(n - k)})}\\right)^2 .",
    "\\qedhere      \\end{aligned}\\ ] ]    the degree sequence of a random graph is a well - studied problem . the following theorem is shown in @xcite .    if @xmath159 , then almost every graph @xmath137 in the @xmath71 model satisfies @xmath160 , where @xmath161 is the maximum degree of a node in  @xmath137 .",
    "as noted in section  [ sec : rand ] , the undirected graph obtained by ignoring the directions of @xmath79 is a @xmath71 graph .",
    "therefore , the above result is also true for the maximum degree ( in - degree + out - degree ) of a node in @xmath79 . using theorem  [ thm : rand_mod_dag ]",
    ", the above result can be transformed to @xmath80 , as well .",
    "[ thm : degree1 ] with probability @xmath162 , there is no node with degree higher than @xmath163 for sufficiently large @xmath74 and @xmath164 in @xmath80 .",
    "we examine the following two functions :    * @xmath165 number of nodes with degree at least @xmath166 * @xmath167    for @xmath168 in @xmath71 , @xmath169 , and some constant @xmath170 , @xcite showed @xmath109{200pt }      \\begin{align }          { \\ensuremath{\\textup{\\textbf{e$_p$}}\\left[f_1(g)\\right ] } } & = \\textstyle{\\ensuremath{{\\cal o}}}\\left(\\frac{1}{n}\\right),\\notag\\\\          \\sigma^2_p(f_1(g ) ) & = { \\ensuremath{\\textup{\\textbf{e$_p$}}\\left[f_2(g)\\right ] } } - { \\ensuremath{\\textup{\\textbf{e$^{2}_{p}$}}\\left[f_1(g)\\right ] } } \\leq c \\cdot",
    "{ \\ensuremath{\\textup{\\textbf{e$_p$}}\\left[f_1(g)\\right]}}.\\notag      \\end{align }      \\end{minipage}\\label{eq : bollo_deg}\\ ] ]    consider any random @xmath80 .",
    "it must have been obtained by taking a random graph @xmath72 and ordering the edges .",
    "the degree of a node in @xmath80 is the same as the degree of the corresponding node in @xmath72 .",
    "we break down the analysis depending on @xmath76 . at first , consider the simpler case of @xmath171 .",
    "the degree of any node in an undirected graph can not be higher than @xmath172 .",
    "however , as @xmath173 , @xmath174 . for sufficiently large @xmath74",
    "this is greater than @xmath172 and therefore , no node can have degree higher than it .",
    "next , we consider @xmath175 $ ] for @xmath176 , where @xmath177 , and we prove the theorem for each interval .",
    "we choose @xmath178 , @xmath179 , and @xmath180 and look for the conditions in theorem  [ thm : rand_mod_dag ] .",
    "note that @xmath181 , @xmath182 $ ] , @xmath183 $ ] , and @xmath184 wherever @xmath91 for @xmath185 .",
    "the later inequality holds as the degree of any node in @xmath138 is greater than or equal to the corresponding degree in @xmath137 . for @xmath176 , @xmath186 and @xmath187",
    "so for each interval , @xmath188 and by @xmath189 and @xmath190 , @xmath191 in each interval , all the conditions of theorem  [ thm : rand_mod_dag ] are satisfied and therefore , @xmath192 } } = { \\ensuremath{\\textup{\\textbf{e$_{p_k}$}}\\left[f_i(g_k)\\right]}}+o(1)$ ] for @xmath185 and @xmath176 . using equation",
    ", we get @xmath193 } } = { \\ensuremath{{\\cal o}}}({\\ensuremath{\\textup{\\textbf{e$_{p_k}$}}\\left[f_1(g_k)\\right ] } } ) = { \\ensuremath{{\\cal o}}}\\left(\\frac{1}{n}\\right)$ ] and @xmath194 } } - { \\ensuremath{\\textup{\\textbf{e$^{2}_{m}$}}\\left[f_1(g_k)\\right ] } }          = { \\ensuremath{{\\cal o}}}\\big({\\ensuremath{\\textup{\\textbf{e$_{p_k}$}}\\left[f_2(g_k)\\right ] } } - { \\ensuremath{\\textup{\\textbf{e$^{2}_{p_k}$}}\\left[f_1(g_k)\\right]}}\\big)\\\\          & = { \\ensuremath{{\\cal o}}}(\\sigma_{p_k}^2(f_1(g_k ) ) )          = { \\ensuremath{{\\cal o}}}({\\ensuremath{\\textup{\\textbf{e$_{p_k}$}}\\left[f_1(g_k)\\right ] } } )          = { \\ensuremath{{\\cal o}}}\\left(\\tfrac{1}{n}\\right ) .      \\end{aligned}\\ ] ] therefore , by substituting @xmath195 , @xmath196 } } = { \\ensuremath{{\\cal o}}}\\left(\\frac{1}{n}\\right)$ ] , @xmath197 , and @xmath198 in chebyshev s inequality ( @xmath199 ) , we get @xmath200 however , @xmath201 and since , @xmath202 and @xmath203 is non - negative random variable , @xmath204 for sufficiently large @xmath74 .",
    "therefore , @xmath205 . in other words , with probability @xmath206 , there is no node with a degree higher than @xmath207 in any interval .",
    "however , by @xmath208 we get @xmath209 for sufficiently large @xmath74 , @xmath210 , and this implies @xmath211 therefore , with probability @xmath162 , there is no node with a degree higher than @xmath163 in @xmath72 and by the argument above , in @xmath80 .",
    "as the maximum degree of a node in @xmath212 is @xmath213 , we finally just need to show a bound on @xmath214 to prove theorem  [ thm : delta3 ] .",
    "this is done in the following theorem .",
    "[ thm : delta2 ] for @xmath80 and @xmath215 , @xmath216 } }                     = { \\ensuremath{{\\cal o}}}(n^3 \\log^2{n}).\\ ] ]    let us decompose the analysis in three steps .",
    "first , we show a bound on the first @xmath217 edges . by definition of @xmath40 , @xmath218",
    ". therefore , @xmath219 } } }          \\leq \\sum_{i=1}^{n \\log{n}}{i \\cdot n }          & = { \\ensuremath{{\\cal o}}}\\left(n^3 \\log^2{n}\\right).\\label{eq : sie1 }      \\end{aligned}\\ ] ] the second step is to bound @xmath220 with @xmath221 . for this",
    ", theorem  [ thm : di ]  ( ii ) shows for all @xmath143 such that @xmath222 that @xmath223 } }          & \\leq 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = k}^{t}{\\delta \\phi_i } \\right ] } }          = 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_t - \\phi_{k-1}\\right ] } }          = 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_t\\right ] } } - 2{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_{k-1}\\right]}}.          \\label{eq : eddi }      \\end{aligned}\\ ] ] the function hidden in the @xmath224 in theorem  [ thm : pittel ] is decreasing in @xmath75 @xcite .",
    "hence , also the @xmath224 in theorem  [ thm : phi_bound ] is decreasing in @xmath143 . plugging this in equation   yields ( with @xmath225 ) @xmath223 } }          & \\leq ( 1+o(1))\\ , n^2                  \\bigg(\\big(1-\\frac{(n-1)\\log{n}}{2(t+ s)}\\big)^2 -                       \\big(1-\\frac{(n-1)\\log{n}}{2(k-1+s)}\\big)^2\\bigg)\\notag\\\\          & = ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n } \\big(\\frac{2}{2(k-1+s ) } - \\frac{2}{2(t + s ) } \\,+\\notag\\\\          & \\hspace*{3.7 cm }                 \\frac{(n-1)\\log{n}}{4}\\big(\\frac{1}{(t+s)^2}-\\frac{1}{(k-1+s)^2}\\big ) \\big)\\notag\\\\          & \\leq ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n }                 \\left(\\frac{1}{k-1+s } - \\frac{1}{t+s}\\right)\\notag\\\\          & \\leq          ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n } \\frac{1}{k-1}.\\label{eq : epk2 }      \\end{aligned}\\ ] ]    by linearity of expectation and equation  , @xmath226 } }              & = \\sum_{i = s+1}^t \\big ( i\\ , { \\ensuremath{\\textup{\\textbf{e}}\\left[{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}\\right ] } } \\big )              \\leq \\sum_{j=1}^{\\log{(\\lceil \\frac{t}{s } \\rceil ) } }                  \\big(2^j s \\sum_{i=2^{(j-1 ) } s + 1}^{2^j s } { \\ensuremath{\\textup{\\textbf{e}}\\left[{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}\\right ] } } \\big)\\\\              & \\leq \\sum_{j=1}^{\\log{(\\lceil \\frac{t}{s } \\rceil ) } }                  \\big(2^j s \\!\\sum_{i=2^{(j-1)}s+1}^{t } { \\ensuremath{\\textup{\\textbf{e}}\\left[{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}\\right ] } } \\big)\\\\              & \\leq \\sum_{j=1}^{\\log{(\\lceil \\frac{t}{s } \\rceil ) } }                  \\big(2^j s ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n } \\frac{1}{2^{(j-1)}s}\\big)\\\\              & = \\sum_{j=1}^{\\log{(\\lceil \\frac{t}{s } \\rceil ) } }                  \\big(2 ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n}\\big ) \\\\              & = 2 ( 1+o(1))\\ , n^2 ( n-1 ) \\log^2{n } = { \\ensuremath{{\\cal o}}}(n^3 \\log^2{n } ) .            \\end{aligned}\\ ] ] for the last step consider a @xmath143 such that @xmath227 .",
    "theorem  [ thm : di ]  ( ii ) gives @xmath228 } }          & \\leq 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = k}^{r}{\\delta \\phi_i } \\right ] } }          = 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_r - \\phi_{k-1}\\right ] } }          = 2\\,{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_r\\right ] } } - 2{\\ensuremath{\\textup{\\textbf{e}}\\left[\\phi_{k-1}\\right]}}.      \\end{aligned}\\ ] ] using theorem  [ thm : phi_bound ] and similar arguments as before , this yields ( with @xmath229 ) @xmath228}}\\hspace*{-1.1 cm } \\\\          & \\leq ( 1+o(1))\\,n^2                  \\bigg(\\big(1-\\frac{(n - 1)\\log{n}}{2(r+ s(r))}\\big)^2 -                       \\big(1-\\frac{(n - 1)\\log{n}}{2(k-1+s(k-1))}\\big)^2\\bigg)\\\\          & = ( 1+o(1))\\,n^2 ( n-1 ) \\log{n } \\bigg(\\frac{2}{2(k-1+s(k-1 ) ) } - \\frac{2}{2(r + s(r ) ) } \\,+ \\\\          & \\hspace*{3.2 cm }                 \\frac{(n - 1)\\log{n}}{4}\\big(\\frac{1}{(r+s(r))^2}-\\frac{1}{(k-1+s(k-1))^2}\\big ) \\bigg ) .",
    "\\end{aligned}\\ ] ] since @xmath230 is monotonically increasing for @xmath231 , @xmath232 is a monotonically decreasing function in this interval .",
    "therefore , @xmath233 , which proves the following equation .",
    "@xmath234 } } & \\leq ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n }                 \\left(\\frac{1}{k-1+s(k-1 ) } - \\frac{1}{r+s(r)}\\right)\\notag\\\\          & \\leq          ( 1+o(1))\\,n^2 ( n-1 ) \\log{n } \\frac{1}{k-1}.\\label{eq : epk52 }      \\end{aligned}\\ ] ] by linearity of expectation and equation  , @xmath235}}\\hspace*{-3.1 cm } \\\\                  & = \\sum_{i= n - 2 n \\log{n } + 1}^r \\big ( i\\ , { \\ensuremath{\\textup{\\textbf{e}}\\left[{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}\\right ] } } \\big)\\notag \\\\                  & \\leq ( n - 2 \\log{n})\\ , \\sum_{i = n-2 n \\log{n}+1}^r { \\ensuremath{\\textup{\\textbf{e}}\\left[{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}\\right]}}\\notag\\\\                  & \\leq ( n - 2 \\log{n})\\ , ( 1+o(1))\\ , n^2 ( n-1 ) \\log{n } \\frac{1}{n - 2 n \\log{n } -1}\\notag\\\\                  & = { \\ensuremath{{\\cal o}}}(n^3 \\log{n } ) .",
    "\\notag              \\qedhere            \\end{aligned}\\ ] ]    [ thm : delta3 ] for @xmath80 , @xmath236}}= { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n})$ ] .",
    "by definition of @xmath237 , we know @xmath238 and hence @xmath239    again , let @xmath215 .",
    "theorem  [ thm : degree1 ] tells us that with probability greater than @xmath240 for some constant @xmath241 , there is no node with degree @xmath242 ( for @xmath243 ) . since the degree of an arbitrary node in a dag",
    "is bounded by @xmath74 , we get with theorems  [ thm : delta1 ] and  [ thm : delta2 ] , @xmath244 } }          & = { \\ensuremath{{\\cal o}}}\\bigg({\\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = n \\log{n } + 1}^{r}\\ ! { \\frac{c\\ i\\ { { \\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}}{n } } \\right ] } } +                     { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = n \\log{n } + 1}^{r}\\ ! \\frac{n\\ c'\\ { { \\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}}{n } \\right]}}\\bigg)\\\\          & = { \\ensuremath{{\\cal o}}}\\big(\\frac{1}{n}\\ , { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i=1}^{r}{(i \\ { { \\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace})}\\right ] } } + n^2\\big)\\\\          & = { \\ensuremath{{\\cal o}}}\\big ( \\frac{1}{n } \\left(n^3 \\log^2{n}\\right ) + n^2 \\big )          = { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n } ) .      \\end{aligned}\\ ] ] by again using the fact that the degree of an arbitrary node in a dag is at most  @xmath74 , we obtain @xmath245 } }      = { \\ensuremath{{\\cal o}}}\\big(n \\cdot { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = r + 1}^{n}{{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}}\\right]}}\\big )      = { \\ensuremath{{\\cal o}}}\\big(n \\cdot \\sum_{i = r + 1}^{n } n \\big )      = { \\ensuremath{{\\cal o}}}(n^2 \\log{n}).\\ ] ] thus , @xmath246 } }      & = { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i=1}^{n\\log{n}}{{{\\ensuremath{\\|{{\\ensuremath{\\delta^{(i)}}}\\xspace}\\|}}\\xspace}}\\right ] } } +          { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = n\\ \\log{n}+1}^{r}{{{\\ensuremath{\\|{{\\ensuremath{\\delta^{(i)}}}\\xspace}\\|}}\\xspace}}\\right ] } } +          { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = r+1}^{n}{{{\\ensuremath{\\|{{\\ensuremath{\\delta^{(i)}}}\\xspace}\\|}}\\xspace}}\\right]}}\\\\      & = { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n } ) + { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n } ) + { \\ensuremath{{\\cal o}}}(n^2 \\log{n } ) = { \\ensuremath{{\\cal o}}}(n^2\\ \\log^2{n } ) .",
    "\\qedhere\\end{aligned}\\ ] ]",
    "@xcite introduced kb as a variant of ahrsz for which a worst - case runtime of @xmath70 can be shown . in this section , we prove an expected runtime of @xmath18 under random edge insertion sequences , both for ahrsz and kb .",
    "recall from section  [ sec : algo ] that for every edge insertion there is a minimal cover @xmath247 .",
    "the following theorem shows that @xmath40 is also a valid cover in this situation .",
    "[ thm : del_kmin ] @xmath40 is a valid cover .",
    "consider the insertion of the @xmath33-th edge @xmath112 and consider a node - pair @xmath248 such that @xmath249 , but @xmath250 . since before the insertion of this edge , the topological ordering was consistent , @xmath251 , @xmath252 and @xmath253 .",
    "together with @xmath250 , it implies @xmath254 .",
    "now @xmath255 and @xmath256 imply @xmath257 .",
    "thus , for every node - pair @xmath258 such that @xmath249 and @xmath250 , @xmath257 and hence , @xmath40 is a valid cover .    therefore , by definition of @xmath259 , @xmath260 .",
    "@xmath261 } }          \\leq \\sum_{i=1}^m   { { \\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}+ { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i=1}^m { { \\ensuremath{\\|{{\\ensuremath{\\delta^{(i)}}}\\xspace}\\|}}\\xspace}\\right ] } }          = { \\ensuremath{{\\cal o}}}(n^2 \\log^2{n})\\\\\\ ] ] the latter equality follows from theorems  [ thm : delta1 ] and  [ thm : delta3 ]",
    ". the expected complexity of ahrsz on reis is thus @xmath262}}\\big ) = { \\ensuremath{{\\cal o}}}(n^2 \\log^3{n})$ ] .",
    "kb also computes a cover @xmath68 and its complexity per edge insertion is @xmath263 .",
    "therefore , @xmath264 and with a similar argument as above , the expected complexity of kb on reis is @xmath18 .",
    "an interesting question in all this analysis is how many edges will actually invalidate the topological ordering and force any algorithm to do something about them . here",
    ", we show a non - trivial upper bound on the expected value of the number of invalidating edges on reis .",
    "consider the following random variable : @xmath265 if the @xmath33-th edge inserted is an invalidating edge ; @xmath266 otherwise .",
    "[ thm : inval ] @xmath267 } } = { \\ensuremath{{\\cal o}}}(\\min\\{m , n^{\\frac{3}{2 } } \\log^{\\frac{1}{2}}{n}\\}).$ ]    if the @xmath33-th edge is invalidating , @xmath268 ; otherwise @xmath269 . in either case , @xmath270 .",
    "thus , for @xmath271 and @xmath272 , @xmath273 } }              & \\leq { \\ensuremath{\\textup{\\textbf{e}}\\left [ \\sum_{i = s + 1}^{t}{\\frac{{{\\ensuremath{|{{\\ensuremath{\\delta^{(i)}}}\\xspace}|}}\\xspace}}{2 } } \\right ] } }               \\leq ( 1+o(1))\\,\\frac{n^2 ( n-1 ) \\log{n}}{2 s}\\\\              & \\leq \\frac{(1+o(1))}{2}\\,n^\\frac{3}{2 } \\log^\\frac{1}{2}{n}.      \\end{aligned}\\ ] ] the second inequality follows by substituting @xmath274 in equation  . also",
    ", since the number of invalidating edges can be at most equal to the total number of edges , .",
    "@xmath275 } }              & = { \\ensuremath{\\textup{\\textbf{e}}\\left [ \\sum_{i=1}^{s } { { \\textsc{inval}}(i ) } \\right ] } } +                 { \\ensuremath{\\textup{\\textbf{e}}\\left [ \\!\\sum_{i = s + 1}^t\\ ! { { \\textsc{inval}}(i ) } \\right ] } } +                 { \\ensuremath{\\textup{\\textbf{e}}\\left[\\sum_{i = t}^m { { \\textsc{inval}}(i ) } \\right ] } } \\\\              & \\leq { \\ensuremath{{\\cal o}}}(s ) + { \\ensuremath{{\\cal o}}}(n^\\frac{3}{2 } \\log^\\frac{1}{2}{n } ) + { \\ensuremath{{\\cal o}}}(n\\log{n } )          = { \\ensuremath{{\\cal o}}}(n^\\frac{3}{2 } \\log^\\frac{1}{2}{n } ) .",
    "\\end{aligned}\\ ] ] the second bound @xmath276 } } \\leq m$ ] is obvious by definition of @xmath277 .",
    "in addition to the achieved average - case bounds , we also examined ahrsz and pk experimentally using the implementation of david j. pearce  @xcite available from www.mcs.vuw.ac.nz/@xmath278djp/dts.html . for varying number of vertices",
    "@xmath279 , we generated random edge insertion sequences ( reis ) leading to complete dags and averaged the performance parameter @xmath280 over 250 runs . the chosen @xmath280 upper bounds the respective runtimes .",
    "the performance parameter taken for ahrsz is @xmath281 .",
    "we know @xmath282}}={\\ensuremath{{\\cal o}}}(n^2 \\log^3{n})$ ] from section  [ sec : ahrsz ] and know that the overall runtime is @xmath20 since the algorithm has to inspect all the edges being inserted . in our experimental setting , we discovered that @xmath283 is apparently a decreasing function and that @xmath284 is an increasing function .",
    "this empirical evidence suggests that @xmath280 is possibly between @xmath285 and @xmath17 .",
    "figure  [ fig : exp ] shows our experimental results for ahrsz .",
    "we consider @xmath286 as a performance parameter for pk and observe that @xmath287 is decreasing while @xmath288 is increasing .",
    "this indicates that @xmath289 , which implies an actual runtime of @xmath290 for pk on reis since all @xmath20 edges have to be inspected .",
    "@xcite showed empirically that pk outperforms ahrsz on sparse dags .",
    "our experiments extend this to dense dags .    complementing section  [ sec : inval ]",
    ", we also examined empirically the number of invalidating edges for ahrsz .",
    "the same experimental set - up as above suggests a quasilinear growth of @xmath291 between @xmath292 and @xmath293 .",
    "note that the observed empirical bound for ahrsz is significantly lower than the general bound @xmath294 of theorem  [ thm : inval ] which holds for all algorithms .",
    "on random edge insertion sequences ( reis ) leading to a complete dag , we have shown an expected runtime of @xmath17 for pk and @xmath18 for ahrsz and kb while the trivial lower bound is @xmath20 .",
    "extending the average case analysis for the case where we only insert @xmath11 edges with @xmath295 still remains open . on the other hand ,",
    "the only non - trivial lower bound for this problem is by @xcite , who have shown that an adversary can force any algorithm which maintains explicit labels to require @xmath292 time complexity for inserting @xmath172 edges .",
    "there is still a large gap between the lower bound of @xmath296 , the best average - case bound of @xmath17 and the worst - case bound of @xmath297 .",
    "bridging this gap remains an open problem .",
    "the authors are grateful to telikepalli kavitha , irit katriel , and ulrich meyer for various helpful discussions .",
    "d.  ajwani , t.  friedrich , and u.  meyer .",
    "an @xmath298 algorithm for online topological ordering . in _ proceedings of the scandinavian workshop on algorithm theory ( swat  06 ) _ , vol .",
    "4059 of _ lecture notes in computer science _ , pp . 5364 , 2006 .",
    "b.  alpern , r.  hoover , b.  k. rosen , p.  f. sweeney , and f.  k. zadeck . incremental evaluation of computational circuits . in _ proceedings of the acm - siam symposium on discrete algorithms ( soda  90 ) _ , pp . 3242 , 1990 .",
    "d.  frigioni , a.  marchetti - spaccamela , and u.  nanni .",
    "fully dynamic shortest paths and negative cycles detection on digraphs with arbitrary arc weights . in _ proceedings of the european symposium on algorithms ( esa  98 )",
    "_ , vol . 1461 of _ lecture notes in computer science _ , pp .",
    "320331 , 1998 .",
    "a.  marchetti - spaccamela , u.  nanni , and h.  rohnert .",
    "on - line graph algorithms for incremental compilation . in _ proceedings of the workshop on graph - theoretic concepts in computer science ( wg  93 )",
    "790 of _ lecture notes in computer science _ , pp . 7086 , 1993 .",
    "d.  j. pearce and p.  h.  j. kelly .",
    "a dynamic algorithm for topologically sorting directed acyclic graphs . in",
    "_ proceedings of the workshop on experimental and efficient algorithms ( wea  04 ) _ , vol .",
    "lecture notes in computer science _ , pp . 383398 , 2004 .",
    "l.  roditty and u.  zwick . a fully dynamic reachability algorithm for directed graphs with an almost linear update time . in _ proceedings of the acm symposium on theory of computing ( stoc  04 ) _ , pp .",
    "184191 , 2004 .",
    "l.  roditty and u.  zwick . on dynamic shortest paths problems . in _ proceedings of the european symposium on algorithms ( esa  04 )",
    "3221 of _ lecture notes in computer science _ , pp . 580591 .",
    "springer , 2004 ."
  ],
  "abstract_text": [
    "<S> many applications like pointer analysis and incremental compilation require maintaining a topological ordering of the nodes of a directed acyclic graph ( dag ) under dynamic updates . all known algorithms for this problem are either only analyzed for worst - case insertion sequences or only evaluated experimentally on random dags . </S>",
    "<S> we present the first average - case analysis of online topological ordering algorithms . </S>",
    "<S> we prove an expected runtime of @xmath0 under insertion of the edges of a complete dag in a random order for the algorithms of alpern et al . </S>",
    "<S> ( soda , 1990 ) , katriel and bodlaender ( talg , 2006 ) , and pearce and kelly ( jea , 2006 ) . </S>",
    "<S> this is much less than the best known worst - case bound @xmath1 for this problem . </S>"
  ]
}