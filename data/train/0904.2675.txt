{
  "article_text": [
    "after two decades from the pioneering works that started it  @xcite , implicit computational complexity is now an active research area at the intersection of mathematical logic and computer science .",
    "its aim is the study of machine - free characterizations of complexity classes .",
    "the correspondence between an icc system and a complexity class holds only _ extensionally _",
    ", i.e. , the class of functions ( or problems ) which are representable in the system equals the complexity class .",
    "usually , the system is a fragment or subsystem of a larger programming language or logical system , the _ base system _ , in which other functions besides the ones in the complexity class can be represented .",
    "sometimes , one of the two inclusions is shown by proving that any program ( or proof ) can be reduced with a bounded amount of resources ; in this case , we say that the system is intensionally sound .",
    "on the other hand , icc systems are very far from being _ intensionally complete _ : there are many programs ( or proofs ) in the base system which are not in the icc system , even if they can be evaluated with the prescribed complexity bounds .",
    "observe that this does not contradict extensional completeness , since many different programs or proofs compute the same function .",
    "of course , a system that captures all and only the programs of the base system running within a prescribed complexity bound will in all but trivial cases ( e.g. , empty base system ) fail to be recursively enumerable .",
    "thus , in practice , one strives to improve intensional expressivity by capturing important classes of examples and patterns .",
    "an obstacle towards applying icc characterizations of complexity classes to programming language theory is their poor intensional expressive power : most icc systems do not capture natural programs and therefore are not useful in practice .",
    "this problem has been already considered in the literature .",
    "some papers try to address the poor intensional expressive power of icc systems by defining new languages or logics allowing to program in ways which are not allowed in existing icc systems .",
    "this includes quasi - interpretations  @xcite and , by the second author  @xcite .",
    "other papers analyze the intensional expressive power of existing systems either by studying necessary conditions on captured programs or , more frequently , by studying relations between existing icc systems .",
    "one nice example is murawski and ong s paper  @xcite , in which the authors prove that a subsystem  of bellantoni and cook s function algebra  @xcite can be embedded into light affine logic  @xcite and that the embedding can not be extended to the whole . in this work ,",
    "we somehow combine the two approaches , by showing that :    1 .",
    "a new logical system , called quantified bounded affine logic (  for short ) can be defined as a generalization of girard , scedrov and scott s bounded linear logic ( ,  @xcite ) , itself the first characterization of polynomial time computable functions as a fragment of girard s linear logic  @xcite .",
    "2 .   is intensionally at least as expressive as two heterogeneous , existing systems , namely leivant s",
    ".    bounded linear logic has received relatively little attention in the past  @xcite .",
    "this is mainly due to its syntax , which is more involved than the one of other complexity - related fragments of linear logic appeared more recently  @xcite . in bounded linear logic",
    ", polynomials are part of the syntax and , as a consequence , computation time is controlled _ explicitly _ ; in other words ,  can not be claimed to be a truly implicit characterization of polynomial time .",
    "moreover , it seems that  is not expressive enough to embed any existing icc system corresponding to polynomial time ( except lafont s  @xcite , which anyway was conceived as a very small fragment of ) .",
    "is obtained by endowing  with bounded quantification on resource variables . in other words , formulas of",
    "includes the ones of , plus formulas like @xmath0 or @xmath1 .",
    "rules governing bounded quantification can be easily added to , preserving its good properties :  is still a characterization of the polytime functions in an extensional sense . bounded quantification on resource variables , on the other hand , has tremendous consequences from an intensional point of view : both  and  can be compositionally embedded into .",
    "this means , arguably , that programs in either  or  can be rewritten in  without major changes , i.e. , by mimicking their syntactic structure .",
    "similar results are unlikely to hold for , as argued in sections  [ sect : emlfpl ] and  [ sect : emrrw ] below .    logical systems like  or  can not be considered as practical programming languages , although proofs can be interpreted as programs in the sense of curry and howard : the syntax is too complicated and the potential programmer would have to provide quantitative information in the form of polynomials while writing programs . on the other hand , considering  or  as type systems for the ( linear ) lambda calculus is interesting , although type inference would be undecidable in general . in this paper , we advocate the usefulness of  as an intermediate language in which to prove soundness results about other icc systems .    for all these reasons ,",
    "is _ not _ just another system capturing polynomial time computable functions .",
    "the rest of this paper is organized as follows :    1 .   in section [",
    "sect : syntax ] the syntax of  is introduced , and some interesting properties of the system are proved , together with some examples on how to write programs as proofs of .",
    "2 .   section [ sect : sts ] introduces a set - theoretic semantics for , which is exploited in section [ sect : qpt ] to show polytime soundness of the system .",
    "section [ sect : oce ] contains some informal discussion about compositional embeddings .",
    "4 .   section [ sect : emlfpl ] and [ sect : emrrw ] present compositional embeddings of  and  into , respectively .",
    "in this section , we present the syntax of , together with some of its main properties . in the following ,",
    "we adhere to the notation adopted in the relevant literature on  @xcite .",
    "polynomials appears explicitly in the formulas of , exactly as in .",
    "a specific notation for polynomials was introduced in @xcite , and will be adopted here . in the following ,",
    "@xmath2 is the set of natural numbers .",
    "sometimes , we use the vector notation @xmath3 , which stands for the sequence @xmath4 , where @xmath5 is assumed to be known from the context .    1 .   given a set @xmath6 of _ resource variables _ , a _ resource monomial over @xmath6 _ is any finite product of binomial coefficients @xmath7 where the resource variables @xmath8 are pairwise distinct and @xmath9 are natural numbers . 2 .",
    "a _ resource polynomial over @xmath6 _ is any finite sum of monomials over @xmath6 .",
    "@xmath10 denotes the set of resource variables in a resource polynomial @xmath11 .",
    "resource polynomials are notations for polynomials with rational coefficients . however , by construction , every resource polynomial maps natural numbers to natural numbers .",
    "an example of a resource polynomial on @xmath12 ( actually a monomial ) is @xmath13 resource polynomials satisfy some nice closure properties :    all constant functions and the identity are resource polynomials . moreover , resource polynomials are closed under binary sums , binary products , composition , and bounded sums .",
    "every constant function @xmath5 is simply the resource polynomial @xmath14 the identity is the resource polynomial @xmath15 closure under binary sums is trivial . to prove closure under products",
    ", it suffices to show that the product of two monomials ( on the same variable ) is a resource polynomial , but this boils down to show that the product of two binomial coefficients @xmath16 and @xmath17 can be expressed itself as a resource polynomial . actually , if @xmath18 , then @xmath19 where @xmath20 is a multinomial coefficient .",
    "the bounded sum @xmath21 where @xmath11 is a resource polynomial not mentioning the variable @xmath22 ( but possibly mentioning @xmath23 ) can be formed by observing that @xmath24 closure by composition can be proved similarly .    as a consequence ,",
    "every polynomial with natural number coefficients is a resource polynomial .",
    "the main reason why resource polynomials were originally chosen as a notation for polynomials in  @xcite was closure under bounded sums , a property which is not true in more traditional notation schemes . we follow the original paper here .    already in",
    ", an order relation on resource polynomials is an essential ingredient in defining the syntax of formulas and proof . in ,",
    "the notion is even more important : two polynomials can be compared unconditionally or with an implicit assumption in the form of a set of constraints .    1 .",
    "a _ constraint _ is an inequality in the form @xmath25 , where @xmath11 and @xmath26 are resource polynomials .",
    "a constraint @xmath25 _ holds _ ( and we write @xmath27 ) if it is true in the standard model .",
    "the expression @xmath28 stands for the constraint @xmath29 .",
    "variables in @xmath11 appear negatively , while those in @xmath26 appear positively in every constraint @xmath25 .",
    "2 .   a _ constraint set _ is a finite set of constraints .",
    "constraint sets are denoted with letters like @xmath30 , @xmath31 or @xmath32 .",
    "a constraint @xmath25 is a consequence of a constraint set @xmath30 ( and we write @xmath33 ) if @xmath25 is logical consequence of @xmath30 . for",
    "every constraint sets @xmath30 and @xmath31 , @xmath34 iff @xmath33 for every constraint @xmath25 in @xmath31 .",
    "3 .   for each constraint set @xmath30",
    ", we define an order @xmath35 on resource polynomials by imposing @xmath36 iff @xmath33 .",
    "resource polynomials are ordered extensionally : @xmath25 holds if @xmath11 is smaller than @xmath26 in the standard model of arithmetic .",
    "this definition is different from the one from  @xcite which is weaker but syntactical , defining @xmath11 to be smaller or equal to @xmath26 if and only if @xmath37 is itself a resource polynomial .",
    "this choice is motivated by the necessity of reasoning about resource polynomials under some assumptions in a constraint set . on the other hand",
    ", it has some consequences for the decidability of type checking , discussed in section  [ sect : typechecking ] .",
    "the following is a useful technical result about constraints :    [ lemma : monotoneconst ] if @xmath4 occur positively ( negatively , respectively ) in @xmath30 , @xmath38 for every @xmath39 and @xmath40 , then @xmath41 ( @xmath42 , respectively ) .",
    "take any constraint @xmath43 in @xmath30 and suppose @xmath4 occur positively in @xmath30 .",
    "then @xmath4 can occur in @xmath44 but they _ can not _ occur in @xmath45 .",
    "so : @xmath46 now , since @xmath38 for every @xmath39 , @xmath47 . as a consequence , @xmath41 .",
    "analogously if @xmath4 occur only negatively in @xmath30 .",
    "resource polynomials , constraints and constraint sets are the essential ingredients in the definition of  formulas :    [ defn : formulas ] formulas of  are defined as follows : @xmath48 where @xmath49 , @xmath50 ranges over a countable class of atoms ( each with an arity @xmath5 ) .",
    "we will restrict ourselves to _ bounded _ first order quantification .",
    "in other words , whenever we write @xmath51 or @xmath52 we implicitly assume that for every @xmath39 there is a resource polynomial @xmath53 not containing the variables @xmath4 such that @xmath54 .",
    "checking the boundedness condition on formulas is undecidable in general ( see section  [ sect : typechecking ] for further discussion ) .",
    "the notions of a free atom or a free resource variable in a formula are defined as usual , keeping in mind that @xmath55 , @xmath56 and @xmath57 act as binders for resource variables , while @xmath58 acts as a binder for atoms .",
    "notice that resource polynomials and the variables in them can occur inside constraints , constraint sets and formulas .",
    "the following definition becomes natural :    the definition of a positive ( or negative ) free occurrence of a variable in a formula @xmath59 proceeds by induction on @xmath59 :    1 .",
    "all the variables in @xmath60 occur positively in @xmath61 .",
    "polarities are propagated through compound formulas by noting that @xmath62 is negative in the first slot , @xmath57 is negative in @xmath11 and @xmath63 is negative in @xmath30 .",
    "all other slots are positive .",
    "we omit the detailed definition .",
    "for example , the first occurrence of @xmath23 in @xmath64 is negative while the second one is positive ; the only occurrence of @xmath65 is negative ; all occurrences of @xmath22 are bound .",
    "when resource variables occur positively in a formula , one can substitute the formula for an atom in another formula :    let @xmath66 be a formula where the free variables @xmath4 occur only positively .",
    "then @xmath67 denotes the formula obtained by replacing every free occurrence of @xmath61 with @xmath68 inside @xmath59 .    as an example , if @xmath59 is @xmath69 and @xmath66 is @xmath70 , then @xmath71 is @xmath72    formulas can be compared with respect to assumptions in the form of a constraint set :    the order @xmath35 on resource polynomials can be extended to an order on formulas as follows : @xmath73    please observe that if @xmath74 , then @xmath59 and @xmath66 have the same `` logical skeleton '' and only differ in the corresponding resource polynomials and constraint sets .",
    "resource polynomials in positive position are smaller in @xmath59 , while those in negative position are smaller in @xmath66 .",
    "moreover , constraint sets in positive position are stronger in @xmath59 , while those in negative position are stronger in @xmath66 .",
    "consider , as an example , the constraint set @xmath75 .",
    "it is easy to check that @xmath76 indeed @xmath77 , @xmath78 and @xmath79 .",
    "intuitively , @xmath35 can be seen as a subtyping relation such that subtypes of a formula @xmath59 are those formulas which are `` smaller '' than @xmath59 whenever the constraints in @xmath30 hold .",
    "this is in accordance to , e.g. , the way @xmath35 is defined on implicational formulas , which is very reminiscent of the usual rule defining subtyping for arrow types .",
    "the order relations @xmath35 satisfy some basic properties :    [ lemma : leform ] if @xmath74 and @xmath80 , then @xmath81 . moreover , if @xmath74 and @xmath82 , then @xmath83 .",
    "strengthening can be proved by an induction on @xmath59 . some cases :    1 .",
    "if @xmath84 and @xmath80 , then @xmath85 , @xmath86 , and @xmath87 . by induction hypothesis ,",
    "we can assume that @xmath89 .",
    "finally , @xmath90 .",
    "the thesis easily follows .",
    "2 .   if @xmath91 and @xmath92 , then @xmath93 , @xmath94 and @xmath95 .",
    "again , we can assume that @xmath94 .",
    "since @xmath96 , we can apply the induction hypothesis , obtaining @xmath97 , from which the thesis easily follows .",
    "transitivity can be handled itself by induction on the structure of @xmath59 .",
    "some cases :    1 .",
    "if @xmath84 and @xmath98 , then @xmath85 , @xmath99 , @xmath86 , @xmath87 and @xmath100 . from @xmath101 and @xmath99 , it follows by strengthening that @xmath102 . by the induction hypothesis , @xmath103",
    "the thesis follows , once we observe that @xmath104 by transitivity .",
    "2 .   if @xmath91 and @xmath105 , then @xmath93 , @xmath106 , @xmath94 , @xmath95 and @xmath107 .",
    "since @xmath108 , @xmath109 by strengthening . by the induction hypothesis , @xmath110 .",
    "the thesis follows observing that @xmath111 .",
    "3 .   if @xmath112 and @xmath113 , then @xmath114 , @xmath115 , @xmath94 , @xmath116 and @xmath117 . since @xmath118 , @xmath119 by strengthening . by the induction hypothesis ,",
    "the thesis follows observing that @xmath121 .",
    "this concludes the proof .",
    "some other auxiliary results about the relations @xmath122 will be useful in the following .",
    "we give them here .",
    "first of all , we can perform substitution of resource polynomials for resource variables in formulas being sure that the underlying order is preserved :    [ lemma : lepolysubst ] if @xmath59 is a formula where the variables @xmath4 occur only positively ( negatively , respectively ) , @xmath123 for every @xmath39 and @xmath94 , then @xmath124 ( @xmath125 , respectively ) .    by induction on @xmath59 .",
    "let s just check the most interesting cases :    1 .   if @xmath126 , then the variables in @xmath127 can be assumed to be distinct from @xmath128 .",
    "moreover : @xmath129 now , suppose that @xmath4 occur only positively in @xmath59 .",
    "then , by induction hypothesis , @xmath130 . moreover , by lemma  [ lemma : monotoneconst ] , @xmath131 . by definition",
    ", this implies @xmath124 . similarly if @xmath4 occur only negatively in @xmath59 .",
    "if @xmath132 , then we can proceed exactly in the same way .",
    "this concludes the proof .    on the other hand",
    ", the same polynomial can be substituted in formulas , again preserving the underlying order :    [ lemma : leformsubst ] if @xmath133 then @xmath134 .    by induction on @xmath59 . some interesting cases :    1 .   if @xmath135 , then @xmath136 , @xmath137 , @xmath86 , @xmath138 and @xmath23 can be assumed not to appear among the variables in @xmath139 nor the ones in @xmath140 .",
    "then : @xmath141 by induction hypothesis , @xmath142 .",
    "moreover , @xmath143 .",
    "the thesis follows .",
    "2 .   if @xmath144 , then @xmath145 , @xmath114 , @xmath146 , @xmath147 and , again , variables in @xmath127 can be assumed not to appear among the variables in @xmath139 nor in the ones in @xmath140 .",
    "then : @xmath148 clearly , @xmath149 . by the assumptions above , @xmath150 . by the induction hypothesis , @xmath151 .",
    "the thesis follows .",
    "this concludes the proof .",
    "finally , substitution of formulas for _ atoms _ preserves itself the order @xmath122 :    [ lemma : leformsubstii ] if @xmath152 is a formula where the free variables @xmath4 occur only positively , @xmath50 is an atom with arity @xmath5 and @xmath133 , then @xmath153 .    by induction on @xmath59 . some cases :    1 .   if @xmath154 , then @xmath155 where @xmath156 , @xmath157 and @xmath158 .",
    "the thesis easily follows from lemma  [ lemma : lepolysubst ] .",
    "2 .   if @xmath159 , then @xmath160 and we can assume that @xmath161 and that @xmath162 does not appear free in @xmath152",
    ". then @xmath163 and @xmath164 .",
    "from @xmath165 , it follows that @xmath166 and , by induction hypothesis , that @xmath167 .",
    "the thesis easily follows .",
    "this concludes the proof .",
    "a  _ judgement _ is an expression in the form @xmath168 , where @xmath30 is a constraint set , @xmath169 is a multiset of formulas and @xmath59 is a formula .",
    "the meaning of such an expression is the following : @xmath59 is a consequence of the formulas in @xmath169 , provided the constraints in @xmath30 hold .    _ rules of inference _ for  are in figure  [ figure : qbal ] .",
    "all rules except first order ones are the natural generalizations of  rules .",
    "in particular , observe that the only rules modifying the underlying constraint set(s ) are @xmath170 , @xmath171 , @xmath172 , @xmath173 and @xmath174 .",
    "the multiplicative connectives are governed by the usual rules from intuitionistic linear logic .",
    "the modality @xmath175 , on the other hand , is a functor governed by the following axioms , which come from : @xmath176 moreover , given a constraint set @xmath30 , it holds that @xmath177 whenever @xmath85 .",
    "weakening holds for every formula , contrary to what happens in ; as is usual in systems derived from linear logic , this does not break good quantitative properties like polynomial time soundness .",
    "rules @xmath178 , @xmath6 , @xmath170 , @xmath179 and @xmath180 capture the just described behaviour .",
    "observe how rule @xmath170 allows to take advantage of the inequality @xmath181 in the premise .",
    "first order quantification on resource variables , on the other hand , is governed by the four inference rules @xmath171 , @xmath172 , @xmath173 and @xmath174 .",
    "let us consider , as an example , rule @xmath171 , which can be read as follows : if @xmath59 can be inferred from @xmath169 provided @xmath182 hold _ and _ the variables @xmath139 do not appear in @xmath169 nor in @xmath30 , then @xmath59 holds for every value of @xmath139 satisfying @xmath30 .",
    "notice that  can be embedded into : for every  proof @xmath183 , there is a  proof @xmath184 : this can be proved by an easy induction on @xmath185 .    if @xmath185 is a proof of , then @xmath186 is the number of rule instances in @xmath185 .      the problem of checking the correctness of a proof is undecidable in ,",
    "since the correctness of a formula is itself an undecidable problem : remember that a formula like @xmath187 is correct only if an inequality @xmath188 can be deduced from @xmath30 for _ some _ polynomial @xmath11 .",
    "moreover , the relation @xmath189 between constraint sets is undecidable .",
    "this is in contrast to what happens in more implicit icc systems or in  itself , where conditional equality @xmath35 is replaced by unconditional inequality and @xmath25 iff @xmath37 is a resource polynomial .",
    "we do not see undecidability of proof checking as a fundamental problem of for at least two reasons :    1 .",
    "on the one hand , the main role of  is the one of a metasystem in which to prove quantitative properties of other systems . as a consequence , it is crucial to keep the system as expressive as possible .",
    "on the other hand , simple , decidable fragments of  can possibly be built by considering decidable , although necessarily incomplete , formal systems for assertions in the form @xmath190 ( or , more generally , @xmath191 ) and by imposing that bounds on quantified variables are given explicitly when forming existential or universal formulas .",
    "this , however , is a topic outside the scope of this paper , which we leave for future work .",
    "the way we define  is , in other words , similar to the one xi adopts when he introduces dependent  @xcite .",
    "second order intuitionistic logic can be presented as a context - independent sequent calculus with explicit structural rules  @xcite , . rules of  are in figure  [ figure : gtwoi ] .",
    "there is a forgetful map @xmath192 from the space of  proofs to the space of  proofs . in particular @xmath193",
    "corresponds to @xmath194 and @xmath195 corresponds to @xmath196 .",
    "essentially , @xmath197 has the same structure as @xmath185 , except for exponential and first order rules , which have no formal correspondence in . from our point of view , if @xmath198 , then @xmath185 and @xmath199 correspond to the same _ program _",
    ", i.e.  can be seen as a proper decoration of second order logic proofs with additional information which is not necessary to perform the underlying computation",
    ".      inherits some nice properties from .",
    "in particular , proofs can be manipulated in a uniform way by altering their conclusion without changing their structure , i.e. , without changing the underlying second order logic proof .",
    "first of all , a useful transformation is the strengthening of the underlying constraint set @xmath30 :    [ prop : strengthcon ] if @xmath200 is a proof and @xmath80 , then there is a proof @xmath201 such that @xmath202 and @xmath203 .    an easy induction on @xmath185 .",
    "as an example , if @xmath185 consists of an instance of rule @xmath59 , then the thesis follows from lemma  [ lemma : leform ] . as another example , take a proof @xmath204 obtained from @xmath205 applying rule @xmath171 .",
    "we can assume without losing generality that @xmath40 .",
    "from @xmath80 , it follows that @xmath206 , from which the thesis easily follows .    is monotone with respect to the relation @xmath35 on formulas .",
    "[ prop : monotonicity ] if @xmath207 , @xmath208 and @xmath209 for every @xmath210 , then there is @xmath211 such that @xmath202 .    by induction on @xmath186 .",
    "some interesting cases are the following ones :    1 .",
    "suppose that @xmath185 is simply @xmath212{\\judgebll{\\consetone}{a}{b}}{a\\leform_\\consetone b}\\ ] ] and that @xmath213 and @xmath208 .",
    "then , by transitivity of @xmath122 ( see lemma  [ lemma : leform ] ) , @xmath214 and @xmath199 is @xmath212{\\judgebll{\\consetone}{c}{d}}{c\\leform_\\consetone d}.\\ ] ] 2 .",
    "suppose that @xmath185 is @xmath212    { \\judgebll{\\consettwo}{!_{x < q_1}a_1,\\ldots,!_{x < q_n}a_n}{!_{x < p}b } }    { \\judgebll{\\consetone}{a_1,\\ldots , a_n}{b } & \\consettwo\\cup\\{x < p\\}\\models\\consetone & x\\notin\\fv{\\consettwo } & p\\lepoly_\\consettwo q_i}\\ ] ] and that @xmath215 ( for every @xmath39 ) and @xmath216 . by definition , @xmath217 for every @xmath39 and @xmath218 . by the side condition to the premise of @xmath185 ( and by transitivity of @xmath219 ) , we obtain @xmath220 for every @xmath39 . moreover , we have @xmath221 for every @xmath39 and @xmath222 .",
    "this implies @xmath223 for every @xmath39 , because @xmath224 and by lemma  [ lemma : leform ] .",
    "now , since @xmath225 , we can obtain , by proposition  [ prop : strengthcon ] , a proof @xmath226 of @xmath227 such that @xmath228 .",
    "then , we can easily apply the induction hypothesis on @xmath226 and conclude .",
    "this concludes the proof .",
    "another useful transformation on proofs is the substitution of resource polynomials for free variables .",
    "[ prop : substpol ] if @xmath207 is a proof and @xmath229 are resource polynomials , then there is a proof @xmath230 such that @xmath231 .    by induction on @xmath185 . an interesting case is the following one :    1 .",
    "suppose that @xmath185 is simply @xmath212{\\judgebll{\\consetone}{a}{b}}{a\\leform_\\consetone b}.\\ ] ] now , if @xmath133 then @xmath134 , by lemma  [ lemma : leformsubst ] .",
    "as a consequence , @xmath212{\\judgebll{\\consetone\\{\\multi{p}/\\multi{x}\\}}{a\\{\\multi{p}/\\multi{x}\\ } }      { b\\{\\multi{p}/\\multi{x}\\}}}{a\\{\\multi{p}/\\multi{x}\\}\\leform_{\\consetone\\{\\multi{p}/\\multi{x}\\ } } b\\{\\multi{p}/\\multi{x}\\}}.\\ ] ] 2 .",
    "suppose that @xmath185 is @xmath232    { \\judgebll{\\consetone}{\\gamma}{\\exists\\multi{y}:\\consettwo.c } }    { \\rho:\\judgebll{\\consetone}{\\gamma}{c\\{\\multi{q}/\\multi{y}\\ } } & \\consetone\\models\\consettwo\\{\\multi{q}/\\multi{y}\\}}\\ ] ] where , without losing generality , @xmath127 can be chosen as fresh variables not appearing among the ones in @xmath139 , nor in the ones in @xmath140 . applying the induction hypothesis to @xmath199 , we obtain a proof of @xmath233 .",
    "but , by the assumptions above , @xmath234 analogously , from @xmath235 , it follows that @xmath236 and @xmath237 the thesis follows .",
    "3 .   suppose that @xmath185 is @xmath238    { \\judgebll{\\consetone}{\\gamma,\\exists\\multi{y}:\\consettwo.c}{d } }    { \\rho:\\judgebll{\\consetone\\cup\\consettwo}{\\gamma , c}{d } &   \\multi{y}\\not\\in\\fv{\\gamma}\\cup\\fv{d}\\cup\\fv{\\consetone}}\\ ] ] where , as usual , @xmath127 can be chosen as fresh variables not appearing among the ones in @xmath139 , nor in @xmath140 . applying the induction hypothesis to @xmath199 , we obtain a proof of @xmath239 by the assumptions above , variables in @xmath127 do not appear free in @xmath240 nor in @xmath241 nor in @xmath242 .",
    "the thesis follows .",
    "this concludes the proof .    but",
    "formulas themselves can be substituted ( for atoms ) into a proof :    [ prop : substform ] if @xmath207 is a proof , @xmath152 is a formula where the free variables @xmath8 occur only positively and @xmath50 is an atom with arity @xmath243 , then there is a proof @xmath244 such that @xmath245 .    by induction on @xmath185 .",
    "some interesting cases are the following ones :    1 .",
    "suppose , again , that @xmath185 is simply @xmath212{\\judgebll{\\consetone}{a}{b}}{a\\leform_\\consetone b}\\ ] ] now , if @xmath133 then @xmath153 by lemma  [ lemma : leformsubstii ] . as a consequence : @xmath212{\\judgebll{\\consetone}{a\\{c/\\alpha\\}}{b\\{c/\\alpha\\}}}{a\\{c/\\alpha\\}\\leform_{\\consetone } b\\{c/\\alpha\\}}\\ ] ] 2 .",
    "suppose that @xmath185 is @xmath232    { \\judgebll{\\consetone}{\\gamma}{\\exists\\multi{y}:\\consettwo.d } }    { \\rho:\\judgebll{\\consetone}{\\gamma}{d\\{\\multi{q}/\\multi{y}\\ } } & \\consetone\\models\\consettwo\\{\\multi{q}/\\multi{y}\\}}\\ ] ] where , without losing generality , @xmath127 can be chosen as fresh variables not appearing among the ones in @xmath139 nor in @xmath152 . applying the induction hypothesis to @xmath199 , we obtain a proof of @xmath246 .",
    "but , by the assumptions above , @xmath247 the thesis follows .",
    "suppose that @xmath185 is @xmath238    { \\judgebll{\\consetone}{\\gamma,\\exists\\multi{y}:\\consettwo.d}{e } }    { \\rho:\\judgebll{\\consetone\\cup\\consettwo}{\\gamma , d}{e } &   \\multi{y}\\not\\in\\fv{\\gamma}\\cup\\fv{e}\\cup\\fv{\\consetone}}\\ ] ] where , as usual , @xmath127 can be chosen as fresh variables not appearing among the ones in @xmath139 , nor in @xmath152 . applying the induction hypothesis to @xmath199 , we obtain a proof of @xmath248 by the assumptions above , variables in @xmath127 do not appear free in @xmath249 nor in @xmath250 nor in @xmath251 : they are either in @xmath169 , @xmath252 , @xmath30 or in @xmath152 .",
    "the thesis follows .",
    "this concludes the proof .      a nice application of the results we have just given is cut - elimination .",
    "indeed , the new rules @xmath171 , @xmath172 , @xmath173 and @xmath174 do not cause any problem in the cut - elimination process .",
    "for example , the cut @xmath253 {    \\judgebll{\\consetone}{\\gamma,\\delta}{c } } {    \\infer[r_{\\forall x } ]    {      \\judgebll{\\consetone}{\\gamma}{\\forall\\multi{x}:\\consettwo.a }    }    {      \\pi:\\judgebll{\\consetone\\cup\\consettwo}{\\gamma}{a } & \\multi{x}\\notin\\fv{\\gamma}\\cup\\fv{\\consetone }    }    &    \\infer[l_{\\forall x } ]    {      \\judgebll{\\consetone}{\\delta,\\forall\\multi{x}:\\consettwo.a}{c }    }    {      \\judgebll{\\consetone}{\\delta , a\\{\\multi{p}/\\multi{x}\\}}{c } & \\consetone\\models\\consettwo\\{\\multi{p}/\\multi{x}\\ }    } } \\ ] ] can be eliminated as follows : @xmath253 {    \\judgebll{\\consetone}{\\gamma,\\delta}{c } } {    \\sigma:\\judgebll{\\consetone}{\\gamma}{a\\{\\multi{p}/\\multi{x}\\ } }    &    \\rho:\\judgebll{\\consetone}{\\delta , a\\{\\multi{p}/\\multi{x}\\}}{c } } \\ ] ] where @xmath226 is obtained by applying proposition  [ prop : strengthcon ] to @xmath254 itself obtained from @xmath185 applying proposition  [ prop : substpol ] . in this paper , we will not study cut - elimination . and polynomial time soundness will be itself proved semantically .",
    "the curry - howard correspondence allows to see  and  as programming languages endowed with rich type systems . in particular , following the usual impredicative encoding of data into second order intuitionistic logic , natural numbers can be represented as cut - free proofs of the formula @xmath255 however , only natural numbers less or equal to @xmath11 are representable this way .",
    "this can be generalized to any word algebra . given a word algebra @xmath256 ,",
    "we will denote by @xmath257 the only @xmath258-ary constructor of @xmath256 and by @xmath259 the @xmath260-ary constructors of the same algebra .",
    "notice that these objects can be thought of both as term formers and as ( @xmath258-ary or unary ) functions on terms .",
    "terms of a free algebra @xmath256 of length at most @xmath11 can be represented as cut - free proofs of the formula @xmath261 functions on natural numbers can be represented by proofs with conclusion @xmath262 , where @xmath11 is a resource polynomial depending on @xmath23 , only . more generally , functions on the word algebra @xmath256 can be represented by proofs with conclusion @xmath263 . for example , all constructors @xmath259 correspond to proofs with conclusion @xmath264 , while @xmath257 corresponds to a proof of @xmath265 .",
    "more generally , the polynomial @xmath11 gives a bound on the size of the result , as a function of the size of the input .",
    "supports iteration on any word algebra ( including natural numbers ) . as an example , for every @xmath11 and for every @xmath59 where @xmath23 only appears positively , there is a proof @xmath266 of @xmath267 namely : @xmath268 { \\judgebll{}{\\nat_p,!_{y < p}(a\\{y / x\\}\\linear a\\{y+1/x\\}),a\\{0/x\\}}{a\\{p / x\\ } } } {    \\infer=[l_{\\linear } ]    { \\judgebll{}{!_{y < p}(a\\{y / x\\}\\linear a\\{y+1/x\\})\\linear a\\{0/x\\}\\linear a\\{p / x\\},!_{y < p}(a\\{y / x\\}\\linear a\\{y+1/x\\}),a\\{0/x\\}}{a\\{p / x\\ } } }    {      \\infer[a ]      { \\judgebll{}{!_{y",
    "< p}(a\\{y / x\\}\\linear a\\{y+1/x\\})}{!_{y < p}(a\\{y / x\\}\\linear a\\{y+1/x\\ } } }      { }      &      \\infer[a ]      { \\judgebll{}{a\\{0/x\\}}{a\\{0/x\\ } } }      { }      &      \\infer[a ]      { \\judgebll{}{a\\{p / x\\}}{a\\{p / x\\ } } }      { }    } } \\ ] ] this will be essential to prove lemma  [ lemma : contraction ] .",
    "one may wonder why quantification on numerical variables is restricted to be bounded ( see definition  [ defn : formulas ] ) .",
    "the reason is very simple : in presence of unbounded quantification ,  would immediately become unsound . to see that , define @xmath269 to be the formula @xmath270 .",
    "the composition of the successor with itself yields a proof with conclusion @xmath271 which , by rules @xmath173 and @xmath174 , becomes a proof with conclusion @xmath272 .",
    "iterating it , we obtain a proof of @xmath273 which represents the function @xmath274 .",
    "but by rule @xmath174 , it can be turned into a proof of @xmath272 , and iterating it again we obtain a proof representing the exponential function .",
    "the boundedness assumption will be indeed critical in section  [ sect : qpt ] , where we establish that any functions which is representable in  is polynomial time computable .",
    "it is not clear whether unbounded existential quantification would be sufficient to embed the whole of second order intuitionistic logic into .",
    "in this section , we give a set - theoretic semantics for .",
    "we assume that our ambient set - theory is constructive .",
    "this way we have a set of sets @xmath275 which contains the natural numbers , closed under binary products , function spaces and @xmath275-indexed products .",
    "an alternative to assuming a constructive ambient set theory consists of replacing plain sets with pers ( partial equivalence relations ) or domains or similar structures .",
    "see @xcite for a more detailed discussion on this issue .",
    "formulas of  can be interpreted as sets as follows , where @xmath199 is an environment mapping atoms to sets : @xmath276};\\\\",
    "\\mean{!_{x < p}a}_\\rho=\\mean{\\forall\\multi{x}:\\consetone.a}_\\rho=\\mean{\\exists\\multi{x}:\\consetone.a}_\\rho&=&\\mean{a}_\\rho.\\end{aligned}\\ ] ] please observe that the interpretation of any formula @xmath59 is completely independent from the resource polynomials appearing in @xmath59 .",
    "to any  proof @xmath185 of @xmath277 we can associate a set - theoretic function @xmath278 by induction on @xmath185 , in the obvious way .",
    "@xmath279 is _ equal _ to the set - theoretic semantics of @xmath197 as a proof of second order intuitionistic logic .",
    "set - theoretic semantics of proofs is preserved by cut - elimination : if @xmath185 reduces to @xmath226 by cut - elimination , then @xmath280 .",
    "observe that @xmath281 only depends on the values of @xmath199 on atoms appearing free in @xmath59 .",
    "so , in particular , @xmath282 is independent on @xmath199 and on @xmath26 , since @xmath283 is a closed formula .",
    "similarly for @xmath284 . actually , there are functions @xmath285 and @xmath286 such that @xmath287 is the identity on natural numbers .",
    "they are defined as follows : @xmath288 where @xmath289 is the projection of @xmath59 on the component @xmath152 whenever @xmath59 is some product @xmath290 .",
    "so , given a proof @xmath291 , the _ numeric function represented by _",
    "@xmath185 is simply @xmath292 .",
    "similar arguments hold for functions with conclusion @xmath263 .",
    "in this section we show that all functions on natural numbers definable in  are polynomial time computable . to this end , we follow the semantic approach in @xcite which we now summarizes .",
    "let @xmath6 be a finite set of resource variables .",
    "we write @xmath293 for @xmath294  the elements of @xmath293 are called _ valuations _ ( over @xmath6 ) .",
    "if @xmath295 and @xmath296 then @xmath297 $ ] denotes the valuation which maps @xmath23 to @xmath298 and acts like @xmath299 otherwise .",
    "we assume some reasonable encoding of valuations as natural numbers allowing them to be passed as arguments to algorithms .",
    "if @xmath30 is a constraint set involving at most the variables in @xmath6 ( _ over _ @xmath6 ) then @xmath300 ( or simply @xmath301 ) is the set of valuations in @xmath293 satisfying all the constraints in @xmath30 .",
    "we write @xmath302 for the set of resource polynomials over @xmath6 . if @xmath303 and @xmath295 we write @xmath304 for the number obtained by evaluating @xmath11 with @xmath305 for each @xmath306 .",
    "a _ substitution _",
    "@xmath307 is a function mapping any variable in @xmath308 to a polynomial in @xmath302 .",
    "given a substitution @xmath307 and a valuation @xmath295 , the valuation @xmath309\\in\\v(y)$ ] assigns to every variable @xmath310 the natural number @xmath311 .",
    "we assume known the untyped lambda calculus as defined e.g.  in @xcite .",
    "a lambda term is _ affine linear _ if each variable ( free or bound ) appears at most once ( up to @xmath50-congruence ) .",
    "for example , @xmath312 and @xmath313 and @xmath314 are affine linear while the term @xmath315 is not .",
    "notice that every affine linear term @xmath44 is strongly normalisable in less than @xmath316 steps where @xmath316 is the size of the term .",
    "moreover , the size @xmath317 of any reduct of @xmath44 is at most @xmath316 .",
    "the runtime of the computation leading to the normal form is therefore @xmath318 .",
    "we will henceforth use the expression _ affine linear term _ for an affine linear lambda term which is in normal form .",
    "if @xmath319 are affine linear terms , then their application @xmath320 is defined as the normal form of the lambda term @xmath320 .",
    "notice that the application @xmath320 can be computed in time @xmath321 .",
    "if @xmath319 are affine linear terms we write @xmath322 for the affine linear term @xmath323 . if @xmath44 is an affine linear term possibly containing the free variables",
    "@xmath324 then we write @xmath325 for @xmath326 .",
    "notice that @xmath327 .    more generally , if @xmath328 is a family of affine linear terms , we write @xmath329 and @xmath330 for @xmath331 , respectively , @xmath332 .",
    "again , @xmath333 we write @xmath334 for the set of closed affine linear terms .    there is a canonical way of representing terms of any word algebra @xmath256 as affine linear terms , which is attributed to dana scott  @xcite .",
    "if the unary constructors of the word algebra @xmath256 are @xmath259 and @xmath257 is the only @xmath258-ary constructor of @xmath256 , the terms of @xmath256 are mapped to affine linear terms as follows : @xmath335 as an example , the natural number @xmath336 seen as a term of the word algebra @xmath337 becomes @xmath338    let @xmath6 be a finite set of resource variables .",
    "realizability set over @xmath6 _ is a pair @xmath339 where @xmath340 is a set and @xmath341 is a ternary relation between valuations over @xmath6 , affine lambda terms , and the set @xmath340 .",
    "we write @xmath342 for @xmath343 . given a substitution @xmath226 from @xmath6 to @xmath308 and a realizability set @xmath59 over @xmath308 ,",
    "then a new realizability set @xmath344 $ ] over @xmath6 is defined by @xmath345|=|a|$ ] and @xmath346 } a$ ] iff @xmath309,t\\forces{a } a$ ] .",
    "the intuition behind @xmath342 is that @xmath347 is an abstract semantic value , @xmath299 measures the abstract size of @xmath347 , and the affine linear term @xmath44 encodes the abstract value @xmath347 .",
    "this is a generalization of what normally happens in realizability models , where @xmath348 is a _ binary _ relation between realizers and denotations .",
    "[ nexpl ]    1 .   the realizability set @xmath349 over @xmath12 of _ tally natural numbers _ ( `` of size at most @xmath23 '' )",
    "is defined by : @xmath350 and @xmath351 if @xmath352 and @xmath353 ; 2 .",
    "the realizability set @xmath354 over @xmath12 of _ free terms of @xmath256 _ ( `` of length at most @xmath23 '' ) is defined by : @xmath355 and @xmath356 if @xmath357 and @xmath358 .",
    "these realizability sets @xmath349 and @xmath354 turn out to be retracts of the denotations of the eponymous  formulas from section  [ sect : programming ] .",
    "let @xmath59 be a realizability set over @xmath6 .",
    "we say that @xmath306 is _ positive _ ( _ negative _ , respectively ) in @xmath59 , if for all @xmath359 where @xmath299 and @xmath360 agree on @xmath361 and @xmath362 ( @xmath363 , respectively ) , @xmath364 implies @xmath365 .",
    "we notice that @xmath23 is positive in @xmath349 and @xmath354 . indeed , if e.g. @xmath351 and @xmath362 , then @xmath366 and @xmath367 by definition .",
    "realizability sets can be thought of as the object of a category whose arrows are functions , themselves realized by affine linear terms , one for every possible valuation of the underlying resource variables :    let @xmath368 be realizability sets over some set @xmath6 .",
    "a _ morphism _ from @xmath59 to @xmath66 is a function @xmath369 satisfying the following conditions :    1 .",
    "there exist a function @xmath370 , an algorithm @xmath59 and a resource polynomial @xmath26 such that for every @xmath295 , @xmath59 computes @xmath371 in time bounded by @xmath372 ; 2 .   for each @xmath295 , @xmath373 , @xmath374",
    ", we have @xmath375    in this case we say that @xmath376 _ witnesses _ @xmath377 and write @xmath378 where in the notation the algorithm @xmath59 computing @xmath376 is presumed to exist .    noticeably , morphisms compose .",
    "the following definitions summarises the interpretation of formulas according to @xcite .",
    "first of all , multiplicative connectives @xmath195 and @xmath193 correspond to constructions on realizability sets :    let @xmath379 be realizability sets over @xmath6 .",
    "then the following are realizability sets over @xmath6 :    1 .",
    "@xmath380 as given by @xmath381 and @xmath382 iff @xmath383 , where @xmath384 and @xmath385 .",
    "@xmath386 is given by @xmath387 and @xmath388 iff whenever @xmath389 it holds that @xmath390 .",
    "another logical connective needs to be justified , namely the exponential modality :    if @xmath152 is a realizability set over @xmath391 and @xmath303 then a realizability set @xmath392 over @xmath6 is defined by @xmath393 and @xmath394 if    1 .",
    "@xmath395 for some family @xmath396 ; 2 .",
    "@xmath397,t_i\\forces{c } a$ ] for each @xmath398 .",
    "lastly , a semantical counterpart of second order universal quantification must be defined .",
    "the following are essential preliminary definitions .",
    "let @xmath6 be a set of resource variables .",
    "second - order environment over @xmath6 _ is a partial function @xmath199 which assigns to a second - order variable @xmath50 of arity @xmath5 a pair @xmath399 such that :    1 .",
    "@xmath400 is an @xmath5-tuple of pairwise different resource variables not occurring in @xmath6 ; 2 .",
    "@xmath152 is a realizability set over @xmath401 in which the @xmath402 are positive .    for a second - order environment",
    "@xmath199 we write @xmath403 for the mapping @xmath404 when @xmath405 .",
    "if @xmath307 is a substitution and @xmath199 is a second - order environment over @xmath308 we define a second - order environment @xmath406 $ ] over @xmath6 by @xmath406(\\alpha)= ( l , c[\\sigma])$ ] when @xmath405 .",
    "we assume here that the variables in @xmath407 are not contained in @xmath308 .",
    "otherwise , the substitution can not be defined .    using these semantic constructions one defines for each formula @xmath59 with free resource variables contained in @xmath6 and second - order environment @xmath199 over @xmath6 , a realizability set @xmath408 over @xmath6 in such a way that @xmath409 ( where @xmath403 is the assignment of sets to atoms obtained from @xmath199 in the obvious way ) , that is to say",
    ", the underlying set of the realizability set interpreting a formula @xmath59 coincides with the set - theoretic meaning of @xmath59 ( see section  [ sect : sts ] ) : @xmath410,\\ ] ] where @xmath411 and @xmath412 ; @xmath413},\\forces{\\meanb{\\forall\\alpha.a}_\\rho}\\right);\\end{aligned}\\ ] ] where @xmath414 iff @xmath415}}f_c$ ] for all @xmath399 ; @xmath416},\\ ] ] where @xmath417 is the substitution mapping any variable in @xmath6 into the same variable as an element of @xmath418 .",
    "the main result of @xcite then asserts that if @xmath185 is a proof ( in ) of a sequent @xmath419 then the function @xmath420 is a morphism from @xmath421 to @xmath422 ( where we interpret a context @xmath169 as a @xmath195-product over its components as usual ) . from this ,",
    "polynomial time soundness is a direct corollary since polynomial time computability is built into the notion of a morphism .",
    "it thus only remains to extend the realizability model to cover the constructs of which we do in the next section .",
    "the notion of a realizability set above is adequate to model formulas of .",
    "the notion of a morphism , however , should be slightly generalized in order to capture constraints :    let @xmath368 be realizability sets over some set @xmath6 and @xmath30 a constraint set over @xmath6 .",
    "a function @xmath423 is a @xmath30-morphism from @xmath59 to @xmath66 iff the following conditions hold :    1 .",
    "there exist a function @xmath424 and an algorithm @xmath59 such that @xmath59 computes @xmath371 from @xmath299 in time bounded by @xmath372 for some resource polynomial @xmath26 ; 2 .   for each @xmath425 , @xmath373 , @xmath374",
    ", we have that @xmath364 implies @xmath426 .    in order to define realizability sets @xmath427 and @xmath428 , we fix some encoding of environments @xmath299 as affine lambda terms using the @xmath429 encoding of natural numbers . as an example",
    ", the environment @xmath299 on @xmath430 could be encoded as @xmath431 ; this clearly relies on a total order on resource variables .",
    "we do not notationally distinguish environments from their encodings .",
    "let @xmath432 be disjoint sets of variables .",
    "let @xmath59 be a realizability set over @xmath433 and @xmath30 a constraint set over @xmath433 where we put @xmath434 and @xmath435 .",
    "furthermore , for each @xmath436 let @xmath437 be such that @xmath438 .",
    "1 .   @xmath439 , 2 .",
    "@xmath441    recall that @xmath427 and @xmath428 are well - formed only if there are resource polynomials @xmath140 such that @xmath442 . therefore , the set @xmath443 is finite and in fact computable in polynomial time from @xmath299 .",
    "indeed , its cardinality at most @xmath444 and the size of any of its elements is at most @xmath445    we are now able to prove the main result of this section :    let @xmath185 be a proof of a sequent @xmath446 and @xmath199 a mapping of atoms to realizability sets .",
    "then @xmath420 is a @xmath30-morphism from @xmath421 to @xmath422 .",
    "the proof is by induction on derivations .",
    "we only show the cases that differ significantly from the development in @xcite .",
    "_ case @xmath170 . _ for simplicity , suppose that @xmath447 , @xmath448 and @xmath449 .",
    "the induction hypothesis shows that @xmath420 is a @xmath30-morphism from @xmath408 to @xmath422 witnessed by @xmath376 . as in the proof of the main result in @xcite",
    ", we define @xmath450)x_i.\\ ] ] now , if @xmath451 , then @xmath397\\in\\v_\\consetone$ ] whenever @xmath452 by the side condition from rule @xmath170 .",
    "we obtain that @xmath453 is a @xmath31-morphism from @xmath454 to @xmath455 witnessed by @xmath456 .",
    "the remaining cases are the four rules for first order quantifiers . in each case , we assume by the induction hypothesis that @xmath453 is a morphism realizing the premise of the rule and let @xmath376 be its witness .",
    "we have to show that @xmath453 is a morphism realizing the conclusion of the rule .",
    "note that the set - theoretic meaning of a proof does not change upon application of any of the quantifier rules .",
    "_ case @xmath171 .",
    "_ suppose that @xmath457 and @xmath458 .",
    "now suppose @xmath459 . by the induction hypothesis @xmath460 .",
    "we thus define @xmath456 by @xmath461 where @xmath462 is such that @xmath463 whenever @xmath464 .",
    "recall that for a given @xmath299 there are only @xmath372 such @xmath360 ( for a fixed resource polynomial @xmath26 ) , so that @xmath44 can be constructed as a big case distinction over all those @xmath360 .",
    "it is then clear that @xmath456 is polynomial time computable and realizes the conclusion of the rule .",
    "_ case @xmath172 .",
    "assume @xmath457 and @xmath458 and @xmath465 .",
    "define @xmath466 by @xmath467 so that @xmath468 by the side condition to the rule .",
    "now , @xmath469 by definition  [ kli ] .",
    "hence , @xmath470 . by the induction hypothesis , @xmath471 , so @xmath472 does the job .",
    "the remaining two cases are essentially dual to the previous two .",
    "we merely define the witnesses .",
    "_ case @xmath173 .",
    "_ define @xmath473 as in @xmath172 .",
    "we can then put @xmath474 .",
    "_ case @xmath174 .",
    "_ we define @xmath475 to be such that @xmath476 .",
    "this is possible by hard - wiring separate cases for each of the polynomially in @xmath299 many @xmath360 like in case @xmath171 .",
    "every function on word algebras representable in @xmath477 is polynomial time computable .",
    "in this section , we justify our emphasis on compositional embeddings .",
    "an embedding of a logical system or programming language @xmath478 into @xmath477 is a function @xmath479 from the space of proofs ( or programs ) of @xmath478 into the space of proofs for @xmath477 .",
    "clearly , for an embedding to be relevant from a computational point of view , any proof @xmath185 of @xmath478 should be mapped to an equivalent proof @xmath480 , e.g. , @xmath481 .",
    "the existence of an embedding of @xmath478 into @xmath477 implicitly proves that @xmath477 is _ extensionally _ at least as powerful as @xmath478 .",
    "such an embedding @xmath479 is not necessarily computable nor natural .",
    "but whenever @xmath478 is a sound and complete icc characterization of polynomial time , a large class of proofs or programs of @xmath478 can be mapped to , since the classes of definable _ first order _ functions are exactly the same in @xmath478 and . indeed ,  is both extensionally sound ( see section  [ sect : qpt ] ) and extensionally complete ( since  can be compositionally embedded into it ) .",
    "typically , one would like to go beyond extensionality and prove that @xmath477 is _ intensionally _ as powerful as @xmath478 . and if this is the goal , @xmath479 should be easily computable .",
    "ideally , we would like @xmath479 to act homeomorphically on the space of proofs of @xmath478 .",
    "in other words , whenever a proof @xmath185 of @xmath478 is obtained applying a proof - forming rule @xmath482 to @xmath483 , then @xmath480 should be obtainable from @xmath484 in a uniform way , i.e. , dependently on @xmath482 but independently on @xmath484 .",
    "an embedding satisfying the above constraint is said to be _ strongly compositional_. the embeddings we will present in the following two sections are only _ weakly _ compositional : @xmath485 can be uniformly built from @xmath486 whenever @xmath185 is obtained applying @xmath482 to @xmath483 .",
    "we believe that the existence of a weakly compositional embedding of @xmath478 into @xmath477 is sufficient to guarantee that @xmath477 is intensionally as powerful as @xmath478 because , as we pointed out in section  [ sect : qbllsol ] , @xmath197 can be thought as the program hidden in the proof @xmath185 .",
    "is a calculus for non - size - increasing computation introduced by the second author  @xcite . it allows to capture natural algorithms computing functions such that the size of the result is smaller or equal to the size of the arguments . this way ,",
    "polynomial time soundness is guaranteed despite the possibility of arbitrarily nested recursive definitions .",
    "we here show that a core subset of  can be compositionally embedded into .",
    "types are generated by the following grammar : @xmath487 rules for  in natural - deduction style are in figure  [ figure : lfplrules ] .",
    "we omit terms , since the computational content of type derivations is implicit in their skeleton .",
    "the set - theoretic semantics @xmath488 of an  formula @xmath59 can be defined very easily : @xmath489 , @xmath490 , while the operators @xmath195 and @xmath193 are interpreted as usual .",
    "notice that the interpretation of an  formula does not depend on any environment @xmath199 .",
    "this way , any  proof @xmath491 can be given a semantics @xmath492 , itself independent on any @xmath199 .",
    "for example , rule @xmath493 corresponds to iteration , while rule @xmath494 corresponds to function application .",
    "types can be translated to  formulas in the following way : @xmath495 please observe that the interpretation of any  formulas is parametrized by two resource polynomials @xmath11 and @xmath26 .",
    "if a variable @xmath23 occurs in @xmath11 , but not in @xmath26 , then @xmath23 occurs only positively in @xmath496 : this can be proved by an easy induction on the structure of @xmath59 .",
    "the correspondence scales from types to proofs :    [ thm : lfpl ]  can be embedded into . in other words , for every  proof @xmath491 , there exists a  proof @xmath497 such that @xmath498 .",
    "as expected , the proof goes by induction on @xmath185 .    1 .",
    "if the only rule in @xmath185 is @xmath59 , then @xmath499 is simply the axiom @xmath500    { \\judgebll{\\{x\\leq b,1\\leq b\\}}{\\trlfplqbll{a}{x}{b}}{\\trlfplqbll{a}{x}{b } } }    { } \\ ] ] 2 .",
    "if the only rule in @xmath185 is @xmath501 , then @xmath499 is @xmath238    {      \\judgebll{\\{x+y\\leq b,1\\leq b\\}}{\\trlfplqbll{\\diamond}{x}{b},\\trlfplqbll{\\nat}{y}{b } }      { \\trlfplqbll{\\nat}{x+y}{b } }    }    {      \\infer[w ]      {        \\judgebll{\\{x+y\\leq b,1\\leq b,1\\leq x\\}}{\\forall\\alpha.\\alpha\\linear\\alpha,\\trlfplqbll{\\nat}{y}{b}}{\\trlfplqbll{\\nat}{x+y}{b } }      }      {        \\rho:\\judgebll{\\{x+y\\leq b,1\\leq b,1\\leq x\\}}{\\trlfplqbll{\\nat}{y}{b}}{\\trlfplqbll{\\nat}{x+y}{b } }      }    } \\ ] ] where @xmath502 is the  proof for the successor on natural numbers inherited from  and @xmath199 is obtained by first strengthening @xmath226 into a proof of @xmath503 ( by proposition  [ prop : strengthcon ] ) and then applying to it proposition  [ prop : monotonicity ] , after observing that @xmath504 .",
    "3 .   if the last rule in @xmath185 is @xmath178 and the immediate premise of @xmath185 is @xmath199 , then @xmath499 is @xmath505    { \\judgebll{\\{\\sump{i}{x}+y\\leq b,1\\leq b\\ } }        { \\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{a}{y}{b } }        { \\trlfplqbll{b}{\\sump{i}{x}+y}{b } } }    { \\sigma:\\judgebll{\\{\\sump{i}{x}+y\\leq b,1\\leq b\\ } }        { \\trlfplqbll{\\gamma}{\\multi{x}}{b } }        { \\trlfplqbll{b}{\\sump{i}{x}+y}{b}}}\\ ] ] where @xmath226 can be obtained from @xmath506 by proposition  [ prop : strengthcon ] and proposition  [ prop : monotonicity ] , because @xmath507 and @xmath508 4 .",
    "if the last rule in @xmath185 is @xmath494 and the immediate premises of @xmath185 are @xmath199 and @xmath226 , then @xmath499 is @xmath509    {      \\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{\\delta}{\\multi{y}}{b } }      { \\trlfplqbll{b}{\\sump{i}{x}+\\sump{i}{y}}{b } }    }    {      \\infer=[\\!l_{\\forall x},a , u ]      {        \\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b } }        { \\trlfplqbll{a}{\\sump{i}{y}}{b}\\linear\\trlfplqbll{b}{\\sump{i}{x}+\\sump{i}{y}}{b } }      }      {        \\theta:\\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b } }        { \\trlfplqbll{a\\linear b}{\\sump{i}{x}}{b } }      }      &      \\!\\!\\!\\xi:\\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\delta}{\\multi{y}}{b } }      { \\trlfplqbll{a}{\\sump{i}{y}}{b } }    } \\ ] ] where @xmath510 and @xmath511 can be obtained from @xmath506 and @xmath512 , respectively , by applying proposition  [ prop : strengthcon ] .",
    "if the last rule in @xmath185 is @xmath513 and the immediate premise of @xmath185 is @xmath199 , then @xmath499 is @xmath514    {      \\judgebll{\\{\\sump{i}{x}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b}}{\\trlfplqbll{a\\linear b}{\\sump{i}{x}}{b } }    }    {      \\infer[r_\\linear ]      {        \\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{x}+y\\leq b,1\\leq b\\ } }        { \\trlfplqbll{\\gamma}{\\multi{x}}{b } }        { \\trlfplqbll{a}{y}{b}\\linear\\trlfplqbll{b}{\\sump{i}{x}+y}{b } }      }      {        \\sigma:\\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{x}+y\\leq b,1\\leq b\\ } }        { \\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{a}{y}{b } }        { \\trlfplqbll{b}{\\sump{i}{x}+y}{b } }      }    } \\ ] ] where @xmath226 can be obtained from @xmath506 by applying proposition  [ prop : strengthcon ] .",
    "if the last rule in @xmath185 is @xmath515 and the immediate premises of @xmath185 are @xmath199 and @xmath226 , then @xmath499 is @xmath232    {      \\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{\\delta}{\\multi{y}}{b } }      { \\trlfplqbll{a\\otimes b}{\\sump{i}{x}+\\sump{i}{y}}{b } }    }    {      \\infer[r_\\otimes ]      {        \\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{\\delta}{\\multi{y}}{b } }        { \\trlfplqbll{a}{\\sump{i}{x}}{b}\\otimes\\trlfplqbll{b}{\\sump{i}{y}}{b } }      }      {        \\theta:\\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b } }        { \\trlfplqbll{a}{\\sump{i}{x}}{b } }        &        \\xi:\\judgebll{\\{\\sump{i}{x}\\leq b,\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\delta}{\\multi{y}}{b } }        { \\trlfplqbll{b}{\\sump{i}{y}}{b } }      }    } \\ ] ] where @xmath510 and @xmath511 can be obtained from @xmath506 and @xmath512 , respectively , by proposition  [ prop : strengthcon ] .",
    "7 .   if the last rule in @xmath185 is @xmath516 and the immediate premises of @xmath185 are @xmath199 and @xmath226 , then @xmath499 is @xmath253    { \\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{\\delta}{\\multi{y}}{b } }          { \\trlfplqbll{c}{\\sump{i}{x}+\\sump{i}{y}}{b } } }    {       \\theta       &       \\infer[l_{\\exists x } ]       {         \\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{a\\otimes",
    "b}{\\sump{i}{y}}{b } }         { \\trlfplqbll{c}{\\sump{i}{x}+\\sump{i}{y}}{b } }       }       {         \\infer[l_\\otimes ]         {           \\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b , w+z\\leq \\sump{i}{y}\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{a}{w}{b}\\otimes\\trlfplqbll{b}{z}{b } }           { \\trlfplqbll{c}{\\sump{i}{x}+\\sump{i}{y}}{b } }         }         {           \\xi:\\judgebll{\\{\\sump{i}{x}+\\sump{i}{y}\\leq b,1\\leq b , w+z\\leq \\sump{i}{y}\\}}{\\trlfplqbll{\\gamma}{\\multi{x}}{b},\\trlfplqbll{a}{w}{b},\\trlfplqbll{b}{z}{b } }           { \\trlfplqbll{c}{\\sump{i}{x}+\\sump{i}{y}}{b } }         }       }    } \\ ] ] where @xmath511 can be obtained from @xmath506 by proposition  [ prop : strengthcon ] and proposition  [ prop : monotonicity ] and @xmath517 can be obtained from @xmath512 by proposition  [ prop : strengthcon ]",
    "if the last rule in @xmath185 is @xmath493 and the immediate premises of @xmath185 are @xmath199 and @xmath226 , then @xmath499 is @xmath518    {      \\judgebll{\\{x\\leq b,1\\leq b\\}}{\\trlfplqbll{\\nat}{x}{b } }      { \\trlfplqbll{a}{x}{b } }    }    {      \\infer[p _ ! ]      {        \\judgebll{\\{x\\leq b,1\\leq b\\}}{}{!_{y < x}(\\trlfplqbll{a}{y}{b}\\linear \\trlfplqbll{a}{y+1}{b } ) }      }      {        \\infer=[l_{\\forall x},a , u ]        {          \\judgebll{\\{y+1\\leq b,1\\leq b\\}}{}{\\trlfplqbll{a}{y}{b}\\linear \\trlfplqbll{a}{y+1}{b } }        }        {          \\infer[u ]          {          \\judgebll{\\{y+1\\leq b,1\\leq b\\}}{}{\\trlfplqbll{a\\linear a}{1}{b } }          }          {            \\sigma:\\judgebll{\\{y+1\\leq b,1\\leq b\\}}{}{\\trlfplqbll{\\diamond}{1}{b } }            &            \\theta:\\judgebll{\\{y+1\\leq b,1\\leq b\\}}{\\trlfplqbll{\\diamond}{1}{b}}{\\trlfplqbll{a\\linear a}{1}{b } }          }        }      }      &      \\xi:\\judgebll{\\{x\\leq b,1\\leq b\\}}{}{\\trlfplqbll{a}{0}{b } }      &      \\pi_x^a    } \\ ] ] where @xmath510 and @xmath511 can be obtained from @xmath506 and @xmath512 , respectively , by proposition  [ prop : strengthcon ] and @xmath226 can be easily built .",
    "this concludes the proof .",
    "[ prop : wclfpl ] the correspondence @xmath519 is weakly compositional .    a quick inspection on the proof of theorem  [ thm : lfpl ] shows that @xmath499 _ can not _ be obtained uniformly from @xmath520 ( where @xmath521 are the immediate sub - proofs of @xmath185 ) , because results like proposition  [ prop : strengthcon ] or proposition  [ prop : monotonicity ] are often applied to @xmath522 before they are plugged together ( in a uniform way ) to obtain @xmath499 .",
    "all the results in section  [ sect : properties ] , however , transform proofs to proofs preserving the underlying  proof . as a consequence",
    "the embedding is weakly compositional .",
    "one may ask whether such an embedding might work for  proper .",
    "we believe this to be unlikely for several reasons .",
    "in particular , it seems that  lacks a mechanism for turning the information about the size of the manipulated objects from being global to being local . in ,",
    "this rle is played by first order quantifiers .",
    "as an example , consider the split function for lists of natural numbers that splits a list into two lists , one containing the even entries and one containing the odd entries .",
    "the type of that function in  is @xmath523 where @xmath524 denotes the type of lists that we have elided from our formal treatment for the sake of simplicity . in  this function",
    "gets the type @xmath525 the only conceivable  formula for this function is @xmath526 . in  and in",
    "we can compose the split function with `` append '' yielding a function of type @xmath527 that can be iterated . in  this composition",
    "receives the type @xmath528 which of course is not allowed in an iteration . but a hypothetical compositional embedding of  into  would have to be able to mimic this construction .",
    "ramified recurrence on words ( ) is a function algebra extensionally corresponding to polynomial time functions introduced by leivant in the early nineties  @xcite .",
    "bellantoni and cook s algebra  can be easily embedded into .",
    "let @xmath256 be a word algebra , let @xmath529 be the unary constructors of @xmath256 and let @xmath257 be the only @xmath258-ary constructor of @xmath256 .",
    "@xmath530 denotes the identity function on @xmath256 .",
    "if @xmath243 is a natural number and @xmath531 , @xmath532 denotes the @xmath39-th projection on @xmath243 arguments in @xmath256 . given a @xmath5-ary function @xmath533 on @xmath256 and @xmath5 @xmath243-ary functions @xmath534 on @xmath256",
    ", we can define the @xmath243-ary _ composition _ of @xmath533 and @xmath534 , denoted @xmath535 , as follows : @xmath536 given an @xmath5-ary function @xmath537 on @xmath256 and @xmath538-ary functions @xmath539 on @xmath256 , we can define an @xmath540-ary function @xmath533 , denoted @xmath541 , by _ primitive recursion _ as follows : @xmath542 given an @xmath5-ary function @xmath537 on @xmath256 and @xmath540-ary functions @xmath539 on @xmath256 , we can define an @xmath540-ary function @xmath533 , denoted @xmath543 , as a _ conditional _ as follows : @xmath544 we can generate functions starting from @xmath530 , @xmath532 , @xmath257 and @xmath545 by freely applying composition , primitive recursion and conditional .    not every function obtained this way is in : indeed , they correspond to primitive recursive functions on @xmath256 . in figure",
    "[ figure : rrw ] , a formal system for judgements in the form @xmath546 ( where @xmath547 are natural numbers ) is defined .",
    "if such a judgement can be derived from the rules in figure  [ figure : rrw ] , then @xmath377 is said to be an  function ( the definition of  given here is slightly different but essentially equivalent to the original one  @xcite ) .",
    "leivant  @xcite proved that  functions are exactly the polytime computable functions on @xmath256 .",
    "but  can be compositionally embedded into , at least in a weak sense .    before embarking in the proof of that , however , we need a preliminary result .",
    "[ lemma : contraction ] every word algebra is duplicable , i.e. , for every word algebra @xmath256 there is a proof @xmath548 of @xmath549 such that @xmath550 .    for simplicity",
    ", consider the algebra @xmath2 of natural numbers .",
    "the proof we are looking for is the following : @xmath518 { \\judgebll{}{\\bn_x}{\\bn_x\\otimes\\bn_x } } {    \\infer[p _ ! ]    { \\judgebll{}{}{!_{y < x}(\\bn_y\\otimes\\bn_y\\linear\\bn_{y+1}\\otimes\\bn_{y+1 } ) } }    {      \\infer=[r_\\otimes , l_\\otimes , r_\\linear ]      {        \\judgebll{}{}{\\bn_y\\otimes\\bn_y\\linear\\bn_{y+1}\\otimes\\bn_{y+1 } }      }      {        \\sigma:\\judgebll{}{\\bn_y}{\\bn_{y+1 } } & \\sigma:\\judgebll{}{\\bn_y}{\\bn_{y+1 } }      }    }    &    \\infer[r_\\otimes ]    { \\judgebll{}{}{\\bn_{0}\\otimes\\bn_{0 } } }    {      \\rho:\\judgebll{}{}{\\bn_{0 } } & \\rho:\\judgebll{}{}{\\bn_{0 } }    }    &    \\pi_x^{\\bn_x\\otimes\\bn_x } } \\ ] ] where @xmath226 are @xmath199 are the proofs corresponding to @xmath258 and the successor coming from .",
    "this concludes the proof .",
    "the following is the main result of this section :    [ theo : rrw ]  can be embedded into .",
    "suppose , in other words , that @xmath551 and that @xmath552 , while @xmath553",
    ". then , there exist a  proof @xmath185 and a resource polynomial @xmath26 such that @xmath554 where @xmath555 .    by induction on the proof of @xmath556 some interesting cases :    1 .",
    "consider the identity function @xmath530 .",
    "clearly : @xmath212{\\judgebll{\\{x_1\\leq x\\}}{\\wordalg_{x_1}}{\\wordalg_{x}}}{}\\ ] ] 2 .",
    "suppose @xmath557 and @xmath212    { \\vdash\\comp{g , f_1,\\ldots , f_n}:\\pwa{j_1}\\times\\ldots\\pwa{j_m}\\rightarrow\\pwa{i } }    { \\vdash g:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\rightarrow\\pwa{i } & \\vdash f_k:\\pwa{j_1}\\times\\ldots\\times\\pwa{j_m}\\rightarrow\\pwa{i_k}}\\ ] ] we partition the sequence @xmath558 into three sequences containing elements which are equal to @xmath39 , strictly greater than @xmath39 and strictly smaller than @xmath39 , respectively : @xmath559 clearly , @xmath560 . similarly for the sequence @xmath561",
    ": @xmath562 again , @xmath563 . by induction hypothesis ,",
    "there are proofs @xmath564 with the appropriate conclusions .",
    "now , consider the proofs @xmath565 : they are the ones such that @xmath553 . by proposition  [ prop : monotonicity ]",
    ", we can assume that their conclusion is exactly the same , i.e. , the polynomials @xmath566 in the rhs are indeed the same polynomial @xmath45 . in other words",
    ", we have proofs @xmath567 where @xmath568 for each @xmath569 .",
    "the proofs @xmath570 are the ones such that @xmath571 .",
    "observe that @xmath572 do not appear in the right hand side of their conclusions . by proposition",
    "[ prop : substpol ] and proposition  [ prop : strengthcon ] , we can obtain proofs : @xmath573 where @xmath574 only depend on @xmath575 .",
    "similarly , we can obtain proofs @xmath576 corresponding to @xmath577 .",
    "consider the proof @xmath578 . by induction hypothesis",
    "it is a proof of @xmath579 now , define a substitution mapping @xmath402 to @xmath580 and @xmath22 to @xmath581 . by proposition  [ prop : substpol ] , we can obtain a proof @xmath582 where @xmath583 but @xmath30 is always true , and as a consequence @xmath584 by proposition  [ prop : strengthcon ] , we can obtain a proof @xmath585 plugging the obtained proofs and remembering that base types are duplicable , we can construct a proof corresponding to @xmath557 : @xmath586 3 .",
    "suppose @xmath587 and @xmath212    { \\vdash\\rec{f_{c_\\wa^1},\\ldots , f_{c_\\wa^w},f_{\\zero_\\wa}}:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\times\\pwa{j}\\rightarrow\\pwa{i } }    { \\vdash f_{c_\\wa^k}:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\times\\pwa{i}\\times\\pwa{j}\\rightarrow\\pwa{i }       & \\vdash f_\\zero:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\rightarrow\\pwa{i } & i < j}\\ ] ] by induction hypothesis , there are proofs @xmath588 and @xmath589 with the appropriate conclusions . by proposition  [ prop : monotonicity ]",
    "we can assume that : @xmath590 where @xmath591 and @xmath26 is a fixed resource polynomial .",
    "applying the substitution @xmath360 defined as @xmath592 to @xmath593 and by using proposition  [ prop : monotonicity ] , we obtain @xmath594 where @xmath595\\cup\\{(y+1)q(x_{j_1},\\ldots , x_{j_m},y)+x\\leq ( y+1)q(x_{j_1},\\ldots , x_{j_m},y+1)+x\\}$ ] .",
    "now , notice that @xmath596 always holds because @xmath26 is monotone .",
    "moreover , @xmath597 $ ] . by proposition",
    "[ prop : strengthcon ] , we can then replace @xmath31 with @xmath30 in @xmath598 . for simplicity ,",
    "we use the following abbreviations : @xmath599 now , from @xmath588 and from a proof corresponding to @xmath257 ( with conclusion @xmath600 ) , we construct @xmath601 as follows : @xmath602    { \\judgebll{\\consetone}{}{b[y\\leftarrow 0 ] } }    {      \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]      { \\judgebll{\\consetone}{\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},0)+x}\\otimes\\wordalg_0 } }      {        \\infer=[r_\\otimes ]        { \\judgebll{\\consetone}{\\delta,\\delta }          { a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},0)+x}\\otimes\\wordalg_0 } }        {          \\infer [ ]          {            \\judgebll{\\consetone}{\\wordalg_{x_1}}{\\wordalg_{x_1 } }          } { }                  &          \\cdots          &          \\infer [ ]          {            \\judgebll{\\consetone}{\\wordalg_{x_n}}{\\wordalg_{x_n } }          } { }                  &          \\pi_\\zero:\\judgebll{\\consetone}{\\delta}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},0)+x } }          &          \\infer [ ]          {            \\judgebll{\\consetone}{}{\\wordalg_0 }          } { }      }    } } \\ ] ] + where we have used several times lemma  [ lemma : contraction ] .",
    "similarly , from @xmath603 and from a proof corresponding to @xmath604 ( with conclusion @xmath605 ) , we construct @xmath606 as follows : @xmath602    { \\judgebll{\\consetone}{}{b\\linear b[y\\leftarrow y+1 ] } }      { \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]        { \\judgebll{\\consetone }          { b,\\delta}{a\\otimes\\wordalg_{(y+2)q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }        {          \\infer=[l_\\otimes,\\mbox{lemma~\\ref{lemma : contraction } } ]          { \\judgebll{\\consetone }            { b,\\delta,\\delta}{a\\otimes\\wordalg_{(y+2)q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }          {            \\infer=[r_\\otimes ]            { \\judgebll{\\consetone }              { a,\\wordalg_{(y+1)q(x_{j_1},\\ldots , x_{j_m},y)+x},\\wordalg_{y},\\wordalg_{y},\\delta }              { a\\otimes\\wordalg_{(y+2)q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }            {              \\infer [ ]                      {                \\judgebll{\\consetone}{a}{a }              } { }                      &              \\rho_i:\\judgebll{\\consetone}{\\delta,\\wordalg_{(y+1)q(x_{j_1},\\ldots , x_{j_m},y)+x},\\wordalg_{y}}{\\wordalg_{(y+2)q(x_{j_1},\\ldots , x_{j_m},y+1)+x } }              &              \\infer [ ]              {                \\judgebll{\\consetone}{\\wordalg_{y}}{\\wordalg_{y+1 } }              } { }            }          }        }      } \\ ] ] + where , again , we have used several times lemma  [ lemma : contraction ] .",
    "and now we are ready to iterate over the step functions : @xmath518 { \\judgebll{\\consetone}{\\delta,\\wordalg_{x_{n+1}}}{\\wordalg_{(x_{n+1}+1)q(x_{j_1},\\ldots , x_{j_m},x_{n+1})+x } } } {    \\infer=[l_\\linear , a , u ]    { \\judgebll{\\consetone}{\\wordalg_{x_{n+1}}}{b[y\\leftarrow x_{n+1 } ] } }    { %     \\infer= %     { \\judgebll{\\consetone}{\\wordalg_{x_{n+1}}}{b[y\\leftarrow x_{n+1 } ] } } %     {        \\sigma_\\zero        &        \\sigma_1        &        \\ldots        &        \\sigma_w %     }    }    &    \\infer=[a , r_\\otimes , l_\\linear ]    { \\judgebll{\\consetone}{\\delta , b[y\\leftarrow x_{n+1}]}{\\wordalg_{(x_{n+1}+1)q(x_{j_1},\\ldots , x_{j_m},x_{n+1})+x } } }    { } } \\ ] ] 4 .",
    "suppose @xmath607 and @xmath212    { \\vdash\\cond{f_{c_\\wa^1},\\ldots , f_{c_\\wa^w},f_{\\zero_\\wa}}:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\times\\pwa{j}\\rightarrow\\pwa{i } }    { \\vdash f_{c_\\wa}:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\times\\pwa{j}\\rightarrow\\pwa{i }       & \\vdash f_\\zero:\\pwa{i_1}\\times\\ldots\\times\\pwa{i_n}\\rightarrow\\pwa{i}}\\ ] ] we can distinguish three subcases : 1 .   if @xmath608 , there are proofs @xmath588 and @xmath589 with the appropriate conclusions . by proposition  [ prop : monotonicity ]",
    "we can assume that : @xmath609 where @xmath591 .",
    "applying the substitution @xmath610 to @xmath593 and by using proposition  [ prop : monotonicity ] and proposition  [ prop : strengthcon ] , we obtain @xmath611 for simplicity , wee use the following abbreviations : @xmath612 now , from @xmath588 and from a proof corresponding to @xmath257 ( with conclusion @xmath600 ) , we construct @xmath601 as follows : @xmath602        { \\judgebll{\\consetone}{}{b[y\\leftarrow 0 ] } }        {          \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]          { \\judgebll{\\consetone}{\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},1)+x}\\otimes\\wordalg_0 } }          {            \\infer=[r_\\otimes ]            { \\judgebll{\\consetone}{\\delta,\\delta }              { a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},1)+x}\\otimes\\wordalg_0 } }            {              \\infer [ ]              {                \\judgebll{\\consetone}{\\wordalg_{x_1}}{\\wordalg_{x_1 } }              } { }                      &              \\cdots              &              \\infer [ ]              {                \\judgebll{\\consetone}{\\wordalg_{x_n}}{\\wordalg_{x_n } }              } { }                      &              \\pi_\\zero:\\judgebll{\\consetone}{\\delta}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},1)+x } }              &              \\infer [ ]              {                \\judgebll{\\consetone}{}{\\wordalg_0 }              } { }            }          } } \\ ] ] + similarly , from @xmath603 and from a proof corresponding to @xmath604 ( with conclusion @xmath605 ) , we construct @xmath606 as follows : @xmath602        { \\judgebll{\\consetone}{}{b\\linear b[y\\leftarrow y+1 ] } }        { \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]          { \\judgebll{\\consetone }            { b,\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }          {            \\infer=[l_\\linear , a , u ]            { \\judgebll{\\consetone }              { b,\\delta,\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }            {              \\infer=[r_\\otimes , w ]              { \\judgebll{\\consetone }                { a,\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},y)+x},\\delta,\\wordalg_{y},\\wordalg_{y } }                { a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},y+1)+x}\\otimes\\wordalg_{y+1 } } }              {                \\infer [ ]                        {                  \\judgebll{\\consetone}{a}{a }                } { }                        &                \\rho_i:\\judgebll{\\consetone}{\\delta,\\wordalg_{y } }                { \\wordalg_{q(x_{j_1},\\ldots , x_{j_m},y+1)+x } }                &                \\infer [ ]                {                  \\judgebll{\\consetone}{\\wordalg_{y}}{\\wordalg_{y+1 } }                } { }              }            }          }        } \\ ] ] and now we are ready to iterate over the step functions : @xmath518      { \\judgebll{\\consetone}{\\delta,\\wordalg_{x_{n+1}}}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},x_{n+1})+x } } }      {        \\infer=[l_\\linear , a , u ]        { \\judgebll{\\consetone}{\\wordalg_{x_{n+1}}}{b[y\\leftarrow x_{n+1 } ] } }        { %         \\infer= %         { \\judgebll{\\consetone}{\\wordalg_{x_{n+1}}}{b[y\\leftarrow x_{n+1 } ] } } %         {            \\sigma_\\zero            &            \\sigma_1            &            \\ldots            &            \\sigma_w %         }        }        &        \\infer=        { \\judgebll{\\consetone}{\\delta , b[y\\leftarrow x_{n+1}]}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m},x_{n+1})+x } } }        { }      } \\ ] ] 2 .   if @xmath613 , there are proofs @xmath588 and @xmath589 with the appropriate conclusions . by proposition  [ prop : monotonicity ]",
    "we can assume that : @xmath614 where @xmath591 and @xmath615 . applying the substitution @xmath610 to @xmath593 and by using proposition  [ prop : substpol ]",
    ", we obtain @xmath616 where @xmath617 for simplicity , we use the following abbreviations : @xmath618 now , from @xmath588 and from a proof corresponding to @xmath257 ( with conclusion @xmath619 ) , we construct @xmath601 as follows : @xmath602        { \\judgebll{\\consetthree}{}{b[y\\leftarrow 0 ] } }        {          \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]          { \\judgebll{\\consetthree}{\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x}\\otimes\\wordalg_0 } }          {            \\infer=[r_\\otimes ]            { \\judgebll{\\consetthree}{\\delta,\\delta }              { a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x}\\otimes\\wordalg_0 } }            {              \\infer [ ]              {                \\judgebll{\\consetthree}{\\wordalg_{x_1}}{\\wordalg_{x_1 } }              } { }                      &              \\cdots              &              \\infer [ ]              {                \\judgebll{\\consetthree}{\\wordalg_{x_n}}{\\wordalg_{x_n } }              } { }                      &              \\pi_\\zero:\\judgebll{\\consetthree}{\\delta}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x } }              &              \\infer [ ]              {                \\judgebll{\\consetthree}{}{\\wordalg_0 }              } { }            }          } } \\ ] ] + similarly , from @xmath603 and from a proof corresponding to @xmath604 ( with conclusion @xmath620 ) , we construct @xmath606 as follows : @xmath602        { \\judgebll{\\consetthree}{}{b\\linear b[y\\leftarrow y+1 ] } }        { \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]          { \\judgebll{\\consetthree }            { b,\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x}\\otimes\\wordalg_{y+1 } } }          {            \\infer=[\\mbox{lemma~\\ref{lemma : contraction } } ]            { \\judgebll{\\consetthree }              { b,\\delta,\\delta}{a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x}\\otimes\\wordalg_{y+1 } } }            {              \\infer=[r_\\otimes ]              { \\judgebll{\\consetthree }                { a,\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x},\\wordalg_{y},\\wordalg_{y},\\delta }                { a\\otimes\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x}\\otimes\\wordalg_{y+1 } } }              {                \\infer [ ]                        {                  \\judgebll{\\consetthree}{a}{a }                } { }                        &                \\rho_i:\\judgebll{\\consetthree}{\\delta,\\wordalg_{y } }                { \\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x } }                &                \\infer [ ]                {                  \\judgebll{\\consetthree}{\\wordalg_{y}}{\\wordalg_{y+1 } }                } { }              }            }          }        } \\ ] ] + and now we are ready to iterate over the step functions : @xmath253       { \\judgebll{\\consettwo}{\\delta,\\wordalg_{x_{n+1}}}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x } } }       {         \\infer=         { \\judgebll{\\consettwo}{\\wordalg_{x_{n+1}}}{b[y\\leftarrow x_{n+1 } ] } }         {           \\sigma_\\zero:\\judgebll{\\consettwo}{}{b[y\\leftarrow 0 ] }           &             \\infer [ ]             { \\judgebll{\\consettwo}{}{!_{y < x_{n+1}}(b\\linear b[y\\leftarrow y+1 ] ) } }             { \\sigma_i:\\judgebll{\\consetthree}{}{b\\linear b[y\\leftarrow y+1 ] } }           }         &         \\infer=         { \\judgebll{\\consettwo}{\\delta , b[y\\leftarrow x_{n+1}]}{\\wordalg_{q(x_{j_1},\\ldots , x_{j_m})+x } } }         { }       } \\ ] ] 3 .   if @xmath621 , the proof is similar to the case @xmath608 .",
    "+ observe how , in all the three cases , the proof corresponding to @xmath377 is structurally the same .",
    "this concludes the proof .",
    "quite interestingly , the proof of theorem  [ theo : rrw ] is very similar in structure to the proof of polynomial time soundness for  given in  @xcite , which is based on the following observation : the size of the output of a  function is bounded by a polynomial on the sizes of normal arguments plus the _ maximum _ of sizes of safe arguments .",
    "this can not be formalized in , because the resource polynomials do not include any function computing the maximum of its arguments . on the other hand , this can be captured in  by way of constraints .",
    "[ prop : wcrrw ] the correspondence @xmath622 is weakly compositional .",
    "the proof is essentially identical to the one of proposition  [ prop : wclfpl ] .",
    "we presented , a new icc system embedding two distinct and unrelated systems for impredicative recursion in the sense of @xcite , namely ramified recurrence and non - size increasing computation .",
    "allows to overcome the main weakness of , namely that all resource variables are global . in the authors view , this constitutes the first step towards unifying icc systems into a single framework .",
    "the next step consists in defining an embedding of light linear logic into  and the authors are currently investigating on that ."
  ],
  "abstract_text": [
    "<S> we present , an extension of girard , scedrov and scott s bounded linear logic . </S>",
    "<S> the main novelty of the system is the possibility of quantifying over resource variables . </S>",
    "<S> this generalization makes bounded linear logic considerably more flexible , while preserving soundness and completeness for polynomial time . </S>",
    "<S> in particular , we provide compositional embeddings of leivant s  and hofmann s into . </S>"
  ]
}