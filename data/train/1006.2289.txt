{
  "article_text": [
    "description logics ( dls ) @xcite are a family of logic - based knowledge representation formalisms , which can be used to represent the conceptual knowledge of an application domain in a structured and formally well - understood way .",
    "they are employed in various application domains , such as natural language processing , configuration of technical systems , databases , and biomedical ontologies , but their most notable success so far is the adoption of the dl - based language owl @xcite as standard ontology language for the semantic web .    in dls",
    ", concepts are formally described by _",
    "concept terms _ , i.e. , expressions that are built from concept names ( unary predicates ) and role names ( binary predicates ) using concept constructors .",
    "the expressivity of a particular dl is determined by which concept constructors are available in it . from a semantic point of view",
    ", concept names and concept terms represent sets of individuals , whereas roles represent binary relations between individuals .",
    "for example , using the concept name @xmath1 , and the role name @xmath2 , the concept of _ women having a daughter _ can be represented by the concept term @xmath3 and the concept of _ women having only daughters _ by @xmath4 knowledge representation systems based on dls provide their users with various inference services that allow them to deduce implicit knowledge from the explicitly represented knowledge .",
    "an important inference problem solved by dl systems is the subsumption problem : the subsumption algorithm allows one to determine subconcept - superconcept relationships .",
    "for example , the concept term @xmath1 subsumes the concept term @xmath5 since all instances of the second term are also instances of the first term , i.e. , the second term is always interpreted as a subset of the first term . with the help of the subsumption algorithm ,",
    "a newly introduced concept term can automatically be placed at the correct position in the hierarchy of the already existing concept terms .",
    "two concept terms @xmath6 are _ equivalent _ ( @xmath7 ) if they subsume each other , i.e. , if they always represent the same set of individuals .",
    "for example , the terms @xmath8 and @xmath9 are equivalent since the value restriction operator ( @xmath10 ) distributes over the conjunction operator ( @xmath11 ) .",
    "if we replace the value restriction operator by the existential restriction operator ( @xmath12 ) , then this equivalence no longer holds .",
    "however , for this operator , we still have the equivalence @xmath13 the equivalence test can , for example , be used to find out whether a concept term representing a particular notion has already been introduced , thus avoiding multiple introduction of the same concept into the concept hierarchy .",
    "this inference capability is very important if the knowledge base containing the concept terms is very large , evolves during a long time period , and is extended and maintained by several knowledge engineers .",
    "however , testing for equivalence of concepts is not always sufficient to find out whether , for a given concept term , there already exists another concept term in the knowledge base describing the same notion . on the one hand",
    ", different knowledge engineers may use different names for concepts , like @xmath14 versus @xmath15 . on the other hand , they may model on different levels of granularity .",
    "for example , assume that one knowledge engineer has defined the concept of _ men loving fast cars _ by the concept term @xmath16 a second knowledge engineer might represent this notion in a somewhat different way , e.g. , by using the concept term @xmath17 these two concept terms are not equivalent , but they are meant to represent the same concept .",
    "the two terms can obviously be made equivalent by substituting the concept name @xmath18 in the first term by the concept term @xmath19 and the concept name @xmath20 in the second term by the concept term @xmath21 .",
    "this leads us to _ unification of concept terms _ , i.e. , the question whether two concept terms can be made equivalent by applying an appropriate substitution , where a substitution replaces ( some of the ) concept names by concept terms .",
    "of course , it is not necessarily the case that unifiable concept terms are meant to represent the same notion .",
    "a unifiability test can , however , suggest to the knowledge engineer possible candidate terms .",
    "a _ unifier _",
    "( i.e. , a substitution whose application makes the two terms equivalent ) then proposes appropriate definitions for the concept names . in our example , we know that , if we define @xmath20 as @xmath21 and @xmath18 as @xmath19 , then the concept terms @xmath22 and @xmath23 are equivalent w.r.t .",
    "these definitions .",
    "unification in dls was first considered in @xcite for a dl called @xmath24 , which has the concept constructors _ conjunction _ ( @xmath11 ) , _ value restriction _ ( @xmath10 ) , and the _ top concept _ ( @xmath25 ) .",
    "it was shown that unification in @xmath24 is decidable and exptime - complete , i.e. , given an @xmath24-unification problem , we can effectively decide whether it has a solution or not , but in the worst - case , any such decision procedure needs exponential time .",
    "this result was extended in @xcite to a more expressive dl , which additionally has the role constructor _",
    "transitive closure_. interestingly , the _ unification type _ of @xmath24 had been determined almost a decade earlier in @xcite . in fact , as shown in @xcite , unification in @xmath24 corresponds to unification modulo the equational theory of idempotent abelian monoids with several homomorphisms . in @xcite",
    "it was shown that , already for a single homomorphism , unification modulo this theory has unification type zero , i.e. , there are unification problems for this theory that do not have a minimal complete set of unifiers .",
    "in particular , such unification problems can not have a finite complete set of unifiers .    in this paper , we consider unification in the dl @xmath26 .",
    "the @xmath0-family consists of inexpressive dls whose main distinguishing feature is that they provide their users with _ existential restrictions _ ( @xmath12 ) rather than value restrictions ( @xmath10 ) as the main concept constructor involving roles .",
    "the core language of this family is @xmath0 , which has the top concept , conjunction , and existential restrictions as concept constructors .",
    "this family has recently drawn considerable attention since , on the one hand , the subsumption problem stays tractable ( i.e. , decidable in polynomial time ) in situations where @xmath24 , the corresponding dl with value restrictions , becomes intractable : subsumption between concept terms is tractable for both @xmath24 and @xmath0 @xcite , but allowing the use of concept definitions or even more expressive terminological formalisms makes @xmath24 intractable @xcite , whereas it leaves @xmath0 tractable @xcite . on the other hand , although of limited expressive power , @xmath0 is nevertheless used in applications , e.g. , to define biomedical ontologies .",
    "for example , both the large medical ontology snomed  ct and the gene ontology can be expressed in @xmath0 , and the same is true for large parts of the medical ontology galen @xcite .",
    "the importance of @xmath0 can also be seen from the fact that the new owl2 standard contains a sub - profile owl2el , which is based on ( an extension of ) @xmath0 .",
    "unification in @xmath0 has , to the best of our knowledge , not been investigated before , but matching ( where one side of the equation(s ) to be solved does not contain variables ) has been considered in @xcite . in particular ,",
    "it was shown in @xcite that the decision problem , i.e. , the problem of deciding whether a given @xmath0-matching problem has a matcher or not , is np - complete .",
    "interestingly , @xmath24 behaves better w.r.t .",
    "matching than @xmath0 : for @xmath24 , the decision problem is tractable @xcite . in this paper , we show that , w.r.t .",
    "the unification type , @xmath24 and @xmath0 behave the same : just as @xmath24 , the dl @xmath0 has unification type zero .",
    "however , w.r.t .",
    "the decision problem , @xmath0 behaves much better than @xmath24 : @xmath0-unification is np - complete , and thus has the same complexity as @xmath0-matching .",
    "regarding unification in dls that are more expressive than @xmath0 and @xmath24 , one must look at the literature on unification in modal logics .",
    "it is well - known that there is a close connection between modal logics and dls @xcite .",
    "for example , the dl @xmath27 , which can be obtained by adding negation to @xmath0 or @xmath28 , corresponds to the basic ( multi-)modal logic @xmath29 .",
    "decidability of unification in @xmath29 is a long - standing open problem .",
    "recently , undecidability of unification in some extensions of @xmath29 ( for example , by the universal modality ) was shown in @xcite .",
    "the undecidability results in @xcite also imply undecidability of unification in some expressive dls ( e.g. , @xmath30 @xcite ) .",
    "the unification types of some modal ( and related ) logics have been determined by ghilardi ; for example in @xcite he shows that @xmath31 and @xmath32 have unification type finitary .",
    "unification in sub - boolean modal logics ( i.e. , modal logics that are not closed under all boolean operations , such as the modal logics corresponding to @xmath0 and @xmath28 ) has , to the best of our knowledge , not been considered in the modal logic literature .",
    "in addition to unification of concept terms as introduced until now , we will also consider unification w.r.t .",
    "a so - called acyclic tbox in this article .",
    "until now , we have only talked about concept terms , i.e. , complex descriptions of concepts that are built from concept and role names using the concept constructors of the given dl . in applications of dls , it is , of course , inconvenient to always use such complex descriptions when referring to concepts . for this reason ,",
    "dls are usually also equipped with a terminological formalism . in its simplest form , this formalism allows to introduce abbreviations for concept terms .",
    "for example , the two concept definitions @xmath33 introduce the abbreviation @xmath1 for the concept term @xmath34 and the abbreviation @xmath35 for the concept term @xmath36 . a finite set of such concept definitions is called an _ acyclic _",
    "tbox if it is unambiguous ( i.e. , every concept name occurs at most once as left - hand side ) and acyclic ( i.e. , there are no cyclic dependencies between concept definitions ) .",
    "these restrictions ensure that every defined concept ( i.e. , concept name occurring on the left - hand side of a definition ) has a unique expansion to a concept term that it abbreviates . inference problems like subsumption and unification can also be considered w.r.t .  such acyclic tboxes .",
    "as mentioned above , the complexity of the subsumption problem increases for the dl @xmath24 if acyclic tboxes are taken into account @xcite .",
    "in contrast , for @xmath0 , the complexity of the subsumption problem stays polynomial in the presence of acyclic tboxes .",
    "we show that , for unification in @xmath0 , adding acyclic tboxes is also harmless , i.e. , unification in @xmath0 _ w.r.t .",
    "acyclic tboxes _ is also np - complete .",
    "this article is structured as follows . in the next section ,",
    "we define the dl @xmath0 and unification in @xmath0 more formally . in section  [ subs ] , we recall the characterization of subsumption and equivalence in @xmath0 from @xcite , and in section  [ type : zero ] we use this to show that unification in @xmath0 has type zero . in section  [ decision : problem ] , we show that unification in @xmath0 is np - complete .",
    "the unification algorithm establishing the complexity upper bound is a typical `` guess and then test '' np - algorithm , and thus it is unlikely that a direct implementation of this algorithm will perform well in practice . in section  [ goal : oriented : sect ] , we introduce a more goal - oriented unification algorithm for @xmath0 , in which non - deterministic decisions are only made if they are triggered by `` unsolved parts '' of the unification problem . in section  [ eq : th : sect ] , we point out that our results for @xmath0-unification imply that unification modulo the equational theory of semilattices with monotone operators @xcite is np - complete and of unification type zero .    more information about description logics can be found in @xcite , and about unification theory in @xcite .",
    "this article is an extended version of a paper @xcite published in the proceedings of the 20th international conference on rewriting techniques and applications ( rta09 ) .",
    "in addition to giving more detailed proofs , we have added the goal - oriented unification algorithm ( section  [ goal : oriented : sect ] ) and the treatment of unification modulo acyclic tboxes ( subsection  [ unif : mod : tbox ] ) .",
    "in this section , we first define the syntax and semantics of @xmath0-concept terms as well as the subsumption and the equivalence relation on these terms . then",
    ", we introduce unification of @xmath0-concept terms , and finally extend this notion to unification modulo an acyclic tbox .      starting with a set @xmath37 of concept names and a set @xmath38 of role names , _",
    "_ are built using the following concept constructors : the nullary constructor _ top - concept _",
    "( @xmath25 ) , the binary constructor _ conjunction _ ( @xmath39 ) , and for every role name @xmath40 , the unary constructor _ existential restriction _ ( @xmath12 ) .",
    "the semantics of @xmath0 is defined in the usual way , using the notion of an interpretation @xmath41 , which consists of a nonempty domain @xmath42 and an interpretation function @xmath43 that assigns binary relations on @xmath42 to role names and subsets of @xmath42 to concept terms , as shown in the semantics column of table  [ el - syn - sem ] .        ' '' ''    concept name & @xmath44 & @xmath45 +    ' '' ''    role name & @xmath46 & @xmath47 +    ' '' ''    top - concept & @xmath25 & @xmath48 +    ' '' ''    conjunction & @xmath49 & @xmath50 +    ' '' ''    existential restriction & @xmath12 & @xmath51 +    ' '' ''    subsumption & @xmath52 & @xmath53 +    ' '' ''    equivalence & @xmath54 & @xmath55 +    the concept term @xmath56 _ is subsumed by _ the concept term @xmath57 ( written @xmath58 ) iff @xmath53 holds for all interpretations @xmath59 .",
    "we say that @xmath56 _ is equivalent to _ @xmath57 ( written @xmath7 ) iff @xmath58 and @xmath60 , i.e. , iff @xmath55 holds for all interpretations @xmath59 .",
    "the concept term @xmath56 _ is strictly subsumed by _ the concept term @xmath57 ( written @xmath61 ) iff @xmath58 and @xmath62 .",
    "it is well - known that subsumption ( and thus also equivalence ) of @xmath26-concept terms can be decided in polynomial time @xcite .      in order to define unification of concept terms ,",
    "we first introduce the notion of a substitution operating on concept terms . to this purpose",
    ", we partition the set of concepts names into a set @xmath63 of concept variables ( which may be replaced by substitutions ) and a set @xmath64 of concept constants ( which must not be replaced by substitutions ) .",
    "intuitively , @xmath63 are the concept names that have possibly been given another name or been specified in more detail in another concept term describing the same notion .",
    "the elements of @xmath64 are the ones of which it is assumed that the same name is used by all knowledge engineers ( e.g. , standardized names in a certain domain ) .    a _ substitution _",
    "@xmath65 is a mapping from @xmath63 into the set of all @xmath26-concept terms .",
    "this mapping is extended to concept terms in the obvious way , i.e. ,    1 .",
    "@xmath66 for all @xmath67 , 2 .",
    "@xmath68 , 3 .",
    "@xmath69 , and 4 .",
    "@xmath70 .",
    "an _ @xmath26-unification problem _ is of the form @xmath71 , where @xmath72 are @xmath26-concept terms .",
    "the substitution @xmath65 is a _ unifier _ ( or _ solution _ ) of @xmath73 iff @xmath74 for @xmath75 . in this case",
    ", @xmath73 is called _ solvable _ or _ unifiable_.    when we say that @xmath26-unification is _ decidable _ , then we mean that the following decision problem is decidable : given an @xmath26-unification problem @xmath73 , decide whether @xmath73 is solvable or not . accordingly",
    ", we say that @xmath26-unification is _ np - complete _ if this decision problem is np - complete .    in the following , we introduce some standard notions from unification theory @xcite , but formulated for the special case of @xmath26-unification rather than for an arbitrary equational theory .",
    "unifiers can be compared using the instantiation preorder @xmath76 .",
    "let @xmath73 be an @xmath26-unification problem , @xmath77 the set of variables occurring in @xmath73 , and @xmath78 two unifiers of this problem .",
    "we define @xmath79 if @xmath80 , then we say that @xmath81 is an _ instance _ of @xmath65 .",
    "let @xmath73 be an @xmath26-unification problem .",
    "the set of substitutions @xmath82 is called a _",
    "complete set of unifiers _ for @xmath73 iff it satisfies the following two properties :    1 .",
    "every element of @xmath82 is a unifier of @xmath73 ; 2 .",
    "if @xmath81 is a unifier of @xmath73 , then there exists a unifier @xmath83 such that @xmath80 .",
    "the set @xmath82 is called a _ minimal complete set of unifiers _ for @xmath73 iff it additionally satisfies    1 .",
    "if @xmath84 , then @xmath80 implies @xmath85 .",
    "the unification type of a given unification problem is determined by the existence and cardinality of such a minimal complete set .",
    "let @xmath73 be an @xmath26-unification problem .",
    "this problem has type    1 .",
    "_ unitary _ iff it has a minimal complete set of unifiers of cardinality @xmath86 ; 2 .",
    "_ finitary _ iff it has a finite minimal complete set of unifiers ; 3 .",
    "_ infinitary _ iff it has an infinite minimal complete set of unifiers ; 4 .",
    "_ zero _ iff it does not have a minimal complete set of unifiers .",
    "note that the set of all unifiers of a given @xmath26-unification problem is always a complete set of unifiers .",
    "however , this set is usually infinite and redundant ( in the sense that some unifiers are instances of others ) . for a unitary or finitary @xmath26-unification problem ,",
    "all unifiers can be represented by a finite complete set of unifiers , whereas for problems of type infinitary or zero this is no longer possible .",
    "in fact , if a problem has a finite complete set of unifiers @xmath82 , then it also has a finite _ minimal _ complete set of unifiers , which can be obtained by iteratively removing redundant elements from @xmath82 .",
    "for an infinite complete set of unifiers , this approach of removing redundant unifiers may be infinite , and the set reached in the limit need no longer be complete .",
    "this is what happens for problems of type zero .",
    "the difference between infinitary and type zero is that a unification problem of type zero can not even have a non - redundant complete set of unifiers , i.e. , every complete set of unifiers must contain different unifiers @xmath78 such that @xmath80 .",
    "more information on unification type zero can be found in @xcite .",
    "when we say that _ @xmath26 has unification type zero _ , we mean that there exists an @xmath26-unification problem that has type zero . before we can prove in section  [ type : zero ] that this is indeed the case , we must have a closer look at equivalence in @xmath26 in section  [ subs ] . but first , we consider unification modulo acyclic tboxes .",
    "a _ concept definition _ is of the form @xmath87 where @xmath44 is a concept name and @xmath56 is a concept term . a",
    "@xmath88 is a finite set of concept definitions such that no concept name occurs more than once on the left - hand side of a concept definition in @xmath88 .",
    "the tbox @xmath88 is called _ acyclic _ if there are no cyclic dependencies between its concept definitions . to be more precise",
    ", we say that the concept name @xmath44 _ directly depends on _ the concept name @xmath89 in a tbox @xmath88 if @xmath88 contains a concept definition @xmath87 and @xmath89 occurs in @xmath56 .",
    "let _ depends on _ be the transitive closure of the relation _ directly depends on_. then @xmath88 contains a _ terminological cycle _ if there is a concept name @xmath44 that depends on itself .",
    "otherwise , @xmath88 is called _",
    "acyclic_. given a tbox @xmath88 , we call a concept name @xmath44 a _ defined concept _ if it occurs as the left - side of a concept definition @xmath87 in @xmath88 .",
    "all other concept names are called _ primitive concepts_.    the interpretation @xmath90 is a model of the tbox @xmath91 iff @xmath92 holds for all concept definitions @xmath87 in @xmath91 .",
    "subsumption and equivalence w.r.t .",
    "a tbox are defined as follows : @xmath93 ( @xmath94 ) iff @xmath53 ( @xmath55 ) holds for all models @xmath59 of @xmath95 .",
    "subsumption and equivalence w.r.t .",
    "an acyclic tbox can be reduced to subsumption and equivalence of concept terms ( without tbox ) by _ expanding _ the concept terms w.r.t .",
    "the tbox : given a concept term @xmath56 , its expansion @xmath96 w.r.t .",
    "the acyclic tbox @xmath88 is obtained by exhaustively replacing all defined concept names @xmath44 occurring on the left - hand side of concept definitions @xmath87 in @xmath88 by their defining concept terms @xmath56 . given concept terms @xmath6 , we have @xmath97 iff @xmath98 @xcite .",
    "the same is true for equivalence , i.e. , @xmath99 iff @xmath100 .",
    "this expansion process may , however , result in an exponential blow - up @xcite , and thus this reduction of subsumption and equivalence w.r.t .",
    "an acyclic tbox to subsumption and equivalence without a tbox is not polynomial .",
    "nevertheless , in @xmath26 , subsumption ( and thus also equivalence ) w.r.t .",
    "acyclic tboxes can be decided in polynomial time @xcite .    in our definition of unification",
    "modulo acyclic tboxes , we assume that all defined concepts are concept constants .",
    "in fact , defined concepts already have a definition in the given tbox , and thus it does not make sense to introduce new ones for them by unification . in this setting , a _ substitution _ @xmath65 is a mapping from @xmath63 into the set of all @xmath26-concept terms _ not containing any defined concepts_. the extension of @xmath65 to concept terms is defined as in the previous subsection , and its application to @xmath95 is defined as @xmath101    an _ @xmath26-unification problem modulo",
    "an acyclic tbox _ is of the form @xmath102 , where @xmath72 are @xmath26-concept terms , and @xmath88 is an acyclic @xmath26-tbox .",
    "the substitution @xmath65 is a _ unifier _ ( or _ solution _ ) of @xmath73 _ modulo @xmath88 _ iff @xmath103 for @xmath75 . in this case",
    ", @xmath73 is called _ solvable modulo @xmath88 _ or _ unifiable modulo @xmath88_.    coming back to our example from the introduction , assume that one knowledge engineer has written the concept definition @xmath104 to the tbox , whereas a second one has written the definition @xmath105 where all the concept names occurring on the left - hand side of these definitions are primitive concepts .",
    "then the substitution that replaces @xmath18 by @xmath19 and @xmath20 by @xmath21 is a unifier of @xmath106 w.r.t .",
    "the tbox @xmath88 consisting of these two definitions .",
    "using expansion , we can reduce unification modulo an acyclic tbox to unification without a tbox .",
    "in fact , the following lemma is an easy consequence of the fact that @xmath107 holds for all @xmath26-concept terms @xmath56 .    [ expansion : lem ] the substitution @xmath65 is a unifier of @xmath108 modulo @xmath88 iff it is a unifier of @xmath109 .",
    "since expansion can cause an exponential blow - up , this is not a polynomial reduction . in the remainder of this subsection",
    ", we show that there actually exists a polynomial - time reduction of unification modulo an acyclic tbox to unification without a tbox .",
    "we say that the @xmath0-unification problem @xmath73 is in _ dag - solved form _ if it can be written as @xmath110 , where @xmath111 are distinct concept variables such that , for all @xmath112 , @xmath113 does not occur in @xmath114 .",
    "for @xmath115 , let @xmath116 be the substitution that maps @xmath113 to @xmath117 and leaves all other variables unchanged .",
    "we define the substitution @xmath118 as @xmath119 for @xmath120 , and @xmath121 for all other variables @xmath122 .",
    "the following is an instance of a well - known fact from unification theory @xcite .",
    "[ jk : lemma ] let @xmath110 be an @xmath0-unification problem in dag - solved form .",
    "then , the set @xmath123 is a complete set of unifiers for @xmath73 .",
    "there is a close relationship between acyclic tboxes and unification problems in dag - solved form .",
    "in fact , if @xmath88 is an acyclic tbox , then there is an enumeration @xmath124 of the defined concepts in @xmath88 such that @xmath125 and @xmath126 does not occur in @xmath127 .",
    "consequently , the corresponding unification problem @xmath128 ( where @xmath129 are now viewed as concept variables ) is in dag - solved form .",
    "in addition , it is easy to see that , for any @xmath0-concept term @xmath56 , we have @xmath130 .",
    "the @xmath26-unification problem @xmath102 is solvable modulo the acyclic tbox @xmath88 iff @xmath131 is solvable .",
    "are treated as concept constants in @xmath73 , and as concept variables in @xmath131 . ]",
    "assume that @xmath81 is a unifier of @xmath102 modulo @xmath88 .",
    "then it is a unifier of @xmath132 , by lemma  [ expansion : lem ] .",
    "since @xmath133 and @xmath134 , we have @xmath135 .",
    "consequently , if we define the substitution @xmath136 by setting @xmath137 for all concept variables and defined concepts @xmath122 , then @xmath136 is a unifier of @xmath138 .",
    "in addition , since @xmath139 is a unifier of @xmath140 , @xmath136 is also a unifier of @xmath131 .",
    "conversely , assume that @xmath136 is a unifier of @xmath131 .",
    "in particular , this implies that @xmath136 is a unifier of @xmath140 . by lemma  [ jk : lemma ]",
    ", @xmath141 is a complete set of unifiers for @xmath140 , and thus there is a substitution @xmath81 such that @xmath142 for all concept variables occurring in the unification problem @xmath131 . since @xmath133 and @xmath134",
    ", this implies that @xmath81 is a unifier of @xmath109 , and thus of @xmath102 modulo @xmath88 , by lemma  [ expansion : lem ] .",
    "since the size of @xmath140 is basically the same as the size of @xmath88 , the size of @xmath143 is linear in the size of @xmath73 and @xmath88 .",
    "thus , the above lemma provides us with a polynomial - time reduction of @xmath0-unification w.r.t .",
    "acyclic tboxes to @xmath0-unification .",
    "[ reduction : thm ] @xmath0-unification w.r.t .",
    "acyclic tboxes can be reduced in polynomial time to @xmath0-unification .",
    "in order to characterize equivalence of @xmath26-concept terms , the notion of a reduced @xmath26-concept term is introduced in @xcite .",
    "a given @xmath26-concept term can be transformed into an equivalent reduced term by applying the following rules modulo associativity and commutativity of conjunction : @xmath144 a\\sqcap a \\rightarrow a     & \\mbox{for all concept names $ a\\in n_{\\mathit{con}}$}\\\\[.3em ] \\exists\\ , r.c\\sqcap \\exists\\ , r.d \\rightarrow \\exists\\ , r.c & \\mbox{for all $ \\mathcal { el}$-concept terms $ c , d$                                                                 with $ c\\sqsubseteq d$ } \\end{array}\\ ] ] obviously , these rules are equivalence preserving .",
    "we say that the @xmath26-concept term @xmath57 _ is reduced _ if none of the above rules is applicable to it ( modulo associativity and commutativity of @xmath11 ) , and that @xmath56 _ can be reduced to _",
    "@xmath57 if @xmath57 can be obtained from @xmath56 by applying the above rules ( modulo associativity and commutativity of @xmath11 ) . the @xmath26-concept term @xmath57 is a _ reduced form _ of @xmath56 if @xmath56 can be reduced to @xmath57 and @xmath57 is reduced .",
    "the following theorem is an easy consequence of theorem  6.3.1 on page  181 of @xcite .",
    "[ cor1 ] let @xmath6 be @xmath26-concept terms , and @xmath145 reduced forms of @xmath6 , respectively . then @xmath7 iff @xmath146 is identical to @xmath147 up to associativity and commutativity of @xmath11 .",
    "this theorem can also be used to derive a recursive characterization of subsumption in @xmath0 .",
    "in fact , if @xmath58 , then @xmath148 , and thus @xmath56 and @xmath39 have the same reduced form .",
    "thus , during reduction , all concept names and existential restrictions of @xmath57 must be `` eaten up '' by corresponding concept names and existential restrictions of @xmath56 .",
    "[ cor2 ] let @xmath149 and @xmath150 , where @xmath151 are concept names .",
    "then @xmath58 iff @xmath152 and for every @xmath153 , there exists an @xmath154 , such that @xmath155 and @xmath156 .",
    "note that this corollary also covers the cases where some of the numbers @xmath157 are zero .",
    "the empty conjunction should then be read as @xmath25 .",
    "the following lemma , which is an immediate consequence of this corollary , will be used in our proof that @xmath26 has unification type zero .",
    "[ lem1 ] if @xmath6 are reduced @xmath26-concept terms such that @xmath158 , then @xmath56 is either @xmath25 , or of the form @xmath159 where @xmath160 ; @xmath161 are reduced and pairwise incomparable w.r.t .",
    "subsumption ; and @xmath162 .",
    "conversely , if @xmath6 are @xmath26-concept terms such that @xmath159 and @xmath162 , then @xmath158 .    the following lemma states several other obvious consequences of corollary  [ cor2 ] .    [ 1:new : lem ]    1 .",
    "the existential restriction @xmath12 is reduced iff @xmath56 is reduced .",
    "2 .   let @xmath163 be concept names or existential restrictions .",
    "then the conjunction @xmath163 is reduced iff @xmath164 are reduced and pairwise incomparable w.r.t .",
    "3 .   let @xmath165 and @xmath166 be conjunctions of @xmath0-concept terms .",
    "if , for all @xmath167 , there exists @xmath168 , such that @xmath169 , then @xmath58 . if @xmath170 are concept names or existential restrictions , then the implication in the other direction also holds .    in the proof of decidability of @xmath26-unification , we will make use of the fact that the inverse strict subsumption order is well - founded .    [",
    "well : founded1 ] there is no infinite sequence @xmath171 of @xmath26-concept terms such that @xmath172 .",
    "we define the _ role depth _ of an @xmath26-concept term @xmath56 as the maximal nesting of existential restrictions in @xmath56 .",
    "let @xmath173 be the role depth of @xmath174 .",
    "since @xmath175 for @xmath176 , it is an easy consequence of corollary  [ cor2 ] that the role depth of @xmath117 is bounded by @xmath173 , and that @xmath117 contains only concept and role names occurring in @xmath174 .",
    "in addition , it is known that , for a given natural number @xmath173 and finite sets of concept names @xmath37 and role names @xmath38 , there are , up to equivalence , only finitely many @xmath26-concept terms built using concept names from @xmath177 and role names from @xmath178 and of a role depth bounded by @xmath173 @xcite .",
    "consequently , there are indices @xmath179 such that @xmath180 .",
    "this contradicts our assumption that @xmath181 .",
    "to show that @xmath26 has unification type zero , we exhibit an @xmath26-unification problem that has this type .    [",
    "type : zero : thm ] let @xmath182 be variables .",
    "the @xmath26-unification problem @xmath183 has unification type zero .",
    "it is enough to show that any complete set of unifiers for this problem is redundant , i.e. , contains two different unifiers that are comparable w.r.t .",
    "the instantiation preorder .",
    "thus , let @xmath82 be a complete set of unifiers for @xmath73 .",
    "first , note that @xmath82 must contain a unifier that maps @xmath122 to an @xmath26-concept term not equivalent to @xmath25 or @xmath184 .",
    "in fact , consider a substitution @xmath136 such that @xmath185 and @xmath186 .",
    "obviously , @xmath136 is a unifier of @xmath73 .",
    "thus , @xmath82 must contain a unifier @xmath65 such that @xmath187 .",
    "in particular , this means that there is a substitution @xmath188 such that @xmath189 .",
    "obviously , @xmath190 would imply @xmath191 , and thus @xmath192 , which is , however , not the case .",
    "similarly , @xmath193 would imply @xmath194 , and thus @xmath195 , which is also not the case .",
    "thus , let @xmath83 be such that @xmath196 and @xmath197 .",
    "without loss of generality , we assume that @xmath198 and @xmath199 are reduced .",
    "since @xmath65 is a unifier of @xmath73 , we have @xmath158 .",
    "consequently , lemma  [ lem1 ] yields that @xmath56 is of the form @xmath159 where @xmath160 , @xmath161 are reduced and pairwise incomparable w.r.t .",
    "subsumption , and @xmath162 .",
    "we use @xmath65 to construct a new unifier @xmath200 as follows : @xmath201 where @xmath202 is a new variable ( i.e. , one not occurring in @xmath6 ) .",
    "the second part of lemma  [ lem1 ] implies that @xmath200 is indeed a unifier of @xmath73 .",
    "next , we show that @xmath203 . to this purpose",
    ", we consider the substitution @xmath188 that maps @xmath202 to @xmath204 , and does not change any of the other variables .",
    "then we have @xmath205 and @xmath206 .",
    "note that the second equivalence holds since we have @xmath207 .",
    "since @xmath82 is complete , there exists a unifier @xmath208 such that @xmath209 .",
    "transitivity of the relation @xmath76 thus yields @xmath210 .",
    "since @xmath65 and @xmath81 both belong to @xmath82 , we have completed the proof of the theorem once we have shown that @xmath211 .",
    "assume to the contrary that @xmath85 .",
    "then we have @xmath212 , and thus there exists a substitution @xmath213 such that @xmath214 , i.e. , @xmath215 recall that the concept terms @xmath161 are reduced and pairwise incomparable w.r.t .  subsumption .",
    "in addition , since @xmath216 is reduced and not equivalent to @xmath184 , none of the concept terms @xmath161 can be equivalent to @xmath25 . finally , @xmath202 is a concept name that does not occur in @xmath161 .",
    "all this implies that @xmath217 is reduced .",
    "obviously , any reduced form for @xmath218 is a conjunction of at most @xmath219 existential restrictions .",
    "thus , theorem  [ cor1 ] shows that the above equivalence @xmath220 actually can not hold .    to sum up",
    ", we have shown that @xmath82 contains two distinct unifiers @xmath78 such that @xmath210 .",
    "since @xmath82 was an arbitrary complete set of unifiers for @xmath73 , this shows that this unification problem can not have a minimal complete set of unifiers .",
    "before we can describe our decision procedure for @xmath0-unification , we must introduce some notation .",
    "an @xmath0-concept term is called an _ atom _ iff it is a concept name ( i.e. , concept constant or concept variable ) or an existential restriction @xmath221 . is _ not _ an atom . ] obviously , any @xmath0-concept term is ( equivalent to ) a conjunction of atoms , where the empty conjunction is @xmath25 .",
    "the set @xmath222 of _ atoms of an @xmath0-concept term @xmath56 _ is defined inductively : if @xmath223 , then @xmath224 ; if @xmath56 is a concept name , then @xmath225 ; if @xmath226 then @xmath227 ; if @xmath228 , then @xmath229 .",
    "concept names and existential restrictions @xmath221 where @xmath57 is a concept name or @xmath25 are called _",
    "flat atoms_. an @xmath0-concept term is _ flat _ iff it is a conjunction of flat atoms ( where the empty conjunction is @xmath25 ) .",
    "the @xmath0-unification problem @xmath73 is _ flat _ iff it consists of equations between flat @xmath0-concept terms . by introducing new concept variables and eliminating @xmath25 ,",
    "any @xmath0-unification problem @xmath73 can be transformed in polynomial time into a flat @xmath0-unification problem @xmath230 such that @xmath73 is solvable iff @xmath230 is solvable .",
    "thus , we may assume without loss of generality that our input @xmath0-unification problems are flat .",
    "given a flat @xmath0-unification problem @xmath231 , we call the atoms of @xmath232 the _ atoms of @xmath73_. atoms of @xmath73 that are not variables ( i.e. , not elements of @xmath63 ) are called _ non - variable atoms of @xmath73_.    the unifier @xmath65 of @xmath73 is called _ reduced _ iff , for all concept variables @xmath122 occurring in @xmath73 , the @xmath0-concept term @xmath233 is reduced .",
    "it is _ ground _ iff , for all concept variables @xmath122 occurring in @xmath73 , the @xmath0-concept term @xmath233 does not contain variables .",
    "obviously , @xmath73 is solvable iff it has a reduced ground unifier . given a ground unifier @xmath65 of @xmath73 , the _ atoms of @xmath65 _ are the atoms of all the concept terms @xmath233 , where @xmath122 ranges over all variables occurring in @xmath73 .",
    "[ occurrence : remark ] in the following , we consider situations where all occurrences of a given reduced atom @xmath57 in a reduced concept term @xmath56 are replaced by a more general concept term , i.e. , by a concept term @xmath234 with @xmath235 .",
    "however , when we say _ occurrence of @xmath57 in @xmath56 _ , we mean occurrence modulo equivalence ( @xmath236 ) rather than syntactic occurrence .",
    "for example , if @xmath237 , @xmath238 , and @xmath239 , then the term obtained by replacing all occurrences of @xmath57 in @xmath56 by @xmath234 should be @xmath240 , and not @xmath241 .",
    "since @xmath56 and @xmath57 are reduced , equivalence is actually the same as being identical up to associativity and commutativity of @xmath11 . in particular",
    ", this means that any concept term that ( syntactically ) occurs in @xmath56 and is equivalent to the atom @xmath57 is also an atom , i.e. , only atoms can be replaced by @xmath234 . in order to make this meaning of occurrence explicit",
    "we will call it _ occurrence modulo @xmath242 _ in the following",
    ". we will write @xmath243 to express that the atoms @xmath244 and @xmath245 are identical up to associativity and commutativity of @xmath11 . obviously , @xmath243 implies @xmath246 .",
    "[ monotone : greater : lem ] let @xmath247 be @xmath0-concept terms such that @xmath57 is a reduced atom , @xmath248 , and @xmath56 is reduced and contains at least one occurrence of @xmath57 modulo @xmath242 . if @xmath249 is obtained from @xmath56 by replacing all occurrences of @xmath57 by @xmath234 , then @xmath250 .",
    "we prove the lemma by induction on the size of @xmath56 . if @xmath251 , then @xmath252 , and thus @xmath253 , which yields @xmath250 .",
    "thus , assume that @xmath254 . in this case , @xmath56 can not be a concept name since it contains the atom @xmath57 . if @xmath255 , then @xmath57 occurs in @xmath204 modulo @xmath242 . by induction",
    ", we can assume that @xmath256 , where @xmath257 is obtained from @xmath204 by replacing all occurrences of @xmath57 ( modulo @xmath242 ) by @xmath234 .",
    "thus , we have @xmath258 by corollary  [ cor2 ] .",
    "finally , assume that @xmath259 for @xmath260 atoms @xmath161 . since @xmath56 is reduced , these atoms are incomparable w.r.t .",
    "subsumption , and since the atom @xmath57 occurs in @xmath56 modulo @xmath242 we can assume without loss of generality that @xmath57 occurs in @xmath204 modulo @xmath242 .",
    "let @xmath261 be respectively obtained from @xmath161 by replacing every occurrence of @xmath57 ( modulo @xmath242 ) by @xmath234 , and then reducing the concept term obtained this way . by induction , we have @xmath256 .",
    "assume that @xmath262 .",
    "since the concept constructors of @xmath0 are monotone w.r.t .",
    "subsumption @xmath263 , we have @xmath264 , and thus @xmath262 means that @xmath265 .",
    "consequently , @xmath259 and the reduced form of @xmath266 must be equal up to associativity and commutativity of @xmath11 .",
    "if @xmath266 is not reduced , then its reduced form is actually a conjunction of @xmath267 atoms , which contradicts @xmath265 .",
    "if @xmath266 is reduced , then @xmath256 implies that there is an @xmath268 such that @xmath269 .",
    "however , then @xmath270 contradicts the fact that the atoms @xmath161 are incomparable w.r.t .",
    "subsumption .",
    "proposition  [ well : founded1 ] says that the inverse strict subsumption order on concept terms is well - founded .",
    "we use this fact to obtain a well - founded strict order @xmath271 on ground unifiers .",
    "let @xmath78 be ground unifiers of @xmath73 .",
    "we define    1 .",
    "@xmath272 iff @xmath273 holds for all variables @xmath122 occurring in @xmath73 .",
    "@xmath274 iff @xmath272 and @xmath275 , i.e. , iff @xmath273 holds for all variables @xmath122 occurring in @xmath73 , and @xmath276 holds for at least one variable @xmath122 occurring in @xmath73 .",
    "if @xmath73 contains @xmath219 variables , then @xmath277 is the @xmath219-fold product of the order @xmath263 with itself .",
    "since the strict part @xmath278 of the inverse subsumption order @xmath263 is well - founded by proposition  [ well : founded1 ] , the strict part @xmath271 of @xmath277 is also well - founded @xcite .",
    "the ground unifier @xmath65 of @xmath73 is called _ is - minimal _ iff there is no ground unifier @xmath81 of @xmath73 such that @xmath274 .",
    "the following proposition is an easy consequence of the fact that @xmath271 is well - founded .",
    "[ minimal : unif : prop ] let @xmath73 be an @xmath0-unification problem . then @xmath73 is solvable iff it has an is - minimal reduced ground unifier .    in the following ,",
    "we show that is - minimal reduced ground unifiers of flat @xmath0-unification problems satisfy properties that make it easy to check ( with an np - algorithm ) whether such a unifier exists or not .",
    "[ atoms : equiv : lem ] let @xmath73 be a flat @xmath0-unification problem and @xmath279 an is - minimal reduced ground unifier of @xmath73 . if @xmath56 is an atom of @xmath279 , then there is a non - variable atom @xmath57 of @xmath73 such that @xmath280 .    the main idea underlying",
    "the proof of this crucial lemma is that an atom @xmath56 of a unifier @xmath65 that violates the condition of the lemma ( i.e. , that is not of the form @xmath280 for a non - variable atom @xmath57 of @xmath73 ) can be replaced by a concept term @xmath147 such that @xmath281 , which yields a unifier of @xmath73 that is smaller than @xmath65 w.r.t .",
    "@xmath271 .    before proving the lemma formally ,",
    "let us illustrate this idea by two examples .",
    "first , consider the unification problem @xmath282 the substitution @xmath283 is a unifier of @xmath284 that does not satisfy the condition of lemma  [ atoms : equiv : lem ] .",
    "in fact , @xmath89 is an atom of @xmath285 , but none of the non - variable atoms @xmath57 of @xmath284 ( which are @xmath44 , @xmath286 , and @xmath287 ) satisfy @xmath288 .",
    "the unifier @xmath285 is not is - minimal since @xmath289 , which can be obtained from @xmath285 by replacing the offending atom @xmath89 with @xmath25 , is a unifier of @xmath284 that is smaller than @xmath285 w.r.t .",
    "the unifier @xmath290 is is - minimal , and it clearly satisfies the condition of lemma  [ atoms : equiv : lem ] .",
    "second , consider the unification problem @xmath291 the substitution @xmath292 is a unifier of @xmath293 that does not satisfy the condition of lemma  [ atoms : equiv : lem ] .",
    "in fact , @xmath294 is an atom of @xmath295 , but none of the non - variable atoms @xmath57 of @xmath293 ( which are @xmath44 , @xmath89 , @xmath286 , and @xmath296 ) satisfy @xmath297 .",
    "the unifier @xmath295 is not is - minimal since @xmath298 , which can be obtained from @xmath295 by replacing the offending atom @xmath294 with @xmath299 , is a unifier of @xmath293 that is smaller than @xmath295 w.r.t .",
    "the unifier @xmath300 is is - minimal , and it clearly satisfies the condition of lemma  [ atoms : equiv : lem ] .",
    "assume that @xmath279 is an is - minimal reduced ground unifier of @xmath73 .",
    "since @xmath279 is reduced , all atoms of @xmath279 are reduced . in particular",
    ", this implies that @xmath56 is reduced , and since @xmath279 is ground , we know that @xmath56 is either a concept constant or an existential restriction",
    ".    _ first _ , assume that _",
    "@xmath56 is of the form @xmath44 for a concept constant @xmath44 _ , but there is no non - variable atom @xmath57 of @xmath73 such that @xmath301 .",
    "this simply means that @xmath44 does not appear in @xmath73 .",
    "let @xmath302 be the substitution obtained from @xmath279 by replacing every occurrence of @xmath44 by @xmath25 . since equivalence in @xmath0 is preserved under replacing concept names by @xmath25 , and since @xmath44 does not appear in @xmath73 , it is easy to see that @xmath302 is also a unifier of @xmath73 .",
    "however , since @xmath303 , this contradicts our assumption that @xmath279 is is - minimal .",
    "_ second _ , assume that _",
    "@xmath56 is an existential restriction of the form @xmath304 _ , but there is no non - variable atom @xmath57 of @xmath73 such that @xmath280 .",
    "we assume that @xmath56 is maximal ( w.r.t .",
    "subsumption ) with this property , i.e. , for every atom @xmath249 of @xmath279 with @xmath305 , there is a non - variable atom @xmath234 of @xmath73 such that @xmath306 .",
    "let @xmath307 be all the non - variable atoms of @xmath73 with @xmath308 ( @xmath309 ) . by our assumptions on @xmath56 , we actually have @xmath310 and , by lemma  [ lem1 ] , the atom @xmath311 is also an existential restriction @xmath312 ( @xmath309 ) .",
    "we consider the conjunction @xmath313 which is @xmath25 in case @xmath314 .",
    "given an @xmath0-concept term @xmath315 , the concept term @xmath316}}$ ] is obtained from @xmath315 by replacing every occurrence of @xmath56 ( modulo @xmath242 ) by @xmath147 .",
    "the substitution @xmath317}}$ ] is obtained from @xmath279 by replacing every occurrence of @xmath56 ( modulo @xmath242 ) by @xmath147 , i.e. , @xmath317}}(x ) : = \\gamma(x){^{[c/\\widehat{d}]}}$ ] for all variables @xmath122 .",
    "we will show in the following that @xmath317}}$ ] is a unifier of @xmath73 that is smaller than @xmath279 w.r.t .",
    "this will then again contradict our assumption that @xmath279 is is - minimal .",
    "@xmath318}}$ ] .",
    "obviously , @xmath147 subsumes @xmath56 .",
    "we claim that this subsumption relationship is actually strict .",
    "in fact , if @xmath314 , then @xmath319 , and since @xmath56 is an atom , it is not equivalent to @xmath25 .",
    "if @xmath320 , then @xmath321 would imply ( by corollary  [ cor2 ] ) that there is an @xmath322 , with @xmath323 .",
    "however , this would yield @xmath324 , which contradicts the fact that @xmath310 .",
    "thus , we have shown that @xmath325 .",
    "lemma  [ monotone : greater : lem ] implies that @xmath303 .    to complete the proof of lemma  [ atoms : equiv : lem ] , it remains to show the next lemma .",
    "@xmath317}}$ ] is a unifier of @xmath73 .",
    "consider an equation in @xmath73 of the form @xmath326 where @xmath327 and @xmath328 are flat atoms , and define @xmath329 and @xmath330 .",
    "we know that @xmath331 are conjunctions of atoms of the form @xmath332 and @xmath333 , where each conjunct @xmath334 is a reduced ground atom that is either an atom of @xmath279 or equal to @xmath335 for a non - variable atom @xmath336 of @xmath73 .",
    "since @xmath279 is a unifier of @xmath73 , we have @xmath337 .    1 .",
    "[ part : one ] since @xmath56 is an atom , we obviously have @xmath338}}= a_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap a_\\mu{^{[c/\\widehat{d}]}}$ ] and @xmath339}}= b_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap b_\\nu{^{[c/\\widehat{d}]}}$ ] .",
    "now , we show that @xmath338}}= \\gamma{^{[c/\\widehat{d}]}}(l_1\\sqcap\\ldots\\sqcap l_m)$ ] and @xmath339}}= \\gamma{^{[c/\\widehat{d}]}}(r_1\\sqcap\\ldots\\sqcap r_n)$ ] .",
    "we concentrate on proving the first identity since the second one can be shown analogously .",
    "to show the first identity , it is enough to prove that @xmath340}}= \\gamma{^{[c/\\widehat{d}]}}(l_j)$ ] holds for all @xmath168 .",
    "a.   [ case : a ] if @xmath341 is a variable @xmath122 , then @xmath317}}(x ) = \\gamma(x){^{[c/\\widehat{d}]}}$ ] holds by the definition of @xmath317}}$ ] .",
    "b.   [ case : b ] if @xmath341 is a concept constant @xmath44 , then @xmath342}}= a$ ] since @xmath56 is an existential restriction .",
    "thus , we have @xmath317}}(a ) = a = a{^{[c/\\widehat{d}]}}= \\gamma(a){^{[c/\\widehat{d}]}}$ ] . c.   [ case : c",
    "] otherwise , @xmath341 is an existential restriction @xmath343 . by our assumption on @xmath56",
    ", we have @xmath344 , and thus @xmath340}}= \\exists\\ , r_j.\\left(\\gamma(l_j){^{[c/\\widehat{d}]}}\\right)$ ] . in addition",
    ", we have @xmath317}}(l_j ) = \\exists\\ , r_j.\\gamma{^{[c/\\widehat{d}]}}(l_j')$ ] .",
    "thus , it is enough to show @xmath345}}= \\gamma{^{[c/\\widehat{d}]}}(l_j')$ ] . since @xmath341 is a flat atom , we know that @xmath346 is either a concept constant , the top - concept @xmath25 , or a concept variable . in the first to cases , we can show @xmath345}}= \\gamma{^{[c/\\widehat{d}]}}(l_j')$ ] as in ( [ case : b ] ) , and in the third case we can show this identity as in ( [ case : a ] ) .",
    "2 .   because of ( [ part : one ] ) , if we can prove that @xmath338}}\\equiv r{^{[c/\\widehat{d}]}}$ ] , then we have shown that @xmath317}}$ ] solves the equation @xmath326 .",
    "+ without loss of generality , we concentrate on showing that @xmath338}}\\sqsubseteq r{^{[c/\\widehat{d}]}}$ ] . since @xmath338}}= a_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap a_\\mu{^{[c/\\widehat{d}]}}$ ] and @xmath339}}= b_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap b_\\nu{^{[c/\\widehat{d}]}}$ ] , it is thus sufficient to show that , for every @xmath347 , there exists a @xmath348 , such that @xmath349}}\\sqsubseteq b_i{^{[c/\\widehat{d}]}}$ ] ( see ( 3 ) of lemma  [ 1:new : lem ] ) .",
    "since @xmath350 and @xmath351 are atoms , we actually know that , for every @xmath347 , there exists a @xmath348 , such that @xmath352 .",
    "thus , it is sufficient to show that @xmath352 implies @xmath349}}\\sqsubseteq b_i{^{[c/\\widehat{d}]}}$ ] .",
    "this is an easy consequence of the next lemma since @xmath353 satisfy the conditions of this lemma .",
    "[ hilf:2 ] let @xmath354 be reduced ground atoms such that @xmath89 is an atom of @xmath279 or of the form @xmath355 for a non - variable atom @xmath57 of @xmath73 . if @xmath356 , then @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "we show @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] by induction on the size of @xmath44 .    1 .",
    "first , assume that @xmath357 , which implies that @xmath342}}= \\widehat{d } = \\gamma(d_1)\\sqcap\\ldots\\sqcap\\gamma(d_n)$ ] .",
    "a.   if @xmath89 is of the form @xmath358 for a non - variable atom @xmath57 of @xmath73 , then there is an @xmath359 , such that @xmath360 , which shows that @xmath342}}\\sqsubseteq b$ ] . since @xmath361 and the constructors of @xmath0 are monotone w.r.t .",
    "subsumption , we also have @xmath362}}$ ] , and thus @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "b.   assume that @xmath89 is an atom of @xmath279 .",
    "if @xmath363 , then @xmath364}}= \\widehat{d}$ ] , and thus @xmath342}}= b{^{[c/\\widehat{d}]}}$ ] , which implies @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "otherwise , since @xmath365 are reduced atoms , @xmath366 implies @xmath367 .",
    "together with @xmath368 , this shows that @xmath369 .",
    "thus , the maximality of @xmath56 implies that there is a non - variable atom @xmath57 of @xmath73 such that @xmath358 .",
    "thus , we are actually in case ( a ) , which yields @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "2 .   now , assume that @xmath370 .",
    "if there is no occurrence ( modulo @xmath242 ) of @xmath56 in @xmath44 , then we have @xmath342}}= a \\sqsubseteq b \\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "+ otherwise , @xmath44 is of the form @xmath371 and @xmath56 occurs in @xmath336 ( modulo @xmath242 ) .",
    "obviously , @xmath356 then implies that @xmath89 is of the form @xmath372 with @xmath373 .",
    "the concept terms @xmath374 are conjunctions of reduced ground atoms , i.e. , @xmath375 and @xmath376 where @xmath377 are reduced ground atoms . by corollary  [ cor2 ] , for every @xmath378 , there exists @xmath379 such that @xmath380 . + in order to be able to assume , by induction , that @xmath380 implies @xmath381}}\\sqsubseteq f_h{^{[c/\\widehat{d}]}}$ ] , we must show that the conditions in the statement of the lemma hold for the concept terms @xmath382 , where @xmath383 plays the rle of @xmath44 and @xmath384 plays the rle of @xmath89 . since we already know that @xmath377 are reduced ground atoms , it is sufficient to show that each of the atoms @xmath385 is an atom of @xmath279 or of the form @xmath355 for a non - variable atom @xmath57 of @xmath73 .",
    "we know that @xmath386 is an atom of @xmath279 or an instance ( w.r.t .",
    "@xmath279 ) of a non - variable atom of @xmath73 . in the first case , the atoms @xmath385 are clearly also atoms of @xmath279 . in the second case , @xmath387 for a non - variable atom @xmath234 of @xmath73 . if @xmath234 is a ground atom , then @xmath385 are also ground atoms that are atoms of @xmath73 , and thus they are instances ( w.r.t .",
    "@xmath279 ) of non - variable atoms of @xmath73 . otherwise , since @xmath73 is flat , @xmath234 is of the form @xmath388 for a variable @xmath122 and @xmath389 . in this case , @xmath385 are clearly atoms of @xmath279 .",
    "+ thus , we can assume by induction : @xmath390}}\\sqsubseteq f_h{^{[c/\\widehat{d}]}}$}\\ ] ] it remains to show that this implies @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "a.   if @xmath391 , then @xmath342}}= \\exists\\ , s.(e_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap e_\\kappa{^{[c/\\widehat{d}]}})$ ] and @xmath364}}= \\exists\\ , s.(f_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap f_\\lambda{^{[c/\\widehat{d}]}})$ ] , and thus property @xmath392 yields @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "b.   assume that @xmath393 . in this case , @xmath56 can not occur ( modulo @xmath242 ) in any of the concept terms @xmath394 , which implies that @xmath395}}\\sqcap\\ldots\\sqcap f_\\lambda{^{[c/\\widehat{d}]}})$ ] .",
    "since we have @xmath342}}= \\exists\\ , s.(e_1{^{[c/\\widehat{d}]}}\\sqcap\\ldots\\sqcap e_\\kappa{^{[c/\\widehat{d}]}})$ ] , property @xmath392 yields @xmath342}}\\sqsubseteq b$ ] . since we also have @xmath362}}$ ] , this yields @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] .",
    "thus , we have shown in all cases that @xmath342}}\\sqsubseteq b{^{[c/\\widehat{d}]}}$ ] , which completes the proof of lemma  [ hilf:2 ] .",
    "overall , we have thus completed the proof of lemma  [ atoms : equiv : lem ] .",
    "the next proposition is an easy consequence of this lemma .",
    "[ main : prop ] let @xmath73 be a flat @xmath0-unification problem and @xmath279 an is - minimal reduced ground unifier of @xmath73 . if @xmath122 is a concept variable occurring in @xmath73 , then @xmath396 or there are non - variable atoms @xmath170 ( @xmath160 ) of @xmath73 such that @xmath397 .",
    "if @xmath398 , then it is a non - empty conjunction of atoms , i.e. , there are atoms @xmath399 ( @xmath160 ) such that @xmath400",
    ". then @xmath399 are atoms of @xmath279 , and thus lemma  [ atoms : equiv : lem ] yields non - variable atoms @xmath401 of @xmath73 such that @xmath402 for @xmath403 .",
    "consequently , @xmath397 .",
    "this proposition suggests the following non - deterministic algorithm for deciding solvability of a given flat @xmath0-unification problem .",
    "[ algo:1 ] let @xmath73 be a flat @xmath0-unification problem .    1 .",
    "for every variable @xmath122 occurring in @xmath73 , guess a finite , possibly empty , set @xmath404 of non - variable atoms of @xmath73 .",
    "we say that the variable @xmath122 _ directly depends on _ the variable @xmath405 if @xmath405 occurs in an atom of @xmath404 .",
    "let _ depends on _ be the transitive closure of _ directly depends on_. if there is a variable that depends on itself , then the algorithm returns `` fail . ''",
    "otherwise , there exists a strict linear order @xmath406 on the variables occurring in @xmath73 such that @xmath407 if @xmath122 depends on @xmath405 .",
    "we define the substitution @xmath65 along the linear order @xmath406 : 1 .   if @xmath122 is the least variable w.r.t .",
    "@xmath406 , then @xmath404 does not contain any variables .",
    "we define @xmath233 to be the conjunction of the elements of @xmath404 , where the empty conjunction is @xmath25 .",
    "2 .   assume that @xmath408 is defined for all variables @xmath409 .",
    "then @xmath404 only contains variables @xmath405 for which @xmath408 is already defined .",
    "if @xmath404 is empty , then we define @xmath410 .",
    "otherwise , let @xmath411 .",
    "we define @xmath412 .",
    "test whether the substitution @xmath65 computed in the previous step is a unifier of @xmath73 .",
    "if this is the case , then return @xmath65 ; otherwise , return `` fail . ''",
    "this algorithm is trivially _ sound _ since it only returns substitutions that are unifiers of @xmath73 .",
    "in addition , it obviously always terminates .",
    "thus , to show correctness of our algorithm , it is sufficient to show that it is complete .",
    "if @xmath73 is solvable , then there is a way of guessing in step  1 subsets @xmath404 of the non - variable atoms of @xmath73 such that the _ depends on _ relation determined in step  2 is acyclic and the substitution @xmath65 computed in step  3 is a unifier of @xmath73 .",
    "if @xmath73 is solvable , then it has an is - minimal reduced ground unifier @xmath279 . by proposition  [ main : prop ] ,",
    "for every variable @xmath122 occurring in @xmath73 we have @xmath396 or there are non - variable atoms @xmath170 ( @xmath160 ) of @xmath73 such that @xmath397 . if @xmath396 , then we define @xmath413 .",
    "otherwise , we define @xmath414 .",
    "we show that the relation _ depends on _ induced by these sets @xmath404 is acyclic , i.e. , there is no variable @xmath122 such that @xmath122 depends on itself .",
    "if @xmath122 directly depends on @xmath405 , then @xmath405 occurs in an element of @xmath404 .",
    "since @xmath404 consists of non - variable atoms of the flat unification problem @xmath73 , this means that there is a role name @xmath46 such that @xmath415 .",
    "consequently , we have @xmath416 . thus ,",
    "if @xmath122 depends on @xmath122 , then there are @xmath417 role names @xmath418 such that @xmath419 .",
    "this is clearly not possible since @xmath420 can not be subsumed by an @xmath0-concept term whose role depth is larger than the role depth of @xmath420 .    to show that the substitution @xmath65 induced by the sets @xmath404 is a unifier of @xmath73",
    ", we prove that @xmath65 is equivalent to @xmath279 , i.e. , @xmath421 holds for all variables @xmath122 occurring in @xmath73 .",
    "the substitution @xmath65 is defined along the linear order @xmath406 . if @xmath122 is the least variable w.r.t .",
    "@xmath406 , then the elements of @xmath404 do not contain any variables .",
    "if @xmath404 is empty , then @xmath422 .",
    "otherwise , let @xmath411 . since the atoms @xmath311 do not contain variables , we have @xmath423 .",
    "thus , the definitions of @xmath404 and of @xmath65 yield @xmath424 .",
    "assume that @xmath425 holds for all variables @xmath409 .",
    "if @xmath426 , then we have again @xmath422 . otherwise , let @xmath411 .",
    "since the atoms @xmath311 contain only variables that are smaller than @xmath122 , we have @xmath427 by induction .",
    "thus , the definitions of @xmath404 and of @xmath65 yield @xmath428 .    note that our proof of completeness actually shows that , up to equivalence , the algorithm returns all is - minimal reduced ground unifiers of @xmath73 .",
    "[ np : complete : thm ] @xmath0-unification is np - complete .",
    "np - hardness follows from the fact that @xmath0-matching is np - complete @xcite . to show that the problem can be decided by a non - deterministic polynomial - time algorithm",
    ", we analyze the complexity of our algorithm . obviously , guessing the sets @xmath404 ( step  1 ) can be done within np . computing",
    "the _ depends on _ relation and checking it for acyclicity ( step  2 ) is clearly polynomial .",
    "steps  3 and  4 are more problematic .",
    "in fact , since a variable may occur in different atoms of @xmath73 , the substitution @xmath65 computed in step  3 may be of exponential size .",
    "this is actually the same reason that makes a naive algorithm for syntactic unification compute an exponentially large most general unifier @xcite . as in the case of syntactic unification ,",
    "the solution to this problem is basically structure sharing . instead of computing the substitution @xmath65 explicitly",
    ", we view its definition as an acyclic tbox .",
    "to be more precise , for every concept variable @xmath122 occurring in @xmath73 , the tbox @xmath429 contains the concept definition @xmath430 if @xmath426 and @xmath431 if @xmath411 ( @xmath160 ) . instead of computing @xmath65 in step  3",
    ", we compute @xmath429 . because of the acyclicity test in step  2 , we know that @xmath429 is an acyclic tbox .",
    "the size of @xmath429 is obviously polynomial in the size of @xmath73 , and thus this modified step  3 is polynomial .",
    "it is easy to see that applying the substitution @xmath65 to a concept term @xmath56 is the same as expanding @xmath56 w.r.t .",
    "the tbox @xmath429 , i.e. , @xmath432 .",
    "this implies that , for every equation @xmath433 in @xmath73 , we have @xmath434 iff @xmath435 .",
    "thus , testing in step  4 whether @xmath65 is a unifier of @xmath73 can be reduced to testing whether @xmath434 holds for every equation @xmath433 in @xmath73 . since subsumption ( and thus equivalence ) in @xmath0 w.r.t .",
    "acyclic tboxes can be decided in polynomial time @xcite , this completes the proof of the theorem .    in subsection",
    "[ unif : mod : tbox ] , we have shown that there exists a polynomial - time reduction of unification modulo an acyclic tbox to unification without a tbox .",
    "thus , theorem  [ np : complete : thm ] also yields the exact complexity for @xmath0-unification w.r.t .",
    "acyclic tboxes .",
    "@xmath0-unification w.r.t .",
    "acyclic tboxes is np - complete .",
    "the problem is in np since theorem  [ reduction : thm ] states that there is a polynomial - time reduction of @xmath0-unification w.r.t .",
    "acyclic tboxes to @xmath0-unification , and we have just shown that @xmath0-unification is in np .",
    "np - hardness for @xmath0-unification w.r.t .",
    "acyclic tboxes follows from np - hardness of @xmath0-unification since @xmath0-unification can be viewed as the special case of @xmath0-unification w.r.t .",
    "acyclic tboxes where the tbox is empty .",
    "the np - algorithm introduced in the previous section is a typical `` guess and then test '' np - algorithm , and thus it is unlikely that a direct implementation of this algorithm will perform well in practice . here",
    ", we introduce a more goal - oriented unification algorithm for @xmath0 , in which non - deterministic decisions are only made if they are triggered by `` unsolved parts '' of the unification problem .    as in the previous section ,",
    "we assume without loss of generality that our input unification problem @xmath436 is flat . for a given flat equation @xmath433 , the concept terms @xmath6",
    "are thus conjunctions of flat atoms .",
    "we will often view such an equation as consisting of four sets : the left - hand side @xmath56 is given by the set of variables occurring in the top - level conjunction of @xmath56 , together with the set of non - variable atoms occurring in this top - level conjunction ; the right - hand side @xmath57 is given by the set of variables occurring in the top - level conjunction of @xmath57 , together with the set of non - variable atoms occurring in this top - level conjunction . to be more precise ,",
    "let @xmath437 denote the equation @xmath433 , where @xmath438 and @xmath439 for concept variables @xmath440 and non - variable atoms @xmath441 .",
    "then we define @xmath442 obviously , the equation @xmath443 is uniquely determined ( up to associativity , commutativity , and idempotency of conjunction ) by the four sets @xmath444 . instead of viewing an equation @xmath437 as being given by a pair of concept terms , we can thus also view it as being given by these four sets . in the following",
    ", it will often be convenient to employ this representation of equations .",
    "if , with this point of view , we say that we _",
    "add an atom _ to the set @xmath445 or @xmath446 , then this means , for the other point of view , that we conjoin this atom to the top - level conjunction of the left - hand side or right - hand side of the equation .",
    "in addition , if we say that the equation @xmath437 _ contains _ the variable @xmath122 , then we mean that @xmath447 .",
    "similarly , if we say that the left - hand side of @xmath437 contains @xmath122 , then we mean that @xmath448 , and if we say that the right - hand side of @xmath437 contains @xmath122 , then we mean that @xmath449 ) . inside",
    "non - variable atoms @xmath450 are not taken into consideration here . ]",
    "in addition to the unification problem itself , the algorithm also maintains , for every variable @xmath122 occurring in the input problem @xmath436 , a set @xmath404 of non - variable atoms of @xmath436 .",
    "initially , all the sets @xmath404 are empty .",
    "we call the set @xmath404 the current assignment for @xmath122 , and the collection of all these sets the",
    "_ current assignment_. throughout the run of our goal - oriented algorithm , we will ensure that the current assignment is _ acyclic _ in the sense that no variable depends on itself w.r.t .",
    "this assignment ( see ( 2 ) of algorithm  [ algo:1 ] ) .",
    "an acyclic assignment induces a substitution @xmath65 , as defined in ( 3 ) of algorithm  [ algo:1 ] .",
    "we call this substitution the _",
    "current substitution_. initially , the current substitution maps all variables to @xmath25 .",
    "the algorithm applies rules that can    1 .",
    "change an equation of the unification problem by adding non - variable atoms of the input problem @xmath436 to one side of the equation ; 2 .   introduce a new flat equation of the form @xmath451 , where @xmath365 are atoms of the input problem @xmath436 or @xmath25 ; 3 .",
    "add non - variable atoms of the input problem @xmath436 to the sets @xmath404 .",
    "another property that is maintained throughout the run of our algorithm is that all equations @xmath437 are _ expanded _ w.r.t .  the current assignment in the following sense : for all variables",
    "@xmath122 we have @xmath452 given a flat equation @xmath437 that contains the variable @xmath122 , the _ expansion _ of @xmath437 w.r.t .",
    "the assignment @xmath404 for @xmath122 is defined as follows : if @xmath448 then all elements of @xmath404 are added to @xmath445 , and if @xmath449 then all elements of @xmath404 are added to @xmath446 .",
    "the following lemma is an immediate consequence of the definition of expanded equations and of the construction of the current substitution .",
    "[ expanded : lem ] if the equation @xmath433 is expanded w.r.t .  the current assignment , then @xmath453 implies that the current substitution @xmath65 solves this equation , i.e. , @xmath454 .",
    "we say that an equation @xmath437 is _ solved _ if @xmath455 . an atom @xmath456 is called _ solved in @xmath437 _ ; atoms @xmath457 that are not solved in @xmath437 are called _ unsolved in @xmath437_. obviously , an equation @xmath437 is solved iff all atoms @xmath458 are solved in @xmath437 .    basically , in each step , the goal - oriented algorithm considers an unsolved equation and an unsolved atom in this equation , and tries to solve it . picking the unsolved equation and",
    "the unsolved atom in it is do nt care non - deterministic , i.e. , there is no need to backtrack over such a choice .",
    "once an unsolved equation and an unsolved atom in it was picked , do nt know non - determinism comes in since there may be several possibilities for how to solve this atom in the equation , some of which may lead to overall success whereas others wo nt . in some cases , however , a given equation uniquely determines the assignment for a certain variable @xmath122 . in this case",
    ", we make this assignment and then label the variable @xmath122 as _",
    "finished_. this has the effect that the set @xmath404 can no longer be extended .",
    "initially , none of the variables occurring in the input unification problem is labeled as finished .",
    "we say that the variable @xmath122 is _ unfinished _ if it is not labeled as finished .",
    "[ goal : oriented : alg ] let @xmath436 be a flat @xmath0-unification problem . we define @xmath459 and @xmath413 for all variables @xmath122 occurring in @xmath436 .",
    "none of these variables is labeled as finished .",
    "as long as @xmath73 contains an unsolved equation , do the following :    1 .   if the eager - assignment rule applies to some equation @xmath437 , then apply it to this equation ( see figure  [ eager ] ) .",
    "2 .   otherwise , let @xmath437 be an unsolved equation and @xmath44 an unsolved atom in @xmath437 .",
    "if neither of the rules decomposition ( see figure  [ decomp ] ) and extension ( see figure  [ extent ] ) applies to @xmath44 in @xmath437 , then return `` fail . ''",
    "if one of these rules applies to @xmath44 in @xmath437 , then ( do nt know ) non - deterministically choose one of these rules and apply it .",
    "once all equations of @xmath73 are solved , return the substitution @xmath65 that is induced by the current assignment .",
    "the l - variant of the eager - assignment rule applies to the equation @xmath437 if there is an unfinished variable @xmath448 such that    1 .",
    "all variables @xmath460 are finished ; 2 .",
    "@xmath461 .",
    "its application sets @xmath462 .    1 .",
    "if this makes the current assignment cyclic , then return `` fail .",
    "otherwise , label @xmath122 as finished and expand all equations containing @xmath122 w.r.t .  the new assignment for @xmath122 .    the _ eager - assignment rule _",
    "is described in figure  [ eager ] .",
    "note that , after a non - failing application of this rule , the equation it was applied to is solved since the expansion of this equation w.r.t .",
    "the new assignment for @xmath122 adds all elements of @xmath446 to @xmath445 . as an example , consider the equations @xmath463 and assume that @xmath464 and none of the three variables @xmath465 is finished .",
    "an application of the eager - assignment rule to the first equation labels @xmath405 as finished , but does not change anything else .",
    "the subsequent application of the eager - assignment rule to the second equation changes the assignment for @xmath202 to @xmath466 , labels @xmath202 as finished , and expands the second and the third equation w.r.t .  the new assignment for @xmath202 .",
    "thus , we now have the equations @xmath467 since @xmath468 are finished , the eager - assignment rule can now be applied to the third equation .",
    "this changes the assignment for @xmath122 to @xmath469 , labels @xmath122 as finished , and adds @xmath184 to the left - hand side of the third equation .",
    "now all equations are solved .",
    "the current assignment induces a substitution @xmath65 with @xmath470 and @xmath471 , which is a unifier of the original set of equations .",
    "the l - variant of the decomposition rule applies to the unsolved atom @xmath44 in the equation @xmath437 if    1 .",
    "@xmath472 ; 2 .",
    "@xmath44 is of the form @xmath473 ; 3 .",
    "there is at least one atom of the form @xmath474 .",
    "its application chooses ( do nt know ) non - deterministically an atom of the form @xmath474 and    1 .",
    "adds @xmath12 to @xmath446 ; 2 .   creates a new equation @xmath475 and expands it w.r.t .",
    "the assignments of all variables contained in this equation , unless this equation has already been generated before .",
    "if the equation has already been generated before , it is not generated again .",
    "the _ decomposition rule _ is described in figure  [ decomp ] .",
    "this rule solves the unsolved atom @xmath473 by adding it to the other side . for this to be admissible",
    ", one needs a more specific atom @xmath296 on that side , where the `` more specific '' is meant to hold after application of the unifier .",
    "thus , to ensure that the unifier @xmath65 computed by the algorithm satisfies @xmath476 , the rule adds the new equation @xmath475 .",
    "obviously , if the substitution @xmath65 solves this equation , then it satisfies @xmath477 , and thus @xmath476 . as an example , consider the equation @xmath478 and assume that @xmath426 and that @xmath122 is unfinished .",
    "an application of the l - variant of the decomposition rule to this equation adds @xmath479 to the right - hand side of this equation , and thus solves it .",
    "in addition , it generates the new equation @xmath480 , which is solved .",
    "the current assignment induces a substitution @xmath65 with @xmath481 , which solves the original equation .",
    "the _ extension rule _ is described in figure  [ extent ] .",
    "basically , this rule solves the unsolved atom @xmath44 by extending with this atom the assignment of an unfinished variable contained in the other side of the equation . as an example , consider the equation @xmath482 where @xmath44 is a concept constant , @xmath426 , and @xmath122 is unfinished .",
    "an application of the extension rule to @xmath44 in this equation extends the assignment for @xmath122 to @xmath483 , and expands this equation by adding @xmath44 to the right - hand side .",
    "the equation obtained this way is solved .",
    "the substitution @xmath65 induced by the current assignment replaces @xmath122 by @xmath44 , and solves the original equation .",
    "the l - variant of the extension rule applies to the unsolved atom @xmath44 of the equation @xmath437 if    1 .",
    "@xmath472 ; 2 .",
    "there is at least one unfinished variable @xmath484    its application chooses ( do nt know ) non - deterministically an unfinished variable @xmath484 and adds @xmath44 to @xmath404 .    1 .",
    "if this makes the current assignment cyclic , then return `` fail .",
    "otherwise , expand all equations containing @xmath122 w.r.t .  the new + assignment for @xmath122 .",
    "[ goal : oriented : thm ] algorithm  [ goal : oriented : alg ] is an np - algorithm for testing solvability of flat @xmath0-unification problems .",
    "first , we show that the algorithm is indeed an np - algorithm . for this",
    ", we consider all _ runs _ of the algorithm , where for every ( do nt care ) non - deterministic choice exactly one alternative is taken . since a single rule application can obviously be realized in polynomial time , it is sufficient to show the following lemma .",
    "every run of the algorithm terminates after a polynomial number of rule applications .",
    "each application of the eager - assignment rule finishes an unfinished variable .",
    "thus , since finished variables never become unfinished again , it can only be applied @xmath485 times , where @xmath485 is the number of variables occurring in the input unification problem @xmath436 .",
    "this number is clearly linearly bounded by the size of @xmath436 .",
    "every application of the decomposition rule or the extension rule turns an unsolved atom in an equation into a solved one , and a solved atom in an equation never becomes unsolved again in this equation . for a fixed equation , in the worst case",
    "every atom of @xmath436 may become an unsolved atom of the equation that needs to be solved .",
    "there is , however , only a linear number of atoms of @xmath436 .",
    "each equation considered during the run of the algorithm is either descended from an original equation of @xmath436 , or from an equation of the form @xmath475 for atoms @xmath296 and @xmath12 of @xmath436 .",
    "thus , the number of equations is also polynomially bounded by the size of @xmath436 .",
    "overall , this shows that the decomposition rule and the extension rule can only be applied a polynomial number of times .",
    "next , we show soundness of algorithm  [ goal : oriented : alg ] .",
    "we call a run of this algorithm _ non - failing _ if it terminates with a unification problem containing only solved equations .",
    "let @xmath436 be a flat @xmath0-unification problem .",
    "the substitution @xmath65 returned after a successful run of algorithm  [ goal : oriented : alg ] on input @xmath436 is an @xmath0-unifier of @xmath436 .",
    "first , note that the rules employed by algorithm  [ goal : oriented : alg ] indeed preserve the two invariants mentioned before :    1 .",
    "the current assignment is always acyclic ; 2 .",
    "all equations are expanded .",
    "in fact , whenever the current assignment is extended , the rules test acyclicity ( and return `` fail , '' if it is not satisfied ) .",
    "in addition , they expand all equations w.r.t .  the new assignment .",
    "now , assume that the run of the algorithm has terminated with the @xmath0-unification problem @xmath486 , in which all equations are solved .",
    "the first invariant ensures that the final assignment constructed by the run is acyclic , and thus indeed induces a substitution @xmath65 . because of the second invariant , lemma  [ expanded : lem ] applies , and thus we know that @xmath65 is a solution of @xmath486 .",
    "it remains to show that the substitution @xmath65 is also a solution of the input problem @xmath436 . to this purpose , we take all the equations that were considered during the run of the algorithm , i.e. , present in @xmath436 or in any of the other unification problems generated during the run .",
    "let @xmath487 denote the set of these equations .",
    "we define the relation @xmath488 on @xmath487 as follows : @xmath489 if @xmath437 was transformed into @xmath490 using one of the rules of algorithm  [ goal : oriented : alg ] .",
    "to be more precise , the eager - assignment rule transforms equations containing @xmath122 from the current unification problem @xmath73 by expanding them w.r.t .  the new assignment for @xmath122 .",
    "the same is true for the extension rule .",
    "the decomposition rule transforms an equation @xmath437 containing the unsolved atom @xmath473 by adding this atom to the other side , which needs to contain an atom of the form @xmath296 . for this new equation @xmath490",
    ", we have @xmath489 .",
    "the decomposition rule may also generate a new equation @xmath491 of the form @xmath475 ( if this equation was not generated before ) .",
    "however , we do not view this equation as a successor of @xmath437 w.r.t .",
    "@xmath488 , i.e. , we do _ not _ have @xmath492 .",
    "equations @xmath475 that are generated by an application of the decomposition rule are called _ d - equations_. equations that are elements of the input problem @xmath436 are called _ i - equations_. any equation @xmath490 that is not an i - equation or a d - equation has a unique predecessor w.r.t .",
    "@xmath488 , i.e. , there is an equation @xmath493 such that @xmath489 .    starting with the set @xmath494 we will now step by step extend @xmath495 by a predecessor of an equation in @xmath495 until no new predecessors can be added .",
    "since @xmath487 is finite , this process terminates after a finite number of steps .",
    "after termination we have @xmath496 , and thus in particular @xmath497 .",
    "this is due to the fact that , for every element @xmath498 of @xmath487 , there are @xmath499 elements @xmath500 such that @xmath501 and @xmath502 .",
    "thus , it is enough to show that the set @xmath495 satisfies the following _ invariant _ : @xmath503    since @xmath65 is a solution of @xmath486 , this invariant is initially satisfied . to prove that it is preserved under adding predecessors of equations in @xmath495 , we start with the equations of minimal role depth .",
    "to be more precise , if the equation @xmath437 is of the form @xmath433 , we define the _ role depth of @xmath437 w.r.t .",
    "@xmath65 _ to be the role depth for a definition . ] of the concept term @xmath504 .",
    "the strict order @xmath271 on @xmath487 is defined as follows : @xmath505 iff the role depth of @xmath437 w.r.t .",
    "@xmath65 is larger than the role depth of @xmath490 w.r.t .",
    "we write @xmath506 if @xmath437 and @xmath490 have the same role depth w.r.t .",
    "the following is an easy consequence of the definition of @xmath65 and of our rules : @xmath507 assume that we have already constructed a set @xmath495 such that the invariant @xmath392 is satisfied .",
    "let @xmath490 be an equation in @xmath495 such that    1 .",
    "there is an @xmath508 with @xmath489 ; 2 .",
    "@xmath490 is of minimal role depth with this property , i.e. , if @xmath509 is such that @xmath510 and @xmath511 has a predecessor @xmath512 w.r.t .",
    "@xmath488 , then @xmath513 .",
    "if no such equation @xmath490 exists , then we are finished , and we have @xmath496 . otherwise , let @xmath490 be such an equation and @xmath437 its predecessor w.r.t .   @xmath488 .",
    "we add @xmath437 to @xmath495 . in order to show that the invariant @xmath392 is still satisfied",
    ", we make a case distinction according to which rule was applied to @xmath437 to produce @xmath490 :    1 .   _",
    "eager - assignment .",
    "_ by an application of this rule , the assignment for @xmath122 is modified from @xmath426 to @xmath514 , where @xmath515 are non - variable atoms .",
    "in addition , @xmath122 is labeled as finished . since the assignment of a finished variable can not be changed anymore , we know that we also have @xmath514 in the final assignment , and thus @xmath516 .",
    "the rule modifies equations as follows : all equations containing @xmath122 are expanded w.r.t .  the assignment @xmath514 . since @xmath437 is transformed into @xmath490 using this rule , it must contain @xmath122 .",
    "we assume for the sake of simplicity that @xmath122 is contained in the left - hand side of @xmath437 , but not in the right - hand side , i.e. , @xmath437 is of the form @xmath517 and the new equation @xmath518 obtained from @xmath437 is @xmath519 . since @xmath65 solves @xmath490 , we have @xmath520 , which shows that @xmath65 also solves @xmath437 .",
    "_ without loss of generality , we consider the l - variant of this rule .",
    "thus , the equation @xmath437 is of the form @xmath521 , and @xmath490 is obtained from @xmath437 by adding @xmath12 to the right - hand side , i.e. , @xmath490 is of the form @xmath522 . we know that @xmath65 solves @xmath490",
    "thus , if we can show @xmath477 , then we have @xmath523 , which shows that @xmath65 solves @xmath437 .",
    "+ consequently , it is sufficient to prove @xmath477 .",
    "the decomposition rule also generates the equation @xmath475 and expands it w.r.t .",
    "the assignments of all the variables contained in this equation , unless this equation has already been generated before . thus , either this application or a previous one of the decomposition rule has generated the equation @xmath475 , and then expanded it ( w.r.t .  the current assignment at that time ) to an equation @xmath524 . since atoms are never removed from an assignment , the atoms present in the assignment at the time when the decomposition rule generated the equation @xmath475 are also present in the final assignment used to define the substitution @xmath65 .",
    "thus , if we can show that @xmath65 solves @xmath524 , then we have also shown that @xmath65 solves @xmath475 , and thus satisfies @xmath477 .",
    "+ since equations are never completely removed by our rules , but only modified , there is a sequence of equations @xmath525 such that @xmath502 .",
    "property @xmath526 thus yields @xmath527 .",
    "in addition , the role depth of @xmath475 w.r.t .",
    "@xmath65 is the same as the role depth of @xmath524 w.r.t .",
    "consequently , we have @xmath528 for all @xmath167 .",
    "now , assume that @xmath529 .",
    "then there is an @xmath530 such that @xmath531 , but @xmath532 .",
    "this contradicts our assumption that @xmath490 is minimal .",
    "thus , we have shown that @xmath533 , and this implies that @xmath65 solves @xmath524 .",
    "+ overall , this finishes the proof that @xmath65 solves @xmath437 .",
    "_ by an application of this rule , the assignment for @xmath122 is modified by adding a non - variable atom @xmath44 to it . since atoms are never removed from an assignment , we know that we also have @xmath534 in the final assignment , and thus @xmath535 .",
    "the rule modifies equations as follows : all equations containing @xmath122 are expanded w.r.t .  the new assignment for @xmath122 . since @xmath437 is transformed into @xmath490 using this rule , it must contain @xmath122 .",
    "we assume for the sake of simplicity that @xmath122 is contained in the left - hand side of @xmath437 , but not in the right - hand side , i.e. , @xmath437 is of the form @xmath517 and the new equation @xmath490 obtained from @xmath437 is @xmath536 .",
    "since @xmath65 solves @xmath490 , we have @xmath537 , which shows that @xmath65 also solves @xmath437 .    to sum up",
    ", we have shown that the invariant @xmath392 is still satisfied after adding @xmath437 to @xmath495 .",
    "this completes the proof of soundness of our procedure .",
    "it remains to show completeness of algorithm  [ goal : oriented : alg ] .",
    "thus , assume that the input unification problem @xmath436 is solvable .",
    "proposition  [ minimal : unif : prop ] tells us that @xmath436 then has an is - minimal reduced ground unifier @xmath279 , and proposition  [ main : prop ] implies that , for every variable @xmath122 occurring in @xmath436 , there is a set @xmath538 of non - variable atoms of @xmath436 such that @xmath539 where , for a set of non - variable atoms @xmath540 of @xmath436 , the expression @xmath541 denotes the conjunction of the elements of @xmath540 ( where the empty conjunction is @xmath25 ) .",
    "let @xmath436 be a flat @xmath0-unification problem , and assume that @xmath279 is an is - minimal reduced ground unifier of @xmath436 .",
    "then there is a successful run of algorithm  [ goal : oriented : alg ] on input @xmath436 that returns a unifier @xmath65 that is equivalent to @xmath279 , i.e. , satisfies @xmath421 for all variables @xmath122 occurring in @xmath436 .",
    "the algorithm starts with @xmath459 and the initial assignment @xmath542 for all variables @xmath122 occurring in @xmath436 .",
    "it then applies rules that change @xmath73 and the current assignment as long as the problem @xmath73 contains an unsolved equation .",
    "we use @xmath279 to guide the ( do nt know ) non - deterministic choices to be made during the algorithm .",
    "we show that this ensures that the run of the algorithm generated this way _ does not fail _ and that the following _ invariants _ are satisfied throughout this run :    1 .",
    "@xmath279 is a unifier of @xmath73 ; 2 .   for all atoms",
    "@xmath543 there exists an atom @xmath544 such that @xmath545 ; 3 .   for all finished variables",
    "@xmath122 we have @xmath546 .    before constructing a run that satisfies these invariants ,",
    "let us point out two interesting consequences that they have :    1 .",
    "_ the current assignment is always acyclic .",
    "_ in fact , if @xmath122 directly depends on @xmath405 , then there is an atom @xmath547 that has the form @xmath548 for some role name @xmath46 .",
    "invariant @xmath549 then implies that there is an @xmath544 such that @xmath550 .",
    "thus , if @xmath122 depends on @xmath122 , then there are @xmath417 role names @xmath418 such that @xmath419 , which is impossible .",
    "_ for each variable @xmath122 occurring in @xmath436 , we have @xmath551 , where @xmath65 is the current substitution induced by the current assignment .",
    "_ this is again a consequence of invariant @xmath549 .",
    "indeed , recall that the fact that the current assignment is acyclic implies that there is a strict linear order @xmath406 on the variables occurring in @xmath73 such that @xmath407 if @xmath122 depends on @xmath405 .",
    "the current substitution @xmath65 is defined along this order .",
    "we prove @xmath551 by induction on this order .",
    "+ consider the least variable @xmath122 .",
    "if @xmath426 , then @xmath481 , and thus @xmath551 is trivially satisfied .",
    "otherwise , we know , for every @xmath547 , that it does not contain any variables , which implies that @xmath552 for some atom @xmath553 .",
    "obviously , this yields @xmath554 .",
    "+ now , assume that @xmath555 holds for all variables @xmath409 . since the concept constructors of @xmath0 are monotone w.r.t .",
    "subsumption , this implies @xmath556 for all concept terms @xmath56 containing only variables smaller than @xmath122 . if @xmath404 is empty , then @xmath557 is trivially satisfied . otherwise , we know , for every @xmath547 , that it contains only variables smaller than @xmath122 .",
    "this yields @xmath558 for some atom @xmath553 .",
    "again , this implies @xmath554 .",
    "since @xmath279 was assumed to be an is - minimal unifier of @xmath436 , the consequence @xmath559 implies that @xmath65 can only be a unifier of @xmath436 if @xmath65 is equivalent to @xmath279 .",
    "if the run has terminated successfully , then the final substitution @xmath65 obtained by the run is a unifier of @xmath436 ( due to soundness ) .",
    "thus , in this case the computed unifier @xmath65 is indeed equivalent to @xmath279 .",
    "consequently , to prove the lemma , it is sufficient to _ construct a non - failing run of the algorithm that satisfies the above invariants . _",
    "the invariants are initially satisfied since @xmath279 is a unifier of @xmath436 , the initial assignment for all variables @xmath122 occurring in @xmath436 is @xmath426 , and there are no finished variables .",
    "now , assume that , by application of the rules of algorithm  [ goal : oriented : alg ] , we have constructed a unification problem @xmath73 and a current assignment such that the invariants are satisfied .    1 .   if all equations in @xmath73 are solved , then the run terminates successfully , and we are done .",
    "2 .   if there is an unsolved equation to which the _ eager - assignment rule",
    "_ applies , then the algorithm picks such an equation @xmath437 and applies this rule to it . without loss of generality , we assume that the l - variant of the rule is applied .",
    "the selected equation @xmath437 is of the form @xmath560 where @xmath561 are non - variable atoms , and @xmath562 are finished variables .",
    "because the left - hand side of the equation does not contain any non - variable atoms , we know that @xmath563 ( since the algorithm keeps all equations expanded ) . since @xmath564 are finished , we thus have @xmath565 ( by invariant @xmath566 ) .",
    "we also know that @xmath567 for all @xmath568 .",
    "since the variables @xmath569 are finished , invariant @xmath566 implies that @xmath570 .",
    "+ the new assignment for @xmath122 is @xmath571 , all equations containing @xmath122 are expanded w.r.t .",
    "this assignment , and @xmath122 becomes a finished variable .",
    "first , we show that @xmath566 is satisfied .",
    "nothing has changed for the variables that were already finished before the application of the rule .",
    "however , @xmath122 is now also finished .",
    "thus , we must show that @xmath546 .",
    "we know that @xmath279 solves the equation @xmath437 ( by @xmath572 ) .",
    "this yields @xmath573 .",
    "regarding @xmath549 , the only assignment that was changed is the one for @xmath122 .",
    "since the new assignment for @xmath122 is @xmath571 , and we have already shown that @xmath574 , the invariant @xmath549 holds by corollary  [ cor2 ] . note that this also implies that the new assignment is acyclic , and thus the application of the eager - assignment rule does not fail . finally , consider the invariant @xmath572 .",
    "the rule application modifies equations containing @xmath122 by adding the atoms @xmath515 . since @xmath574 , an equation that was solved by @xmath279 before this modification ,",
    "is also solved by @xmath279 after this modification . to sum up",
    ", we have shown that the application of the eager - assignment rule does not fail and preserves the invariants .",
    "if there is _ no _ unsolved equation to which the _ eager - assignment rule _ applies , then the algorithm picks an unsolved equation @xmath437 and an unsolved atom @xmath44 occurring in this equation .",
    "we must show that we can apply either the decomposition or the extension rule to @xmath44 in @xmath437 such that the invariants stay satisfied . without loss of generality , we assume that the unsolved atom @xmath44 occurs on the left - hand side of the equation @xmath437 .",
    "a.   first , assume that _",
    "@xmath44 is an existential restriction @xmath473_. the selected unsolved equation @xmath437 is thus of the form @xmath575 where @xmath576 and @xmath577 are ( variable or non - variable ) atoms and @xmath578 .",
    "since @xmath279 solves this equation ( by invariant @xmath572 ) , corollary  [ cor2 ] implies that there must be an @xmath167 , such that @xmath579 .",
    "a.   if @xmath580 is an existential restriction @xmath581 , then we have @xmath582 .",
    "we apply the decomposition rule to @xmath44 and @xmath580 .",
    "the application of this rule modifies the equation @xmath437 to an equation @xmath490 by adding the atom @xmath44 to the right - hand side .",
    "in addition , it generates the equation @xmath475 and expands it w.r.t .",
    "the assignments of all variables contained in this equation ( unless this equation has been generated before ) . after the application of this rule , the invariants @xmath549 and @xmath566 are still satisfied since the current assignments and the set of finished variables remain unchanged .",
    "regarding invariant @xmath572 , since @xmath279 solves @xmath437 , it obviously also solves @xmath490 due to the fact that @xmath583 and @xmath580 is a conjunct on the right - hand side of @xmath437 .",
    "in addition , @xmath582 implies that @xmath279 also solves the equation @xmath475 .",
    "since invariant @xmath549 is satisfied , this implies that @xmath279 also solves the equation obtained from @xmath475 by expanding it w.r.t .",
    "the assignments of all variables contained in it .",
    "b.   assume that there is no @xmath167 , such that @xmath580 is an existential restriction satisfying @xmath583 .",
    "thus , if @xmath580 is such that @xmath583 , then we know that @xmath584 is a variable .",
    "we want to apply the extension rule to @xmath44 and @xmath122 . to be able to do this , we must first show that @xmath122 is not a finished variable . + thus , assume that @xmath122 is finished , and let @xmath585 .",
    "invariant @xmath566 yields @xmath586 , and thus there is a @xmath587 , such that @xmath588 .",
    "since @xmath44 is an existential restriction , the non - variable atom @xmath589 must also be an existential restriction , and since the equation @xmath437 is expanded , @xmath590 occurs on the right - hand side of this equation .",
    "this contradicts our assumption that there is no such existential restriction on the right - hand side .",
    "thus , we have shown that @xmath122 is not finished , which means that we can apply the extension rule to @xmath44 and @xmath122 .",
    "+ the application of this rule adds the atom @xmath44 to the assignment for @xmath122 , and it expands all equations containing @xmath122 w.r.t .  this new assignment , i.e. , it adds @xmath44 to the left - hand side and/or right - hand side of an equation whenever @xmath122 is contained in this side . since we know that @xmath591 , it is easy to see that , if @xmath279 solves an equation before this expansion , it also solves it after the expansion .",
    "thus invariant @xmath572 is satisfied .",
    "invariant @xmath549 also remains satisfied .",
    "in fact , if @xmath592 , then @xmath593 implies that there is a @xmath587 , such that @xmath594 .",
    "the fact that @xmath549 is satisfied by the new assignment also implies that this new assignment is acyclic , and thus the application of the extension rule does not fail .",
    "invariant @xmath566 is still satisfied since @xmath122 is not finished , and the assignments of variables different from @xmath122 were not changed .",
    "b.   second , assume that _",
    "@xmath44 is a concept name_. the selected unsolved equation @xmath437 is thus of the form @xmath595 where @xmath576 and @xmath577 are ( variable or non - variable ) atoms , and @xmath596 .",
    "since @xmath279 solves this equation ( by invariant @xmath572 ) , corollary  [ cor2 ] implies that there must be an @xmath167 , such that @xmath597 . since @xmath596 , we know that @xmath584 is a variable .",
    "we want to apply the extension rule to @xmath44 and @xmath122 . to be able to do this , we must first show that @xmath122 is not a finished variable .",
    "+ thus , assume that @xmath122 is finished , and let @xmath585 .",
    "invariant @xmath566 yields @xmath598 , and thus there is a @xmath587 , such that @xmath599 .",
    "since @xmath44 is a concept name , the non - variable atom @xmath589 must actually be equal to @xmath44 , and since the equation @xmath437 is expanded , @xmath600 occurs on the right - hand side of this equation .",
    "this contradicts our assumption that @xmath44 is an unsolved atom .",
    "thus , we have shown that @xmath122 is not finished , which means that we can apply the extension rule to @xmath44 and @xmath122 .",
    "the application of this rule adds the atom @xmath44 to the assignment for @xmath122 , and it expands all equations containing @xmath122 w.r.t .",
    "this new assignment .",
    "the proof that this rule application does not fail and preserves the invariants is identical to the one for the case where @xmath44 was an existential restriction .    to sum up",
    ", we have shown that algorithm  [ goal : oriented : alg ] always terminates ( in non - deterministic polynomial time ) and that it is sound and complete .",
    "this finishes the proof of theorem  [ goal : oriented : thm ] .",
    "unification problems and their types were originally not introduced for description logics , but for equational theories @xcite . in this section ,",
    "we show that the above results for unification in @xmath0 can actually be viewed as results for an equational theory .",
    "as shown in @xcite , the equivalence problem for @xmath0-concept terms corresponds to the word problem for the equational theory of semilattices with monotone operators . in order to define this theory",
    ", we consider a signature @xmath601 consisting of a binary function symbol @xmath602 , a constant symbol @xmath86 , and finitely many unary function symbols @xmath603 .",
    "terms can then be built using these symbols and additional variable symbols and free constant symbols .",
    "the equational theory of _ semilattices with monotone operators _ is defined by the following identities : @xmath604 & \\{f_i(x\\wedge y)\\wedge f_i(y ) = f_i(x\\wedge y ) \\mid   1\\leq i\\leq n\\ } \\end{array}\\ ] ]    a given @xmath0-concept term @xmath56 using only roles @xmath605 can be translated into a term @xmath606 over the signature @xmath601 by replacing each concept constant @xmath44 by a corresponding free constant @xmath607 , each concept variable @xmath122 by a corresponding variable @xmath608 , @xmath25 by @xmath86 , @xmath11 by @xmath602 , and @xmath609 by @xmath610 .",
    "for example , the @xmath0-concept term @xmath611 is translated into @xmath612 .",
    "conversely , any term over the signature @xmath601 can be translated back into an @xmath0-concept term .",
    "let @xmath6 be @xmath0-concept term using only roles @xmath605",
    ". then @xmath7 iff @xmath613 .",
    "as an immediate consequence of this lemma , we have that unification in the dl @xmath0 corresponds to unification modulo the equational theory @xmath614 .",
    "thus , theorem  [ type : zero : thm ] implies that @xmath614 has unification type zero , and theorem  [ np : complete : thm ] implies that @xmath614-unification is np - complete .",
    "the equational theory @xmath614 of semilattices with monotone operators has unification type zero , and deciding solvability of an @xmath614-unification problem is an np - complete problem .",
    "since the unification problem introduced in theorem  [ type : zero : thm ] contains only one role @xmath46 , this is already true in the presence of a single monotone operator .",
    "in this paper , we have shown that unification in the dl @xmath0 is of type zero and np - complete .",
    "there are interesting differences between the behavior of @xmath0 and the closely related dl @xmath28 w.r.t .",
    "unification and matching .",
    "though the unification types coincide for these two dls , the complexities of the decision problems differ : @xmath28-unification is exptime - complete , and thus considerably harder than @xmath0-unification .",
    "in contrast , @xmath28-matching is polynomial , and thus considerably easier than @xmath0-matching , which is np - complete .",
    "in addition to showing the complexity upper bound for @xmath0-unification by a simple `` guess and then test '' np - algorithm , we have also developed a more goal - oriented np - algorithm that makes ( do nt know ) non - deterministic decisions ( i.e. , ones that require backtracking ) only if they are triggered by unsolved atoms in the unification problem .    as future work , we will consider also unification of concept terms for other members of the @xmath0-family of dls @xcite .",
    "in addition , we will investigate unification modulo more expressive terminological formalisms . on the practical side ,",
    "we will optimize and implement the goal - oriented @xmath0-unification algorithm developed in section  [ goal : oriented : sect ] .",
    "we intend to test the usefulness of this algorithm for the purpose on finding redundancies in @xmath0-based ontologies by considering extensions of the medical ontology snomed  ct .",
    "for example , in @xcite , two different extensions of snomed  ct by so - called post - coordinated concepts were considered .",
    "the authors used an ( incomplete ) equivalence test to find out how large the overlap between the two extensions is ( i.e. , how many of the new concepts belonged to both extensions ) .",
    "as pointed out in the introduction , the equivalence test can not deal with situations where different knowledge engineers use different names for concepts , or model on different levels of granularity .",
    "we want to find out whether using unifiability rather than equivalence finds more cases of overlapping concepts . of course ,",
    "in the case of unification one may also obtain false positives , i.e. , pairs of concepts that are unifiable , but are not meant to represent the same ( intuitive ) concept .",
    "it is also important to find out how often this happens .",
    "another problem to be dealt with in this application is the development of heuristics for choosing the pairs of concepts to be tested for unifiability and for deciding which concept names are turned into variables .",
    "franz baader .",
    "characterizations of unification type zero . in n.",
    "dershowitz , editor , _ proceedings of the 3rd international conference on rewriting techniques and applications _ , volume 355 of _ lecture notes in computer science _ , pages 214 , chapel hill , north carolina , 1989 .",
    "springer - verlag .",
    "franz baader .",
    "terminological cycles in a description logic with existential restrictions . in georg gottlob and toby",
    "walsh , editors , _ proc .  of the 18th int .",
    "joint conf .  on artificial intelligence ( ijcai  2003 ) _ , pages 325330 , acapulco , mexico , 2003 .",
    "morgan kaufmann , los altos .",
    "franz baader , sebastian brandt , and carsten lutz . pushing the @xmath0 envelope . in leslie  pack kaelbling and alessandro saffiotti , editors , _ proc .  of the 19th int .",
    "joint conf .  on artificial intelligence ( ijcai  2005 ) _ ,",
    "pages 364369 , edinburgh ( uk ) , 2005 .",
    "morgan kaufmann , los altos .",
    "franz baader and ralf ksters .",
    "matching in description logics with existential restrictions . in _ proc .",
    "of the 7th int .",
    "conf .  on principles of knowledge representation and reasoning ( kr  2000 )",
    "_ , pages 261272 , 2000 .",
    "franz baader and ralf ksters .",
    "unification in a description logic with transitive closure of roles . in robert nieuwenhuis and andrei",
    "voronkov , editors , _ proc .  of the 8th int .",
    "conf .  on logic for programming and automated reasoning ( lpar  2001 )",
    "_ , volume 2250 of _ lecture notes in artificial intelligence _ , pages 217232 , havana , cuba , 2001 .",
    "springer - verlag .",
    "franz baader , ralf ksters , and ralf molitor .",
    "computing least common subsumers in description logics with existential restrictions . in _ proc .",
    "of the 16th int .",
    "joint conf .  on artificial intelligence",
    "( ijcai99 ) _ , pages 96101 , 1999 .",
    "franz baader and barbara morawska .",
    "unification in the description logic @xmath0 . in ralf",
    "treinen , editor , _ proc .  of the 20th int .",
    "on rewriting techniques and applications ( rta 2009 ) _ , volume 5595 of _ lecture notes in computer science _ , pages 350364 .",
    "springer - verlag , 2009 .",
    "sebastian brandt .",
    "polynomial time reasoning in a description logic with existential restrictions , gci axioms , and ",
    "what else ? in ramon  lpez de  mntaras and lorenza saitta , editors , _ proc .  of the 16th eur .",
    "conf .  on artificial intelligence ( ecai  2004 ) _ , pages 298302 , 2004 .",
    "james  r. campbell , alejandro lopez  osornio , fernan de  quiros , daniel luna , and guillermo reynoso .",
    "semantic interoperability and snomed  ct : a case study in clinical problem lists . in k.a .",
    "kuhn , j.r .",
    "warren , and t .- y .",
    "leong , editors , _ proc .  of the 12th world congress on health ( medical ) informatics ( medinfo 2007 ) _ , pages 24012402 .",
    "ios press , 2007 .",
    "jean - pierre jouannaud and claude kirchner . solving equations in abstract algebras : a rule - based survey of unification . in j .-",
    "lassez and g.  plotkin , editors , _ computational logic : essays in honor of a. robinson_. mit press , cambridge , ma , 1991 .",
    "yevgeny kazakov and hans de  nivelle .",
    "subsumption of concepts in @xmath28 for ( cyclic ) terminologies with respect to descriptive semantics is pspace - complete . in _ proc .  of the 2003 description logic workshop ( dl  2003)_. ceur electronic workshop proceedings , http://ceur-ws.org/vol-81/ , 2003 .",
    "hector  j. levesque and ron  j. brachman . a fundamental tradeoff in knowledge representation and reasoning . in ron",
    "j. brachman and hector  j. levesque , editors , _ readings in knowledge representation _ , pages 4170 .",
    "morgan kaufmann , los altos , 1985 .",
    "alan rector and ian horrocks .",
    "experience building a large , re - usable medical ontology using a description logic with transitivity and concept inclusions . in _ proceedings of the workshop on ontological engineering , aaai spring symposium ( aaai97 ) _ , stanford , ca , 1997 .",
    "aaai press ."
  ],
  "abstract_text": [
    "<S> the description logic @xmath0 has recently drawn considerable attention since , on the one hand , important inference problems such as the subsumption problem are polynomial . on the other hand , @xmath0 is used to define large biomedical ontologies . </S>",
    "<S> unification in description logics has been proposed as a novel inference service that can , for example , be used to detect redundancies in ontologies . </S>",
    "<S> the main result of this paper is that unification in @xmath0 is decidable . </S>",
    "<S> more precisely , @xmath0-unification is np - complete , and thus has the same complexity as @xmath0-matching . </S>",
    "<S> we also show that , w.r.t . </S>",
    "<S> the unification type , @xmath0 is less well - behaved : it is of type zero , which in particular implies that there are unification problems that have no finite complete set of unifiers . </S>"
  ]
}