{
  "article_text": [
    "the euler dilogarithm @xmath4 , and its generalizations , nielsen s polylogarithms  @xcite , have been playing a central role in the analytic evaluation of integrals arising in perturbative quantum field theory . a reliable and widely used numerical representation of these functions ( gplog )  @xcite has been available for already thirty years .",
    "going to higher orders in perturbation theory , it was realized recently that nielsen s polylogarithms are insufficient to evaluate all integrals appearing in feynman graphs at two loops and beyond .",
    "this limitation can only be overcome by the introduction of further generalizations of nielsen s polylogarithms , the harmonic polylogarithms ( hpls ) .",
    "the hpls , introduced in @xcite , together with their ",
    "2-dimensional \" extensions  @xcite , are already now playing a central role in the analytic evaluation of feynman graph integrals  @xcite .",
    "hpls appear also as inverse mellin transformations of harmonic sums , which were investigated and implemented numerically in  @xcite .",
    "let us recall here two key features of an analytical calculation .",
    "the first is to express everything in terms of mathematical quantities whose properties are known ( so that in particular the final formulae can be written in a unique way , which does not hide cancellations between the various terms involved ) .",
    "the second is to allow the fast and precise numerical evaluation of all the mathematical quantities introduced .",
    "obviously , such fast and precise evaluation relies on the knowledge of the analytical properties .",
    "in this paper , somewhat as a continuation of @xcite dealing with the numerical evaluation of nielsen s polylogarithms  @xcite ( a subset of the hpls ) , we shortly review the analytical properties of the hpls and then show how they can be used for writing a fortran code which evaluates the hpls up to weight 4 ( see section  [ sec : def ] below for the definition of the weight ; 4 is the maximuum weight required in the calculations of @xcite ) with absolute precision better than @xmath5 (  standard double precision ) with a few dozens of elementary arithmetic operations per function ( just a single dozen in the most favourable case ) .",
    "given the large number ( 81 ) of hpls of weight 4 and the many algebraic relations among them , our fortran routine evaluates the whole set of all the hpls up to the required weight  at variance with gplog  @xcite , which evaluates separately the various nielsen s polylogarithms .",
    "the plan of the paper is as follows .",
    "section  [ sec : def ] recalls the definitions of the hpls .",
    "their algebraic properties are discussed in section  [ sec : alg ] , where we show how to use these properties for separating the functions into reducible and irreducible ones . section  [ sec : anal ] studies the analytic properties which allow to perform converging power series expansions and to accelerate their convergence",
    ". relations between hpls for different ranges of the arguments are derived in section  [ sec : ids ] .",
    "section  [ sec : numer ] explains how the properties recalled above are used to implement the hpls into a fortran subroutine hplog , and section  [ sec : checks ] how the correct implementation is checked .",
    "finally , we describe the usage of the subroutine hplog in section  [ sec : code ] and provide a few numerical examples in section  [ sec : plots ] .",
    "the harmonic polylogarithms ( hpls ) , introduced in @xcite , are one - variable functions @xmath6 depending , besides the argument @xmath7 , on a set of indices , grouped for convenience into the vector @xmath8 , whose components can take one of the three values @xmath9 and whose number is the weight @xmath10 of the .",
    "more explicitly , the three hpls with @xmath11 are defined as @xmath12 their derivatives can be written as @xmath13 where the 3 rational fractions @xmath14 are given by @xmath15 for weight @xmath10 larger than 1 , write @xmath16 , where @xmath17 is the leftmost component of @xmath18 and @xmath19 stands for the vector of the remaining @xmath20 components .",
    "the harmonic polylogarithms of weight @xmath10 are then defined as follows : if all the @xmath10 components of @xmath21 take the value 0 , @xmath21 is said to take the value @xmath22 and @xmath23 while , if @xmath24 @xmath25 in any case the derivatives can be written in the compact form @xmath26 where , again , @xmath17 is the leftmost component of @xmath27 and @xmath28 stands for the remaining @xmath20 components .",
    "it is immediate to see , from the very definition eq .",
    "( [ eq : defn0 ] ) , that there are @xmath29 hpls of weight @xmath10 , and that they are linearly independent .",
    "the hpls are generalizations of nielsen s polylogarithms  @xcite .",
    "the function @xmath30 , in nielsen s notation , is equal to the whose first @xmath31 indices are all equal to 0 and the remaining @xmath32 indices all equal to 1 : @xmath33 in particular the euler polylogarithms @xmath34 correspond to @xmath35    all relations between hpls which will be used for their numerical evaluation are easily derived by using recursively the definition ( [ eq : defn0 ] ) and the related differentiation formula ( [ eq : derive ] ) .",
    "as shown in @xcite , the product of two hpls of a same argument @xmath7 and weights @xmath36 can be expressed as a combination of hpls of that argument and weight @xmath37 , according to the product identity @xmath38 where @xmath39 stand for the @xmath32 and @xmath40 components of the indices of the two hpls , while @xmath41 represents all mergers of @xmath42 and @xmath43 into the vector @xmath44 with @xmath45 components , in which the relative orders of the elements of @xmath42 and @xmath43 are preserved .",
    "the explicit formulae relevant up to weight 4 are @xmath46 @xmath47 and @xmath48 where @xmath49 are indices taking any of the values @xmath9 .",
    "the formulae can be easily verified , one at a time , by observing that they are true at some specific point ( such as @xmath50 , where all the hpls vanish except in the otherwise trivial case in which all the indices are equal to 0 ) , then taking the @xmath7-derivatives of the two sides according to eq .",
    "( [ eq : derive ] ) and checking that they are equal ( using when needed the previously established lower - weight formulae ) .",
    "another class of identities is obtained by integrating ( [ eq : defh0 ] ) by parts .",
    "these integration - by - parts ( ibp ) identities read : @xmath51 these identities are not fully linearly independent from the product identities .    by using eqs.([eq : alg0 ] ) for all possible independent values of the indices @xmath52 one obtains 6 independent relations between the 9 hpls of weight 2 and the products of 2 hpls of weight 1 ; those relations can be used for expressing 6 of the hpls of weight 2 in terms of 3 hpls of weight 2 and products of 2 hpls of weight 1 .",
    "the choice of the 3 hpls ( referred to , in this context , as  irreducible \" ) is by no means unique ; by choosing as irreducible hpls of weight 2 the 3 functions @xmath53 and @xmath54 , the reduction equations expressing the 6  reducible \" hpls of weight 2 in terms of the irreducible hpls read @xmath55 similarly , at weight 3 one has 27 hpls and 19 independent product and integration - by - parts identities , expressing 19 reducible hpls in terms of 8 irreducible ones ; at weight 4 there are 81 hpls , 63 independent identities , and correspondingly 63 reducible and 18 irreducible hpls .",
    "at weight 1 , the hpls are just logarithms ; with the standard conventions for the specification of the logarithm , it is immediately seen that @xmath56 has a cut along the real axis from @xmath57 to @xmath58 , @xmath59 from @xmath50 to @xmath60 and @xmath61 from @xmath62 to @xmath63 . with the usual @xmath64 prescription the corresponding complex values along the whole real axis",
    "are given by @xmath65 in particular @xmath66 and @xmath67 are analytic at @xmath50 and can therefore be expanded in series of powers of @xmath7 around @xmath50 , the first term of the expansion being of order @xmath7 .    at weight 2 ,",
    "let us start from the hpls whose rightmost ( trailing ) index is 1 , @xmath68 for @xmath69 , @xmath70 has the same cut from @xmath57 to @xmath71 as @xmath56 . for @xmath72 , by recalling that @xmath73 can be expanded in powers of @xmath74 at @xmath75 , and that the first term of the expansion is @xmath74 ( the constant term vanishes ) , one finds that also @xmath76 shares the same analyticity properties as @xmath56 , namely it has the same cut from @xmath57 to @xmath71 and it can also be expanded in powers of @xmath7 around @xmath50 , the first power of the expansion being @xmath7 ( the constant term vanishes ) . for @xmath77 , finally , one sees that @xmath78 can again be expanded in @xmath7 at @xmath50 ( the first power of the expansion being in this case @xmath79 ) ; but besides the right cut @xmath80 implied by the presence of the @xmath81 in the definition , @xmath82 has also the left cut @xmath83 due to the @xmath84 fraction .",
    "the two cuts can be easily separated by writing @xmath85 \\ , \\nonumber\\\\      \\hm(-1,1;x ) & = & \\int_0^x \\frac{dt}{1+t } \\left [ \\h(1;-1 ) \\right ] \\ ,   \\label{eq : split-11 } \\end{aligned}\\ ] ] where @xmath86 has only the right cut @xmath80 and @xmath87 only the left cut @xmath83 , ( and both admit an expansion in @xmath7 at @xmath50 whose constant term vanishes ) .",
    "note that in the above example the value of @xmath88 is finite , as @xmath89 is regular at @xmath62 .",
    "the same discussion applies to the functions @xmath90 ; @xmath91 and @xmath92 share the same analyticity properties as @xmath61 , while @xmath93 develops , besides the left cut @xmath94 implied by @xmath95 , the right cut @xmath80 due to the fraction @xmath96 in the definition , for which one can write : @xmath97 \\ ,   \\label{eq : split1 - 1 } \\end{aligned}\\ ] ] where @xmath98 is well defined as @xmath61 is regular at @xmath62 .",
    "the procedure might be extended to cover also the hpls whose rightmost index is 0 .",
    "it turns out , however , that it is not really necessary to work out explicitly also this last case ( which is more complicated , as also the @xmath99 cut is present ) .",
    "one can in fact exploit the reduction formulae of the previous section for choosing a set of irreducible hpls with the rightmost index always different from 0 , ( with the exception of the @xmath11 case , where the irreducible set coincides with the set of all 3 hpls ) , and then express all the hpls with @xmath100 and rightmost index 0 in terms of those irreducible hpls .",
    "it is clear from the above discussion that any of arbitrary weight , whose rightmost index is 1 or @xmath101 and whose other indices are otherwise arbitrary , say @xmath102 , can always be separated into the sum of two functions , @xmath103 where @xmath104 has only the right cut @xmath105 and @xmath106 only the left cut @xmath107 .",
    "( the formula applies of course even when one of the two cuts is missing , as in that case the corresponding function is equal to zero ; one can write for instance @xmath108 , as @xmath109 . )",
    "all the involved functions ( the hpls as well as the functions corresponding to the separated cuts with branch points at 1 or @xmath101 ) are regular at @xmath50 and can be expanded in series of powers of @xmath7 , the constant term always being zero .",
    "algorithmically , if @xmath110 ( _ i.e. _ @xmath17 is the leftmost index of @xmath21 , and @xmath111 stands for the remaining @xmath112 indices ) and @xmath113 admits the separation of the cuts @xmath114 with the two functions @xmath115 and @xmath116 corresponding to the right @xmath105 and left @xmath107 cuts , the explicit separation formulae for @xmath117 of weight",
    "@xmath118 @xmath119 in the three cases @xmath120 are given by @xmath121 \\",
    ", \\nonumber\\\\    \\hm(1,\\vec b;x)&= & \\int_0^x \\frac{dt}{1-t } \\left [ \\hm(\\vec b;x )                      - \\hm(\\vec b;1 ) \\right ] \\ , \\nonumber\\\\    \\hp(0,\\vec b;x)&= & \\int_0^x \\frac{dt}{t}\\ ; \\hp(\\vec b;x ) \\ , \\nonumber\\\\    \\hm(0,\\vec b;x)&= & \\int_0^x \\frac{dt}{t}\\ ; \\hm(\\vec b;x ) \\ , \\nonumber\\\\    \\hp(-1,\\vec b;x)&= & \\int_0^x \\frac{dt}{1+t } \\left [ \\hp(\\vec b;x )                      - \\hp(\\vec b;-1 ) \\right ] \\ , \\nonumber\\\\    \\hm(-1,\\vec b;x)&= & \\int_0^x \\frac{dt}{1+t } \\left [ \\hm(\\vec b;x )                      + \\hp(\\vec b;-1 ) \\right ] \\ .",
    "\\label{eq : split } \\end{aligned}\\ ] ] the separation of the two cuts is illustrated with two explicit examples : @xmath122 and @xmath123    the actually chosen irreducible hpls are listed in table  [ tab : irred ] .",
    "note that , in addition to the requirement of the absence of the index 0 in the rightmost place , one can also impose the absence of the index 1 in the leftmost place . that guarantees , owing to the definition eq .",
    "( [ eq : defn0 ] ) , that all the hpls of the above irreducibe set have finite values at @xmath57 .",
    "the explicit values at @xmath57 are needed in the separation of cuts , as well as in some of the transformation formulae discussed in the following section ( as a matter of fact , the @xmath57 values can also be obtained as consistency conditions of the many transformation formulae of various kinds , which can be easily established for the hpls ) .",
    "up to weight 4 , they can easily be obtained by using the table of definite integrals given in @xcite , and we list them in table  [ tab : irred ] as well .",
    "it can be seen that , besides @xmath124 and @xmath125 , only two more transcendental constants appear : @xmath126 and @xmath127 .",
    "the values at @xmath62 can be obtained directly from the transformation discussed in section  [ subsec : min ] below .",
    "we discuss here the identities valid for hpls whose arguments are related by the transformations @xmath128 , @xmath129 and @xmath130 .      for real @xmath7 ( in the whole range @xmath132 ) , if @xmath133 , at weight @xmath11 one has from eq .",
    "( [ eq : cmp1 ] ) @xmath134 where the asterisk stands for the complex conjugate .    at @xmath135 ,",
    "if the rightmost index is different from 0 ( as is the case for the irreducible hpls ) , writing explicitly the indices up to @xmath136 one finds immediately the following formulae , which apply for @xmath137 and any value of the other indices : @xmath138      for real @xmath7 in the range @xmath105 , put @xmath140 at weight 1 , one has @xmath141 for higher weight , one can proceed recursively ( by induction on the weight @xmath10 ) , observing further that for @xmath142 it is sufficient to establish the identities for the irreducible hpls only , as the other cases can be obtained through the reduction formulae .",
    "let us consider a generic irreducible , say @xmath143 , and define accordingly @xmath144 quite in general , @xmath145 by using , in the r.h.s .",
    ", the very definition of @xmath146 and eq .",
    "( [ eq : defn0 ] ) the previous equation reads @xmath147 it was already remarked that the irreducible hpls can be chosen with the leftmost index different from 1 ; therefore in the above equation the index @xmath17 can take only the values 0 and @xmath101 ; correspondingly one finds @xmath148 by proceeding recursively from lower to higher weights , @xmath149 can be considered as already given in terms of hpls of argument @xmath150 , so that due to eq .",
    "( [ eq : defn0 ] ) @xmath146 , hence @xmath151 is also expressed in terms of hpls of argument @xmath74 .",
    "as an example of this transformation , one finds for instance , @xmath152      the transformation @xmath154 can be treated similarly . for @xmath155 in the range @xmath156 , @xmath157 is positive , @xmath158 , and all the involved functions are real , while for @xmath7 in the range @xmath159 the variable @xmath45 is negative , @xmath160 ; at weight @xmath11 , therefore , one has @xmath161 to work out the corresponding formulae for any of the irreducible of higher weight , say @xmath162 , define @xmath163 and evaluate it through the obvious relation @xmath164 which on account of the definitions becomes @xmath165 it was already recalled that the leftmost index of an irreducible does not take the value 1 ; for @xmath166 an elementary explicit calculation gives @xmath167 proceeding again recursively from lower to higher weights , @xmath168 can be considered as already given in terms of hpls of argument @xmath169 ; therefore due to eq .",
    "( [ eq : defn0 ] ) @xmath170 , hence @xmath171 , is also expressed in terms of hpls of argument @xmath45 .    as an example of the above identities , written in a form that applies in the whole range @xmath172 one finds for instance @xmath173    as a last remark concerning the transformation ( [ eq : xtor ] ) ,",
    "let us observe that its fixed points satisfy the equation @xmath174 whose solutions are @xmath175",
    "the analytical properties discussed in the previous sections can be exploited to get a fast and precise numerical evaluation ( absolute error less than @xmath5 ) of the hpls of real but otherwise arbitrary argument @xmath7 .",
    "we divide the whole range @xmath176 into the 5 regions    * @xmath177 , * @xmath178 , * @xmath179 , * @xmath180 , * @xmath181 .    in evaluating all hpls , it is always assumed that the ( infinitesimal ) imaginary part of the argument is positive , _",
    "i.e. _  the hpls are evaluated for argument @xmath182 .",
    "all transformation and expansion formulae used in the numerical evaluation of the hpls were obtained using the computer algebra program form  @xcite .      in the central region",
    "@xmath183 , we evaluate @xmath184 , according to its definition eq .",
    "( [ eq : defineh1 ] ) , as @xmath185 , and all the other irreducible hpls up to the required weight through a power series expansion in @xmath7 around @xmath50 .    as @xmath186 , to obtain the aimed @xmath5 absolute precision",
    ", one should keep in principle 34 terms in the expansion in powers of @xmath7 . if the indices of some hpls take only the values 0 and 1",
    ", it has already been observed that the corresponding function has only the right cut @xmath105 ; in that case , the convergence of the power series expansions improves considerably by the bernoulli  @xcite change of variable @xmath187 this transformation is invertible in the strip @xmath188 and moves the @xmath189 branch point to @xmath190 . by expanding in powers of @xmath191 at @xmath192",
    "one obtains a series in @xmath191 whose radius of convergence is @xmath193 ( as opposed to 1 for the series in @xmath7 ) . as @xmath7 moves from @xmath194 through 0 to @xmath195 , @xmath196 moves from @xmath197 through 0 to @xmath198 , so that in the worst case @xmath199 ; to attain a @xmath200 precision it is sufficient to keep up to 15 terms in @xmath191 .",
    "a few terms drop when using standard chebyshev economization , so that in practice the required accuracy is obtained with at most 12 chebyshev polynomials in @xmath191 .",
    "the same approach works when the indices of the hpls take only the values 0 and @xmath101 ; in that case the corresponding function has only the left cut @xmath107 and the appropriate change of variable is @xmath201 it is found again that after chebyshev economization at most 12 chebyshev polynomials in @xmath202 are needed .",
    "when 1 and @xmath2031 both appear as indices of the hpls both cuts are present .",
    "an expansion in powers of @xmath7 at @xmath50 can be equally carried out , but the above changes of variable do not help for speeding up convergence . indeed , by using for instance the transformation eq .",
    "( [ eq : bernu ] ) , the left branch point at @xmath62 is mapped into @xmath204 , so that the radius of convergence of the @xmath191 expansion at @xmath192 would be in fact reduced from 1 to @xmath205 ( @xmath206 ) .",
    "this problem is , however , easily overcome by using eq .",
    "( [ eq : splitw ] ) and evaluating independently , for each irreducible @xmath102 , the two related functions @xmath207 and @xmath208 by using the variable @xmath191 of eq .",
    "( [ eq : bernu ] ) for @xmath207 and the variable @xmath202 of eq .",
    "( [ eq : bernv ] ) for @xmath208 .",
    "it should be noted that it is not actually necessary to evaluate both @xmath207 and @xmath208 for each irreducible @xmath102 .",
    "indeed , if the rightmost index is 1 , @xmath207 differs from @xmath102 by a combination of constants times hpls with the left cut and smaller weight , see for instance eqs .",
    "( [ eq : split-111 ] ) and ( [ eq : split01 - 11 ] ) , while @xmath208 is just that difference . in a systematic approach to the numerical evaluation of the hpls",
    "in order of increasing weight , such lower weight functions can be considered as already evaluated .",
    "therefore only @xmath207 has to be evaluated from scratch as a power series in the suitable variable .",
    "the obvious analogue applies when the rightmost index is @xmath101 .",
    "some explicit examples of actual expansions in @xmath191 and @xmath202 follow : @xmath209 the fast convergence of the expansion is shown by the fast decrease of the higher order coefficients . in the first and third of the above equations the fast decrease is manifest ; in the second equation it comes from the strong cancellations between the two terms in brackets ; for instance , the actual value of the coefficient of the @xmath210 term is @xmath211 , the first rational fraction being @xmath212 ( the coefficient could indeed be used for obtaining the rational approximation @xmath213 to @xmath214 ) , and the effect is of course enhanced in the subsequent terms .",
    "some care has therefore to be taken in implementing these coefficients in a numerical program . to avoid large cancellations inside the coefficients during the execution of the program , we converted all coefficients from combinations of rational fractions and transcendental constants into real numbers of the desired accuracy , so that in the fortran code each power of @xmath191 and @xmath202 is multiplied by a single constant in double precision .",
    "it should be noted that @xmath191 and @xmath202 are both in the range @xmath215 $ ] .",
    "the chebyshev economization is carried out on those terms by rescaling @xmath191 and @xmath202 with a factor @xmath216 , to an interval slightly smaller than @xmath217 $ ] .",
    "using this only approximate rescaling allows an extension of the numerical formulae used in this region also slightly beyond its boundaries , which will be used as a check on the numerical program below .      in the region",
    "@xmath218 we use the change of variable of eq .",
    "( [ eq : xtor ] ) in section  [ subsec : r ] for expressing the irreducible hpls of argument @xmath7 in terms of the irreducible hpls of argument @xmath45 , with @xmath219 note that @xmath220 corresponds to @xmath221 ( one of the fixed points of the transformation ) , while @xmath222 corresponds to @xmath223 , so that the region @xmath218 is mapped into the @xmath45-range @xmath224 , which is exactly the central region discussed in the previous subsection .",
    "we evaluate the hpls of @xmath45 with the series expansion discussed above , then obtain the required hpls of @xmath7 by means of the transformation formulae discussed in section  [ subsec : r ] .",
    "we use the change of variable @xmath225 of eq .",
    "( [ eq : xtot ] ) , discussed in section  [ subsec : x ] , for expressing the irreducible hpls of argument @xmath7 in terms of the irreducible hpls of argument @xmath74 , with @xmath226 .",
    "note that @xmath227 corresponds to @xmath228 , while @xmath229 translates into @xmath230 , so that the region @xmath181 is mapped into the @xmath74-range @xmath231 , which is the positive half of the central region discussed at the beginning of this section .",
    "we evaluate the hpls of @xmath74 from their series expansion , then obtain the required hpls of @xmath7 by means of the transformation formulae of section  [ subsec : x ] .",
    "we use the change of variable @xmath233 .",
    "we evaluate the hpls of argument @xmath133 as in subsection  [ subsec : expandr ] and then use the formulae of subsection  [ subsec : min ] for expressing the required hpls of argument @xmath7 in terms of the hpls of argument @xmath234 .      essentially the same as before .",
    "we evaluate the hpls of argument @xmath133 as in subsection  [ subsec : expandx ] and then use the formulae of section  [ subsec : min ] .",
    "we have carried out several checks on our implementation of the algorithm described in the previous section into a fortran subroutine .",
    "an immediate check of the numerical implementation of the hpls is provided by the derivative formula eq .",
    "( [ eq : derive ] ) .",
    "evaluating the left - hand side of eq .",
    "( [ eq : derive ] ) numerically with a standard symmetric 4-point differentiation formula , and comparing it with the right - hand side evaluated directly , we found agreement within an accuracy of @xmath236 or better .",
    "this accuracy is mainly limited by rounding errors induced by the small interval size used in the differentiation formula .",
    "we used @xmath237 as interval size , which implies a theoretical accuracy of about @xmath200 .",
    "this accuracy is however reduced to the observed @xmath236 by rounding errors arising from taking the difference between the function values evaluated at interval points spaced by @xmath237 only .",
    "we also checked the continuity of all hpls across the boundaries of the different regions introduced in section  [ sec : numer ] , which match onto each other at the points @xmath238 and @xmath239 of eq .",
    "( [ eq : r2pm1 ] ) . evaluating the hpls according to the algorithms appropriate to the regions left and right of the boundaries , we found both limiting values to agree within @xmath5 or better for both real and imaginary parts . moreover , we evaluated the hpls in a few points scattered in a small neighbourhood ( of size @xmath240 ) across the boundaries of the regions discussed in the previous section , by using for each point the two different algorithms used separately in the fortran code at each side of the boundaries and then comparing the results .",
    "again , we found agreement within the desired accuracy of @xmath5 .",
    "the routine hplog has the following syntax :    ....        subroutine hplog(x , nw , hc1,hc2,hc3,hc4 ,       $                       hr1,hr2,hr3,hr4,hi1,hi2,hi3,hi4,n1,n2 ) ....      in calling hplog , the user has to supply    * the argument for which the hpls are to be evaluated .",
    "x is of type real*8 .",
    "it can take any real value @xmath241 . * the maximum weight of the hpls to be evaluated .",
    "nw is of type integer .",
    "it is limited to @xmath242 . *",
    "define the indices for which the hpls are evaluated .",
    "( n1,n2 ) are of type integer .",
    "allowed combinations are @xmath243 ( evaluate all hpls ) , @xmath244 ( evaluate only hpls with 0 and 1 appearing in the vector of arguments ) and @xmath245 ( evaluate only hpls with 0 and @xmath101 appearing in the vector of arguments ) .    the output of hplog is provided in the arrays hc1,hc2,hc3,hc4,hr1,hr2,hr3,hr4,hi1,hi2,hi3,hi4 .",
    "these have to be declared and dimensioned by the user as follows :    ....        complex*16 hc1,hc2,hc3,hc4         real*8      hr1,hr2,hr3,hr4         real*8      hi1,hi2,hi3,hi4         dimension hc1(n1:n2),hc2(n1:n2,n1:n2),hc3(n1:n2,n1:n2,n1:n2 ) ,        $           hc4(n1:n2,n1:n2,n1:n2,n1:n2 )         dimension hr1(n1:n2),hr2(n1:n2,n1:n2),hr3(n1:n2,n1:n2,n1:n2 ) ,        $           hr4(n1:n2,n1:n2,n1:n2,n1:n2 )         dimension hi1(n1:n2),hi2(n1:n2,n1:n2),hi3(n1:n2,n1:n2,n1:n2 ) ,        $           hi4(n1:n2,n1:n2,n1:n2,n1:n2 )   ....    it should be noted that this declaration is always needed , even if hplog is called with nw@xmath246 . after calling hplog for a given argument x ,",
    "the complex arrays hc1 , hc2 , ... contain the complex values of the corresponding hpls of weight @xmath247 , the real arrays hr1 , hr2 , ... contain the real values and hi1 , hi2 , ... the immaginary parts divided by @xmath248 , so that , for instance , the following equality holds    ....",
    "hc3(k1,k2,k3 ) = cmplx ( hr3(k1,k2,k3 ) , pi*hi3(k1,k2,k3 ) ) ....    the complex parts of the hpls are always evaluated assuming an infinitesimal positive imaginary part of the argument .",
    "the subroutine does not need initialization .",
    "the following example program illustrates how to evaluate hpls up to weight 2 for a given value of @xmath7 , and to write out their real parts :    ....        program testhpl        integer n1,n2,nw , i1,i2        parameter ( n1=-1 )         parameter ( n2=1 )         parameter ( nw=2 )        complex*16 hc1,hc2,hc3,hc4         real*8      hr1,hr2,hr3,hr4         real*8      hi1,hi2,hi3,hi4         real*8      x        dimension hc1(n1:n2),hc2(n1:n2,n1:n2),hc3(n1:n2,n1:n2,n1:n2 ) ,        $           hc4(n1:n2,n1:n2,n1:n2,n1:n2 )         dimension hr1(n1:n2),hr2(n1:n2,n1:n2),hr3(n1:n2,n1:n2,n1:n2 ) ,        $           hr4(n1:n2,n1:n2,n1:n2,n1:n2 )         dimension hi1(n1:n2),hi2(n1:n2,n1:n2),hi3(n1:n2,n1:n2,n1:n2 ) ,        $           hi4(n1:n2,n1:n2,n1:n2,n1:n2 )         write(6 , * ) ' input x : '         read(5 , * ) x         call hplog(x , nw , hc1,hc2,hc3,hc4 ,        $                 hr1,hr2,hr3,hr4,hi1,hi2,hi3,hi4,n1,n2 )         do i1 = n1,n2",
    "write(6,101 ) i1,hr1(i1 )           do i2 = n1,n2",
    "write(6,102 ) i1,i2,hr2(i1,i2 )           enddo        enddo        stop    101 format ( '        h(',i2,',x ) = ' , f18.15 )    102 format ( '        h(',i2,',',i2,',x ) = ' , f18.15 )        end ....",
    "in fig .  [ fig : hpl ] , we plot real and imaginary parts for a selection of irreducibe hpls over the interval @xmath249 $ ] .",
    "the remaining irreducible hpls can be obtained by simply interchanging @xmath250 , according to eqs .",
    "( [ eq : xtoy]),([eq : xtoy2 ] ) .",
    "in this paper , we have described the routine hplog , which evaluates the harmonic polylogarithms up to weight 4 for arbitrary real arguments .",
    "the evaluation is based on a series expansion in terms of appropriately transformed expansion parameters for small values of the argument .",
    "the evaluation for large arguments is based on transformation formulae , relating hpls of different arguments .",
    "the algorithms used and described here can be extended to higher weights without further modification , requiring only the values of the hpls in @xmath57 to be known .",
    "we are grateful to jos vermaseren for his assistance in the use of the algebraic program form  @xcite , which was employed intensively for generating the code described here .",
    "n. nielsen , _ der eulersche dilogarithmus und seine verallgemeinerungen _ , nova acta leopoldina ( halle ) * 90 * ( 1909 ) 123 .",
    "see also the book by l.  lewin , _ polylogarithms and associated functions _",
    "( north holland , 1981 ) .",
    "e.  remiddi and j.a.m .",
    "vermaseren , int .",
    "j.  mod .",
    "* a15 * ( 2000 ) 725 . t.  gehrmann and e.  remiddi , nucl .",
    "* b601 * ( 2001 ) 248 ; * b601 * ( 2001 ) 287 .",
    "s.  moch and j.  a.  vermaseren , nucl .",
    "* b573 * ( 2000 ) 853 ; nucl .",
    "* 89 * ( 2000 ) 131 .",
    "borwein , d.m .",
    "bradley and d.j .",
    "broadhurst , electronic j.  of combinatorics , * 4*(2 ) ( 1997 ) r5 ; + j.  blmlein and s.  kurth , phys .",
    "* d60 * ( 1999 ) 014018 ; + j.  blmlein , comp .",
    "* 133 * ( 2000 ) 76 .",
    "& @xmath259 & @xmath260 + & @xmath261 & @xmath260 + & @xmath262 & @xmath263 + & @xmath264 & @xmath265 + [ -1.5ex]@xmath266 & @xmath267 & @xmath268 + & @xmath269 & @xmath270 + & @xmath271 & @xmath272 + & @xmath273 & @xmath274 +      & @xmath275 & @xmath276 + & @xmath277 & @xmath278 + & @xmath279 & @xmath276 + & @xmath280 & @xmath281 + & @xmath282 & @xmath283 + & @xmath284 & @xmath285 + & @xmath286 & @xmath287 + & @xmath288 & @xmath289 + & @xmath290 & @xmath291 + [ -1.5ex]@xmath136 & @xmath292 & @xmath293 + & @xmath294 & @xmath295 + & @xmath296 & @xmath297 + & @xmath298 & @xmath299 + & @xmath300 & @xmath301 + & @xmath302 & @xmath303 + & @xmath304 & @xmath305 + & @xmath306 & @xmath307 + & @xmath308 & @xmath309 +"
  ],
  "abstract_text": [
    "<S> harmonic polylogarithms @xmath0 , a generalization of nielsen s polylogarithms @xmath1 , appear frequently in analytic calculations of radiative corrections in quantum field theory . </S>",
    "<S> we present an algorithm for the numerical evaluation of harmonic polylogarithms of arbitrary real argument . </S>",
    "<S> this algorithm is implemented into a fortran subroutine hplog to compute harmonic polylogarithms up to weight 4 .    </S>",
    "<S> cern - th/2001 - 188 + hep - ph/0107173 + july 2001    3.5 cm    1.cm t.  gehrmann@xmath2 and e.  remiddi@xmath3 .7 cm _ @xmath2 theory division , cern , ch-1211 geneva 23 , switzerland _ .4 cm _ @xmath3 dipartimento di fisica , universit di bologna and infn , sezione di bologna , i-40126 bologna , italy _    </S>",
    "<S> 2.6 cm    * program summary *    _ title of program _ : hplog + _ version _ : 1.0 + _ release _ : 1 + _ catalogue number _ : </S>",
    "<S> + _ program obtained from _ : thomas.gehrmann@cern.ch , ettore.remiddi@bo.infn.it + _ e - mail _ : thomas.gehrmann@cern.ch , ettore.remiddi@bo.infn.it + _ licensing provisions _ : none + _ computers _ : all + _ operating system _ : all + _ program language _ : fortran77   + _ memory required to execute _ : size : 516k + _ no .  of lines in distributed program _ </S>",
    "<S> : 3271 + _ other programs called _ : none + _ external files needed _ : none + _ keywords _ : harmonic polylogarithms , feynman integrals + _ nature of the physical problem _ : numerical evaluation of the harmonic polylogarithms up to weight 4 for arbitrary real argument . </S>",
    "<S> these functions are emerging in feynman graph integrals involving more than one mass scale . </S>",
    "<S> + _ method of solution _ : for small values of the argument : series representation ; other values of the argument : transformation formulae . + _ restrictions on complexity of the problem _ : limited up to hpl of weight 4 , the algorithms used here can be extended to higher weights without modification . </S>",
    "<S> + _ typical running time _ : on average 0.3 ms for the evaluation of all harmonic polylogarithms up to weight 4 on a pentium iii/600 mhz linux pc .    </S>",
    "<S> * long write - up * </S>"
  ]
}