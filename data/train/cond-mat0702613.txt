{
  "article_text": [
    "random graph theory  @xcite is a fascinating branch of mathematics , at the frontier between classical graph theory and probability . since the seminal work of erds and rnyi  @xcite the properties of various random graph ensembles",
    "have been thoroughly studied .",
    "random graphs have been often encountered in the recent statistical mechanics literature , in at least three contexts . in the first one , pioneered by viana and bray  @xcite",
    ", they provide a convenient family of models of disordered systems which enjoy the remarkable analytical properties of mean - field models , while retaining a limited notion of geometry lost in the fully - connected models of the sherrington - kirkpatrick  @xcite type .",
    "a second family of statistical mechanics papers is also related to random graphs , but takes a somehow inverse perspective : one studies carefully chosen disordered models with the aim of obtaining a detailed description of the underlying random graph ensemble ( see for instance @xcite ) . a third , yet related to the second , family of works are the studies of real - world networks , where random graphs are used as benchmarks for comparison to experimentally collected data  @xcite .",
    "a large fraction of the above mentioned research has been concerned with the presence of particular subgraphs ( sometimes called patterns or motifs ) inside a given , possibly random , graph . for concreteness",
    "let us consider the case where the pattern is a cycle of length @xmath0 , i.e.  a closed , non - intersecting path of @xmath0 adjacent vertices .",
    "several variants of the problem can be stated .",
    "the first is the _ existence _ problem . for a given graph , for instance a real - world network",
    ", one can ask whether or not there is such a cycle . in the random graph context , the question amounts to compute the probability of presence of this pattern , with respect to the choice of the graph in the random ensemble . in some interesting cases this probability can present a threshold phenomenon ; as some external parameter defining the ensemble is varied , the limit of this probability when the size of the graphs goes to infinity can be either zero or one . a second , more demanding problem is the one of _ counting _ : given a graph , how many repetitions of the pattern can be found ? or for a random graph ensemble , what is the distribution of the random variable counting this number of occurrences ?",
    "a third version , which shall be the main focus of this paper , is the _ finding _ problem : can one actually exhibit one example of the pattern in a proposed graph ?",
    "the answer to these questions depends a lot on the length @xmath0 of the cycles under consideration .",
    "as long as @xmath0 is much smaller than the total number @xmath1 of vertices , the various problems are relatively easy .",
    "short cycles are not too numerous and can thus be counted by exhaustive enumeration  @xcite , which provides as a side result an answer to the _ existence _ and _ finding _ problem .",
    "moreover for most random graph ensembles the distribution of the number of cycles of finite length can be easily computed in the limit where the total number of vertices diverges .",
    "these problems become much more difficult when one considers cycles whose length is a finite fraction of the total number of vertices  @xcite , for instance hamiltonian cycles , i.e.  those of length @xmath1 . indeed , such long cycles can be exponentially numerous , preventing for instance the use of exhaustive enumeration when not dealing with very small graphs . more formally , deciding the existence of an hamiltonian cycle is known to be an np - complete problem  @xcite . because of the large fluctuations of the exponential number of long cycles , their distribution is known only in the special case of random regular graphs  @xcite where all vertices have the same degree , and which are known to be hamiltonian with high probability  @xcite . in this restricted case",
    "there exists an algorithm for finding hamiltonian cycles in polynomial time  @xcite .",
    "the typical number of long cycles in a large class of random graphs has been studied with statistical mechanics methods in  @xcite . in the present paper",
    "we extend this approach to the _ finding _ version of the problem , i.e.  we propose some algorithms which attempt to unveil large cycles in a graph .",
    "a special emphasis will be put on the following issue . as mentioned above , random regular graphs of degree larger than or equal to three",
    "are known to be hamiltonian with high probability .",
    "wormald conjectured in  @xcite that this remains true for random graphs where all vertices have degrees in @xmath2 $ ] , with @xmath3 a finite integer .",
    "the non - rigorous approach of  @xcite reached the same conclusion and provided a prediction for the typical number of hamiltonian cycles in graphs of these ensembles . in the present paper",
    "we shall see that the algorithms we propose are indeed able to explicitly construct hamiltonian cycles of these graphs .",
    "the paper is organized as follows .",
    "section  [ sec_def ] is devoted to a presentation of more formal definitions .",
    "two distinct approaches to the problem are presented in section  [ sec_decimation ] and [ sec_mc ] , with technical details of the implementation deferred to two appendices .",
    "we draw our conclusions in section  [ sec_conclusions ] .",
    "an undirected graph @xmath4 is defined by a set @xmath5 of @xmath1 vertices , and a set @xmath6 of @xmath7 unordered pairs of vertices , the edges .",
    "the graphs considered in this article are simple , i.e.  neither self - loops ( edges from one vertex to itself ) nor multiple edges between the same pair of vertices are allowed .",
    "two vertices @xmath8 and @xmath9 are said to be adjacent if the edge @xmath10 belongs to @xmath6 .",
    "the degree ( or connectivity ) of a vertex is the number of edges it belongs to .",
    "the neighborhood @xmath11 of vertex @xmath8 denotes the set of edges in which @xmath8 appears , or the set of adjacent vertices , without possibility of confusion .",
    "a cycle ( or circuit ) of length @xmath0 is a closed non - intersecting path of @xmath4 , more formally a sequence of @xmath0 distinct vertices @xmath12 such that @xmath13 is adjacent to @xmath14 for all @xmath15 $ ] , and @xmath16 is adjacent to @xmath17 .",
    "a graph @xmath4 is said to be hamiltonian if it admits a hamiltonian cycle , i.e.  a cycle of length @xmath1 which visits all the vertices of @xmath4 .",
    "we identify a subgraph of @xmath4 , a cycle for instance , by the set of its edges . for",
    "the ease of notation , let us associate to each edge @xmath18 $ ] of @xmath4 a discrete variable @xmath19 .",
    "each of the @xmath20 possible subgraphs of @xmath4 is unambiguously associated to a configuration @xmath21 , with @xmath22 ( respectively 0 ) , if edge @xmath23 is present ( absent ) in the subgraph .",
    "we also introduce the notation @xmath24 for the configuration of the edges around vertex @xmath8 .    besides cycles",
    "as defined above , we shall also encounter subgraphs of @xmath4 which are unions of vertex disjoint cycles .",
    "when all the vertices of the graph are covered in this way , the subgraph is called a cycle cover , or a 2-factor . by definition",
    "hamiltonian cycles are cycle covers made of a single cycle , but obviously not all cycle covers are hamiltonian cycles .",
    "even if apparently similar , the decision problems concerning the existence of a hamiltonian cycle or of a cycle cover have very different computational complexity .",
    "the first one is in the np - complete class  @xcite , whereas the second can be mapped , thanks to a theorem of tutte  @xcite , to the existence of a perfect matching in a dual graph of similar size , a task for which polynomial time algorithms are known  @xcite .",
    "we shall test our algorithms on graphs drawn from the fixed degree distribution ensemble , discussed for instance in  @xcite .",
    "we choose our random graphs uniformly among those with degree distribution @xmath25 , a given probability distribution on positive integers @xmath26 .",
    "the generation of such graphs , based on the configuration model  @xcite , is done as follows . for each value of @xmath27 a subset of @xmath28 vertices",
    "are assigned degree @xmath27 , and @xmath27 `` half - links '' are drawn around each of them .",
    "the half - links are then paired in a uniform random way .",
    "if the graph generated is not simple , it is discarded and the generation starts again . it can be shown  @xcite that this procedure respects the uniformity over the graphs with prescribed degree distribution .",
    "regular random graphs of degree @xmath29 are a particular case of the above model , where all vertices have the same degree @xmath29 , i.e.  @xmath30 .",
    "we shall also consider the distribution @xmath31 which interpolates between two different regular ensembles as @xmath32 varies in @xmath33 $ ] .",
    "the goal of the algorithms presented in the following is to discover the longest cycles in a given graph .",
    "the class of graphs we investigate ( random with minimal degree larger than 3 and bounded maximal degree ) are expected  @xcite to be hamiltonian with high probability when their size diverges .",
    "we thus aim at finding hamiltonian cycles , or at least cycles covering almost all vertices of the graphs . because of the intrinsic complexity of the hamiltonian circuit problem we do not expect that these algorithms should be valid for all graphs , but at least for the class of sparse graphs satisfying the degree constraints explained above .",
    "let us first introduce in generic terms the principles underlying the algorithm we develop in this section .",
    "consider an arbitrary discrete set of configurations @xmath34 , a subset @xmath35 that one would like to sample and define @xmath36 $ ] as the uniform probability measure on @xmath35 , i.e.  @xmath36 = 1 /|\\h|$ ] if @xmath37 and zero otherwise , where @xmath38 is the number of configurations in @xmath35 .",
    "a possible scheme for the sampling from @xmath35 is the following .",
    "initially all @xmath39 are undetermined . for @xmath40 increasing from 1 to @xmath7 , choose arbitrarily an index @xmath41 of one of the still non fixed variables , and draw @xmath42 according to its marginal law conditioned on the previous choices , @xmath43 $ ] ( for @xmath44 there is no conditioning ) .",
    "the configuration produced at the end of this `` decimation '' process is clearly uniformly distributed on @xmath35 . however , except in particularly simple situations , it is not possible to implement this method as it is , the marginal laws used above being in general very difficult to compute exactly .    in the context of this paper we would ideally like to follow this road taking for the set @xmath35 the longest cycles of the graph under study .",
    "the output configuration would then provide us with the length of these longest cycles and one of their representatives .",
    "there is no serious hope for a practical implementation of this idea in an exact way : note for instance that it would , as a side result , solve the hamiltonianicity decision problem , which , being np - complete , is not expected to have a polynomial time algorithm",
    ".    therefore we turn to an approximated version of this ideal strategy , similar in spirit to the survey propagation algorithm introduced by mzard and zecchina for constraint satisfaction problems  @xcite .",
    "we first define a probability law on the subgraphs of @xmath4 , @xmath45 = \\frac{1}{z } u^{\\sum_l s_l } \\prod_{i } w_i(\\us_i ) \\ , \\label{eq : prob}\\ ] ] where @xmath46 if @xmath47 , @xmath48 otherwise , @xmath49 is a real parameter and @xmath50 a normalization constant .",
    "this allows only subgraphs made of vertex disjoint cycles ( each node of the graph must be surrounded by either 0 or 2 edges ) .",
    "their weight is proportional to @xmath51 , where @xmath0 is the total length of these cycles . in case",
    "@xmath52 this leads to a flat sampling amongst vertex disjoint cycles of any length .",
    "when @xmath49 goes to @xmath53 , the probability converges to the uniform law on the largest of these subgraphs , in particular cycle covers if the graph admits them .",
    "allowing for unions of several cycles leads us away from the ideal strategy but is a gain in analytical simplicity : the interactions in eq .",
    "( [ eq : prob ] ) are local , i.e.  involve only a finite set of neighboring variables .",
    "this opens the way to several approximate treatments , of the mean - field bethe approximation flavor .",
    "we shall indeed use belief propagation ( bp ) , a message passing algorithm widely used for solving inference problems ( see  @xcite for a review and for the connection with the bethe free - energy ) .",
    "this approach was followed in  @xcite in order to compute the normalization constant @xmath50 , and hence the number of allowed configurations .",
    "one can easily adapt these results for the relevant question here , i.e.  the computation of the marginal probabilities of presence of an edge @xmath23 in the law ( [ eq : prob ] ) conditioned on some of the variables being fixed .",
    "when using the bp algorithm , we work directly in the limit @xmath54 , where the measure concentrates on the longest configurations . in this limit , the fact that sites of degree 2 are not allowed implies a number of analytical simplifications  @xcite .",
    "let us consider the set @xmath6 of edges of the graph .",
    "we assume that some of them are constrained to be present , i.e.  have @xmath22 , and call the set of these edges @xmath55 , and that some of them are constrained to be absent , i.e.  have @xmath56 , and call this set @xmath57 .",
    "the edges of @xmath58 are called non - decimated .",
    "we introduce for each non - decimated edge @xmath59 a pair of real variables @xmath60 and @xmath61 , `` messages '' sent by vertex @xmath8 to vertex @xmath9 and vice versa .",
    "the bp estimate for the probability of presence of edge @xmath23 in this conditional law reads @xmath62",
    "=    \\frac{y_{i \\rightarrow j}y_{j \\rightarrow i } } { 1 + y_{i \\rightarrow j}y_{j \\rightarrow i } } , \\label{eq : marginal}\\ ] ] where the messages are solutions of the bp equations .",
    "these express the value of a message @xmath60 in terms of the messages along the neighboring edges and the status ( decimated or not ) of the edges .",
    "let us denote @xmath63 the set of vertices @xmath27 adjacent to @xmath8 , distinct from @xmath9 such that @xmath64 is a non - decimated edge .",
    "we have to consider two cases :    * if all the edges in @xmath65 are either non - decimated or constrained to be absent , @xmath66 * if exactly one edge in @xmath65 is constrained to be present , the others being either non - decimated or absent , @xmath67    if two edges in the neighborhood of @xmath8 are constrained to be present , the others are set to absent and the messages along these edges are no longer considered in the bp algorithm . cases in which three or more edges incident to @xmath8 are present are not allowed due to the constraints @xmath68 .",
    "we refer to @xcite for details on the derivation of these equations .",
    "we can now describe a possible implementation of the proposed algorithm .",
    "initially , all edges are non - decimated ( @xmath69 ) and we set all messages to a random value in @xmath33 $ ] .",
    "the algorithm then proceeds by repeating the following two steps :    * belief propagation step .",
    "+ a solution of the bp equations is searched by iterating eqs .",
    "( [ eq : msg1],[eq : msg2 ] ) ; all messages are updated in random sequential order .",
    "this operation is repeated a certain number of times to get sufficiently close to the fixed - point solution . in our implementation",
    "we stopped the iterations when either the average modification of a message is lower than an arbitrary small threshold ( set to @xmath70 in the following ) or when a maximum number ( 20 ) of iterations fixed beforehand has been reached . * decimation and propagation step .",
    "+ we set some of the non - decimated edges to either present or absent ( updating accordingly @xmath57 and @xmath55 ) , according to the information given by the solution of the bp equations found in the previous step .",
    "+ if the bp procedure were exact , one could choose arbitrarily one of the edges in @xmath71 and fix it according to its marginal probability ( conditional on @xmath72 ) .",
    "however the bp estimation of this quantity @xmath73 ( see eq.([eq : marginal ] ) ) is only approximate .",
    "therefore it is safer to fix only the most biased variable , i.e.  the one with @xmath73 closer to 0 or 1 , to its most probable value , hoping that this is the least subject to the imprecision of the algorithm .",
    "+ because of the hard constraints encoded in the weight function @xmath74 , fixing a variable might automatically impose the value of a few others ( similarly to the unit propagation rule in constraint satisfaction problems ) .",
    "for example , when two edges around a given vertex have been assigned to present , the other neighboring edges have to be absent in order to avoid intersecting cycles .",
    "similarly , if all but two edges around a given vertex are absent , we set these two non - decimated edges to be present since we are seeking configurations of maximal length . in case",
    "we encounter a situation where only one edge is left undecimated , we set it to present if there is already another neighboring edge present . otherwise , we set it to absent , such that the final subgraph could still be a cycle ( even though not a hamiltonian one ) .",
    "it can happen that this propagation leads to a contradictory situation in which an edge needs to be both present and absent .",
    "when this occurs , the decimation procedure is stopped prematurely , we re - initialize all messages and all edge variables and re - start the complete decimation procedure from the beginning .",
    "+ apart from the effects of this direct propagation , decimating a single variable does not drastically modify the values of the messages on the remaining non - decimated edges .",
    "thus , it turns out to be useful to fix several of the most biased variables before returning to the bp step with a reduced graph . in practice , we treat all the edges with @xmath73 lower than @xmath75 or higher than @xmath76 in a single decimation step and if there are no such edges , we simply choose one of the most biased ones .",
    "we repeat these two steps subsequently until either a contradiction has occurred during a propagation step , or all edge variables have been assigned a value .",
    "we refer to the complete operation as the decimation procedure .",
    "if the procedure is exited without contradiction , we are left with a subgraph made of vertex disjoint cycles , which can be a cycle cover or possibly a hamiltonian cycle .",
    "the output of a decimation procedure is stochastic , since we use random numbers in the initialization of the bp messages and in deciding the order of the updates .",
    "the algorithm can thus be improved in a straightforward way .",
    "if the decimation procedure result is not satisfactory , one can launch it again with different random numbers , until one of these decimation procedures produces a satisfactory output ( cycle cover or hamiltonian cycle ) .",
    "we set a maximum number of repetitions equal to @xmath77 .",
    "the influence of this arbitrarily chosen number is discussed in the following section .",
    "we shall also introduce another improvement based on a local rewiring procedure , that will be interleaved between the repetitions of the decimation procedures , see below for details .    before entering the discussion of the results of the algorithm ,",
    "let us note that , in the family of graphs studied here , one decimation procedure has a computational cost at most quadratic in the size of the graph .",
    "since for the sparse graphs we are considering the number of edges is proportional to the number of vertices , a bp step has linear cost . in a worst case scenario , only one edge is fixed during each subsequent decimation step , resulting in at most @xmath7 repetitions of the bp step .",
    "[ cols=\"^,^,^,^,^,^,^,^,^,^,^,^,^ \" , ]     we present in table  [ tab : prob_cc_hc ] a summary of the numerical experiments we conducted with the decimation algorithm .",
    "each entry of the table is a percentage of success computed on a set of one thousand graphs of given size and connectivity distribution . in the cc column",
    "we define successful a repetition of decimation procedures that terminates with the finding of a cycle cover ( cc ) , while in the hc column we define by success the discovery of an hamiltonian cycle ( hc ) .",
    "consider first the three leftmost columns of table [ tab : prob_cc_hc ] , concerning regular graphs of degree 3 , 4 and 5 .",
    "for these cases we employed the decimation procedures in the simplest way : on each graph we repeated a decimation procedure until the output configuration was a hamiltonian cycle , or until a maximal number of trials had been reached .",
    "this approach turns out to be very efficient .",
    "for all the regular graphs investigated , we find an hamiltonian cycle after about 10 trials on average , i.e.  well before reaching the cutoff of a thousand repetitions .",
    "the efficiency of this procedure is a priori surprising .",
    "if the marginal probabilities were computed exactly the output configurations would be distributed among the various cycle covers of the graph , a set which contains the hamiltonian cycles but could be much larger .",
    "it was however argued in  @xcite that , at the leading exponential order , these two sets have roughly the same size ( rigorous arguments of this kind were used in  @xcite ) .",
    "hence , by generating enough distinct cycle covers one of them is eventually a hamiltonian cycle .",
    "this simple procedure is less efficient on the non - regular graphs ( with a degree distribution given by eq .",
    "( [ eq : degree_distrib_mixture ] ) ) that we investigated , as shown in the three rightmost groups of columns of table  [ tab : prob_cc_hc ] .",
    "the percentage of graphs for which an hamiltonian cycle is found within the first thousand repetitions of the decimation procedure is shown in the columns hc - dec . when the graphs get denser the success probability drops .",
    "a more detailed look at the outputs of the algorithm reveals that in almost all of the graphs a cycle cover has however been found ( columns cc ) .",
    "this motivated the search for a simple way to convert a cycle cover , obtained with the decimation procedure and composed of several vertex disjoint cycles , into a hamiltonian cycle .",
    "the main idea is to join two or more cycles by doing some local rewiring ( lr ) among the edges : we discuss the details of such rewiring in the appendix  [ app : lr ] . in practice ,",
    "when the decimation procedure ends with a cycle cover different from a hamiltonian cycle , we apply this lr algorithm to try to recover a hamiltonian cycle . again , if this extended decimation procedure does not produce the desired result , it is repeated no more than a thousand times .",
    "the success rate of finding hamiltonian cycles with this combined strategy ( columns hc - lr ) is much higher with respect to the simple one ( hc - dec ) .",
    "in fact , by using this extended version , it now almost matches , up to a few percentage points , the fraction of graphs for which we were able to find a cycle cover .",
    "the added value of including this local rewiring algorithm reduces slightly with the size of the graph and when the average graph degree increases .",
    "note however that even in `` half - successful '' graphs , i.e. when a cycle cover but no hamiltonian cycle is found , the cycle cover always contains one long ( extensive ) cycle , whose length gets closer to @xmath1 for increasing graph sizes .",
    "let us now evaluate the efficiency of the algorithm , which necessarily turns out to be a trade - off between the success rate and its time requirements .",
    "we have to distinguish two points .    a first point",
    "was already mentioned at the end of sec .",
    "[ sec : bid_description ] and concerns the computational cost of a single decimation procedure , that we argued to be quadratic in the size of the graph .",
    "this is confirmed by the plot of fig .",
    "[ fig : nb_mp ] : the average number of decimation steps performed during a decimation procedure scales linearly .",
    "moreover , as we allowed several variables to be fixed during a single decimation step , this number is smaller than @xmath7 , the worst - case estimate .",
    "average number of steps needed for the decimation procedure to exit for graphs of different connectivity distributions ( @xmath78 for @xmath79 , @xmath80 for @xmath81 and @xmath82 for @xmath83 ) and sizes .",
    "the best fit to all data for all connectivity distributions is linear and has a slope of @xmath84 . ]",
    "a second crucial point concerns our choice ( one thousand ) for the threshold on the number of repetitions of the complete decimation procedure ( that can be possibly complemented by an attempt of patching the cycle cover ) .",
    "this is the moment when we give up our search of a hamiltonian cycle : obviously such a choice has a direct effect on the percentages of success we presented in table [ tab : prob_cc_hc ] .    in fig .",
    "[ fig : nb_trials ] and [ fig : nb_trials_varyq ] we plot the integrated distributions of the number of decimation procedures ( alone or combined with the patching algorithm ) performed before exiting .",
    "these distributions are artificially bounded by the threshold we set , i.e.  by the maximum of thousand repetitions of the decimation procedure . from these figures",
    "one can learn , for example , how the success probability would deteriorate by taking a smaller threshold on the number of repetitions . consider first the right panel of fig .",
    "[ fig : nb_trials ] , displaying the results of the combined strategy for graphs of connectivity distribution @xmath79 .",
    "it is clear that the almost constant plateau of success probability is already reached around one hundred repetitions .",
    "lowering the threshold on the number of repetitions to this value would reduce the success probability stated in table [ tab : prob_cc_hc ] by roughly one percent only ( more precisely @xmath85 percent for @xmath86 and @xmath87 percent for @xmath88 ) , justifying `` a posteriori '' our choice .",
    "let us now compare the results obtained by using only the decimation strategy to the ones where we also integrated the patching procedure , i.e.  the left and right part of fig .",
    "[ fig : nb_trials ] respectively . for this connectivity distribution",
    "the difference in the success probability ( the fraction of solved graphs for the threshold of 1000 repetitions ) is not drastic .",
    "however , the introduction of the patching does reduce the median number of repetitions before finding a hamiltonian cycle roughly by a factor three , as can be seen from the shift of the distributions from one panel to the other .",
    "indeed , the use of the intermediate local rewiring step can only enhance the probability of success of a decimation procedure .",
    "the dependence of these results on the connectivity distribution is illustrated in fig .",
    "[ fig : nb_trials_varyq ] .",
    "two points are worth signaling for the densest graphs .",
    "the success probability ( for a maximum repetition of 1000 ) is largely enhanced by the local rewiring procedure ( as was already mentioned in the discussion of table [ tab : prob_cc_hc ] ) . also , its deterioration by reducing the repetition threshold is more important than for the graphs of connectivity distribution @xmath79 . indeed the plateau in the right panel of fig .",
    "[ fig : nb_trials_varyq ] is less flat , meaning that in this case augmenting the threshold should still improve slightly the success probability .",
    "it is not easy to assert how the efficiency of the method evolves with the size of the graphs .",
    "the median of the distributions of the number of needed repetitions ( see for instance fig .  [",
    "fig : nb_trials ] ) can be fitted , on the interval of @xmath1 we studied , by a power of @xmath1 with an exponent smaller than one ( different for the various connectivity distributions studied ) .",
    "this leads to a rough `` less than cubic '' estimation for the computational cost of the ( repeated ) decimation strategy .",
    "for concreteness we mention that for a typical random graph of size @xmath86 and degree distribution @xmath79 our implementation takes about @xmath89 minutes to locate a hamiltonian cycle by using the decimation strategy , which narrows down to a mere @xmath90 minutes when local rewiring is included ( here and in the following the execution times are given for a computer with a @xmath91 ghz intel pentium m processor and @xmath92gbyte of ram ) .",
    "the second approach we describe in this section follows an idea largely used and studied in statistical mechanics and computer science .",
    "if one wants to sample from a given probability measure @xmath93 $ ] , one can construct a markov chain which admits @xmath93 $ ] as a unique stationary distribution ( for instance by imposing detailed balance conditions on the transition probabilities ) .",
    "several issues have to be addressed for this simple idea to be turned into a practical algorithm .",
    "one is the problem of ergodicity : the allowed transition rates must prevent the chain from being stuck in some parts of the configuration space apart from the interesting one which bears the dominant contribution to the stationary measure .",
    "a second problem is the convergence time of the chain , which should be small for the stationary measure to be reached in a reasonable time .",
    "a large amount of research in theoretical computer science has been devoted to this question , with a formal definition of the mixing time of the chain and various methods for bounding it  @xcite ; many results have also been obtained from the side of statistical mechanics  @xcite . finally a compromise must be found between the simplicity of the allowed moves in configuration space and their efficiency to explore it .",
    "most algorithms based on this idea are local , i.e.  the current configuration of the chain is modified in a single variable ( or in a finite number of variables ) , with rates depending only on the status of nearby other variables . as a notable exception",
    "we mention the cluster algorithms  @xcite , which are however restricted to particular cases .",
    "it is also important to quote improvements to the standard monte carlo approach like tempering and parallel tempering  @xcite that allow numerical simulations of systems with a complex phase space ( with and without quenched disorder ) .",
    "the authors of  @xcite have presented a monte carlo ( mc ) simulation method in the context of cycles in graphs .",
    "the approach presented here is however different in the goal ( we concentrate on the finding instead of the counting problem ) , and in the means",
    ". we shall use simple moves and consider a stochastic process in the space of subgraphs where each transition consists of the addition or the removal of a single edge . as the initial and final configurations in such",
    "a step can never be both unions of vertex disjoint cycles , we have to relax the probability measure used before ( cf .",
    "( [ eq : prob ] ) ) .",
    "we introduce instead : @xmath45 = \\frac{1}{z } u^{\\sum_l s_l }",
    "\\ \\eta^{n_{\\us } } \\",
    "\\prod_{i } \\widetilde{w}_i(\\us_i)\\ ; ,   \\label{eq : relaxed_prob}\\ ] ] where @xmath94 is the number of disjoint components in the configuration @xmath95 , @xmath96 is an external parameter , and the vertex weight @xmath97 now allows for open paths , @xmath98 this probability law depends on 3 parameters : @xmath49 , @xmath32 and @xmath99 .",
    "a valid configuration is characterized by its three conjugate observables , i.e.  the total length @xmath100 of the subgraph @xmath95 , the total number of vertices with exactly one occupied neighboring edge @xmath101 and the number @xmath94 of disjoint components of @xmath95 , respectively .",
    "( [ eq : prob ] ) is a special case of eq .",
    "( [ eq : relaxed_prob ] ) with @xmath102 and @xmath103 .",
    "when @xmath104 , @xmath105 and @xmath106 , the law ( [ eq : relaxed_prob ] ) concentrates on the longest single cycles of the graph , rather than the longest union of cycles .",
    "we now construct a mc algorithm that admits eq .",
    "( [ eq : relaxed_prob ] ) , for finite values of @xmath49 , @xmath32 and @xmath99 , as a stationary measure .",
    "more precisely , a monte carlo sweep consists of @xmath7 steps , where in each step an edge index @xmath23 is drawn at random among the @xmath7 possible ones . denoting @xmath95 the current configuration , a possible transition to the configuration @xmath107 in which the status of the edge variable @xmath39 is reversed ( from present to absent or vice versa )",
    "is proposed and accepted with probability @xmath108 $ ] .",
    "we impose the detailed balance condition on these transition probabilities , @xmath109{\\rm prob}[\\us ] = w(\\us ' \\to \\us){\\rm prob}[\\us ' ] \\ .",
    "\\label{eq : detailed_balance}\\ ] ] the fact that the vertex weight @xmath110 strictly allows only three different vertex neighborhoods reduces the number of possible transitions drastically .",
    "we illustrate the nine possible edge situations , also referred to as edge states , in fig .",
    "[ fig : edgestate ] , along with the only non - zero transition rates . as in every single spin flip markov chain",
    ", there is still some freedom in the choice of the transition probabilities : the detailed balance condition only constrains the ratio of the transition probabilities between two mutually accessible configurations .",
    "as we aim at finding configurations of large lengths , we set the acceptance probability to one for allowed transitions increasing the number of present edges , which automatically fixes the transition probability of the reversed move ( see fig .",
    "[ fig : edgestate ] ) .",
    "this choice is of course possible only for values of the parameters @xmath49 , @xmath32 and @xmath99 such that these probabilities are smaller than one .",
    "@xmath111 @xmath112 @xmath113 @xmath114 @xmath115 @xmath116 @xmath117 @xmath118    it can be more intuitive to envision the probability measure  ( [ eq : relaxed_prob ] ) as proportional to @xmath119 $ ] , where the `` energy '' @xmath6 is infinite for forbidden configurations , and otherwise equal to @xmath120 in the relevant situation here , @xmath121 and @xmath122 , a hamiltonian cycle of a graph , provided it exists , corresponds to a ground state of this energy function ( of zero energy with the normalizations we chose ) .    a typical approach for finding low energy configurations in a complex system is to use a simulated annealing  @xcite version of an mc algorithm ( or an implementation of parallel tempering  @xcite ) . starting from a random configuration ,",
    "one slowly reduces the value of the parameter conjugate to the energy function ( typically called the temperature ) in order to obtain a state of minimal energy . in our specific case",
    "we have a very complex form of the energy function  ( [ eq : cost_fction ] ) , and setting up an effective scheduling for the three relevant external parameters would not be straightforward .",
    "we choose instead to start the mc algorithm with the initially empty configuration and run it at fixed parameter values .",
    "long ( possibly hamiltonian ) cycles thus appear as fluctuations around the equilibrium state which is determined by the chosen set of parameters values .",
    "the rejection rate of the stochastic process we have defined is very high : we typically get average acceptance rates of the order of @xmath123 . because of that the implementation of a rejection free version of the algorithm , inspired by the well - known @xmath1-fold algorithm  @xcite , is of very substantial help . at each time step",
    "we maintain a list of all possible moves along with their acceptance probability .",
    "now there is no rejection but the clock is stochastic .",
    "the technical details about the necessary bookkeeping are presented in appendix  [ appendix_nfold ] .",
    "the combination of the a priori simplistic approach of working at a fixed value of the external parameters and the improvement due to the rejection free implementation is quite efficient in practice , as will become clear in the next section .      the stationary distribution ( cf .",
    "[ eq : relaxed_prob ] ) reached at long times by the above described random walk has a positive probability on the set of the longest cycles of the graph under study .",
    "if the graph is hamiltonian , at some point the markov chain will come across one of the hamiltonian cycles , providing a positive answer to the existence problem and solving at the same time the finding one .",
    "how fast such a hamiltonian configuration is encountered depends on the values of the parameters defining the transition probabilities .",
    "we find that in the regime of sizes and connectivity distributions we studied , the choice @xmath124 , @xmath125 and @xmath126 led to surprisingly good results .    indeed , running the monte carlo algorithm ( in its rejection free implementation ) on the same set of graphs that was studied in the previous section  , we restricted the sample of graphs to those on which the decimation strategy had proved unsuccessful . ]",
    ", we find a hamiltonian cycle in all of them in a reasonable time frame , including those for which the decimation strategy was not able to prove their hamiltonianicity .",
    "it is however expected that the external parameters should be tuned with the size of the graphs .",
    "we plot in fig .",
    "[ fig : mediannbmoves_nfold ] the ( median ) number of moves performed before the discovery of a hamiltonian circuit for graphs drawn from the three connectivity distribution ensembles of various sizes .",
    "this grows exponentially with the sizes of the graphs , consistent with the picture that hamiltonian cycles are found as a fluctuation of the observables @xmath0 , @xmath94 and @xmath127 from their typical values .    for comparison with the decimation strategy ,",
    "we mention it takes about @xmath128 minutes to find a hamiltonian cycle using the mc algorithm with reasonably optimized parameter values for the same graph of size @xmath86 and degree distribution @xmath79 of the previous section . of course",
    ", this rather good result does not include the time it takes to find these optimized values for the three parameters @xmath49 , @xmath32 and @xmath99 .",
    "we have introduced two distinct methods to locate long cycles in graphs and tested them on random graphs of minimal degree 3 .",
    "for all of the many instances we investigated , at least one of the two methods was able to construct a hamiltonian cycle .",
    "after the non - rigorous statistical mechanics study of  @xcite , this constitutes another constructive confirmation of the conjecture put forward in  @xcite , according to which these graphs are , with high probability , hamiltonian .",
    "the two algorithms presented in this paper are of a very different nature , it is thus difficult to assert their relative efficiency .",
    "the belief inspired decimation procedure of sec .",
    "[ sec_decimation ] has the advantage of versatility : there are few parameters and their influence is not crucial .",
    "moreover its computational cost on this family of sparse random graphs seems to grow polynomially with the number of vertices .",
    "its caveat is that it does not always construct a hamiltonian cycle ( even if constructing a cycle of extensive length can already be seen as a positive result ) of the random graphs on which we tested it .",
    "this motivated the development of the monte carlo approach of sec .",
    "[ sec_mc ] , which turned out to be successful on every investigated graph .",
    "this method relies on a fortunate trade - off between the simplicity of the underlying idea and the efficiency of the elaborate ( rejection free ) implementation this simplicity allows . at variance with the decimation procedure",
    ", this method is highly sensitive to its parameters , that have to be carefully determined by trial and error .",
    "we see as a possible continuation of this work a more systematic investigation of the monte carlo method , in particular on the automatic adjustment of the optimal parameters with the size of the graphs and the connectivity distribution . in this respect",
    "tempering and parallel tempering  @xcite could constitute useful approaches to this issue .    another possible direction for future",
    "work would be to apply these algorithms to real - world networks  @xcite . in this context",
    "an interesting issue would be the study of intermediate length circuits , i.e.  those which are too long to be found by exhaustive enumeration , yet much shorter than the total size of the graphs ( this intermediate scale seems the most relevant to discuss for example routing in internet networks ) .",
    "the two methods presented here can be easily adapted to tackle this problem .",
    "finally , we mention that the largest graph on which we found a hamiltonian cycle in a reasonable cpu time ( 30 minutes , by using the decimation strategy combined with the local rewiring ) was a random mixture graph of size @xmath129 and degree distribution @xmath79 .",
    "this work was supported by evergrow , integrated project no .",
    "1935 in the complex systems initiative of the future and emerging technologies directorate of the ist priority , eu sixth framework .",
    "here we describe the `` patching '' procedure we apply to cycle covers made of several vertex disjoint cycles obtained at the end of a decimation procedure .",
    "it aims at uniting these distinct cycles into a single hamiltonian one .",
    "as mentioned in section  [ sec : success ] , the cycle covers we find are typically made of a long ( extensive ) cycle , and a few small ones .",
    "this suggests that in order to unite them we should look for some simple displacement of the edges around the small cycles in order to connect them among themselves and with the longest one .",
    "the patching procedure we adopt consists in removing two or more edges belonging to different cycles of the considered cycle cover . at the same time",
    ", we introduce an equal amount of edges which were not present in the original cycle cover subgraph ( but are part of the graph ) , which close the gaps we created in the vertex disjoint cycles and unite them into one cycle . for example , given the cycle cover presented on the left of fig .  [",
    "fig : lm ] we could transform it into the hamiltonian cycle presented to its right by changing the edge variables of the edges @xmath130 and @xmath131 to their complementary value .",
    "we will refer to this process as _",
    "local rewiring_.    the problem now is to determine a strategy for finding this appropriate set of edges which allows us to change a cycle cover into a hamiltonian cycle after having performed this local reconnection .",
    "we explain our rules on the example drawn in fig .",
    "[ fig : lm ] .",
    "we start from some arbitrary vertex belonging to the smallest cycle of the cycle cover , say  @xmath132 .",
    "if vertex @xmath132 has no neighboring edge of which the other ending vertex lies on a different cycle of the cycle cover we are considering , we move to the next vertex on the cycle we started from ( e.g.  @xmath133 ) . in case",
    "however it does ( as is the case in fig .",
    "[ fig : lm ] due to the presence of edge @xmath134 ) , we check whether the same holds for one of the neighboring edges ( @xmath135 or @xmath90 ) of the vertex on the new cycle ( @xmath136 ) .",
    "if this edge leads to the original cycle we started from ( which is clearly not the case for edge @xmath137 , but would be for @xmath138 or @xmath139 if they were present ) , and if it ends in a neighboring vertex of the original vertex we started from ( @xmath132 ) , we have found a valid update : it consists in changing the values of all edge variables included in the path going from the first to this last vertex .",
    "for example , if the edge @xmath138 were part of the graph we would have found a subset of edges ( i.e.  @xmath140 and @xmath131 ) for which , if we set their corresponding edge variables to their complementary value , we would have united two of the three cycles . in such a case ,",
    "i.e.  when after some local rewiring we have reduced the number of cycles in the cycle cover , but not yet to just one , we go to the next vertex on the now extended cycle we started from ( which would then be vertex @xmath135 ) , and follow the same rules in order to unite it to the still remaining vertex - disjoint cycles .",
    "this is not the case in the figure : edge @xmath141 brings us yet to another cycle and again we look for a way to reach a different cycle through the present , neighboring edges of this new vertex ( @xmath142 ) .",
    "we continue this procedure until we get back to the original cycle , and make sure we never cross the same cycle twice , as it would not lead to a unique hamiltonian cycle .",
    "we do this operation for all the vertices belonging to the smallest cycle ( which throughout the local rewiring could grow in length ) .",
    "the number of operations we need to perform for each one of these vertices depends on its degree , which influences the number of edges to other cycles we need to consider , and on the number of cycles composing the cycle cover .",
    "as we only considered graphs with a maximum degree up to @xmath90 , the number of edges of a vertex leading to another cycle is not larger than @xmath135 . due to the fact that cycle covers",
    "typically contain one large cycle , the total number of cycles composing it is usually quite low ( it never exceeded @xmath143 for all the graphs we investigated ) .",
    "hence the local rewiring requires a number of operations negligible compared to the cost of the decimation procedure .    even though it turns out to be quite effective in practice",
    ", we must stress that the patching procedure we presented here , i.e.  the local rewiring of the edges , is rather restrictive .",
    "its only goal is to immediately try to reduce the number of cycles composing the cycle cover , not to sample the set of all cycle covers .",
    "as mentioned in section  [ sec_mc ] , an mc sweep in the mc algorithm with rejection consists in proposing @xmath7 changes among the @xmath7 edges .",
    "the probability with which a move is accepted depends on the probability law  ( [ eq : relaxed_prob ] ) according to the detailed balance condition .",
    "we have explicitly given the non - zero transition rates in fig .",
    "[ fig : edgestate ] .",
    "it turns out that the actual number of accepted moves during a sweep is only of order @xmath144 for all graphs we investigated .",
    "an @xmath1-fold @xcite , rejection free version of the monte carlo simulation helps to alleviate this problem . rather than proposing a change",
    "which is then possibly discarded , we choose a change of non - zero probability and compute the ( random ) number of rejections that would have occurred before its acceptation . to this aim",
    "we maintain lists of the edges in a given state @xmath9 ( see fig .",
    "[ fig : edgestate ] ) and the sizes @xmath145 of these lists .",
    "the escape probability from the current configuration is then simply given by @xmath146 where we denote @xmath147 ( instead of @xmath148 in fig .",
    "[ fig : edgestate ] ) the probability with which an edge in state @xmath9 changes status .",
    "each proposed ( and necessarily accepted ) move of the rejection free mc algorithm now consists in drawing an edge state @xmath8 with probability @xmath149 .",
    "the edge that will be changed is uniformly drawn from the @xmath8th list and the clock is increased by an amount @xmath150 , where @xmath151 is a uniform random variable drawn in @xmath33 $ ] .    the bookkeeping of the state of the edges is negligible in terms of space requirements .",
    "there is however an overhead in the number of operations performed at each step : the modification of edge @xmath23 changes the state of other edges .",
    "most of the time these are only the direct neighbors of @xmath23 , which are few for the low degree graphs we investigate . however , when breaking up a cycle into a path or vice versa ( @xmath152 ) , all edges belonging to the cycle have to be updated .",
    "note that even in the very unrealistic case where long cycles ( of order @xmath1 ) are broken or created at each step , this overhead is still compensated by the gain with respect to the usual mc algorithm where the acceptance rate is of order @xmath153 .",
    "figure  [ fig : soltime_nbmoves ] contains some numerical evidence that the @xmath1-fold mc is indeed faster than the rejection mc .",
    "the distribution of the time ( number of sweeps for the simple mc or stochastic clock for the rejection free version ) at which a hamiltonian cycle is found is almost the same for both algorithms , as it should be .",
    "the same conclusion holds for the number of moves actually performed before this event .",
    "however , the number of proposed moves in the rejection mc is higher by a large factor , inversely proportional to the acceptance rate",
    ".    the computational overhead due to the update of the edge states does not spoil this gain : it takes @xmath154 seconds for the rejection free implementation to find a hamiltonian cycle in an exemplary graph of size @xmath155 and degree distribution @xmath79 , while the rejection mc requires more than @xmath156 hours .",
    "e. marinari and g. parisi , europhys . lett .",
    "* 19 * , 457 ( 1992 ) ; k. hukushima , h. takayama and k. nemoto , int . j. mod",
    "c * 7 * , 337 ( 1996 ) ; m. c. tesi , e. j. janse van rensburg , e. orlandini and s. g. whittington , j. stat .",
    "phys . * 82 * , 155 ( 1996 ) ; e. marinari , _ optimized monte carlo methods _ , in _ advances in computer simulations",
    "_ edited by j. kertsz and i. kondor ( springer - verlag , berlin 1998 ) , pp ."
  ],
  "abstract_text": [
    "<S> we analyze the problem of discovering long cycles inside a graph . we propose and test two algorithms for this task . the first one is based on recent advances in statistical mechanics and relies on a message passing procedure . </S>",
    "<S> the second follows a more standard monte carlo markov chain strategy . </S>",
    "<S> special attention is devoted to hamiltonian cycles of ( non - regular ) random graphs of minimal connectivity equal to three . </S>"
  ]
}