{
  "article_text": [
    "we have extended this idea to obtain a radical further improvement : for @xmath37 and @xmath9 the mean cpu time per attempted pivot , which we denote @xmath38 , is now only @xmath39 for the range of @xmath10 studied , and we have a theoretical argument that the large @xmath10 behavior is @xmath40 .",
    "the key observation is that although there are typically @xmath36 nearest neighbor contacts for a saw of length @xmath10 , the number of contacts between two halves of a saw is typically @xmath40 , as shown via renormalization group  @xcite and monte carlo  @xcite methods .",
    "when we attempt to pivot part of a saw , it is guaranteed that each of the two sub - walks remain self - avoiding , and hence we only need to determine if the sub - walks intersect .",
    "if the resulting walk is self - avoiding , then we expect , on average , that there will be a constant number of contacts between the two sub - walks",
    ".    we will now briefly discuss the relevant data structure and algorithms ; full details can be found in @xcite .",
    "we implement a binary tree data structure ( see e.g. @xcite ) which we call a _ saw - tree_. the root node of the saw - tree contains information about the whole walk , including @xmath19 , @xmath20 , @xmath21 , and its _ minimum bounding box _ , which is the smallest rectangular prism with faces of the form @xmath41 which completely contains the walk .",
    "the two children of the root node are valid saw - trees , and contain bounding box information for the first and second halves of the saw , etc . , until the leaves of the tree store individual sites .",
    "the saw - tree is related to the r - tree  @xcite , a data structure used in the field of computational geometry , but with additional information encoding the state of the saw . thus far",
    "the saw - tree has been implemented for @xmath11 , but can be straightforwardly adapted to other lattices and the continuum , as well as other polymer models with short - range interactions . to guarantee optimal performance ,",
    "we implement the saw - tree so that it is balanced , i.e. so that the depth never exceeds some fixed constant times @xmath42 .",
    "we define the _ level _ of a node as the number of generations between a node and the leaves .    bounding boxes",
    "enable us to rapidly determine if two sub - walks intersect after a pivot attempt : if two bounding boxes do not intersect , then the sub - walks which they contain can not intersect .",
    "if a pivot attempt is successful , then it is necessary to resolve all intersections between bounding boxes of different nodes in the tree on opposite sides of the pivot site .",
    "our implementation ensures that intersection tests are typically performed between bounding boxes of nodes which are at the same level .",
    "we argue in @xcite that the nodes at fixed level in the saw - tree form a renormalized walk , and the intersections between bounding boxes correspond to contacts in the original walk .",
    "this implies that at each level there are @xmath40 intersections , and as the tree has @xmath39 levels this leads to the conclusion that a successful pivot takes time @xmath39 .",
    "successful pivots occur with probability @xmath43 , so overall mean time spent on successful pivots is @xmath44 .",
    "when a pivot attempt is unsuccessful , with high probability the first intersection occurs near the pivot site .",
    "thus only a small fraction of the saw - tree needs to be traversed to find the intersection , and we argue in @xcite that this takes mean time @xmath40 .",
    "unsuccessful pivots occur with probability @xmath40 , and so the overall behavior is @xmath45 . in fig .",
    "[ fig : cputimes ] we show @xmath38 for @xmath37 and @xmath9 from a separate data run , with maximum length @xmath46 . in both cases",
    "it is apparent there is a crossover due to the shorter latency of cache versus main memory .",
    "in @xcite we argue that o(1 ) behavior may be reached only for very large @xmath10 , which makes interpretation of fig .",
    "[ fig : cputimes ] difficult . for @xmath37",
    "some curvature is visible , and the trend appears consistent with @xmath38 approaching a constant for sufficiently large @xmath10 . the exponent @xmath34 is smaller for @xmath9 ( @xmath47 ) compared with @xmath37 ( @xmath48 ) ; hence , the approach to a constant is far slower , and in fact almost no curvature is visible for @xmath9 .",
    "we believe the numerical evidence provides a strong case that @xmath38 is at most @xmath39 , and is consistent with @xmath49 ; see @xcite for more details .",
    "@xmath38 is shown for the various implementations in table [ tab : performance ] . for saws of length @xmath50 on the cubic lattice ,",
    "the performance gain for our implementation is approximately 200 when compared with kennedy s , and over a thousand when compared with that of madras and sokal  .",
    "the dramatic performance gain from the new implementation not only makes it possible to obtain large samples of walks with millions of steps , it also makes the regime of very long walks , of up to @xmath51 steps , accessible to computer experiments .",
    ".@xmath38 , mean time per attempted pivot for @xmath10-step saws . [ cols=\"^,^,^,^\",options=\"header \" , ]     we would like to stress that , due to the neglect of sub - leading terms , there are underlying systematic errors in our estimates which _ are not _ and _ can not be _ controlled .",
    "we have the luxury of high quality data from long walks , and have attempted to be conservative with our claimed errors , but acknowledge there is a risk that the ( subjective ) confidence intervals may not be sufficiently large .",
    "in summary , an efficient version of the pivot algorithm for saws has been implemented and used to calculate @xmath1 ; the algorithms developed promise to be widely useful in the monte carlo simulation of saws and related models of polymers .",
    "i thank i.  g.  enting , a.  j.  guttmann , g.  slade , a.  sokal , and an anonymous referee for useful comments on the manuscript .",
    "computations were performed using the resources of vpac . financial support from the australian research council is gratefully acknowledged .",
    "gregory  f. lawler , oded schramm , and wendelin werner . on the scaling limit of planar",
    "self - avoiding walk . in _ fractal geometry and applications : a jubilee of benoit mandelbrot , part 2 .",
    "pure math .",
    "_ , volume  72 , pages 339364 . am .",
    "soc . , providence , 2004 .",
    "see supplementary material at http://link.aps.org/supplemental/10.1103/physrevlett.104.055702 for additional graphs and raw data .",
    "free download from http://ftp.aip.org / epaps / phys_rev_lett / e - prltao-104 - 055702/."
  ],
  "abstract_text": [
    "<S> we introduce a fast implementation of the pivot algorithm for self - avoiding walks , which we use to obtain large samples of walks on the cubic lattice of up to @xmath0 steps . </S>",
    "<S> consequently the critical exponent @xmath1 for three - dimensional self - avoiding walks is determined to great accuracy ; the final estimate is @xmath2 . </S>",
    "<S> the method can be adapted to other models of polymers with short - range interactions , on the lattice or in the continuum .    </S>",
    "<S> the self - avoiding walk ( saw ) model is an important model in statistical physics  @xcite . </S>",
    "<S> it models the excluded - volume effect observed in real polymers , exactly capturing universal features such as critical exponents . </S>",
    "<S> it is also the @xmath3 limit of the @xmath4-vector model , which includes the ising model ( @xmath5 ) as another instance , thus serving as an important model in the study of critical phenomena . </S>",
    "<S> exact results are known for self - avoiding walks in two dimensions  @xcite and for @xmath6 ( mean - field behavior has been proved for @xmath7  @xcite ) , but not for the most physically interesting case of @xmath8 .    </S>",
    "<S> we have efficiently implemented the pivot algorithm via a data structure we call the saw - tree , which allows rapid monte carlo simulation of saws of millions of steps . </S>",
    "<S> we discuss this implementation in general terms here , and then use this implementation to accurately calculate the critical exponent @xmath1 for @xmath9 . </S>",
    "<S> more details about the implementation can be found in a companion article  @xcite . </S>",
    "<S> this new algorithm can also be adapted to other models of polymers with short - range interactions , on the lattice and in the continuum , and hence promises to be widely useful .    </S>",
    "<S> an @xmath10-step saw on @xmath11 is a mapping @xmath12 with @xmath13 for each @xmath14 ( @xmath15 denotes the euclidean norm of @xmath16 ) , and with @xmath17 for all @xmath18 . </S>",
    "<S> we generate three - dimensional saws via the pivot algorithm , and calculate various observables which characterize the size of the saws : the squared end - to - end distance @xmath19 , the squared radius of gyration @xmath20 , and the mean - square distance of a monomer from its endpoints @xmath21 , where @xmath22.\\end{aligned}\\ ] ] we seek to calculate the mean values of these observables over all saws of @xmath10 steps , where each saw is given equal weight . </S>",
    "<S> their asymptotic forms are expected to be described by @xmath23 + \\mathrm{af } , \\label{eq : asymptotic}\\end{aligned}\\ ] ] with @xmath24 , and where additional terms of the form @xmath25 ( @xmath26 ) are not shown . </S>",
    "<S> in addition , @xmath27 indicates terms arising from the anti - ferromagnetic singularity , which occurs in models on loose - packed lattices such as @xmath11 ; these terms are negligible compared with terms included in fits . </S>",
    "<S> the exponents @xmath1 , @xmath28 , and @xmath29 are universal , i.e. they are dependent only on the dimensionality of the lattice and the universality class of the model , while the amplitudes @xmath30 are observable dependent </S>",
    "<S> . however , amplitude ratios , such as @xmath31 and @xmath32 , are universal quantities .    </S>",
    "<S> the pivot algorithm is a powerful approach to the study of self - avoiding walks , invented by lal  @xcite and later elucidated and popularized by madras and sokal  @xcite . from an initial saw of length @xmath10 , such as a straight rod , new @xmath10-step walks are successively generated by choosing a site of the walk at random , and attempting to apply a lattice symmetry operation , or pivot , to one of the parts of the walk ; if the resulting walk is self - avoiding the move is accepted , otherwise the move is rejected and the original walk is retained . </S>",
    "<S> the group of lattice symmetries for @xmath9 has 48 elements , and we use all of them except the identity as potential pivot operations ; other choices are possible . </S>",
    "<S> thus a markov chain is formed in the ensemble of saws of fixed length ; this chain satisfies detailed balance and is ergodic , ensuring that saws are sampled uniformly at random . </S>",
    "<S> furthermore , as demonstrated by madras and sokal  @xcite through strong heuristic arguments and numerical experiments , the markov chain has a short integrated autocorrelation time for global observables , thus making the pivot algorithm extremely efficient in comparison to markov chains utilizing local moves . </S>",
    "<S> see @xcite for detailed discussion .    the implementation of madras and sokal utilized a hash table to record the location of each site of the walk . </S>",
    "<S> they showed that the pivot algorithm has integrated autocorrelation time @xmath33 , with @xmath34 dimension - dependent but close to zero ( @xmath35 ) , and argued convincingly that the cpu time per successful pivot is @xmath36 for their implementation .    </S>",
    "<S> madras and sokal argued that @xmath36 is best possible because it takes time of order @xmath10 to merely write down an @xmath10-step saw . </S>",
    "<S> however , kennedy  @xcite recognized that it is _ not _ necessary to write down the saw for each successful pivot , and from clever use of geometric constraints developed an algorithm that broke the @xmath36 barrier . </S>",
    "<S> the cpu time for this implementation grows as a dimension - dependent fractional power of @xmath10 ( see table  [ tab : performance ] ) . </S>"
  ]
}