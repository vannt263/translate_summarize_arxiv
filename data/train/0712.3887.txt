{
  "article_text": [
    "we say a unitary operator acting on a set of qubits has been compiled if it has been expressed as a seo ( sequence of elementary operations , like cnots and single - qubit operations ) .",
    "seo s are often represented as quantum circuits .",
    "there exist software ( quantum compilers ) like qubiter@xcite for compiling arbitrary unitary operators ( operators that have no a priori known structure ) .",
    "this paper introduces two special purpose quantum compilers , quantree and quanlin .",
    "they are special purpose in the sense that they can only compile unitary operators that have a very definite , special structure .",
    "quantree v1.0 and quanlin v1.1 are two java applications , available@xcite for free .",
    "( source code included in the distribution . )",
    "each application compiles a different kind of input quantum evolution operator .",
    "the applications output a quantum circuit that is approximately equal to the input evolution operator .",
    "quantree compiles an input evolution operator whose hamiltonian is proportional to the incidence matrix of a balanced , binary tree graph .",
    "quanlin compiles an input evolution operator whose hamiltonian is proportional to the incidence matrix of a line ( open string ) graph .",
    "both applications also output an error , defined as the distance in the frobenius norm between the input evolution operator and the output quantum circuit .",
    "recently , farhi - goldstone - gutmann ( fgg ) wrote a paper@xcite that proposes a quantum algorithm for evaluating nand formulas via a quantum walk over a tree graph connected to a line (  runway \" ) graph .",
    "their paper has inspired a flurry of papers expanding on their ideas . among these papers",
    "is one@xcite written by me , which provides all the theoretical underpinnings of quantree and quanlin",
    ". please refer to ref.@xcite and the source code of quantree and quanlin if you have any technical questions that are no addressed here . to get",
    "a quantum circuit for the fgg algorithm requires first finding a quantum circuit for the evolution operators of a tree and line graph , which is what quantree and quanlin do .",
    "a future paper will combine quantree and quanlin software to give a quantum circuit for the full fgg algorithm .",
    "the standard definition of the evolution operator in quantum mechanics is @xmath0 , where @xmath1 is time and @xmath2 is a hamiltonian . throughout this paper",
    ", we will set @xmath3",
    "so @xmath4 .",
    "if @xmath2 is proportional to a coupling constant @xmath5 , reference to time can be restored easily by replacing the symbol @xmath5 by @xmath6 , and the symbol @xmath2 by @xmath7 .",
    "a binary tree with @xmath8 levels has @xmath9 nodes ( a.k.a . as states ) . to reach @xmath10 states ,",
    "we add an extra  dead \" or",
    " dud \" node , labelled with the letter  @xmath11 \" .",
    "this @xmath11 node is not connected to any other node in the graph .",
    "if we include this dud node , then the number of leaves @xmath12 is exactly half the number of nodes : @xmath13 .",
    "we will often use @xmath14 for the number of bits and @xmath15 for the number of states .",
    "therefore , @xmath16 .",
    "for example , fig.[fig - tree - graph ] shows a binary - tree graph with @xmath17 and @xmath18 .",
    "it has @xmath10=8 nodes , labelled @xmath19 , half of which ( @xmath20 ) are leaves .",
    "the hamiltonian for transitions along the edges of the graph fig.[fig - tree - graph ] is :    h_tree = g    c|c|c|c|c|c|c|c|c| & & & & & & & & + & & & & & & & & + & & & 1&1 & & & & + & & 1 & & & 1&1 & & + & & 1 & & & & & 1&1 + & & & 1 & & & & & + & & & 1 & & & & & + & & & & 1 & & & & + & & & & 1 & & & & +    , [ eq - h - tr ] where @xmath5 is a real number that we will call the * coupling constant*. in eq.([eq - h - tr ] ) , empty matrix entries represent zero .    for @xmath21 qubits ( i.e. , @xmath22 states ) , the * input evolution operator * for quantree is @xmath23 , where @xmath24 is given by eq.([eq - h - tr ] ) .",
    "it is easy to generalize fig.[fig - tree - graph ] and eq.([eq - h - tr ] ) to arbitrary @xmath14 .",
    "quantree can compile @xmath25 for @xmath26 .    for @xmath27 ,",
    "if @xmath28 , we say @xmath29 * approximates ( or is an approximant ) of order * @xmath30 for @xmath31 .    given an approximant @xmath32 of @xmath31 , and some @xmath33 , one can approximate @xmath31 by @xmath34 .",
    "we will refer to this as trotter s trick , and to @xmath35 as the * number of trots*.    for @xmath36 , quantree approximates @xmath25 with an approximant of order 3 that is derived in ref.@xcite .",
    "thus , for @xmath36 , the error is @xmath37 . for @xmath38 ,",
    "the error is @xmath39 .",
    "fig.[fig - qtree - main ] shows the * control panel * for quantree .",
    "this is the main and only window of the application .",
    "this window is open if and only if the application is running",
    ".        the control panel allows you to enter the following inputs :    file prefix : : :    prefix to the 3 output files that are written when you press the    * write files * button .",
    "for example , if you insert test in this text    field , the following 3 files will be written :    +    * test_qtree_log.txt ( see fig.[fig - qtree - log ] )    * test_qtree_eng.txt ( see fig.[fig - qtree - eng ] )    * test_qtree_pic.txt ( see fig.[fig - qtree - pic ] ) number of qubits : : :    the parameter @xmath40 defined above .",
    "coupling constant : : :    the parameter @xmath41 defined above .",
    "number of trots : : :    the parameter @xmath42 defined above .    the control panel displays the following outputs :    number of elementary operations : : :    the number of elementary operations in the output quantum circuit . if    there are no loops , this is the number of lines in the english file    ( see sec .",
    "[ sec - eng - file ] ) , which equals the number of lines in the    picture file ( see sec . [ sec - pic - file ] ) .",
    "when there are loops , the     loop k reps:@xmath35 \" and  next k \" lines are not counted ,    whereas the lines between  loop k reps:@xmath35 \" and  next k \"    are counted @xmath35 times .",
    "error : : :    the distance in the frobenius norm between the input evolution    operator and the output quantum circuit ( i.e. , the seo given in the    english file ) .",
    "for a nice review of matrix norms , see ref.@xcite . for    any matrix @xmath43 ,",
    "its frobenius norm is    defined as @xmath44 .",
    "another common matrix norm is the 2-norm .",
    "the 2-norm    @xmath45 of @xmath46 equals the largest singular    value of @xmath46 .",
    "the frobenius and 2-norm of @xmath46    are related by@xcite : @xmath47 . since the approximant used by quantree is of order 3 , if    @xmath48 denotes the error , then    @xmath49 , for some    @xmath50 and @xmath51 .",
    "thus ,    +    4 .",
    "[ eq - error - order ] for example , with @xmath52 and    @xmath53 , quantree gives    @xmath54 and    @xmath55 , which gives    @xmath56 .",
    "message : : :    a message appears in this text field if you press * write files * with a    bad input . the message tries to explain the mistake in the input .",
    "figs.[fig - qtree - log ] , [ fig - qtree - eng ] , [ fig - qtree - pic ] , were all generated in a single run of quantree ( by pressing the * write files * button just once ) .",
    "they are examples of what we call the * log file , english file , and picture file * , respectively , of quantree .",
    "next we explain the contents of each of these output files .",
    "fig.[fig - qtree - log ] is an example a log file .",
    "the log file records all the information found in the control panel .",
    "fig.[fig - qtree - eng ] is an example of an english file .",
    "the english file completely specifies the output seo .",
    "it does so  in english \" , thus its name .",
    "each line represents one elementary operation , and time increases as we move downwards .",
    "in general , an english file obeys the following rules :    * time grows as we move down the file .",
    "* each row corresponds to one elementary operation .",
    "each row starts with 4 letters that indicate the type of elementary operation . * for a one - bit operation acting on a ",
    "target bit \" @xmath57 , the target bit @xmath57 is given after the word at .",
    "* if the one - bit operation is controlled , then the controls are indicated after the word if .",
    "t and f stand for true and false , respectively .",
    "@xmath57 t stands for a control @xmath58 at bit @xmath57 .",
    "@xmath57f stands for a control @xmath59 at bit @xmath57 . *",
    " loop k reps:@xmath35 \" and  next k \" mark the beginning and end of @xmath35 trotter iterations .",
    "k labels the loop .",
    "k also equals the line - count number ( first line is 0 ) of the line ",
    "loop k reps:@xmath35 \" in the english file . *",
    "swap @xmath57 @xmath60 stands for the swap(exchange ) operator @xmath61 that swaps bits @xmath57 and @xmath60 .",
    "* phas stands for a controlled one - bit gate , where the one - bit gate consists of @xmath62 times an angle (  phase \" ) .",
    "* p0ph stands for a controlled one - bit gate , where the one - bit gate consists of @xmath63 times an angle (  phase \" ) .",
    "p1ph stands for a controlled one - bit gate , where the one - bit gate consists of @xmath64 times an angle (  phase \" ) .",
    "* sigx , sigy , sigz , had2 stand for the pauli matrices @xmath65 and the one - bit hadamard matrix @xmath2 .",
    "* rotx , roty , rotz , rotn stand for rotations with rotation axes in the directions : @xmath66 , @xmath67 , @xmath68 , and an arbitrary direction @xmath69 , respectively .    here is a list of examples showing how to translate the mathematical notation used in ref.@xcite into the english file language :    [ cols=\"<,<\",options=\"header \" , ]      brief summary of the steps taken by quantree every time you press the * write files * button :    1 .",
    "[ step - eng ] generate the english and picture files according to the rules of ref.@xcite .",
    "2 .   generate @xmath2 .",
    "calculate the eigenvalues and eigenvectors of @xmath2 . use this eigensystem to calculate @xmath4 .",
    "3 .   read the english file that was written in step [ step - eng ] .",
    "multiply out the seo given by the english file to obtain a unitary matrix @xmath70 .",
    "calculate the error @xmath71 .",
    "4 .   generate the log file .",
    "let @xmath14 be the number of bits and @xmath72 the number of states .",
    "fig.[fig - line - graph ] shows the 8 possible states for 3 bits .",
    "the states read from left to right are in increasing  decimal ordering \" .",
    "these 8 states can also be ordered in  gray code ordering \" .",
    "a sequence of gray code is one wherein two consecutive states are labelled by a binary number and these labels differ only at one bit position . in fig.[fig - line - graph ] , states connected by an edge ( curved line ) are consecutive in a gray code ordering .            for @xmath21 qubits ( i.e. , @xmath22 states ) ,",
    "the * input evolution operator * for quanlin is @xmath73 , where @xmath74 is given by eq.([eq - h - line ] ) .",
    "it is easy to generalize fig.[fig - line - graph ] and eq.([eq - h - line ] ) to arbitrary @xmath14 .",
    "quanlin can compile @xmath75 for @xmath26 .",
    "figs.[fig - qline - log ] , [ fig - qline - eng ] , [ fig - qline - pic ] , were all generated in a single run of quanlin ( by pressing the * write files * button just once ) .",
    "they are examples of what we call the * log file , english file , and picture file * , respectively , of quanlin .",
    "these files are analogous to their namesakes for quantree .",
    "they follow the same rules ."
  ],
  "abstract_text": [
    "<S> this paper introduces quantree v1.1 and quanlin v1.1 , two java applications available for free . </S>",
    "<S> ( source code included in the distribution . ) </S>",
    "<S> each application compiles a different type of input quantum evolution operator . </S>",
    "<S> the applications output a quantum circuit that is approximately equal to the input evolution operator . </S>",
    "<S> quantree compiles an input evolution operator whose hamiltonian is proportional to the incidence matrix of a balanced , binary tree graph . </S>",
    "<S> quanlin compiles an input evolution operator whose hamiltonian is proportional to the incidence matrix of a line ( open string ) graph . </S>",
    "<S> both applications also output an error , defined as the distance in the frobenius norm between the input evolution operator and the output quantum circuit . </S>"
  ]
}