{
  "article_text": [
    "numerical simulation of fluid - structure interaction is a computational challenge because of its strong nonlinearity , especially when large deformation is considered .",
    "based on how to couple the interaction between fluid and solid , existing numerical methods can be broadly categorized into two approaches : partitioned / segregated methods and monolithic / fully - coupled methods .",
    "similarly , based on how to handle the mesh , they can also be broadly categorized into two further approaches : fitted mesh / conforming methods and unfitted / non - conforming mesh methods @xcite .",
    "a fitted mesh means that the fluid and solid meshes match each other at the interface , and the nodes on the interface are shared by both the fluid and the solid , which leads to the fact that each interface node has both a fluid velocity and a solid velocity ( or displacement ) defined on it .",
    "it is apparent that the two velocities on each interface node should be consistent .",
    "there are typically two methods to handle this : partitioned / segregated methods @xcite and monolithic / fully - coupled methods @xcite .",
    "the former solve the fluid and solid equations sequentially and iterate until the velocities become consistent at the interface .",
    "these are more straightforward to implement but can lack robustness and may fail to converge when there is a significant energy exchange between the fluid and solid @xcite . the latter",
    "solve the fluid and solid equations simultaneously and often use a lagrange multiplier to weakly enforce the continuity of velocity on the interface @xcite .",
    "this has the advantage of achieving accurate and stable solutions , however the key computational challenge is to efficiently solve the large systems of nonlinear algebraic equations arising from the fully - coupled implicit discretization of the fluid and solid equations .",
    "fitted mesh methods can accurately model wide classes of fsi problems , however maintaining the quality of the mesh for large solid deformations usually requires a combination of arbitrary lagrangian - eulerian ( ale ) mesh movement and partial or full remeshing @xcite .",
    "these add to the computational expense and , when remeshing occurs , can lead to loss of conservation properties of the underlying discretization @xcite .",
    "unfitted mesh methods use two meshes to represent the fluid and solid separately and these do not generally conform to each other on the interface . in this case",
    ", the definition of the fluid problem may be extended to an augmented domain which includes the solid domain .",
    "similarly to the fitted case , there are also two broad approaches to treat the solid domain : partitioned methods and monolithic methods . on an unfitted mesh",
    ", there is no clear boundary for the solid problem , so it is not easy to enforce the boundary condition and solve the solid equation . a wide variety of schemes have been proposed to address this issue , including the immersed finite element method ( ifem ) @xcite and the fictitious domain method ( fdm ) @xcite .",
    "the ifem developed from the immersed boundary method first introduced by peskin @xcite , and has had great success with applications in bioscience and biomedical fields .",
    "the classical ifem does not solve solid equations at all .",
    "instead , the solid equations are arranged on the right - hand side of the fluid equations as an fsi force , and these modified fluid equations are solved on the augmented domain ( occupied by fluid and solid ) .",
    "there is also the modified ifem @xcite , which solves the solid equations explicitly and iterates until convergence .",
    "the fdm has a similar spirit to ifem in that it treats the domain occupied by solid as a fictitious / artificial fluid whose velocity / displacement is constrained to be the same as that of the solid .",
    "the fdm approach usually uses a distributed lagrange multiplier ( dlm ) to enforce the constraint @xcite whilst the ifem typically uses a pseudo body force which is evaluated from the known deformation of the solid and introduced into the fluid momentum equation .",
    "reference @xcite presents a fractional fd scheme for a rigid body interacting with the fluid , whilst @xcite introduces a fractional step scheme using dlm / fd for fluid / flexible - body interactions . in the case of monolithic methods",
    ", @xcite uses a fd / mortar approach to couple the fluid and structure , but the coupling is limited to a line ( 2d ) representing the structure .",
    "reference @xcite uses a mortar approach to solve fluid interactions with deformable and rigid bodies , and @xcite also solves a fully - coupled fsi system with hierarchical b - spline grids .",
    "there are also other monolithic methods based on unfitted meshes @xcite .",
    "it can be seen that the major methods based on unfitted meshes either avoid solving the solid equations ( ifem ) or solve them with additional variables ( two velocity fields and lagrange multiplier ) in the solid domain .",
    "however , physically , there is only one velocity field in the solid domain . in this article , we follow the one - field spirit and only solve one velocity variable in the whole / augmented domain .",
    "we shall introduce a one - field fd method which can be categorized as a monolithic approach using an unfitted mesh .    in the one - field spirit",
    ", @xcite introduces an eulerian formulation by remeshing and @xcite presents a 1d model using a one - field fd formulation but does not discuss how to compute the integrals arising from the two different domains .",
    "there are other similar eulerian formulations for fsi problems , such as the extended finite element method ( xfem ) @xcite , local modification of elements @xcite and other fully eulerian formulations @xcite that are coupled with either local adaptivity or ale methods .",
    "however these formulations are not in the spirit of one - field , usually the velocity of the fluid ( including fictitious fluid ) , the displacement of the solid and the lagrange multiplier are solved monolithically , which are three - field formulations ( four fields if the moving mesh is solved for as well ) .",
    "the main idea of the method presented here is as follows .",
    "( 1 ) one - field formulation : we first discretize the control equations in time , re - write the solid equation in the form of a fluid equation ( using the velocity as a variable rather than the displacement ) and re - write the solid constitutive equation in the updated coordinate system .",
    "( 2 ) @xmath0 projection ( isoparametric interpolation ) : we then combine the fluid and solid equations and discretize them in an augmented domain .",
    "finally the multi - physics problem is solved as a single field .",
    "the remaining sections are organized as follows . in section",
    "[ governing equations ] , the control equations and boundary conditions for fluid - structure interactions are introduced .",
    "section [ weak form ] presents the weak form of the fsi system based on the augmented fluid domain .",
    "section [ discretization in time ] introduces a splitting scheme after discretization in time .",
    "section [ linearization of the convection step ] and [ linearization of the diffusion step ] discusses how to linearize the convection step and diffusion step respectively . in section [ discretization in space ] , the overall solution algorithm is presented after discretization in space , which clarifies one of the main differences of the proposed numerical scheme . in section [ numerical experiments ] , numerical examples are described to validate the proposed method across a wide range of flows and material . some remarks and observations",
    "are discussed in section [ discussion ] and finally a brief summary is presented in section [ conclusion and future works ] .",
    "in the following context , let @xmath1 where @xmath2 and @xmath3 are functions defined in domain @xmath4 .",
    "@xmath5 and @xmath6 ( with @xmath7 in this article ) denote the fluid and solid domain repectively which are time dependent regions as shown in figure [ fig1 ] .",
    "@xmath8 is a fixed domain and @xmath9 is the moving interface between fluid and solid .",
    "all subscripts , such as @xmath10 , @xmath11 , and @xmath12 , represent spatial dimension . if they are repeated in one term ( including the bracket defined in ( 1 ) ) , it implies summation over the spatial dimension ; if they are not repeated , they take the value from 1 to @xmath13 .",
    "all superscripts are used to distinguish fluid and solid ( @xmath14 and @xmath15 respectively ) , distinguish different boundaries ( @xmath16 and @xmath17 ) or represent time step @xmath18 .",
    "for example , @xmath19 and @xmath20 denote the velocity components of fluid and solid respectively , @xmath21 and @xmath22 denote the stress tensor components of fluid and solid respectively , and @xmath23 is a solid velocity component at time @xmath24 . matrices and vectors are denoted by bold letters .",
    ", @xmath25.,width=288 ]    in our model we assume an incompressible fluid governed by the following equations in @xmath26 as shown in figure [ fig1 ] : @xmath27    @xmath28    @xmath29    we also assume an incompressible solid that is governed by the following equations in @xmath30 as shown in figure [ fig1 ] : @xmath31    @xmath32    @xmath33    in the above @xmath34 and @xmath35 are the deviatoric stress of the fluid and solid respectively , @xmath36 and @xmath37 are the density of the fluid and solid respectively , @xmath38 is the fluid viscosity , and @xmath39 is the acceleration due to gravity .",
    "note that ( [ solid1])-([solid3 ] ) describe an incompressible neo - hookean model that is based on @xcite and is suitable for large displacements . in this model",
    ", @xmath40 is the shear modulus and @xmath41 is the pressure of the solid ( @xmath42 being the fluid pressure in ( [ fluid3 ] ) ) .",
    "we denote by @xmath43 the current coordinates of the solid or fluid , and by @xmath44 the reference coordinates of the solid , whilst @xmath45 $ ] is the deformation tensor of the solid and @xmath46 represents the total derivative of time .    on the interface boundary @xmath47 : @xmath48 @xmath49 where @xmath50 denotes the component of outward pointing unit normal , see figure [ fig1 ] .",
    "dirichlet and neumann boundary conditions may be imposed for the fluid :    @xmath51    @xmath52    finally , initial conditions are typically set as : @xmath53 though they may differ from ( [ initialcd ] ) .",
    "let @xmath54 and @xmath55 .",
    "we then perform the following symbolic operations : @xmath56 for independent test functions @xmath57 and @xmath58 .",
    "integrating the stress terms by parts , using constitutive equations ( [ fluid3 ] ) and ( [ solid3 ] ) and boundary condition ( [ neummanbc ] ) , gives the following weak form for the fsi system .",
    "find @xmath59 and @xmath60 such that @xmath61 @xmath62 and @xmath63 . in the above , @xmath36 and @xmath34",
    "are extended to be defined over the whole of @xmath64 , and @xmath65 , where @xmath66 is a reference point .",
    "note that the integrals on the interface ( boundary forces ) are cancelled out using boundary condition ( [ interfacebc2 ] ) .",
    "this is not surprising because they are internal forces for the whole fsi system considered here .",
    "* remark 1 * the fluid deviatoric stress @xmath34 is generally far smaller than the solid deviatoric stress @xmath35 , so we choose to neglect the fluid deviatoric stress @xmath34 in @xmath67 in what follows . note that the classical ifem neglects the whole fluid stress @xmath21 when computing the fsi force @xcite . an equivalent way of interpreting neglecting @xmath34 in @xmath67 is to view the solid as being slightly visco - elastic , having the same viscosity as the fluid .",
    "the integrals in equation ( [ weakaugmented ] ) are carried out in two different domains as illustrated in figure [ fig1 ] .",
    "we use an eulerian mesh to represent @xmath64 and an updated lagrangian mesh to represent @xmath67 , therefore the total time derivatives in these two different domains have different expressions , i.e : @xmath68 and @xmath69    firstly , based on the above two equations ( [ derivativef ] ) and ( [ derivatives ] ) , we discretize ( [ weakaugmented ] ) in time using a backward finite difference . then omitting the superscript @xmath70 , showing the solution is at the end of the time step , for convenience , we obtain : @xmath71 note that in the above we have replaced @xmath72 by @xmath73 for notational convenience . using the splitting method of (",
    "* chapter 3 ) , equation ( [ weak2 ] ) can be expressed in the following two steps .",
    "\\(1 ) convection step : @xmath74    \\(2 ) diffusion step : @xmath75 the treatment of the above two steps is described separately in the following subsections .",
    "in this section , two methods are introduced to treat the convection equation : least - squares method and taylor - galerkin method , both of which can be used in the framework of the proposed scheme . some numerical results for comparison between these two methods",
    "are discussed subsequently in section 5 .",
    "because the overall scheme is explicit , all non - linear terms are linearized using the values from the last time step .",
    "of course , the scheme can be made implicit with the same linearized form by iterating within each time step starting from the value at the last time step .",
    "linearization of equation ( [ weakconvection ] ) gives , @xmath76 for least - squares method @xcite , we may choose the test function in the following form : @xmath77 where @xmath78 .",
    "in such a case , the weak form of ( [ weakconvection ] ) is : @xmath79 in our method a standard biquadratic finite element space is used to discretize equation ( [ lastweakofconvection ] ) directly .",
    "it is also possible to linearize equation ( [ weakconvection ] ) as : @xmath80 or @xmath81 rewriting ( [ cbsconvection2 ] ) as @xmath82 substituting ( [ cbsconvection - strong - form ] ) into equation ( [ cbsconvection1 ] ) , and applying integration by parts we obtain : @xmath83 where the boundary integral is neglected because @xmath84 is the solution of the previous diffusion step , which means no convection exists on the boundary after the diffusion step .",
    "finally the weak form of taylor - galerkin method ( * ? ? ?",
    "* chapter 2 ) can be expressed , by rearranging the last equation , as : @xmath85",
    "as mentioned above , the overall scheme is explicit , so all the derivatives are computed on the known coordinate @xmath86 ( denoted @xmath87 for convenience ) .",
    "one could also construct @xmath88 at each time step and take derivatives with respect to @xmath88 , however we do not consider such an approach in this article . according to the definition of @xmath35 in equation ( [ solid3 ] ) , @xmath89 the last equation , using a chain rule , can also be expressed as : @xmath90 and then @xmath91 can be expressed by coordinate @xmath87 as follows : @xmath92 using @xmath93 , which is the displacement at the current step , the last equation may be expressed as : @xmath94 finally , after linearization of the last equation , the weak form ( [ weakdiffusion ] ) can be expressed as : @xmath95    the spatial discretization of the above linearized weak form will be discussed in the following section , along with the overall solution algorithm .",
    "we shall use a fixed eulerian mesh for @xmath64 and an updated lagrangian mesh for @xmath73 to discretize equation ( [ lastbigequation ] ) .",
    "first , we discretize @xmath64 as @xmath96 using @xmath97 elements ( the taylor - hood element ) with the corresponding finite element spaces as @xmath98 and @xmath99 the approximated solution @xmath100 and @xmath101 can be expressed in terms of these basis functions as @xmath102    we further discretize @xmath73 as @xmath103 ( actually it is discretized once on @xmath104 and then updated from the previous mesh ) using @xmath105 elements ( bilinear triangle element ) with the corresponding finite element spaces as : @xmath106 and approximate @xmath107 as : @xmath108 where @xmath109 is the nodal coordinate of the solid mesh .",
    "notice that the above approximation defines an @xmath0 projection @xmath110 from @xmath111 to @xmath112 : @xmath113 .    substituting ( [ uh ] ) , ( [ ush ] ) and similar expressions for the test functions @xmath114 , @xmath115 and @xmath116 into equation ( [ lastbigequation ] ) gives the following matrix form : @xmath117 where @xmath118 and @xmath119    in the above , matrix @xmath120 is the isoparametric interpolation matrix derived from equation ( [ ush ] ) which can be expressed as @xmath121 all the other matrices and vectors arise from standard fem discretization : @xmath122 and @xmath123 are mass matrices from discretization of integrals in @xmath96 ( with shape function @xmath124 ) and @xmath125 ( with shape function @xmath126 ) respectively , and similarly for stiffness matrices @xmath127 and @xmath128 .",
    "@xmath129 is from discretization of integral @xmath130 in ( [ lastbigequation ] ) .",
    "the force vectors @xmath131 and @xmath132 come from discretization of integrals on the right - hand side of ( [ lastbigequation ] ) in @xmath96 and @xmath125 respectively .",
    "the specific expressions of these matrices and vectors can be found in [ expressions_of_maatrices_and_vectors ] .",
    "having derived a discrete system of equations we now describe the solution algorithm at each time step .    1 .   given the solid configuration @xmath133 and velocity field @xmath134 at time step @xmath135 .",
    "2 .   discretize the convection equation ( [ lastweakofconvection ] ) or ( [ cbs - last ] ) and solve it to get an intermediate velocity @xmath136 .",
    "3 .   compute the interpolation matrix and solve equation ( [ lastlinerequation ] ) using @xmath136 and @xmath137 as initial values to get velocity field @xmath138 .",
    "4 .   compute solid velocity @xmath139 and update the solid mesh by @xmath140 , then go to step ( 1 ) for the next time step .",
    "* remark 2 * the choice of @xmath105 element for an updated domain @xmath67 is convenient , because the form of the bilinear shape functions stays the same when updating the nodal coordinates using @xmath140 .",
    "* remark 3 * when implementing the algorithm , it is unnecessary to perform the matrix multiplication @xmath141 globally , because the fem interpolation is locally based .",
    "all the matrix operations can be computed based on the local element matrices only . alternatively ,",
    "if an iterative solver is used , it is actually unnecessary to compute @xmath141 .",
    "what an iterative step needs is to compute @xmath142 for a given vector @xmath143 , therefore one can compute @xmath144 first , then @xmath145 , and last @xmath146 .",
    "in this section , we present some numerical examples that have been selected to allow us to assess the accuracy and the versatility of our proposed numerical scheme .",
    "we demonstrate convergence in time and space , furthermore , we favorably compare results with those obtained using monolithic approaches and ifem , as well as compare against results from laboratory experiment .    in order to improve the computational efficiency ,",
    "an adaptive spatial mesh with hanging nodes is used in all the following numerical experiments .",
    "readers can reference @xcite for details of the treatment of hanging nodes .",
    "the least - squares method ( section [ least - squares method ] ) is used to treat the convection step in all tests unless stated otherwise .",
    "this numerical example is used by @xcite to validate their methods .",
    "we first use the same parameters as used in the above three publications in order to compare results and test convergence in time and space .",
    "we then use a wide range of parameters to show the robustness of our method .",
    "the computational domain and boundary conditions are illustrated in figure [ fig2 ] .",
    "the inlet flow is in the x - direction and given by @xmath147 .",
    "gravity is not considered in the first test ( i.e. @xmath148 ) , and other fluid and solid properties are presented in table [ properties and domain size for test problem with a leaflet in a channel ] .",
    ".properties and domain size for test problem [ oscillation of a flexible leaflet oriented across the flow direction ] + with a leaflet oriented across the flow direction . [ cols=\"^,^\",options=\"header \" , ]     there is also an empirical solution of a rigid ball falling in a viscous fluid @xcite , for which the terminal velocity , @xmath149 , under gravity is given by @xmath150 where @xmath37 and @xmath36 are the density of solid and fluid respectively , @xmath38 is viscosity of the fluid , @xmath151 @xmath152 is acceleration due to gravity , @xmath153 and @xmath154 is the radius of the falling ball .",
    "we choose @xmath155 @xmath156 to simulate a rigid body here , and @xmath157 @xmath156 is also applied , which gives virtually identical results .",
    "three different meshes are used : the disc boundary is represented with 28 nodes ( coarse ) , 48 nodes ( medium ) , or 80 nodes ( fine ) .",
    "the fluid mesh near the solid boundary has the same mesh size as that of the disc , and a stable time step @xmath158 is used for all three cases .",
    "a local snapshot of the vertical velocity with the adaptive mesh is shown in figure [ falling disc in a channel with gravity ] ( b ) . from the fluid velocity pattern around the disc we can observe that the disc behaves like a rigid body as expected .",
    "in addition , the evolution of the velocity of the mid - point of the disc is shown in figure [ evolution of velocity at center a falling disc ] , from which it can be seen that the numerical solution converges from below to the empirical solution .    ) , + for interpretation of the reference to color , the reader is referred to the web version.),width=384 ]",
    "in this section , some further remarks and notes concerning the proposed method are discussed .      both the least - squares method and taylor - galerkin method",
    "add artificial diffusive terms in their fomulations to stablize the numerical scheme . like all such stabilization approaches this necessarily has an influence on the accuracy , especially for large reynolds numbers . in such cases a balance is required between minimizing the artificial dissipation and maintaining a stable time step size that is acceptable . in our applications ,",
    "the reynolds number is around @xmath159 , except for two extreme test cases in section [ oscillation of a flexible leaflet oriented across the flow direction ] whose reynolds numbers are 1000 and 5000 respectively ( figure [ permutation of parameters ] ( b ) ) .",
    "even then , in these cases a minimal amount of diffusion is observed provided we use a small time step @xmath160 .",
    "alternatively , an upwind scheme or a discontinuous galerkin method could be a better choice .",
    "however , we have not yet implemented such methods on the adaptive mesh with hanging nodes .",
    "updating the solid based upon its velocity could lead to distorted elements , either in its interior or at its boundary .",
    "should this occur there are advanced mesh update techniques to improve the quality of solid mesh @xcite or discrete remeshing may be used @xcite .",
    "however all of the tests undertaken in this article have been performed based upon published benchmarks using incompressible solids and a small time step , and we have not encountered the problem of significantly distorted elements . in other applications",
    "our simple lagrangian approach may not be adequate and so ale techniques , possibly including mesh quality improvement , may also be required .      in many applications moving solids may run into boundaries ( either external or of other moving bodies ) .",
    "in this article , we have only considered standard benchmark problems for which contact does not arise .",
    "hence , through the use of a small time step and an adaptive algorithm to refine the mesh when the solids are near each other or near the boundaries , we have not needed to implement a contact test or a contact model . in the future ,",
    "we do intend to consider adding a contact model in order to further generalize our method .",
    "if @xmath161 , and negleting @xmath34 , the discretized linear equation system is guaranteed to be well - conditioned . however , this restriction is too stringent to be a necessary condition .",
    "for example , we have implemented and tested a number of cases for which @xmath162 and the solid rises in a stable manner due to buoyancy .",
    "it is well known that the pressure jumps across the interface between the fluid and solid , and that a high resolution is therefore needed near the interface in order to capture this jump . in this article",
    ", we use an adaptive mesh refinement near the interface to reduce the error caused by our continuous approximation ( @xmath97 element ) for this discontinuous pressure . an alternative or",
    "additional choice is to use @xmath163 elements ( the shape function of pressue is enriched by a constant ) in order to capture an element - based jump of pressure .",
    "we intend to test this element in the future .",
    "in this article we introduce a one - field fd method for fluid - structure interaction , which can be applied to a wide range of problems , from small deformation to very large deformation and from very soft solids through to very rigid solids .",
    "several numerical examples , which are widely used in the literature of ifem and fd methods with dlm ( dlm / fd ) , are implemented to validate the proposed method .",
    "the one - field fd method combines features from both the ifem and dlm / fd .",
    "nevertheless , it differs from each of them in the following aspects .",
    "firstly , our one - field fd method solves the solid and fluid equations together while the classical ifem does not solve the solid equations .",
    "although the implicit form of ifem can iteratively solve the solid equations , this is different from our one - field fd method which couples the fluid and solid equations monolithically via a direct matrix addition as shown in formulas ( [ matirx_a ] ) and ( [ forcevector_b ] ) .",
    "secondly , while both our one - field fd method and dlm / fd solve solid equations , the former solves for just one velocity field in the solid domain using fem interpolation , while the latter solves one velocity field and one displacement field in the solid domain using lagrange multipliers . in summary",
    "therefore we believe that the one - field fd method has the potential to offer the robustness and range of operation of dlm / fd , but at a computational cost that is much closer to that of the ifem approaches . expressed another way , we contend that our approach has all of the advantages of ifem techniques but the additional robustness usually associated with more complex monolithic solvers .",
    "in this appendix , the specific expressions for the mass matrices @xmath122 and @xmath123 , stiffness matrices @xmath127 and @xmath128 , matrix @xmath129 and the force vectors @xmath131 and @xmath132 in equations ( [ lastlinerequation ] ) , ( [ matirx_a ] ) and ( [ forcevector_b ] ) are presented .",
    "1 .   @xmath122 : @xmath171 @xmath172 2 .",
    "@xmath123 : @xmath173 @xmath174 3 .",
    "@xmath127 : @xmath175 ) @xmath176 where @xmath177 @xmath178 @xmath179 4 .",
    "@xmath128 : @xmath180 @xmath181 where @xmath182 @xmath183 can be expressed by changing the subscript @xmath184 to @xmath185 and @xmath185 to @xmath184 in the formula of @xmath186 . @xmath187 and @xmath188 .",
    "@xmath129 : @xmath189 and @xmath190 @xmath191 6 .",
    "@xmath131 : @xmath192 @xmath193 7 .",
    "@xmath132 : @xmath194 @xmath195"
  ],
  "abstract_text": [
    "<S> in this article , we present a one - field monolithic fictitious domain ( fd ) method for simulation of general fluid - structure interactions ( fsi ) . </S>",
    "<S> `` one - field '' means only one velocity field is solved in the whole domain , based upon the use of an appropriate @xmath0 projection . </S>",
    "<S> `` monolithic '' means the fluid and solid equations are solved synchronously ( rather than sequentially ) . </S>",
    "<S> we argue that the proposed method has the same generality and robustness as fd methods with distributed lagrange multiplier ( dlm ) but is significantly more computationally efficient ( because of one - field ) whilst being very straightforward to implement . </S>",
    "<S> the method is described in detail , followed by the presentation of multiple computational examples in order to validate it across a wide range of fluid and solid parameters and interactions .    </S>",
    "<S> fluid - structure interaction , finite element , fictitious domain , monolithic method , one - field fictitious domain method </S>"
  ]
}