{
  "article_text": [
    "partitioning image into superpixels can be used as a preprocessing step to complex computer vision tasks , such as segmentation @xcite , visual tracking @xcite , stereo matching @xcite , edge detection @xcite , etc .",
    "sophisticated algorithms benefit from working with superpixels , instead of just pixels , because superpixels reduce input entries and enable feature computation on more meaningful regions .    like many terminologies in computer vision",
    ", there is no rigorous mathematical definition for superpixel .",
    "the commonly accepted description of a superpixel is `` a group of connected , perceptually homogeneous pixels which does not overlap any other superpixel . '' for superpixel segmentation ,",
    "the following properties are generally desirable .",
    "accuracy*. superpixels should adhere well to object boundaries .",
    "superpixels crossing object boundaries arbitrarily may lead to bad or catastrophic result for subsequent algorithms .",
    "@xcite    prop",
    "regularity*. the shape of superpixels should be regular .",
    "superpixels with regular shape make it easier to construct a graph for subsequent algorithms",
    ". moreover , these superpixels are visually pleasant which is helpful for algorithm designers analysis . @xcite    prop",
    "* similar size*. superpixels should have a similar size .",
    "this property enables subsequent algorithms dealing with each superpixel without bias @xcite .",
    "as pixels have the same `` size '' and the term of `` superpixel '' is originated from `` pixel '' , this property is also reasonable intuitively .",
    "this is a key property to distinguish between superpixel and other over - segmented regions",
    ".    prop .",
    "* efficiency*. a superpixel algorithm should have a low complexity .",
    "extracting superpixels effectively is critical for real - time applications . @xcite .    under the constraint of prop .",
    "3 , the requirements on accuracy and regularity are to a certain extent oppositional . intuitively , if a superpixel , with a limited size , needs to adhere well to object boundaries , the superpixel has to adjust its shape to that object which may be irregular . to our best knowledge , state - of - the - art superpixel algorithms failed to find a compromise between regularity and accuracy .",
    "as four typical algorithms shown in fig .",
    "[ fig : vc5]-[fig : vc5 ] , the shape of superpixels generated by nc @xcite ( fig .",
    "[ fig : vc5 ] ) and lrw @xcite ( fig .",
    "[ fig : vc5 ] ) is more regular than that of superpixels extracted by seeds @xcite ( fig .",
    "[ fig : vc5 ] ) and ers @xcite ( fig .",
    "[ fig : vc5 ] ) nonetheless , the superpixels generated by seeds @xcite and ers @xcite adhere object boundaries better than those of nc @xcite and lrw @xcite . in this work , a gaussian mixture model ( gmm ) and an algorithm derived from the expectation - maximization ( em )",
    "@xcite are built .",
    "it is shown that the proposed method can strike a balance between regularity and accuracy .",
    "an example is displayed in fig .",
    "[ fig : vc5 ] , the compromise is that superpixels at regions with complex textures have an irregular shape to adhere object boundaries , while at homogeneous regions , the superpixels are regular .",
    "computational efficiency is a matter of both algorithmic complexity and implementation .",
    "our algorithm has a linear complexity with respect to the number of pixels .",
    "as an algorithm has to read all pixels , linear time theoretically is the best time complexity for superpixel problem .",
    "algorithms can be categorized into two major groups : parallel algorithms that are able to be implemented with parallel techniques and scale for the number of parallel processing units , and serial algorithms whose implementations are usually executed sequentially and only part of the system resources can be used on a parallel computer .",
    "modern computer architectures are parallel and applications can benefit from parallel algorithms because parallel implementations generally run faster than serial implementations for the same algorithm .",
    "the proposed algorithm is inherently parallel and our serial implementation can easily achieve speedups by adding few simple openmp directives .",
    "our method is constructed by modelling each pixel with a gaussian mixture model ; associating each superpixel to one of the gaussian densities ; and further solving the proposed model with the expectation - maximization algorithm .",
    "differing from the commonly used assumption that data points are independent and identically distributed ( i.i.d . ) in clustering applications , pixels are assumed to be independent but non - identically distributed in our model .",
    "the proposed approach was tested on the berkeley segmentation data set and benchmarks 500 ( bsds500 ) @xcite . to the best of our knowledge ,",
    "the proposed method outperforms state - of - the - art methods in accuracy and presents a competitive performance in computational efficiency .",
    "the rest of this paper is organized as follows .",
    "section [ sec : related ] presents an overview of related works on superpixel segmentation .",
    "section [ sec : method ] introduces the model , solution , algorithm , parallel potential , parameters , and complexity of the proposed method .",
    "experiments are discussed in section [ sec : exp ] . finally , the paper is concluded in section [ sec : cons ] .",
    "+   +   +",
    "the concept of superpixel was first introduced by xiaofeng ren and jitendra malik in 2003 @xcite . during the last decades , the superpixel problem has been well studied .",
    "exsiting superpixel algorithms extract superpixels either by optimizing superpixel boundaries , such as finding paths and evolving curves , or by grouping pixels , e.g. the most well - known slic @xcite .",
    "algorithms exctact superpixels not by labelling pixels directly but by marking superpixel boundaries , or by only updating the label of pixels on superpixel boundary is in this category .",
    "rohkohl et al .",
    "present a superpixel method that iteratively assigns superpixel boundaries to their most similar neighbouring superpixel @xcite .",
    "a superpixel is represented with a group of pixels that are randomly selected from that superpixel .",
    "the similarity between a pixel and a super - pixel is defined as the average similarities from the pixel to all the selected representatives .",
    "aiming to extract lattice - like superpixels , or `` superpixel lattices '' , @xcite partitions an image into superpixels by gradually adding horizontal and vertical paths in strips of a pre - computed boundary map .",
    "the paths are formed by two different methods : s - t min - cut and dynamic programming .",
    "the former finds paths by graph cuts and the latter constructs paths directly .",
    "the paths have been designed to avoid parallel paths crossing and guarantee perpendicular paths cross only once .",
    "the idea of modelling superpixel boundaries as paths ( or seam carving @xcite ) and the use of dynamic programming were borrowed by later variations or improvements @xcite .    in turbopixels",
    "@xcite , levinshtein et al .",
    "model the boundary of each superpixel as a closed curve .",
    "so , the connectivity is naturally guaranteed .",
    "based on level - set evolution , the curves gradually sweep over the unlabelled pixels to form superpixels under the constraints of two velocities .",
    "although this method can produce superpixels with homogeneous size and shape , its accuracy is relative poor .    in vcells",
    "@xcite , a superpixel is represented as a mean vector of colour of pixels in that superpixel . with the designed distance @xcite ,",
    "vcells iteratively updates superpixel boundaries to their nearest neighbouring superpixel .",
    "the iteration stops when there are no more pixels need to be updated .",
    "seeds @xcite exchanges superpixel boundaries using a hierarchical structure . at the first iteration ,",
    "the biggest blocks on superpixel boundary are updated for a better energy .",
    "the size of pixel blocks becomes smaller and smaller as the number of iterations increases .",
    "the iteration stops after the update of boundary exchanges in pixel level .",
    "improved from slic @xcite , @xcite present more complex energy . to minimize their corresponding energy , @xcite update boundary pixels instead of assigning a label for all pixels in each iteration .",
    "based on @xcite , @xcite adds the connectivity and superpixel size into their energy . for the pixel updating",
    ", @xcite uses a hierarchical structure like seeds @xcite , while @xcite exchanges labels only in pixel level .",
    "zhu et al .",
    "propose a speedup of slic @xcite by only moving unstable boundary pixels , the label of which changed in the previous iteration @xcite .    besides , based on pre - computed line segments or edge maps of the input image , @xcite align superpixel boundaries to the lines or the edges to form superpixels with very regular shape .",
    "superpixels algorithms that assign labels for all pixels in each iteration is in this category .    with an affinity matrix constructed based on boundary cue @xcite ,",
    "the algorithm developed in @xcite , which is usually abbreviated as nc @xcite , uses normalized cut @xcite to extract superpixels .",
    "this method produces very regular superpixels , while its time complexity is approximately @xmath0 @xcite , which is expensive as a preprocessing step , where @xmath1 is the number of pixels .    in quick shift ( qs ) @xcite , the pixel density is estimated on a parzen window with a gaussian kernel . a pixel is assigned to the same group with its parent which is the nearest pixel with a greater density and within a specified distance .",
    "qs does not guarantee connectivity , or in other words , pixels with the same label may not be connected .",
    "veksler et al .",
    "propose an approach that distributes a number of overlapping square patches on the input image and extracts superpixels by finding a label for each pixel from patches that cover the present pixel @xcite .",
    "the expansion algorithm in @xcite is gradually adapted to modify pixel label within local regions with a fixed size in each iteration .",
    "this method can generate superpixels with regular shape and its run - time is proportional to the number of overlapping patches @xcite .",
    "a similar solution in @xcite is to formulate the superpixel problem as a two - label problem and build an algorithm through grouping pixels into vertical and horizontal bands . by doing this , pixels in the same vertical and horizontal group form a superpixel .",
    "starting from an empty graph edge set , ers @xcite sequentially adds edges to the set until the desired number of superpixels is reached . at each adding ,",
    "ers @xcite takes the edge that results in the greatest increase of an objective function .",
    "the number of generated superpixels is exactly equal to the desired number .",
    "this method adheres object boundary well and its performance in accuracy was not surpassed until our method is proposed .",
    "slic @xcite is the most well - known superpixel algorithm due to its efficiency and simplicity . in slic @xcite",
    ", a pixel corresponds to a five dimensional vector including colour and spatial location , and @xmath2-means is employed to cluster those vectors locally , i.e. each pixel only compares with superpixels that fall into a specified spatial distance and is assigned to the nearest superpixel .",
    "many variations follow the idea of slic in order to either decrease its run - time @xcite or improve its accuracy @xcite .",
    "lsc @xcite also uses a @xmath2-means method to refine superpixels . instead of directly using the 5d vector used in slic @xcite , lsc @xcite maps them to a feature space and a weighted @xmath2-means is adopted to extract superpixels .",
    "it is the most recent algorithm that achieves equally well accuracy with ers @xcite .",
    "based on marker - based watershed transform , @xcite incorporate spatial constraints to an image gradient in order to produce superpixels with regular shape and similar size .",
    "generally , those methods run relatively faster , but adhere ground - truth boundaries badly .",
    "lrw @xcite groups pixels using an improved random walk algorithm . by using texture features to optimize an initial superpixel map",
    ", this method can produce regular superpixels in regions with complex texture .",
    "however , this method suffers from a very slow speed .",
    "although fh @xcite , mean shift @xcite and watersheds @xcite , have been refered to as `` superpixel '' alogrithms in the literature , they are not covered in this paper as the size of the regions produced by them varies enormously .",
    "this is mainly because these algorithms do not offer direct control to the size of the segmented regions .",
    "structure - sensitive or content - sensitive superpixels in @xcite are also not considered to be superpixels , as they do not aim to extract regions with similar size ( see prop . 3 in section [ sec : intro ] ) .",
    "a large number of superpixel algorithms have been proposed , however , few works present novel models and most of the exsiting energy functions are variation of the objective function of @xmath2-means . in our work",
    ", we propose a novel model to tackle the superpixel problem . with a comprehensively designed algorithm , the underlying segmentation from the model",
    "is well revealed .",
    "the proposed method can be described by two steps : the first one is to introduce the proposed new model , in which pixel and superpixel are associated with each other ; after that , an algorithm is constructed to solve this model in the second step .",
    "the complexity of the proposed algorithm is presented at the end of this section .      in the proposed model , @xmath3",
    "is supposed to be the pixel index of an input image @xmath4 with its width @xmath5 and height @xmath6 in pixels .",
    "the total number of pixels in @xmath4 can be denoted as @xmath7 . for each pixel @xmath3 , which belongs to one of the integers in the image pixel set @xmath8 , @xmath9 represents its position on the image plane , where , @xmath10 , and @xmath11 .",
    "@xmath12 is used to represent its intensity or colour .",
    "if colour image is used , @xmath12 is a vector , otherwise , @xmath12 is a scalar . to better represent pixel @xmath3 , a random variable @xmath13 along with its observed value @xmath14 is used .",
    "note that here the random variables @xmath15 , for all @xmath16 , are independent but non - identically distributed as discussed below .",
    "the width @xmath17 and height @xmath18 of each superpixel should be specified by user .",
    "if the desired number of superpixels @xmath19 is preferred , we obtain @xmath17 and @xmath18 using equation . @xmath20",
    "it is encouraged to use the same value for @xmath17 and @xmath18 , or they should not have a big difference as we wish the generated superpixels are with square shape .",
    "once @xmath17 and @xmath18 are obtained , the numbers of superpixels @xmath21 and @xmath22 respectively along the width and the height of @xmath4 are defined using equation .",
    "@xmath23 for simplicity of discussion , we assume that @xmath24 and @xmath25 . therefore , the initial number of superpixels @xmath19 becomes @xmath26 .    for each individual pixel @xmath3",
    ", there are two initial superpixel numbers , @xmath27 and @xmath28 , which are defined in equation .",
    "@xmath29 based on equation and , it can be inferred that @xmath30 , and @xmath31 .",
    "@xmath32 is used to denote the random latent variable for pixel @xmath3 .",
    "the possible values of @xmath32 are in a set @xmath33 expressed in equation . @xmath34 where @xmath35 , @xmath36 , and @xmath37 and @xmath38 are positive integers , such as @xmath39 .",
    "obviously , @xmath33 is a subset of @xmath40 .",
    "we assume that a pixel is generated by first randomly choosing one of the gaussian densities with the same probability @xmath41 , and then being sampled on the selected gaussian distribution . with the definitions and notations above , pixel @xmath3",
    "is described by a mixture of gaussians as defined in equation .",
    "@xmath42 where @xmath43 is manually set as @xmath41 , @xmath44 .",
    "although this setting results in a fact that @xmath45 may not equal @xmath39 , its effect will be removed in our algorithm due to the same value for the prior distribution of @xmath32 . for a given @xmath2 , @xmath46 is a gaussian density function parametrized by a mean vector , @xmath47 , and a covariance matrix @xmath48 , as shown in equation .",
    "@xmath49 where @xmath50 and @xmath51 is the number of components in @xmath52 .",
    "given an image , our model is defined as maximizing equation , which is extended from logarithmic likelihood function used in many statistic estimation problems .",
    "@xmath53 in the above equation , @xmath54 is used to denote the parameters in the gaussian densities , where @xmath55 .",
    "the label of pixel @xmath3 is determined by the posterior distribution of @xmath32 as shown below .",
    "@xmath56 the posterior probability of @xmath32 can be expressed as @xmath57 therefore , once we find a solution to maximize , @xmath58 can be easily obtained .",
    "as @xmath59 is constant , we will use @xmath60 to represent it in the following text . according to jensen s inequality",
    ", @xmath61 is greater than or equal to @xmath62 as shown below .",
    "@xmath63 where @xmath64 , @xmath65 , and @xmath66 .",
    "we use the expectation - maximization ( em ) algorithm to iteratively maximize @xmath62 to approach the maximum of @xmath61 with two steps : the expectation step ( e - step ) and the maximization step ( m - step ) .",
    "_ e - step _ : once a guess of @xmath67 is given , @xmath62 is expected to be tightly attached to @xmath61 . to this end",
    ", @xmath68 is required to ensure @xmath69 .",
    "equation is a sufficient condition for jensen s inequality to hold the equality .",
    "@xmath70 where @xmath71 is a constant number .",
    "since @xmath65 , @xmath71 can be eliminated and @xmath72 can be updated by equation .",
    "@xmath73 notice that equation is exactly the same with equation .",
    "therefore , equation can be rewrote as @xmath74    _ m - step _ : in this step , @xmath67 is derived by maximizing @xmath62 with a given @xmath68 . to do this ,",
    "we first get the derivatives of @xmath62 with respect to @xmath47 and @xmath48 , and set the derivatives to zero , as seen in equations -",
    ". then the parameters are obtained by solving equation .",
    "@xmath75 @xmath76 @xmath77 @xmath78 @xmath79 where @xmath80 is a subset of @xmath81 .",
    "the update of @xmath67 will monotonically improve @xmath82 : @xmath83 .      in this section",
    ", we will discuss the choice of covariance matrices and tricks to make the algorithm running well in practice .",
    "it can be noted that although the solution in section [ sec : solution ] supports full covariance matrices , i.e. , a covariance matrix with all its elements as shown in equation , only block diagonal matrices are used in this paper ( see equation ) .",
    "this is done for three reasons .",
    "first , computing block diagonal matrices is more efficient than full matrices .",
    "second , generally there is no strong relation between the spatial coordinates @xmath9 and the intensity or the colour @xmath12 .",
    "so it is reasonable to consider them separately .",
    "third , full matrices will not bring better performance but give bad results for colour images . for different colour space ,",
    "it is encouraged to split components that do not have strong relation into different covariance matrices .",
    "for example , if cielab is adopted , it is better to put colour - opponent dimensions @xmath84 and @xmath85 into a 2 by 2 covariance matrix . in this case , will become .",
    "however , we will keep using to discuss our algorithm for simplicity .",
    "@xmath86 @xmath87 where @xmath88 and @xmath89 respectively represent the spatial covariance matrix and the colour covariance matrix .",
    "the covariance matrices are updated according to equations and which are derived by replacing @xmath48 in equation with the block diagonal matrices , and by further solving .",
    "@xmath91 where @xmath92 and @xmath93 are the spatial components of @xmath94 and @xmath95 , and @xmath96 and @xmath97 are , for grayscale image , the intensity component , or , for colour image , the colour component of @xmath94 and @xmath95 .",
    "since @xmath88 and @xmath89 are positive semi - definite in practice , they may be not invertible sometimes . to avoid this trouble , we first compute the eigendecomposition of the two covariance matrices as shown in equations and , then eigenvalues on the major diagonal of @xmath98 and @xmath99",
    "are modified using equations and , and finally @xmath89 and @xmath89 are reconstructed with the equations and .",
    "@xmath100 @xmath101 where @xmath98 and @xmath99 are diagonal matrices with eigenvalues on their respective major diagonal .",
    "@xmath102 and @xmath103 for colour image are used to denote the respective eigenvalues , for @xmath104 and @xmath105 .",
    "@xmath106 and @xmath107 are orthogonal matrices . if the input image is grayscale , @xmath108 , @xmath89 and @xmath99 are scalars , and @xmath109 will be reduced to 0 .",
    "@xmath110 @xmath111 where @xmath112 and @xmath113 are two constant numbers .",
    "@xmath115 where @xmath116 and @xmath117 are diagonal matrices with @xmath118 and @xmath119 on their respective major diagonal .",
    "after initializing @xmath67 , equations , , , and are iterated until convergence .",
    "once the iteration stops , the superpixel label @xmath58 can be obtained using equation .    as the connectivity of superpixels",
    "can not be guaranteed , a postprocessing step is required .",
    "this is done by sorting the isolated superpixels in ascending order according to their sizes , and sequentially merging small isolated superpixels , which are less than one fourth of the desired superpixel size , to their nearest neighbouring superpixels , with only intensity or colour being taken into account .",
    "once an isolated superpixel ( source ) is merged to another superpixel ( destination ) , the size of the source superpixel is cleared to zero , and the size of the destination superpixel will be updated by adding the size of the source superpixel .",
    "this size updating trick will prevent the size of the produced superpixels from significantly varying .    as a preprocessing step",
    ", superpixel algorithm should run as fast as possible .",
    "since in slic @xcite and lsc @xcite , iterating a certain number of times is sufficient for most images without checking convergence , we borrow this trick to our algorithm and set the number of iterations @xmath120 as a parameter .",
    "the proposed algorithm can be summarized in algorithm 1 .",
    "@xmath17 and @xmath18 , or @xmath19 @xmath58 , @xmath16 initialize @xmath47 , @xmath50 , using @xmath19 seed pixels over the input image uniformly at fixed horizontal and vertical intervals @xmath17 and @xmath18 .",
    "initialize @xmath88 and @xmath89 .",
    "compute @xmath27 and @xmath28 using equation .",
    "calculate @xmath68 using equation , set @xmath121 .",
    "compute @xmath47 using equations .",
    "compute @xmath122 and @xmath123 using equations and .",
    "update @xmath72 using equation . @xmath124 .",
    "@xmath58 is determined by equation .",
    "merge small superpixels to their nearest neighbour .      as the frequency of a single processor is difficult to improve ,",
    "modern processors are designed using parallel architecture .",
    "if an algorithm is able to be implemented with parallel techniques and scales for the number of parallel processing units , its computational efficiency will be significantly improved .",
    "fortunately , the most expensive part of our algorithm , namely the computing @xmath68 and @xmath67 , can be parallelly executed .",
    "each @xmath72 is computed independently , and so do @xmath47 and @xmath48 . in our experiments",
    ", we will show that our implementation is easy to get speedup on multi - core cpus .",
    "in addition to the parameters ( i.e. @xmath17 and @xmath18 , or @xmath19 ) left to users , @xmath37 , @xmath38 , @xmath120 , @xmath112 , @xmath113 , and the initialization of @xmath67 should be assigned before starting the proposed algorithm .",
    "@xmath37 and @xmath38 control the size of overlapping region of neighbouring superpixels .",
    "we set them to @xmath39 for all the results in this paper .",
    "if we use a large @xmath37 or @xmath38 , the run - time will increase a lot but the results will not present a satisfactory improvement in accuracy . in general , larger @xmath120 will give better performance but , again , it will sacrifice the efficiency .",
    "we have found that @xmath125 is enough for most images . in most state - of - the - art algorithms , the size of overlapping region",
    "is not provided as parameters .",
    "we make them free to users so that they can customize their own algorithm .    unlike @xmath37 , @xmath38 and @xmath120",
    ", different @xmath112 , @xmath113 , and initialization of @xmath67 will not change the run - time but give a different performance in accuracy .",
    "although @xmath112 and @xmath113 are originally used to prevent the covariance matrices from being singular , they also can weigh the relative importance between spatial proximity and colour similarity .",
    "for instance , a larger @xmath113 produces more regular superpixels , and the opposite is true for a smaller @xmath113 .",
    "as @xmath113 and @xmath112 are opposite to each other , we set @xmath126 and leave @xmath113 for detailed description in section [ sec : exp ] . as we hope superpixels being local or regularly positioned on the image plane , @xmath47 are initialized regularly as already presented in algorithm 1 . for @xmath88 , we set their main diagonal to @xmath127 , @xmath128 and others to zero , so that neighbouring superpixels can be well overlapped at the beginning .",
    "the initialization of @xmath89 is not very straightforward , the basic idea is to set their main diagonal with a small colour distance with which two pixels are perceptually uniform .",
    "the effect of different initialization of @xmath89 will be discussed in section [ sec : exp ] .",
    "the updating of @xmath68 has a complexity of @xmath129 , for @xmath16 .",
    "according to equation , @xmath130 , in which @xmath120 , @xmath37 , and @xmath38 are constant numbers in our algorithm .",
    "therefore , the complexity of updating @xmath68 is @xmath131 .",
    "based on equations , , and , the complexity of updating @xmath67 is @xmath132 , for @xmath133 .",
    "according to equations and , we have @xmath134 . as a result , @xmath135 , which means @xmath136 .",
    "therefore , the updating of gaussian parameters has a complexity of @xmath131 .    in the worst case ,",
    "the sorting procedure in the postprocessing step requires @xmath137 operations , where @xmath138 is the number of isolated superpixels .",
    "the merging step needs @xmath139 operations , where @xmath140 is the number of small isolated superpixels and @xmath141 represents the average number of their adjacent neighbours . in practice , @xmath142 , the operations required for the postprocessing step can be ignored .",
    "therefore , the proposed superpixel algorithm is of a linear complexity @xmath131 .",
    "in this section , algorithms are evaluated in terms of accuracy , computational efficiency , and visual effects . like many state - of - the - art superpixel algorithms",
    ", we also use cielab colour space for our experiments because it is perceptually uniform for small colour distance .",
    "_ accuracy _ : three commonly used metrics are adopted : boundary recall ( br ) , under - segmentation error ( ue ) , and achievable segmentation accuracy ( asa ) . to assess the performance of the selected algorithms , experiments are conducted on the berkeley segmentation data set and benchmarks 500 ( bsds500 ) which is an extension of bsds300 .",
    "these two data sets have been wildly used in superpixel algorithms .",
    "bsds500 contains 500 images , and each one of them has the size of 481@xmath143321 or 321@xmath143481 with at least four ground - truth human annotations .    1 .",
    "br measures the percentage of ground - truth boundaries correctly recovered by the superpixel boundary pixels .",
    "a true boundary pixel is considered to be correctly recovered if it falls within two pixels from at least one superpixel boundary .",
    "a high br indicates that very few true boundaries are missed .",
    "2 .   a superpixel should not cross ground - truth boundary , or , in other words , it should not cover more than one object . to quantify this notion ,",
    "ue calculates the percentage of superpixels that have pixels `` leak '' from their covered object as shown in equation . @xmath144 where @xmath145 and @xmath146 are pixel sets of superpixel @xmath2 and ground - truth segment @xmath147 .",
    "@xmath148 is generally accepted .",
    "3 .   if we assign every superpixel with the label of a ground - truth segment into which the most pixels of the superpixel fall , how much segmentation accuracy can we achieve , or how many pixels are correctly segmented ?",
    "asa is designed to answer this question .",
    "its formula is defined in equation in which @xmath149 is the set of ground - truth segments .",
    "@xmath150    _ computational efficiency _ :",
    "execution time is used to quantify this property .      as we have mentioned in section [ sec : para ] , the effect of @xmath113 and the initialization of @xmath89 is discussed in this section .",
    "@xmath89 are initialized to diagonal matrix with the same @xmath151 on their major diagonal . as shown in fig .",
    "[ fig : difflambda ] , there is no obvious regularity . in fig .",
    "[ fig : difflambda ] , the maximum difference between two lines is around 0.001@xmath152 0.006 which is very small .",
    "although it seems that small @xmath153 will lead to a better br result , it is not true for ue and asa .",
    "for instance , in the enlarged region of fig .",
    "[ fig : lue ] , the result of @xmath154 is slightly better than @xmath155 .",
    "visual results with different @xmath153 are plotted in fig .",
    "[ fig : vlambda ] , it is hard for human to distinguish the difference among the five results .",
    "@xmath113 can be used to control the regularity of the generated superpixels in each iteration . as shown in fig .",
    "[ fig : diffec ] , small difference of @xmath113 does not present obvious variation for ue and asa , but it do affect the results of br .",
    "in general , a larger @xmath113 leads to more regular superpixels .",
    "conversely , the shape of superpixels generated with a smaller @xmath113 is relative irregular ( see fig . [",
    "fig : vdiffec ] ) . because superpixels with irregular shape will produce more boundary pixels , the result of br with small",
    "@xmath113 is better than that with greater @xmath113 .",
    "we will use @xmath156 and @xmath157 in the following experiments .",
    "although this setting does not give the best performance in accuracy , the shape of superpixels using this setting is regular and visually pleasant ( see fig .",
    "[ fig : vdiffec ] ) .",
    "moreover , it is enough to outperform state - of - the - art algorithms as shown in fig .",
    "[ fig : metrics ] .     +       in order to evaluate scalability for the number of processors ,",
    "we test our implementation on an machine attached with an intel(r ) xeon(r ) cpu e5 - 2620 v3 @ 2.40ghz and 8 gb ram .",
    "the source code is not optimized for any specific architecture .",
    "only two openmp directives are added for the updating of @xmath48 , @xmath47 , and @xmath68 , as they can be computed independently ( see section [ sec : para ] ) .",
    "as listed in table [ tab : para ] , for a given image , multiple cores will present a better performance .",
    "lllll resolution & 1 core & 2 cores & 4 cores & 6 cores + 240@xmath143320 & 393.646 & 303.821 & 227.078 & 200.708 + 320@xmath143480 & 776.586 & 589.785 & 400.073 & 321.548 + 480@xmath143640 & 1569.74 & 1011.62 & 743.629 &",
    "624.561 + 640@xmath143960 & 3186.71 & 2244.12 & 1353.72 & 1069.79 +      we compare the proposed algorithm to eight state - of - the - art superpixel segmentation algorithms including lsc @xcite , slic @xcite , seeds @xcite , ers @xcite , turbopixels @xcite , lrw @xcite , vcells @xcite , and waterpixels @xcite .",
    "the results of the eight algorithms are all generated from implementations provided by the authors on their respective websites with their default parameters except for the desired number of superpixels , which is generally decided by users .    as shown in fig .",
    "[ fig : metrics ] , our method outperforms the selected state - of - the - art algorithms especially for ue and asa .",
    "it is not easy to distinguish between our result and lsc in fig .",
    "[ fig : metrics ] .",
    "however , if we use @xmath158 , our result will obviously outperforms lsc as displayed in fig .",
    "[ fig : lscbr ] .    to compare the run - time of the selected algorithms , we test them on a desktop machine equipped with an intel(r )",
    "core(tm ) i5 - 4590 cpu @ 3.30ghz and 8 gb ram .",
    "the results are plotted in fig .",
    "[ fig : time ] . according to fig .",
    "[ fig : time ] , as the size of the input image increases , run - time of our algorithm grows linearly , which proves our algorithm is of linear complexity experimentally .",
    "a visual comparison is displayed in fig .",
    "[ fig : visual ] . according to the zooms",
    ", only our algorithm can correctly reveal the segmentations .",
    "our superpixel boundaries can adhere object very well .",
    "lsc gives a really competitive result , however there are still parts of the objects being under - segmented .",
    "the superpixels extracted by seeds and ers are very irregular and their size varies tremendously . the remaining five algorithms can generate regular superpixels , but they adhere object boundaries very bad .     in this figure . ]",
    "+   +   +   +   +   +   +   +",
    "this paper presents an efficient superpixel segmentation algorithm by constructing a novel gaussian mixture model . with each superpixel associated to a gaussian density , each pixel",
    "is assumed to be independently distributed according to a mixture of the gaussian densities . aiming to extract superpixles with similar size",
    ", the gaussian densities are assumed to be occurred with the same chance .",
    "we formulate a log - likelihood function to describe the probability of an image .",
    "based on jensen s inequality and the expectation - maximization algorithm , an iterative solution is constructed to approach a maximum of the log - likelihood by improving its low bound .",
    "the label of each pixel is determined to the one with maximum posterior probability . with a comprehensively designed algorithm",
    ", opportunity is discovered to control the shape of superpixels . according to our experiments",
    ", the initialization of our method produces results with tiny difference which can be ignored .",
    "the proposed algorithm is of linear complexity , which has been proved by both theoretical analysis and experimental results .",
    "what s more , it can be implemented using parallel techniques , and its run - time scales for the number of processors .",
    "the comparison with the state - of - the - art algorithms is shown that our algorithm outperforms the selected methods in accuracy and presents a competitive performance in computational efficiency .    as a contribution to open source society , we will make our test code public available at https://github.com/ahban .",
    "10 url # 1`#1`urlprefixhref # 1#2#2 # 1#1"
  ],
  "abstract_text": [
    "<S> superpixel segmentation is used to partition an image into perceptually coherence atomic regions . as a preprocessing step of computer vision applications </S>",
    "<S> , it can enormously reduce the number of entries of subsequent algorithms . with each superpixel associated with a gaussian distribution </S>",
    "<S> , we assume that a pixel is generated by first randomly choosing one of the superpixels , and then the pixel is drawn from the corresponding gaussian density . unlike most applications of gaussian mixture model in clustering , data points in our model are assumed to be non - identically distributed . </S>",
    "<S> given an image , a log - likelihood function is constructed for maximizing . </S>",
    "<S> based on a solution derived from the expectation - maximization method , a well designed algorithm is proposed . </S>",
    "<S> our method is of linear complexity with respect to the number of pixels , and it can be implemented using parallel techniques . to the best of our knowledge , </S>",
    "<S> our algorithm outperforms the state - of - the - art in accuracy and presents a competitive performance in computational efficiency .    </S>",
    "<S> expectation - maximization , gaussian mixture model , parallel algorithm , superpixel segmentation </S>"
  ]
}