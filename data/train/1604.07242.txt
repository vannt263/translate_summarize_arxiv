{
  "article_text": [
    "adaptive mesh refinement or @xmath2-refinement is today a standard tool in the acceleration of finite element methods .",
    "the @xmath0-version of the finite element method was made popular by babuka and co - workers in a series of papers @xcite .",
    "they showed that in case the solution is sufficiently smooth an adaptation in @xmath1 , i.e. , in the polynomial order of a local approximation space , may be more advantageous . by a proper combination of @xmath2- and @xmath1-refinement exponential convergence towards the exact solution in terms of the number of degrees of freedom may be observed .    from a theoretical point of view",
    "@xmath0-adaptive finite element methods are a natural generalization of @xmath2-adaptive methods .",
    "however , their practical implementation still poses considerable difficulties and few open source software solutions are available to researchers . of these",
    "we want to mention the c++libraries _ concepts _ @xcite and _ deal.ii _ @xcite , and the fortran 90 library _ phaml _ @xcite .    in the present paper",
    "we want to discuss data structures and algorithms for implementing @xmath0-adaptive discontinuous finite element methods in the finite element library @xcite .",
    "the main difficulty we want to address is the restriction and prolongation of user data in adaptive computations . in case of local mesh refinement utility classes in relive users of this often tedious and error - prone task .",
    "the dedicated data structures and algorithms need to be generalized to the case of @xmath1- and @xmath0-refinement in such a way that legacy code remains valid .    at the time of writing",
    "there has been one prior attempt to implementing @xmath0-adaptive finite element methods in . in a pioneering work",
    "andreas dedner and robert klfkorn explored how to implement continuous and discontinuous @xmath0-adaptive finite element spaces in .",
    "for the most part , the restriction and prolongation of discrete functions may be considered as beyond the scope of this implementation and was done in a preliminary way only . for the local approximation lagrange",
    "ansatz polynomials are used .",
    "the software was used in the preparation of numerical results for stationary problems in @xcite .",
    "this paper is accompanied by a new extension module to the library .",
    "the ` dune - fem - hpdg ` module provides a number of discrete function spaces for implementing @xmath1- and @xmath0-adaptive discontinuous finite element methods in .",
    "hardly any restrictions to the local ansatz functions are imposed .",
    "the software is extensible and allows users to quickly setup new finite element spaces using customized ansatz functions with minimal effort .",
    "the restriction and prolongation of discrete functions and other user data is handled in a fully automated fashion .",
    "the software is compatible with 2.4 and in particular with its data structures and algorithms for local mesh refinement .",
    "the outline of this paper is as follows . in we",
    "briefly revisit the abstraction principles behind the finite element library .",
    "will be concerned with the restriction and prolongation of user data in @xmath0- adaptive simulations . in",
    "we describe the implementation and usage of the ` dune - fem - hpdg ` module . as proof of concept we implemented an @xmath0-adaptive interior penalty method for an elliptic model problem , the numerical results are shown in .",
    "let @xmath3 be a bounded domain .",
    "we assume that the computational domain is discretized by a grid @xmath4 i.e. , by a finite number of closed grid cells with non - overlapping interiors such that @xmath5 a _ discontinuous finite element space _ or _ discontinuous galerkin space _ is a finite - dimensional , piecewise continuous function space @xmath6 where for each @xmath7 we fixed a finite - dimensional subspace , the so - called local space @xmath8 . for discretization purposes we need to fix a basis for each local space .",
    "let @xmath9 be a local space with @xmath10 .",
    "a basis @xmath11 of @xmath9 is called a _ local basis function set_.    a function @xmath12",
    "is called a _ discrete function_. note that on inter - element intersections a discrete function is double - valued .",
    "the restriction of @xmath13 to a grid element @xmath7 is called a _ local ( discrete ) function_. in the fixed local basis @xmath14",
    "a local function reads as follows , @xmath15 the scalars @xmath16 are called _ local degrees of freedom _ ( dofs ) ; the vector @xmath17 is called the _ local dof vector_. for practical purposes we want to store the vector of all dofs in a consecutive array of floating point numbers .",
    "this requires a suitable enumeration of the dofs .",
    "let @xmath18 denote the dimension of the finite element space @xmath19 .",
    "a _ local dof mapping _ for @xmath7 is an injective mapping @xmath20 from a local dof enumeration to global indices .",
    "having fixed families of local basis function sets and local dof mappings we have at the same time fixed a basis of @xmath19 .",
    "[ dfn : global_basis ] let @xmath21 and @xmath22 be fixed families of local basis function sets and dof mappings . define @xmath23 by @xmath24 then , the set @xmath25 forms a basis of @xmath19 .",
    "the following definition is a slightly modified version of ( * ? ? ?",
    "* definition 5 ) which represents the theoretical foundation for the implementations of finite element spaces spaces in .",
    "[ dfn : discrete_function_space ]",
    "let @xmath19 be a finite - dimensional , piecewise continuous function space .",
    "let further @xmath21 and @xmath22 be families of local basis function sets and injective local dof mappings , @xmath26 such that @xmath27 with the global basis function set @xmath28 as defined in [ dfn : global_basis ] .",
    "then , the triple @xmath29 is called a _",
    "discrete function space_.    it is important to note that while we motivated the concept of a discrete function space starting from a discontinuous finite element space applies to continuous finite element spaces as well . for the sake of readability",
    ", we will not always explicitly state the local basis function sets and dof mappings when referring to a discrete function space .",
    "instead , we simply speak of a discrete function space @xmath19 and it is tacitly understood that local basis function sets @xmath21 and dof mappings @xmath22 have been fixed .",
    "[ exp : discrete_function_space ] let @xmath30 be a vector of local polynomial degrees",
    ". denote by @xmath31 the space of piecewise polynomial functions .",
    "assume that for each element @xmath7 there is a fixed reference element @xmath32 and an affine reference mapping @xmath33 we choose @xmath34 where @xmath35 denotes the polynomial basis resulting from a gram - schmidt orthonormalization with respect to the @xmath36 inner product applied to the lexicographically ordered monomials @xmath37 @xmath38 note that for the vector space dimensions it holds @xmath39 assume there is a given strict total order @xmath40 on @xmath41 , e.g. , from an enumeration of the grid elements .",
    "then for each @xmath7 a local dof mapping is provided by @xmath42",
    "adaptive finite element methods give raise to sequences of approximate solutions , grids , and discrete function spaces .",
    "the main challenge we want to address in this section is the restriction and prolongation of user data in @xmath0-adaptive simulations , i.e. , any transfer of discrete functions and other grid - based data while modifying the mesh or the local ansatz spaces .    in the following ,",
    "let @xmath43 denote a sequence of discontinuous discrete function spaces , @xmath44 we assume that the associated sequence of grids @xmath45 is nested in the following sense : for all @xmath46 we assume that either    1 .",
    "there is a unique father element @xmath47 with @xmath48 ; in this case we say that @xmath49 resulted from refining @xmath50 , 2 .   or there are a number of elements @xmath51 such that @xmath52 in this case we say that @xmath53 resulted from coarsening the children @xmath54 , @xmath55",
    ".    readers familiar with and the definitions in @xcite may think of the slightly more general case of sequences of codimension 0 leaf entity complexes in hierarchical meshes .",
    "for each @xmath56 we fix a family of local projection operators @xmath57 the most important example in view of discontinuous finite element methods is the following .",
    "[ exp : local_projection ] for @xmath56 and @xmath58 the local @xmath59-projection @xmath60 is defined by @xmath61    having fixed a family of local projection operators we denote by @xmath62 the global projection operator defined by @xmath63 for all @xmath64 .",
    "now , let @xmath65 be some given initial data .",
    "on an abstract level , an adaptive scheme can be written in the following form , @xmath66 where each @xmath67 is some arbitrary operator .",
    "for the remainder of this section we will be concerned with the restriction and prolongation of a discrete function @xmath68 , i.e. , the efficient computation of the projection @xmath69    from a mathematical point of view the restriction and prolongation of a given function is a trivial task .",
    "its practical implementation , however , is not , the main difficulty being that during the modification data may be invalidated . in , the grid adaptation is split into several stages . during this modification phase user data may be transferred from a grid state @xmath70 to @xmath71 . for this particular purpose ,",
    "a grid provides persistent i d mappings and associative containers , see @xcite .",
    "grid data stored as consecutive arrays ( e.g. , global dof vectors ) must be copied into temporary data structures that remain valid during the adaptation .    the finite element library pursues a different strategy . during the modification phase dof vectors",
    "are resized to hold information associated with elements @xmath72 .",
    "each stage of the adaptation cycle requires updates on index sets , dof mappings , and dof vectors ( * ? ? ?",
    "* algorithms 18sqq . ) . in case",
    "a relatively small number of elements is marked for local mesh adaptation this approach leads to significantly less memory overhead during adaptation .",
    "a comparison of the two different adaptation strategies can be found in @xcite .",
    "unfortunately , the algorithms and data structures implemented in do not hold in case of @xmath1- or @xmath0-adaptation .",
    "their generalization must be done with great care if legacy code shall be supported . for the sake of presentation , we introduce the following notation .    for all @xmath56",
    "we denote the dimension of the discrete function space @xmath73 by @xmath74 where @xmath75 we define the _ global dof set _ @xmath76 associated with @xmath73 by @xmath77    a _ global dof mapping _ is an injective mapping @xmath78 obviously , a global dof mapping @xmath79 is equivalent to a family of local dof mappings @xmath80 by the relation @xmath81 the following definition describes our generalized approach to the restriction and prolongation of discrete functions .",
    "[ dfn : restrict_prolong ] assume a global dof mapping @xmath79 is already known .",
    "let @xmath82 be a given discrete function developed in the global basis @xmath28 defined in [ dfn : global_basis ] .",
    "the global dof vector will be denoted by @xmath83 and we deliberately omit the index @xmath84 . in order to simultaneously compute a global dof mapping @xmath85 and the projection @xmath86 proceed as follows .",
    "[ stp : insert_dofs ] let @xmath87 and @xmath88 be a continuation of @xmath79 on @xmath89 , i.e. , @xmath88 is an injective mapping @xmath90 such that @xmath91    [ stp : restrict_prolong ] the global dof vector @xmath92 is temporarily resized to @xmath93 . in case of a newly inserted element @xmath94 created either from local grid refinement or coarsening the associated dofs",
    "are initialized by @xmath95 if otherwise @xmath96 all dofs @xmath97 must be reinitialized by projecting the local discrete function @xmath98 to the local space @xmath99 .",
    "note that in general @xmath100 we make a copy of the local dof vector , @xmath101 and compute the projection @xmath102    [ stp : remove_dofs ] construct a new injective dof numbering @xmath103 such that @xmath104 all other dofs are copied to their new destination , @xmath105 and the dof vector @xmath92 is resized to its new length @xmath106 .",
    "the algorithm [ dfn : restrict_prolong ] yields a global dof mapping @xmath85 and by the family of associated local dof mappings @xmath107 at the same time we have computed the projection of @xmath108 onto @xmath109 , @xmath110 developed in the global basis functions defined in [ dfn : global_basis ] .    concerning the actual implementation of the above algorithm , and [ stp : restrict_prolong ] should be clear . the practical definition of the dof mapping @xmath85 in , however , may be in need of further explanation .",
    "let @xmath88 be the intermediate dof mapping as in above .",
    "we denote by @xmath111 the set of freed valid indices , the so - called set of holes .",
    "its elements @xmath112 , @xmath113 , are assumed to be in ascending order .",
    "let @xmath114 be defined by @xmath115 where the numbers @xmath116 , @xmath113 , are assumed to be in ascending order as well .     by to [ stp : remove_dofs ] of ,",
    "see for details . ]",
    "[ exp : restrict_prolong ] shows a hierarchical grid with three macro elements @xmath117 with @xmath118 having two children @xmath119 .",
    "the leaf level elements form the grid @xmath120 the global dof numbers associated with each element are depicted inside the brackets . here , level @xmath121 elements are assumed to hold at least two dofs , while level @xmath122 elements shall have one dof .",
    "next , @xmath123 and @xmath124 are marked for coarsening , @xmath125 is marked for refinement , and @xmath126 gets assigned an additional dof by local @xmath1-refinement .",
    "newly inserted dofs added in and dofs to be removed in are printed in italics . during the modification phase",
    "the number of dofs is enlarged to allow for the local projection of user data .    during the adaptation from @xmath73",
    "to @xmath109 the maximum length of the global dof vector equals @xmath127 taking into account the temporary storage used in the overall memory consumption of algorithm [ dfn : restrict_prolong ] is of order @xmath128",
    "in this section we describe the usage of the ` dune - fem - hpdg ` add - on module to the finite element library .",
    "the module provides extensible reference implementations of adaptive discrete function spaces for implementing @xmath1- and @xmath0-adaptive discontinuous finite element methods .",
    "first , we give a brief introduction to and in particular its local mesh adaptation capabilities .",
    "the c++-library provides a number of abstract interface classes representing discrete functions and discrete function spaces , local basis function sets , and dof vectors and dof mappings .",
    "these classes and their relationships are summarized in .",
    "here , a ` discretefunction ` represents an element @xmath129 a discrete function holds a global dof vector @xmath130 and is usually evaluated in local coordinates with respect to a given element @xmath7 .",
    "the local dof vector @xmath131 is initialized by the ` dofmapper ` , a class representing the family of local dof mappings @xmath132 finally , a ` basisfunctionset ` represents the local basis function set @xmath14 , and the local function @xmath133 is given by @xmath134        in most complex applications , more than one discrete function is in use .",
    "this poses some difficulty in adaptive simulations .",
    "a grid may be only be adapted once , and all discrete functions must be restricted and prolonged simultaneously . in , a sole class , the ` dofmanager ` , is responsible for starting the grid adaptation process .",
    "it resizes all dof vectors and notifies dof mappings about the update .    in case",
    "no user data must be restricted and prolonged no action is required .",
    "otherwise , users must add discrete functions , containers , etc .",
    ", to an ` adaptationmanager ` .",
    "this class is equipped with the necessary information ( encapsulated in a ` restrictprolong ` object ) on how to locally project user data during adaptation .",
    "illustrates the adaptation process from a user perspective .      as illustrated in a ` discretefunctionspace ` assembles the local basis function sets and dof mappings .",
    "the ` dune - fem - hpdg ` extends the list of available discrete function spaces available to users of by the following @xmath0-adaptive spaces :    orthogonaldiscontinuousgalerkinspace : :    an implementation of the example finite element space    [ exp : discrete_function_space ] , legendrediscontinuousgalerkinspace : :    a discontinuous finite element space using product legendre ansatz    polynomials , i.e. ,    @xmath135 with    @xmath136 where @xmath137    is an affine reference mapping and the @xmath138-th legendre    polynomial on the unit interval @xmath139 $ ] is defined by    @xmath140,\\ ] ] anisotropicdiscontinuousgalerkinspace : :    a discontinuous space based on product legendre polynomials as well ;    this implementation , however , allows for an adaptation in    @xmath1 in each spatial direction .",
    "we remark that the latter two spaces based on legendre polynomials are restricted to cubic grids , i.e. , @xmath141^d$ ] for all @xmath7 .",
    "the discrete function spaces listed above differ in the choice of local basis function sets .",
    "they do , however , share the common base class ` hpdg::discontinuousgalerkinspace ` providing almost all other functionality .",
    "in the same way , the ` dune - fem - hpdg ` module allows users to quickly setup new discrete function spaces . in order to do so , users must provide an implementation of the ` hpdg::basisfunctionsets ` interface which represents a family of local basis function sets .",
    "this is explained in more detail in .",
    "the construction of the discontinuous finite element spaces in ` dune - fem - hpdg ` is in no way different from that of all other discrete function spaces in .",
    "illustrates the initialization of an adaptive discrete function suitable for @xmath0-adaptive simulations .",
    "the most important design decision we made in implementing the ` dune - fem - hpdg ` module was to split @xmath2- and @xmath1-refinement in two separate stages .",
    "our reasoning is twofold .",
    "first , the software should support @xmath2-adaptive legacy code in the manner described above in .",
    "second , this strategy allows for an arbitrary number of @xmath2- , @xmath1- and @xmath0-adaptive discrete functions in single application and gives users the necessary freedom in complex applications .",
    "standard use cases are easy to implement as will be shown in .",
    "any of the discrete function spaces in ` dune - fem - hpdg ` provides a set of extended interface methods for local @xmath1-adaptation . in most papers",
    ", @xmath1 denotes an integer , e.g. , the polynomial order of a local approximation space .",
    "we slightly generalized this idea and allow @xmath1 to be of arbitrary type ( the ` key ` type ) , e.g. , a vector of individual local polynomial degrees for each space direction . the @xmath1-adaptive interface mimicks that of the grid adaptation in .",
    ".... const discretefunctionspace::keytype & key (      const discretefunctiontype::entitytype & entity ) const ; void discretefunctionspace::mark (      const discretefunctiontype::keytype & key ,      const discretefunctiontype::entitytype & element ) ; ....    the first method returns the key currently assigned to a grid element , while ` mark ` allows for re - assigning a new key . in order for the changes to take effect , one of the following two ` adapt ` methods must be called .",
    ".... bool discretefunctionspace::adapt ( ) ; template < dataprojection > bool discretefunctionspace::adapt(dataprojection & projection ) ; ....    the necessary information on how to locally project data are encapsulated in a ` dataprojection ` . as in case of @xmath2-adaptation , however , users will not call these methods explicitly . instead , the ` hpdg::adaptationmanager ` class handles the restriction and prolongation as illustrated by .",
    "note how closely the code resembles above on local mesh adaptation in . in this particular example ,",
    "a single discrete function is restricted and prolonged ; however , the ` dune - fem - hpdg ` facilities may be provided with an arbitrary number of discrete functions and other user data .",
    "more information on the adaptation and the restriction and prolongation of custom user data can be found in .",
    "in this final section we want to illustrate in a complex application the capabilities and usage of the ` dune - fem - hpdg ` module .",
    "we will be concerned with the numerical solution of an elliptic pde by means of an @xmath0-adaptive symmetric interior penalty galerkin ( sipg ) scheme .",
    "first , we briefly revisit the @xmath0-version of the sipg method following the recent book by dolej and feistauer ( * ? ? ?",
    "* chapter 7 ) .",
    "let @xmath142 be a bounded domain with lipschitz boundary @xmath143 .",
    "we consider the following elliptic model problem @xmath144 for given source @xmath145 and boundary values @xmath146 .",
    "the domain is discretized by a grid @xmath41 ; for @xmath7 we denote the sets of interior and boundary intersections by @xmath147 the sets of all interior and boundary intersections will be denoted by @xmath148 and @xmath149 , respectively .",
    "we fix local polynomial degrees @xmath150 with @xmath151 for all @xmath7 and consider the standard discontinuous finite element space @xmath152 the jump of a discrete function @xmath153 across an inter - element intersection @xmath154 , @xmath155 , is defined by @xmath156 where @xmath157 denotes a unit outer normal to @xmath7 .",
    "the average of a discrete function is given by @xmath158 for each intersection @xmath159 we introduce the penalty parameter @xmath160 where @xmath161 is a sufficiently large constant and @xmath162 denotes the diameter of @xmath163 .",
    "note that the penalty parameter depends on the local polynomial degrees .",
    "now , let @xmath164 be a bilinear form defined by @xmath165 and @xmath166 defined by @xmath167 the bilinear form @xmath168 is continuous and coercive with respect to the energy norm @xmath169 defined by @xmath170 provided the constant @xmath171 is sufficiently large ( * ? ? ?",
    "* theorems 7.13 and 7.15 ) .",
    "this guarantees the existence and uniqueness of the weak solution @xmath172 to the model problem defined by @xmath173      the first component in the construction of a fully @xmath0-adaptive scheme is an _ a posteriori _ error indicator estimating the local approximation error . of course",
    ", the local error indicators must be computable from the numerical solution @xmath174 and the given data @xmath175 alone .",
    "there is a growing body of literature on _ a posteriori _",
    "error estimation , see , e.g. , @xcite .",
    "we implemented the following indicator from @xcite , @xmath176 here , @xmath177 denote local @xmath178-projections onto the polynomial spaces of lower degree @xmath179 and @xmath180 with @xmath181 .",
    "it can be shown that @xmath182 where @xmath183 denotes a data - oscillation term , see ( * ? ? ?",
    "* theorem 3.2 ) for details .",
    "having computed the local error indicator we mark @xmath7 for refinement in either @xmath2 or @xmath1 if the local error indicator exceeds an upper bound @xmath184 , @xmath185 if no element is marked for further refinement we stop the iterative procedure .    once a grid element has been identified for local adaptation",
    "it must be decided whether to refine in @xmath2 or @xmath1 .",
    "several strategies for this have been proposed in the literature , see , e.g. , @xcite .",
    "we implemented the so - called prior2p strategy described in @xcite based on the following idea . _",
    "a priori _ error estimates ( see , e.g. , ( * ? ? ?",
    "* theorem 7.20 ) ) suggest that we should increase the local polynomial degree @xmath186 provided the exact is sufficiently smooth in @xmath7 .",
    "a regularity indicator yields an estimate for the local sobolev index @xmath187 , @xmath188 we increase the local polynomial order provided @xmath189 ; otherwise , we mark @xmath190 for local mesh refinement",
    ".    choose initial grid @xmath41 and local polynomial degrees @xmath191 solve system to compute @xmath172 compute the local error indicator @xmath192 from * stop * [ alg : hp_sipg_1 ] mark element @xmath190 for @xmath2-coarsening , if possible ; otherwise , set @xmath193 compute estimate for the local sobolev index @xmath187 set @xmath194 mark element @xmath190 for @xmath2-refinement [ alg : hp_sipg_2 ] restrict and prolong @xmath174 and @xmath195 according to and    so far we have only discussed local @xmath0-refinement .",
    "assume now that for @xmath196 the estimated local approximation error is small , i.e. , @xmath197 we may decide to reduce the number of degrees of freedom by decreasing the local polynomial degree @xmath186 or by coarsening the grid .",
    "mesh coarsening usually depends on a number of neighboring elements ( e.g. , the children of a common father element in a hierarchical grid ) all being marked for grid coarsening .",
    "we take a rather hands - on approach and  if possible  always favor @xmath2- over @xmath1-coarsening .",
    "we remark that the regularity indicator implemented restricts the minimum local polynomial degree to @xmath198 .",
    "finally , we need to address the restriction and prolongation of the vector of local polynomial degrees @xmath195 .",
    "let @xmath199 be an element created during grid modification .",
    "we must define the local polynomial degree @xmath200 to be associated with the newly created element . in case",
    "@xmath190 results from local mesh refinement of @xmath201 we simply set @xmath202 locally prolonging @xmath203 to @xmath204 . if otherwise @xmath190 results from local mesh coarsening we locally restrict @xmath203 to @xmath204 by setting @xmath205 the complete @xmath0-adaptive sipg scheme is summarized in .",
    "the ` dune - fem - hpdg ` contains a reference implementation of the @xmath0-adaptive sipg scheme described above . for the computation of the numerical solution we relied on and the discretization module",
    "the latter provides sample implementations of continuous and discontinuous finite element methods including an sipg method for fixed global polynomial degree @xmath206 . for the solution of the linear system we used the terative olver emplate ibrary ( ) , a module developed by blatt and bastian @xcite .",
    "the @xmath0-adaptive scheme requires for a locally adaptive grid . in all our experiments we used the module by alkmper et al .",
    "@xcite , a add - on encapsulating the alugrid library by schupp @xcite .",
    "we want to give some details on the implementation in order to illustrate the @xmath0-adaptation process .",
    "shows a sample implementation of the marking procedure ( lines [ alg : hp_sipg_1 ] to [ alg : hp_sipg_2 ] of ) .    here , the parameter ` function ` is a callable object which returns a pair of a refinement flag and an estimate for the local sobolev index for a given entity .",
    "the array ` k ` is an associative container of local polynomial degrees currently in use . in case",
    "an element is flagged for refinement or coarsening it is either marked for @xmath2- or @xmath1-adaptation ; in the latter case we re - assign its local polynomial degree in ` k ` .",
    "the modification of the grid and the finite element space as well as the restriction and prolongation of the discrete data are shown in .",
    "the first input argument of ` adapt ` is the approximate solution @xmath207 first , the grid is adapted to its new state @xmath71 . the approximate solution and the container are restricted @xmath203 by the usual facilities .",
    "this yields the vector @xmath204 and an intermediate projection @xmath208 in lines 20 and 21 the finite element space is marked for the concluding @xmath1-adaptation .",
    "the subsequent restriction and prolongation is handled by ` dune - fem - hpdg ` .",
    "it yields the desired projection of @xmath209 onto @xmath109 .",
    "the resulting function serves as initial guess in the solution of the next linear system .",
    "we consider the homogeneous model problem to recover a prescribed solution given by @xmath210 in a domain with reentrant corner @xmath211 we compute two series of numerical solutions @xmath212 , @xmath213 , on an axis - aligned quadrilateral mesh and a triangular mesh . in each case",
    "the @xmath0-adaptive sipg scheme yields a sequence of locally adapted meshes and distributions of local polynomial degrees .",
    "the so - called @xmath0-meshes are shown in and [ fig : hp_sipg_triangular_1],[fig : hp_sipg_triangular_2 ] . since",
    "the exact solution is known we can compute the approximation error @xmath214 in order to determine the convergence rate ( eoc ) we follow @xcite and define @xmath215 where @xmath216 denotes the number of global dofs . another interesting quantity for evaluating",
    "the effectiveness of the adaptive scheme is the so - called effectivity index , defined as the ratio of the _ a posteriori _ error indicator error bound and the energy norm , i.e. , @xmath217 the effectivity index depends on the problem under consideration and the macro grid . within the elements of given series of approximate solutions , however",
    ", the effectivity index should be a constant .",
    "the approximation errors , convergence rates , and effectivity indices for the model problem are shown in and [ tbl : hp_sipg_triangular ] .",
    "we encourage users to run the sample code themselves ; the instructions can be found in .",
    "in this appendix we describe how to download and install the ` dune - fem - hpdg ` module and how to reproduce the numerical results presented in .",
    "the following modules are needed in order to build and run the examples :    1 .",
    "the 2.4 core modules , , , , and , 2 .   the library , 3 .   the discretization module , 4 .   and the ` dune - fem - hpdg ` module",
    ".    please make sure that you check out the 2.4 compatible ( release ) branches of , , and ` dune - fem - hpdg ` .      before installing and its components",
    "please refer to the installation notes for a list of dependencies and required software .",
    "we assume all aforementioned dune packages have been downloaded and saved to a single directory ` $ dune ` .",
    "for the simultaneous build of all modules using cmake run the ` dunecontrol ` script , e.g. , by    .... cd $ dune ./dune - common / bin / dunecontrol all ....    please refer to the installation notes for more information and on how to pass options to the build process .",
    "we assume that has been configured using cmake . by default",
    ", binary executables will be built out - of - source , e.g. , in a designated build directory ` build_cmake ` .",
    "the sources for the @xmath0-adaptive sipg method can be found in the subdirectory ` examples / poisson ` . in order to verify the results shown in and compile and run the test as follows    .... cd $ dune / dune - fem - hpdg / build - cmake cd ./examples / poisson make poisson_alugrid_cube_7 ./poisson_alugrid_cube_7 ./reentrantcorner.dgf ....    the results for the triangular grid shown in and may be reproduced from running    .... make poisson_alugrid_simplex_7 ./poisson_alugrid_simplex_7 ./reentrantcorner.dgf ....    if an mpi implementation was found during the build process the tests may be run in parallel in an analogous way .",
    "in this final appendix we want to describe two advanced aspects of the ` dune - fem - hpdg ` module , the definition of custom data projections for the restriction and prolongation of user data and the implementation of new discontinuous finite element spaces based on user - defined local basis function sets .",
    "a ` dataprojection ` is a callable object encapsulating the data @xmath108 associated with the discrete function space @xmath73 .",
    "any such projection must inherit from the base class ` hpdg::dataprojection ` , as illustrated by the following listing .    .... template < class discretefunctionspace , class data > class defaultdataprojection      : public dataprojection < discretefunctionspace ,                              defaultdataprojection < data > > {   public :    using basisfunctionsettype =        typename discretefunctionspace::basisfunctionsettype ;    using entitytype = typename basisfunctionsettype::entitytype ;      void dataprojection::operator()(const entitytype & element ,                                    const basisfunctionsettype & former ,                                    const basisfunctionsettype & future ,                                    const vector < size_t > & origin ,                                    const vector",
    "< size_t > & destination ) ; } ; ....              as described in the discrete function spaces provided by ` dune - fem - hpdg ` inherit from a common base class implementing almost all functionality , see . in the same way",
    ", users may setup new discontinuous finite element spaces . to do so , users need to provide an implementation of the ` hpdg::basisfunctionsets ` interface which contains essentially two methods .",
    "remember that a ` geometrytype ` is a data type that identifies a reference element .",
    "given a grid element @xmath190 with reference element @xmath32 and a key @xmath206 the method ` basisfunctionset ` returns the corresponding local basis function set @xmath222 .",
    "we assume that the size of the local basis function set only depends on @xmath32 and @xmath206 . then , the method ` blocks ` returns the number of blocks to be reserved for @xmath223 .",
    "a ` blockmapper ` is a class representation a dof mapping ; in case of a scalar function spaces the number of blocks coincides with the number of local basis functions in @xmath222 .",
    "users may inherit from the base implementation ` hpdg::discontinuousgalerkinspace ` . alternatively",
    ", the convenience function ` make_space ` immediately constructs a discrete function space , given a grid part , the family of basis function sets , and a default key for initializing the space .",
    ".... template < class gridpart , class basisfunctionsets > std::unique_ptr < defaultdiscontinuousgalerkinspace < basisfunctionsets > > make_space(gridpart & gridpart , const basisfunctionsets & basisfunctionsets ,             const typename basisfunctionsets::keytype & key ) ; ....              p.  bastian , m.  blatt , a.  dedner , ch .",
    "engwer , r.  klfkorn , r.  kornhuber , m.  ohlberger , and o.  sander . a generic grid interface for parallel and adaptive scientific computing .",
    "part ii : implementation and tests in dune .",
    ", 82(23):121138 , 2008 .",
    "p.  bastian , m.  blatt , a.  dedner , ch .",
    "engwer , r.  klfkorn , m.  ohlberger , and o.  sander . a generic grid interface for parallel and adaptive scientific computing .",
    "part i : abstract framework . , 82(23):103119 , 2008 .",
    "m.  blatt and p.  bastian . the iterative solver template library . in b.",
    "kgstrm , e.  elmroth , j.  dongarra , and j.  waniewski , editors , _ applied parallel computing .",
    "state of the art in scientific computing _ ,",
    "pages 666675 .",
    "springer berlin heidelberg , 2007 .",
    "a.  dedner , r.  klfkorn , and m.  krnkel .",
    "continuous finite - elements on non - conforming grids using discontinuous galerkin stabilization . in j.",
    "fuhrmann , m.  ohlberger , and ch .",
    "rohde , editors , _ finite volumes for complex applications vii . methods and theoretical aspects _ , pages 207215 .",
    "springer international publishing , 2014 .",
    "w.  gui and i.  babuka .",
    "the @xmath2 , @xmath1 and @xmath2-@xmath1 versions of the finite element method in one dimension .",
    "the error analysis of the @xmath2- and @xmath2-@xmath1 versions .",
    "49(6):613657 , 1986 .                        w.  f. mitchell and m.  a. mcclain .",
    "a comparison of @xmath0-adaptive strategies for elliptic partial differential equations ( long version ) . technical report 7824 , national institute of standards and technology , 2011 .",
    "l.  zhu , s.  giani , p.  houston , and d.  schtzau .",
    "energy norm a posteriori error estimation for @xmath0-adaptive discontinuous galerkin methods for elliptic problems in three dimensions .",
    ", 21(02):267306 , 2011 .",
    "-meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid .",
    ", title=\"fig : \" ]    -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid.,title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on a quadrilateral grid.,title=\"fig : \" ]     s[table - format=4.0 ] s[table - format=5.0 ] s[table - format=1.2e-1 ] s[table - format=2.1 ] s[table - format=1.2e-1 ] s[table - format=1.1 ] s[table - format=1.2e-1 ] s[table - format=1.2 ] & dofs & @xmath224 & eoc & @xmath225 & eoc & @xmath226 & eff .",
    "index + 48 & 480 & 2.30e-03 &  & 2.22e-01 &  & 3.30e-01 & 1.49 + 189 & 1895 & 8.56e-04 & 1.4 & 1.39e-01 & 0.7 & 2.08e-01 & 1.49 + 378 & 4416 & 3.25e-04 & 2.3 & 8.77e-02 & 1.1 & 1.31e-01 & 1.49 + 567 & 8008 & 1.25e-04 & 3.2 & 5.52e-02 & 1.6 & 8.23e-02 & 1.49 + 756 & 12846 & 4.85e-05 & 4.0 & 3.48e-02 & 2.0 & 5.19e-02 & 1.49 + 945 & 18376 & 1.90e-05 & 5.2 & 2.19e-02 & 2.6 & 3.27e-02 & 1.49 + 1104 & 22964 & 7.47e-06 & 8.4 & 1.38e-02 & 4.1 & 2.06e-02 & 1.49 + 1269 & 27480 & 2.95e-06 & 10.4 & 8.70e-03 & 5.1 & 1.30e-02 & 1.49 + 1464 & 32712 & 1.17e-06 & 10.6 & 5.48e-03 & 5.3 & 8.17e-03 & 1.49 +    -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ]    -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ] + -meshes generated by the @xmath0-adaptive sipg method when solving the reentrant corner benchmark problem on an triangular grid.,title=\"fig : \" ]     s[table - format=4.0 ] s[table - format=5.0 ] s[table - format=1.2e-1 ] s[table - format=2.1 ] s[table - format=1.2e-1 ] s[table - format=1.1 ] s[table - format=1.2e-1 ] s[table - format=1.2 ] & dofs & @xmath224 & eoc & @xmath225 & eoc & @xmath226 & eff .",
    "index + 96 & 960 & 1.08e-03 &  & 2.31e-01 &  & 3.04e-01 & 1.32 + 318 & 3290 & 4.09e-04 & 1.6 & 1.44e-01 & 0.8 & 1.92e-01 & 1.33 + 558 & 6930 & 1.57e-04 & 2.6 & 9.06e-02 & 1.2 & 1.21e-01 & 1.33 + 798 & 12014 & 6.08e-05 & 3.4 & 5.70e-02 & 1.7 & 7.60e-02 & 1.33 + 1038 & 18690 & 2.37e-05 & 4.3 & 3.59e-02 & 2.1 & 4.79e-02 & 1.33 + 1227 & 24137 & 9.33e-06 & 7.3 & 2.26e-02 & 3.6 & 3.02e-02 & 1.34 + 1464 & 30643 & 3.68e-06 & 7.8 & 1.42e-02 & 3.9 & 1.90e-02 & 1.34 + 1716 & 37871 & 1.46e-06 & 8.8 & 8.97e-03 & 4.4 & 1.20e-02 & 1.34 + 1899 & 42361 & 5.76e-07 & 16.5 & 5.65e-03 & 8.2 & 7.54e-03 & 1.34 +"
  ],
  "abstract_text": [
    "<S> in this paper we describe generic algorithms and data structures for the implementation of @xmath0-adaptive discontinuous finite element methods in the library . </S>",
    "<S> special attention is given to the often tedious and error - prone task of transferring user data during adaptation . </S>",
    "<S> simultaneously , we generalize the approach to the restriction and prolongation of data currently implemented in to the case of @xmath1- and @xmath0-adaptation . </S>",
    "<S> the ` dune - fem - hpdg ` module described in this paper provides an extensible reference implementation of @xmath0-adaptive discontinuous discrete function spaces . </S>",
    "<S> we give details on its implementation and the extended adaptive interface . </S>",
    "<S> as proof of concept we present the practical realization of an @xmath0-adaptive interior penalty method for elliptic problems . </S>"
  ]
}