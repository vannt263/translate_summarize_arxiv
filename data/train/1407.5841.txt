{
  "article_text": [
    "as is well - known , the logical theory @xmath5 , sometimes called presburger arithmetic , is decidable @xcite .",
    "bchi @xcite showed that if we add the function @xmath6 , for some fixed integer @xmath7 , where @xmath8 , then the resulting theory is still decidable .",
    "this theory is powerful enough to define finite automata ; for a survey , see .    as a consequence , we have the following theorem ( see , e.g. , @xcite ) :    there is an algorithm that , given a proposition phrased using only the universal and existential quantifiers , indexing into one or more @xmath9-automatic sequences , addition , subtraction , logical operations , and comparisons , will decide the truth of that proposition .",
    "[ one ]    here , by a @xmath9-automatic sequence , we mean a sequence @xmath10 computed by deterministic finite automaton with output ( dfao ) @xmath11 . here",
    "@xmath12 is the input alphabet , @xmath13 is the output alphabet , and outputs are associated with the states given by the map @xmath14 in the following manner : if @xmath15 denotes the canonical expansion of @xmath16 in base @xmath9 , then @xmath17 = \\kappa(\\delta(q_0 , ( n)_k))$ ] .",
    "the prototypical example of an automatic sequence is the thue - morse sequence @xmath18 , the fixed point ( starting with @xmath19 ) of the morphism @xmath1 , @xmath20 .",
    "it turns out that many results in the literature about properties of automatic sequences , for which some had only long and involved proofs , can be proved purely mechanically using a decision procedure .",
    "it suffices to express the property as an appropriate logical predicate , convert the predicate into an automaton accepting representations of integers for which the predicate is true , and examine the automaton .",
    "see , for example , the recent papers .",
    "furthermore , in many cases we can explicitly enumerate various aspects of such sequences , such as subword complexity .    beyond base @xmath9 , more exotic numeration systems are known , and one can define automata taking representations in these systems as input .",
    "it turns out that in the so - called pisot numeration systems , addition is computable , and hence a theorem analogous to theorem  [ one ] holds for these systems .",
    "see , for example , .",
    "it is our contention that the power of this approach has not been widely appreciated , and that many results , previously proved using long and involved ad hoc techniques , can be proved with much less effort by phrasing them as logical predicates and employing a decision procedure .",
    "furthermore , many enumeration questions can be solved with a similar approach .    in a previous paper",
    ", we explored the consequences of a decision algorithm for fibonacci representation . in this paper",
    "we discuss our implementation of an analogous algorithm for tribonacci representation .",
    "we use it to reprove some old results from the literature purely mechanically , as well as obtain some new results .    for other works on using computerized formal methods to prove theorems see , for example , .",
    "let the tribonacci numbers be defined , as usual , by the linear recurrence @xmath21 for @xmath22 with initial values @xmath23 , @xmath24 , @xmath25 .",
    "( we caution the reader that some authors use a different indexing for these numbers . ) here are the first few values of this sequence .    [",
    "cols=\"^,^,^,^,^,^,^,^,^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]",
    "recall that a word @xmath26 , whether finite or infinite , is said to have period @xmath27 if @xmath28 = x[i+p]$ ] for all @xmath29 for which this equality is meaningful .",
    "thus , for example , the english word @xmath30 has period @xmath31 .",
    "the _ exponent _ of a finite word @xmath26 , written @xmath32 , is @xmath33 , where @xmath34 is the smallest period of @xmath26 .",
    "thus @xmath35 .",
    "if @xmath36 is an infinite word with a finite period , we say it is _ ultimately periodic_. an infinite word @xmath36 is ultimately periodic if and only if there are finite words @xmath37 such that @xmath38 , where @xmath39",
    ".    a nonempty word of the form @xmath40 is called a _ square _ , and a nonempty word of the form @xmath41",
    "is called a _",
    "cube_. more generally , a nonempty word of the form @xmath42 is called an @xmath16th power . by the _ order _ of a square @xmath40 , cube @xmath41 , or @xmath16th power @xmath42 , we mean the length @xmath43 .",
    "the infinite tribonacci word @xmath44 can be described in many different ways .",
    "in addition to our definition in terms of automata , it is also the fixed point of the morphism @xmath45 , @xmath46 , and @xmath47 .",
    "this word has been studied extensively in the literature ; see , for example , .",
    "it can also be described as the limit of the finite tribonacci words @xmath48 , defined as follows : @xmath49 note that @xmath50 , for @xmath51 , is the prefix of length @xmath52 of @xmath4 .    in the next subsection",
    ", we use our implementation to prove a variety of results about repetitions in @xmath4 .",
    "it is known that all strict epistandard words ( or arnoux - rauzy words ) , are not ultimately periodic ( see , for example , ) . since @xmath4 is in this class , we have the following known result which we can reprove using our method .",
    "the word @xmath4 is not ultimately periodic .",
    "we construct a predicate asserting that the integer @xmath53 is a period of some suffix of @xmath4 : @xmath54 = { \\bf t}[i+p ] .\\ ] ] ( note : unless otherwise indicated , whenever we refer to a variable in a predicate , the range of the variable is assumed to be @xmath55 . ) from this predicate , using our program , we constructed an automaton accepting the language @xmath56 = { \\bf t}[i+p ] \\rbrace .\\ ] ] this automaton accepts the empty language , and so it follows that @xmath57 is not ultimately periodic .",
    "here is the log of our program :    .... p > = 1 with 5 states , in 426ms   i > = n with 13 states , in 3ms    i + p with 150 states , in 31ms     tr[i ] = tr[i + p ] with 102 states , in 225ms      i > = n = > tr[i ] = tr[i + p ] with 518 states , in 121ms       ai i > = n = > tr[i ] = tr[i + p ] with 4 states , in 1098ms        en ai",
    "i > = n = > tr[i ] = tr[i + p ] with 2 states , in 0ms         p > = 1 & en ai i > = n = > tr[i ] = tr[i + p ] with 2 states , in 1ms overall time : 1905ms ....    the largest intermediate automaton during the computation had 5999 states .",
    "a few words of explanation are in order : here `` t '' refers to the sequence @xmath4 , and `` e '' is our abbreviation for @xmath58 and `` a '' is our abbreviation for @xmath59 .",
    "the symbol `` = > '' is logical implication , and `` & '' is logical and .    from now on , whenever we discuss the language accepted by an automaton , we will omit the @xmath60 at the beginning .",
    "we now turn to repetitions . as a particular case of (",
    "* thm .  6.31 and example 7.6 , p.  130 ) and ( * ? ? ?",
    "* example 6.21 ) we have the following result , which we can reprove using our method .",
    "@xmath4 contains no fourth powers .    a natural predicate for the orders of all fourth powers occurring in @xmath4 : @xmath61 = { \\bf t}[i+n+t ] .\\ ] ] however , this predicate could not be run on our prover .",
    "it runs out of space while trying to determinize an nfa with 24904 states .",
    "instead , we make the substitution @xmath62 , obtaining the new predicate @xmath63 = { \\bf t}[j+n ] .\\ ] ]    the resulting automaton accepts nothing , so there are no fourth powers .",
    "here is the log .",
    "n > 0 with 5 states , in 59ms",
    "i < = j with 13 states , in 15ms    3 * n",
    "with 147 states , in 423ms     i + 3 * n with 799 states , in 4397ms      j <",
    "i + 3 * n with 1103 states , in 4003ms       i < = j & j <",
    "i + 3 * n with 1115 states , in 111ms",
    "j + n with 150 states , in 18ms         tr[j ] = tr[j + n ] with 102 states , in 76ms          i < = j & j <",
    "i + 3 * n = > tr[j ] = tr[j + n ] with 6550 states , in 1742ms           aj i < = j & j <",
    "* n = > tr[j ] = tr[j + n ] with 4 states , in 69057ms            ei aj i < = j & j <",
    "* n = > tr[j ] = tr[j + n ] with 2 states , in 0ms             n > 0 & ei aj i < = j & j <",
    "i + 3 * n = > tr[j ] = tr[j + n ] with 2 states , in 0ms overall time : 79901ms ....    the largest intermediate automaton in the computation had 86711 states .",
    "next , we move on to a description of the orders of squares occurring in @xmath4 .",
    "we reprove a result of glen @xcite .",
    "all squares in @xmath4 are of order @xmath52 or @xmath64 for some @xmath51 .",
    "furthermore , for all @xmath51 , there exists a square of order @xmath52 and @xmath64 in @xmath4 . [ squares ]    a natural predicate for the lengths of squares is @xmath65 = { \\bf t}[i+n+t ] .\\ ] ] but when we run our solver on this predicate , we get an intermediate nfa of 4612 states that our solver could not determinize in the the allotted space .",
    "the problem appears to arise from the three different variables indexing @xmath66 . to get around this problem ,",
    "we rephrase the predicate , introducing a new variable @xmath67 that represents @xmath68 .",
    "this gives the predicate @xmath69 = { \\bf t}[j+n ] .\\ ] ] and the following log    .... i < = j with 13 states , in 10ms   i + n with 150 states , in 88ms    j <",
    "i + n with 229 states , in 652ms     i < = j & j <",
    "i + n with 241 states , in 42ms      j + n with 150 states , in 19ms       tr[j ] = tr[j + n ] with 102 states , in 61ms        i < = j & j <",
    "i + n = > tr[j ] = tr[j + n ] with 1751 states , in 341ms         aj i <",
    "= j & j < i + n = > tr[j ] = tr[j + n ] with 11 states , in 4963ms          ei aj i < = j & j <",
    "i + n = > tr[j ] = tr[j + n ] with 4 states , in 4ms           n > 0 & ei aj i < = j & j <",
    "i + n = > tr[j ] = tr[j + n ] with 4 states , in 0ms overall time : 6232ms ....    the resulting automaton accepts exactly the language @xmath70 .",
    "the largest intermediate automaton had 26949 states .",
    "we can easily get more information about the square occurrences in @xmath4 . by modifying our previous predicate ,",
    "we get @xmath71 = { \\bf t}[j+n]\\ ] ] which encodes those @xmath72 pairs such that there is a square of order @xmath16 beginning at position @xmath29 of @xmath4 .",
    "this automaton has only 10 states and efficiently encodes the orders and starting positions of each square in @xmath4 . during the computation , the largest intermediate automaton had 26949 states .",
    "thus we have proved    the language @xmath73 is accepted by the automaton in figure  [ squareorders ] .    ,",
    "width=624 ]    next , we examine the cubes in @xmath4 .",
    "evidently theorem  [ squares ] implies that any cube in @xmath4 must be of order @xmath52 or @xmath64 for some @xmath16 .",
    "however , not every order occurs .",
    "we thus recover the following result of glen @xcite .",
    "the cubes in @xmath4 are of order @xmath52 for @xmath74 , and a cube of each such order occurs .",
    "we use the predicate @xmath75 = { \\bf t}[j+n ] .\\ ] ] when we run our program , we obtain an automaton accepting exactly the language @xmath76 , which corresponds to @xmath52 for @xmath74 .    .... ....    the largest intermediate automaton had 60743 states .    next",
    ", we encode the orders and positions of all cubes .",
    "we build a dfa accepting the language @xmath77 = { \\bf t}[j+n ] \\ } .\\ ] ]    the language @xmath78 is accepted by the automaton in figure  [ cubeorders ] .",
    ", width=624 ]    [ cubes ]    we also computed an automaton accepting those pairs @xmath79 such that there is a factor of @xmath4 having length @xmath16 and period @xmath27 , and @xmath16 is the largest such length corresponding to the period @xmath27 .",
    "however , this automaton has 266 states , so we do not give it here .",
    "we now turn to a characterization of the palindromes in @xmath4 .",
    "once again it turns out that the predicate we previously used in , namely , @xmath80 = { \\bf t}[i+n-1-j],\\ ] ] resulted in an intermediate nfa of 5711 states that we could not successfully determinize .    instead , we used two equivalent predicates .",
    "the first accepts @xmath16 if there is an even - length palindrome , of length @xmath81 , centered at position @xmath29 : @xmath82={\\bf t}[i - j-1 ] .\\ ] ] the second accepts @xmath16 if there is an odd - length palindrome , of length @xmath83 , centered at position @xmath29 : @xmath84={\\bf t}[i - j].\\ ] ]    there exist palindromes of every length @xmath85 in @xmath4 .    for the first predicate , our program outputs the automaton below .",
    "it clearly accepts the tribonacci representations for all @xmath16 .",
    ", width=460 ]    the log of our program follows .    ....",
    "i > = n with 13 states , in 34ms   j < n with 13 states , in 8ms    i + j with 150 states , in 53ms     i - 1 with 7 states , in 155ms      i - 1 - j with 150 states , in 166ms       tr[i + j ] = tr[i - 1 - j ] with 664 states , in 723ms        j < n = > tr[i + j ] = tr[i - 1 - j ] with 3312 states , in 669ms         aj j < n = > tr[i + j ] = tr[i - 1 - j ] with 24 states , in 5782274ms          i > = n & aj j < n = > tr[i + j ] = tr[i - 1 - j ] with 24 states , in 0ms           ei i > = n & aj j < n = > tr[i + j ] = tr[i - 1 - j ] with 4 states , in 6ms overall time : 5784088ms ....    the largest intermediate automaton had 918871 states .",
    "this was a fairly significant computation , taking about two hours cpu time on a laptop .",
    "we omit the details of the computation for the odd - length palindromes , which are quite similar .",
    "a. glen has pointed out to us that this follows from the fact that @xmath4 is episturmian and hence rich , so a new palindrome is introduced at each new position in @xmath66 .",
    "we could also characterize the positions of all nonempty palindromes .",
    "to illustrate the idea , we generated an automaton accepting @xmath72 such that @xmath86 $ ] is an ( even - length ) palindrome .",
    ", width=624 ]    the prefixes are factors of particular interest .",
    "let us determine which prefixes are palindromes :    the prefix @xmath87 $ ] of length @xmath16 is a palindrome if and",
    "only if @xmath88 or @xmath89 .    we use the predicate @xmath90 = { \\bf t}[n-1-i].\\ ] ] the automaton generated is given below .    , width=624 ]",
    "a. glen points out to us that the palindromic prefixes of @xmath4 are precisely those of the form @xmath91 , where @xmath92 is a finite prefix of the infinite word @xmath93 and @xmath94 denotes the `` iterated palindromic closure '' ; see , for example , .",
    "she also points out that these lengths are precisely the integers @xmath95 for @xmath96 .",
    "we now turn to quasiperiods .",
    "an infinite word @xmath10 is said to be _ quasiperiodic _ if there is some finite nonempty word @xmath26 such that @xmath97 can be completely `` covered '' with translates of @xmath26 . here",
    "we study the stronger version of quasiperiodicity where the first copy of @xmath26 used must be aligned with the left edge of @xmath98 and is not allowed to `` hang over '' ; these are called _ aligned covers _ in .",
    "more precisely , for us @xmath99 is quasiperiodic if there exists @xmath26 such that for all @xmath100 there exists @xmath101 with @xmath102 such that @xmath103 , where @xmath104 .",
    "such an @xmath26 is called a _",
    "quasiperiod_. note that the condition @xmath105 implies that , in this interpretation , any quasiperiod must actually be a prefix of @xmath10 .",
    "glen , lev , and richomme characterized the quasiperiods of a large class of words , including the tribonacci word .",
    "however , their characterization did not explicitly give the lengths of the quasiperiods .",
    "we do that in the following result .",
    "a nonempty length-@xmath16 prefix of @xmath4 is a quasiperiod of @xmath4 if and only if @xmath16 is accepted by the following automaton :        we write a predicate for the assertion that the length-@xmath16 prefix is a quasiperiod : @xmath106 = { \\bf t}[j+t ] .\\ ] ] when we do this , we get the automaton above .",
    "these numbers are those @xmath29 for which @xmath107 for @xmath74 , where @xmath108 , @xmath109 , @xmath110 , and @xmath111 for @xmath74 .",
    "next we look at unbordered factors .",
    "a word @xmath112 is said to be a _",
    "border _ of @xmath26 if @xmath112 is both a nonempty proper prefix and suffix of @xmath26 . a word @xmath26 is _ bordered _ if it has at least one border .",
    "it is easy to see that if a word @xmath112 is bordered iff it has a border of length @xmath113 with @xmath114 .",
    "there is an unbordered factor of length @xmath16 of @xmath4 if and only if @xmath115 is accepted by the automaton given below .        as in a previous paper",
    "we can express the property of having an unbordered factor of length @xmath16 as follows @xmath116 \\not= { \\bf t}[i+n - j+t ] .\\ ] ] however , this does not run to completion within the available space on our prover .",
    "instead , make the substitutions @xmath117 and @xmath118 .",
    "this gives the predicate @xmath119 \\not= { \\bf t}[u+t ' ] .\\ ] ]    here is the log :    .... 2 * t with 61 states , in 276ms n < = 2",
    "* t with 79 states , in 216ms t < n with 13 states , in 3ms n < = 2",
    "* t & t < n with 83 states , in 9ms u > =",
    "i with 13 states , in 7ms i + n with 150 states , in 27ms i + n - t with 1088 states , in 7365ms u < i + n - t with 1486 states , in 6041ms u > = i & u < i + n - t with 1540 states , in 275ms u + t with 150 states , in 5ms tr[u ] ! = tr[u + t ] with 102 states , in 22ms u > = i & u < i + n - t & tr[u ] ! = tr[u + t ] with 7489 states , in 3364ms eu u > = i & u < i + n - t & tr[u ] ! = tr[u + t ] with 552 states , in 5246873ms n < = 2",
    "* t & t < n = > eu u > = i & u <",
    "i + n - t & tr[u ] ! = tr[u + t ] with 944 states , in 38ms at n < = 2 * t & t < n = > eu u > = i & u < i + n - t & tr[u ] ! = tr[u + t ] with 47 states , in 1184ms ei at n < = 2 * t & t < n = > eu u > = i & u <",
    "i + n - t & tr[u ] ! = tr[u + t ] with 25 states , in 2ms overall time : 5265707ms ....      next , we turn to some results about lyndon words . recall that a nonempty word @xmath26 is a _ lyndon word _",
    "if it is lexicographically less than all of its nonempty proper prefixes .",
    "there is a factor of length @xmath16 of @xmath4 that is lyndon if and only if @xmath16 is accepted by the automaton given below .",
    "here is a predicate specifying that there is a factor of length @xmath16 that is lyndon : @xmath120={\\bf t}[i+j+u ] ) \\ \\wedge \\   { \\bf t}[i+t ] < { \\bf t}[i+j+t ] .\\ ] ] unfortunately this predicate did not run to completion , so we substituted @xmath121 to get @xmath122={\\bf t}[u'+j ] ) \\",
    "\\wedge \\   { \\bf t}[i+t ]",
    "< { \\bf t}[i+j+t ] .\\ ] ]      recall from section  [ proofsf ] that @xmath123 , where @xmath34 is the smallest period of @xmath92 .",
    "the _ critical exponent _ of an infinite word @xmath36 is the supremum , over all factors @xmath92 of @xmath36 , of @xmath124 .",
    "then tan and wen proved that    the critical exponent of @xmath4 is @xmath125 , the real zero of the polynomial @xmath126 .",
    "a. glen points out that this result can also be deduced from .",
    "let @xmath26 be any factor of exponent @xmath127 in @xmath4 . from theorem  [ cubes ]",
    "we know that such @xmath26 exist .",
    "let @xmath104 and @xmath27 be the period , so that @xmath128 . then by considering the first @xmath129 symbols of @xmath26 , which form a cube , we have by theorem  [ cubes ] that @xmath130 .",
    "so it suffices to determine the largest @xmath16 corresponding to every @xmath27 of the form @xmath52 .",
    "we did this using the predicate     of longest factors having period @xmath131 of tribonacci sequence , width=624 ]    from inspection of the automaton , we see that the maximum length of a factor @xmath132 having period @xmath133 , @xmath134 , is given by @xmath135_t , & \\text{if $ j = 3i+1 \\geq 4 $ } ; \\\\      [ 110(100)^{i-1 } 01]_t , & \\text{if $ j = 3i+2 \\geq 5 $ } ; \\\\      [ 110(100)^{i-1 } 011]_t , & \\text{if $ j = 3i+3 \\geq 6$}.      \\end{cases}\\ ] ] a tedious induction shows that @xmath136 satisfies the linear recurrence @xmath137 for @xmath138 .",
    "hence we can write @xmath136 as a linear combination tribonacci sequences and the constant sequence @xmath139 , and solving for the constants we get @xmath140 for @xmath134",
    ".    the critical exponent of @xmath66 is then @xmath141 .",
    "now @xmath142 hence @xmath143 tends to @xmath144 .",
    "we can also ask the same sort of questions about the _ initial critical exponent _ of a word @xmath98 , which is the supremum over the exponents of all prefixes of @xmath98 .    the initial critical exponent of @xmath4 is @xmath145 .",
    "we create an automaton @xmath146 accepting the language @xmath147 \\text { has least period } p \\ } .\\ ] ] it is depicted in figure  [ ice ] below .",
    "an analysis similar to that we gave above for the critical exponent gives the result .",
    ", width=624 ]    recall that a primitive word is a non - power ; that is , a word that can not be written in the form @xmath42 where @xmath16 is an integer @xmath148 .",
    "the only prefixes of the tribonacci word that are powers are those of length @xmath149 for @xmath74 .    the predicate @xmath150={\\bf t}[d+j ] ) \\ \\wedge \\",
    "( \\forall k < d \\ { \\bf t}[k ] = { \\bf t}[n - d+k])\\ ] ] asserts that the prefix @xmath87 $ ] is a power .",
    "when we run this through our program , the resulting automaton accepts @xmath151 , which corresponds to @xmath152 for @xmath74 .",
    "mimicking the base-@xmath9 ideas in , we can also mechanically enumerate many aspects of tribonacci - automatic sequences .",
    "we do this by encoding the factors having the property in terms of paths of an automaton .",
    "this gives the concept of _ tribonacci - regular sequence _ roughly speaking , a sequence @xmath153 taking values in @xmath154 is tribonacci - regular if the set of sequences @xmath155_t)_{w \\in \\sigma_2^ * } \\ : \\ x \\in \\sigma_2^ * \\}\\ ] ] is finitely generated .",
    "here we assume that @xmath156_t)$ ] evaluates to @xmath19 if @xmath157 contains the word @xmath158 .",
    "every tribonacci - regular sequence @xmath153 has a _ linear representation _ of the form @xmath159 where @xmath160 and @xmath161 are row and column vectors , respectively , and @xmath162 is a matrix - valued morphism , where @xmath163 and @xmath164 are @xmath165 matrices for some @xmath166 , such that @xmath167 whenever @xmath168_t = n$ ] .",
    "the _ rank _ of the representation is the integer @xmath169 .",
    "recall that if @xmath36 is an infinite word , then the subword complexity function @xmath170 counts the number of distinct factors of length @xmath16 .",
    "then , in analogy with , we have    if @xmath36 is tribonacci - automatic , then the subword complexity function of @xmath36 is tribonacci - regular .    using our implementation ,",
    "we can obtain a linear representation of the subword complexity function for @xmath4 .",
    "an obvious choice is to use the language @xmath171 \\not= { \\bf t}[j .. j+n-1 ] \\ } , \\ ] ] based on a predicate that expresses the assertion that the factor of length @xmath16 beginning at position @xmath29 has never appeared before .",
    "then , for each @xmath16 , the number of corresponding @xmath29 gives @xmath172 .",
    "however , this does not run to completion in our implementation in the allotted time and space . instead ,",
    "let us substitute @xmath173 and and @xmath174 to get the predicate @xmath175\\not= { \\bf t}[u+k ] ) ) ) ) .\\ ] ] this predicate is close to the upper limit of what we can compute using our program .",
    "the largest intermediate automaton had 1230379 states and the program took 12323.82 seconds , giving us a linear representation @xmath159 rank @xmath176 .",
    "when we minimize this using the algorithm in we get the rank-@xmath177 linear representation @xmath178 \\\\ m_0 & = \\left [ \\begin{array}{cccccccccccc } 1 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0\\\\ 0 &   0 &   1 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0 &   0\\\\ 0 &   0 &   0 &   0 &   1 &   0 &   0 &   0 &   0 &   0 &   0 &   0\\\\ -1 &   0 &   1 &   0 &   1 &   0 &   0 &   0 &   0 &   0 &   0 &   0\\\\ 0 &   0 &   0 &   0 &   0 &   0 &   1 &   0 &   0 &   0 &   0 &   0\\\\ -1 &   0 &   1 &   0 &   0 &   0 &   1 &   0 &   0 &   0 &   0 &   0\\\\ -2 &   0 &   1 &   0 &   1 &   0 &   1 &   0 &   0 &   0 &   0 &   0\\\\ -3 &   0 &   2 &   0 &   1 &   0 &   1 &   0 &   0 &   0 &   0 &   0\\\\ -4 &   0 &   2 &   0 &   2 &   0 &   1 &   0 &   0 &   0 &   0 &   0\\\\ -5 &   0 &   2 &   0 &   2 &   0 &   2 &   0 &   0 &   0 &   0 &   0\\\\ -6 &   0 &   2 &   0 &   3 &   0 &   2 &   0 &   0 &   0 &   0 &   0\\\\ -10 &   0 &   3 &   0 &   4 &   0 &   4 &   0 &   0 &   0 &   0 &   0\\\\ \\end{array } \\right ] \\\\",
    "m_1 & = \\left [ \\begin{array}{cccccccccccc } 0&1&0&0&0&0&0&0&0&0&0&0\\\\ 0&0&0&1&0&0&0&0&0&0&0&0\\\\ 0&0&0&0&0&1&0&0&0&0&0&0\\\\ 0&0&0&0&0&0&0&0&0&0&0&0\\\\ 0&0&0&0&0&0&0&1&0&0&0&0\\\\ 0&0&0&0&0&0&0&0&1&0&0&0\\\\ 0&0&0&0&0&0&0&0&0&1&0&0\\\\ 0&0&0&0&0&0&0&0&0&0&1&0\\\\ 0&0&0&0&0&0&0&0&0&0&0&0\\\\ 0&0&0&0&0&0&0&0&0&0&0&1\\\\ 0&0&0&0&0&0&0&0&0&0&0&0\\\\ 0&0&0&0&0&0&0&0&0&0&0&0\\\\ \\end{array } \\right ] \\\\ v ' & = [ 1\\ 3\\ 5\\ 7\\ 9\\ 11\\ 15\\ 17\\ 21\\ 29\\ 33\\ 55]^r \\\\\\end{aligned}\\ ] ]    comparing this to an independently - derived linear representation of the function @xmath83 , we see they are the same . from this",
    "we get a well - known result ( see , e.g. , ):    the subword complexity function of @xmath4 is @xmath83 .",
    "[ sturmcomp ]    we now turn to computing the exact number of square occurrences in the finite tribonacci words @xmath50 .    to solve this using our approach ,",
    "we first generalize the problem to consider any length-@xmath16 prefix of @xmath50 , and not simply the prefixes of length @xmath52 .",
    "the following predicate represents the number of distinct squares in @xmath87 $ ] : @xmath179 = { \\bf t}[i+j .. i+2j-1 ]   \\\\ \\text { and } \\forall i ' < i \\   { \\bf t}[i' .. i'+2j-1 ] \\not= { \\bf t}[i .. i+2j-1 ] \\ } .\\end{gathered}\\ ] ] this predicate asserts that @xmath180 $ ] is a square occurring in @xmath87 $ ] and that furthermore it is the first occurrence of this particular word in @xmath87 $ ] .",
    "the second represents the total number of occurrences of squares in @xmath87 $ ] : @xmath181 = { \\bf t}[i+j .. i+2j-1 ] \\ } .\\ ] ] this predicate asserts that @xmath180 $ ] is a square occurring in @xmath87 $ ] .",
    "unfortunately , applying our enumeration method to this suffers from the same problem as before , so we rewrite it as @xmath182 = { \\bf t}[u+j]\\ ] ] when we compute the linear representation of the function counting the number of such @xmath29 and @xmath67 , we get a linear representation of rank @xmath183 .",
    "now we compute the minimal polynomial of @xmath184 which is @xmath185 .",
    "solving a linear system in terms of the roots ( or , more accurately , in terms of the sequences @xmath139 , @xmath16 , @xmath52 , @xmath186 , @xmath187 , @xmath188 , @xmath189 , @xmath190 ) gives    the total number of occurrences of squares in the tribonacci word @xmath50 is @xmath191 for @xmath74 .    in a similar way , we can count the occurrences of cubes in the finite tribonacci word @xmath50 . here",
    "we get a linear representation of rank 46 .",
    "the minimal polynomial for @xmath184 is @xmath192 . using analysis exactly like the square case , we easily find    let @xmath193 denote the number of cube occurrences in the tribonacci word @xmath50 .",
    "then for @xmath22 we have @xmath194 + { 1 \\over 12 } [ n \\equiv \\modd{1 } { 3 } ] -{7 \\over 12 } [ n \\equiv \\modd{2 } { 3 } ] .\\end{gathered}\\ ] ] here @xmath195 $ ] is iverson notation , and equals @xmath139 if @xmath34 holds and @xmath19 otherwise .",
    "of course , our technique can also prove things about words other than @xmath4 .",
    "for example , consider the binary tribonacci word @xmath196 obtained from @xmath4 by mapping each letter @xmath29 to @xmath197 .",
    "the critical exponent of @xmath198 is @xmath199 .",
    "we use our method to verify that @xmath198 has @xmath200-powers and no larger ones .",
    "( these powers arise only from words of period @xmath201 . )",
    "we can derive some results about the abelian properties of the tribonacci word @xmath4 by proving the analogue of theorem 63 of :    let @xmath16 be a non - negative integer and let @xmath202 be a tribonacci representation of @xmath16 , possibly with leading zeros , with @xmath203 .",
    "then    * @xmath204|_0 = [ e_1 e_2 \\cdots e_{j-1}]_t + e_j$ ] .",
    "* @xmath204|_1 = [ e_1 e_2 \\cdots e_{j-2}]_t + e_{j-1}$ ] . *",
    "@xmath204|_2 = [ e_1 e_2 \\cdots e_{j-3}]_t + e_{j-2}$ ] .",
    "[ tribab ]    by induction , in analogy with the proof of .",
    "recall that the parikh vector @xmath205 of a word @xmath26 over an ordered alphabet @xmath206 is defined to be @xmath207 , the number of occurrences of each letter in @xmath26 .",
    "recall that the abelian complexity function @xmath208 counts the number of distinct parikh vectors of the length-@xmath16 factors of an infinite word @xmath98 .    using theorem  [ tribab ]",
    "we get another proof of a recent result of turek @xcite .",
    "the abelian complexity function of @xmath4 is tribonacci - regular .",
    "first , from theorem  [ tribab ] there exists an automaton @xmath209 such that @xmath210 is accepted iff @xmath211)$ ] .",
    "in fact , such an automaton has 32 states .    using this automaton",
    ", we can create a predicate @xmath212 such that the number of @xmath29 for which @xmath212 is true equals @xmath213 .",
    "for this we assert that @xmath29 is the least index at which we find an occurrence of the parikh vector of @xmath214 $ ] : @xmath215    note that exactly the same proof would work for any word and numeration system where the parikh vector of prefixes of length @xmath16 is `` synchronized '' with @xmath16 .    in principle",
    "we could mechanically compute the tribonacci - regular representation of the abelian complexity function using this technique , but with our current implementation this is not computationally feasible .",
    "any morphic image of the tribonacci word is tribonacci - automatic .    in analogy with corollary 69 of .",
    "there are a number of things we have not succeeded in computing with our prover because it ran out of space .",
    "these include    * mirror invariance of @xmath4 ( that is , if @xmath26 is a finite factor then so is @xmath216 ) ; * counting the number of special factors of length @xmath16 ( although it can be deduced from the subword complexity function ) ; * statistics about , e.g , lengths of squares , cubes , etc . , in the `` flipped '' tribonacci sequence , the fixed point of @xmath217 , @xmath218 , @xmath3 ; * recurrence properties of the tribonacci word ;",
    "* counting the number of distinct squares ( not occurrences ) in the finite tribonacci word @xmath50 .",
    "* abelian complexity of the tribonacci word .    in the future ,",
    "an improved implementation may succeed in resolving these in a mechanical fashion .",
    "our program is written in java , and was developed using the eclipse development environment .",
    "we used the dk.brics.automaton package , developed by anders mller at aarhus university , for automaton minimization .",
    "maple 15 was used to compute characteristic polynomials .",
    "the graphviz package was used to display automata .",
    "we used a program written in apl x to implement minimization of linear representations .",
    "our program consists of about 2000 lines of code .",
    "we used hopcroft s algorithm for dfa minimization .",
    "a user interface is provided to enter queries in a language very similar to the language of first - order logic .",
    "the intermediate and final result of a query are all automata . at every intermediate step , we chose to do minimization and determinization , if necessary .",
    "each automaton accepts tuples of integers in the numeration system of choice .",
    "the built - in numeration systems are ordinary base-@xmath9 representations , fibonacci base , and tribonacci base .",
    "however , the program can be used with any numeration system for which an automaton for addition and ordering can be provided .",
    "these numeration system - specific automata can be declared in text files following a simple syntax . for the automaton resulting from a query",
    "it is always guaranteed that if a tuple @xmath219 of integers is accepted , all tuples obtained from @xmath219 by addition or truncation of leading zeros are also accepted . in tribonacci representation , we make sure that the accepting integers do not contain three consecutive @xmath139 s",
    ".    the source code and manual will soon be available for free download .",
    "we are very grateful to amy glen for her recommendations and advice .                  j.  r. bchi .",
    "weak secord - order arithmetic and finite automata .",
    "( 1960 ) , 6692",
    ". reprinted in s. mac lane and d. siefkes , eds .",
    ", _ the collected works of j. richard bchi _ , springer - verlag , 1990 , pp .  398424 .                      c.  frougny and b.  solomyak . on representation of integers in linear numeration systems",
    ". in m.  pollicott and k.  schmidt , editors , _ ergodic theory of @xmath220 actions ( warwick , 19931994 ) _ , vol .",
    "228 of _ london mathematical society lecture note series _ , pp . 345368 .",
    "cambridge university press , 1996 .",
    "d.  goc , d.  henshall , and j.  shallit .",
    "automatic theorem - proving in combinatorics on words . in n.  moreira and r.  reis , editors , _ ciaa 2012 _ , vol .",
    "7381 of _ lecture notes in computer science _ , pp . 180191 .",
    "springer - verlag , 2012 .",
    "d.  goc , h.  mousavi , and j.  shallit . on the number of unbordered factors . in a .-",
    "dediu , c.  martin - vide , and b.  truthe , editors , _ lata 2013 _ , vol .",
    "7810 of _ lecture notes in computer science _ , pp . 299310 .",
    "springer - verlag , 2013 .",
    "d.  goc , k.  saari , and j.  shallit .",
    "primitive words and lyndon words in automatic and linearly recurrent sequences . in a .- h .",
    "dediu , c.  martin - vide , and b.  truthe , editors , _ lata 2013 _ , vol .",
    "7810 of _ lecture notes in computer science _ , pp . 311322 .",
    "springer - verlag , 2013 .",
    "d.  goc , l.  schaeffer , and j.  shallit .",
    "the subword complexity of @xmath9-automatic sequences is @xmath9-synchronized . in m .-",
    "bal and o.  carton , editors , _ dlt 2013 _ , vol .",
    "7907 of _ lecture notes in computer science _ , pp . 252263 .",
    "springer - verlag , 2013 .",
    "m.  presburger .",
    "die volstndigkeit eines gewissen systems der arithmetik ganzer zahlen , in welchem die addition als einzige operation hervortritt . in _",
    "sparawozdanie z i kongresu matematykw krajw slowianskich _ , pp .",
    "92101 , 395 .",
    "warsaw , 1929 .",
    "j.  shallit .",
    "decidability and enumeration for automatic sequences : a survey . in a.",
    "a. bulatov and a.  m. shur , editors , _ csr 2013 _ , vol .",
    "7913 of _ lecture notes in computer science _ , pp . 4963 .",
    "springer - verlag , 2013 ."
  ],
  "abstract_text": [
    "<S> we implement a decision procedure for answering questions about a class of infinite words that might be called ( for lack of a better name ) `` tribonacci - automatic '' . </S>",
    "<S> this class includes , for example , the famous tribonacci word @xmath0 , the fixed point of the morphism @xmath1 , @xmath2 , @xmath3 . </S>",
    "<S> we use it to reprove some old results about the tribonacci word from the literature , such as assertions about the occurrences in @xmath4 of squares , cubes , palindromes , and so forth . </S>",
    "<S> we also obtain some new results .    </S>",
    "<S> [ theorem]corollary [ theorem](almost ) theorem [ theorem]lemma [ theorem]proposition    [ theorem]definition [ theorem]example [ theorem]conjecture [ theorem]open problem [ theorem]procedure    [ theorem]remark    note : some sections of this paper have been taken , more or less verbatim , from another preprint of the authors and c. f. du and l. schaeffer . </S>"
  ]
}