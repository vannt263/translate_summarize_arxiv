{
  "article_text": [
    "a _ _ m__atching between two point sets @xmath0 and @xmath1 defines a relationship between them .",
    "the concept of the matching is used in various fields such as computational biology @xcite , pattern recognition @xcite , computer vision @xcite , music information retrieval @xcite , and computational music theory @xcite .",
    "a _ many - to - many matching _ between @xmath0 and @xmath1 maps each point of @xmath0 to at least one point of @xmath1 and vice - versa .",
    "eiter and mannila @xcite reduced the many - to - many matching problem to the minimum - weight perfect matching problem in a bipartite graph and solved it in @xmath11 time .",
    "consider two point sets @xmath12 and @xmath13 with @xmath14 .",
    "let @xmath15 and @xmath16 denote the demand sets of @xmath0 and @xmath1 , respectively .",
    "let @xmath17 and @xmath18 be the capacity sets of @xmath0 and @xmath1 , respectively .",
    "_ the minimum - cost many - to - many matching with demands and capacities _ , here called _",
    "mmdc _ matching , is a matching that matches each point @xmath19 to at least @xmath4 and at most @xmath5 points in @xmath1 , and each point @xmath20 to at least @xmath7 and at most @xmath8 points in @xmath0 , such that the sum of the matching costs is minimized .",
    "a function @xmath21 represents the cost of the pairing @xmath22 .",
    "note that @xmath21 can be zero , positive or negative .",
    "the cost of a matching is the sum of the costs of the pairings @xmath23 for all @xmath24 and @xmath25 .",
    "schrijver @xcite proved that an mmdc matching can be found in strongly polynomial time . in this paper , we propose a new @xmath26 algorithm for the mmdc matching problem based on the well known approach of eiter and mannila @xcite and provide an upper bound for it .",
    "we construct a complete bipartite graph such that by applying the hungarian method on it the demands and capacity limitations of the elements be satisfied . in the following ,",
    "we explain how our complete bipartite graph @xmath27 is constructed .",
    "we represent a set of the related nodes using a rectangle , each connection between two nodes with a line , and each node with a circle .",
    "so a connection between two nodes is shown using a line that connects the two corresponding circles .",
    "a directed line is used to show a branched line such that the input line branches into the output lines . _",
    "a complete connection _ between two sets is a connection where each node of one set is connected to the all nodes of the other set .",
    "we show a complete connection using a line connecting the two corresponding sets .",
    "let @xmath28 be a bipartition of @xmath27 , where @xmath29 and @xmath30 .",
    "the points of the sets @xmath31 , @xmath32 , and @xmath33 for all @xmath24 are called the main points , since they are copies of the input points . on the other hand ,",
    "the points of the sets @xmath34 and @xmath35 for all @xmath25 are called the dummy points . all edges",
    "@xmath36 that their both end points are main points , that is @xmath37 and @xmath38 for @xmath24 , are called the main edges .",
    "the hungarian method computes a _ perfect _ matching where each node is incident to a unique edge .",
    "we aim to find an mmdc matching that in which two or more nodes may be mapped to a same node , that is a node may be selected more than once .",
    "so our constructed graph contains multiple copies of each elements to simulate this situation .",
    "let @xmath39 for @xmath24 be the set of the @xmath4 copies of the point @xmath40 .",
    "each set @xmath31 is completely connected to the set @xmath41 for @xmath24 .",
    "this complete connection is shown using a line connecting the two corresponding rectangles of @xmath31 and @xmath32 .",
    "we define a function @xmath42 for @xmath31 sets , such that @xmath43 .",
    "each @xmath31 set guarantees that each point @xmath3 is matched to at least @xmath4 elements of @xmath1 .",
    "note that each node of @xmath0 has a limited capacity , i.e. it must be matched to at most a given number of the points of the other set .",
    "each point @xmath40 is copied @xmath44 times and constitute the @xmath33 set .",
    "let @xmath45 for @xmath24 .",
    "@xmath33 sets guarantee that each point @xmath6 is matched to at least @xmath7 elements of @xmath0 . moreover , each set @xmath33 assures that each point @xmath40 is matched to at most @xmath46 elements .",
    "each @xmath33 is completely connected to @xmath32 , where the cost of @xmath47 edge is equal to @xmath21 for all @xmath48 .",
    "assume that all nodes @xmath49 for @xmath24 constitute sets , called @xmath50 .",
    "in fact , the set @xmath50 is @xmath51 copies of @xmath52 .",
    "we use the @xmath53 set to limit the number of the points that can be matched to @xmath6 for @xmath10 .",
    "there is a zero wighted complete connection between the nodes of @xmath50 and @xmath35 for @xmath25 .",
    "let @xmath54 and @xmath55 .",
    "select an arbitrary number @xmath56 such that @xmath57 , there exists a @xmath56 weighted complete connection between the nodes of @xmath50 and @xmath34 for all @xmath58 .",
    "@xmath34 sets guarantee that the matching is a minimum cost matching .",
    "there exists another set that compensates the bipartite graph , called @xmath59 .",
    "the input of the hungarian algorithm is a complete bipartite graph , i.e. both parts of the input bipartite graph have an equal number of points .",
    "so we should balance the parts of our constructed bipartite graph before using the hungarian algorithm .",
    "we have @xmath60@xmath61@xmath62 , and @xmath63    let @xmath64 , we add @xmath59 to @xmath65 or @xmath66 depending on the values of @xmath67 and @xmath68 .",
    "two cases arise : @xmath69 and @xmath70 . in the first case @xmath71 , so we add the @xmath59 set to @xmath65 .",
    "there is a zero weighted complete connection between @xmath32 and @xmath59 for all @xmath24 .",
    "now assume that @xmath70 . in this case , the compensator set @xmath59 is inserted to @xmath66 . in this case",
    ", there is a complete connection between @xmath34 and @xmath59 that in which the cost of the edges is an arbitrary number @xmath72 with @xmath73 .",
    "consequently , the first priority of the points of @xmath34 is the points of @xmath50 set .",
    "moreover , @xmath33 is completely connected to @xmath59 with zero weighted edges .",
    "the complete bipartite graph that in which @xmath70 is shown in figure 1 .",
    "we claim that from a minimum weight perfect matching in @xmath74 , we can get an mmdc matching between @xmath0 and @xmath1 .",
    "let @xmath75 be the union of the main edges of a minimum weight perfect matching in @xmath27 . in the following , we prove that the weight of @xmath75 is equal to the cost of an mmdc matching between @xmath0 and @xmath1 , called @xmath76 .",
    "@xmath77 .    * proof .",
    "* we get from @xmath76 a perfect matching @xmath78 in our complete bipartite graph @xmath27 , such that the cost of the union of the main edges @xmath79 be equal the cost of @xmath76 , that is @xmath80 .",
    "so we want to convert an mmdc matching between @xmath0 and @xmath1 to a perfect matching in @xmath27 . in a perfect",
    "matching each vertex is incident to exactly one edge , so we relate an edge of @xmath27 to each pairing of @xmath76 as following",
    ".    let @xmath81 be the number of the points @xmath6 that are matched to @xmath19 in the mmdc matching @xmath76 .",
    "it is obvious that @xmath82 .",
    "for each pairing @xmath22 in @xmath76 , we connect @xmath49 to one of unmatched points of @xmath31 , that is @xmath83 with @xmath84 .",
    "then , depending on the value of @xmath81 two cases arise :    * @xmath85 . in this situation",
    ", we add the zero weighted edges of @xmath27 that connect each @xmath86 to one of unmatched nodes of @xmath59 for all @xmath87 .",
    "* @xmath88 . in this case",
    ", we need to match the @xmath89 nodes of @xmath33 with the nodes of @xmath32 .",
    "so , for each pairing @xmath22 of the @xmath89 remaining pairings we add an edge of @xmath27 that connects @xmath90 to @xmath49 .",
    "then , if yet there exist nodes of @xmath33 that have not been matched , for each of them we select a zero weighted edge of @xmath27 that connects it to an unmatched node of @xmath59 , and add it to the matching @xmath78 .",
    "now , for each @xmath91 we add the edge of @xmath27 that connects it to an unmatched node of @xmath50 .",
    "the points of @xmath34 are matched to the points of @xmath50 , unless no points remain unmatched in @xmath50 .",
    "so we first add the edges that connect the nodes of @xmath34 to the remaining unmatched nodes of @xmath50 .",
    "then , we add the edges that connect the unmatched nodes of @xmath34 , if exists , to the unmatched nodes of @xmath59 .",
    "note that some points of @xmath32 sets for @xmath9 may remain unmatched .",
    "we match the remaining unmatched points of the @xmath32 sets with the unmatched nodes of @xmath59 .",
    "recall that this situation arises when @xmath69 .",
    "since all nodes of @xmath27 are selected once , @xmath78 is a perfect matching .",
    "for each @xmath92 there is an edge with equal weight in @xmath79 , so @xmath80 .",
    "@xmath75 is the union of the main edges incident to the nodes of @xmath79 in a minimum weight perfect matching in @xmath27 , that is @xmath93 , so @xmath94 .",
    "@xmath95 .    * proof .",
    "* from the union of the main edges @xmath75 of a minimum weight perfect matching in @xmath27 , we get an mmdc matching @xmath96 between @xmath0 and @xmath1 , such that the cost of @xmath96 be equal to the cost of @xmath75 , that is @xmath97 . for each edge @xmath98 , if @xmath99 or @xmath100 then we add the pairing @xmath23 to @xmath96 .",
    "otherwise , no pairing is added to @xmath96 .",
    "for each @xmath19 for @xmath24 , there exists the set @xmath31 in @xmath27 with @xmath4 nodes which is connected only to one set , @xmath32 .",
    "so the nodes of each @xmath31 are selected by some nodes of @xmath32 , that is @xmath49 for @xmath25 .",
    "hence , each @xmath19 for @xmath24 is selected at least @xmath4 times , so the demand of the point @xmath40 is satisfied . in @xmath27 there",
    "exist @xmath4 plus @xmath101 copies of each point @xmath40 , that is the points of @xmath31 plus the points of @xmath102 .",
    "so the number of the points that are matched to each @xmath19 is at most @xmath46 .",
    "consider the sets @xmath50 with @xmath25 , recall that @xmath103 and the points of @xmath35 sets are connected to @xmath50 for @xmath25 by zero weighted edges .",
    "@xmath35 is connected only to @xmath50 , so @xmath35 selects @xmath104 number of the @xmath51 members of @xmath50 and @xmath8 points remain unmatched in @xmath50 .",
    "suppose that @xmath105 points of @xmath8 points in @xmath50 are selected by the points of @xmath31 sets for @xmath24 , so the @xmath106 remaining points of @xmath50 should be selected by the other sets that are connected to it .",
    "we discuss two cases , depending on the value of @xmath105 .    * if @xmath107 then @xmath108 .",
    "then , @xmath34 selects the @xmath109 elements of the remaining members of @xmath50 .",
    "we have @xmath110 so the remaining @xmath111 members of @xmath50 are selected by the points of @xmath33 sets .",
    "note that @xmath105 points of @xmath49 points for all @xmath24 are selected by the points of @xmath31 sets and @xmath111 points of them are selected by @xmath33 sets .",
    "the demand of the point @xmath52 is satisfied , since @xmath112 . *",
    "if @xmath113 then @xmath114 and all the @xmath115 remaining members of @xmath50 are selected by the points of @xmath34 , so the result is minimum cost result .",
    "the cost of @xmath96 is equal to the weight of @xmath75 , since for each edge of @xmath75 we add a pairing with equal cost to @xmath96 , so @xmath116 . on the other hand ,",
    "@xmath96 is a many to many matching that satisfies the demands and capacities of @xmath0 and @xmath1 .",
    "@xmath76 is an mmdc matching between @xmath0 and @xmath1 , so @xmath117 .",
    "thus @xmath118 .",
    "let @xmath75 be the union of the main edges of a minimum weight perfect matching in @xmath27 , and let @xmath76 be an mmdc matching between @xmath0 and @xmath1 .",
    "then , @xmath119 .",
    "* by lemma 1 and lemma 2 @xmath77 and @xmath95 , respectively .",
    "so @xmath119 .",
    "the time - complexity of the hungarian method is @xmath120 , where the number of the nodes of the input graph is @xmath121 @xcite .",
    "the number of the nodes of our complete bipartite graph is @xmath122 , so the complexity of our algorithm is @xmath26 .",
    "we presented an @xmath26 algorithm for the many to many matching with demands and capacities . in this version of the many - to - many matching problem ,",
    "the points of the two sets @xmath0 and @xmath1 are @xmath2-dimensional points , with @xmath123 .",
    "we can limit their dimensions to one or two dimensional .",
    "it is expected that the complexity of the @xmath2-dimensional matching problem will be reduced by exploiting the geometric information .",
    "so the one and two dimensional version of this problem remains open ."
  ],
  "abstract_text": [
    "<S> let @xmath0 and @xmath1 be two finite sets of points with total cardinality @xmath2 , _ the many to many point matching with demands and capacities _ matches each point @xmath3 to at least @xmath4 and at most @xmath5 points in @xmath1 , and each point @xmath6 to at least @xmath7 and at most @xmath8 points in @xmath0 for all @xmath9 and @xmath10 . in this paper , we present an upper bound for this problem using our new polynomial time algorithm .    </S>",
    "<S> many to many matching , hungarian method , bipartite graph , points with demands and capacities , minimum perfect matching </S>"
  ]
}