{
  "article_text": [
    "we consider the algorithmic problem of finding a minimum weight cycle ( i.e. , weighted girth ) in weighted directed and undirected graphs . surprisingly , although the problem is very fundamental , the state of the art for it dates back to a seminal paper by itai and rodeh  @xcite , first presented in stoc77 , that deals only with the _ unweighted _ variant of the problem .",
    "itai and rodeh presented an @xmath13-time algorithm for an @xmath0-node unweighted undirected graph and an @xmath14-time algorithm for an @xmath0-node unweighted directed graph .",
    "( here @xmath15 is the exponent of square matrix multiplication over a ring , and @xmath16  @xcite . ) in the same paper , itai and rodeh posed the question whether similar results exist for weighted graphs . in this paper",
    "we provide a positive answer to this longstanding open problem by presenting @xmath17-time algorithms for directed graphs with integral edge weights in @xmath7 $ ] ( and no negative cycles ) and for undirected graphs with integral edge weights in @xmath6 $ ] .",
    "our algorithmic results are obtained using new reductions that carefully combine new algorithmic ideas and special combinatorial properties of the minimum weight cycle .",
    "more specifically , we reduce the problem to the problem of finding a minimum weight _ triangle _ in a @xmath3node _ undirected _ graph with weights in @xmath4 .",
    "this reveals also a surprising phenomenon : a minimum cycle with an arbitrary number of weighted edges can be efficiently `` encoded '' using a cycle of only _ three _ edges whose weights are roughly within the same interval ! moreover ,",
    "our results imply a strong _ equivalence _ between the cycle and triangle problems .",
    "[ [ minimum - cycle - and - apsp . ] ] minimum cycle and apsp .",
    "+ + + + + + + + + + + + + + + + + + + + + + +    recently , in focs10 vassilevska w. and williams  @xcite showed that the minimum weight cycle problem is equivalent to many other graph and matrix problems for which no truly subcubic ( @xmath9-time for constant @xmath10 ) algorithms are known .",
    "they showed that if there is a truly subcubic algorithm for the minimum weight cycle problem , then many other problems such as the all - pairs - shortest - paths ( apsp ) problem also have truly subcubic algorithms .",
    "hence , the minimum weight cycle problem has a pivotal role in understanding the complexity of many fundamental polynomial problems in a similar spirit to the role of 3sat for np - hard problems .",
    "it is interesting to compare the minimum cycle problem with apsp .",
    "in directed graphs , the minimum weight cycle can be computed easily by computing apsp . given the distance @xmath18 $ ] between all pairs of vertices @xmath19 , the weight of the minimum cycle is @xmath20 $ ] .",
    "hence , we can compute the minimum weight cycle in cubic time using floyd - warshall s apsp algorithm  @xcite ( or pettie s @xmath21 time algorithm  @xcite if the graph is sparse ) .",
    "if the edge weights are integers in @xmath7 $ ] , we can use zwick s  @xcite @xmath8 time algorithm to obtain an algorithm for minimum cycle with the same runtime . improving zwick",
    "s running time and in particular obtaining an @xmath17 running time for apsp in directed graphs is one of today s frontier questions in graph algorithms .",
    "our new @xmath17-time algorithm for minimum cycle in directed graphs shows that it is not really necessary to compute all pairs shortest paths in order to compute the minimum weight cycle in directed graphs .",
    "this seems to reveal a strong separation between apsp and the minimum cycle problem in directed graphs .",
    "the minimum cycle problem in undirected graphs differs from the problem in directed graphs in that the reduction to apsp no longer works : an edge @xmath22 might also be the shortest path from @xmath23 to @xmath24 , and @xmath20 $ ] might be @xmath25 and not the weighted girth of the graph .",
    "this represents a nontrivial hurdle .",
    "nevertheless , in this paper we show how to overcome this hurdle and obtain an @xmath17 time algorithm for undirected graphs with integer weights in @xmath6 $ ] .",
    "this matches the runtime of the best apsp algorithm in such graphs : in a paper first presented at stoc92 , seidel  @xcite showed that apsp in undirected and unweighted @xmath0-node graphs can be solved in @xmath26 time . in focs99 ,",
    "shoshan and zwick  @xcite ( following galil and margalit  @xcite ) showed that apsp in undirected @xmath0-node graphs with integer edge weights in @xmath27 $ ] can be solved in @xmath17 time , thus extending seidel s running time to weighted undirected graphs .",
    "[ [ our - results - reductions - and - algorithms . ] ] our results : reductions and algorithms .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we develop our algorithms by first obtaining extremely efficient reductions from the minimum weight cycle problem to the minimum weight triangle problem which preserve the interval in which the weights lie , within a constant factor .    _ undirected graphs . _ for undirected graphs our results are as follows .",
    "let @xmath28 be an undirected graph with @xmath29 and let @xmath30 be a minimum cycle in @xmath31 .",
    "there is an @xmath32 time deterministic algorithm that computes a cycle @xmath33 and constructs @xmath34 graphs @xmath35 on @xmath36 nodes and edge weights in @xmath4 such that either @xmath37 or the minimum out of all weights of triangles in the graphs @xmath38 is exactly @xmath39 .",
    "[ thm : undir ]    since a minimum weight triangle in a graph with weights bounded by @xmath40 can be found via a single distance product computation in @xmath17 time  @xcite , we obtain the following corollary .    a minimum weight cycle in an @xmath0-node undirected graph with integer edge weights in @xmath6 $ ] can be found in @xmath17 time .",
    "_ directed graphs . _",
    "our reduction for undirected graphs relies on the fact that distances are symmetric .",
    "it is unlikely that it is possible to modify the reduction so that it works for directed graphs as well .",
    "hence , for directed graphs new ideas are required .",
    "the reduction to minimum triangle is not as efficient , however , the resulting algorithm for minimum cycle in directed graphs has the same running time as the one for undirected graphs with nonnegative weights .",
    "our approach for directed graphs can be combined with our approach for undirected graphs to yield an efficient algorithm also for _ mixed _ graphs , that is , graphs which contain both directed and undirected edges .",
    "the approach works , provided the weights of the mixed graph are nonnegative .",
    "when negative edge weights are allowed , a negative cycle may exist . finding a minimum weight cycle when its weight is negative is an np - hard problem , as it solves hamiltonian cycle . when negative weights are allowed , the minimum cycle problem in the absence of negative cycles is in p for both directed and undirected graphs , but is np - hard for mixed graphs  @xcite .",
    "our techniques for directed graphs are strong enough to support negative edge weights within the same running time as when the weights are nonnegative .",
    "this is extremely interesting , as the typical way to reduce the general problem to the nonnegative weights problem involves computing node _ potentials _ ( see e.g.  @xcite ) .",
    "these potentials however typically increase the magnitude of the weights to even @xmath41 , which would be bad if our goal is to use algorithms that have exponential dependence on the bit representation of the weights , such as @xmath42 .",
    "we circumvent the potential approach by focusing on the general problem directly .",
    "we obtain :    let @xmath28 be a directed graph on @xmath0 nodes , @xmath43 . in @xmath17 time one can construct @xmath34 graphs @xmath35 on @xmath36 nodes and edge weights in @xmath4 so that the minimum out of all weights of triangles in the graphs @xmath38 is exactly the weighted girth of @xmath31 .",
    "[ thm : dir ]    [ [ our - results - equivalences . ] ] our results : equivalences .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    vassilevska w. and williams  @xcite showed that the minimum triangle and minimum cycle problems are equivalent , under subcubic reductions .",
    "their reduction from minimum triangle to minimum cycle only increased the number of nodes and the size of the edge weights by a constant factor .",
    "however , their reduction from minimum cycle to minimum triangle was not tight ; it only proved that an @xmath9 algorithm for minimum triangle would imply an @xmath44 algorithm for minimum cycle .",
    "our reductions , on the other hand , imply a much stronger equivalence between the two problems .",
    "this equivalence is especially strong for undirected graphs with integral weights from the range @xmath6 $ ] .",
    "if there is a @xmath45 time algorithm for the minimum cycle problem in undirected graphs with integral edge weights in @xmath6 $ ] , then there is a @xmath46 time algorithm for the minimum triangle problem in such graphs .",
    "conversely , if there is a @xmath45 time algorithm for the minimum triangle problem in undirected graphs with integral edge weights in @xmath6 $ ] , then there is an @xmath47 time algorithm for the minimum cycle problem in such graphs .",
    "[ cor : equiv ]    a natural question is whether the triangle problem is special .",
    "do similar reductions exist between minimum cycle and minimum @xmath48-cycle for constant @xmath49 ?",
    "we answer this in the affirmative .",
    "let @xmath48 be any fixed constant .",
    "let @xmath28 be a graph on @xmath0 nodes , @xmath29 .",
    "one can construct @xmath34 undirected graphs @xmath50 on @xmath51 nodes and edge weights in @xmath4 so that the minimum out of all weights of @xmath48-cycles in the graphs @xmath38 is exactly the weighted girth of @xmath31 .",
    "moreover , given the minimum weight @xmath48-cycle of the graphs @xmath38 , one can find a minimum weight cycle of @xmath31 in @xmath52 additional time . if @xmath31 is directed , the reduction runs in @xmath17 time , and if @xmath31 is undirected , it runs in @xmath53 time .",
    "[ thm : equiv2 ]    [ [ our - results - approximation .",
    "] ] our results : approximation .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + +    another approach to gain efficiency for problems with seemingly no subcubic time exact algorithms has been to develop fast approximation algorithms ( see  @xcite in the context of shortest paths ) .",
    "lundell and lingas  @xcite gave two approximation algorithms for the girth problem : an @xmath54 time @xmath55-approximation for undirected unweighted graphs , and an @xmath56 time @xmath57-approximation for undirected graphs with integer weights in the range @xmath58 .",
    "very recently , roditty and tov  @xcite improved the approximation factor to @xmath59-approximation for the weighted case while keeping the running time unchanged . due to",
    "zwick s  @xcite @xmath60 time @xmath61-approximation for apsp and the simple reduction from minimum weight cycle in directed graphs to apsp , the girth of a directed graph admits an @xmath61-approximation in @xmath60 time .",
    "our reduction from theorem  [ thm : undir ] implies the same result for undirected graphs with nonnegative weights as well , following up on the work of roditty and tov from soda11  @xcite .",
    "there is an @xmath60 time @xmath61-approximation algorithm for the minimum cycle problem in undirected graphs with integral weights in @xmath62 $ ] .",
    "let @xmath28 be a weighted graph , where @xmath63 is its set of _ vertices _ or _ nodes _ ( we use these terms interchangeably ) , @xmath64 is its set of edges , and @xmath65 is a weight function .",
    "the function @xmath66 can be extended to the entire @xmath67 by setting @xmath68 for every @xmath69 . unless otherwise noted",
    ", @xmath0 refers to the number of nodes in the graph .",
    "an edge can be directed or undirected .",
    "an _ undirected _ graph is a graph with undirected edges only and a directed graph is a graph with directed edges only .",
    "a _ mixed _",
    "graph is a graph that may have both directed and undirected edges .",
    "all graphs considered in this paper are _",
    "a graph is simple if it does not contain self loops or multiple copies of the same edge . in a simple mixed graph ,",
    "a node pair @xmath70 can not be connected by both a directed and an undirected edge . in both directed and mixed simple graphs , two directed edges @xmath71 and @xmath72 in opposite directions are allowed since they are considered distinct .",
    "we define a cycle @xmath30 in a graph @xmath28 to be an ordered set of vertices @xmath73 , such that @xmath74 for every @xmath75 and @xmath76 .",
    "let @xmath39 be the sum of the weights of the edges of @xmath30 and let @xmath77 be the weight of the heaviest edge .",
    "we denote with @xmath78 $ ] the weight of the path that traverses the cycle from @xmath79 to @xmath80 by passing from @xmath79 to @xmath81 and so on . in the case that @xmath82 we traverse from @xmath83 to @xmath84 and continue until we reach @xmath79 .",
    "let @xmath85 denote the number of vertices / edges in @xmath30 . a cycle @xmath30 is _ simple _ if no node or edge appears twice in @xmath30 .",
    "with this definition , an undirected graph can not have a simple cycle on @xmath57 nodes , where as directed and mixed graphs can , provided the two cycle edges are in opposite directions and hence distinct .",
    "our reductions are based on a combinatorial property of cycles in weighted directed , undirected and mixed graphs that might be of independent interest .",
    "this property is extremely useful as it shows that crucial portions of the minimum weight cycle are shortest paths .",
    "we present this property in the following lemma .",
    "let @xmath28 be a weighted graph , where @xmath86 , and assume that @xmath31 does not contain a negative cycle .",
    "let @xmath87 be a cycle in @xmath31 of weight @xmath88 and let @xmath89 .",
    "there exists an edge @xmath90 on @xmath30 such that @xmath91\\leq \\lfloor w(c)/2\\rfloor$ ] and @xmath92\\leq \\lfloor w(c)/2\\rfloor$ ] .",
    "furthermore , if @xmath30 is a minimum weight cycle in @xmath31 then @xmath93=d_c[s , v_i]$ ] and @xmath94=d_c[v_{i+1},s]$ ] .",
    "[ lemma : middle ]    we can assume , wlog , that @xmath95 .",
    "we start to traverse along @xmath30 from @xmath84 until we reach the first edge @xmath90 that satisfies @xmath96\\leq \\lfloor w(c)/2\\rfloor$ ] and @xmath97+w(v_i , v_{i+1})\\geq \\lceil w(c)/2\\rceil$ ] .",
    "since @xmath98=0\\leq \\lfloor w(c)/2\\rfloor$ ] either we find an edge @xmath90 that satisfies the requirement , where @xmath99 or we reach @xmath83 without finding such an edge . in the latter case @xmath100 \\leq \\lfloor w(c)/2\\rfloor$ ] and since @xmath101+w(v_\\ell , v_{1})=w(c)\\geq \\lceil w(c)/2\\rceil$ ] the edge @xmath102 satisfies the requirement .",
    "it follows immediately from the properties of the edge @xmath90 that @xmath97\\geq \\lceil w(c)/2\\rceil - w(v_i , v_{i+1})$ ] and hence we get that @xmath103\\leq \\lfloor w(c)/2\\rfloor$ ] as required .",
    "we now bound @xmath104 $ ] . we know",
    "that @xmath104 = w(c ) - ( d_c[v_1,v_i]+w(v_i , v_{i+1}))$ ] .",
    "since @xmath97+w(v_i , v_{i+1})\\geq \\lceil w(c)/2\\rceil$ ] we get that @xmath104 \\leq \\lfloor w(c)/2\\rfloor$ ] .",
    "also , since @xmath96\\leq \\lfloor w(c)/2\\rfloor$ ] we get that @xmath104 \\geq \\lceil w(c)/2\\rceil - w(v_i , v_{i+1})$ ] .",
    "it remains to show that if @xmath30 is a minimum weight cycle , then @xmath105=d_c[v_1,v_i]$ ] and @xmath106=d_c[v_{i+1},v_1]$ ] .",
    "if @xmath31 is a directed graph , then it is straightforward to see that the minimality of @xmath30 implies that @xmath107=d[u , v]$ ] for every @xmath108 and in particular @xmath105=d_c[v_1,v_i]$ ] and @xmath106=d_c[v_{i+1},v_1]$ ] as required .",
    "thus , we only need to consider the case that @xmath31 is an undirected graph . from the first part of the proof",
    "we know that @xmath109\\leq \\lfloor w(c)/2\\rfloor$ ] .",
    "if @xmath110<d_c[v_{i+1},v_{1}]$ ] , then let @xmath111 be the path from @xmath81 to @xmath84 of weight @xmath110 $ ] and let @xmath112 be the portion of @xmath30 from @xmath84 to @xmath81 .",
    "the union of @xmath111 and @xmath112 is a walk in @xmath31 whose weight is strictly less than @xmath39 .",
    "furthermore , since @xmath110<d_c[v_{i+1},v_{1}]\\leq \\lfloor w(c)/2\\rfloor\\leq w(c_2)$ ] , @xmath111 and @xmath112 must differ by at least one edge and hence @xmath113 contains some simple cycle of weight less than @xmath39 , a contradiction to the minimality of @xmath30 .",
    "the argument for showing that @xmath105=d_c[v_1,v_i]$ ] is symmetric .",
    "lemma  [ lemma : middle ] shows that it is possible to decompose every cycle into three portions : a single edge of weight at most @xmath40 and two pieces whose weight differs by at most @xmath40 , and which are shortest paths if the cycle is of minimum weight .",
    "this observation is crucial for our efficient reductions .",
    "another important piece of lemma  [ lemma : middle ] is that _ every _ vertex on the cycle has a critical edge .",
    "this is especially important in the directed graph case .",
    "armed with lemma  [ lemma : middle ] we can describe the general framework of our approach . suppose that we have some way to compute a function @xmath114 that satisfies :    * for every @xmath115 , @xmath18 \\leq d[u , v]$ ] * there exists a vertex @xmath23 on the minimum cycle @xmath30 whose critical edge @xmath71 endpoints satisfy @xmath116=d[v , x]$ ] and @xmath117=d[y , v]$ ] .    in section  [ s - undirected ] we show how to compute a function @xmath118 in @xmath119 time for undirected graphs with integral weights from @xmath6 $ ] , and in section  [ s - directed ] we show how to compute a function @xmath118 in @xmath17 time for directed graphs with integral weights from @xmath7 $ ] and no negative cycles .",
    "now consider the following ( multi-)graph @xmath120 where @xmath121 and @xmath122 are disjoint copies of @xmath63 .",
    "for every @xmath123 $ ] which was computed we place an edge between @xmath124 and @xmath125 and ( for directed graphs ) also one between @xmath126 and @xmath127 .",
    "these edges get weight @xmath123 $ ] and correspond to the two large portions of the minimum cycle .",
    "further , for every edge @xmath128 in @xmath31 , we add an edge from @xmath126 to @xmath125 with weight @xmath129 , i.e. @xmath130 induces a copy of @xmath31 ; these edges correspond to the critical edge of the minimum cycle . in our reduction for directed graphs we further transform @xmath131 into a simple undirected tripartite graph .",
    "consider @xmath132 from the second bullet above . by lemma  [ lemma : middle ] , @xmath116+w(x , y)+d[y , v]=d_c(v , x)+w(x , y)+d_c(y , v)=w(c).$ ]",
    "hence @xmath131 will contain @xmath133 as a triangle of weight @xmath39 .",
    "our reductions in the next two sections give transformations which ensure that every triangle in @xmath131 corresponds to a simple cycle in @xmath31 and that @xmath133 is preserved as a triangle .",
    "since the values @xmath134 $ ] are upper bounds on the distances , @xmath133 is a minimum weight triangle in @xmath131 .",
    "the graph @xmath131 however can have really large weights ; @xmath134 $ ] can be as large as @xmath135 in general . thus our transformations also apply a weight reduction technique which reduces all edge weights to the interval @xmath136 $ ] .",
    "this technique is different for undirected and directed graphs .",
    "[ [ finding - a - minimum - cycle . ] ] finding a minimum cycle .",
    "+ + + + + + + + + + + + + + + + + + + + + + + +    our reductions show that the minimum cycle problem can be efficiently reduced to the minimum triangle problem in a different graph with roughly the same number of nodes and weight sizes . here",
    "we briefly discuss how one can actually find a minimum weight triangle in an @xmath0-node graph @xmath28 with integral edge weights in the interval @xmath7 $ ] . with our reductions",
    ", this will give algorithms for the minimum cycle problem as well .",
    "let @xmath137 be the @xmath138 adjacency matrix of @xmath31 defined as @xmath139=w(i , j)$ ] whenever @xmath140 and @xmath139=\\infty$ ] otherwise .",
    "a well known approach to finding a minimum weight triangle mimics itai and rodeh s algorithm for unweighted triangle finding  @xcite .",
    "it first computes the distance product of @xmath137 with itself , @xmath141=\\min_k a[i , k]+a[k , j]$ ] , to find for every pair of nodes @xmath142 the minimum length of a path with at most @xmath57 edges between them .",
    "then , the weight of a minimum triangle is exactly @xmath143+(a\\star a)[i , j].\\ ] ] finding the actual triangle takes only @xmath52 time after one finds @xmath142 minimizing the above expression . thus the running time",
    "is dominated by the time required for computing @xmath144 .",
    "the algorithm of alon , galil and margalit  @xcite ( following yuval  @xcite ) does this in @xmath17 time , whenever the entries of @xmath137 are integers in @xmath7 $ ] .",
    "hence a minimum triangle , can be found in @xmath17 time .",
    "let @xmath28 be an undirected graph with integral edge weights from the range @xmath6 $ ] . in this section",
    "we show that in @xmath145 time we can compute a cycle whose weight is at most twice the weight of the minimum weight cycle and a new undirected graph @xmath120 with integral weights from the range @xmath7 $ ] whose minimum triangle if exists corresponds to the minimum weight cycle in @xmath31 , with constant probability .",
    "( to boost the probability of success , we actually create @xmath34 graphs @xmath131 . )",
    "if @xmath131 does not have a triangle then the cycle that we have computed is the minimum weight cycle of @xmath31 .",
    "we start by presenting an @xmath146 time algorithm that given an integer @xmath147 either reports a cycle of length @xmath148 or computes all distances up to @xmath147 .",
    "the computed distances are used to form the graph @xmath131 .",
    "[ [ cycle - or - distance - computation . ] ] cycle or distance computation .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the algorithm works in iterations and in each iteration it repeats the same procedure from a new vertex of the graph .",
    "this procedure is a simple adaptation of dijkstra s algorithm .",
    "the input in each iteration is a source vertex @xmath149 and an integer value @xmath147 .",
    "the algorithm either reports a cycle of length at most @xmath148 or computes the distances from @xmath149 to every vertex that is within distance @xmath147 from @xmath149 .",
    "lingas and lundell  @xcite used a similar approach in order to compute a @xmath57-approximation of the minimum weight cycle .",
    "their algorithm , however , either returns a cycle of length at most @xmath148 or computes the distances from @xmath149 to every vertex that is within distance @xmath148 from @xmath149 .",
    "this small difference between the two algorithms is crucial for our needs .",
    "the algorithm is given in algorithm  [ a - min - cycle ] .",
    "the running time of the algorithm is @xmath150 .",
    "the algorithm repeats the procedure cycle ?",
    "@xmath0 times , each time with a different vertex .",
    "every run of cycle ? takes at most @xmath151 time since it stops with the first cycle it detects .    in the next lemma",
    "we prove an important property of the algorithm .",
    "[ l - bin - search ] for any integer @xmath147 , min - cycle@xmath152 either finds a cycle of weight at most @xmath148 , or computes all distances of length at most @xmath147 .    a cycle is reported when a vertex @xmath24 is extracted from the priority queue @xmath153 and for one of its edges @xmath22 that is being relaxed the value of @xmath154 $ ] before the relaxation is not infinity . as any distance and any distance estimation are at most @xmath147 , if a cycle is reported it must be of length at most @xmath148 . if a cycle is not reported , then our algorithm is almost identical to dijkstra s algorithm .",
    "the only difference is that our algorithm relaxes an edge @xmath22 when @xmath24 is extracted from the priority queue if and only if @xmath155+w(u , v ) \\leq t$ ] , while dijkstra s algorithm relaxes all edges of @xmath24 with no restriction .",
    "this implies that our algorithm computes all distances that are smaller or equal @xmath147 .",
    "2    [ a - min - cycle ]    @xmath156    [ a - cycle ? ]    @xmath157 = 0 $ ] @xmath158    [ a - control - relax ]    @xmath159 extract - min(@xmath160 )        [ [ the - reduction - to - minimum - triangle . ] ] the reduction to minimum triangle .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    our goal is to prove theorem  [ thm : undir ] . the main part of the proof is describing an algorithm that computes an upper bound for the minimum weight cycle and an instance @xmath131 of minimum triangle , such that either the girth of the graph is exactly the upper bound , or with constant probability the minimum triangle weight in @xmath131 is the girth of @xmath31 .",
    "below we only present @xmath131 as having large weights .",
    "later on , we find a value @xmath147 with which we use lemma  [ l - bin - search ] , so that @xmath148 is a bound on the minimum cycle weight that is tight within @xmath40 . as mentioned in section  [ s - approach ] , this value allows us to reduce the weights of @xmath131 so that they fall in the interval @xmath136 $ ] .",
    "theorem  [ thm : undir ] let @xmath28 be an undirected graph with @xmath29 and let @xmath30 be a minimum cycle in @xmath31 .",
    "there is an @xmath32 time deterministic algorithm that computes a cycle @xmath33 and constructs @xmath34 graphs @xmath35 on @xmath36 nodes and edge weights in @xmath4 such that either @xmath37 or the minimum out of all weights of triangles in the graphs @xmath38 is exactly @xmath39 .",
    "the weight of the minimum cycle is an integer value from the range @xmath161 $ ] .",
    "from lemma  [ l - bin - search ] it follows that we can use algorithm min - cycle to perform a binary search over this range in order to find the largest value @xmath162 $ ] for which min - cycle@xmath152 does not report a cycle but computes all distances of length at most @xmath147 ( see figure  [ f - critical - value ] ) .",
    "this implies that by running min - cycle@xmath163 we obtain a cycle of weight at most @xmath164 .",
    "hence , we only need to show that it is possible to detect the minimum cycle in the case that its weight @xmath39 is @xmath165 or less .",
    "let us first prove some consequences of the fact that min - cycle@xmath152 does not report a cycle .",
    "let @xmath87 be a minimum cycle in @xmath28 .",
    "suppose that min - cycle@xmath152 does not report a cycle .",
    "there are three * distinct * vertices @xmath166 such that @xmath167 + w(v_i , v_{i+1 } ) > t$ ] and @xmath168 + w(v_i , v_{i+1 } ) > t$ ] .",
    "[ lemma : tbound ]    let @xmath90 be the critical edge for @xmath84 given by lemma  [ lemma : middle ]",
    ". assume first that @xmath169 and @xmath170 .",
    "if either @xmath96 + w(v_i , v_{i+1 } ) \\leq t$ ] or @xmath104 + w(v_i , v_{i+1 } ) \\leq t$ ] then the edge @xmath171 is relaxed .",
    "assume that we are in the case that @xmath96 + w(v_i , v_{i+1 } ) \\leq t$ ] .",
    "then after @xmath90 is relaxed @xmath172\\leq t$ ] . if @xmath172<\\infty$ ] before the relaxation of @xmath90 the algorithm stops and reports a cycle . if @xmath172=\\infty$ ] before the relaxation of @xmath90 then a cycle will be detected as well but only when the edge @xmath173 is relaxed . this edge must be relaxed since @xmath104\\leq \\lfloor w(c)/2\\rfloor \\leq t$ ] which implies that @xmath174 will be extracted and its edge @xmath173 will satisfy the relaxation requirement and will be relaxed .",
    "we conclude that if either @xmath96 + w(v_i , v_{i+1 } ) \\leq t$ ] or @xmath104 + w(v_i , v_{i+1 } ) \\leq t$ ] then min - cycle@xmath152 must report a cycle , giving a contradiction .",
    "we now turn to the case that either @xmath175 or @xmath176 .",
    "assume wlog that @xmath177 , that is , @xmath178 .",
    "from lemma  [ lemma : middle ] we know that @xmath179 and @xmath180\\leq \\lfloor w(c)/2 \\rfloor$ ] .",
    "we also know that there is at least one additional vertex @xmath83 between @xmath181 and @xmath84 on the cycle @xmath30 .",
    "we now apply lemma  [ lemma : middle ] on the vertex @xmath83 .",
    "it is easy to see that in that case the edge @xmath182 will be the critical edge of @xmath83 as well .",
    "we now have three different vertices and the rest of this case is identical to the first case .    as a first attempt",
    ", we create the new graph @xmath120 as follows .",
    "the vertex set @xmath183 contains two copies @xmath184 and @xmath130 of @xmath63 . for @xmath185 ,",
    "let @xmath186 be the set of edges with both endpoints in @xmath187 .",
    "the set @xmath188 is empty and the set @xmath189 is @xmath190 , that is , @xmath191 if and only if @xmath192 .",
    "let @xmath193 be the set of edges with one endpoint in @xmath184 and one endpoint in @xmath130 .",
    "let @xmath194 and @xmath195 .",
    "if the distance between @xmath24 and @xmath23 was computed by min - cycle@xmath152 then we add an edge @xmath196 to @xmath193 with weight @xmath18 $ ] .",
    "we show that there is triangle in @xmath120 that corresponds to the minimum cycle of @xmath31 and has the same weight .",
    "[ c - g-first - try ] let @xmath87 be a minimum cycle in @xmath28 .",
    "assume that @xmath197 .",
    "there exists a triangle in @xmath120 on vertices of @xmath30 of weight @xmath39 .    without loss of generality ,",
    "let @xmath84 be the vertex @xmath80 from lemma  [ lemma : tbound ] , and let @xmath79 and @xmath81 be the other two vertices . from lemma  [ lemma",
    ": tbound ] we know that all three vertices are distinct and that @xmath96 + w(v_i , v_{i+1 } ) > t$ ] and @xmath104 + w(v_i , v_{i+1 } ) > t$ ] . combining this with the fact that @xmath30 is a minimum cycle and @xmath197",
    "we get that @xmath105=d_c[v_1,v_i ] \\leq t$ ] and @xmath106 = d_c[v_{i+1},v_1 ]   \\leq t$ ] . when cycle",
    "? is run from @xmath84 it computes @xmath105 $ ] and @xmath198 $ ] . hence , there must be a triangle of weight @xmath39 in @xmath131 on the vertices @xmath199,@xmath200 and @xmath201 .",
    "[ f - g - to - g ]   that is transformed into a triangle in @xmath131 .",
    "( b ) a simple path in @xmath31 that is transformed into a triangle in @xmath131.,title=\"fig:\",height=158 ]    the claim above shows only one direction , that is , if there is a minimum cycle @xmath30 of weight at most @xmath165 in @xmath31 then there is a corresponding triangle in @xmath131 on vertices @xmath202 and @xmath203 , that correspond to vertices of @xmath30 with the same weight .",
    "this situation is depicted in figure  [ f - g - to - g](a ) .",
    "to complete the reduction we must show that there are no false positives : triangles in @xmath131 of smaller weight which do not correspond to a minimum cycle of @xmath31 .",
    "unfortunately , this is not the case and @xmath131 may have such false triangles with smaller weight .",
    "this situation is depicted in figure  [ f - g - to - g](b ) .",
    "let @xmath204 .",
    "if there is a shortest path of length at most @xmath147 from @xmath205 to @xmath206 whose last edge is @xmath207 then there is a triangle in @xmath131 . to see that notice that there are two different shortest paths one from @xmath205 to @xmath206 and one from @xmath205 to @xmath208 , both of length at most @xmath147 .",
    "in such a case the graph @xmath131 includes the edges @xmath209 and @xmath210 and together with the edge @xmath211 they form a triangle .",
    "moreover , such a triangle has the same structure as a valid triangle and might be of smaller weight , thus , a triangle detection algorithm can not distinguish between a valid triangle and a false triangle . in what follows",
    "we first show that this is the only situation in which a false triangle is formed and then we show a construction that avoids such false triangles .    in the above pathological case",
    "the only reason that the triangle @xmath212 did not correspond to a cycle , was because we had two different paths @xmath213 and @xmath214 that both start in the same vertex and the last vertex of one of these paths was the vertex right before the last vertex of the other path . in the next lemma we show that this is the _ only _ bad case .",
    "let @xmath204 be three distinct vertices .",
    "let @xmath215 and @xmath216 be simple shortest paths between @xmath208 and @xmath205 and @xmath205 and @xmath206 respectively .",
    "let @xmath217 and @xmath218 and let @xmath219 .",
    "then , @xmath220 contains a simple cycle of weight at most @xmath221.[lemma : twopaths ]    let @xmath222 be @xmath213 with its edges reversed .",
    "look at @xmath222 and @xmath214 .",
    "there are two options .",
    "either one path is a subpath of the other , or there is a node @xmath223 such that @xmath224 is a subpath of both , and @xmath223 is followed by @xmath225 in @xmath222 and by @xmath226 in @xmath214 .",
    "consider the first case .",
    "wlog , @xmath214 is a subpath of @xmath222 ( the other inclusion is symmetric ) . since @xmath217 , the subpath between @xmath208 and @xmath206 on @xmath213 has at least 2 edges , and adding edge @xmath227 produces a simple cycle of weight less than the sum of the two original path weights .",
    "consider the second case when @xmath228 exist as above .",
    "if there is some node between @xmath223 and @xmath208 on @xmath222 which also appears in @xmath214 after @xmath223 , then let @xmath229 be the first such node .",
    "then no node on @xmath214 between @xmath223 and @xmath229 appears between @xmath223 and @xmath229 in @xmath222 .",
    "the two disjoint simple paths between @xmath223 and @xmath229 form a simple cycle on at least @xmath230 nodes since @xmath231 .",
    "the weight of this cycle is less than the sum of the two original path weights .",
    "finally , suppose no such @xmath229 exists .",
    "then the subpaths of @xmath222 and @xmath214 between @xmath223 and @xmath208 and @xmath223 and @xmath206 share no vertices and hence adding edge @xmath227 closes a simple cycle of weight at most @xmath221 .",
    "lemma  [ lemma : twopaths ] implies that our reduction to minimum triangle will work , provided that we can ensure that for every triangle @xmath212 in @xmath131 , the last node @xmath232 before @xmath206 on the shortest path from @xmath205 to @xmath206 in @xmath31 is distinct from @xmath208 . to do this",
    ", we use the color - coding method from the seminal paper of alon , yuster and zwick  @xcite .",
    "the idea is as follows .",
    "let @xmath233 be two distinct colors and suppose we assign to every node of @xmath31 one of these colors independently and uniformly at random .",
    "fix four vertices @xmath234 .",
    "the probability that @xmath235 and @xmath236 is @xmath237 .",
    "now we will modify @xmath120 from before .",
    "recall that @xmath121 . for every node @xmath205 of",
    "@xmath31 we add a copy @xmath238 to @xmath184 , so that @xmath184 is a copy of @xmath63 .",
    "furthermore , if color@xmath239 we also add a copy @xmath240 to @xmath130 .",
    "we now define the set of edges @xmath241 .",
    "let @xmath242 be the set of edges between @xmath187 and @xmath243 , for @xmath244 .",
    "the edge set @xmath245 is empty , so @xmath246 .",
    "let @xmath247 such that @xmath248 is the last edge of the shortest path from @xmath205 to @xmath206 .",
    "the sets @xmath193 and @xmath249 are defined as follows : @xmath250    the weight of an edge @xmath251 is @xmath252 $ ] .",
    "the weight of an edge @xmath253 is @xmath254 .",
    "we now prove that @xmath131 does not contain false triangles .",
    "[ l - g-has - no - false - triangle ] if @xmath255 is triangle in @xmath131 then there exists a simple cycle @xmath30 in @xmath31 such that @xmath256 and @xmath257 .    any triangle in @xmath131 either have one vertex from @xmath184 and two vertices from @xmath130 or all three vertices from @xmath130 .",
    "in the latter case the triangle is also in @xmath31 so we focus in the former case , that is , @xmath258 is a triangle in @xmath131 such that @xmath203 and @xmath202 .",
    "let @xmath204 be the vertices that correspond to @xmath259 and @xmath260 in @xmath31 .",
    "let @xmath261 ( @xmath232 ) be the last vertex before @xmath208 ( @xmath206 ) on the shortest path @xmath213 ( @xmath214 ) between @xmath205 and @xmath208 ( @xmath206 ) in @xmath31 .",
    "the fact that @xmath262 and @xmath251 implies that @xmath235 and @xmath236 .",
    "hence we get that @xmath217 and @xmath218 . combining this with the fact that @xmath263 we get that the paths @xmath213 , @xmath214 and the edge @xmath207 satisfy the requirements of lemma  [ lemma : twopaths ] , and there is a simple cycle of weight at most @xmath264 in @xmath31 .    now that we have shown that @xmath131 does not contain false triangles we prove that the minimum weight cycle in @xmath31 corresponds to a triangle in @xmath131 .",
    "( this can be viewed as proving claim  [ c - g-first - try ] for the new construction of @xmath131 ) .",
    "[ c - g-second - try ] let @xmath87 be a minimum cycle in @xmath28 .",
    "assume that @xmath197 .",
    "then there exists a triangle in @xmath120 on vertices of @xmath30 of weight @xmath39 , with constant probability .    without loss of generality ,",
    "let @xmath84 be the vertex @xmath80 from lemma  [ lemma : tbound ] , and let @xmath79 and @xmath81 be the other two vertices . as in the proof of claim  [ c - g-first - try ] , @xmath105=d_c[v_1,v_i]\\leq t$ ] and @xmath106=d_c[v_{i+1},v_1]\\leq t$ ] and these values are computed by min - cycle@xmath152 .",
    "the random coloring is successful when @xmath265 , @xmath266 , @xmath267 and @xmath268 .",
    "the probability that this happens is @xmath269 .",
    "the triangle @xmath270 is in @xmath131 exactly when the coloring is successful , and hence @xmath30 is represented by that triangle in @xmath131 with constant probability .",
    "the weight of the triangle @xmath270 is @xmath105+w(v_i , v_{i+1})+d[v_{i+1 } , v_1]= w(c)$ ] .",
    "[ [ weight - reduction . ] ] weight reduction .",
    "+ + + + + + + + + + + + + + + + +    currently , the maximum edge weight in @xmath131 can be as large as @xmath271 as the weights of edges in @xmath193 are distances in @xmath31 . to complete the reduction",
    ", we show that it is possible to reweight the edges of @xmath131 without changing the minimum triangle so that the edge weights will be integers from the range @xmath7 $ ] .",
    "the key idea is to use lemma  [ lemma : tbound ] in two different ways .",
    "as we previously mentioned , lemma  [ lemma : tbound ] implies that @xmath167 \\leq t$ ] and @xmath168 \\leq t$ ] .",
    "moreover , the bounds @xmath167 + w(v_i , v_{i+1 } ) > t$ ] and @xmath168 + w(v_i , v_{i+1 } ) > t$ ] imply that @xmath167 > t - m$ ] and @xmath168 > t - m$ ] .",
    "thus , we can remove from @xmath193 every edge of weight strictly more than @xmath147 and every edge of weight @xmath272 or smaller with no effect on the minimum triangle in @xmath131 .",
    "we now decrease the weights of all the edges that were left in @xmath193 by @xmath147",
    ". the weight of every triangle in @xmath131 with a node from @xmath184 has decreased by exactly @xmath148 .",
    "hence , the minimum triangle out of those with a node in @xmath184 remains the same .",
    "the weights of edges in @xmath193 are now integers from the interval @xmath273 $ ] , and the rest of the edge weights are still in @xmath6 $ ] . if the minimum weight triangle in @xmath131 now has nodes only from @xmath130 , then this triangle was also the minimum weight one in @xmath131 before the reweighting , and hence corresponds to a minimum weight cycle , with high probability .",
    "otherwise , the minimum weight triangle in @xmath131 has a node from @xmath184 .",
    "the minimum out of these triangles was also the minimum one among the triangles with a node in @xmath184 also before the reweighting .",
    "hence it also corresponds to a minimum weight cycle , with high probability .",
    "this completes the description of our construction .",
    "[ [ derandomization . ] ] derandomization .",
    "+ + + + + + + + + + + + + + + +    the reduction can be made deterministic , just as in the color - coding paper of alon _ et al .  _",
    "@xcite , by using a @xmath48-perfect hash family , a family @xmath274 of hash functions from @xmath275 to @xmath276 so that for every @xmath277 with @xmath278 , there exists some @xmath279 so that @xmath280 maps the elements of @xmath183 to distinct colors . in our case , @xmath281 . by enumerating through the functions of @xmath282 , and using each @xmath280 in place of the random coloring",
    ", our reduction runs in @xmath283 time , provided each @xmath280 can be evaluated in constant time .",
    "our reduction produces @xmath284 instances of minimum triangle .",
    "schmidt and siegel  @xcite ( following fredman , komlos and szemeredi  @xcite ) gave an explicit construction of a @xmath48-perfect family in which each function is specified using @xmath285 bits . for our case of @xmath281 , the size of the family is therefore @xmath286 .",
    "the value of each one of the hash functions on each specified element of @xmath63 can be evaluated in @xmath287 time .",
    "alon , yuster and zwick  @xcite , reduced the size of the hash family to @xmath34 .",
    "using this family we can derandomize our reduction so that it runs in deterministic @xmath288 time .",
    "in this section we consider directed graphs graphs with possibly negative weights but no negative cycles .",
    "in contrast to the situation in undirected graphs it is relatively easy to reduce the minimum cycle problem in directed graphs to the problem of computing all pairs shortest paths .",
    "if @xmath118 is the distance matrix of a directed graph then its minimum cycle has weight @xmath290+w(j , i)$ ] .",
    "hence , using zwick s apsp algorithm  @xcite we can compute the minimum cycle in @xmath8 time . in this section",
    "we show that the minimum cycle problem in directed graphs can be reduced to the problem of finding a minimum triangle in an undirected graph .",
    "this also implies that the minimum weight cycle in directed graphs can be computed in @xmath17 time .",
    "similarly to before , our approach will be to compute upper bounds on the distances in the graph so that for some node @xmath149 on the minimum cycle @xmath30 and its critical edge @xmath90 we obtain the exact distances @xmath93=d_c[s , v_i]$ ] and @xmath94=d_c[v_{i+1},s]$ ] .",
    "[ [ computing - cycle - distances . ] ] computing cycle distances .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + +    the dijkstra - like approach in the previous section does not work for directed graphs .",
    "it also only applies when the edge weights are nonnegative .",
    "here we utilize a new approach that allows us to reduce the minimum cycle problem in directed graphs with integral weights in the interval @xmath7 $ ] to the minimum triangle problem in undirected graphs with weights in @xmath7 $ ] .",
    "our result is more general than before .",
    "however this comes at a cost : the reduction no longer takes nearly quadratic time , but consumes @xmath42 time .",
    "our approach uses the fact that lemma  [ lemma : middle ] applies for _ every _ vertex of a cycle , together with a result by yuster and zwick  @xcite obtained by a clever modification of zwick s apsp algorithm  @xcite given in theorem  [ thm : yz ] below .",
    "[ thm : yz ] given an @xmath0-node directed graph with integral edge weights in the interval @xmath7 $ ] , in @xmath17 time one can compute an @xmath138 matrix @xmath118 such that the @xmath142 entry of the distance product @xmath291 contains the distance between @xmath279 and @xmath292 .",
    "the matrix @xmath118 can contain entries with values as large as @xmath41 and so @xmath291 is not known to be computable in truly subcubic time , even when @xmath293 is small .",
    "nevertheless , the theorem applies to general graphs with positive or negative weights .",
    "it also gives an @xmath17 time algorithm for detecting a negative cycle in a graph , and is extremely useful in computing minimum cycles .",
    "the yuster - zwick algorithm proceeds in stages . in each stage @xmath294 ,",
    "a node subset sample @xmath295 is maintained so that each node is in @xmath295 with probability at least @xmath296 .",
    "they prove the following lemma .    for every stage @xmath294 and any node @xmath297 and node @xmath298",
    ", the algorithm has estimates @xmath299 $ ] and @xmath300 $ ] , so that if the shortest path from @xmath149 to @xmath23 has at most @xmath301 edges then @xmath299=d[s , v]$ ] , with high probability .",
    "similarly , if the shortest path from @xmath23 to @xmath149 has at most @xmath301 edges then @xmath300=d[v , s]$ ] with high probability.[lemma : yz ]    the yuster - zwick algorithm also provides an additional matrix @xmath302 of _ predecessors _ so that if @xmath303 $ ] , then @xmath48 is the predecessor of @xmath292 on a simple path from @xmath279 to @xmath292 of weight @xmath304 $ ] .",
    "similarly , one can obtain a matrix @xmath305 of _ successors _ so that if @xmath306 $ ] , then @xmath48 is the successor of @xmath279 on a simple path from @xmath279 to @xmath292 of weight @xmath304 $ ] .",
    "now , first use the algorithm to check whether the given graph has a negative cycle .",
    "if it does not , then let @xmath30 be the minimum weight cycle , @xmath88 . recall that @xmath85 is the number of vertices / edges on @xmath30 .",
    "let @xmath294 be the minimum value so that @xmath307 . note that then @xmath308 .",
    "the probability that a particular node @xmath149 of @xmath30 is not in @xmath295 is at most @xmath309 .",
    "the events are independent for all @xmath149 in @xmath30 , and so the probability that no node of @xmath30 is in @xmath295 is at most    @xmath310    thus the probability that some node @xmath149 of @xmath30 is in @xmath295 is @xmath311 ; furthermore by lemma  [ lemma : yz ] ( with high probability ) for all @xmath312 , the yuster - zwick algorithm has computed @xmath313=d[s , x]$ ] and @xmath314=d[x , s]$ ] , since the number of edges on the respective shortest paths are at most @xmath307 .",
    "in particular , this means that @xmath315=d[s , v_i]$ ] and @xmath316=d[v_{i+1},s]$ ] for the critical edge @xmath90 for @xmath149 on @xmath30 as lemma  [ lemma : middle ] applies for every vertex of @xmath30 .",
    "moreover , since @xmath30 is a minimum weight cycle with @xmath88 , by lemma  [ lemma : middle ] , the paths between @xmath149 and @xmath79 and @xmath81 and @xmath149 on @xmath30 are shortest paths between @xmath149 and @xmath79 and @xmath81 and @xmath149 , respectively .",
    "hence , @xmath317=d[s , v_{i}]=d[s , v_{i}]$ ] and @xmath318=d[v_{i+1},s]=d[v_{i+1},s]$ ] , with high probability .",
    "[ [ creating - the - minimum - triangle - instance - g . ] ] creating the minimum triangle instance @xmath131 .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    @xmath131 will still be undirected , but unlike the construction for undirected graphs , @xmath131 will now be tripartite",
    ". the vertex set @xmath183 of @xmath131 has partitions @xmath319 which are all copies of @xmath63 .",
    "the construction is as follows . for",
    "every directed edge @xmath22 of @xmath31 , add an edge from @xmath320 to @xmath321 with weight @xmath322 .",
    "furthermore , for every two nodes @xmath70 so that @xmath323<\\infty$ ] add an edge from @xmath203 to @xmath324 and one from @xmath325 to @xmath326 , each with weight @xmath323 $ ] . hence the edges between @xmath203 and @xmath324 correspond to directed paths from @xmath205 to @xmath208 , and the edges between @xmath325 and @xmath326 correspond to directed paths from @xmath208 to @xmath205 .",
    "hence any triangle in @xmath131 corresponds to a directed closed walk in @xmath31 .",
    "however , any such closed walk must contain a simple cycle of no larger weight : if the walk is not simple , find a closest pair of copies of a node @xmath23 on the walk .",
    "these copies enclose a simple cycle @xmath327 in @xmath31 .",
    "now , either @xmath327 has no larger weight than the walk , or removing it from the walk produces a smaller closed walk of negative weight , and hence @xmath31 contains a negative cycle , which we assumed is not the case .",
    "since @xmath131 contains no false positives , the minimum triangle of @xmath131 corresponds exactly to @xmath30 .",
    "[ [ weight - reduction.-1 ] ] weight reduction .",
    "+ + + + + + + + + + + + + + + + +    as in the construction for undirected graphs , the maximum edge weight in @xmath131 can be as large as @xmath271 .",
    "here we give a different way to reduce them to the interval @xmath7 $ ] .",
    "let @xmath147 be a parameter which we will be changing .",
    "intuitively , our goal will be to set @xmath147 to something roughly @xmath328 ; for our purposes , it will be sufficient for @xmath147 to be @xmath329 .",
    "initially , @xmath330 .",
    "now , check whether there is a triangle @xmath331 , @xmath332 , @xmath333 in @xmath131 so that @xmath334 , d[c^3,a^1]\\leq t$ ] .",
    "we run a binary search on @xmath147 in the interval @xmath335 $ ] , until we find the smallest @xmath147 such that there is such a triangle .",
    "each search can be done using boolean matrix product : create a matrix @xmath137 which is @xmath336 wherever @xmath118 is @xmath337 and @xmath338 otherwise ; multiply @xmath137 by itself and check for a triangle closed by an edge @xmath339 , @xmath340 .",
    "this takes @xmath341 time .",
    "let ( whp ) @xmath342 be the triangle in @xmath131 that corresponds to the minimum cycle @xmath30 of @xmath31 . since @xmath342 is a valid triangle , and @xmath317,d_c[v_{i+1},s]\\leq \\lfloor w(c)/2\\rfloor$ ] by lemma  [ lemma : middle ] , then after the completion of the binary search , @xmath343 .",
    "furthermore , since @xmath30 is a minimum cycle and by the definition of @xmath147 , @xmath344 , where @xmath345 is some edge in @xmath31 , which implies that @xmath346 .",
    "hence , @xmath343 and @xmath347 .",
    "now , take @xmath131 and remove every edge @xmath348 with @xmath349 > t+m/2 $ ] and every @xmath350 with @xmath334>t+m/2 $ ] .",
    "if an edge has weight @xmath351 , it is not removed . in particular ,",
    "@xmath352 and @xmath353 are still edges , by lemma  [ lemma : middle ] .",
    "remove every @xmath348 with @xmath349<t - m$ ] and every @xmath350 with @xmath334<t - m$ ] .",
    "if an edge has weight @xmath354 , then it is not removed . hence again @xmath355 and @xmath353 are not removed because their weight is at least @xmath272 as follows from lemma  [ lemma : middle ] .    all remaining edges in @xmath356 have integral weights in @xmath357 $ ] , and @xmath30 is still represented by the minimum triangle @xmath358 .",
    "now , for every remaining edge @xmath359 , change its weight to @xmath123-t$ ] .",
    "the weights of the edges of @xmath131 are now in the interval @xmath7 $ ] .",
    "furthermore , since the weights of all triangles have decreased by @xmath148 , the minimum triangle of @xmath131 is still the same .",
    "this completes the construction of @xmath131 .",
    "[ [ derandomization.-1 ] ] derandomization .",
    "+ + + + + + + + + + + + + + + +    the only randomized part of our reduction is our use of yuster and zwick s result .",
    "their algorithm can be derandomized , as pointed out in their paper  @xcite without affecting our use of their result .",
    "hence , we obtain a deterministic reduction from minimum cycle in directed graphs to minimum triangle in undirected graphs which runs in @xmath360 time and does not increase the size of the graph or the edge weights by more than a constant factor .",
    "we have obtained separate algorithms for minimum cycle for undirected graphs with nonnegative weights and for directed graphs with possibly negative weights .",
    "a natural question is whether one can obtain an algorithm that works for both types of graphs , or more generally for _ mixed _ graphs : graphs with both directed and undirected edges .",
    "this turns out to be possible for mixed graphs with nonnegative weights .",
    "( the problem is np - hard for mixed graphs with positive and negative weights , even when there are no negative cycles . )",
    "the idea for the proof of theorem  [ thm : mix ] below is to compute the distance estimates @xmath134 $ ] using the approach from our reduction for directed graphs .",
    "this is possible since when the weights are nonnegative , one can reduce the shortest paths problem in undirected or mixed graphs to that in directed graphs by replacing each undirected edge @xmath22 by the two directed edges @xmath22 and @xmath361 .",
    "then the entire approach from the previous section applies up until the triangle instance needs to be constructed . to construct the triangle instance",
    ", we use the color - coding technique from our minimum cycle algorithm for undirected graphs , but only on the undirected edges .",
    "the derandomization also follows from the previous two sections .",
    "more details follow .",
    "just as in the construction for directed graphs , for every directed edge @xmath22 of @xmath31 , add an edge from @xmath320 to @xmath321 with weight @xmath322 . as in the construction for undirected graphs , randomly assign every node of @xmath31 one of two different colors @xmath233 independently uniformly at random .",
    "for every undirected edge @xmath22 of @xmath31 , add an edge from @xmath320 to @xmath362 of weight @xmath322 if and only if @xmath363 .",
    "consider two nodes @xmath70 so that @xmath323<\\infty$ ] .",
    "let @xmath364 $ ] and @xmath365 $ ] be the first node after @xmath205 and the last node before @xmath208 , respectively , on the path from @xmath205 to @xmath208 with weight @xmath323 $ ] .",
    "if @xmath366 is a directed edge , then add an edge from @xmath325 to @xmath326 , just as in the directed graph construction .",
    "similarly , if @xmath367 is a directed edge , then add an edge from @xmath203 to @xmath324 . otherwise , if @xmath367 is undirected , add an edge from @xmath203 to @xmath324 only if @xmath368 and @xmath369 .",
    "if @xmath366 is undirected , add an edge from @xmath325 to @xmath326 only if @xmath370 and @xmath371 .",
    "the weights of these edges are all @xmath323 $ ] .    by lemma  [ lemma : twopaths ] ( which also applies to mixed graphs ) now every triangle in @xmath131 corresponds to a simple cycle of no larger weight .",
    "furthermore , the minimum cycle of @xmath31 is represented by a triangle of the same weight in @xmath131 with constant probability .",
    "this follows from the color - coding and by the fact that for some node @xmath149 of @xmath30 and its middle edge @xmath372 , @xmath373=d(s , v_{i})=d_c(s , v_{i})$ ] and @xmath316=d(v_{i+1},s)=d_c(v_{i+1},s)$ ]",
    ".    let @xmath28 be a mixed graph on @xmath0 nodes , @xmath29 . in @xmath17 time one can construct @xmath34 graphs @xmath35 on @xmath36 nodes and edge weights in @xmath4 so that the minimum out of all weights of triangles in the graphs @xmath38 is exactly the weighted girth of @xmath31 .",
    "[ thm : mix ]    shortest paths and minimum cycles in undirected graphs with positive and negative weights are of a completely different nature than the corresponding problems in directed graphs or in undirected graphs with nonnegative weigths . in the absence of negative cycles , shortest paths and cycles can be solved via matching techniques ( see e.g.  @xcite )",
    ". however , the running times are not as good as the corresponding ones for directed graphs .",
    "for instance , apsp can be solved in @xmath374 time  @xcite , whereas the corresponding problem in directed graphs can be solved in @xmath375  @xcite .",
    "none of the shortest paths algorithms for directed graphs , including yuster - zwick s algorithm , apply for undirected graphs when there are negative weights , as they would confuse any negative weight edge with a negative cycle .",
    "hence our approach from section  [ s - directed ] would not work .",
    "our approach from section  [ s - undirected ] also fails , even if we have already computed apsp in the graph .",
    "the main reason is that lemma  [ lemma : twopaths ] does not apply when the weights can be negative , and hence the color - coding technique can not be applied , as is .",
    "computing minimum cycles in undirected graphs with possibly negative weights may require entirely new techniques .",
    "we now show that the minimum weight cycle problem in undirected and directed graphs can be reduced to the minimum @xmath48-cycle problem in undirected graphs for every @xmath376 . in order to obtain our reduction to minimum @xmath48-cycle in undirected graphs with integral edge weights in @xmath377 $ ]",
    "it suffices to provide a reduction from minimum weight triangle in an @xmath0-node undirected graph with weights in @xmath7 $ ] to minimum @xmath48-cycle in a @xmath36-node undirected graph with edge weights in @xmath377 $ ] , and then to combine this reduction with our reduction from minimum weight cycle to minimum weight triangle .",
    "this proves theorem  [ thm : equiv2 ] .",
    "let @xmath376 be fixed .",
    "given an @xmath0-node undirected graph @xmath31 with integral edge weights in @xmath7 $ ] , one can construct in @xmath378 time an undirected graph @xmath131 on @xmath36 nodes and integral edge weights in @xmath379 $ ] so that if @xmath31 has at least one triangle and the minimum triangle weight is @xmath380 , then the minimum weight @xmath48-cycle in @xmath131 has weight @xmath381 .    without loss of generality",
    ", we can assume that the instance of minimum triangle is tripartite with partitions @xmath319 .",
    "remove each node @xmath382 and its incident edges and replace it with a path on @xmath383 nodes @xmath384 as follows . for every original edge @xmath22 with @xmath385 , add an edge @xmath386 with weight @xmath322 , and for every original edge @xmath361 with @xmath387 , add an edge @xmath388 with weight @xmath389 .",
    "let the weights of the path edges @xmath90 for @xmath390 be all @xmath338 .",
    "increase the weights of all edges of @xmath131 which are not on paths @xmath391 by @xmath392 .",
    "this forms a weighted graph @xmath131 on @xmath393 nodes and weights in @xmath379 $ ] .",
    "every triangle @xmath394 of weight @xmath380 in the original graph has a corresponding @xmath395cycle in @xmath131 of weight @xmath381 .",
    "now consider any @xmath395cycle @xmath30 of @xmath131 .",
    "if @xmath30 contains an edge of a path @xmath391 corresponding to a node @xmath382 , then it must contain the entire path since every node @xmath79 for @xmath396 has degree exactly @xmath57 .",
    "hence @xmath30 contains exactly @xmath57 other nodes which must close a cycle with @xmath391 .",
    "hence the other two nodes are from @xmath130 and @xmath397 , and there is a corresponding triangle in @xmath31 of weight @xmath398 less .",
    "if on the other hand @xmath30 does not contain an edge of a path @xmath391 , then it has @xmath48 edges of weight at least @xmath399 , and hence @xmath400 for @xmath376 .",
    "any triangle of @xmath31 , however , corresponds to a cycle of weight @xmath401 .",
    "hence the minimum weight @xmath48-cycle in @xmath131 must correspond to a triangle in @xmath31 , if @xmath31 contains a triangle ."
  ],
  "abstract_text": [
    "<S> we consider the fundamental algorithmic problem of finding a cycle of minimum weight in a weighted graph . </S>",
    "<S> in particular , we show that the minimum weight cycle problem in an undirected @xmath0-node graph with edge weights in @xmath1 or in a directed @xmath0-node graph with edge weights in @xmath2 and no negative cycles can be efficiently reduced to finding a minimum weight _ triangle _ in an @xmath3node _ undirected _ graph with weights in @xmath4 . roughly speaking , </S>",
    "<S> our reductions imply the following surprising phenomenon : a minimum cycle with an arbitrary number of weighted edges can be `` encoded '' using only _ three _ edges within roughly the same weight interval !    </S>",
    "<S> this resolves a longstanding open problem posed in a seminal work by itai and rodeh [ siam j. computing 1978 and stoc77 ] on minimum cycle in unweighted graphs .    </S>",
    "<S> a direct consequence of our efficient reductions are @xmath5-time algorithms using fast matrix multiplication ( fmm ) for finding a minimum weight cycle in both undirected graphs with integral weights from the interval @xmath6 $ ] and directed graphs with integral weights from the interval @xmath7 $ ] . </S>",
    "<S> the latter seems to reveal a strong separation between the all pairs shortest paths ( apsp ) problem and the minimum weight cycle problem in directed graphs as the fastest known apsp algorithm has a running time of @xmath8 by zwick [ j. acm 2002 ] .    in contrast , </S>",
    "<S> when only combinatorial algorithms are allowed ( that is , without fmm ) the only known solution to minimum weight cycle is by computing apsp . </S>",
    "<S> interestingly , any separation between the two problems in this case would be an amazing breakthrough as by a recent paper by vassilevska w. and williams [ focs10 ] , any @xmath9-time algorithm ( @xmath10 ) for minimum weight cycle immediately implies a @xmath11-time algorithm ( @xmath12 ) for apsp . </S>"
  ]
}