{
  "article_text": [
    "the polynomial remainder sequence ( prs ) is one of fundamental tools in computer algebra .",
    "although the euclidean algorithm ( see knuth ( @xcite ) for example ) for calculating prs is simple , coefficient growth in prs makes the euclidean algorithm often very inefficient . to overcome this problem ,",
    "the mechanism of coefficient growth has been extensively studied through the theory of subresultants ; see collins ( @xcite ) , brown and traub ( @xcite ) , loos ( @xcite ) , etc . by the theory of subresultant",
    ", we can remove extraneous factors of the elements of prs systematically .    in this paper",
    ", we consider a variation of the subresultant .",
    "when we calculate prs for polynomials which have a nontrivial gcd , we usually stop the calculation with the gcd .",
    "however , it is sometimes useful to continue the calculation by calculating the prs for the gcd and its derivative ; this is necessary for calculating the number of real zeros including their multiplicities .",
    "we call such a prs a `` recursive prs . ''",
    "although the theory of subresultants has been developed widely , the corresponding theory for recursive prs is still unknown within the author s knowledge : this is the main problem which we investigate in this paper . by `` recursive subresultants ,",
    "'' we denote determinants which represent elements of recursive prs by the coefficients of initial polynomials .",
    "this paper is organized as follows . in sect .",
    "[ sec : recprs ] , we introduce the concept of recursive prs . in sect .",
    "[ sec : subresrecprs ] , we define recursive subresultant and show its relationship to recursive prs . in sect .  [ sec : disc ] , we discuss briefly using recursive subresultants in approximate algebraic computation .",
    "first , we review the prs , then define the recursive prs . at",
    "last , we show recursive sturm sequence as an example of recursive prs .",
    "let @xmath0 be an integral domain and polynomials @xmath1 and @xmath2 be in @xmath3 $ ] .",
    "we define a polynomial remainder sequence as follows .",
    "[ def : prs ] let @xmath1 and @xmath2 be polynomials in @xmath3 $ ] of degree @xmath4 and @xmath5 ( @xmath6 ) , respectively . a sequence @xmath7 of nonzero polynomials",
    "is called a _ polynomial remainder sequence ( prs ) _ for @xmath1 and @xmath2 , abbreviated to @xmath8 , if it satisfies @xmath9 for @xmath10 , where @xmath11 @xmath12 are elements of @xmath0 and @xmath13 .",
    "a sequence @xmath14 @xmath15 is called a _ division rule _ for @xmath8 ( see von zur gathen and lcking ) .",
    "if @xmath16 is a constant , then the prs is called _ complete_.    if @xmath1 and @xmath2 are coprime , the last element in the complete prs for @xmath1 and @xmath2 is a constant .",
    "otherwise , it equals the gcd of @xmath1 and @xmath2 up to a constant : we have @xmath17 for some @xmath18 .",
    "then , we can calculate new prs , @xmath19 , and if this prs ends with a non - constant polynomial , then calculate another prs for the last element , and so on . by repeating this calculation , we can calculate several prss `` recursively '' such that the last polynomial in the last sequence is a constant .",
    "thus , we define `` recursive prs '' as follows .",
    "[ def : recprs ] let @xmath1 and @xmath2 be the same as in definition  [ def : prs ] .",
    "then , a sequence @xmath20 of nonzero polynomials is called a _ recursive polynomial remainder sequence _ ( recursive prs ) for @xmath1 and @xmath2 , abbreviated to @xmath21 , if it satisfies @xmath22 for @xmath23 .",
    "if @xmath24 , @xmath25 satisfy @xmath26 for @xmath27 and @xmath28 , then a sequence @xmath29 is called a _ division rule _ for @xmath21 . furthermore ,",
    "if @xmath30 is a constant , then the recursive prs is called complete .",
    "sturm sequence is a variant of prs , which is used in sturm s method , for calculating the number of real zeros of univariate polynomial ( for detail , see cohen ( @xcite ) for example ) .",
    "note that sturm s theorem is valid for not only polynomials having simple zeros but also those having multiple zeros ( see bochnak , coste and roy ( @xcite ) for example ) .",
    "here , we define `` recursive sturm sequence '' to calculate the number of real zeros including multiplicities , as follows .",
    "let @xmath31 be a real polynomial of degree @xmath4 .",
    "let a sequence of nonzero polynomials be defined by a recursive prs in definition  [ def : recprs ] , calculated as @xmath32 with division rule given by @xmath33 for @xmath27 and @xmath28 .",
    "then , the sequence is called the _ recursive sturm sequence _ of @xmath31 .",
    "[ ex : recsturmseq ] let @xmath34 , and calculate the recursive sturm sequence of @xmath31 . the first sequence @xmath35 has the following elements : @xmath36 the second sequence @xmath37 has the following elements : @xmath38 the last sequence @xmath39 has the following elements : @xmath40 for prs @xmath41 , @xmath42 , define sequences of nonzero real numbers @xmath43 and @xmath44 as @xmath45 where @xmath46 denotes the degree of @xmath47 and @xmath48 denotes the leading coefficients of @xmath47 .",
    "then , @xmath43 and @xmath44 for @xmath42 are @xmath49 for a sequence of nonzero real numbers @xmath50 , let @xmath51 be the number of sign variations of the elements of @xmath52 .",
    "then , we calculate the number of the real zeros of @xmath31 , including multiplicity , as @xmath53",
    "let @xmath1 and @xmath2 be polynomials in @xmath3 $ ] such that @xmath54 to make this paper self - contained and to use notations for our definitions , we first review the fundamental theorem of subresultants , then discuss subresultants for recursive prs .      there exist several different definitions of subresultants . here , we follow definitions and notations basically by von zur gathen and lcking ( @xcite ) .",
    "let @xmath1 and @xmath2 be as in .",
    "the _ sylvester matrix _ of @xmath1 and @xmath2 , denoted by @xmath55 , is an @xmath56 matrix constructed from the coefficients of @xmath1 and @xmath2 , such that @xmath57    next , we define the `` subresultant matrix '' to derive polynomial subresultants .",
    "let @xmath1 and @xmath2 be defined as in . for @xmath58 ,",
    "the _ @xmath59-th subresultant matrix _ of @xmath1 and @xmath2 , denoted by @xmath60 , is an @xmath61 sub - matrix of @xmath55 obtained by taking the left @xmath62 columns of coefficients of @xmath1 and the left @xmath63 columns of coefficients of @xmath2 , such that @xmath64    let @xmath1 and @xmath2 be defined as in . for @xmath58 and @xmath65 , let @xmath66 be a sub - matrix of @xmath60 obtained by taking the top @xmath67 rows and the @xmath68-th row ( note that @xmath69 is a square matrix ) .",
    "then , the polynomial @xmath70 is called the _ @xmath59-th subresultant _ of @xmath1 and @xmath2 .",
    "[ th : fundsubres ] let @xmath1 and @xmath2 be defined as in , @xmath71 be complete prs , and @xmath14 @xmath72 be its division rule .",
    "let @xmath73 and @xmath74 for @xmath75 , and @xmath76 for @xmath77 .",
    "then , we have @xmath78 for @xmath79 .    by the above theorem",
    ", we can express coefficients of prs by determinants of matrices whose elements are the coefficients of initial polynomials .",
    "we construct `` recursive subresultant matrix '' whose determinants represent elements of recursive prs by the coefficients of initial polynomials .    to make help for readers ,",
    "we first show an example of recursive subresultant matrix for recursive sturm sequence in example  [ ex : recsturmseq ] .    [ ex : recsubresmat ] we express @xmath31 and @xmath80 in example  [ ex : recsturmseq ] by @xmath81 let @xmath82 , then the matrices @xmath83 , @xmath84 and @xmath85 are given as @xmath86 where horizontal lines in matrices divide them into the upper and the lower components .",
    "note that the matrix @xmath87 is derived from @xmath84 by multiplying the @xmath88-th row by @xmath89 for @xmath90 and deleting the lowest row .",
    "similarly , the @xmath91-th recursive subresultant matrix @xmath92 is constructed as @xmath93    [ def : recsubresmat ] let @xmath1 and @xmath2 be defined as in , and let @xmath94 be complete recursive prs for @xmath1 and @xmath2 as in definition  [ def : recprs ] .",
    "let @xmath95 and @xmath96 for @xmath27 .",
    "then , for each tuple of numbers @xmath97 with @xmath27 and @xmath98 , define matrix @xmath99 as follows .    1 .   for @xmath100 ,",
    "let @xmath101 .",
    "2 .   for @xmath102 ,",
    "let @xmath99 consist of the upper block and the lower block , defined as follows : 1 .",
    "the upper block is partitioned into @xmath103 blocks with diagonal blocks filled with @xmath104 , where @xmath104 is a sub - matrix of @xmath105 obtained by deleting the bottom @xmath106 rows .",
    "let @xmath107 be a sub - matrix of @xmath105 obtained by taking the bottom @xmath106 rows , and let @xmath108 be a sub - matrix of @xmath107 by multiplying the @xmath109-th rows by @xmath110 for @xmath111 , then by deleting the bottom row .",
    "then , the lower block consists of @xmath112 blocks of @xmath107 such that the leftmost block is placed at the top row of the container block and the right - side block is placed down by 1 row from the left - side block , then followed by @xmath113 blocks of @xmath108 placed by the same manner as @xmath107 .",
    "@xmath114    as a result , @xmath99 becomes as shown in fig .",
    "[ fig : recsubresmat ] .",
    "then , @xmath99 is called the _ @xmath97-th recursive subresultant matrix _ of @xmath1 and @xmath2 .",
    "[ prop : recsubresmat ] for @xmath27 and @xmath115 , the numbers of rows and columns of @xmath99 , the @xmath97-th recursive subresultant matrix of @xmath1 and @xmath2 are @xmath116 and @xmath117 respectively .    by induction on @xmath118 . for @xmath100 , by definition of the subresultant matrix , we see that @xmath119 is a @xmath61 matrix .",
    "let us assume that equations and are valid for @xmath120 .",
    "then , we calculate the numbers of the rows and columns of @xmath99 as follows .    1 .   the numbers of rows of @xmath107 and @xmath108 are equal to @xmath106 and @xmath121 , respectively , hence the number of rows a block which consists of @xmath107 and @xmath108 in @xmath99 equals @xmath122 on the other hand , the number of rows of @xmath104 is equal to @xmath123 , hence the number of rows of diagonal blocks in @xmath124 is equal to @xmath125 by adding formulas ( [ eq : recsubresmatrow - low ] ) and ( [ eq : recsubresmatrow - up ] ) , we obtain ( [ eq : recsubresmatrow ] ) .",
    "2 .   the number of columns of @xmath105 is equal to @xmath126 , hence the number of columns of @xmath99 is equal to ( [ eq : recsubresmatcol ] ) .",
    "this proves the proposition .",
    "now , we define recursive subresultants by recursive subresultant matrices .",
    "[ def : recsubres ] let @xmath1 and @xmath2 be defined as in , and let @xmath127 @xmath128 be complete recursive prs for @xmath1 and @xmath2 as in definition  [ def : recprs ] .",
    "let @xmath95 and @xmath96 for @xmath27 .",
    "for @xmath98 and @xmath129 , let @xmath130 be a sub - matrix of the @xmath97-th recursive subresultant matrix @xmath99 obtained by taking the top @xmath131 rows and the @xmath132-th row ( note that @xmath133 is a square matrix ) .",
    "then , the polynomial @xmath134 is called the _ @xmath97-th recursive subresultant _ of @xmath1 and @xmath2 .",
    "finally , we derive the relation between recursive subresultants and coefficients in recursive prs .",
    "[ lem : recsubres ] let @xmath1 and @xmath2 be defined as in , and let @xmath94 be complete recursive prs for @xmath1 and @xmath2 as in definition  [ def : recprs ] .",
    "let @xmath135 , @xmath46 , @xmath95 and @xmath96 for @xmath27 and @xmath136 , and let @xmath137 for @xmath27 and @xmath138 .",
    "furthermore , for @xmath139 and @xmath98 , define @xmath140 and let @xmath141 .",
    "for @xmath23 and @xmath98 , define @xmath142 and let @xmath143 and @xmath144 .",
    "then , for the @xmath97-th recursive subresultant of @xmath1 and @xmath2 with @xmath27 and @xmath98 , we have @xmath145 where @xmath146 and @xmath147 for @xmath102 .    for a univariate polynomial @xmath148 with @xmath149 for @xmath150 ,",
    "let us denote the coefficient vector for @xmath31 by @xmath151 .",
    "we prove the lemma by induction on @xmath118 . for @xmath100",
    ", it follows immediately from the fundamental theorem of subresultants ( theorem  [ th : fundsubres ] ) .",
    "let us assume that ( [ eq : recsubreslem ] ) is valid for @xmath120 .",
    "then , we have @xmath152 hence we have @xmath153 for @xmath154 .",
    "therefore , there exists a matrix @xmath155 such that @xmath156 and that we can transform @xmath105 to @xmath157 by eliminations on columns .",
    "furthermore , by eliminations and exchanges on columns in the block @xmath158 as shown in brown and traub ( @xcite ) , we can transform @xmath159 to @xmath160 such that @xmath161 is a lower triangular matrix with all diagonal elements equal to 1and that , where @xmath162and @xmath163 are sub - matrices of @xmath159 and @xmath164 , respectively , obtained by the same manner as we have obtained @xmath165 .",
    "therefore , we have @xmath166 similarly , let @xmath167 . then , by the same transformations in the above , we can transform @xmath168 to @xmath169 satisfying @xmath170 where @xmath171 and @xmath172 are sub - matrices of @xmath168 and @xmath173 , respectively , obtained by taking the top @xmath174 rows and the @xmath175-th row for @xmath176 .",
    "therefore , for , we can transform @xmath99 to @xmath177 as shown in fig .",
    "[ fig : recsumbresmatbar ] by eliminations and exchanges on columns in each column block , and let @xmath178 be sub - matrix of @xmath177 obtained by the same manner as we have obtained @xmath179 .",
    "@xmath180    then , we have @xmath181 from ( [ eq : mbardetk ] ) and ( [ eq : mbardetk-1 ] ) and since there exist @xmath182 blocks of @xmath183 and @xmath184 in @xmath177 with each of which divided into the upper and the lower block .    furthermore , by exchanges on columns",
    ", we can transform @xmath177 to @xmath185 as shown in fig .",
    "[ fig : recsubresmathat ] , and let @xmath186 be sub - matrix of @xmath185 obtained by the same manner as we have obtained @xmath179 .    @xmath187    then , we have @xmath188 because the @xmath189-th column in @xmath177 was moved to the @xmath190-th column in @xmath185 for .",
    "furthermore , we have @xmath191 because the lower - right block of @xmath192 and @xmath193 in @xmath185 is equal to @xmath194 .    finally , from ( [ eq : rel - m - mbar ] ) , ( [ eq : rel - mbar - mhat ] ) and ( [ eq : rel - mhat - subres ] ) , we have @xmath195 therefore , by the definitions of recursive subresultant , we obtain ( [ eq : recsubreslem ] ) .",
    "this proves the lemma .    with the same conditions as in lemma  [ lem : recsubres ] , and for @xmath27 and @xmath196",
    ", we have @xmath197    by substituting @xmath198 in ( [ eq : recsubreslem ] ) by ( [ eq : subresthm1])([eq : subresthm4 ] ) , we obtain ( [ eq : recsubresthm1])([eq : recsubresthm4 ] ) , respectively .",
    "we show an example of the proof of lemma  [ lem : recsubres ] for recursive subresultant matrix in example  [ ex : recsubresmat ] .",
    "let us express @xmath47 in example  [ ex : recsturmseq ] by @xmath199 with @xmath46 . by eliminations and exchanges of columns as shown in brown and traub  ( @xcite ) , we can transform @xmath200 and @xmath201 in ( [ eq : recsubresmatex ] ) to @xmath202 and @xmath203 , respectively , as @xmath204 where @xmath205 .",
    "furthermore , we have @xmath206 with @xmath207 where @xmath208 and @xmath209 are sub - matrices of @xmath210 and @xmath87 , respectively , obtained by taking the top 4 rows and the @xmath211-th row . therefore , by eliminations and exchanges on columns , we can transform @xmath92 in ( [ eq : recsubresmatex ] ) to @xmath212 as @xmath213 satisfying @xmath214 .",
    "furthermore , by exchanges on columns , we can transform @xmath212 to @xmath215 as @xmath216 satisfying @xmath217 .",
    "therefore , we have @xmath218 for @xmath219 , and we have @xmath220",
    "in this paper , we have defined recursive prs as well as recursive subresultants , and proved a similar theorem as the fundamental theorem of subresultant .",
    "the concept of recursive subresultant is inspired , in approximate algebraic computation , by representing coefficients in recursive prs by the coefficients of initial polynomials .",
    "for example , consider calculating recursive sturm sequence of a polynomial with floating - point number coefficients by floating - point arithmetic . in the case",
    "the initial polynomial has multiple or close zeros , there may exist a polynomial in the sequence such that it is difficult to decide whether the polynomial becomes zero or not .",
    "also , zero recognition of very small leading coefficient is another important problem because it plays crucial role in calculating the number of real zeros .    for the problem of zero recognition of very small leading coefficients , the present author and sasaki ( @xcite )",
    "have proposed a criterion for calculating the number of real zeros correctly by sturm s method : if the sturm sequence satisfy certain condition on sylvester matrix , then we can neglect the small leading coefficient which makes computation of the sturm sequence more stable .",
    "we expect that the recursive subresultant ( matrix ) will be useful for zero recognition of a polynomial in recursive sturm sequence , by representing its coefficients by the coefficients of initial polynomials then analyzing it by numerical methods ; this is the problem on which we are working now .",
    "the author thank prof .",
    "tateaki sasaki very much for revising the original manuscript , and the referees for their helpful suggestions .",
    "von  zur gathen , j. , lcking , t. : subresultants revisited ( extended abstract ) . in gonnet , g.h .",
    ", panario , d. , viola , a. , eds . : latin 2000 : theoretical informatics .",
    "volume 1776 of lecture notes in computer science .",
    "springer ( 2000 ) 318342"
  ],
  "abstract_text": [
    "<S> we introduce concepts of `` recursive polynomial remainder sequence ( prs ) '' and `` recursive subresultant , '' and investigate their properties . in calculating prs , if there exists the gcd ( greatest common divisor ) of initial polynomials , we calculate `` recursively '' with new prs for the gcd and its derivative , until a constant is derived . </S>",
    "<S> we call such a prs a _ </S>",
    "<S> recursive prs_. we define _ recursive subresultants _ to be determinants representing the coefficients in recursive prs by coefficients of initial polynomials . </S>",
    "<S> finally , we discuss usage of recursive subresultants in approximate algebraic computation , which motivates the present work . </S>"
  ]
}