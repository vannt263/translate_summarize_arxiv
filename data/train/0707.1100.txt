{
  "article_text": [
    "the interplay between network structure and search dynamics has emerged as a busy sub - field of statistical network studies ( see e.g.  refs .",
    "@xcite ) . consider a simple graph @xmath0 ( where @xmath1 is a set of @xmath2 vertices and @xmath3 is a set of @xmath4 edges  unordered pairs of vertices ) .",
    "assume information packets travel from a source vertex @xmath5 to a destination @xmath6 .",
    "we assume the packages are myopic agents ( at a given timestep they have access to information about the vertices in their neighborhood , but not more ) , have memory ( so they can e.g.  perform a depth - first search ) but no previous knowledge of the network . let @xmath7 be the time for a packet @xmath8 to travel between its source and destination .",
    "one commonly studied quantity of search efficiency is the expectation value of @xmath9 , @xmath10 , for randomly chosen @xmath5 and @xmath6 . in this work we attempt to find efficient ways to index @xmath1 and",
    "utilize these indices for packet navigation .",
    "we propose two schemes of indexing the vertices , and corresponding methods for packet navigation .",
    "these schemes , along with two depth - first search methods ( not using vertex indices for more than remembering the path ) are examined on four network models .",
    "we will first present the indexing and search schemes , then the network models for testing the algorithms , and last numerical results .     to @xmath6 ( with @xmath11 ) . on the way from @xmath6 to @xmath12 the packet chooses the neighbor ( of the current vertex ) with lowest index , which here gives a longer route than the optimal @xmath13 .",
    "( d ) shows a possible partition of branches of non - root vertices into classes of as similar size as possible ( as done in the asu indexing scheme ) .",
    "( e ) shows a possible indexing based on the partition in ( d ) .",
    "panel ( f ) displays a search from @xmath5 to @xmath6 with @xmath14 .",
    "the shortest path from @xmath6 to @xmath12 is accurately found , but a detour to @xmath15 makes the search from @xmath12 to @xmath6 sub - optimal . ]",
    "now we turn to the schemes for assigning indices to the vertices and using them in search processes .",
    "our two main schemes are both inspired by search trees .",
    "packets first moves towards a root vertex @xmath12 , then towards the destination .",
    "unless the network really is a tree , this approach can not be exact  a packet is not guaranteed to find the shortest way both from @xmath5 to @xmath12 and from @xmath12 to @xmath6 ) .",
    "however , as we will see , one can assign indices such that the search either from @xmath5 to @xmath12 , or from @xmath12 to @xmath6 is certain to be as short as possible .",
    "one of our schemes , asd ( accurate search up ) , will be such that the shortest upward search is guaranteed , the other , asd ( accurate search down ) , will have the shortest possible @xmath12 to @xmath6 search .    on a technical note ,",
    "@xmath1 is a set of distinct elements and an indexing scheme is a bijection @xmath16 $ ] . in the remainder of the text we will not explicitly distinguish @xmath17 from @xmath18 .",
    "the numbers @xmath19 can be arranged into a search tree  @xcite such that the expected value of @xmath9 scales like @xmath20 . in fig .",
    "[ fig : ill](a ) we give an example of a search tree . to go from source @xmath5 to destination @xmath6",
    "a packet first moves to the root @xmath12 by going to the neighbor with lowest index value . from the root to the destination , the package moves to the neighbor with the largest index smaller than , or equal to , @xmath6 .",
    "our strategy for the asd indexing and search scheme is to construct a spanning tree @xmath21 for the network ; index the tree to make it a search tree ; and use the algorithm above to navigate from @xmath5 to @xmath6 .",
    "the problem is , however that real networks are not trees .",
    "imagine adding edges between vertices of the same heights and branches to the tree in fig .",
    "[ fig : ill](a)the tree will still be a spanning tree , but the packets may not take the same path from @xmath5 to @xmath6 any more . as we will see , with certain ways of constructing the tree and indexing the vertices the search , either from @xmath5 to @xmath12 or @xmath12 to",
    "@xmath6 will be optimal .",
    "we construct @xmath21 in the following way :    1 .",
    "let the root @xmath12 be a vertex of smallest eccentricity ( maximal distance to an other vertex ) .",
    "2 .   construct the tree such that the distances to the root is the same in @xmath21 and @xmath22 .",
    "in other words , such that all edges in @xmath23 go between different neighborhoods @xmath24 and @xmath25 for some level @xmath26 , where @xmath27 is the _ height _ of the tree ( by the choice of @xmath12 , @xmath27 is also the radius of the graph ) .",
    "such a tree can be constructed by finding the set of followed edges in a breadth - first search  @xcite starting from @xmath12 .    when it is not clear which vertex , or edge , to choose in the above construction , we choose one at random from all the possible candidates .",
    "when @xmath23 is constructed , let the indices be a preordering of the vertices in @xmath23 ( i.e.  the order of first - occurrence of the vertex in a depth - first search of the graph )  @xcite .",
    "now we prove that this indexing and search algorithm always gives the shortest paths from the root to a vertex @xmath6 .",
    "let @xmath28 be the edges of @xmath23 and let @xmath29 be the maximal subtree with @xmath30 as root . by construction ,",
    "all vertices in @xmath29 have indices in @xmath31 $ ] ( where @xmath32 denotes the cardinality of a subgraph ) .",
    "let @xmath33 be the largest index in @xmath30 s neighborhood smaller than @xmath6 .",
    "assume there is an edge @xmath34 that the search will follow , i.e.  that @xmath35 .",
    "this means that @xmath36 . by construction",
    ", @xmath33 is the only vertex in @xmath37 at a distance @xmath38 ( the distance from the rest of @xmath37 to the root is at least @xmath39 ) . since @xmath40 , we have @xmath41 which contradicts the existence of an edge @xmath42 . thus searches from @xmath12 to @xmath6",
    "will always follow the edges of @xmath23 , which also means the @xmath12@xmath6-searches will be as short as possible .",
    "searching upwards , from @xmath30 to @xmath12 , in a graph indexed as above is harder .",
    "we know that one shortest path goes via a vertex @xmath43 with smaller index than @xmath30 , but there might sub - optimal paths via indices @xmath33 in the intervals @xmath44 and @xmath45 , and there might also be paths via vertices of index larger than @xmath43 , that is optimal .",
    "for example , assume the search tree in fig .",
    "[ fig : ill](a ) comes from a graph with the additional edges @xmath46 , @xmath47 and @xmath48 ( see fig .",
    "[ fig : ill](b ) ) .",
    "then , the shortest path from @xmath49 to @xmath12 via a vertex of lower index is @xmath50 , but there is an equally long path via a vertex of larger index , @xmath13 , and longer paths via vertices both smaller and larger than @xmath51 but smaller than @xmath49 .",
    "there thus no general way of finding the shortest way from @xmath5 to @xmath12 . instead , we always choose the vertex with the smallest index in the neighborhood . by this strategy",
    "a packet will come closer to @xmath12 , in index space , for every step .",
    "furthermore , in tree - like parts of the graph , the search will follow the shortest paths .",
    "an illustration of the asd search can be found in fig .",
    "[ fig : ill](c ) .",
    "consider a tree @xmath21 constructed as in the previous section and an indexing such that @xmath52 implies @xmath53 ( i.e. , all indices of a level further from the root is larger than in levels closer to @xmath12 ) .",
    "with such an indexing , since the neighbor of a vertex with the smallest index necessarily is one step closer to the root , a packet can always find one shortest way too the root .",
    "but once the package is at the root the indices is not of so much help .",
    "the search from @xmath12 to @xmath6 has to be , essentially , a depth - first search .",
    "there are , however , a few tricks to speed up the search . first , there is no need to search deeper than @xmath6if @xmath54 , then @xmath55 .",
    "second , one can choose the indices @xmath56 of one level in the tree in a way to narrow down the search .",
    "for example , one can divide the vertices into @xmath57 classes ( defined by e.g.  the remainder when the index is divided by @xmath57 ) and index vertices of connected regions of the graph with indices of the same class .",
    "the search can then be restricted to the same class as the destination .",
    "we will pursue this idea with @xmath58 .    to derive the asu indexing scheme ,",
    "the first goal is to divide the vertices into classes of connected subgraphs .",
    "furthermore , we require all classes to be connected to the root vertex . another aim is to make the classes of as similar sizes as possible .",
    "our first step is to make @xmath59 ( the degree , or number of neighbors , of @xmath12 ) parallel depth - first searches .",
    "second we group the @xmath59 search trees into @xmath57 groups with maximally similar sizes . in our case , we seek a partition of the search trees into two classes such that the sums of vertices in the respective classes are as close as possible",
    ". then we go through the levels , starting from the root , and assign numbers such that vertices of one partition have even indices , while the other has odd numbers ( this assignment might not always work ) . to avoid systematic errors we sample the elements of levels randomly .",
    "this construction scheme is illustrated in fig .",
    "[ fig : ill](d ) and ( e ) .      as a reference",
    ", we also run simulations for two depth - first search methods that do not utilize indices  @xcite .",
    "one of them , rnd , is regular depth - first search where the neighbors are traversed in random order . in the other , deg ,",
    "the neighbors are chosen in order from high to low degree . just like for asu and asd methods ,",
    "a packet is assumed to have knowledge about its neighborhood  if the destination is in the neighborhood of a vertex , then the search will be over the next time step .",
    "the efficiency of our indexing and search schemes are more or less directly affected by the network structure . to investigate this relationship we test the search schemes on four different types of network models : modified erds ",
    "rnyi ( er ) graphs  @xcite , square lattices , barabsi ",
    "albert ( ba )  @xcite and holme  kim ( hk )  @xcite networks . to facilitate comparison",
    ", we have the same average degree , four ( dictated by the square grid ) , in all networks .",
    "the er model is the simplest model for randomly generating simple graphs with @xmath2 vertices and @xmath4 edges .",
    "the edges are added one by one to randomly chosen vertex pairs ( the only restriction being that loops or multiple edges are not allowed ) .",
    "a problem for our purpose is that er graphs are not necessarily connected ( something required to measure @xmath10 ) . to remedy this",
    "we propose a scheme to make networks connected .    1 .",
    "[ step : components ] detect the connected components",
    "[ step : seq ] go through the connected components sequentially .",
    "denote the current component @xmath60 .",
    "[ step : random_component ] pick a component @xmath61 randomly .",
    "2 .   pick a random edge @xmath62 whose removal would not fragment @xmath61 . if no such edge exist , go to step  [ step : seq ] .",
    "[ step : rnd_vertex ] pick a random vertex @xmath33 of @xmath60 .",
    "[ step : repl ] replace @xmath62 by @xmath63 . if the edge @xmath63 would exist already ( an unlikely event ) , go to step  [ step : repl ] . if there is no vertex @xmath64 such that @xmath63 does not already exist , then go to  [ step : seq ] .",
    "3 .   if the network is disconnected still , go to step  [ step : components ] .    in practice , even for our largest system sizes , the above algorithm converges in a few iterations .",
    "the number of edges needed to be added never exceed a few percent of @xmath4 , and this addition is made with greatest possible randomness ; hence we believe the essential network structure of the er model is conserved .",
    "we use square lattices with periodic boundary conditions .",
    "@xmath2 vertices spread out regularly on a @xmath65-grid such that the vertex with coordinates @xmath66 , @xmath67 , is connected to @xmath68 , @xmath69 , @xmath70 , @xmath71 ( if @xmath72 , we formally let @xmath73 , if @xmath74 we let @xmath75 represent @xmath76 ; and correspondingly for @xmath77 ) .",
    "the popular ba model  @xcite of networks with a power - law degree distribution works as follows ( with our parameter settings ) .",
    "start with one vertex connected to two degree - one vertices .",
    "iteratively add vertices connected to two other vertices .",
    "let the probability of connecting the new vertex to a vertex @xmath30 already present in the network is proportional to @xmath78 ( so called _ preferential attachment _ ) .",
    "the hk model  @xcite is a modification of the ba model to give the network higher number of triangles .",
    "when edges are added from the new vertex to already present vertices , the first edge is added by preferential attachment .",
    "the second edge is added to one of @xmath30 s neighbors , forming a triangle .     as a function of the graph",
    "sizes @xmath2 . in all panels , we display data for the different indexing and search schemes .",
    "the shaded areas are unreachable ( corresponding to @xmath10 values smaller than the theoretical minimum  the average distance @xmath79 ) .",
    "the different panels correspond to the modified er model , square grid , ba model and hk model networks respectively .",
    "error bars would have been smaller than the symbol sizes . ]",
    "we study the search schemes on the four different network topologies numerically .",
    "we use @xmath80 independent networks and @xmath80 different @xmath5@xmath6-pairs for every network .",
    "the network sizes range from @xmath81 to @xmath82 .",
    "to @xmath12 with the asd indexing and search scheme . a packet from @xmath83 to @xmath76",
    "will travel along the perimeter to @xmath84 and then move towards the center . ]    in fig .",
    "[ fig : sca ] we display the average search times as a function of system size for our simulations .",
    "the most conspicuous feature is that the asd scheme is always , by far , the most efficient .",
    "while asu and deg are close to the least efficient method ( rnd ) , asd is rather close to the theoretical limit ( equal to the average distances @xmath10the upper border of the shaded areas in fig .",
    "[ fig : sca ] ) . to be more precise",
    ", @xmath10 is quite constant , about two times larger than the average distance . the other search schemes ( asu , deg and rnd ) follow faster increasing functional forms .",
    "for the square lattice , these three schemes increase , approximately proportional to @xmath2 ( the analytical value for two - dimensional random walks ) whereas for asd , @xmath10 scale like distances in square grids , @xmath85 .",
    "one way of interpreting this result is that while asd manages to find the root as fast as it finds the destination from the root , asu fails to find @xmath6 faster than a random search .",
    "the slow downward performance of asu is not unexpected ",
    "the @xmath12@xmath6-search in asu only differs from a random depth - first search in that it does not search further than the level of the destination , and that it restricts the search - space to half its original size by dividing the vertices into odd and even indices .",
    "the fast upward search of asd is more surprising . in fig .",
    "[ fig : wcs ] we show a network where asd performs badly .",
    "the average time to search upwards is @xmath86 as @xmath87 .",
    "the downward search takes @xmath88 giving a total expected value of @xmath89 .",
    "this can be compared to the average distance @xmath90 .",
    "for this example , @xmath10 and @xmath79 diverge in a way not seen in the network models .",
    "why is the search so much faster in the model networks ?",
    "one point is that the worst - case indexing seen in fig .  [",
    "fig : wcs ] is very unlikely .",
    "since the spokes would be sampled randomly , the chance that a vertex at the perimeter not finds @xmath12 in two steps is @xmath91 , the probability of a perimeter vertex to find @xmath12 in @xmath84 steps is @xmath92 , and so on . carrying on this calculation , a vertex at the perimeter reaches @xmath12 in @xmath93 timesteps giving @xmath94not too far from the observed @xmath95 .",
    "we note however that for the model networks many other factors that are not present in the wheel - graph of fig .",
    "[ fig : wcs ] affect @xmath96 .",
    "for example , the high density of short triangles in the hk model networks will introduce many edges between vertices of the same level in @xmath21 which will affect the search efficiency .",
    "@xmath10 is approximately linear for the asu , deg and rnd on all network models .",
    "the slopes of these curves are , however , a little different .",
    "first , the deg method is more efficient ( compared to asu and rnd ) for ba networks , than for the modified er model .",
    "this observation ( also made in ref .",
    "@xcite ) can be explained by the skewed degree distribution in the ba - network  the packet reaches high - degree vertices fast .",
    "the packet can see a large part of the network from these hubs , and is therefore more likely to see @xmath6 .",
    "more interesting , perhaps , is that asu is more efficient for the networks with a higher density of short cycles ( the square lattice and hk models ) .",
    "a rough explanation is that the partition procedure of asu cuts off many edges between vertices at the same distance from @xmath12 .",
    "since there are many such edges in these network models , the network will effectively be sparser ( without changing @xmath22 s diameter ) , which results in a better performance .",
    "we have investigated navigation in valued graphs , more specifically in indexed graphs ",
    "graphs where every vertex is associated with a unique number in the interval @xmath97 $ ] .",
    "these indices can be assigned to facilitate the packet navigation .",
    "the packets are assumed to have no _ a priori _ knowledge about the network , except the neighborhoods of their current positions , but memory enough to perform a depth - first search .",
    "we find that one of our investigated methods , asd , is very efficient for four topologically very different network models .",
    "the searches with the asd scheme are roughly twice as long as the shortest paths ( scaling in the same way as the average distance ) .",
    "navigation on indexed graphs has applications in distributed information systems . if , specifically , the amount of information that can be stored at the vertices were limited , search strategies such as ours would be useful .",
    "one such system is the autonomous system level internet where the information stored at each vertex ( with the current protocols ) increase at least as fast as the networks themselves . for most real - world applications ( other examples being _ ad hoc _ networks@xcite or peer - to - peer networks  @xcite ) there are additional constraints so that the algorithms of this paper can not immediately be applied .",
    "such networks are typically changing over time , so the indexing should ideally be possible to be extended on the fly as vertices and edges are added and deleted from the network . apart from this ,",
    "a future direction for research on indexed graphs is to improve the performance of the algorithms presented in this work .",
    "there might be search - tree based algorithm that neither finds the shortest path to the root , nor finds the shortest way to the destination .",
    "for some network topologies there might be faster algorithms that are not based on constructing a spanning tree .",
    "consider , for example , modular networks  @xcite ( i.e.  networks with tightly connected subgraphs that are only sparsely interconnected ) in such networks the search can be divided into two stages  first find the cluster of the destination , then the destination .",
    "these two stages should be reflected in a fast navigation algorithm .",
    "n.  ganguly , l.  brusch , and a.  deutsch .",
    "design and analysis of a bio - inspired search algorithm for peer to peer networks . in o.",
    "babaoglu , m.  jelasity , a.  montresor , c.  fetzer , and s.  leonardi , editors , _ self - star properties in complex information systems _ , pages 358372 , new york , 2007 .",
    "springer - verlag .",
    "n.  sarshar , p.  o. boykin , and v.  p. roychowdhury .",
    "percolation search in power law networks : making unstructured peer - to - peer networks scalable . in _ proceedings of fourth international conference on peer - to - peer computing _ , pages 29 .",
    "ieee , 2004 ."
  ],
  "abstract_text": [
    "<S> we investigate efficient methods for packets to navigate in complex networks . </S>",
    "<S> the packets are assumed to have memory , but no previous knowledge of the graph . </S>",
    "<S> we assume the graph to be indexed , i.e.  every vertex is associated with a number ( accessible to the packets ) between one and the size of the graph . </S>",
    "<S> we test different schemes to assign indices and utilize them in packet navigation . </S>",
    "<S> four different network models with very different topological characteristics are used for testing the schemes . </S>",
    "<S> we find that one scheme outperform the others , and has an efficiency close to the theoretical optimum . </S>",
    "<S> we discuss the use of indexed - graph navigation in peer - to - peer networking and other distributed information systems . </S>"
  ]
}