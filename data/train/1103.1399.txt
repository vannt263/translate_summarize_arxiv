{
  "article_text": [
    "quantum computation , one of the most recent joint ventures between physics and computer science , is a promising emerging branch of science and technology aiming at providing us with algorithms and experimental devices that allow us to exploit quantum effects of physical systems , in order to perform simulations and calculations . quantum computing promises great advances in the solution of some problems for which we know no efficient algorithms under the classical computer models and systems we currently have @xcite .",
    "moreover , current results and developments on both theoretical ( e.g. @xcite ) and experimental ( e.g. @xcite ) arenas of quantum computing have resulted in an increased interest of several applied scientific communities to cross - fertilize their own fields with techniques and ideas from this discipline ( e.g. @xcite . )",
    "one of the main problems a computer scientist faces when learning and working on the development of quantum algorithms is the counterintuitive behavior of quantum mechanical systems . for this reason , together with the need to test experimental proposals before implementing them , building powerful classical computer platforms for",
    "the simulation of quantum systems is crucial in order to develop intuition about the behavior of quantum systems used for computational purposes , as well as to realize the approximate behavior of practical implementations of quantum algorithms .",
    "particularly , quantifying resources required to process information and/or to compute a solution , i.e. to assess the complexity of the process , is a prioritized research area , as it allows us to estimate implementation costs , as well as to compare problems by comparing the complexity of their solutions . in summary",
    ", building simulators for quantum algorithms in classical computers would allow the scientific community to study and analyze the expected behavior and potential of these algorithms on future quantum computers .",
    "developing classical computer simulations of quantum algorithms usually has two drawbacks : i ) running such simulations of quantum algorithms is frequently a highly demanding task ( i.e. an exponential amount of computational resources is typically needed for exact simulations ) , and ii ) due to the computer languages typically used for such classical simulations",
    "( e.g. c , c++ , phyton ) , computer scientists usually have a hard time focusing on solving the problem in mind because of the overwhelming low - level programming details , i.e. high - level languages and better interfaces are needed .    in this paper",
    "we introduce a parallel hardware and software simulation platform for quantum algorithms with high - level user interfaces .",
    "our simulation environment is based on a high - level user interface developed on mathematica@xmath0 which is connected to c++ code in order to make our platform capable of communicating with a graphics processing unit ( gpu . )",
    "our simulation environment is designed to take full advantage of multi - core parallel processing capabilities on the gpu in order to enhance the performance of such classical simulations thus giving scientists the option to work with more extensive problems in less time and without the need to access grid or cloud infrastructures .",
    "the high level interface , compiled as a mathematica@xmath0 add - on called quantum@xmath0 , allows scientists to express their algorithms using the dirac notation without having to translate them into a matrix form .",
    "then , we use mathlink@xmath0 to send the information from mathematica to c++ code prepared to deploy the parallel tasks to the multiple cores contained in the gpu .",
    "our cuda interface allows users to communicate with kernels prepared to solve specific problems or with the linear algebra cuda libraries cublas and cula .",
    "our proposal could be used by quantum scientists to enhance the performance of quantum computing simulations using a single pc equipped with an nvidia@xmath0 cuda - compatible gpu . moreover ,",
    "our very user - friendly interfaces hide the technical , i.e. coding complexity , details of building parallel algorithms for gpus by creating kernel . in the example we present on this paper ,",
    "we have designed such kernels to simulate hard instances of an np - complete problem , 3-satisfiability problem ( 3-sat ) @xcite .",
    "we present results for benchmarks performed with a variety of instances of the 3sat problem running with our simulator on the cpu and the gpu .",
    "the rest of this paper is divided as follows : we start by providing the reader with preliminary information about quantum adiabatic computation , the 3-sat problem and a concise review of classical simulation of quantum algorithms , as these three topics are needed in order to properly describe the structure of our contribution . this section is followed by a reflection on the relationship between natural parallel processing and computer parallel processing , being our comments of this section a contribution towards realizing how massive distributed - parallel computer systems can be used to learn more about nature and her processes .",
    "we then proceed to introduce the reader to the theoretical and practical foundations of our proposal , followed by numerical results produced by simulating a quantum adiabatic algorithm designed to simulate hard instances of 3-sat .",
    "we finish this paper by delivering a conclusions section .",
    "the purpose of this section is to provide the reader with the preliminary concepts upon which we have built our proposal .",
    "we start by delivering the basics of adiabatic quantum computation as that is the universal model of quantum computation we have employed in order to build an example to show the capacities of our simulation platform .",
    "furthermore , we have also used the hamiltonian proposed in @xcite for solving hard instances of the 3-sat problem by adiabatic evolution , that is why we also introduce the definition , main characteristics and an example of the 3-sat problem .",
    "we finish this section by providing a concise review of currently existing classical simulators of quantum algorithms .",
    "the realization of a robust quantum computer must fulfill several requirements @xcite , including the development of universal models of quantum computation . among such models we find adiabatic quantum computation ( aqc ) @xcite , a promising paradigm of quantum computing due to its robustness @xcite , its encouraging results in the study of np - complete problems @xcite , and its implementation for the study of statistical mechanical complex problems such as protein folding @xcite .",
    "the goal of aqc algorithms is to transform an initial ground state @xmath1 into a final ground state @xmath2 , which encodes the answer to the problem .",
    "this is achieved by evolving the corresponding physical system according to the schrdinger equation with a time - dependent hamiltonian @xmath3 .",
    "the aqc algorithm relies on the quantum adiabatic theorem @xcite , which states that the time propagation of the quantum state will remain very close to the instantaneous ground state @xmath4 for all @xmath5 $ ] , whenever @xmath3 varies _ slowly enough _ throughout the propagation time @xmath5 $ ] and assuming the ground state manifold does not cross the energy levels which lead to excited states of the final hamiltonian . here",
    ", we denote by ground state manifold the first @xmath6 curves associated with the lowest eigenvalue of the time - dependent hamiltonian for @xmath5 $ ] , where @xmath6 is the degeneracy of the final hamiltonian ground state . conventionally , the adiabatic evolution path is the linear sweep of @xmath7 $ ] , where @xmath8 : @xmath9 @xmath10 is usually chosen such that its ground state is a uniform superposition of all possible @xmath11 computational basis vectors . here , we choose the spin states \\{@xmath12 with eigenvalues + 1 and -1 , respectively , as the basis vectors .",
    "then the initial ground state is @xmath13 .",
    "such an initial ground state is usually assumed to be easy to prepare and it results in a quantum state with equal probability of all possible solutions .      for @xmath14 , k - sat is an np - complete problem @xcite and instances of this problem are particularly difficult to solve when the ratio of number of clauses to number of variables is about 4.2 @xcite . studying the properties of 3-sat is an important area of research , not only because a polynomial - time solution to 3-sat would imply * p = np * , but also because 3-sat may be used to model problems and procedures in theoretical computer science @xcite as well as in several areas of applied computer science and engineering like artificial intelligence @xcite .",
    "we now provide the reader with a concise introduction of the k - sat problem together with an example of 3-sat instances .",
    "+   + * the k - sat problem*. let @xmath15 be a set of boolean variables @xmath16 and their negations @xmath17 .",
    "let us now construct a logical proposition @xmath18 , defined as @xmath19 = \\bigwedge_i c_i$ ] , where @xmath20 , i.e. p is a conjunction of clauses @xmath21 over the set @xmath22 , where each clause consists of the disjunction of @xmath23 literals .",
    "proposition @xmath18 is a k - sat instance and the solution of the k - sat problem , for instance @xmath18 , consists of finding a set of values for those binary variables upon which @xmath18 has been built ( i.e. a bitstring ) , so that replacement of such binary variables for their corresponding binary values makes @xmath24 , namely , proposition @xmath18 is satisfied .    in order to provide a concise example of how a 3-sat instance looks like , together with an attempt to show how difficult solving 3-sat hard instances",
    "is , let @xmath25 be a set of binary variables and consider a 3-sat instance specified by    @xmath26    as this example suggests , finding solutions of even a modest 3-sat instance can become difficult quite easily ( in this case , @xmath18 has only one solution : @xmath27 . )      for quantum computing practitioners , classical computer simulation of quantum algorithms is crucial in order to understand and to develop intuition about the behavior of quantum systems used for computational purposes , as well as to realize the approximate behavior of practical implementations of quantum algorithms .",
    "early works presented by mer in @xcite , bettelli _ et al _ in @xcite and viamontes _ et al _ in @xcite among others , introduced the idea of implementing quantum algorithms simulators using classical computer languages . later and among many other interesting contributions to this field , nyman proposed using symbolic classical computer languages for simulating quantum algorithms @xcite , mer proposed abstract semantic structures for modelling quantum algorithms in classical environments @xcite , and altenkirch _",
    "et al _ proposed a quantum programming language based on classical functional programming @xcite .",
    "along with these efforts , several software platforms were developed in order to simulate quantum algorithms , being @xcite a comprehensive list of currently available classical simulators of quantum algorithms .",
    "more recently , the availability of massively distributed computer systems like grids , clouds and gpus has attracted the attention of researchers interested in harnessing those parallel platforms for simulating quantum algorithms , being the work produced by de raedt @xcite , caraiman @xcite and this paper some examples of this emerging multidisciplinary interest .",
    "in addition to the arguments provided at the beginning of this section , another attractive application of research results on classical simulation of quantum systems is the realization of what exactly is quantum about quantum algorithms , for the following reasons :    1 .",
    "we need to understand exactly which properties and operations of quantum systems can not be efficiently simulated by classical systems ( see @xcite and @xcite for most interesting results related to this topic ) .",
    "2 .   we also need to realize whether and how exclusively quantum mechanical properties and operations can be employed for algorithm speed - up .",
    "an example of the importance of realizing whether truly quantum properties can be used for algorithm speed - up was provided in the field of quantum walks a few years ago . since the publication of @xcite it had been believed that the enhanced variance of position distribution in quantum walks was responsible ( partially at least ) for quadratic speed - up of quantum walk - based algorithms .",
    "however , arguments in favor of the plausibility of using classical physics for building experiments which replicate some interference and statistical properties of quantum walks are given in @xcite , @xcite , @xcite , and @xcite , where it was shown that it is possible to develop implementations of a quantum walk on a line purely described by classical physics ( wave interference of electromagnetic fields ) and still be able to reproduce the variance enhancement that characterizes a discrete quantum walk .",
    "for example , the implementation proposed in @xcite utilizes the frequency of a light field as walker and the spatial path or the polarization state of the same light field as the coin .",
    "nature has developed very quick shortcut procedures in order to reach stable configurations ( as in the case of protein folding @xcite ) as well as to exhaustively compute all possible configurations of a physical system ( as in the case of quantum superposition and quantum parallelism @xcite ) .",
    "if we think of these phenomena from a computer science perspective , it is indeed our opinion that it is reasonable to hypothesize that nature uses parallel procedures in order to quickly arrive at stable configurations , as well as to fully run natural phenomena for which an exponential or factorial amount of computer power would be needed for exhaustively computing all possible values or solutions .",
    "the question , if such a conjecture is to be further explored , is to discover _ how _ nature executes such parallel procedures .",
    "a long - term goal of the authors is to find out how massively parallel computer platforms can be used for simulating parallel processes performed by nature .",
    "this goal includes not only running independent computations ( as it would be the case the computations of all possible values of certain boolean functions using quantum parallelism ) but also to find out how to simulate correlations and emergent properties of massively connected networks ( e.g. @xcite . )",
    "this paper is a first step towards such a goal .",
    "when the first graphic processor units ( gpus ) were designed , they were intended to support the complex mathematical operations and rendering required to create visually intensive simulations ( see , for example , @xcite . ) as they evolved , these gpus attracted the attention of scientists from other disciplines looking for alternative methods to access high performance computation .",
    "this gave birth to the general purpose graphic processing units or gpgpus .",
    "the graphic card manufacturer nvidia@xmath0 soon became one of the most important companies creating single - chip multi - core gpus , and they combined it with a software programming interface called cuda which allowed programmers to easily take advantage of parallel processing in their personal computers ( @xcite . ) today , nvidia@xmath0 allows millions of users to create parallel versions of their algorithms and simulations without requiring access to grids or clouds .",
    "it offers gpus with up to 1024 independent cores running at 1.5ghz and their hardware can be controlled from programs in languages like c , c++ , java , python and many others ( see , for example , @xcite . )    in order to take full advantage of the multi - core parallelism , a program is first analized and segmented in sequential and parallel functions .",
    "sequential functions are preferably run by the cpu as there is no significant processing gain in running sequential algorithms in multiple cores .",
    "parallel code , the one without data dependencies , is consolidated in one or several kernels .",
    "then , the programmer identifies the number of parallel execution threads required to complete the requested operation . in the case of nvidia@xmath0 gpus",
    ", these threads are divided into virtual blocks and grids .",
    "threads inside a block can communicate with each other using shared memory but if two blocks of threads need to communicate , they must do so using the global memory , which is slower than the shared memory .",
    "there are physical limitations to the number of threads a block can contain and to the number of blocks a grid can contain , bounded by the number of real cores present in the gpu .",
    "programmers can overcome some of these limitations via developing further computer code but the number of actual threads running at the same time can never surpass the real number of cores .",
    "as in any other distributed processing infrastructure , there is a need to send information from a central processing element to the distributed processing units . in the case of nvidia@xmath0 gpus ,",
    "cuda offers different means to send information from the cpu to the gpu including memory copy , paged memory and asynchronous communications .",
    "this process can slow down the computation and even result in worse performance than a serial approach if the design does not carefully take into account the way data is manipulated inside the gpu @xcite , hence the need to employ highly specialized computer programmers for this purpose .",
    "the cuda programming interface allows code from other programming languages to interact with the nvidia@xmath0 hardware .",
    "this interaction allows the creation of higher level applications which hide the inner complexity of distributing parallel tasks to several cores to the final user . on the other hand , in the realm of quantum computing",
    ", we have been working with mathematica@xmath0 to create a high - level and high - performance simulation environment .",
    "this high - level application has been compiled into an add - on called quantum@xmath0 ( @xcite ) , which allows end users to simulate calculations using a dirac notation interface .",
    "mathematica@xmath0 provides ways to communicate the native user interface with code outside the package in a variety of programming languages such as c , c++ and java @xcite .",
    "the combination of these two worlds led to the idea of building a bridge between the quantum@xmath0 add - on running on mathematica@xmath0 and c++ code that could distribute processing to the gpus .",
    "in our platform we have given quantum@xmath0 the ability to interact with tailored functions in cuda to attack specific problems or to communicate with the specialized linear algebra libraries cublas and cula .",
    "this has enabled us to enhance monolithic simulations or atomic operations within a complex simulation .",
    "so far we have worked with mathematica@xmath0 7 and mathlink@xmath0 : we have created the data structures using the high - end interface of quantum@xmath0 , have then sent this information using mathlink@xmath0 to a c++ code that deploys blocks of threads in the gpu to satisfy corresponding requests .",
    "a result is built using information from every thread and then sent back to quantum@xmath0 using mathlink@xmath0 .",
    "this process gives quantum@xmath0 users the ability to use their desktop or laptop computers as high performance computation infrastructure to simulate quantum algorithms and quantum processes in a very user friendly manner .",
    "mathematica@xmath0 8 now integrates a native way to interact with cuda which allows the deployment of kernels directly and without using mathlink@xmath0 , thus we expect our kernels to run faster and in a more integrated way than in current mathematica@xmath0 7 .",
    "we present in fig .",
    "( [ flujoinfo ] ) a visualization of data flow among quantum , mathematica , mathlink , c / c++ code , cuda , and gpu hardware .    in order to stress differences among parallel and serial simulation of quantum processes , we show in fig .",
    "( [ tres_segmentos ] ) these three different computational approaches to solve an instance of a problem . on the left hand side segment of fig .",
    "( [ tres_segmentos ] ) of we see an algorithm which uses quantum processing units to solve the problem at hand : taking advantage of quantum parallelism , we use only one processing unit for all the solution space , so the computational load per processing unit is low . in the central portion of fig .",
    "( [ tres_segmentos ] ) we see a multi - core multi - thread gpu based approach to solve the problem . here",
    ", the number of cores is limited , but the possible solutions are distributed among the available cores so the computational load is higher than in a quantum approach but lower than a serial approach . in the right segment of fig .",
    "( [ tres_segmentos ] ) we see a classical serial implementation to solve the problem , in which the computational load per processing unit increases because all the possible solutions must be tested in only one core .",
    "one interesting feature of this project is the ease with which new kernels can be written .",
    "it is very common that one of the biggest obstacles for scientists using parallel infrastructure is to be able to transform their serial algorithms into corresponding parallel versions .",
    "sometimes this process is not even suitable for the application and results in worse performance than the stand - alone approach .",
    "nevertheless , taking quantum algorithms and deploying them into parallel structures is easier because they are already engineered to exploit the quantum parallelism .",
    "we have tested our system by building a software platform for simulating an adiabatic quantum algorithm for solving hard instances of the 3sat problem @xcite .",
    "the adiabatic quantum algorithm we have simulated consists of the design of a time - dependent hamiltonian which can be separated into three parts .",
    "the first part , the initial hamiltonian , encodes the ground state of the system that should be easy to prepare .",
    "the second part , the driving hamiltonian , is in charge of taking the system from an initial state to the final state .",
    "the third part , the final hamiltonian , is created from an energy function which will give every possible state an energy level proportional to the number of unsatisfied clauses .",
    "the energy function depends on the instance and is constituted by a sum of smaller energy functions , one for each clause .",
    "the ground state of this final hamiltonian encodes the solution to the problem .    with the purpose of exhibiting the advantages of using gpus instead of cpus for quantum algorithm simulation",
    ", we have firstly run a simulation of the above - mentioned algorithm over a cpu .",
    "then , we built a specific cuda kernel to enhance its performance .",
    "the idea of our parallel implementation consists of simulating quantum parallelism with multi - core parallelism .",
    "we took the energy function over which the above - mentioned hamiltonian is built and turned it into a kernel .",
    "this way , we can create multiple processing threads and each will evaluate one combination of variables and assign it an energy level using the function .",
    "we tested our simulation environment with instances of the 3sat problem using a ratio from number of clauses to number of variables about @xmath28 .",
    "the tests were run using a pc with intel core 2 duo processor @ 2.66ghz , 8 gb of ram memory running with windows vista and an nvidia geforce gtx 8800 video card of 512 mb of video memory and 128 parallel cores .",
    "the simulation environment currently runs on mathematica 7 .    in fig .",
    "( [ uno ] ) we present the results obtained in processing time for different instances of the 3sat problem running on the cpu and the gpu . in fig .",
    "( [ dos ] ) we show a comparison between the results obtained with both devices . as it can be seen in figs .",
    "( [ uno],[dos ] ) , the processing time used by the cpu increases exponentially while the time in the gpu increases on an slower ratio and scales according to the gpu occupancy factor , i.e. the number of actual parallel cores required to fulfill the processing needs of each instance . in fig .",
    "( [ tres ] ) we can see the processing time used to simulate instances of the 3sat for several qubits .",
    "these results were limited to the instances that could be simulated within a 2.5 days processing time frame .    based on our results , we observe that the number of qubits simulated using our gpu tools easily double the ones simulated on a cpu using our setup .",
    "these results are mainly due to the combination of two characteristics in our simulation : firstly , we aid the simulation tasks with the power of multi - core gpu processing with kernels designed to take advantage of the special memory , thread management and synchronization capabilities of nvidia cards .",
    "secondly , we simulate quantum parallelism directly with classical multi - core parallelism , which allows us to exploit the gpu occupancy factor to the maximum on every run .",
    "even when the number of possible variable combinations surpasses the available number of parallel threads in the gpu , we can still get an excellent performance enhancement .",
    "we use shared memory inside each processing block to enhance the access time to data within the kernel .",
    "we also write the result to global data concurrently , in separated memory blocks , to enhance the data throughput .",
    "in this paper we have presented a gpu - based symbolic and parallel platform for clasically simulating quantum algorithms .",
    "our simulation environment is based on a high - level user interface developed on mathematica@xmath0 which is connected to c++ code in order to make our platform capable of communicating with a graphics processing unit .",
    "the main contribution of this work is the creation of a simulation environment enhanced with parallel processing which can be used on personal computers and creates a direct comparison between quantum parallelism and classic multi - core parallelism .    in order to properly introduce the behavior of our proposal",
    "we have simulated a quantum adiabatic algorithm designed for solving hard instances of the 3-sat problem . based on our results , we observe that the number of qubits that can be simulated using our gpu tools doubles the ones simulated on a cpu efficiently using our setup .",
    "these results are possible due to the combination of two characteristics in our simulation : firstly , we aid the simulation tasks with the power of multi - core gpu processing with kernels designed to take advantage of the special memory , thread management and synchronization capabilities of nvidia cards , and secondly , we simulate quantum parallelism directly with classical multi - core parallelism , which allows us to maximally exploit the gpu occupancy factor on every run .",
    "additionally , we have presented a review of currently available classical simulators of quantum systems together with some justifications , based on our willingness to further understand processing properties of nature , for devoting resources and efforts to building more powerful simulators .",
    "all authors acknowledge the financial support of itesm - cem .",
    "venegas - andraca is also thankful for the financial support of conacyt and sni ( 41594 ) .",
    "e.  farhi , j.  goldstone , s.  gutmann , j.  lapan , a.  lundgren , and d.  preda .",
    "( april 2001 ) . a quantum adiabatic evolution algorithm applied to random instances of an np - complete problem . , 292(5516):472475 .",
    "gmez - munoz and f.  delgado - cepeda , ( 2008 ) .",
    "quantum , a freely distributed mathematica package developed by itesm - cem quantum information processing group .",
    "+ http://homepage.cem.itesm.mx / lgomez / quantum/.                  b.p .",
    "lanyon , t.j .",
    "weinhold , n.k .",
    "langford , m.  barbieri , d.f.v .",
    "james , a.  gilchrist , and a.g .",
    "( 2007 ) . experimental demonstration of a compiled version of shor s algorithm with quantum entanglement .",
    ", 99:250505 .",
    "p.  nyman .",
    "( 2009 ) . a symbolic classical computer language for simulation of quantum algorithms .",
    "in p.  bruza , d.  sofge , w.  lawless , k.  van rijsbergen , and m.  klusch , editors , _ quantum interaction _ , volume 5494 of _ lecture notes in computer science _ , pages 158173 .",
    "springer berlin / heidelberg .",
    "a.  perdomo , c.  truncik , i.  tubert - brohman , g.  rose , and a.  aspuru - guzik .",
    "construction of model hamiltonians for adiabatic quantum computation and its application to finding low - energy conformations of lattice protein models .",
    ", 78:01232015 ."
  ],
  "abstract_text": [
    "<S> in this paper we present a simulation environment enhanced with parallel processing which can be used on personal computers , based on a high - level user interface developed on mathematica@xmath0 which is connected to c++ code in order to make our platform capable of communicating with a graphics processing unit . </S>",
    "<S> we introduce the reader to the behavior of our proposal by simulating a quantum adiabatic algorithm designed for solving hard instances of the 3-sat problem . </S>",
    "<S> we show that our simulator is capable of significantly increasing the number of qubits that can be simulated using classical hardware . </S>",
    "<S> finally , we present a review of currently available classical simulators of quantum systems together with some justifications , based on our willingness to further understand processing properties of nature , for devoting resources to building more powerful simulators . </S>"
  ]
}