{
  "article_text": [
    "server virtualization has revamped the server business over the last years , and cloud computing has changed the way we think about resource allocation in the internet . however , while cloud providers support the flexible allocation of virtual machines ( _ vms _ ) and provide the customer with certain resource and performance isolation guarantees , networking has so far been treated as a second class citizen : until recently , cloud customers could not specify even basic networking guarantees to connect their virtual machines .",
    "this is problematic given the fact that the traffic generated by cloud applications such as mapreduce and distributed databases is not negligible .",
    "indeed , it has been shown that cloud applications suffer from resource interference on the network , in the sense that application performance can become unpredictable .",
    "longer job execution times also entail higher costs for the customers who are charged on a _ per - vm - hour basis_.  @xcite    to overcome these problems , more powerful resource reservation models have been proposed .",
    "@xcite a common abstraction is the _ virtual cluster _ : a virtual cluster @xmath0 connects @xmath1 virtual machines to a virtual switch at bandwidth @xmath2essentially a hose model .",
    "@xcite while the resulting performance isolation guarantees are attractive , the virtual cluster abstraction raises two fundamental questions : ( 1 ) how to embed virtual clusters on a given physical network ? in order to make an optimal use of its resources and hence maximize the profit , a provider may want to multiplex as many virtual clusters as possible over the physical infrastructure ( while fulfilling the requested virtual cluster specification ) .",
    "( 2 ) how to efficiently price virtual clusters ?",
    "while today s cloud pricing models typically focus on vm hours only , the pricing of virtual clusters becomes a 2-dimensional problem : a customer requesting more bandwidth should be priced accordingly .",
    "this paper addresses these two questions .    * our contribution .",
    "* we present the first pricing scheme for virtual clusters , called @xmath4 ( _ demand - specific pricing _ ) , which explicitly takes into account the different computation and bandwidth requirements .",
    "that is , unlike the dominant - resource pricing scheme @xmath5 presented in the literature before  @xcite , @xmath4 is designed according to a specification - dependent , _ pay - only - for - what - you - request policy _ : while in @xmath5 , the size @xmath1 and the bandwidth @xmath2 of a virtual cluster are strictly coupled , @xmath4 allows customers to request virtual clusters @xmath0 of arbitrary and independent size @xmath1 and bandwidth @xmath2 , and be priced accordingly and in a fair manner . moreover , @xmath4 ensures desirable properties such as location independent pricing .",
    "together with this pricing scheme we present a new embedding algorithm called @xmath3 for an illustration . ] which is also specification - dependent in the sense that @xmath3 accounts for differences in the node and link requirements of virtual clusters .",
    "concretely , @xmath3 is tailored to an online scenario where different virtual clusters @xmath6 are requested over time , and collocates `` opposites '' : computation - intensive but communication - extensive virtual clusters are mapped together with computation - extensive but communication - intensive virtual clusters , to maximize the number of simultaneously hosted virtual clusters over time . given the online nature of the problem , this is a non - trivial task .",
    "we show that our algorithm outperforms previous algorithms , in the sense that a provider can host more virtual clusters , and hence increase its profit .",
    "most cloud providers today still offer virtual machine services only , charging their customers on a per - hour basis .",
    "however , we witness a trend towards more network oriented specifications ( see also , e.g. , _ amazon placement groups _ , _ amazon ebs - optimized instances _ or _ microsoft azure expressroute _ ) , and especially the virtual cluster abstraction is becoming a popular model for datacenter applications .",
    "@xcite    in  @xcite , a first algorithm ( henceforth called @xmath7 ) was proposed to embed virtual clusters in fat - tree datacenter topologies , and ballani et al .",
    "@xcite proposed a first pricing scheme for virtual clusters which give minimal bandwidth guarantees .",
    "essentially , their scheme is based on _ dominant resource pricing _",
    ", short _ drp_. _ drp _ provides different templates for the customers , with predefined sizes @xmath1 and an associated amount of minimal guaranteed bandwidth @xmath2 .",
    "while this model is attractive for its simplicity , also in the sense that the interface between the customer and provider may not have to be changed , the minimal bandwidth @xmath2 is a function of @xmath1 and can not be chosen by the customer .",
    "as such , _ drp _ is still 1-dimensional and does not leverage the full flexibility of the virtual cluster model , which is described by two _ independent _ parameters @xmath1 and @xmath2",
    ".    indeed , virtual cluster specifications are likely to come with different requirements  @xcite and can be heterogeneous  @xcite : a latency sensitive webservice can be very different in nature than , say , a delay - tolerant batch processing job or a network - hungry database synchronization application .",
    "one implication of the _ drp _ scheme is that customers who know their virtual cluster demands might suffer from the inherent 1-dimensionality : in order to meet their application requirements , customers may be forced to upgrade to the next larger template , increasing both resources .",
    "this paper seeks to overcome this problem by allowing customers to specify their computation and communication requirements separately .",
    "concretely , we allow the customer to specify three parameters independently : the number of vms @xmath1 , the computational type @xmath8 of the virtual machines ( e.g. , small , medium , or large instances ) , as well as the bandwidth @xmath2 .",
    "that is , we use a virtual cluster abstraction @xmath9 , where all virtual machines are of the same computational type @xmath8 , and are connected to a virtual switch at bandwidth @xmath2 .",
    "we use the following conventions in our notation .",
    "the computational type @xmath8 is normalized in the sense that @xmath8 describes the fraction of the capacity of a physical server .",
    "similarly , we will normalize @xmath2 to denote the requested fraction of the overall link capacity of a physical server . a central concept for our algorithm @xmath3 ( improving upon @xmath7 ) and",
    "pricing scheme @xmath4 ( improving upon _ drp _ ) is the _ resource ratio _ between the requested node and link resources , henceforth denoted by @xmath10 .    in general",
    ", we will assume that requests arriving in an online fashion have to be immediately embedded or rejected by the provider . in order to successfully embed a virtual cluster ,",
    "the provider has to fulfill all its specifications .",
    "the proposed specification - dependent pricing scheme @xmath4 is based on a unit price for computation , henceforth denoted by @xmath11 , as well as a unit price for communication ( i.e. , bandwidth ) , henceforth denoted by @xmath12 .",
    "ideally , for a virtual cluster request with a per - vm computational demand @xmath8 and a per - vm bandwidth demand @xmath2 , a customer should be charged according to the resource proportions , e.g. @xmath13    however , compared to a dominant resource pricing scheme , this solution can result in a lower income at the provider , especially if requests are highly heterogeneous leading to a higher fragmentation . while this income loss could be compensated by increasing the unit prices",
    "@xmath14 accordingly , one has to be careful not to punish customers with an ideal resource ratio @xmath15 , who would prefer providers offering _ drp _ in this case . to solve this problem , in the following , we propose to add a small charge for customers with a resource ratio @xmath16 .    but",
    "let us first revisit the _ drp _ scheme given our notation . in _",
    "drp _ , a customer who requests a virtual cluster @xmath9 , with relatively lower resp .",
    "higher computation requirements compared to the communication requirement , is forced to upgrade the request to the next larger template for both resources .",
    "the corresponding formula for the _ drp _ scheme is @xmath17\\ ] ]    in order to bridge the difference between @xmath18 and @xmath19 , we propose the following _ demand specific pricing _ scheme @xmath4 which introduces an extra fee for requests with an unbalanced resource ratio @xmath20 . in this paper , we will assume a linear dependency between the extra cost and @xmath20 , although other dependencies ( e.g. , quadratic ) could also be expressed in our model .",
    "this decision is based on the assumption that more skewed requests are more likely to generate fragmentation . in summary",
    ", @xmath4 computes the virtual cluster price as follows : @xmath21 where @xmath22 are weighing factors .",
    "note that this scheme can be seen as a generalization of the dominant resource pricing strategy : @xmath23 implies that @xmath24 .",
    "lower weights result in savings for the customers , and @xmath25 implies @xmath26 .",
    "given that the customers have a good understanding of their specific requirements in terms of computation and communication  a reasonable assumption as we argue  this pricing scheme leads to a higher provider profit , and in a competitive market , the extra income compared to _",
    "drp _ is shared with the customers .",
    "let us elaborate on the weighing factors @xmath27 and @xmath28 . in general , the factors should depend on the amount of embedded virtual requests as well as the current resource demand and supply .",
    "if the provider has a good estimation of the virtual clusters that will be requested , the values can be computed ahead of time ; otherwise , the factors may be estimated over time , see  also section  [ sec : simulations ] for a discussion . given a difference of @xmath29 between the provider profit under _ drp _ for upgraded and non - upgraded requests ,",
    "the extra income generated by the lower resource consumption of the non - upgraded requests could be evenly distributed over requests requiring more of either one of the two resources .",
    "( recall that the price of requests with @xmath15 will not change . )",
    "the calculation for @xmath28 in a scenario with @xmath30 virtual machines for which @xmath31 and with expected requirements @xmath32 and @xmath33 , is given by @xmath34-e[b ] ) \\cdot p_b \\cdot ( 1-\\lambda_b ) = \\delta/2\\ ] ] the factor @xmath27 can be computed similarly . in both cases , @xmath31 and @xmath35 , a similar difference for @xmath36 $ ] and @xmath37 $ ] also leads to similar fees .",
    "this is fair , as one type of request only generates more profit because of the other one .",
    "also note that dsp  keeps the desirable location independence of _ drp _",
    "however , unlike _ drp _ , dsp  is specification - dependent , i.e. , a customer only has to pay for what he or she specified .",
    "in order to fully exploit differences in the virtual cluster specification and in order to maximize the resource utilization ( and hence provider profit ) , a new embedding algorithm has to be devised : the state - of - the - art virtual cluster embedding algorithm , oktopus  @xcite ( as well as its variants  @xcite ) , are based on an aggressive collocation strategy , which turns out to be suboptimal in settings where requests can have resource ratios @xmath38 .    in the following ,",
    "we propose @xmath3 , a virtual cluster embedding algorithm which leverages the virtual cluster specification details .",
    "the algorithm is tailored toward fat - tree datacenter topologies ( cf  figure  [ fig : fattree - pic ] ) , the standard architecture today . in a nutshell ,",
    "hosts ( or equivalently : servers ) which are connected to the same top of rack ( tor ) switch , constitute a rack .",
    "racks connected to the same aggregation switch form a pod .",
    "the fat - tree depicted in figure  [ fig : fattree - pic ] consists of two pods , containing three racks each ; there are two hosts per rack",
    ".        we will compare our embedding algorithm @xmath3 to the @xmath7 algorithm  @xcite .",
    "@xmath7 is designed to embed arbitrary virtual clusters efficiently and is not limited to any templates .",
    "hence it can also directly be used as an embedding algorithm for dsp , without any modifications . to find an embedding",
    ", @xmath7 traverses the different hierarchical levels of the fat - tree .",
    "it tries to embed the virtual cluster on single hosts first , and if no solution is found , it continues on the rack level .",
    "this process is repeated until a solution is found or @xmath7 failed to find a solution over the entire substrate . as a result of this approach ,",
    "the resulting embeddings are dense and use low amount of bandwidth .",
    "the problem of such dense embeddings is that requests with a resource ratio @xmath39 are collocated which wastes physical resources .",
    "figure  [ fig : imbalance - pic ] ( _ left _ ) illustrates this point . for oktopus",
    ", @xmath40 is embedded on the right three hosts .",
    "the residual capacity in terms of vm slots on each host is @xmath41 of its total capacity , however , the bandwidth on the links is used up , rendering it unlikely that the remaining vm slots can be used in the future . on the other hand , the left three hosts , which host @xmath42 , only utilize @xmath43 of their bandwidth , but have no remaining vm slots .     and @xmath3 .",
    "six hosts are connected to a switch .",
    "two @xmath44s are requested : @xmath45 and @xmath46 .",
    "the numbers in the circles represent _ vms _ of @xmath40 which are mapped to the corresponding hosts , the numbers in the squares represent _ vms _ of @xmath42 . ]    the core idea of our algorithm @xmath3 is to distribute skewed @xmath44s over multiple hosts , without increasing the bandwidth costs compared to oktopus .",
    "similar to oktopus , @xmath3 also traverses the hierarchical levels ( short : @xmath47 ) of the fat - tree , but instead of collocating as many _ vms _ on a single host as possible , @xmath3 distributes the _ vms _ over physical machines ( short : @xmath48 ) depending on the ratio of the residual resources per host .",
    "this is described in algorithm  [ alg : rob ] .",
    "fat - tree @xmath49 , virtual cluster @xmath44 find @xmath50 @xmath47 with highest ratio of residual resources after embedding of @xmath51 embedding @xmath52    in our example in figure  [ fig : imbalance - pic ] , using @xmath3 results in a distributed embedding of both @xmath44s . while all resources on the left three hosts are utilized ,",
    "the right three hosts have spare capacities , both in terms of bandwidth and _ vm _ slots .",
    "hence subsequent requests can more likely be accepted .",
    "note that the current design of @xmath3 only considers the bandwidth on the access level .",
    "hence , it can fail to find a feasible solution if the other layers of the fat - tree are oversubscribed .",
    "therefore our current implementation treats @xmath3 as an extension to @xmath7 and falls back to regular @xmath7 behavior if no solution was found .",
    "in order to study the benefits and limitations of @xmath4 and @xmath3 in different settings , we implemented a discrete event simulator .",
    "as the pricing results also depend on the embedding algorithm , we study three combinations : we integrated _ drp _ with @xmath7 , @xmath4 with @xmath7 , and _ dsp _ with @xmath3 . to ensure a fair comparison",
    ", we use the same parameters and methodology as in  @xcite and  @xcite",
    ".    * requests . *",
    "the virtual cluster requests arrive according to a poisson process with exponentially distributed durations , chosen to induce a system load of around @xmath53 . by default , the mean size of a @xmath44 is @xmath54 , @xmath8 and @xmath2 are chosen uniformly from @xmath55 .",
    "the templates @xmath56 of _ drp _ are @xmath57 and the customer is bound to select the next larger template for requests with @xmath38 . for each parameter set ,",
    "we request @xmath58 virtual clusters . to avoid artifacts related to the initially empty datacenter , we start evaluating our metrics after @xmath59 requests .",
    "the remaining values are omitted from the dataset .",
    "* physical setup .",
    "* we model our datacenter as a three - layer fat - tree ( figure [ fig : fattree - pic ] illustrates a small fat - tree ) .",
    "@xmath60 hosts form a rack , @xmath60 racks form a pod . in total",
    "we have @xmath61 pods . given that each physical element has a capacity of @xmath62 _ vm _ units , this leads to a total capacity of @xmath63 small vms . by default",
    "we assume that the links between the tor switches and the aggregation switches are oversubscribed by a factor of @xmath64 , while the links between the aggregation switches and the core are not oversubscribed",
    ".    * metrics .",
    "* various works have used the acceptance ratio of an embedding algorithm in order to measure its performance .",
    "this metric however , is biased to prefer algorithms which accept a large number of small requests instead of fewer bigger ones .",
    "therefore , we decided to evaluate the sum of the embedded virtual resources in both dimensions : bandwidth and vm slots . a request @xmath65 will have a _ resource sum _ of @xmath61 for bandwidth and @xmath66 for _ vm _ slots .",
    "note that even though we will embed a @xmath67 for _ drp _ , the bandwidth sum remains @xmath61 , as the customer does not benefit from the over - provisioning .     with @xmath4 ( _ left _ ) , @xmath7 with @xmath4 ( _ middle _ ) and @xmath7 with _ drp _ ( _ right _ ) as a function of the oversubscription . ]",
    "figure  [ fig : oversub ] shows the impact of the oversubscription factor on the embedded number of virtual machines . for all oversubscription ratios , we can observe that @xmath3 with @xmath4 outperforms the other combinations , while @xmath4 is superior to _ drp _ in combination with @xmath7 .",
    "while the differences are small for an oversubscription factor of @xmath68 , we see an increase of the difference with the oversubscription factor ; it diminishes after an oversubscription factor of @xmath69 , where the results become stable .     with @xmath4 ( _ left _ ) , @xmath7 with @xmath4 ( _ middle _ ) and @xmath7 with _ drp _ ( _ right _ ) as a function of datacenter load . ]    naturally , we can only reap the full benefits of @xmath4 and @xmath3 in highly utilized datacenters , as shown in figure  [ fig : load ] : while first marginal effects can be observed at a load of @xmath70 , the benefits of @xmath4 are visible starting at @xmath71 and the benefits of @xmath3 at @xmath72 .",
    "the effects increase until a load of @xmath68 . given that highly utilized datacenters are a reality today and the key to provider benefits",
    ", these results are encouraging .    to analyze the benefit of the pricing model",
    ", we consider our default scenario : the mean resource sum for @xmath4 with @xmath7 is @xmath73 higher than for _ drp _ with @xmath7 .",
    "this means that the amount of concurrent active guarantees is @xmath73 larger . using @xmath3 with @xmath4 yields another @xmath74 improvement , resulting in a total benefit of @xmath75 .",
    "similar numbers apply for the bandwidth resource sum .    assuming @xmath76 and a uniform distribution of accepted requests ( i.e. , an equal amount of embedded _",
    "_ vm__s of each @xmath56 tuple ) , inserting the @xmath75 as a @xmath29 in section  [ sec : pricing ] leads to savings of @xmath77 for customers with skewed requests .",
    "the corresponding values of @xmath27 and @xmath28 are @xmath78 , i.e. , customers have to be charged for about @xmath79 of the resource difference to _ _ drp__s templates in order to keep the revenue for the provider constant .",
    "this paper has presented the first specification - dependent pricing scheme for virtual clusters , the standard abstraction of cloud applications today . together with the pricing scheme , we also developed a new virtual cluster embedding algorithm , which may be of independent interest .",
    "our approach can easily be combined with interfaces which translate high - level customer goals into virtual cluster requirements and compute resource combinations , such as  @xcite .",
    "we find that the proposed specification - dependent pricing can increase the social welfare , leading to savings of up to @xmath80 compared to _",
    "drp_. in fact @xmath4 enables customer to have guaranteed application performance while they only need to pay for the resources they use , including a small extra fee .",
    "moreover , we find that @xmath3 distributes virtual clusters with skewed resource requirements over several hosts and therefore embeds @xmath74 more virtual resources than @xmath7 ."
  ],
  "abstract_text": [
    "<S> it is well - known that cloud application performance critically depends on the network . accordingly , new abstractions for cloud applications are proposed which extend the performance isolation guarantees to the network . the most common abstraction is the _ virtual cluster _ </S>",
    "<S> @xmath0 : the @xmath1 virtual machines of a customer are connected to a virtual switch at bandwidth @xmath2 . however , today , not much is known about how to efficiently embed and price virtual clusters .    this paper makes two contributions . </S>",
    "<S> ( 1 ) we present an algorithm called @xmath3 that efficiently embeds virtual clusters arriving in an online fashion , by jointly optimizing the node and link resources . </S>",
    "<S> we show that this algorithm allows to multiplex more virtual clusters over the same physical infrastructure compared to existing algorithms , hence improving the provider profit . </S>",
    "<S> ( 2 ) we present the first demand - specific pricing model called @xmath4 for virtual clusters . our pricing model is fair in the sense that a customer only needs to pay for what he or she asked . </S>",
    "<S> moreover , it features other desirable properties , such as price independence from mapping locations . </S>"
  ]
}