{
  "article_text": [
    "in this paper , we are concerned with computation and numerical accuracy issues for the _ weak galerkin _ method that was recently introduced in @xcite for second order elliptic equations .",
    "the weak galerkin method is an extension of the standard galerkin finite element method where classical derivatives were substituted by weakly defined derivatives on functions with discontinuity .",
    "the weak galerkin method is also related to the standard mixed finite element method in that the two methods are identical for simple model problems ( such as the poisson problem ) .",
    "but they have fundamental differences for general second order elliptic equations .",
    "the goal of this paper is to numerically demonstrate the efficiency and accuracy of the weak galerkin method in scientific computing .",
    "in addition , we shall extend the weak galerkin method of @xcite from triangular and tetrahedral elements to rectangular and cubic elements .    for simplicity , we take the linear second order elliptic equation as our model problem .",
    "more precisely , let @xmath0 be an open bounded domain in @xmath1 , @xmath2 with lipschitz continuous boundary @xmath3 .",
    "the model problem seeks an unknown function @xmath4 satisfying @xmath5 where @xmath6^{d\\times d}$ ] , @xmath7^d$ ] , and @xmath8 are vector- and scalar - valued functions , as appropriate .",
    "furthermore , assume that @xmath9 is a symmetric and uniformly positive definite matrix and the problem ( [ eq : ellipticproblem ] ) has one and only one weak solution in the usual sobolev space @xmath10 consisting of square integrable derivatives up to order one .",
    "@xmath11 and @xmath12 are given functions that ensure the desired solvability of ( [ eq : ellipticproblem ] ) .    throughout the paper",
    ", we use @xmath13 to denote the standard @xmath14 norm over the domain @xmath0 , and use bold face latin characters to denote vectors or vector - valued functions .",
    "the paper is organized as follows . in section 2 ,",
    "the weak galerkin method is introduced and an abstract theory is given .",
    "in particular , we prove that certain rectangular elements satisfy the assumptions in the abstract theory , and thus establish a well - posedness and error estimate for the corresponding weak galerkin method with rectangular meshes . in section 3",
    ", we present some implementation details for the weak galerkin elements . finally in section 4 ,",
    "we report some numerical results for various test problems .",
    "the numerical experiments not only confirm the theoretical predictions as given in the original paper @xcite , but also reveal new results that have not yet been theoretically proved .",
    "let @xmath15 be a shape - regular , quasi - uniform mesh of the domain @xmath0 , with characteristic mesh size @xmath16 . in two - dimension , we consider triangular and rectangular meshes , and in three - dimension , we mainly consider tetrahedral and hexahedral meshes",
    ". for each element @xmath17 , denote by @xmath18 and @xmath19 the interior and the boundary of @xmath20 , respectively . here , @xmath20 can be a triangle , a rectangle , a tetrahedron or a hexahedron .",
    "the boundary @xmath19 consists of several `` sides '' , which are edges in two - dimension or faces(polygons ) in three - dimension .",
    "denote by @xmath21 the collection of all edges / faces in @xmath15 .    on each @xmath17",
    ", let @xmath22 be the set of polynomials on @xmath18 with degree less than or equal to @xmath23 , and @xmath24 be the set of polynomials on @xmath18 with degree of each variable less than or equal to @xmath23 . likewise , on each @xmath25 , @xmath26 and @xmath27 are defined analogously .",
    "now , define a weak discrete space on mesh @xmath28 by @xmath29 observe that the definition of @xmath30 does not require any form of continuity across element or edge / face interfaces . a function in @xmath30",
    "is characterized by its value on the interior of each element plus its value on the edges / faces .",
    "therefore , it is convenient to represent functions in @xmath30 with two components , @xmath31 , where @xmath32 denotes the value of @xmath33 on all @xmath18s and @xmath34 denotes the value of @xmath33 on @xmath21 .",
    "we further define an @xmath14 projection from @xmath10 onto @xmath30 by setting @xmath35 , where @xmath36 is the local @xmath14 projection of @xmath33 in @xmath22 , for @xmath37 , and @xmath38 is the local @xmath14 projection in @xmath26 , for @xmath39 .",
    "the idea of the weak galerkin method is to seek an approximate solution to equation ( [ eq : ellipticproblem ] ) in the weak discrete space @xmath30 . to this end",
    ", we need to introduce a discrete gradient operator on @xmath30 .",
    "indeed , this will be done locally on each element @xmath20 .",
    "let @xmath40 be a space of polynomials on @xmath20 such that @xmath41^d\\subset v_r(k)$ ] ; details of @xmath40 will be given later .",
    "let @xmath42^d:\\ : { { \\bf q}}|_k \\in v_r(k)\\textrm { for all } k\\in { { \\cal t}}_h\\}.\\ ] ] a discrete gradient of @xmath43 is defined to be a function @xmath44 such that on each @xmath37 , @xmath45 where @xmath46 is the unit outward normal on @xmath19 .",
    "clearly , such a discrete gradient is always well - defined .",
    "denote by @xmath47 the standard @xmath14-inner product on @xmath0 .",
    "let @xmath48 be a subset of @xmath30 consisting of functions with vanishing boundary values .",
    "now we can write the weak galerkin formulation for equation ( [ eq : ellipticproblem ] ) as follows : find @xmath49 such that @xmath50 on each edge / face @xmath51 and @xmath52 for all @xmath53 . for simplicity of notation ,",
    "we introduce the following bilinear form @xmath54    the spaces @xmath30 and @xmath55 can not be chosen arbitrarily .",
    "there are certain criteria they need to follow , in order to guarantee that equation ( [ eq : weakformulation ] ) provides a good approximation to the solution of equation ( [ eq : ellipticproblem ] ) . for example , @xmath55 has to be rich enough to prevent from the loss of information in the process of taking discrete gradients , while it should remain to be sufficiently small for its computational cost .",
    "hence , we would like to impose the following conditions upon @xmath30 and @xmath55 : 0.2 cm    * ( p1 ) * for any @xmath56 and @xmath37 , @xmath57",
    "if and only if @xmath58 on @xmath20 .    * ( p2 ) * for any @xmath59 , where @xmath60 , we have @xmath61 where and in what follows of this paper , @xmath62 denotes a generic constant independent of the mesh size @xmath16 .    under the above two assumptions , it has been proved in @xcite that equation ( [ eq : weakformulation ] ) has a unique solution as long as the mesh size @xmath16 is moderately small and the dual of ( [ eq : ellipticproblem ] ) has an @xmath63-regularity with some @xmath64 .",
    "furthermore , one has the following error estimate : @xmath65 for any @xmath60 , and @xmath64 is the largest number such that the dual of equation ( [ eq : ellipticproblem ] ) has an @xmath63-regularity .",
    "there are several possible combinations of @xmath30 and @xmath55 that satisfy assumptions * ( p1 ) * and * ( p2)*. two examples of triangular elements have been given in @xcite , which are    1 .",
    "triangular element @xmath66 for @xmath67 .",
    "that is , in the definition of @xmath30 , we set @xmath68 . and in the definition of @xmath55 , we set @xmath69 and @xmath40 to be the @xmath23th order raviart - thomas element @xmath70 @xcite .",
    "triangular element @xmath71 for @xmath67 .",
    "that is , in the definition of @xmath30 , we set @xmath72 . and in the definition of @xmath55 , we set @xmath73 and @xmath74 , or in other words , the @xmath75st order brezzi - douglas - marini element @xcite .    the rest of this section shall extend this result to rectangular elements .",
    "an extension to three - dimensional tetrahedral and hexahedral elements is straightforward .",
    "consider the following two type of rectangular elements :    1 .",
    "rectangular element @xmath76 for @xmath67 .",
    "that is , in the definition of @xmath30 , we set @xmath68 . and in the definition of @xmath55 , we set @xmath69 and @xmath40 to be the @xmath23th order raviart - thomas element @xmath70 on rectangle @xmath20 .",
    "rectangular element @xmath77 for @xmath67 .",
    "that is , in the definition of @xmath30 , we set @xmath72 . and in the definition of @xmath55 , we set @xmath73 and @xmath40 to be the @xmath75st order brezzi - douglas - marini element @xmath78 on rectangle @xmath20 .",
    "denote by @xmath79 the space of polynomials with degree in @xmath80 and @xmath81 less than or equal to @xmath82 and @xmath23 , respectively , and @xmath83 .",
    "it is known that @xmath84    bdm_{j+1}(k ) & = \\begin{bmatrix}p_{j+1}(k)\\\\ p_{j+1}(k )   \\end{bmatrix }             + span\\left\\{{\\bf curl}\\ , ( x^{j+2}y ) , \\ ; { \\bf curl}\\ , ( xy^{j+2 } ) \\right\\ } , \\end{aligned}\\ ] ] and @xmath85 , @xmath86 .",
    "the degrees of freedom for @xmath70 are : @xmath87 & \\int_k { { \\bf q}}\\cdot{{\\bf p}}\\ , dx,\\qquad & & \\textrm{for all } { { \\bf p}}\\in q_{j-1,j}(k)\\times q_{j , j-1}(k ) . \\end{aligned}\\ ] ] the degrees of freedom for @xmath78 are @xmath88 & \\int_k { { \\bf q}}\\cdot{{\\bf p}}\\ , dx,\\qquad & & \\textrm{for all } { { \\bf p}}\\in [ p_{j-1}(k)]^2 . \\end{aligned}\\ ] ] it is also well - known that on each rectangle @xmath89 and each edge @xmath90 , @xmath91    next , we show that the two set of elements defined as above satisfy assumptions * ( p1 ) * and * ( p2)*.    [ lemma2.1 ] for the two type of rectangular elements given in this subsection , the assumption * p1 * holds true .    if @xmath58 on @xmath20 , then clearly @xmath92 vanishes since the right - hand side of ( [ discrete - weak - gradient - new ] ) is zero from the divergence theorem .",
    "now let us assume that @xmath57 .",
    "by ( [ discrete - weak - gradient - new ] ) and using integration by parts , we have for all @xmath93 or @xmath78 , @xmath94    we first consider the element @xmath76 .",
    "if @xmath95 , then @xmath32 is a constant on @xmath18 and clearly @xmath96 . if @xmath97 , take @xmath98 such that @xmath99 for all @xmath100 and let it traverse through all degrees of freedom defined by @xmath101 , for @xmath102 . since @xmath103 and @xmath104 , equation ( [ eq : rec1 ] ) gives @xmath105 , which implies that @xmath32 is a constant on @xmath18 .",
    "now equation ( [ eq : rec1 ] ) reduces into @xmath106 next , since @xmath107 for all @xmath108 , by letting @xmath98 traverse through all degrees of freedom on @xmath19 , we have @xmath109 on all @xmath110 .",
    "this implies @xmath111 in @xmath20 .    for the @xmath77 element , using the same argument as in the previous case , and noticing that @xmath112 , @xmath113 for all @xmath108",
    ", we can similarly prove that @xmath111 in @xmath20 .",
    "[ lemma2.2 ] for the two type of rectangular elements given in this subsection , the assumption * ( p2 ) * holds true .",
    "let @xmath114 , @xmath60 .",
    "for any @xmath115 and @xmath37 , by ( [ eq : rec2 ] ) and the definition of @xmath14 projections , we have @xmath116 in other words , on each @xmath37 , @xmath117 is the @xmath14 projection of @xmath118 onto @xmath70 or @xmath78 .",
    "thus , the assumption * ( p2 ) * follows immediately from the approximation properties of the @xmath14 projection , and the fact that both @xmath70 and @xmath78 contains the entire polynomial space @xmath119 ^ 2 $ ] .    using lemma [ lemma2.1 ] and lemma [ lemma2.2 ]",
    ", one can derive the error estimate ( [ eq : errorestimation ] ) for the rectangular elements by following the argument presented in @xcite .",
    "details are left to interested readers as an exercise .",
    "similar to the standard galerkin finite element method , the weak galerkin method ( [ eq : weakformulation ] ) can be implemented as a matrix problem where the matrix is given as the sum of local stiffness matrices on each element @xmath37 .",
    "thus , a key step in the computer implementation of the weak galerkin is to compute element stiffness matrices .",
    "the goal of this section is to demonstrate ways of computing element stiffness matrices for various elements introduced in the previous sections .    for a given element @xmath37 ,",
    "let @xmath120 , @xmath121 , be a set of basis functions for @xmath22 or @xmath122 , and @xmath123 , @xmath124 , be a set of basis functions for @xmath125 or @xmath126 .",
    "note that @xmath127 is the union of basis functions from all edges / faces of element @xmath20 .",
    "then every @xmath43 has the following representation in @xmath20 : @xmath128 on each @xmath20 , the local stiffness matrix @xmath129 for equation ( [ eq : weakformulation ] ) can thus be written as a block matrix @xmath130 where @xmath131 is an @xmath132 matrix , @xmath133 is an @xmath134 matrix , @xmath135 is an @xmath136 matrix , and @xmath137 is an @xmath138 matrix .",
    "these matrices are defined , respectively , by @xmath139 where the bilinear form @xmath140 is defined as in ( [ bilinearform ] ) , and @xmath82 , @xmath23 are the row and column indices , respectively .",
    "to compute each block of @xmath129 , we first need to calculate the discrete gradient operator @xmath141 . for convenience , denote the local vector representation of @xmath142 by @xmath143 v_{0,2 } \\\\",
    "\\vdots\\\\[1 mm ] v_{0,n_0}\\end{bmatrix},\\qquad \\underline{{{\\bf v}}}_b = \\begin{bmatrix } v_{b,1 } \\\\[1 mm ] v_{b,2 } \\\\",
    "\\vdots \\\\[1 mm ] v_{b , n_b } \\end{bmatrix}.\\ ] ] let @xmath144 , @xmath145 , be a set of basis functions for @xmath40 .",
    "then , for every @xmath146 , its value on @xmath20 can be expressed as @xmath147 similarly , we denote the local vector representation of @xmath148 by @xmath149 q_2\\\\ \\vdots\\\\[1 mm ] q_{n_v } \\end{bmatrix},\\qquad\\ ] ] then , by the definition of the discrete gradient ( [ discrete - weak - gradient - new ] ) , given @xmath142 , we can compute the vector form of @xmath150 on @xmath20 by @xmath151 where the @xmath152 matrix @xmath153 , the @xmath154 matrix @xmath155 , and the @xmath156 matrix @xmath157 are defined , respectively , by @xmath158 @xmath159 and @xmath160 notice that @xmath153 is a symmetric matrix .",
    "once the matrices @xmath153 , @xmath155 and @xmath157 are computed , we can use ( [ eq : localwg ] ) to calculate the weak gradient of basis functions @xmath120 and @xmath123 on @xmath20 .",
    "it is not hard to see that @xmath161 where @xmath162 and @xmath163 are the standard basis for the euclidean spaces @xmath164 and @xmath165 , respectively , such that its @xmath82-th entry is @xmath166 and all other entries are @xmath167 .",
    "define matrices @xmath168 where @xmath169 denote the standard inner - product on @xmath170 or @xmath171^d$ ] , as appropriate .",
    "clearly , @xmath172 is an @xmath152 matrix , @xmath173 is an @xmath174 matrix , and @xmath175 is an @xmath132 matrix .",
    "then , an elementary matrix calculation shows that the local stiffness matrix @xmath129 for equation ( [ eq : weakformulation ] ) can be expressed in a way as specified in the following lemma .",
    "[ lem : localstiffness ] the local stiffness matrix @xmath129 defined in ( [ eq : localstiffness ] ) can be computed by using the following formula @xmath176 where the superscript @xmath177 stands for the standard matrix transpose .    for the poisson equation @xmath178",
    ", we clearly have @xmath179 and @xmath180 , @xmath181 .",
    "since @xmath153 is symmetric , the local stiffness matrix becomes @xmath182 -t_k^t d_k^{-1}z_k & t_k^t d_k^{-1}t_k\\end{bmatrix}.\\ ] ] in the rest of this section , we shall demonstrate the computation of the element stiffness matrix @xmath129 with two concrete examples .",
    "let @xmath20 be a triangular element in @xmath28 .",
    "we consider the case when @xmath184 and @xmath40 being the lowest order raviart - thomas element . in other words ,",
    "the discrete space @xmath30 consists of piecewise constants on the triangles , and piecewise constants on the edges of the mesh . in this case , the discrete gradient is defined by using the lowest order raviart - thomas element on the triangle @xmath20 . clearly , we have @xmath185 , @xmath186 and @xmath187 .",
    "let @xmath188 , @xmath189 , be the vertices of the triangle @xmath20 and @xmath190 be the edge opposite to the vertex @xmath191 . denote by @xmath192 the length of edge @xmath190 and @xmath193 the area of the triangle @xmath20 .",
    "we also denote by @xmath194 and @xmath195 the unit outward normal and unit tangential vectors on @xmath190 , respectively . here",
    "@xmath195 should be in the positive ( counterclockwise ) orientation .",
    "if edge @xmath190 goes from vertex @xmath196 to @xmath197 and @xmath20 stays on the left when one travels from @xmath196 to @xmath197 , then it is not hard to see that @xmath198      one may use the following set of basis functions for the weak discrete functions on @xmath20 : @xmath1990&\\textrm{otherwise}\\end{cases}\\quad \\textrm { for } i=1,2,3,\\ ] ] and @xmath200 notice that @xmath144 forms the standard basis for the lowest order raviart - thomas element , for which the degrees of freedom are taken to be the normal component on edges .",
    "indeed , @xmath144 satisfies @xmath201 it is straight forward to compute that , for the above defined basis functions , @xmath202 the computation of @xmath153 is slightly more complicated , but it can still be done without much difficulty , especially with the help of symbolic computing tools provided in existing software packages such as maple and mathematica . for simplicity of notation , denote @xmath203 then , it can be verified that @xmath204    |e_1||e_2|\\left(l_{12}-3l_3\\right ) & |e_2|^2\\left(3l_{13}-l_2\\right ) & |e_2||e_3|\\left(l_{23}-3l_1\\right ) \\\\[1 mm ]    |e_1||e_3|\\left(l_{13}-3l_2\\right ) & |e_2||e_3|\\left(l_{23}-3l_1\\right ) & |e_3|^2\\left(3l_{12}-l_3\\right ) \\end{bmatrix } \\\\[2 mm ] & = \\frac{1}{48|k| } t_k \\begin{bmatrix }   3l_{23}-l_1 & l_{12}-3l_3 & l_{13}-3l_2 \\\\[1 mm ]   l_{12}-3l_3 & 3l_{13}-l_2 & l_{23}-3l_1 \\\\[1 mm ]   l_{13}-3l_2 & l_{23}-3l_1 & 3l_{12}-l_3 \\end{bmatrix } t_k^t .",
    "\\end{aligned}\\ ] ] we point out that , the value of @xmath153 given as in ( [ eq : dkrt0 ] ) agrees with the one presented in @xcite . a verification of the formula ( [ eq : dkrt0 ] )",
    "can be carried out by using the following fact @xmath205 in computer implementation , it is convenient to use a form for the local matrix that can be expressed by using only edge lengths , as the one given by ( [ eq : dkrt0 ] ) .",
    "in addition , using symbolic computing tools and the law of sines and cosines , we can write @xmath206 as follows : @xmath207     l_3-l_{12}&2l_2&l_1-l_{23 } \\\\[1 mm ]     l_2-l_{13}&l_1-l_{23}&2l_3 \\\\[1 mm ]   \\end{bmatrix } \\right ) t_k^{-1}.\\ ] ]    thus , to compute the local stiffness matrix @xmath129 , it suffices to calculate @xmath172 , @xmath173 and @xmath175 as given in ( [ eq : abck ] ) , and then apply lemma [ lem : localstiffness ] .",
    "notice that these three matrices depend on the coefficients @xmath9 , @xmath208 and @xmath209 , and quadrature rules may be employed in the calculation . however , for the simple case of the poisson equation @xmath178 , we see from ( [ poisson.01 ] ) that @xmath210 m_{bb } & = \\frac{16|k|}{l_{123}}\\begin{bmatrix}1&1&1\\\\[1 mm ] 1&1&1\\\\[1 mm ] 1&1&1\\end{bmatrix }   + \\frac{1}{2|k|}\\begin{bmatrix}2 l_1 & l_3-l_{12}&l_2-l_{13 } \\\\[1 mm ]     l_3-l_{12}&2l_2&l_1-l_{23 } \\\\[1 mm ]     l_2-l_{13}&l_1-l_{23}&2l_3 \\\\[1 mm ]   \\end{bmatrix}. \\end{aligned}\\ ] ]      we would like to present another approach for computing the local stiffness matrix @xmath129 in the rest of this subsection . observe that a set of basis functions for the local space @xmath40 can be chosen as follows @xmath211 0\\end{bmatrix},\\qquad { \\boldsymbol{\\chi}}_2 = \\begin{bmatrix}0\\\\[1 mm ] 1\\end{bmatrix},\\qquad { \\boldsymbol{\\chi}}_3 = \\begin{bmatrix}x-\\bar{x}\\\\[1 mm ] y-\\bar{y}\\end{bmatrix},\\ ] ] where @xmath212 is the coordinate of the barycenter of @xmath20 .",
    "note that both components of @xmath213 have mean value zero on @xmath20 .",
    "for the weak discrete function on @xmath20 , we use the same set of basis functions as given in ( [ phibasis ] ) .",
    "it is not hard to see that @xmath2140&1&0\\\\[1mm]0&0&\\frac{l_{123}}{36}\\end{bmatrix},\\qquad z_k = \\begin{bmatrix}0\\\\[1mm]0\\\\[1mm]2|k|\\end{bmatrix},\\qquad\\ ] ] and @xmath215                       x_2-x_3 & x_3-x_1 & x_1-x_2 \\\\[1 mm ]                       \\frac{2|k|}{3 } & \\frac{2|k|}{3 } & \\frac{2|k|}{3 } \\end{bmatrix}.\\ ] ] next , we use the formula ( [ eq : abck ] ) to calculate the matrices @xmath172 , @xmath173 and @xmath175 for the new basis ( [ newbasis ] ) .",
    "finally , we calculate the local stiffness matrix @xmath129 by using the formula provided in lemma [ lem : localstiffness ] .",
    "since the set of basis functions for the weak discrete space are the same in approaches i and ii , the resulting local stiffness matrix @xmath129 would remain unchanged from approaches i and ii .",
    "the set of basis functions ( [ newbasis ] ) is advantageous over the set ( [ eq : trirtbasis ] ) in that the matrix @xmath153 is a diagonal one whose inverse in trivial to compute .",
    "let @xmath217\\times [ 0,b]\\times [ 0,c]$ ] be a rectangular box where @xmath218 are positive real numbers .",
    "we consider the three - dimensional cubic element , for which the discrete space @xmath30 consists of piecewise constants on @xmath18 and piecewise constants on the faces of @xmath20 .",
    "the space for the discrete gradient is the lowest order raviart - thomas element on @xmath20 .",
    "we clearly have @xmath185 , @xmath219 and @xmath220 .",
    "denote the six faces @xmath221 , @xmath222 by @xmath223 note that the volume of @xmath20 is given by @xmath224 and the normal direction to each face is given by @xmath225 we adopt the following set of basis functions for the weak discrete space on @xmath20 @xmath2260&\\textrm{otherwise}\\end{cases}\\quad \\textrm { for } i=1,{\\dotsc},6,\\ ] ] and @xmath227 clearly , each @xmath144 satisfies @xmath228    it is not hard to compute that @xmath229 and @xmath230 then , the local stiffness matrix @xmath129 can be computed using the formula presented in lemma [ lem : localstiffness ] .",
    "in this section , we shall report some numerical results for the weak galerkin finite element method on a variety of testing problems , with different mesh and finite elements . to this end , let @xmath231 and @xmath232 be the solution to the weak galerkin equation ( [ eq : weakformulation ] ) and the original equation ( [ eq : ellipticproblem ] ) , respectively . define the error by @xmath233 where @xmath234 is the @xmath14 projection of @xmath232 onto appropriately defined spaces .",
    "let us introduce the following norms : @xmath235    \\textrm{element - based $ l^2 $ norm}:&\\qquad \\|e_0\\| = \\left(\\sum_{k\\in{{\\cal t}}_h } \\int_k |e_0|^2\\,dx\\right)^{1/2},\\\\[2 mm ]    \\textrm{edge / face - based $ l^2 $ norm}:&\\qquad \\|e_b\\| = \\left(\\sum_{f\\in{{\\cal f}}_h }    h_k\\int_f |e_b|^2\\,ds\\right)^{1/2 } , \\end{aligned}\\ ] ] where in the definition of @xmath236 , @xmath237 stands for the size of the element @xmath20 that takes @xmath110 as an edge / face .",
    "we shall also compute the error in the following metrics @xmath238 \\|u_h - u\\| & = \\left(\\sum_{k\\in{{\\cal t}}_h } \\int_k |u_0 - u|^2\\,dx\\right)^{1/2},\\\\[2 mm ] \\|e_0\\|_{\\infty } & = \\sup_{\\scriptsize \\begin{matrix}x\\in k_0\\\\ k\\in{{\\cal t}}_h\\end{matrix } } |e_0(x)| .",
    "\\end{aligned}\\ ] ] here the maximum norm @xmath239 is computed over all gaussian points , and all other integrals are calculated with a gaussian quadrature rule that is of high order of accuracy so that the error from the numerical integration can be virtually ignored .",
    "first , we consider the laplace equation with nonhomogeneous dirichlet boundary condition : @xmath240 we introduce a discrete dirichlet boundary data @xmath241 , which is either the usual nodal value interpolation , or the @xmath14 projection of @xmath242 on the boundary .",
    "let @xmath243 and define @xmath244 when @xmath245 , we simply denote @xmath246 by @xmath247 .",
    "the discrete galerkin formulation for the nonhomogeneous dirichlet boundary value problem can be written as : find @xmath248 such that for all @xmath249 , @xmath250    we would like to see how the weak galerkin approximation might be affected when the boundary data @xmath242 is approximated with different schemes ( nodal interpolation verses @xmath14 projection ) . to this end",
    ", we use a two dimensional test problem with domain @xmath251 and exact solution given by @xmath252 . a uniform triangular mesh and the element @xmath253",
    "is used in the weak galerkin discretization .",
    "the results are reported in table [ tab : inhomogeneous1 ] and table [ tab : inhomogeneous2 ] .",
    "it can be seen that both approximations of the dirichlet boundary data give optimal order of convergence for the weak galerkin method , while the @xmath14 projection method yields a slightly smaller error in @xmath254 and @xmath236 .",
    "next , we consider a mixed boundary condition : @xmath255 where @xmath256 is the dirichlet boundary data , @xmath257 is the robin type boundary data , @xmath258 , and @xmath259 , @xmath260 . when @xmath261 , the robin type boundary condition becomes the neumann type boundary condition .    for the mixed boundary condition , it is not hard to see that the weak formulation can be written as : find @xmath262 such that for all @xmath263 , @xmath264 where @xmath265 denotes the @xmath14 inner - product on @xmath266 .",
    "we tested a two - dimensional problem with @xmath9 to be an identity matrix and @xmath267 with a uniform triangular mesh . the exact solution is chosen to be @xmath268 .",
    "this function satisfies @xmath269 on the boundary segment @xmath270 .",
    "we use the dirichlet boundary condition on all other boundary segments . the element @xmath253 is used in the discretization . for the dirichlet boundary data , the @xmath14 projection is used to approximate the boundary data @xmath271 .",
    "the results are reported in table [ tab : inhomogeneous3 ] .",
    "it shows optimal rates of convergence in all norms for the weak galerkin approximation with mixed boundary conditions .",
    "b.  cockburn , j.  gopalakrishnan , and r.  lazarov , _ unified hybridization of discontinuous galerkin , mixed , and continuous galerkin methods for second order elliptic problems _ , siam j. numer .",
    ", * 47*(2009 ) , pp .  13191365 .",
    "p. raviart and j. thomas , _ a mixed finite element method for second order elliptic problems _ , mathematical aspects of the finite element method , i. galligani , e. magenes , eds . , lectures notes in math .",
    "606 , springer - verlag , new york , 1977 .",
    "b.  rivire , m.f .",
    "wheeler , and v.  girault , _ a priori error estimates for finite element methods based on discontinuous approximation spaces for elliptic problems _ , siam j. numer . anal .",
    ", * 39*(2001 ) , pp .  902931 ."
  ],
  "abstract_text": [
    "<S> the weak galerkin finite element method is a novel numerical method that was first proposed and analyzed by wang and ye in @xcite for general second order elliptic problems on triangular meshes . </S>",
    "<S> the goal of this paper is to conduct a computational investigation for the weak galerkin method for various model problems with more general finite element partitions . </S>",
    "<S> the numerical results confirm the theory established in @xcite . </S>",
    "<S> the results also indicate that the weak galerkin method is efficient , robust , and reliable in scientific computing .    </S>",
    "<S> * keywords * : finite element methods , weak galerkin method    * ams 2000 classification * : 65n30 </S>"
  ]
}