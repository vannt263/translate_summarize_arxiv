{
  "article_text": [
    "the uniform , random sampling of arbitrarily shaped surfaces is of importance in several scientific and technological applications .",
    "for example , generic surface sampling can be used to create and test more realistic computer graphics models  @xcite . in medical imaging , such sampling",
    "can be used to generate a uniform distribution of target points over the surface of tumors  @xcite .",
    "surface sampling has also been used to study oxygen production in forests  @xcite . in low - background radiation detection ,",
    "the application for which the algorithm presented here was developed , the simulation of radioactive contaminants on various detector surfaces is important for quantifying backgrounds and their impact on detector sensitivity .",
    "this algorithm was successfully implemented into the geant4-based  @xcite simulation toolkit , mage  @xcite , being jointly developed by the gerda  @xcite and majorana  @xcite collaborations to simulate germanium detector arrays .",
    "several algorithms exist to perform such generic surface sampling ( see , for example , refs .",
    "@xcite - @xcite ) .",
    "unfortunately , some of these methods ( such as the retiling of polygonal surfaces ) are algorithmically complex and computationally intensive .",
    "other algorithms require the surfaces to be represented as differentiable functions .",
    "deriving such a function for each surface - of - interest can be a computationally intensive task , particularly for complex geometries . finally , to the authors knowledge , little is available in the form of free , open - source code for plug - and - play usage .",
    "we have developed a monte carlo algorithm that only requires the geometry modeling software to be able to find the intersection points between an arbitrary line and the surfaces of the volumes to be sampled .",
    "the algorithm generates a random set of rays that impinge on the surfaces of interest that are isotropic in direction and uniform in space .",
    "the intersection points , provided by the geometry modeling software , are sampled again to provide the final set of random and uniform surface points .",
    "we demonstrate this generic surface sampling routine using the c - based geant4 monte carlo simulation toolkit  @xcite .",
    "geant 4 is used extensively in high - energy , nuclear and medical physics to simulate the interactions of radiation with matter . in geant4",
    ", arbitrary geometries can be constructed by arranging collections of nested solid volumes and boolean combinations ( intersections , additions , or subtractions ) of those volumes in specified positions and orientations relative to each other .",
    "the available basic solids include fundamental solids such as spheres , cylinders , and polyhedra , as well as more generic and complex boundary - representation volumes .",
    "our sampler relies on the fact that each geant4 volume class provides a function that finds the intersection points between the volume s surface and an arbitrary line , if such an intersection exists .",
    "each volume class also defines a function that returns a bounding radius for the volume in question , which is used to constrain the parameter space of lines sampled .",
    "the principle of the sampling algorithm is based upon uniformly sampling the volume within a sphere .",
    "when the user selects a volume or set of volumes whose surfaces are to be sampled , the radius @xmath0 of a bounding sphere which wholly contains the volume(s ) must be determined . in the case of multiple disjoint volumes ,",
    "a `` mother '' volume that encompasses all the volumes to be sampled must be used . in practice ,",
    "the radius of this bounding sphere is determined by querying the geometry modeling software . to generate a uniform",
    ", isotropic flux of rays within this bounding sphere , first a random isotropic point @xmath1 on the sphere is generated , where @xmath2 and @xmath3 is the randomly generated direction .",
    "a disk , also of radius @xmath0 , is defined tangential to the bounding sphere , with its center at position @xmath1 .",
    "figure  [ fig : raygeneration ] shows the position of this disk and the bounding sphere for a sampling trial of an arbitrary example volume . the starting point for another ray @xmath4 is generated on the interior of the disk at point @xmath5 , where @xmath6 has polar coordinates @xmath7 in the coordinate system of the disk .",
    "the `` impact parameter '' @xmath8 is generated with a uniform distribution in @xmath9 between 0 and @xmath0 , and the angle @xmath10 is generated uniformly between 0 and @xmath11 .",
    "the direction of @xmath4 is taken to be @xmath12 , normal to the circle and hence pointing into the bounding sphere .",
    "the uniformity and isotropy of the rays produced in this manner will be discussed in the next section .     for a sampling trial of an arbitrary example volume .",
    "@xmath4 originates at @xmath5 and continues in the @xmath12 direction , in this case intersecting the enclosed volume twice .",
    "the determination of the various rays and angles is described in the text . ]",
    "once @xmath4 has been generated , the geometry modeling software is queried to find the intersection points of the ray with all surfaces among the volumes - of - interest .",
    "if no such intersections exist , another ray is generated with a new direction and starting point .",
    "if @xmath13 intersections are found , a random integer @xmath14 is generated between one and the maximum number of intersections possible for the given geometry ( @xmath15 ) , which is input by the user  , it merely needs to match or exceed the greatest number of intersections encountered in the ouput set of sampled points .",
    "if the algorithm encounters more surfaces than @xmath15 , a warning can be generated and the user can rerun with a larger value of @xmath15 . ] .",
    "if @xmath16 the ray is discarded , and the algorithm starts over . otherwise , one of the @xmath13 intersections is chosen at random .",
    "the set of intersection points chosen in this way is the output of the algorithm .",
    "in the following , it is assumed that we have a random number generator that can generate a sequence of real numbers uniformly distributed between @xmath17 and @xmath18 , with the standard requirement of randomness  @xcite .",
    "additionally , all vectors , volumes and surfaces are assumed to lie in 3-dimensional euclidean space .",
    "we first show that the flux of rays generated as described above is uniform and isotropic within the bounding sphere of the surfaces - of - interest . for every point @xmath19 in the interior of a sphere of radius @xmath0 , and for every direction @xmath3 from @xmath19",
    ", there exists one and only one line passing through @xmath19 that is normal to the plane tangent to the sphere at @xmath20 .",
    "the set of all intersections with this tangent plane of rays in direction @xmath3 originating from all points @xmath19 interior to the sphere fill a disk of radius r centered at @xmath1 .",
    "since the direction @xmath3 is chosen isotropically , and since the starting point on the disk @xmath6 is chosen uniformly across the surface of the disk , then the probability for a ray to pass within a small area @xmath21 centered at @xmath19 with surface normal pointing in direction @xmath3 is independent of @xmath19 ( uniform ) , and is independent of direction @xmath3 ( isotropic ) .",
    "symbolically , we write the normalized vector flux of rays as @xmath22 , which is independent of @xmath19 .",
    "the randomness of this flux is guaranteed as long as a new direction @xmath3 and disk position @xmath6 are chosen for each ray .    the uniformity and randomness of the set of intersection points generated by the uniform isotropic flux of rays",
    "can be demonstrated as follows .",
    "first , divide the surfaces - of - interest into an large number of surface elements @xmath23 , where the direction points normal to the surface at point @xmath19 , and the magnitude @xmath24 is independent of @xmath19 ( @xmath25 ) .",
    "@xmath24 is taken to be small enough that each surface element may be approximated to be flat.1 fm for typical meter - sized or smaller geometries , at which point one is limited by numerical round - off of the 64-bit double - precision floating point data type used to define volume dimensions .",
    "the assumption of flatness of the surface elements also neglects infinitely sharp corners , which are unphysical . ]",
    "the probability for a surface element to be hit by a ray from our generated vector flux @xmath26 is @xmath27 which is independent of @xmath19 .",
    "this implies that all surface elements are hit with constant probability .",
    "thus the set of intersections of all rays with the surfaces - of - interest gives a uniform sampling of those surfaces .",
    "the randomness of initial flux of rays implies that the set of intersection points generated by one ray is statistically independent from those of other rays .",
    "however , intersection points of a single ray are not statistically independent from each other , as they all lie along a single line . for a truly random sampling , at most one intersection point",
    "can be chosen from each ray .",
    "note that if a single point were chosen at random and kept for each ray with intersections , those points which lie along rays with fewer intersections would be sampled more often than those points lying along lines with more intersections , ruining the uniformity of the distribution .",
    "in essence , rays with @xmath13 intersections would effectively be given a @xmath28 weighting .",
    "for this reason , the point selection is weighted by @xmath29 , and uniformity is retained .",
    "the efficiency of the above method , in terms of the number of surface points generated per geometrical calculation , can be poor when the volumes - of - interest sparsely fill the bounding sphere .",
    "if the volumes are disjoint , efficiency can be recovered by considering distant volumes independently .",
    "poor efficiency for volumes having needle - like or planar geometries , with one dimension much larger or smaller than the other dimensions , can be remedied by considering bounding surface other than a sphere , for example a wide plane or a narrow cylinder . in such cases care",
    "must be taken to ensure the generated flux of rays is ( at least approximately ) uniform and isoptropic .",
    "we did not consider such cases in this paper .    the step in which rays with fewer intersections are preferentially discarded also imposes an efficiency reduction by a factor of roughly @xmath30 , where @xmath31 is the average number of intersections per ray .",
    "this reduction can be significant for geometries with many aligned , repeated volumes , as well as for geometries with regions containing many small components .",
    "in such cases it may be prudent to simply keep all intersection points of all rays .",
    "the resulting set of points , taken as a whole , will still distribute with uniform surface density , and with much higher efficiency , albeit at the cost of introducing correlations among some consecutive points . for many applications , though",
    ", such correlations are irrelevant .",
    "we implemented this algorithm within the geant4 framework by deriving classes from the `` user action '' base classes _ g4vuserprimarygeneratoraction _ and _ g4usersteppingaction_. at runtime the user inputs a list of volume names whose surfaces are to be sampled , which are sent to the generator action class .",
    "after geometry initialization , the class queries the _",
    "g4physicalvolumestore _ to find the smallest volume which contains all volumes - of - interest as daughter volumes ( this volume may itself be a volume - of - interest ) .",
    "g4vsolid _ corresponding to that mother volume is extracted from its _",
    "g4logicalvolume_. a bounding radius for the surfaces - of - interest is then obtained by calling    .... g4vsolid::getextent().getextentradius ( ) ; ....    the class then sets the primary particle to be a `` geantino '' , an imaginary neutral , massless utility  particle \" within the geant4 framework which undergoes no interactions , and only travels in straight lines .",
    "geantinos are commonly used for debugging purposes and to map out geometries . the geantino s position and direction are selected by our algorithm to give a uniform , isotropic flux of geantinos throughout the interior of the bounding sphere .",
    "the energy of the geantino can be any value greater than 0 .",
    "the choice of geantinos delegates all geometrical calculations to geant4 .    the stepping action class checks at each step whether the geantino is entering or exiting a volume of interest .",
    "each such entrance or exit point is added to a list of surface intersections . at the end of the event ,",
    "one of these surface intersections can be chosen at random , or all surface intersections can be kept if efficiency requirements outweigh the necessity for truly uncorrelated sampling .",
    "the set of surface intersections generated in this way uniformly sample the surfaces of interest , and may be saved to disk or used for further processing in the program ( e.g.  as the vertex for the next event ) .",
    "such an implementation of our generic surface sampling algorithm was added to mage  @xcite , a geant4-based monte carlo simulation toolkit optimized for low - background germanium detector simulations .",
    "the output vertices are written to a root  @xcite file , which can then be used in simulations involving surface physics , for example @xmath10-particle backgrounds from natural u and th decay chain isotopes in settled dust , or from rn decay chain daughters plated out on detector surfaces .",
    "figure  [ fig : demonstration ] demonstrates the usage of the surface sampler on the 57-detector array design for the majorana experiment  @xcite .",
    "figure  [ fig : stringrender ] shows a rendering of a 3-ge - crystal string assembly , complete with detector supports and electronic connections and components .",
    "19 such strings are arranged in a hexagonal close - pack pattern , suspended from a cu cold plate , and housed in a cylindrical low - background cryostat made of electroformed cu .",
    "an imaging of the full simulated geometry ( minus the surrounding cryostat ) by our surface sampling algorithm is shown in figure  [ fig:57bangersamp ] , as viewed from one side .",
    "we also show more detailed samplings of two specific detector components in figures  [ fig : singxtalcoax ] and [ fig : trayssamp ] .",
    "figure  [ fig : singxtalcoax ] plots the output of the algorithm for one close - ended coaxial high - purity germanium detector crystal .",
    "the detector is represented by a boolean combination of basic volumes .",
    "the body is modeled as two cylinders ord with a torus to form the rounded top face .",
    "a third , smaller - radius cylinder ord with a sphere at one end is subtracted from the body to form the coaxial well along the detector s vertical axis .",
    "figure  [ fig : trayssamp ] shows a surface sampling of one of the plastic trays on which the ge crystals rest in the string assembly .",
    "a rendering of the simulated tray design is shown to the upper right of the surface sampling for comparison .",
    "we ran a high statistics simulation to test the behavior of the surface sampler and verify that the surface density of sampled points is independent of surface shape and orientation . to this end , we sampled a portion of the majorana 57-detector array design .",
    "we chose to sample the inner surface of the enclosing cylindrical cryostat , the cold plate from which all the crystals hang , two crystal detectors , and a single  contact ring \" ( a thin plastic ring that clamps leads against the crystal surface to make electrical connections to the detector ) surrounding one of the crystals . the inner cryostat surface and the cold plate are both simple cylinders .",
    "the contact ring is an annulus , and the detectors are as described above .",
    "all surfaces were sampled simultaneously , so the surface density of sampled points should be the same for all five components .",
    "the ratio of points on a volume s surface to total number of sampled points in the run were tabulated from the output root file .",
    "these ratios were then compared with analytical calculations of the surface area ratio for each volume to the total surface area of all sampled volumes .",
    "the results are shown in table  [ tab : verification ] . in all cases ,",
    "the ratios agree within the sampled statistics .",
    ".a comparison of analytically calculated surface area ratios to the fractions of sampled points landing on each surface of a number of volumes sampled simulataneously using our generic surface sampling algorithm . in all cases ,",
    "the ratios agree within the statistics of the simulation . [ cols= \" < , > , < , > , < \" , ]",
    "we have developed a generic surface sampling algorithm that distributes vertices uniformly and randomly over sets of arbitrary surfaces .",
    "such an algorithm has potential application in many scientific and technical fields .",
    "our implementation within the geant4 monte carlo simulation toolkit and the mage simulation framework for germanium detector - based systems is of particular use to nuclear and particle physicists .",
    "it may be used , for example , to study surface @xmath10 backgrounds , a key background in many low - background calorimetry - based experiments in these fields .",
    "this work was sponsored in part by the us department of energy under grant nos .",
    "de - fg02 - 97er41020 and de - ac02 - 05ch11231 .",
    "this research used the parallel distributed systems facility at the national energy research scientific computing center , which is supported by the office of science of the u.s .",
    "department of energy under contract no .",
    "de - ac02 - 05ch11231 .",
    "the authors would like to thank d.y.sebe for assistance with some of the figures .",
    "in addition , the authors acknowledge the mage group of the gerda and majorana collaborations for important comments and insight ."
  ],
  "abstract_text": [
    "<S> we present an implementation of a monte carlo algorithm that generates points randomly and uniformly on a set of arbitrary surfaces . </S>",
    "<S> the algorithm is completely general and only requires the geometry modeling software to provide the intersection points of an arbitrary line with the surface being sampled . </S>",
    "<S> we demonstrate the algorithm using the geant4 monte carlo simulation toolkit . </S>",
    "<S> the efficiency of the sampling algorithm is discussed , along with various options in the implementation and example applications . </S>"
  ]
}