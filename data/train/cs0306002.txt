{
  "article_text": [
    "the ascendance of grid - like @xcite technologies has been all but necessitated by the sheer volume of data produced in both science and commerce . in response to this increased uptake in high energy physics in particular , the traditional batch - oriented implementations @xcite@xcite using home - grown protocols have started to adapt to an industry - wide move to standardized interfaces and protocols @xcite .    in this context",
    "the caigee @xcite project was started to develop a specific application of grid technologies to the area of interactive analysis by end - user physicists .",
    "a diagram showing clarens as the interface between distributed clients and grid services is shown in figure [ caigee_diagram ] .        in keeping with",
    "its public standards focus , clients can include anything from an end - user analysis package like root @xcite , web browsers or even web - enabled pdas .",
    "other clarens servers may also act as clients .",
    "back - end services planned or implemented include data movement , grid - wide execution planning and scheduling , cluster job scheduling as well as metadata catalogs .",
    "in order to save development time and improve scalability , the clarens server is implemented as an extension to the apache @xcite multi - process web server using the mod_python extension in the python byte - code compiled language .",
    "most cms sites have these components already installed on processing cluster head nodes as part of the redhat 7.3-based os used .",
    "clarens itself is both architecture and platform - dependent by virtue of using python as an implementation language .",
    "the clarens architecture is depicted in figure [ clarens_diagram ] in the order that requests are processed by the server .",
    "firstly ( top ) , the apache server receives an http post or get request from the client , and invokes clarens based on the form of the url specified by the client .",
    "other urls are handled as usual by the server according to its configuration .",
    "secure sockets layer ( ssl ) encrypted connections are handled transparently by the apache server , with no special coding needed in clarens itself to decrypt ( encrypt ) requests ( responses ) .",
    "encryption of network traffic is optional , however , in cases where it is not required , without exposing client or server credentials .",
    "after the request has been processed , a response is sent back to the client , which is usually encoded as an rpc response , but may also be in the form of binary data .",
    "get requests returns a file or an xml - encoded error message to the client , while xml - rpc @xcite or soap@xcite - encoded post requests return a similarly encoded response or error message .",
    "in keeping with the grid tradition , clarens uses a so - called public key infrastructure ( pki ) based authentication system that relies on x509 formatted certificates issued by a certification authority ( ca ) along with asymmetric encryption using public and private keys .",
    "the authentication protocol of the server is implemented at the application level , thus eliminating the need for a custom security layer on the client side .    if an ssl - encrypted connection is used the client s certificate is provided to the server as part of the connection negotiation stage .",
    "the apache server passes this information to the clarens layer .",
    "this is the default for browser - based clients which in general have a well developed client - side pki security infrastructure . in this case",
    "the authentication step in initiated by calling the rpc method system.auth2 ( ) with no arguments . a user session i d",
    "is requested by the client by setting the clarens_username cookie value in the message header to the requested session i d , and setting the clarens_password cookie value to browser .",
    "clarens responds by returning its own certificate as well as it s part of the session i d encoded as an rpc response . in subsequent requests the client must set the clarens_password to this server session i d .",
    "browsers will automatically send these cookie values in subsequent requests .    in the case of an unencrypted connection , or a client",
    "not able to send it s certificate as part of the connection negotiation phase , the session i d and client certificate must be sent using as the username and password in the the http basic authentication header invoking the system.auth ( ) method .",
    "the server responds with a list of ( 1 ) its certificate , ( 2 ) the server session i d encrypted using the user s public key , and ( 3 ) the client session i d encrypted using the server s private key .",
    "this ensures that only someone in possession of the client s private key can discover the server session i d , and also that the server is in possession of a private key matching the certificate sent as ( 1 ) above . in subsequent requests",
    "the client should set the client session i d as username , and server session i d as password in the http basic authentication header .",
    "once this certificate and session i d exchange is completed , both the client and server certificates can be verified against the publicly available ca certificate chain , knowing that the other party is in possession of a matching private key .",
    "authorization of clients to access server resources ( invoking methods , accessing files etc . ) is done within the framework of a hierarchical virtual organization ( vo ) with members uniquely identified by their distinguished names ( dns ) issued by the cas as part of all x509 certificates .",
    "each clarens server instance manages a tree - like vo structure , as shown in figure [ clarens_vo_diagram ] , rooted in a list of administrators .",
    "this group , named admins , is populated statically from values provided in the server configuration file on each server restart .",
    "the list of group members is cached in a database @xcite , as is all vo information .",
    "the admins group is authorized to create and delete groups at all levels .",
    "each group consists of two lists of dns for the group members and administrators respectively .",
    "group administrators are authorized to add and delete group members , as well as groups at lower levels .",
    "the group structure is hierarchical because group members of higher level groups are automatically members of lower level groups in the same branch .",
    "the example in figure [ clarens_vo_diagram ] demonstrates the top - level groups a , b , and c , with second level groups a.1 , a.2 , and a.3 .        a more concrete example might be to define groups cms , atlas , lhcb , and alice , then for cms , to define cms.usa , cms.cern , cms.uk , cms.germany . at the third level",
    ", one might define cms.usa.caltech , cms.usa.ufl , cms.usa.fnal .",
    "management for the latter three groups may then be delegated to the institutes themselves , thereby implementing a distributed trust model that has lower maintenance overhead as well as being more representative of the real organizational structure .    as a further optimization",
    ", the hierarchical information in the dns may also be used to define membership , so that only the initial significant part of the dn need to be specified .",
    "dns are structured to include information on the country ( c ) , state / province ( st ) , locality / city ( l ) , organization ( o ) , organizational unit ( ou ) , common name ( cn ) , and e - mail address ( email ) .",
    "an example dn issued by the doe science grid ca is /o = doesciencegrid.org / ou = people / cn = john smith 12345 for individuals and /o = doesciencegrid.org",
    "/ ou = services / cn = host /www.mysite.edu for servers . to add all individuals to a particular group , only /o",
    "/ ou = people need to specified as a member dn .",
    "execution of rpcs ( web service methods ) as well as mapping of certificate dns to users on the server system is controlled by a set of hierarchical access control lists ( acls ) in a similar fashion to the vo structure described above , and modeled after the access control ( .htaccess ) files used by apache .",
    "methods have a natural hierarchical structure modeled after python s module infrastructure .",
    "in fact all clarens modules are also python modules .",
    "clarens places no arbitrary restrictions on the depth of this hierarchy , but a depth of two or three levels is most common , e.g. module.method or module.submodule.method .",
    "an acl consist of an evaluation order specification ( allow , deny or deny , allow ) followed by a list of dns allowed , groups allowed , dns denied and groups denied access .",
    "a dn or group granted access to a higher level method automatically has access to a lower level method , unless specifically denied at the lower level , and is denied at the higher level unless allowed at a lower level . the acl specification is therefore evaluated from the lowest applicable level to the highest .",
    ".method acl example . [ cols=\"<,<,<\",options=\"header \" , ]     according to the example acls in table [ acl_table ] , when the method mod.meth is invoked , the second acl is applied , but when any other method in module mod is invoked , the first acl is applied .      in the traditional batch - oriented grid architecture , being able to start long - running cpu intensive jobs as a certain system user is of crucial importance .",
    "e.g. the globus toolkit @xcite implements the concept of a so - called _ gridmap _ file that maps system users to certificate dns .",
    "it is implemented as a flat text file with two values per line , namely the dn and the system user .",
    "clarens similarly contains the notion of mapping dns to user names .",
    "instead of a flat file , a structure similar to the acls described above is used , with the username taking the place of the method name , with one exception : the deny group and deny individual fields are not used , since denying access to process creation methods can be done using the method acls themselves .    at this point it should be clear that in both the vo , acl , and user mappings specification as little information as possible is stored in order to minimize search times for list memberships . searching these lists are in the critical path for the invocation of any method , though , and must be optimize as far as practical .",
    "this is done by storing lists of dns as strings in a structure called a",
    "_ ternary tree _ which is discussed in the appendix .",
    "all method invocations are logged with a time - stamp in the apache server log files to provide a record of client / server transactions .",
    "clarens provides a framework for extending its functionality via new modules installed in subdirectories .",
    "each subdirectory would appear as a new method , root , e.g. a system subdirectory would have its methods accessible as system._method _ etc .",
    "modules can be implemented as either interpreted python bytecode , or as compiled c / c++ shared libraries if code execution speed is important , and are loaded on demand by the python interpreter in each apache process , thereby providing crash - protection between different processes , a major consideration for highly available servers .",
    "provision is also made for users on the server system to install their own modules in subdirectories under their home directories .",
    "these modules are accessible using the format @xmath0user.module.method .",
    "figure [ clarens_module ] shows an example of the simplest module implementation for a method echo , that when placed in a file named echo/__init__.py returns its argument unchanged when called as echo.echo(argument ) .",
    ".... from mod_python import apache from clarens_util import     build_response , write_response    def echo(req , method_name , args ) :      \" \" \" returns the method argument \" \" \"      response = build_response(req,\"echo\",args )      write_response(req , response )      return apache.ok    methods_list={'echo':echo } methods_sig={'echo':['string , string ' ] } ....    two important elements identifies this as a clarens module : the methods_list and methods_sig structures identifying the list of methods and their signatures .",
    "work is underway to use wsdl as method signatures instead if the more limited xml - rpc signatures used in this example .",
    "since the http protocol does not _ require _ persistent connections , it is important that session information be stored persistently on the server side .",
    "this has the positive side - effect of allowing clients to survive server failures or restarts transparently without having to re - authenticate themselves to the server in those cases .",
    "the most important session information that is stored by the clarens server is the authentication information for each session .",
    "the berkeley database @xcite is used for this purpose .",
    "since clarens is built upon commodity software components and standard operating system services , it relies on these components to be set up to achieve these goals . specifically , the apache web , server , the filesystem , database and network components needs to be configured by the system administrator .",
    "work is underway to extend clarens from being an essentially client / server system to being a truly distributed system in a network of mutually aware peers and superpeers that provide services .",
    "the most pressing need for large scale physics analysis is the need for truly distributed data catalogs for a variety of physics data and metadata , and of course a matching search capability .    a switch to a relational database for persistent data storage",
    "is planned to support more advanced data management than the berkeley database s key / value mechanism can provide . along with this change , file acls will also be implemented .",
    "werever practical clarens aims to be compatible with the ogsa framework , with support for soap and wsdl being important first steps in that direction .",
    "clarens is a powerful , yet simple web services architecture with a strong emphasis on security for distributed virtual organizations .",
    "it draws upon a rich base of commodity protocols and software components to provide a platform for the deployment of analysis - oriented web services .",
    "a companion paper describes services and clients that take advantage of this platform @xcite .",
    "this work supported by department of energy contract de - fc02 - 01er25459 , as part of the particle physics datagrid project @xcite , and under national science foundation grant no . 0218937 .",
    "any opinions , findings , and conclusions or recommendations expressed in this material are those of the authors , and do not necessarily reflect the views of the national science foundation .    clarens development is hosted by sourceforge.net @xcite .    99 apache web server , apache software foundation , http://www.apache.org .",
    "berkeley database , sleepycat software inc .",
    ", http://www.sleepycat.com .",
    "bentley , j. , sedgewick , b. , ternary search trees . _",
    "dr . dobb s journal _ ,",
    "http://www.ddj.com/documents/s=921/ ddj9804a/9804a.htm , april 1998 .",
    "foster , i. , the grid : a new infrastructure for 21st century science .",
    "_ physics today _ , vol .",
    "55 ( 2 ) , pp",
    ". 42  47 , 2002 .",
    "foster , i , kesselman , c. , globus : a toolkit - based grid architecture , in _ the grid , a blueprint for a new computing infrastructure _ , eds . foster , i. and kesselman , c. , _ morgan kaufman _ , 1999 .",
    "foster , i. , kesselman , c. , nick , j. , tuecke , s. , the physiology of the grid : an open grid services architecture for distributed systems , _ globus project _ , 2002 .",
    "mod_python python interface to the apache web server , http://www.modpython.org .",
    "newman , h.b . ,",
    "branson , j. , cms analysis : an interactive grid - enabled environment , nsf itr proposal 01 - 149 , http://pcbunn.cacr.caltech.edu/ caigee_proposal_v021.htm , 2002 .",
    "particle physics datagrid , http://www.ppdg.net .",
    "root , an object oriented analysis framework , http://root.cern.ch .",
    "open source software development website http://www.sourceforge.net .",
    "the sun one grid engine , http://wwws.sun.com / software / gridware/.    simple object acess protocol , w3 consortium , http://www.w3.org/2002/ws/.    steenberg , c.d . , aslakson , a. , bunn , j.b . ,",
    "newman , h.b . ,",
    "thomas , m. , van lingen , f. , clarens client and server applications , _ this volume _ , paper tuct005 , 2003 .",
    "xml remote procedure call website , http://www.xmlrpc.com .",
    "as pointed out in section [ sec_auth ] , several lists must be searched for every method invocation to enforce access control , establish group membership and map certificate dns to system user names .",
    "the keys for these lists ( method , group , or user names ) are kept in python dictionary objects , which are implemented as hash tables .",
    "although it is certainly possible to store the aforementioned lists in hash tables , these structures lack an important feature , namely the ability to search for initial substrings .",
    "e.g. if we are presented with the query dn /o = myorg / ou = people / cn = john smith , but only the string /o",
    "= myorg / ou = people is stored .",
    "initial substring searches are particularly suited to a data structure called a _",
    "ternary tree _",
    "@xcite that contains nodes for less than , equals and greater than comparisons for string fragments .",
    "in contrast to the reference implementation , the clarens ternary trees contain two characters per node , reducing the storage requirements of the tree .",
    "when presented with the above dn , the tree can be traversed by comparing and branching every two characters , and returning the number of characters matched if a leaf node is reached , or a failure can be signaled if a leaf node is not reached .",
    "the returned number can be compared with the length of the query dn : an exact string match corresponds to an equal number of matched characters , while a lower number corresponds to a substring match .",
    "the ternary tree structure is implemented as a python extension module in c. informal tests with 10,000 dns on a 933 mhz pc produces roughly 300,000 searches / second for the worst case where each dn is present in the tree , i.e. the maximum number of branches taken per search ."
  ],
  "abstract_text": [
    "<S> clarens is a grid - enabled web service infrastructure implemented to augment the current batch - oriented grid services computing model in the compound muon solenoid ( cms ) experiment of the lhc . </S>",
    "<S> clarens servers leverage the apache web server to provided a scalable framework for clients to communicate with services using the soap and xml - rpc protocols . </S>",
    "<S> this framework provides security , session persistent storage , service discovery , and call routing to back - end services . as an implementation policy clarens uses widely implemented standards wherever possible instead of inventing new standards .    </S>",
    "<S> this paper describes the basic architecture of clarens , while a companion paper describes clients and services that take advantage of this architecture . </S>",
    "<S> more information and documentation is also available at the clarens web page at http://clarens.sourceforge.net . </S>"
  ]
}