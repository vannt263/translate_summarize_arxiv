{
  "article_text": [
    "we consider deterministic finite - state transducers ( mealy automata ) with the same input and output alphabets .",
    "such automata process words over the alphabet letter by letter : automaton reads the first letter from the current state , produces the output letter , and changes its state ; the output letter and the new state depend only on the current state and the input letter . in this way , every state @xmath4 taken as the initial state defines a transformation of words over the alphabet .",
    "if all transformations defined by the states of an automaton @xmath5 are invertible , they generate a group under composition of functions , which is called the automaton group @xmath6 generated by @xmath5 .",
    "further , we always assume that the states of automata determine a symmetric generating set of the group @xmath6 , so that every element of @xmath6 can be given by a word @xmath7 over states .",
    "the word problem in every automaton group is solvable . to describe the algorithm ,",
    "define the section @xmath8 of a state @xmath4 at a word @xmath9 over the alphabet as the end state of the automaton after processing the word @xmath9 from the initial state @xmath4 .",
    "this notion naturally extends to words over the states of an automaton : the section of @xmath10 at a word @xmath9 is defined by @xmath11 ( we are using left actions ) . the section @xmath12 has a natural interpretation : take @xmath2 copies of the automaton @xmath5 , choose the initial state @xmath13 in the @xmath14-th copy , and connect the output of @xmath15-th automaton to the input of @xmath14-th automaton .",
    "then the final configuration of states after processing a word @xmath9 is the section @xmath12 .",
    "note that we treat sections as words over states , together with the natural action on words over the alphabet .",
    "now the algorithm solving the word problem in automaton groups follows from the fact : a word @xmath16 over the states of an automaton @xmath5 defines the trivial transformation if and only if the sections of @xmath16 at all words over the alphabet act trivially on the alphabet . if the automaton @xmath5 has @xmath17 states , then @xmath7 has at most @xmath18 sections .",
    "therefore this algorithm solves the word problem in at most exponential time .",
    "the precise complexity of the word problem in the class of automaton groups is unknown . for contracting automaton groups",
    "the word problem is solvable in polynomial time ( * ? ? ?",
    "* proposition  2.13.10 ) .",
    "the word problem in groups generated by polynomial automata is solvable in subexponential time @xcite . and of course , if the automaton group is free , nilpotent , etc .",
    ", then the complexity of the word problem is smaller than exponential as well .",
    "the complexity of the above algorithm directly depends on the number of sections that elements have .",
    "define the _ section growth function _ of an automaton @xmath5 : @xmath19 if the function @xmath20 is bounded from above by a polynomial ( subexponential ) function then the word problem in the group @xmath21 is solvable in polynomial ( subexponential ) time .",
    "the number of sections can be bounded by the depth of state words .",
    "let @xmath22 be the least integer @xmath23 with the property that for every word @xmath9 over the alphabet there exists a word @xmath24 of length @xmath25 such that @xmath26 .",
    "define the _ depth function _ of an automaton @xmath5 : @xmath27 if the alphabet has @xmath28 letters , then @xmath29 .",
    "therefore , if the depth function is bounded from above by a poly - logarithmic function , then the word problem is solvable in subexponential time .    instead of computing sections as words over states",
    ", we can compute a few relations in a given automaton group , and then reduce sections using these relations .",
    "this may highly reduce the number of sections and , as a consequence , the complexity of the algorithm .",
    "for example , in contracting automaton groups , computing certain relations in a finite time will guarantee the depth function @xmath30 and polynomial word problem .",
    "the goal of this note is to estimate the depth function of the hanoi automata @xmath31 and the complexity of the word problem in the hanoi towers groups @xmath32 , which model the tower of hanoi game on @xmath33 pegs @xcite .",
    "this classical game is played with @xmath17 disks of distinct size placed on @xmath33 pegs , @xmath34 . initially , all disks are placed on the first peg according to their size so that the smallest disk is at the top , and the largest disk is at the bottom .",
    "a player can move only one top disk at a time from one peg to another peg , and can never place a bigger disk over a smaller disk .",
    "the goal of the game is to transfer the disks from the first peg to another peg . for more information about this game , its history , solutions , and open problems , we refer the reader to @xcite and the references therein .",
    "the automaton model @xmath31 presented in @xcite encodes configurations of disks on pegs by words over the alphabet @xmath35 , and the action of each state of the automaton @xmath31 corresponds to a single disk move between two pegs .",
    "therefore each strategy of the player can be encoded by a word over states of the automaton @xmath31 .",
    "the hanoi towers game has subexponential complexity for @xmath36 : it can be solved in @xmath37 moves , and this is an asymptotically optimal solution ( see more precise estimates in @xcite ) .",
    "note that if we express the height of the tower @xmath17 in terms of the length @xmath2 of an optimal solution , we get @xmath38 .",
    "i do not see how the estimate on the game s complexity immediately implies the estimate on the complexity of the word problem in the groups @xmath0 .",
    "nevertheless , we prove the following results .",
    "[ thm_main ] the depth function of the hanoi automaton @xmath31 satisfies @xmath39 .",
    "the section growth function of the hanoi automaton @xmath31 satisfies @xmath40 .",
    "the word problem in the hanoi towers group @xmath0 is solvable in subexponential time @xmath3 .",
    "in this section we briefly review necessary information about automata , automaton groups , and describe the construction of hanoi automata @xmath31 .",
    "see @xcite for more details .",
    "let @xmath41 be a finite alphabet and @xmath42 be the free monoid over @xmath41 .",
    "the elements of @xmath42 are finite words @xmath43 , @xmath44 , @xmath45 , the identity element is the empty word @xmath46 , and the operation is concatenation of words .",
    "the length of @xmath47 is @xmath48 .",
    "an automaton @xmath5 over the alphabet @xmath41 is a finite directed labeled graph , whose vertices are called the states of the automaton , and for each vertex @xmath49 and every letter @xmath50 there exists a unique outgoing arrow at @xmath4 labeled by @xmath51 for some @xmath52 .",
    "every state @xmath49 defines a transformation of @xmath42 as follows .",
    "given a word @xmath53 , there exists a unique directed path in the automaton @xmath5 starting at the state @xmath4 and labeled by @xmath54 , @xmath55, ",
    ",@xmath56 for some @xmath57 .",
    "then the word @xmath58 is called the _ image of @xmath43 under @xmath4 _ , and the end vertex of this path is called the _ section of @xmath4 at @xmath9 _ denoted @xmath8 .",
    "a word @xmath7 over states acts on @xmath42 by composition : @xmath59 .",
    "the section of a word @xmath7 over states at a word @xmath60 is defined by equation ( [ eqn_section_word ] ) .",
    "further , by _ states in section _",
    "@xmath12 we mean states @xmath61 given by equation ( [ eqn_section_word ] ) .",
    "if all transformations defined by the states of @xmath5 are invertible , the automaton @xmath5 is called invertible , and the group @xmath21 generated by these transformations under composition of functions is called the automaton group generated by @xmath5 .    the _ hanoi automaton @xmath31 _ is defined over the alphabet @xmath62 .",
    "it has the trivial state @xmath63 and the state @xmath64 for every transposition @xmath65 on @xmath41 .",
    "all arrows outgoing from @xmath63 end in @xmath63 and are labeled by @xmath66 for each @xmath50 . each state @xmath64",
    "has two outgoing arrows @xmath67 labeled by @xmath68 and @xmath69 , and the other arrows are loops at @xmath64 labeled by @xmath66 for every @xmath70 .",
    "for example , the automaton @xmath71 is shown in figure  [ fig_automhanoi ] ( the loops at the trivial state @xmath63 are not drawn ) .",
    "the automaton @xmath31 is invertible and produces a symmetric generating set of the hanoi towers group @xmath32 .",
    "the action of states @xmath64 on the space @xmath72 can be given recursively as follows : @xmath73 in other words , the state @xmath64 changes the first occurrence of letter @xmath14 or @xmath74 to the other one , and leaves the other letters unchanged .",
    "the states of the hanoi automata satisfy the following important property : for any @xmath75 and @xmath76 , @xmath77",
    "let @xmath78 be the depth function of the hanoi automaton @xmath31 .",
    "we will prove @xmath79 ( for simplicity , to avoid extra brackets , by @xmath80 we mean the least integer greater than the binary logarithm of @xmath2 ) .",
    "* case @xmath81 .",
    "* let us estimate the depth of certain words over states . if @xmath82 then @xmath83 .",
    "we say that a word @xmath10 is a one - letter word , if there exists @xmath84 such that @xmath85 for all @xmath14 .",
    "note that @xmath86 for every one - letter word @xmath16 . if @xmath87 are one - letter words (",
    "maybe for different letters @xmath4 ) , then the properties ( [ eqn_property_states ] ) imply that the section @xmath88 is a one - letter word for every @xmath89 , and @xmath90 .",
    "it follows that if a word @xmath16 is a concatenation of @xmath2 one - letter words , then @xmath91 is a concatenation of at most @xmath92 one - letter words .",
    "the estimate @xmath93 follows .",
    "* case @xmath94 .",
    "* fix @xmath75 .",
    "let @xmath95 be the set of all states @xmath96 that fix @xmath97 .",
    "note that @xmath95 is a subautomaton of @xmath31 .",
    "in particular , for any @xmath98 and @xmath99 every state in the section @xmath12 fixes @xmath97 .",
    "application of inductive hypothesis is based on the following observation : if we restrict the automaton @xmath95 to the alphabet @xmath100 , we get the automaton @xmath101 .",
    "this gives an estimate on the number of sections at words over @xmath100 .",
    "but since @xmath102 and @xmath103 for each @xmath104 , we have @xmath105 for every @xmath99 and @xmath98 , where @xmath24 is the word over @xmath100 that is obtained from @xmath9 by removing every occurrence of letter @xmath97 .",
    "therefore it is sufficient to count only sections at words over @xmath100 .",
    "we have proved the estimate @xmath106 for all @xmath98 , @xmath107 , @xmath94 .",
    "* claim . * for every @xmath107 and any states @xmath108 , the section @xmath12 satisfies the property ( * ) for all words @xmath99 of length @xmath109 with constant @xmath110 . in particular , @xmath12 is a word over the states of @xmath111 for some @xmath50 , and @xmath112 .",
    "we prove the claim by induction on @xmath33 .",
    "the basis of induction @xmath81 is shown above .",
    "suppose the claim holds for less than @xmath33 and consider the case @xmath33 .",
    "we are going to use the inductive hypothesis as follows : for every @xmath75 , any @xmath98 , and all words @xmath113 that contain at least @xmath114 letters different from @xmath97 , there exists a letter @xmath115 , @xmath116 , such that every state in the section @xmath12 fixes @xmath117 .",
    "take two different letters @xmath118 and elements @xmath119 for @xmath120 and @xmath121 for @xmath122 .",
    "consider the section @xmath123 for a word @xmath60 of length @xmath124 , @xmath125 .",
    "then @xmath9 contains at least @xmath114 letters @xmath126 for certain @xmath127 .",
    "if @xmath128 then we can apply inductive hypothesis to @xmath129 : every state in @xmath129 fixes some letter besides @xmath117 .",
    "if @xmath130 then @xmath131 contains at least @xmath132 letters @xmath133 , and every state in @xmath134 fixes some letter besides @xmath97 . if we get a common letter for @xmath134 and @xmath129 , then @xmath123 satisfies the property ( * ) . otherwise , we get at least three letters , each one fixed either by all states in @xmath129 , or in @xmath134",
    ". we can proceed further and consider @xmath135 for words",
    "@xmath24 of length @xmath124",
    ". then either @xmath135 satisfies the property ( * ) , or there are at least four letters , each one fixed either by all states in @xmath129 , or in @xmath134 .",
    "it follows that for all words @xmath9 of length @xmath136 the section @xmath123 satisfies the property ( * ) .",
    "now consider any word @xmath10 , @xmath137 .",
    "we partition @xmath16 on subwords @xmath138 such that every subword @xmath139 satisfies the property ( * ) .",
    "consider the words @xmath140 , @xmath141 ,  , and their sections at words @xmath9 of length @xmath136 .",
    "then , using the fact proved in the previous paragraph , the section @xmath142 can be represented in the form  ( [ eqn_blocks ] ) with @xmath143 subwords . applying this procedure @xmath144 times",
    ", we get that @xmath145 satisfies the property ( * ) for all words @xmath9 of length @xmath146 and the section growth function @xmath147 of the hanoi automaton @xmath71 for small values of @xmath2 :"
  ],
  "abstract_text": [
    "<S> we prove that elements of the hanoi towers groups @xmath0 have depth bounded from above by a poly - logarithmic function @xmath1 , where @xmath2 is the length of an element . </S>",
    "<S> therefore the word problem in groups @xmath0 is solvable in subexponential time @xmath3 .    _ </S>",
    "<S> 2010 mathematics subject classification _ : 68r05 , 20f10    _ keywords _ : the tower of hanoi game , automaton group , word problem , complexity </S>"
  ]
}