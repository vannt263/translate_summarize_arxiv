{
  "article_text": [
    "it is increasingly common for organizations to computerize their business and management processes .",
    "the co - ordination of the steps that comprise a computerized business process is managed by a workflow management system .",
    "typically , the execution of these steps will be triggered by a human user , or a software agent acting under the control of a human user , and the execution of each step will be restricted to some set of authorized users or agents .",
    "in addition , one may wish to constrain the users who execute certain sets of steps , even if authorized .",
    "we may , for example , require that two particular steps are executed by two different users , in order to enforce some separation - of - duty requirement ; or by the same user , to respect a binding - of - duty requirement .",
    "we model a workflow as follows .",
    "we have a set of _ steps _ @xmath0 , each of which must be performed by some _ user _ in a set @xmath1 of users .",
    "we restrict the users that can perform each step with a set of _ authorization lists _ , @xmath2 , where @xmath3 denotes the set of steps that user @xmath4 is authorized to perform .",
    "furthermore we must also satisfy a set @xmath5 of _ ( business ) constraints_. in general , a _ constraint _ can be described as a pair @xmath6 , where @xmath7 and @xmath8 is a set of functions from @xmath9 to @xmath1 : @xmath9 is the _",
    "scope _ of the constraint and @xmath8 specifies those assignments of steps in @xmath9 to users in @xmath1 that satisfy the constraint .",
    "@xmath10 , @xmath11 is said to be _",
    "satisfiable _ if there exists a function @xmath12 such that    1 .   for all",
    "@xmath13 , @xmath14 ( each step is allocated to an authorized user ) ; 2 .   for all @xmath15 , @xmath16",
    "( every constraint is satisfied ) .",
    "such a function @xmath12 is called a _ valid complete plan_. evidently , it is possible to specify a workflow that is not satisfiable .",
    "hence , it is important to be able to determine whether a workflow is satisfiable or not .",
    "this is called the _ workflow satisfiability problem _ ( wsp ) .",
    "this problem has been studied extensively in the security research community  @xcite and more recently as an interesting algorithmic problem  @xcite .    as an example , consider the following instance of the wsp introoduced in @xcite .",
    "[ inst : mainexample ] the task set @xmath17 and the user set @xmath18 .",
    "the authorization lists are as follows ( where a tick indicates that the given user is authorized for the given task ) :    [ cols=\"^,<,<,<,<,<,<\",options=\"header \" , ]        steps[fig:25],width=460 ]    for @xmath19 steps , solver fpt successfully solved all @xmath20 test instances , but solver sat4j failed to reach a conclusive decision for @xmath21 of the instances ( @xmath22 ) , all @xmath21 being unsatisfiable ( as determined by solver fpt ) . for small values of @xmath23 or @xmath24 , corresponding to lightly - constrained instances , sat4j usually performs better than solver fpt .",
    "this is unsurprising , because the diversity @xmath25 of such instances is much higher , thereby increasing the running time of algorithm  [ alg : pseudo - code ] .",
    "however , for larger values of @xmath23 or @xmath24 ( where the diversity is much lower ) , the fpt algorithm clearly outperforms sat4j .",
    "also , figure  [ fig:20 ] clearly shows that the running time of solver sat4j varies much more than that of solver fpt , with the unsolved instances having running times larger than those of any solved instances .",
    "in contrast , solver fpt shows a very stable time performance .",
    "solver sat4j seems to be better to use when @xmath26 , or @xmath27 and @xmath28 , or @xmath29 and @xmath30 .",
    "+ for @xmath31 steps , solver fpt reached a conclusive decision ( satisfiable or unsatisfiable ) for all the @xmath32 test instances .",
    "in contrast , sat4j failed to solve @xmath33 of the instances ( @xmath34 ) , two of which were reported to be satisfiable and nine of which were reported to be unsatisfiable by solver fpt .",
    "again , for smaller values of @xmath23 or @xmath24 , corresponding to lightly constrained instances , sat4j generally performs better than solver fpt .",
    "however , for larger values of @xmath23 or @xmath24 , sat4j starts to fail quite often and is not able to provide a solution . at the same time , our fpt algorithm clearly starts to outperform sat4j because the diversity @xmath25 of such instances is much lower .",
    "figure  [ fig:25 ] shows that , for @xmath35 steps , the running time of solver sat4j varies similarly to the running time of solver fpt , with an outlier instance at @xmath36 and @xmath37 ( satisfiable ) .",
    "however , sat4j is unable to solve almost half of the instances , with the unsolved instances again having running times higher than any solved instances .",
    "solver sat4j seems to be better to use when @xmath38 , or @xmath39 and @xmath30 , or when an instance is highly suspected to be satisfiable .",
    "table  [ tbl : results - different - k ] above presents summary statistics for the experiments overall . from tables",
    "[ tbl : results - k - equal-20 ] and [ tbl : results - k - equal-25 ] and the low running time variance for @xmath40 , it can be observed that the average running times of solver fpt are of a similar order of magnitude , whether the instances are satisfiable or unsatisfiable .",
    "the set of running times for solver fpt in table  [ tbl : results - k - equal-20 ] , whether the instance is satisfiable or unsatisfiable , also has relatively low variance . in contrast , the mean running times of sat4j vary significantly depending on whether the instance is satisfiable or not . as the number @xmath41 of steps increases , sat4j fails more frequently , and is unable to reach a conclusive decision for almost half of the instances when @xmath42 .",
    "this is unsurprising , given that the number of pb sat variables will grow quadratically as @xmath41 and @xmath43 increase .",
    "however , in time performance for satisfiable instances , the picture is often more favourable to sat4j : this may be explained by some heuristics deployed to solve relatively easy satisfiable instances .",
    "overall , for larger values of @xmath41 , the average run - time advantage of the fpt algorithm over sat4j decreases , but the relative number of instances solved by sat4j decreases as well .    the tables also exhibit the expected correlation between the running time of our fpt algorithm and two numbers : the number of patterns generated by the algorithm and the number of users considered , which , in turn , is related to the number of constraints and constraint density . for well - constrained instances ,",
    "the fpt algorithm has to consider far fewer patterns , and this more than offsets the fact that we may have to consider every user ( for those cases that are unsatisfiable ) .",
    "it is interesting to note the way in which the mean running time @xmath44 varies with the number of steps . in particular",
    ", @xmath44 for our algorithm grows exponentially with @xmath41 ( with strong correlation between @xmath41 and @xmath45 ) , which is consistent with the theoretical running time of our algorithm ( @xmath46 ) .",
    "the running time of sat4j is also dependent on @xmath41 , with a strong correlation between @xmath41 and @xmath45 , which is consistent with the fact that there are @xmath47 possible plans to consider .",
    "however , it is clear that the running time of sat4j is also more dependent on the number of variables ( determined by the number of users , authorizations , and constraints ) , than it is on @xmath41 , unlike the running time of our algorithm .",
    "in this paper , we described our implementation of an fpt algorithm designed to solve a specific np - hard problem known as the workflow satisfiability problem ( wsp ) for user - independent counting constraints . in theory",
    ", there exists an algorithm that can solve the wsp for user - independent constraints in time @xmath48 in the worst case .",
    "however , the wsp is a practical problem with applications in the design of workflows and the design of access control mechanisms for workflow systems  @xcite .",
    "thus , it is essential to demonstrate that theoretical advantages can be realised in practice .",
    "accordingly , we have developed several implementations using the generic fpt algorithm as a starting point . in developing the implementations",
    ", it became apparent that several application - specific heuristic improvements could be made .",
    "in particular , we developed specific types of propagation and pruning techniques for counting at - most-@xmath49 and at - least-@xmath49 constraints .",
    "following general techniques described in section  [ sec : solving - wsp : fpt - algorithm ] and in @xcite , it should be possible to generalize and implement efficiently most of the ideas used in algorithm  [ alg : pseudo - code ] to solve the wsp with other types of user - independent constraints .",
    "we compared the performance of our algorithm with that of sat4j  an `` off - the - shelf ''",
    "pb sat solver . in order to perform this comparison , we extended wang and li s encoding of the wsp as a pseudo - boolean satisfiability problem @xcite .",
    "the results of our experiments suggest that our algorithm does , indeed , have an advantage over sat4j when solving the wsp , although this advantage does not extend to lightly constrained instances of the problem .",
    "the results also suggest that those advantages could be attributed to the structure of our algorithm , with its focus on the small parameter ( in this case , the number of workflow steps ) .",
    "the encodings of plans presented in this paper grouped plans together based on which steps they assigned to the same user . for counting constraints",
    ", it would also be possible to group plans together based on how many users are assigned to the steps in each constraint .",
    "it may be worth investigating algorithms based on this encoding of plans in future .",
    "we plan to continue working on algorithm engineering for the wsp .",
    "in particular , we plan to continue developing ideas presented in this paper and in @xcite to develop efficient implementations and modified versions of this fpt algorithm .",
    "we hope to obtain a more efficient implementation than the one presented in this paper .",
    "we also plan to try different experimental setups .",
    "for example , in this paper , we have used a uniform random distribution of authorizations to users with an upper bound at 50% of the number of steps for which any one user can be authorized . in some practical situations ,",
    "a few users are authorized for many more steps than others .",
    "we have only considered counting constraints , rather than a range of user - independent constraints . in some ways , imposing these constraints enables us to make meaningful comparisons between the two different algorithmic approaches .",
    "however , we would like to undertake more extensive study and testing to confirm that the initial results obtained for this particular family of wsp instances can be extended to other types of wsp .    results and ideas presented in this paper can serve as a benchmark for further developments in algorithm engineering to solve the workflow satisfiability problem with user - independent constraints and to design their experimental testing .",
    "chimani , m. , klein , k. : algorithm engineering : concepts and practice . in :",
    "bartz - beielstein , t. , chiarandini , m. , paquete , l. , preuss , m. ( eds . ) experimental methods for the analysis of optimization algorithms , pp . 131158 ( 2010 )    cohen , d. , crampton , j. , gagarin , a. , gutin , g. , jones , m. : engineering algorithms for workflow satisfiability problem with user - independent constraints .",
    "8th international frontiers of algorithmics workshop ( faw 2014 ) , j. chen , j.e .",
    "hopcroft , and j. wang ( eds . ) , 2014 , lncs 8497 , springer , pp .",
    "48 - 59 .",
    "cohen , d. , crampton , j. , gagarin , a. , gutin , g. , jones , m. : iterative plan construction for the workflow satisfiability problem .",
    "journal of artificial intelligence research 51 , 555577 ( 2014 ) crampton , j. : a reference monitor for workflow systems with constrained task execution . in : ferrari ,",
    "e. , ahn , g.j .",
    "acm ( 2005 )                gligor , v.d . ,",
    "gavrila , s.i . ,",
    "ferraiolo , d.f : on the formal definition of separation - of - duty policies and their composition . in _",
    "ieee symposium on security and privacy _ ,",
    "ieee computer society , 1998 .",
    "schaad , a. , spadone , p. , weichsel , h. : a case study of separation of duty properties in the context of the austrian  elaw \" process .",
    "the 2005 acm symposium on applied computing ( sac 2005 ) , 13281332 ( 2005 )"
  ],
  "abstract_text": [
    "<S> the workflow satisfiability problem ( wsp ) asks whether there exists an assignment of authorized users to the steps in a workflow specification that satisfies the constraints in the specification . </S>",
    "<S> the problem is np - hard in general , but several subclasses of the problem are known to be fixed - parameter tractable ( fpt ) when parameterized by the number of steps in the specification . in this paper , we consider the wsp with user - independent counting constraints , a large class of constraints for which the wsp is known to be fpt . </S>",
    "<S> we describe an efficient implementation of an fpt algorithm for solving this subclass of the wsp and an experimental evaluation of this algorithm . </S>",
    "<S> the algorithm iteratively generates all equivalence classes of possible partial solutions until , whenever possible , it finds a complete solution to the problem . </S>",
    "<S> we also provide a reduction from a wsp instance to a pseudo - boolean sat instance . </S>",
    "<S> we apply this reduction to the instances used in our experiments and solve the resulting pb sat problems using sat4j , a pb sat solver . </S>",
    "<S> we compare the performance of our algorithm with that of sat4j and discuss which of the two approaches would be more effective in practice .    </S>",
    "<S> _ keywords : _ workflow satisfiability problem ( wsp ) ; fixed - parameter tractability ( fpt ) ; algorithm engineering ; reduction to the pseudo - boolean sat problem ; user - independent constraints </S>"
  ]
}