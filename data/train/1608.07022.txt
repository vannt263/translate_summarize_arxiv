{
  "article_text": [
    "a vertex subset @xmath0 in a graph is called an _ @xmath4-path vertex cover _ if every path of @xmath4 vertices in the graph contains at least one vertex from @xmath0 . the @xmath4-path vertex cover problem , to find an @xmath4-path vertex cover of minimum size , has been studied in the literature  @xcite . when @xmath5 , this problem becomes the famous vertex cover problem and it has been well studied . in this paper",
    "we study the @xmath6-path vertex cover problem .",
    "a 3-path vertex cover is also known as a _ @xmath7-degree - bounded deletion set_. the @xmath8-degree - bounded deletion problem  @xcite is to delete a minimum number of vertices from a graph such that the remaining graph has degree at most @xmath8 .",
    "the 3-path vertex cover problem is exactly the @xmath7-degree - bounded deletion problem .",
    "several applications of 3-path vertex covers have been proposed in  @xcite .",
    "it is not hard to establish the np - hardness of the 3-path vertex cover problem by reduction from the vertex cover problem .",
    "in fact , it remains np - hard even in planar graphs  @xcite and in @xmath9-free bipartite graphs with vertex degree at most 3  @xcite .",
    "there are several graph classes , in which the problem can be solved in polynomial time  @xcite .",
    "the @xmath6-path vertex cover problem has been studied from approximation algorithms , exact algorithms and parameterized algorithms .",
    "there is a randomized approximation algorithm with an expected approximation ratio of @xmath10  @xcite . in terms of exact algorithms ,",
    "kardo et al .",
    "@xcite gave an @xmath11-time algorithm to compute a maximum dissociation set in an @xmath12-vertex graph .",
    "chang et al .",
    "@xcite gave an @xmath13-time algorithm and the result was further improved to @xmath14 later  @xcite .",
    "in parameterized complexity , this problem is fixed - parameter tractable by taking the size @xmath1 of the 3-path vertex cover as the parameter . the running time bound of parameterized algorithm for this problem",
    "has been improved at least three times during the last one year .",
    "tu  @xcite showed that the problem can be solved in @xmath15 time .",
    "wu  @xcite improved the result to @xmath16 by using the measure - and - conquer method .",
    "the current best result is @xmath17 by katreni  @xcite . in this paper",
    "we will further improve the bound to @xmath3 .",
    "another important issue in parameterized complexity is kernelization .",
    "a kernelization algorithm is a polynomial - time algorithm which , for an input graph with a parameter @xmath18 either concludes that @xmath19 has no 3-path vertex cover of size @xmath1 or returns an equivalent instance @xmath20 , called a _ kernel _ , such that @xmath21 and the size of @xmath22 is bounded by a function of @xmath1 .",
    "kernelization for the @xmath8-degree - bounded deletion problem has been studied in the literature  @xcite . for @xmath23 , fellows et al.s algorithm  @xcite implies a kernel of @xmath24 vertices for the 3-path vertex cover problem , and xiao s algorithm  @xcite implies a kernel of @xmath25 vertices .",
    "there is another closed related problem , called the",
    "_ 3-path packing _ problem . in this problem",
    ", we are going to check if a graph has a set of at least @xmath1 vertex - disjoint 3-paths .",
    "when we discuss kernelization algorithms , most structural properties of the 3-path vertex cover problem and the 3-path packing problem are similar .",
    "several previous kernelization algorithms for the 3-path packing problem are possible to be modified for the 3-path vertex cover problem .",
    "the bound of the kernel size of the 3-path packing problem has been improved for several times from the first bound of @xmath24  @xcite to @xmath26  @xcite and then to @xmath27  @xcite . recently , there is a paper claiming a bound of @xmath2 vertices for the 3-path packing problem in net - free graphs  @xcite .",
    "although the paper  @xcite provides some useful ideas , the proof in it is incomplete and the algorithm may not stop .",
    "several techniques for the 3-path packing problem in  @xcite and  @xcite will be used in our kernelization algorithm .",
    "we will give a kernel of @xmath2 vertices for the 3-path vertex cover problem .",
    "omitted proofs in this extended abstract can be found in the full version of this paper .",
    "we let @xmath28 denote a simple and undirected graph with @xmath29 vertices and @xmath30 edges .",
    "a singleton @xmath31 may be simply denoted by @xmath32 .",
    "the vertex set and edge set of a graph @xmath22 are denoted by @xmath33 and @xmath34 , respectively . for a subgraph ( resp . , a vertex subset ) @xmath35 , the subgraph induced by @xmath36 ( resp . , @xmath35 )",
    "is simply denoted by @xmath37 $ ] , and @xmath38 $ ] ( resp .",
    ", @xmath39 $ ] ) is also written as @xmath40 .",
    "a vertex in a subgraph or a vertex subset @xmath35 is also called a _",
    "@xmath35-vertex_. for a vertex subset @xmath35 , let @xmath41 denote the set of _ open neighbors _ of @xmath35 , i.e. , the vertices in @xmath42 adjacent to some vertex in @xmath35 , and @xmath43 $ ] denote the set of _ closed neighbors _ of @xmath35 , ie .",
    ", @xmath44 .",
    "the _ degree _ of a vertex @xmath32 in a graph @xmath19 , denoted by @xmath45 , is defined to be the number of vertices adjacent to @xmath32 in @xmath19 .",
    "two vertex - disjoint subgraphs @xmath46 and @xmath47 are _ adjacent _ if there is an edge with one endpoint in @xmath46 and the other in @xmath47 .",
    "the number of connected components in a graph @xmath19 is denoted by @xmath48 and the number of connected components of size @xmath49 in a graph @xmath19 is denoted by @xmath50 .",
    "thus , @xmath51 .",
    "a 3-_path _ , denoted by @xmath52 , is a simple path with three vertices and two edges .",
    "a vertex subset @xmath0 is called a _",
    "3-path vertex cover _ or a @xmath53-@xmath54 if there is no 3-path in @xmath55 . given a graph @xmath28 , a @xmath52-@xmath56 @xmath57 of size",
    "@xmath58 is a collection of vertex - disjoint @xmath52 in @xmath19 , i.e. , each element @xmath59 is a 3-path in @xmath19 and @xmath60 for any two different 3-paths @xmath61 .",
    "a @xmath52-packing is _ maximal _ if it is not properly contained in any strictly larger @xmath52-packing in @xmath19 .",
    "the set of vertices in 3-paths in @xmath62 is denoted by @xmath63 .",
    "let @xmath62 be a @xmath52-packing and @xmath64 be a vertex set such that @xmath65 and @xmath64 induces a graph of maximum degree 1 .",
    "we use @xmath66 to denote the set of degree-@xmath49 vertices in the induced graph @xmath67 $ ] for @xmath68 .",
    "a component of two vertices in @xmath67 $ ] is called an @xmath69-edge . for each @xmath59",
    ", we use @xmath70 to denote the set of @xmath64-vertices that are in the components of @xmath67 $ ] adjacent to @xmath71 . for a 3-path @xmath59 , the degree-2 vertex in it",
    "is called the _ middle vertex _ of it and the two degree-1 vertices in it are call the _ ending vertices _ of it .",
    "in this section we will design a parameterized algorithm for the 3-path vertex cover problem .",
    "our algorithm is a branch - and - reduce algorithm that runs in @xmath3 time and polynomial space , improving all previous results . in branch - and",
    "- reduce algorithms , the exponential part of the running time is determined by the branching operations in the algorithm . in a branching operation , the algorithm solves the current instance @xmath72 by solving several smaller instances .",
    "we will use the parameter @xmath1 as the measure of the instance and use @xmath73 to denote the maximum size of the search tree generated by the algorithm running on any instance with parameter at most @xmath1 . a branching operation , which generates @xmath74 small branches with measure decrease in the @xmath49-th branch being at least @xmath75 , creates a recurrence relation @xmath76 .",
    "the largest root of the function @xmath77 is called the _ branching factor _ of the recurrence .",
    "let @xmath78 be the maximum branching factor among all branching factors in the algorithm .",
    "the running time of the algorithm is bounded by @xmath79 .",
    "more details about the analysis and how to solve recurrences can be found in the monograph  @xcite .",
    "next , we first introduce our branching rules and then present our algorithm .",
    "we have four branching rules .",
    "the first branching rule is simple and easy to observe .",
    "* branching rule ( b1 ) : * _ branch on a vertex @xmath32 to generate @xmath80| + 1 $ ] branches by either + ( i ) deleting @xmath32 from the graph , including it to the solution set , and decreasing @xmath1 by 1 , or + ( ii ) deleting @xmath81 $ ] from the graph , including @xmath82 to the solution set , and decreasing @xmath1 by @xmath83 , or + ( iii ) for each neighbor @xmath84 of @xmath32 , deleting @xmath85 $ ] from the graph , including @xmath86 to the solution set , and decreasing @xmath1 by @xmath87 . _    a vertex @xmath32 is _ dominated _ by a neighbor @xmath84 of it if @xmath32 is adjacent to all neighbors of @xmath84 .",
    "the following property of dominated vertices has been proved and used in  @xcite .",
    "[ lem_dominate ] let @xmath32 be a vertex dominated by @xmath84 .",
    "if there is a minimum 3-path vertex cover @xmath0 not containing @xmath32 , then there is a minimum 3-path vertex cover @xmath88 of @xmath19 such that @xmath89 and @xmath90 .",
    "based on this lemma , we design the following branching rule .    *",
    "branching rule ( b2 ) : * _ branch on a vertex @xmath32 dominated by another vertex @xmath84 to generate two instances by either + ( i ) deleting @xmath32 from the graph , including it to the solution set , and decreasing @xmath1 by 1 , or + ( ii ) deleting @xmath85 $ ] from the graph , including @xmath86 to the solution set , and decreasing @xmath1 by @xmath91 . _    for a vertex @xmath32 , a vertex @xmath92 is called a _ satellite _ of @xmath32 if there is a neighbor @xmath93 of @xmath32 such that @xmath94-n[v]=\\{s\\}$ ] .",
    "the vertex @xmath93 is also called the _",
    "parent _ of the satellite @xmath95 at @xmath32 .",
    "[ lem_sat ] let @xmath32 be a vertex that is not dominated by any other vertex .",
    "if @xmath32 has a satellite , then there is a minimum 3-path vertex cover @xmath0 such that either @xmath96 or @xmath97 for a neighbor @xmath84 of @xmath32 .",
    "* branching rule ( b3 ) : * _ let @xmath32 be a vertex that has a satellite but is not dominated by any other vertex .",
    "branch on @xmath32 to generate @xmath80|$ ] instances by either + ( i ) deleting @xmath32 from the graph , including it to the solution set , and decreasing @xmath1 by 1 , or + ( ii ) for each neighbor @xmath84 of @xmath32 , deleting @xmath85 $ ] from the graph , including @xmath86 to the solution set , and decreasing @xmath1 by @xmath87 . _    [ lem_triangle ] let @xmath32 be a degree-3 vertex with a degree-1 neighbor @xmath98 and two adjacent neighbors @xmath99 and @xmath100 .",
    "there is a minimum 3-path vertex cover @xmath0 such that either @xmath101 or @xmath102 .    *",
    "branching rule ( b4 ) : * _ let @xmath32 be a degree-3 vertex with a degree-1 neighbor @xmath98 and two adjacent neighbors @xmath99 and @xmath100 .",
    "branch on @xmath32 to generate two instances by either + ( i ) deleting @xmath103 $ ] from the graph , including @xmath104 to the solution set , and decreasing @xmath1 by 2 , or + ( ii ) deleting @xmath105\\cup \\{u_1\\}$ ] from the graph , including @xmath106 to the solution set , and decreasing @xmath1 by @xmath107 .",
    "_      we will use @xmath108 to denote our parameterized algorithm .",
    "the algorithm contains 7 steps .",
    "when we execute one step , we assume that all previous steps are not applicable anymore on the current graph",
    ". we will analyze each step after describing it .",
    "[ step - trivial ] if @xmath109 or the graph is an empty graph , then return the result directly .",
    "if the graph has a component of maximum degree 2 , find a minimum 3-path vertex cover @xmath110 of it directly , delete this component from the graph , and decrease @xmath1 by the size of @xmath110 .",
    "after step  [ step - trivial ] , each component of the graph contains at least four vertices .",
    "a degree-1 vertex @xmath32 is called a _ tail _ if its neighbor @xmath84 is a degree-2 vertex .",
    "let @xmath32 be a tail , @xmath84 be the degree-2 neighbor of @xmath32 , and @xmath111 be the other neighbor of @xmath84 .",
    "we show that there is a minimum 3-path vertex cover containing @xmath111 but not containing any of @xmath84 and @xmath32 . at most one of @xmath84 and @xmath32",
    "is contained in any minimum 3-path vertex cover @xmath0 , otherwise @xmath112 would be a smaller 3-path vertex cover .",
    "if none of @xmath84 and @xmath32 is in a minimum 3-path vertex cover @xmath0 , then @xmath111 must be in @xmath0 to cover the 3-path @xmath113 and then @xmath0 is a claimed minimum 3-path vertex cover . if exactly one of @xmath84 and @xmath32 is contained in a minimum 3-path vertex cover @xmath0 , then @xmath114 is a claimed minimum 3-path vertex cover .",
    "[ step_tail ] if there is a degree-1 vertex @xmath32 with a degree-2 neighbor @xmath84 , then return @xmath115,k-1)$ ] .",
    "[ step_dominate ] if there is a vertex @xmath32 of degree @xmath116 dominated by @xmath84 , then branch on @xmath32 with rule  ( b2 ) to generate two branches @xmath117,k-|n(\\{v , u\\})|).\\ ] ]    lemma  [ lem_dominate ] guarantees the correctness of this step .",
    "note that @xmath118 .",
    "this step gives a recurrence @xmath119 where @xmath120 .",
    "for the worst case that @xmath121 , the branching factor of it is 1.6181 .",
    "a degree-1 vertex with a degree-1 neighbor will be handled in step  [ step - trivial ] , a degree-1 vertex with a degree-2 neighbor will be handled in step  [ step_tail ] , and a degree-1 vertex with a neighbor of degree @xmath116 will be handled in step  [ step_dominate ] .",
    "so after step  [ step_dominate ] , the graph has no vertex of degree @xmath122 .",
    "next we consider degree@xmath123 vertices .",
    "[ step_sattellite ] if there is a vertex @xmath32 of @xmath124 having a satellite , then branch on @xmath32 with rule ( b3 ) to generate @xmath125 branches @xmath126,k-|n(\\{v , u\\})|)\\mbox{~for each $ u\\in n(v)$}.\\ ] ]    the correctness of this step is guaranteed by lemma  [ lem_sat ] . note that there is no dominated vertex after step  [ step_dominate ] .",
    "each neighbor @xmath84 of @xmath32 is adjacent to at least one vertex in @xmath127 and then @xmath128 .",
    "this step gives a recurrence @xmath129 where @xmath130 .",
    "for the worst case that @xmath131 , the branching factor of it is 1.7485 .",
    "after step  [ step_sattellite ] , if there is still a vertex of degree @xmath132 , we use the following branching rule . note that now each neighbor @xmath84 of @xmath32 is adjacent to at least two vertices in @xmath127 and then @xmath133 .",
    "[ step_normal ] if there is a vertex @xmath32 of @xmath124 , then branch on @xmath32 with rule ( b1 ) to generate @xmath134 branches @xmath135,k-|n(v)|)\\\\    \\mbox{and }   & \\quad { \\tt p3vc}(g\\setminus n[\\{v , u\\}],k-|n(\\{v , u\\})|)\\mbox{~for each $ u\\in n(v)$}. \\end{split}\\ ] ]    since @xmath133 , this step gives a recurrence @xmath136 which @xmath130 . for the worst case",
    "that @xmath131 , the branching factor of it is 1.6930 .",
    "after step  [ step_normal ] , the graph has only degree-2 and degree-3 vertices .",
    "we first consider degree-2 vertices .    a path @xmath137 of four vertices",
    "is called a _ chain _ if the first vertex @xmath138 is of degree @xmath116 and the two middle vertices are of degree 2 .",
    "note that there is no chain with @xmath139 after step  [ step_dominate ] .",
    "so when we discuss a chain we always assume that @xmath140 .",
    "a chain can be found in linear time if it exists . in a chain @xmath137",
    ", @xmath99 is a satellite of @xmath138 with a parent @xmath98 .",
    "[ step_chain ] if there is a chain @xmath137 , then branch on @xmath138 with rule  ( b3 ) . in the branch where @xmath138 is deleted and included to the solution set",
    ", @xmath98 becomes a tail and we further handle the tail as we do in step  [ step_tail ] .",
    "we get the following branches @xmath141,k-2)\\\\    \\mbox{and }   & \\quad { \\tt p3vc}(g\\setminus n[\\{u_0,u\\}],k-|n(\\{u_0,u\\})| ) \\mbox{~for each $ u\\in n(u_0)$}. \\end{split}\\ ] ]    note that @xmath142 since there is no dominated vertex .",
    "we get a recurrence @xmath143 where @xmath144 . for the worst case that @xmath145 , the branching factor of it is 1.6717 .    after step  [ step_chain",
    "] , each degree-2 vertex must have two nonadjacent degree-3 vertices .",
    "note that no degree-2 is in a triangle if there is no dominated vertex .",
    "[ step_special1 ] if there is a degree-2 vertex @xmath32 with @xmath146 such that a neighbor @xmath84 of it is in a triangle @xmath147 , then branch on @xmath111 with rule ( b1 ) and then in the branch @xmath111 is deleted and included in the solution set further branch on @xmath84 with rule ( b4 ) .",
    "we get the following branches @xmath148,k-|n(\\{u , v\\})|),&\\\\ { \\tt p3vc}(g \\setminus n[\\{u_1 , u_2\\}]\\cup \\{u , w\\ } , k - |n(\\{u_1 , u_2\\})\\cup \\{w\\}|),&~ \\mbox{and }",
    "\\\\ { \\tt p3vc}(g \\setminus n[\\{w , u'\\}],k-|n(\\{w , u'\\})| ) \\mbox{~for each $ u'\\in n(w)$}. & \\end{split}\\ ] ]    there two neighbors @xmath84 and @xmath111 of @xmath32 are degree-3 vertices .",
    "since there is no dominated vertex , for any edge @xmath149 it holds @xmath150 .",
    "we know that @xmath151 , @xmath152 ( since no degree-2 vertex is in a triangle ) and @xmath153 for each @xmath154 .",
    "we get the following recurrence @xmath155 the branching factor of it is 1.7100 .    after step  [ step_special1 ] , no degree-3 vertex in a triangle is adjacent to a degree-2 vertex",
    ".    [ step_special2 ] if there is a degree-2 vertex @xmath32 such that at least one of its neighbors @xmath84 and @xmath111 , say @xmath84 , has a degree-3 neighbor @xmath98 , then branch on @xmath84 with rule ( b1 ) and in the branch where @xmath84 is deleted and included to the solution set , branch on @xmath111 with rule ( b2 ) .",
    "we get the branches @xmath156,k-|n(\\{w , v\\})|),\\\\ ~ \\mbox{and } ~ { \\tt p3vc}(g \\setminus n[\\{u , u'\\}],k-|n(\\{u , u'\\})| ) \\mbox{~for each $ u'\\in n(u)$. } \\end{split}\\ ] ]    note that @xmath157 .",
    "it holds @xmath158 and @xmath159 for @xmath160 .",
    "furthermore , we have that @xmath161 because @xmath84 and @xmath98 are degree-3 vertices not in any triangle .",
    "we get the following recurrence @xmath162 the branching factor of it is 1.7456 .",
    "[ correct ] after step  [ step_special2 ] , if the graph is not an empty graph , then each component of the graph is either a 3-regular graph or a bipartite graph with one side of degree-2 vertices and one side of degree-3 vertices .",
    "[ bipartite ] let @xmath163 be a bipartite graph such that all vertices in @xmath164 are of degree 2 and all vertices in @xmath165 are of degree 3 .",
    "the set @xmath164 is a minimum 3-path vertex cover of @xmath19 .",
    "[ step_bipartite ] if the graph has a component @xmath166 being a bipartite graph with one side @xmath164 of degree-2 vertices and one side @xmath165 of degree-3 vertices , then return @xmath167 .",
    "[ step_regular ] if the graph is a 3-regular graph , pick up an arbitrary vertex @xmath32 and branch on it with rule ( b1 ) .",
    "lemma  [ correct ] shows that the above steps cover all the cases , which implies the correctness of the algorithm .",
    "note that all the branching operations except step  [ step_regular ] in the algorithm have a branching factor at most 1.7485 .",
    "we do not analyze the branching factor for step  [ step_regular ] , because this step will not exponentially increase the running time bound of our algorithm .",
    "any proper subgraph of a connected 3-regular graph is not a 3-regular graph . for each connected component of a 3-regular graph",
    ", step  [ step_regular ] can be applied for at most one time and all other branching operations have a branching factor at most 1.7485 .",
    "thus each connected component of a 3-regular graph can be solved in @xmath3 time . before getting a connected component of a 3-regular graph",
    ", the algorithm always branches with branching factors of at most 1.7485 .",
    "therefore ,    the 3-path vertex cover problem can be solved in @xmath3 time and polynomial space .",
    "in this section , we show that the parameterized 3-path vertex cover problem allows a kernel with at most @xmath2 vertices .      the kernelization algorithm is based on a vertex decomposition of the graph , called _ good decomposition _ , which can be regarded as an extension of the crown decomposition  @xcite .",
    "based on a good decomposition we show that an optimal solution to a special local part of the graph is contained in an optimal solution to the whole graph .",
    "thus , once we find a good decomposition , we may be able to reduce the graph by adding some vertices to the solution set directly .",
    "we only need to find good decompositions in polynomial time in graphs with a large size to get problem kernels .",
    "some previous rules to kernels for the parameterized 3-path packing problem  @xcite are adopted here to find good decompositions in an effective way .      1",
    ".   the induced subgraph @xmath170 $ ] has maximum degree at most 1 ; 2 .",
    "the induced subgraph @xmath171 $ ] has a @xmath52-packing of size @xmath172 ; 3 .",
    "no vertex in @xmath72 is adjacent to a vertex in @xmath173 .",
    "[ lemma_lemma1 ] a graph @xmath19 that admits a good decomposition @xmath174 has a @xmath52-vertex cover ( resp . ,",
    "@xmath52-packing ) of size @xmath1 if and only if @xmath175 $ ] has a @xmath52-vertex cover ( resp . , @xmath52-packing ) of size @xmath176 .",
    "lemma  [ lemma_lemma1 ] provides a way to reduce instances of the parameterized 3-path vertex cover problem based on a good decomposition @xmath174 of the graph : deleting @xmath177 from the graph and adding @xmath0 to the solution set . here",
    "arise a question : how to effectively find good decompositions ?",
    "it is strongly related to the quality of our kernelization algorithm .",
    "the kernel size will be smaller if we can polynomially compute a good decomposition in a smaller graph . recall that we use @xmath178 and @xmath179 to denote the number of components and number of components with @xmath49 vertices in a graph @xmath22 , respectively . for a vertex subset @xmath64 that induces a graph of maximum degree at most @xmath7 and @xmath180",
    ", we use @xmath181 to denote the set of vertices in @xmath182 adjacent to at least one component of size @xmath183 in @xmath67 $ ] , and @xmath184 be the set of vertices in @xmath182 adjacent to at least one component of size @xmath185 but no component of size 1 in @xmath67 $ ] .",
    "we will use the following lemma to find good decompositions , which was also used in  @xcite to design kernel algorithms for the 3-path packing problem .",
    "[ lemma_lemma2 ] let @xmath64 be a vertex subset of a graph @xmath19 such that each connected component of the induced graph @xmath67 $ ] has at most 2 vertices .",
    "if @xmath186 ) > 2|n(a)|-|n'_2(a)|,\\label{imp1}\\end{aligned}\\ ] ] then there is a good decomposition @xmath174 of @xmath19 such that @xmath187 and @xmath188 .",
    "furthermore , the good decomposition @xmath174 together with a @xmath52-packing of size @xmath172 in @xmath171 $ ] can be computed in @xmath189 time .    by using lemma  [ lemma_lemma2 ]",
    ", we can get a linear kernel for the parameterized 3-path vertex cover problem quickly .",
    "we find an arbitrary maximal @xmath52-packing @xmath110 and let @xmath190 .",
    "we assume that @xmath110 contains less than @xmath1 3-paths and then @xmath191 , otherwise the problem is solved directly .",
    "note that @xmath192 .",
    "if @xmath193 , then @xmath194)\\geq { \\frac{|a|}{2 } } > 6 k >   2|v(s)|\\geq 2|n(a)|$ ] and we reduce the instance by lemma  [ lemma_lemma2 ] .",
    "so we can get a kernel of @xmath24 vertices .",
    "this bound can be improved by using a special case of lemma  [ lemma_lemma2 ] .    for a vertex subset @xmath64 such that @xmath67 $ ] has maximum degree at most 1 .",
    "let @xmath195 be the set of degree-1 vertices in @xmath67 $ ] .",
    "note that @xmath196)=comp_2(g[a])$ ] and @xmath197 . by applying lemma  [ lemma_lemma2 ] on @xmath195",
    ", we can get    [ lemma_corollary ] let @xmath64 be a vertex subset of a graph @xmath19 such that each connected component of the induced graph @xmath67 $ ] has at most 2 vertices .",
    "let @xmath198 be the set of vertices in @xmath182 adjacent to at least one vertex in a component of size 2 in @xmath67 $ ] .",
    "if @xmath199 ) > |n_2(a)|,\\label{imp2}\\end{aligned}\\ ] ] then there is a good decomposition @xmath174 of @xmath19 such that @xmath187 and @xmath188",
    ". furthermore , the good decomposition @xmath174 together with a @xmath52-packing of size @xmath172 in @xmath171 $ ] can be computed in @xmath189 time .",
    "note that @xmath200)+2\\cdot comp_2(g[a])$ ] . if @xmath201 , then @xmath202)+2\\cdot comp_2(g[a])=|a|>9k >",
    "3|v(s)|\\geq 3|n(a)|\\geq ( 2|n(a)|-|n'_2(a)|)+|n_2(a)|$ ] and at least one of ( [ imp1 ] ) and ( [ imp2 ] ) holds .",
    "then by using lemma  [ lemma_lemma2 ] and corollary  [ lemma_corollary ] , we can get a kernel of size @xmath203 .",
    "it is possible to bound @xmath204 by @xmath1 and then to get a kernel of size @xmath205 . to further improve the kernel size to @xmath2",
    ", we need some sophisticated techniques and deep analyses on the graph structure .      in this section",
    ", we use `` crucial partitions '' to find good partitions .",
    "a vertex partition @xmath206 of a graph is called a _ crucial partition _ if it satisfies _ basic conditions _ and _ extended conditions_. basic conditions include the following four items :    1 .",
    "@xmath64 induces a graph of degree at most 1 ; 2 .",
    "@xmath207 is the vertex set of a @xmath52-packing @xmath62 ; 3 .",
    "no vertex in @xmath64 is adjacent to a vertex in @xmath208 ; 4 .",
    "@xmath209)$ ] , where @xmath210)$ ] is the size of a minimum @xmath53-set in the induced subgraph @xmath211 $ ] .    before presenting the definition of extended conditions , we give some used definitions .",
    "we use @xmath212 to denote the collection of 3-paths in @xmath62 having @xmath183 vertices adjacent to @xmath64-vertices @xmath213 .",
    "then @xmath214 .",
    "we use @xmath215 to denote the collection of 3-paths @xmath216 such that @xmath217 .",
    "we also partition @xmath218 into two parts : + let @xmath219 be the collection of 3-paths with the middle vertex adjacent to some @xmath64-vertices ; + let @xmath220 be the collection of 3-paths @xmath71 such that @xmath221 and one ending vertex of @xmath71 is adjacent to some @xmath64-vertices .",
    "a vertex in a 3-path in @xmath62 is _ free _ if it is not adjacent to any @xmath64-vertex .",
    "a 3-path in @xmath222 is _ bad _ if it has at least two vertices adjacent to some free - vertex in a 3-path in @xmath223 and _ good _ otherwise .",
    "a 3-path in @xmath223 is _ bad _ if it is adjacent to a bad 3-path in @xmath222 and _ good _ otherwise .      1 .   for each 3-path @xmath224 , at most one vertex in @xmath71",
    "is adjacent to some vertex in @xmath64 , i.e. , @xmath225 ; 2 .",
    "no 3-path in @xmath226 is adjacent to both of @xmath195-vertices and @xmath69-vertices ; 3 .",
    "no free - vertex in a 3-path in @xmath223 is adjacent to a free - vertex in another 3-path in @xmath223 ; 4 .",
    "no free - vertex in a 3-path in @xmath223 is adjacent to a free - vertex in a 3-path in @xmath226 ; 5 .",
    "each 3-path in @xmath215 has at most one vertex adjacent to a free - vertex in a 3-path in @xmath223 ; 6 .",
    "if a 3-path in @xmath227 has at least two vertices adjacent to some free - vertex in a 3-path in @xmath223 , then all those free - vertices are from one 3-path in @xmath223 , i.e. , each bad 3-path in @xmath227 is adjacent to free - vertices in only one bad 3-path in @xmath223 ; 7 .",
    "no free - vertex in a 3-path in @xmath223 is adjacent to a vertex in @xmath208 .      after obtaining a crucial partition @xmath206",
    ", we use the following three reduction rules to reduce the graph .",
    "in fact , extended conditions are mainly used for the third reduction rule and the analysis of the kernel size .      note that each @xmath53-set of the graph @xmath19 must contain at least @xmath229 vertices in @xmath208 by basic condition ( b4 ) and",
    "each @xmath53-set must contain one vertex from each 3-path in @xmath62 .",
    "if the number of 3-paths in @xmath62 is greater than @xmath228 , then any @xmath53-set of the graph has a size greater than @xmath1 .",
    "[ drule2 ] if @xmath230 ) > |n_2(a)|$ ] ( the condition in corollary  [ lemma_corollary ] ) holds , then find a good decomposition by corollary  [ lemma_corollary ] and reduce the instance based on the good decomposition .",
    "reduction rule  [ drule2 ] is easy to observe .",
    "next , we consider the last reduction rule .",
    "let @xmath231 be the set of free - vertices in good 3-paths in @xmath223 and let @xmath232 be the set of @xmath195-vertices adjacent to 3-paths in @xmath215 .",
    "let @xmath233 . by the definition of crucial decompositions , we can get that      vertices in @xmath231 are free - vertices and then any vertex in @xmath231 is not adjacent to a vertex in @xmath64 .",
    "furthermore , no two free - vertices in @xmath231 from two different 3-paths in @xmath223 are adjacent by extended condition ( e3 ) . since @xmath64 induces a graph of maximum degree 1 , we know that @xmath235 induces a graph of maximum degree 1 .",
    "the set @xmath233 is a subset of @xmath235 and then @xmath234 induces of a graph of maximum degree 1 .",
    "[ drule3 ] if @xmath236 ) > 2|n(a')|-|n'_2(a')|$ ] ( the condition in lemma  [ lemma_lemma1 ] on set @xmath234 ) holds , then find a good decomposition by lemma  [ lemma_lemma1 ] and reduce the instance based on the good decomposition .",
    "we consider a crucial partition @xmath206 of the graph .",
    "let @xmath237 be the number of 3-paths in @xmath62 .",
    "since reduction rule  [ drule1 ] can not be applied , we know that @xmath238 since reduction rule  [ drule2 ] and reduction rule  [ drule3 ] can not be applied , we also have the following two relations @xmath239)\\leq   |n_2(a)|,\\end{aligned}\\ ] ] and @xmath240)\\leq 2|n(a')|-|n'_2(a')|.\\end{aligned}\\ ] ]    by extended condition ( e1 ) , we know that @xmath241 .",
    "let @xmath242 and @xmath243 be the numbers of good and bad 3-paths in @xmath223 , respectively .",
    "let @xmath244 ( @xmath68 ) be the number of 3-paths in @xmath222 with @xmath49 vertices adjacent to some free - vertex in a 3-path in @xmath223 , and @xmath245 be the number of 3-paths in @xmath222 with at least two vertices adjacent to some free - vertex in a 3-path in @xmath223 , i.e. , the number of bad 3-paths in @xmath222 .",
    "let @xmath246 and @xmath247 be the numbers of 3-paths in @xmath226 adjacent to only @xmath195-vertices and only @xmath69-vertices , respectively .",
    "let @xmath248 be the number of 3-paths in @xmath215 adjacent to some free - vertex in a 3-path in @xmath223 and @xmath249 be the number of 3-paths in @xmath215 not adjacent to any free - vertex in a 3-path in @xmath223 .",
    "we get that @xmath250 by extended conditions ( e1 ) and ( e2 ) , we know that latexmath:[\\ ] ] note that @xmath267)+comp_2(g[a])$ ] , we get @xmath268 ) + comp_2(g[a])}&\\\\ { } & \\le & 2 ( x_1+x_2+y_0+z_1+z_2+w_1)+ x_2+y_1 + w_2&~~~~~\\mbox{by~(\\ref{final1 } ) and ( \\ref{final2})}\\\\ { } & \\le & 2 ( x_1+x_2+y_0+z_1+z_2+w_1)+ y_2+y_1 + w_2&~~~~~\\mbox{by~(\\ref{x2y2})}\\\\ { } & \\le & 2k_1 & ~~~~~\\mbox{by~(\\ref{k1size})}. \\end{array}\\ ] ]                      k.cameron , p.hell : independent packings in structured graphs . mathematical programming .",
    "105(23 ) , 201213 ( 2006 ) m-s.chang , l-h.chen , l-j.hung , y-z.liu , p.rossmanith , s.sikdar : an @xmath13-time exact algorithm for the maximum bounded - degree-1 set problem . in : the 31st workshop on combinatorial mathematics and computation theory .",
    "pp , 918 ( 2014 )"
  ],
  "abstract_text": [
    "<S> a 3-path vertex cover in a graph is a vertex subset @xmath0 such that every path of three vertices contains at least one vertex from @xmath0 . </S>",
    "<S> the parameterized 3-path vertex cover problem asks whether a graph has a 3-path vertex cover of size at most @xmath1 . in this paper </S>",
    "<S> , we give a kernel of @xmath2 vertices and an @xmath3-time polynomial - space algorithm for this problem , both new results improve previous known bounds . </S>"
  ]
}