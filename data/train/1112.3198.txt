{
  "article_text": [
    "during the development of denotational semantics of programming languages , there was a crucial interest in defining models of computation satisfying particular type equations .",
    "for instance , a model of the untyped @xmath1-calculus can be obtained by isolating a _ reflexive _ object ( that is , an object @xmath2 such that @xmath3 ) in a cartesian closed category . in the 80s",
    ", some people started to consider the dual problem of finding these equations that must hold in _ every _ model of a given language : they were coined _ type isomorphisms _ by bruce and longo . in @xcite , they exploited a theorem by dezani @xcite giving a syntactic characterization of invertible terms in the untyped @xmath1-calculus to prove that that the only isomorphisms of types present in simply typed @xmath1-calculus with respect to @xmath4 equality are those induced by the equation @xmath5 .",
    "later this was extended to handle such things as products @xcite , higher order @xcite , possibly with unit types @xcite , or sums @xcite .",
    "the interest in type isomorphisms grew significantly when their practical impact was realized . in @xcite , rittri proposed to search functions in software libraries using their type modulo isomorphism as a key .",
    "he also considered the possibilities offered by matching and unification of types modulo isomorphisms @xcite .",
    "a whole line of research has also been dedicated to the study of type isomorphisms and their use for search tools in richer type systems ( such as dependent types @xcite ) , along with studies about the automatic generation of the corresponding coercions @xcite .",
    "such tools were implemented for several programming languages , let us mention the command line tool ` camlsearch ` written by vouillon for camllight .",
    "it is worth noting that even though these tools are written for powerful programming languages featuring complex computational effects such as higher - order references or exceptions , they rely on the theory of isomorphisms in weaker ( purely functional ) languages , such as the second - order @xmath1-calculus with pairs and unit types for ` camlsearch ` . clearly , all type isomorphisms in @xmath1-calculus are still valid in the presence of computational effects ( indeed , the operational semantics are compatible with @xmath4 ) .",
    "what is less clear is whether those effects allow the definition of new isomorphisms .",
    "however , it seems that syntactic methods deriving from dezani s theorem on invertible terms in @xmath1-calculus can not be extended to complex computational effects .",
    "the base setting itself is completely different : the dynamics of terms are no longer defined by reduction rules but by operational semantics , the natural equality between terms is no longer convertibility but observational equivalence , so new methods are required .    in @xcite ,",
    "laurent introduced the idea of applying game semantics to the study of type isomorphisms ( although one should mention the precursor characterization of isomorphisms by berry and curien @xcite in the category of concrete data structures and sequential algorithms ) . exploiting his earlier work on game semantics for polarized linear logic @xcite , he found the theory of isomorphisms for llp from which he deduced ( by translations ) the isomorphisms for the call - by - name and call - by - value @xmath6-calculus .",
    "the core of his analysis is the observation that isomorphisms between arenas @xmath7 and @xmath8 in the category @xmath9 @xcite of arenas and innocent strategies are in one - to - one correspondence with _",
    "forest isomorphisms _ between @xmath7 and @xmath8 , so in particular two arenas are isomorphic if and only if their representations as forests are identical up to the renaming of vertices .    from the point of view of computational effects",
    "this looks promising , since game semantics are known to accommodate several computational effects such as control operators @xcite , ground type @xcite or higher - order references @xcite or even concurrency @xcite in one single framework .",
    "moreover , laurent pointed out in @xcite that the main part of his result , namely the fact that each @xmath9-isomorphism induces a forest isomorphism , does not really depend on the innocence hypothesis but only on the weaker _ visibility _ condition . as a consequence",
    ", his method for characterizing isomorphisms still applies to programming languages such as idealized algol whose terms can be interpreted as visible strategies @xcite .",
    "laurent raised the question whether his result could be proved without the visibility condition , therefore yielding a characterization of isomorphisms in a programming language whose terms have access to higher - order references and hence get interpreted as non - visible strategies @xcite .",
    "the contribution of this paper is threefold : _ ( 1 ) _ we give a new and synthetic reformulation of laurent s tools to approach game - theoretically the problem of type isomorphisms , _ ( 2 ) _ we prove laurent s conjecture in the case of finitely branching arenas , allowing us to characterize all type isomorphisms in a finitary ( integers - free ) programming language @xmath0 with higher - order references by the theory @xmath10 presented mentioned in the introduction may seem strange , but is standard in call - by - value @xcite due to the restriction of the @xmath11-rule on values . ] in figure [ equational_theory ] , _ ( 3 ) _ we show however a counter - example to the conjecture when dealing with infinitely branching arenas , and the counter - example yields a non - trivial type isomorphism between the types @xmath12 and @xmath13 in the extension of @xmath0 with natural numbers . so laurent s conjecture , in the general case , is false .    in section [ section_lang ]",
    "we introduce the finitary language @xmath0 strongly inspired by abramsky , honda and mccusker s language @xmath14 @xcite , along with its standard game semantics .",
    "then we turn to the problem of isomorphisms of types . in section [ section_isomorphisms ]",
    "we first give an analysis of isomorphisms in several subcategories of the games model , reproving and extending laurent s theorem , then we use it to characterize isomorphisms in @xmath0 .",
    "we show how this characterization fails in the presence of natural numbers , and we give a non - trivial type isomorphism in @xmath14 .",
    "@xmath15 & { \\simeq}_\\mathcal{e } & ( a\\to \\mathtt{unit})\\times ( \\mathtt{unit } \\to a)\\end{aligned}\\ ] ]",
    "[ [ basic - definitions ] ] basic definitions + + + + + + + + + + + + + + + + +      this language is equipped with a standard big - step call - by - value operational semantics . to define it",
    ", we temporarily extend the syntax of terms with identifiers for * locations * , denoted by @xmath20 .",
    "then , * values * are formed as follows :    @xmath21    the operational semantics of @xmath0 are then given as an inductively generated relation @xmath22 , where @xmath23 is a partial map from locations in @xmath24 to values . the rules for @xmath1-calculus , products and booleans are standard ( they do not affect the store ) and we give in figure [ opsem ] the rules for references .",
    "note that as usual , some store annotations are omitted to aid readability ; the rules can be disambiguated as explained in @xcite . for a closed term @xmath25 without free locations ,",
    "we write @xmath26 to indicate that @xmath27 for some @xmath28 and @xmath29 .",
    "the observational preorder @xmath30 between terms @xmath25 and @xmath31 is then defined as usual , by requiring that for all contexts @xmath32 $ ] such that @xmath33 $ ] and @xmath34 $ ] are closed and contain no free location , if @xmath33{\\downarrow}$ ] then @xmath34{\\downarrow}$ ] .",
    "the corresponding equivalence relation is denoted by @xmath35 .",
    "@xmath36 @xmath37    [ [ syntactic - extensions ] ] syntactic extensions + + + + + + + + + + + + + + + + + + + +    in this core language , one can define all the constructs of a basic imperative programming language . for instance",
    "if @xmath38 has type @xmath39 , sequential composition @xmath40 is given by : @xmath41 this works only because the evaluation of @xmath0 is call - by - value .",
    "likewise , a variable declaration @xmath42 ( where @xmath25 has type @xmath7 ) can be obtained by @xmath43.~n)~\\mathtt{new}_a\\ ] ] and its initialized variant @xmath44 as expected . as usual with general references one can define a fixed point combinator @xmath45 by @xmath46",
    "this can be easily applied to implement a @xmath47 loop .",
    "we can also use it to build an inhabitant @xmath48 to any type @xmath7 .",
    "[ [ bad - variables - and - isomorphisms ] ] bad variables and isomorphisms + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the @xmath49 construct allows to combine arbitrary  write \" and  read \" methods , forming terms of type @xmath50 $ ] not behaving as reference cells :",
    "those are called _",
    "bad variables_. we include bad variable in @xmath0 for two reasons .",
    "first , because games models that allow bad variables are notably simpler than those which do not @xcite , for which it is not clear whether our methods apply .",
    "second , because we expect the problem of isomorphisms without bad variables to be far more subtle than what we consider here , because of the observation by ohearn that without bad variables , not only @xmath51 $ ] is not functorial , but it does not even preserve isomorphisms .",
    "however , note that @xmath52-free isomorphisms are the same with or without bad variables .",
    "[ [ isomorphisms - of - types ] ] isomorphisms of types + + + + + + + + + + + + + + + + + + + + +    we are now ready to define the notion of isomorphism of types in @xmath0 .",
    "if @xmath7 and @xmath8 are two types of @xmath0 , we say that @xmath7 and @xmath8 are _ isomorphic _ , denoted by @xmath53 , if and only if there are two terms @xmath54 and @xmath55 such that : @xmath56 where @xmath57 .",
    "we now describe the fully abstract games model of @xmath0 .",
    "note that except a few details there is nothing new here , as this is precisely the model described in @xcite .",
    "we however include the definitions ( but no proofs ) for the sake of self - completeness .",
    "[ [ arenas - plays ] ] arenas , plays + + + + + + + + + + + + +    our games have two participants : player ( p ) and opponent ( o ) .",
    "valid plays between @xmath58 and @xmath59 are generated by directed graphs called _",
    "arenas _ , which are the abstract representation of types .",
    "an * arena * is a tuple @xmath60 where    * @xmath61 is a set of * moves * , * @xmath62 is a * labeling * function which indicates whether a move is by opponent or player , and whether it is a question or answer .",
    "we write @xmath63 the function @xmath64 denotes @xmath65 with the @xmath66 part reversed . a move",
    "@xmath67 is a @xmath58-move ( resp .",
    "@xmath59-move ) if @xmath68 ( resp .",
    "@xmath69 ) . *",
    "@xmath70 is a set of * initial moves * * @xmath71 is a relation called * enabling * , which satisfies that if @xmath72 , then @xmath73 , and if @xmath74 then @xmath75 .",
    "we require two additional conditions on arenas : they should be * complete * ( for each question @xmath76 , there should be an answer @xmath77 such that @xmath78 ) and * finitely branching * ( for all @xmath67 , the set @xmath79 is finite ) .",
    "we consider the usual arrow construction @xmath80 on arenas , as well as products @xmath81 and lifted sums @xmath82 of finite families of arenas .",
    "their definitions can be found , for example , in @xcite .",
    "it is obvious that they preserve the fact of being complete and finitely branching . the @xmath83-ary product ( the empty arena )",
    "is denoted by @xmath84 , and will be a terminal object in our category .",
    "if @xmath7 is an arena , a * justified sequence * over @xmath7 is a sequence of moves in @xmath61 together with * justification pointers * : for each non - initial move @xmath85 , there is a pointer to an earlier move @xmath86 such that @xmath87 . in this case , we say that @xmath86 * justifies * @xmath85 .",
    "the transitive closure of the justification relation is called * hereditary justification*.    [ [ notations ] ] notations + + + + + + + + +    the relation @xmath88 will denote the prefix ordering on justified sequences . by @xmath89 , we mean that @xmath23 is a @xmath59-ending prefix of @xmath90 .",
    "if @xmath23 is a sequence , then @xmath91 will denote its length .",
    "we also define the * prefix functions * @xmath92 and @xmath93 by @xmath94 and @xmath95 , and @xmath96 if @xmath97 is initial , @xmath98 if @xmath85 is justified by @xmath86 .    a justified sequence @xmath23 over @xmath7 is a * legal play * if it is :    * * alternating * : if @xmath99 , then @xmath73 . * * well - bracketed * : a question @xmath100 is * answered * by a later answer @xmath86 if @xmath100 justifies @xmath86 .",
    "a justified sequence @xmath23 is well - bracketed if each answer is justified by the last unanswered question , that is , the * pending * question .",
    "the set of all legal plays on @xmath7 is denoted by @xmath101 .",
    "we will also be interested in the set @xmath102 of well - bracketed but not necessarily alternating plays on @xmath7 , called * pre - legal plays*.    [ [ strategies - composition ] ] strategies , composition + + + + + + + + + + + + + + + + + + + + + + +    a * strategy * @xmath103 on an arena @xmath7 ( denoted @xmath104 ) is a non - empty set of @xmath59-ending legal plays on @xmath7 satisfying * prefix - closure * , _ i.e. _ that for all @xmath105 , we have @xmath106 and * determinism * , _ i.e. _ that if @xmath107 , then @xmath108 . as usual , strategies form a category which has arenas as objects , and strategies @xmath109 as morphisms from @xmath7 to @xmath8 .",
    "if @xmath110 and @xmath111 are strategies , their composition @xmath112 is defined as usual by first defining the set of * interactions * @xmath113 of plays @xmath114 such that @xmath115 , @xmath116 and @xmath117 ( where @xmath118 is the usual restriction operation essentially taking the subsequence of @xmath23 in @xmath61 and @xmath119 , along with the possible natural reassignment of justification pointers ) .",
    "the * parallel interaction * of @xmath103 and @xmath120 is then the set @xmath121 , and the composition of @xmath103 and @xmath120 is obtained by the * hiding * operation , _",
    "i.e. _ @xmath122 .",
    "it is known ( e.g. @xcite ) that composition is associative .",
    "it admits _ copycat strategies _ as identities : @xmath123 .",
    "if @xmath124 , the * current thread * of @xmath23 , denoted @xmath125 , is the subsequence of @xmath23 consisting of all moves hereditarily justified by the same initial move as the last move of @xmath23 .",
    "all strategies we are interested in will be _ single - threaded _ , _",
    "i.e. _ they only depend on the current thread .",
    "formally , @xmath104 is * single - threaded * if    * for all @xmath126 , @xmath85 points in @xmath127 , * for all @xmath128 such that @xmath129 and @xmath130 , we have @xmath131 .",
    "it is straightforward to prove that single - threaded strategies are stable under composition and that @xmath132 is single - threaded .",
    "hence , there is a category @xmath133 of arenas and single - threaded strategies .",
    "the category @xmath133 will be the base setting for our analysis .",
    "given arenas @xmath7 and @xmath8 , the arena @xmath134 defines a cartesian product of @xmath7 and @xmath8 and the construction @xmath80 extends to a right adjoint @xmath135 , hence @xmath133 is cartesian closed and is a model of simply typed @xmath1-calculus",
    ". it also has _ weak coproducts _ , given by the lifted sum @xcite .",
    "[ [ views - classes - of - strategies ] ] views , classes of strategies + + + + + + + + + + + + + + + + + + + + + + + + + + + +    in this paper , we are mainly interested in the properties of single - threaded strategies .",
    "however , to give a complete account of the context it seems necessary to mention several classes of strategies of interest in this setting .",
    "the most important one is certainly the class of _ innocent _ strategies , both for historical reasons and because it is at the core of the frequent definability results  and thus of the full abstraction results  in game semantics .",
    "their definition requires the notion of @xmath59-view , defined as usual by induction on plays as follows . @xmath136",
    "a strategy @xmath104 is then said to be * visible * if it always points inside its @xmath59-view , that is , for all @xmath126 the justifier of @xmath85 appears in @xmath137 .",
    "the strategy @xmath103 is * innocent * if it is visible , and if its behaviour only depends on the information contained in its @xmath59-view .",
    "more formally , whenever @xmath128 such that @xmath129 and @xmath138 , we must also have @xmath131 .",
    "both visibility and innocence are stable under composition @xcite , thus let us denote by @xmath139 the category of arenas and visible single - threaded strategies and by @xmath9 the category of arenas and innocent strategies .",
    "both categories inherit the cartesian closed structure of @xmath133 , but strategies in @xmath9 are actually nothing but abstract representation of ( @xmath11-long @xmath140-normal ) @xmath1-terms and form a fully complete model of simply - typed @xmath1-calculus .",
    "strategies in @xmath139 have more freedom , they correspond in fact to programs with first - order store @xcite .      [ [ interpretation ] ] interpretation + + + + + + + + + + + + + +    the three categories @xmath133 , @xmath139 and @xmath9 are categories of _ negative games _ ( in which opponent always plays first ) , and these are known to model call - by - name computation whereas @xmath0 is call - by - value . we could have modeled it using positive games , following the lines of @xcite . instead , we follow @xcite and model @xmath0 in the free completion @xmath142 of @xmath133 with respect to coproducts .",
    "this will allow us to first characterize isomorphisms in @xmath133 ( result which could be applied to a call - by - name language with state ) then deduce from it the isomorphisms in @xmath142 .",
    "in fact we will consider the completion @xmath141 of @xmath133 with respect to _ finite _ coproducts , since @xmath0 has only finite types .",
    "the objects of @xmath141 are finite families @xmath143 of arenas .",
    "a map from @xmath144 to @xmath145 is the data of a function @xmath146 together with a family of strategies @xmath147 .",
    "as shown in @xcite , the cartesian closed structure of @xmath133 extends to @xmath141 .",
    "moreover , the weak coproducts in @xmath133 give rise to a _ strong monad _ @xmath148 on @xmath141 . given families @xmath149 and @xmath150 , we define @xmath151 the singleton family @xmath152 is the terminal object of @xmath141 . by abuse of notation , we will still denote it by @xmath84 .",
    "the other components of the cartesian closed structure of @xmath141 and of the strong monad structure of @xmath148 follow naturally from these definitions .",
    "we skip the details , as all of this is already covered in @xcite .",
    "it is known that given a cartesian closed category with a strong monad , one can interpret call - by - value languages in the kleisli category of the monad @xcite , and the interpretation of @xmath0 in @xmath141 follows these lines .",
    "we interpret @xmath39 and @xmath153 as the families with respectively one and two elements whose components are all empty arenas .",
    "of course we also need to give an interpretation for @xmath154}$ ] , along with morphisms for the read and write operations of the reference cell .",
    "once again , we follow the lines of @xcite and consider the type @xmath154}$ ] as the product of its read and write methods , hence we set @xmath155 } \\rrbracket } = ( { \\llbracket a \\rrbracket } { \\rightarrow}t{\\mathbf{1 } } ) \\times t{\\llbracket a \\rrbracket}$ ] .",
    "the interpretation relies on the definition of a morphism @xmath156 } \\rrbracket}$ ] , that is , if @xmath157 , a strategy @xmath158 , where @xmath159 is the lift operation .",
    "apart from the initial protocol due to the lift , the strategy @xmath160 works by associating each read request with the latest write request and playing copycat between them . a more detailed description is given in @xcite , and an algebraic definition is obtained in @xcite . as proved in @xcite , this gives a sound interpretation of @xmath0 in @xmath161 .",
    "[ [ complete - plays - and - full - abstraction ] ] complete plays and full abstraction + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    a fully abstract model of @xmath0 is obtained by quotienting @xmath161 by the usual observational preorder . however , as is often the case with fully abstract game semantics of languages with store , it is _ effectively presentable _ : the observational preorder can be characterized directly .",
    "say a play @xmath124 is * complete * if it has as many questions and answers , _",
    "i.e. _ all questions have been answered .",
    "if @xmath103 is a strategy on an arena @xmath7 , then let us denote by @xmath162 the set of complete plays in @xmath103 .",
    "take @xmath163 two morphisms in @xmath161 , with @xmath164 and @xmath150 .",
    "then , @xmath103 and @xmath120 consist of families @xmath165 and @xmath166 .",
    "we then say that @xmath167 if and only if for all @xmath168 , @xmath169 .",
    "take now two terms @xmath25 and @xmath31 of type @xmath7 , and suppose @xmath170 .",
    "then @xmath171 and @xmath172 are morphisms from @xmath84 to @xmath173 in @xmath141 , _",
    "i.e. _ strategies on @xmath82 .",
    "given the full abstraction result of @xcite , it is then straightforward to prove the following equivalence : @xmath174 this concrete representation of the observational preorder will be central to our characterization of isomorphisms in @xmath0 .",
    "we are now going to extend laurent s tools @xcite to characterize isomorphisms of types for @xmath0 .",
    "we will first recall laurent s work in the visible and innocent cases , then extend it to characterize isomorphisms in @xmath133 .",
    "from there , we will switch to call - by - value and study the isomorphisms in @xmath141 , and in its kleisli category over @xmath148 .",
    "we start by giving the definition of ( a subtle adaptation of ) laurent s _ zig - zag _ plays .",
    "let @xmath175 be a legal play .",
    "it is * zig - zag * if    * each @xmath59-move following an @xmath58-move in @xmath7 ( resp . in @xmath8 ) is in @xmath8 ( resp . in @xmath7 ) , * a @xmath59-move in @xmath7 immediately follows an initial @xmath58-move in @xmath8 if and only if it is justified by it , * the ( not necessarily legal ) sequences @xmath176 and @xmath177 have the same pointers .",
    "if @xmath23 only satisfies the first two conditions , then it is * pre - zig - zag*.    by extension , we will say that a strategy @xmath103 is * pre - zig - zag * ( resp . * zig - zag * ) if all its plays are so .",
    "the core of laurent s theorem is then that all isomorphisms in @xmath139 are zig - zag strategies .",
    "his proof does rely on visibility , however it only gets involved to prove that the condition @xmath178 of zig - zag plays is satisfied .",
    "the first half of his argument does not use visibility and actually proves that all isomorphisms in @xmath133 are pre - zig - zag . here , being mainly interested in @xmath133 , we make this explicit .",
    "we need first the following lemma .",
    "let @xmath175 be a pre - zig - zag play , then there exists an unique pre - zig - zag @xmath179 such that @xmath180 and @xmath181 .",
    "we define @xmath182 by induction on @xmath23 ; @xmath183 , and @xmath184 .",
    "we keep the same pointers , except for the case where a move @xmath86 in @xmath7 was justified by an initial move @xmath85 in @xmath8 .",
    "then because of the pre - zig - zag condition on @xmath23 , @xmath86 is necessarily an initial move in @xmath7 and is set as the new justifier of @xmath85 in @xmath182 .",
    "there is no other possible @xmath182 , since the restrictions on @xmath7 and @xmath8 are constrained by the hypotheses and their interleaving is forced by the alternation and the pre - zig - zag conditions on @xmath182 .    if @xmath109 , @xmath185 form an isomorphism in @xmath133 , then they are pre - zig - zag and for all @xmath23 , @xmath186 .",
    "consider an isomorphism @xmath109 , @xmath185 in @xmath133 .",
    "we will prove by induction on even @xmath187 that all plays of @xmath188 whose length is less than @xmath189 are pre - zig - zag , and that moreover @xmath190 .",
    "if @xmath191 , this is trivial .",
    "otherwise , suppose this is true up to @xmath187 , and consider @xmath126 of length @xmath192 ; let us first prove condition ( 1 ) .",
    "without loss of generality , suppose @xmath67 .",
    "since @xmath193 , by a straightforward zipping argument we can build an interaction @xmath194 such that @xmath195 and @xmath196 , moreover since @xmath188 form an isomorphism we must have @xmath197 .",
    "now , we necessarily have @xmath198 , otherwise @xmath199 could be extended to @xmath200 with @xmath201 which is not a play of the identity , contradiction .",
    "hence @xmath202 satisfies condition @xmath203 of pre - zig - zag plays .    to see why it satisfies condition @xmath204 ,",
    "take @xmath205 with @xmath85 in @xmath8 and @xmath86 in @xmath7 .",
    "if @xmath85 is initial in @xmath8 , then @xmath86 necessarily points to it since @xmath103 is single - threaded .",
    "reciprocally , suppose @xmath86 points to an initial move in @xmath8 earlier than @xmath85",
    ". then we have @xmath206 , and by the same zipping argument as above we have an unique @xmath207 such that @xmath208 and @xmath209 .",
    "since @xmath188 form an isomorphism we also have @xmath210 .",
    "let us now extend @xmath199 to @xmath211 in the unique way such that @xmath212 and @xmath213 .",
    "note that we are sure that @xmath214 is a move on @xmath215 since @xmath216 is a play of @xmath120 of length @xmath192 and we already know that these satisfy the condition @xmath203 of pre - zig - zag plays .",
    "but we also have @xmath217 , hence @xmath218 points in @xmath182 as @xmath214 points in @xmath23 .",
    "this means that we have @xmath219 , such that @xmath86 is initial and @xmath85 points in @xmath182 , impossible since @xmath120 is single - threaded .",
    "hence @xmath220 satisfies condition @xmath204 of pre - zig - zag plays .",
    "we have proved that @xmath202 is pre - zig - zag , so @xmath221 is defined . by induction hypothesis @xmath206 and the same reasoning as above shows that it extends to @xmath222 .",
    "the argument is symmetric , hence @xmath223 .    for the sake of completeness , let us include laurent s argument which proves that isomorphisms in @xmath139 are zig - zag .    if @xmath109 , @xmath185 form an isomorphism in @xmath139 , then @xmath103 and @xmath120 are zig - zag strategies .",
    "we already know that @xmath103 and @xmath120 are pre - zig - zag strategies .",
    "we show by induction on @xmath224 that for all @xmath106 , if @xmath225 then @xmath176 and @xmath177 have the same pointers .",
    "take now @xmath106 , and @xmath105 , suppose w.l.o.g . that @xmath67 .",
    "suppose @xmath86 points to @xmath226 , then @xmath85 points to @xmath227 .",
    "indeed , it can not point to @xmath228 with @xmath229 since that would break visibility for @xmath103 .",
    "but if it points to @xmath228 with @xmath230 we use the same reasoning on the dual pre - zig - zag play @xmath221 and get a contradiction with the fact that @xmath120 is visible .",
    "let us denote by @xmath231 , @xmath232 and @xmath233 the groupoids of arenas and isomorphisms on the respective categories . in the next sections",
    ", we use these facts to give more combinatorial representations of @xmath231 , @xmath232 and @xmath233 .",
    "laurent s isomorphism theorem works by relating isomorphisms in @xmath133 with isomorphisms in a simpler category which has arenas as objects and _ _ forest morphisms _ _ , _ i.e. _ maps on moves that preserve initiality and enabling .",
    "relaxing the visibility conditions requires us to also consider relaxed notions of game morphisms , that we present here .",
    "let @xmath7 be an arena .",
    "a * path * on @xmath7 is a play @xmath124 such that except for the initial move , every move in @xmath23 points to the previous move .",
    "formally , for all @xmath234 , @xmath86 justifies @xmath85 in @xmath23 .",
    "let @xmath235 denote the set of paths on @xmath7 .",
    "a * path morphism * from @xmath7 to @xmath8 is a function @xmath236 such that @xmath237 and which preserves @xmath238 labeling : for all @xmath239 with @xmath240 , we have @xmath241 . there is a category @xmath242 of arenas and path morphisms .",
    "this category @xmath242 comes with its own notion of isomorphisms of arenas .",
    "note that whenever @xmath7 is a forest , this is exactly laurent s notion of forest isomorphism .",
    "we now introduce two weaker notions of morphisms for arenas . in",
    "what follows , let us call a legal play on @xmath7 with only one initial move a * thread * on @xmath7 , and denote the set of threads on @xmath7 by @xmath243 . likewise , let us call a pre - legal play with one initial move a pre - legal thread and let us denote these by @xmath244 .",
    "let @xmath7 , @xmath8 be arenas , and let @xmath245 we say that @xmath246 is a * sequential morphism * from @xmath7 to @xmath8 if @xmath237 , and if it preserves @xmath238 labeling , _ i.e. _ for all @xmath240 we have @xmath241 .",
    "we say that it is a * justified morphism * if , additionally , @xmath247 .",
    "there are two categories @xmath248 of arenas and sequential morphisms and @xmath249 of arenas and justified morphisms .",
    "as above , we will denote by @xmath250 , @xmath251 and @xmath252 the groupoids of invertible maps in @xmath248 , @xmath249 and @xmath242 .",
    "these groupoids will soon appear to be identical to @xmath231 , @xmath232 and @xmath233 . to prove this , we need the following lemma .",
    "let @xmath253 , and @xmath254 an isomorphism in @xmath133 .",
    "there is then an unique play @xmath255 such that @xmath256 .",
    "remark first that if @xmath109 and @xmath257 are inverses then they are both total , _",
    "i.e. _ for all @xmath106 and @xmath258 there must be @xmath85 such that @xmath126 , assuming it is not the case easily leads to a contradiction .",
    "we now prove the lemma by induction on @xmath23 .",
    "if @xmath259 , this is trivial .",
    "otherwise , suppose @xmath260 and we have by induction hypothesis @xmath255 such that @xmath256 .",
    "if @xmath86 is a @xmath59-move in @xmath7 ( hence an @xmath58-move in @xmath80 ) , there is an unique @xmath85 such that @xmath261 , and we do have @xmath262 . if @xmath86 is an @xmath58-move in @xmath7 ( hence a @xmath59-move in @xmath80 ) , then let @xmath185 be the inverse of @xmath103 , since @xmath255 we have @xmath263 .",
    "being part of an isomorphism @xmath120 is total , hence there is @xmath85 such that @xmath264 .",
    "we deduce from this that @xmath265 , and we have @xmath266 as needed .",
    "this choice is unique : if there is another play @xmath267 such that @xmath268 , then @xmath269 ( since @xmath90 is zig - zag ) . by induction hypothesis",
    "we have @xmath270 , thus @xmath271 . from this",
    "we deduce that @xmath272 , so @xmath273 by determinism of @xmath120 .",
    "if @xmath274 means that two groupoids @xmath275 and @xmath276 are _ isomorphic _",
    ", then we have : @xmath277    let us first define a functor @xmath278 .",
    "it is defined as the identity on arenas .",
    "let @xmath110 be an isomorphism , and let @xmath253 then we define @xmath279 , where @xmath280 is the unique play on @xmath80 which existence is ensured by the lemma above .",
    "the function @xmath281 commutes with @xmath92 since @xmath103 is a pre - zig - zag strategy . to any question",
    "it can not associate an answer , as that would immediately break well - bracketing on @xmath103 .",
    "but to any answer it can not associate a question , as that would immediately break well - bracketing on @xmath282 .",
    "then we define @xmath283 .",
    "it is obvious that @xmath284 preserves identities and composition .",
    "reciprocally , suppose @xmath285 is a sequential isomorphism .",
    "we mimic the usual definition of the identity by setting @xmath286 ( we apply @xmath246 on plays whereas it is normally only defined on _ threads _ , however it can be canonically extended to plays , so this is not ambiguous ) .",
    "it is obvious that this construction is functorial , and that it is inverse to @xmath284 .",
    "we have now an isomorphism @xmath287 which restricts naturally to @xmath232 and @xmath251 .",
    "indeed if @xmath109 is a visible isomorphism , it is a zig - zag strategy therefore @xmath253 and @xmath288 have the same pointers , which means that @xmath289 .",
    "reciprocally if @xmath281 is a justified morphism , all @xmath106 must be such that @xmath176 and @xmath177 have the same pointers , therefore @xmath103 , being pre - zig - zag , always points in its @xmath59-view .      in this section ,",
    "we use the framework described above to recall laurent s results .",
    "we have proved above that isomorphisms in @xmath139 correspond to isomorphisms in @xmath249 , which we are now going to compare with isomorphisms in @xmath242 .",
    "there is a full functor @xmath290 .",
    "we have built in the above section a full and faithful functor ( actually an isomorphism ) @xmath291 . from a visible isomorphism",
    "@xmath110 we set @xmath292 , where @xmath293 restricts a function @xmath294 to a subset @xmath295 of its domain .",
    "the image of a path by @xmath296 is always a path since it is a justified morphism , hence @xmath297 .    to see why @xmath298 is full , suppose we have a path morphism @xmath299 .",
    "then @xmath246 admits a canonical extension @xmath300 . to define @xmath301 we reason by induction on @xmath23 , and set @xmath302 and @xmath303 , where @xmath304 is the last move of @xmath305 , @xmath306 being the path of @xmath86 in @xmath23 .",
    "the move @xmath304 keeps the same pointer as @xmath86 .",
    "it is clear that this defines as needed a justified morphism @xmath307 such that @xmath308 .",
    "this ensures that arenas @xmath7 and @xmath8 are isomorphic in @xmath139 if and only if they are isomorphic in @xmath242 , _",
    "i.e. _ they are geometrically the same .",
    "let us mention that as laurent proved , this correspondence is one - to - one in the innocent case : one can prove that there is only one innocent zig - zag strategy corresponding to a particular path isomorphism , hence @xmath298 restricts to an isomorphism of groupoids @xmath309 .",
    "[ [ faithfulness - of - h ] ] faithfulness of @xmath298 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    note however that @xmath298 itself is _ not _ faithful , because we can exploit non - innocence to build non - uniform isomorphisms , _ i.e. _ isomorphisms which change their underlying path isomorphism as the interaction progresses . for an example , consider the arena @xmath310&q_2\\ar@{-}@/^/[ur]&a\\ar@{-}[u]\\\\ a\\ar@{-}[u]&a\\ar@{-}[u ] } } $ ] which is the interpretation of @xmath311 in call - by - value and of @xmath312 in call - by - name .",
    "consider now the strategy @xmath313 which behaves as follows .",
    "it starts by playing as the identity on @xmath7 .",
    "the first time opponent plays @xmath314 or @xmath315 on the left hand side , it simply copies it .",
    "starting from the second time opponent plays @xmath314 or @xmath315 though , it swaps them .",
    "an example play of @xmath97 is given in figure [ involution ] .",
    "although it is not the identity , @xmath97 is its own inverse .",
    "its image by @xmath298 only takes into account the first behaviour or @xmath97 , thus is the same as for @xmath132 : the identity path morphism on @xmath7 . from this strategy",
    "we can extract the following term @xmath316 of @xmath0 , where @xmath317 .",
    "@xmath318    @xmath319      &            &            & a               & \\\\              &            &            &            &                & q\\\\              &            & q\\ar@{-}@/^/[urrr ] &            &                & \\\\ q_1\\ar@{-}@/^/[urr ] &            &            &            &                & \\\\              &            &            & q_1\\ar@{-}@/^/[uuurr ]   &                & \\\\ q_1\\ar@{-}@/^/[uuurr ]    &            &            &            &                & \\\\              &            &            &            & q_2\\ar@{-}@/^/[uuuuur ]      & \\\\              & q_2\\ar@{-}@/^/[uuuuur ] &            &            &                & \\\\              &            &            & q_1\\ar@{-}@/^/[uuuuuuurr ] &              & } \\ ] ]    although @xmath25 is not the identity it is an involution on @xmath8 , _",
    "i.e. _ we have @xmath320 .",
    "such non - trivial involutions can not be defined using only purely functional behaviour .",
    "we give in figure [ groupoids ] a summary of all the groupoids of isomorphisms encountered for the moment , along with their relations .",
    "following it , the question of finding the isomorphisms in @xmath133 boils down to the definition of an arrow from @xmath250 to @xmath252 in this diagram , which is what we will attempt in the next two subsections .",
    "@xmath321^{\\text{iso } }          \\ar[d]^{\\subseteq }       & & { \\mathbf{path}}_i\\\\ { \\mathbf{vis}}_i   \\ar[r]^{\\text{iso } }          \\ar[d]^{\\subseteq }       & { \\mathbf{jus}}_i \\ar[ur]^{\\text{full}}_{\\text{(not faithful)}}\\ar[dr]^{\\subseteq}\\\\ { \\mathbf{gam}}_i   \\ar[rr]^{\\text{iso}}&&{\\mathbf{seq}}_i     \\ar@{.>}[uu ] _ { ? } } \\ ] ]      we have seen above that we can build a full functor @xmath322 , which allows to characterize isomorphic arenas in @xmath139 .",
    "however , this construction relies heavily on visibility .",
    "we now investigate how to get rid of it and prove that two arenas @xmath7 and @xmath8 are isomorphic in @xmath133 if and only if they are isomorphic in @xmath242 . in this subsection , we will describe for pedagogical reasons an intuitive approach to the proof , which relies on counting .",
    "however this approach suffers from some defects , hence the full proof ( described in the next subsection ) will follow slightly different lines .    if @xmath67 , let us call its * arity * the quantity @xmath323 . on pre - threads",
    "@xmath253 we define : @xmath324 if @xmath253 , @xmath325 is also the number of ways @xmath23 can be extended to some @xmath326 ( let us recall here that as a member of @xmath244 , @xmath23 need not be alternating ) : the choice of a justifier @xmath327 plus a move enabled by @xmath327 . these definitions allow to express the following observation .",
    "if @xmath109 is an isomorphism ( thus a pre - zig - zag strategy ) and @xmath106 , then @xmath328 , because @xmath103 being an isomorphism , it must associate each possible extension of @xmath176 to an unique extension of @xmath177 .",
    "but this also means that if @xmath126 we have @xmath329 , hence @xmath330 .",
    "thus to each move @xmath86 , @xmath103 must associate a move with the same arity .",
    "this is a step in the right direction , but we would like a deeper connection between @xmath86 and @xmath85 .    if @xmath67 , we will use the notation @xmath331 . let us define by induction on @xmath189 the notion of a @xmath189-isomorphism between @xmath67 and @xmath198 . for any @xmath67 and @xmath198",
    "there is automatically a @xmath83-isomorphism @xmath332 .",
    "a @xmath333-isomorphism from @xmath86 to @xmath85 is the data of an isomorphism @xmath334 along with , for all @xmath335 , a @xmath189-isomorphism @xmath336 .",
    "we use the notation @xmath337 to denote the fact that there is a @xmath189-isomorphism from @xmath338 to @xmath339 . in other words",
    ", we have @xmath340 if the tree of paths of length at most @xmath189 starting form @xmath338 is tree - isomorphic to the tree of paths of length at most @xmath189 starting from @xmath339 . if @xmath341 , @xmath342 is a @xmath343-isomorphism and @xmath344 is a @xmath345-isomorphism , we say that @xmath342 is a prefix of @xmath344 if they agree up to depth @xmath343 .",
    "note that in particular we have @xmath346 if and only if @xmath347 , so @xmath337 is indeed a generalization of @xmath347 .",
    "by induction on @xmath189 , one can then prove that @xmath103 must always associate to each move @xmath338 a move @xmath339 such that @xmath337 : to prove it for @xmath348 , just apply the counting argument above on @xmath349-equivalence classes .",
    "from all these @xmath189-isomorphisms , one can then deduce the existence of a path isomorphism between @xmath7 and @xmath8 .",
    "this counting argument has several unsatisfying aspects , which are caused by the implicit use of the following lemma .",
    "suppose @xmath295 and @xmath350 are finite sets , and that @xmath351 and @xmath352 are isomorphisms .",
    "then there is an isomorphism @xmath353 .",
    "[ slicing_isos ]    the obvious proof of this lemma is by cardinality reasons .",
    "however this proof is , computationally speaking ,  almost non - effective \" , in the sense that the isomorphism it produces implicitly depends on the choice of a total ordering for @xmath354 and @xmath284 .",
    "a consequence of that is that from any isomorphism in @xmath133 we will extract an isomorphism in @xmath242 , but we can not hope its choice to be canonical , for any reasonable meaning of  canonical \" .",
    "even worse , the witness isomorphisms given by this proof for @xmath349 and @xmath355 need not agree together .",
    "this implies that for infinitely deep arenas , one requires knig s lemma to actually build a path isomorphism from a game isomorphism .",
    "this means that we can not deduce from the proof above an algorithm to extract path isomorphisms .      to obtain a more computationally meaningful extraction of a path iso from a game iso ,",
    "we must replace the proof of lemma [ slicing_isos ] by something else than counting . as formalized in the following proof ,",
    "the idea is to remark that given the data of lemma [ slicing_isos ] , starting from @xmath356 , the sequence @xmath357 must eventually reach @xmath358 , as illustrated in figure [ fig_slicing ] , yielding a bijection between @xmath359 and @xmath358 .        if @xmath360 is a sequential play isomorphism , then for all @xmath361 with @xmath240 , there is a family @xmath362 such that for all @xmath189 , @xmath363 is a @xmath189-isomorphism from @xmath86 to @xmath85 .",
    "this family is _ coherent _ , in the following sense : if @xmath341 , @xmath364 is a prefix of @xmath365 .",
    "we will use the following notations .",
    "if @xmath253 , @xmath366 will be the set of atomic extensions of @xmath23 , that is of plays @xmath260 , and @xmath367 will be the set of atomic extensions of @xmath368 .",
    "for all plays @xmath260 , although strictly speaking @xmath366 is _ not _ a subset of @xmath369 , we have the following decomposition : @xmath370 indeed , a move extending @xmath326 can either point to some @xmath327 or to @xmath86 .",
    "note also that for any @xmath23 , @xmath371 induces an isomorphism @xmath372 from @xmath366 to @xmath367 .    for all @xmath253 and @xmath373",
    ", we follow the reasoning illustrated in figure [ fig_slicing ] and consider a bipartite directed graph @xmath374 defined as follows : its set of vertices is @xmath375 and its set of edges is @xmath376 .",
    "this graph is  deterministic \" , in the sense that the outwards degree of each vertex is at most one , moreover the only vertices whose outwards degree is @xmath83 are those of @xmath377 ( where @xmath378 , so @xmath379 )",
    ". moreover @xmath374 must be acyclic , since @xmath380 and @xmath381 are isomorphisms .",
    "thus from any vertex in @xmath382 , there is an unique path in @xmath383 leading to a vertex in @xmath377 ; this induces an isomorphism @xmath384 . for each pair",
    "@xmath385 we also keep track of the corresponding path @xmath386 .",
    "it is now time to build the @xmath189-isomorphisms , by induction on @xmath189 . for @xmath191",
    "this is obvious . for fixed @xmath387 , by induction hypothesis",
    "there is for each @xmath260 with @xmath240 a @xmath189-isomorphism @xmath363 from @xmath86 to @xmath85 . in particular , for fixed @xmath260 , consider the graph @xmath374 .",
    "each of its edges of the form @xmath388 are now labeled by the @xmath189-isomorphism @xmath389 and all its edges of the form @xmath390 are labeled by @xmath391 . for each pair",
    "@xmath385 we can now compose the labels along the path @xmath392 and get a @xmath189-isomorphism @xmath393 .",
    "we then define @xmath394 which is as needed a @xmath333-isomorphism from @xmath86 to @xmath85 .",
    "note finally that if @xmath341 , @xmath395 is a prefix of @xmath365 .",
    "this is proved by simultaneous induction on @xmath343 and @xmath345 .",
    "if @xmath396 this is obvious . otherwise , it relies on the fact that the graph @xmath374 does not depend on @xmath189 .",
    "hence @xmath397 and @xmath398 , and each @xmath399 has be obtained from @xmath343-isomorphisms in the same way as @xmath400 has been obtained from @xmath345-isomorphisms , so it immediately boils down to the induction hypothesis .",
    "two finitely branching arenas @xmath7 and @xmath8 are @xmath133-isomorphic if and only if they are @xmath242-isomorphic .",
    "[ main ]    consider an isomorphism @xmath110 in @xmath133 .",
    "restricted on plays with only two moves , it gives an isomorphism @xmath401 . by the previous proposition ,",
    "there is for each @xmath402 and for each @xmath187 a @xmath189-isomorphism @xmath403 .",
    "additionally , all these @xmath189-isomorphisms are compatible with each other , so they converge to an @xmath404-isomorphism @xmath405 .",
    "the iso @xmath406 together with @xmath407 for all @xmath97 define a path isomorphism from @xmath7 to @xmath8 .    [ [ canonicity ] ] canonicity + + + + + + + + + +    for each pair of arenas @xmath408 , we have built a function @xmath409 .",
    "the natural question is then whether , like in the other cases , this function defines a full functor .",
    "unfortunately the answer is no , in fact @xmath410 is not even functorial .",
    "indeed , the construction is based on the more explicit proof of lemma [ slicing_isos ] illustrated in figure [ fig_slicing ] , which is not functorial ; one can find sets @xmath295 , @xmath350 and @xmath411 and isomorphisms @xmath412^{f } & f\\ar[r]^{g } & g}$ ] and @xmath413^{f ' } & f'\\ar[r]^{g ' } & g'}$ ] such that @xmath414 . from this",
    "it is not hard to find a counter - example to the functoriality of @xmath410 .",
    "it is a bit lengthy to describe it properly though , so we do not include it .",
    "although not being a functor , @xmath415 does satisfy some canonicity property : its result is invariant under renaming of moves in @xmath7 and @xmath8 . in other terms",
    ", @xmath416 is natural in @xmath7 and @xmath8 , if both @xmath417 and @xmath418 are seen as bifunctors from @xmath419 to @xmath420 ( using implicitly the faithful functor from @xmath252 to @xmath231 of figure [ groupoids ] ) .",
    "our isomorphism theorem most naturally applies to @xmath133 ( so to call - by - name languages ) , but @xmath0 is modeled in @xmath141 , and more precisely in the kleisli category of the strong monad @xmath148 , so we have to check how our result extends to this .",
    "let us first relate isomorphisms in @xmath161 and isomorphisms in @xmath133 using the following lemma .",
    "let @xmath421 and @xmath422 , then isomorphisms between @xmath7 and @xmath8 in @xmath161 are in one - to - one correspondence with pairs @xmath423 where @xmath424 is a bijection and each @xmath425 is an iso in @xmath133 .",
    "[ analysis_isos ]    imagine @xmath426 and @xmath427 are morphisms in @xmath141 that form an isomorphism in @xmath161 .",
    "here @xmath7 and @xmath8 are families of arenas , so @xmath421 , and @xmath428 with @xmath429 .",
    "similarly , we have @xmath422 and @xmath430 .",
    "then , first note that @xmath431 and @xmath432 necessarily first give an answer to the initial opponent move in @xmath148 , _",
    "i.e. _ the initial question of the lifted sum in @xmath433 and @xmath434 . indeed take @xmath168 , and consider @xmath435 , where @xmath436 is the _ lifting _ of @xmath437 .",
    "this morphism must be a component of the identity on @xmath7 in @xmath161 since @xmath438 form an iso .",
    "in particular , it does directly answer the initial move in @xmath148 .",
    "however , by definition of @xmath436 it is _ strict _ , _ i.e. _ it directly interrogates the left occurrence of @xmath148 , so @xmath431 must necessarily first answer the initial move in @xmath148 otherwise we would immediately get a contradiction .",
    "this means that each @xmath431 must first choose a component @xmath439 ( thus inducing a function @xmath424 ) , then play as @xmath440 .",
    "the same analysis on @xmath120 provides a function @xmath441 and strategies @xmath442 , and it is then obvious that since @xmath188 form an isomorphism @xmath443 must be inverse of @xmath406 and each @xmath444 inverse of @xmath445 .    [",
    "[ syntactic - characterization ] ] syntactic characterization + + + + + + + + + + + + + + + + + + + + + + + + + +    let us prove now that the equational theory @xmath10 given in figure [ equational_theory ] characterizes the types @xmath7 and @xmath8 such that @xmath446 and @xmath447 are isomorphic in @xmath161 .",
    "any type @xmath7 has an unique representative ( up to @xmath448 ) generated by the non - terminal @xmath449 in : @xmath450    straightforward .",
    "if @xmath446 and @xmath447 are isomorphic in @xmath161 , then @xmath451 .",
    "[ equational_isos ]    by induction on their normal forms . for types generated by @xmath449",
    "take @xmath452 and @xmath453 . by lemma [ analysis_isos ]",
    "we have @xmath454 ( since @xmath455 and @xmath456 , generated by @xmath148 , must be singletons ) and we still have @xmath457 .",
    "the case of types generated by @xmath148 and @xmath458 is direct .    for any types @xmath408 of @xmath0",
    "whose interpretation give families @xmath459 and @xmath460 the following propositions are equivalent :    * @xmath461 * @xmath462 * @xmath463 * @xmath451    @xmath464 by soundness and by definition of type isomorphisms in @xmath0 , @xmath465 because the arenas are complete , hence every play of the identity is a prefix of a complete play of the identity , so any isomorphism @xmath466 such that @xmath467 must satisfy @xmath468 . but as isomorphisms both are total strategies , so @xmath469 .",
    "@xmath470 by proposition [ equational_isos ] .",
    "finally , @xmath471 because equations in @xmath10 can be implemented in the syntax of @xmath0 .",
    "as suggested by the importance of counting in the proof , the presence of @xmath472 makes it possible to build a non - trivial isomorphism by playing hilbert s hotel .",
    "consider the programming language @xmath14 from @xcite , obtained from @xmath0 by replacing @xmath153 with @xmath472 .",
    "this language has a fully abstract interpretation in @xmath473 , where @xmath474 is the category of not necessarily finitely branching arenas , and single - threaded strategies .",
    "there is an isomorphism in @xmath475 between @xmath476 and @xmath477 .",
    "[ prop_iso ]    by definition of the interpretation of types , this boils down to an isomorphism in @xmath474 between the two arenas represented in figure [ isoar ] .",
    "informally , the isomorphism from left to right can be described as follows . as long as @xmath478 has not been played",
    ", it behaves as the identity . whenever opponent plays @xmath478",
    ", it copies it to the other side . then if @xmath478 has only appeared once , there are two available copies of @xmath479 on the left side , one @xmath479 and one @xmath480 on the right side , so player picks a bijection between @xmath481 and @xmath482 and plays accordingly . more generally , if @xmath478 has appeared @xmath339 times , there are exactly @xmath483 available copies of @xmath479 on the left hand side , one copy of @xmath479 and @xmath339 copies of @xmath480 on the right hand side , so player has to follow a bijection between @xmath484 and @xmath485 .",
    "so any choice of a bijection between @xmath484 and @xmath485 ( for all @xmath224 ) will provide an isomorphism .",
    "these strategies are not compact so the definability theorem does not apply , however we can nonetheless manually extract corresponding programs from them .",
    "we display them in figure [ coolisos ] , where @xmath487 denotes the product operation on natural numbers , and @xmath488 outputs the result of the division algorithm on @xmath489 and @xmath490 .",
    "unfortunately , these terms are too complex to hope for a reasonably - sized direct proof that their interpretations give the strategies described above or even that they form an isomorphism .",
    "this kind of difficulty emphasizes the need for new algebraic methods to manipulate and prove properties of imperative higher - order programs .",
    "@xmath491    @xmath492",
    "we solved laurent s conjecture and characterized the isomorphisms of types in @xmath0 .",
    "surprisingly , we realized that the combination of higher - order references , natural numbers and call - by - value allowed to define new non - trivial type isomorphisms .",
    "note however that if well - bracketing is satisfied , the proof of our core game - theoretic theorem adapts directly to arenas where all moves only enable a finite number of questions , but an arbitrary numbers of answers . as a consequence ,",
    "there are no non - trivial isomorphisms ( _ i.e. _ not already present in the @xmath1-calculus ) in the call - by - name variant of @xmath14 , although we can define one using ` call`/`cc ` .",
    "note that despite the seemingly restricted power of @xmath0 , our theorem does apply to all real - life programming languages that have a bounded type of integer , such as @xmath493 or @xmath494 : in this setting , no non - trivial isomorphism can exist .",
    "however unbounded natural numbers can be defined using recursive types , so the isomorphism above can be implemented in a call - by - value programming language with recursive types and general references , such as ocaml .",
    "this work can be extended in several different ways .",
    "an obvious possibility is to study isomorphisms in the presence of sum types , since the model is already equipped to handle them .",
    "we could also try to eliminate bad variables .",
    "murawski and tzevelekos games model @xcite of reduced ml may be a good setting to try that , however it is not clear whether our core results can be reproved in their nominal setting .",
    "_ acknowledgments .",
    "_ we would like to thank guy mccusker for interesting discussions on the games models for state and for his help to get a term from the strategy described in proposition [ prop_iso ] , and the anonymous referees for their useful comments and suggestions .",
    "we also would like to acknowledge the support of ( uk ) epsrc grant rc - cm1025 .",
    "samson abramsky and guy mccusker .",
    "call - by - value games . in mogens",
    "nielsen and wolfgang thomas , editors , _",
    "6th annual conference of the european association for computer science logic _ ,",
    "volume 1414 of _ lecture notes in computer science_. springer , 1998 .",
    "frank atanassow and johan jeuring . inferring type isomorphisms generically . in dexter kozen and carron",
    "shankland , editors , _ mpc _ , volume 3125 of _ lecture notes in computer science _ , pages 3253 .",
    "springer , 2004 .",
    "gilles barthe and olivier pons .",
    "type isomorphisms and proof reuse in dependent type theory .",
    "in furio honsell and marino miculan , editors , _ fossacs _ , volume 2030 of _ lecture notes in computer science _ , pages 5771 .",
    "springer , 2001 .",
    "guy mccusker .",
    "games and full abstraction for a functional metalanguage with recursive types . , imperial college , university of london , 1996 . published in springer - verlag s",
    "distinguished dissertations in computer science series , 1998 ."
  ],
  "abstract_text": [
    "<S> we investigate the problem of type isomorphisms in a programming language with higher - order references . </S>",
    "<S> we first recall the game - theoretic model of higher - order references by abramsky , honda and mccusker . solving an open problem by laurent , </S>",
    "<S> we show that two finitely branching arenas are isomorphic if and only if they are geometrically the same , up to renaming of moves ( laurent s forest isomorphism ) . </S>",
    "<S> we deduce from this an equational theory characterizing isomorphisms of types in a finitary language @xmath0 with higher order references . </S>",
    "<S> we show however that laurent s conjecture does not hold on infinitely branching arenas , yielding a non - trivial type isomorphism in the extension of @xmath0 with natural numbers . </S>"
  ]
}