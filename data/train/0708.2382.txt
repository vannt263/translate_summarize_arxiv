{
  "article_text": [
    "simulations are an integral part of experimental programs associated with scattering experiments and particle accelerators . such studies are required both in order to understand the properties of experimental setups ( e.g. reaction - dependent acceptances of various types of detectors ) , as well as to gain insight into the processes of interest , so that relevant experiments may be optimized and experimental spectra may be interpreted .    in a first step of such a simulation",
    "the primary reaction has to be described , which means that a number of particle tracks ( lorentz vectors ) are generated .",
    "these tracks form the events , which are further processed through a digitization package in order to get the secondary particles coming from the interactions of the particles with the detector material .",
    "in such a way , the response of a detector system for a certain event topology can be studied . by adding realistic background ,",
    "the sensitivity of a detector array on a specified process can be verified , which is normally done before carrying out the experimental run .",
    "several different models have to be included in the event generator , either to describe the reactions which are under study , or a number of background channels .",
    "but event generators are also very useful after data have been taken and should be interpreted . here , the caveat is that the degrees of freedom of a reaction are correlated .",
    "moreover , the efficiency and acceptance of experimental setups are functions of all phase space parameters . due to energy and momentum conservation , this has in particular a large effect in exclusive reactions . by projecting the multi - dimensional result of the experiment to the observable quantities under study , and correcting this result for acceptance without a detailed knowledge of the detector performance and",
    "the included physics of the hidden degrees of freedom , the resulting interpretation might be artificially changed .",
    "this immediately leads to the conclusion that the observable quantities which are already well known have to be included into event generators in order to address the remaining open questions .",
    "therefore , each event generator should be adapted to the physics program for the corresponding experiments .",
    "a particular challenge for the generation of events is the theory of the quantum chromo dynamics ( qcd ) , since its coupling constant @xmath6 strongly depends on the momentum transfer : in high momentum transfer experiments partonic degrees of freedom can be studied , whereas in low momentum transfer experiments the hadrons itself can be treated as effective particles .    for certain fields in the qcd ,",
    "specified event generators are already existing .",
    "we will not go through the complete list , a review on high - energy event generators , including the description of the hard interactions of partons , matrix element generators and hadronization packages can be found in  @xcite .",
    "for the hadronization part , which comes closer to the experiments studying hadronic interactions , pythia  @xcite is one of the frequently used packages .",
    "in addition , the evtgen  @xcite package was developed for the production of b - mesons , which has a user - friendly decay model interface and thus includes a large number of decay processes .",
    "however , in the context of hadronic interactions at lower energies comprehensive event generators are lacking .    the package `` pluto ''",
    "@xcite presented in this report is geared towards elementary hadronic as well as heavy - ion induced reactions at intermediate to moderately high energies , mainly motivated by the physics program of the hades  @xcite experiment , which is installed at the sis synchrotron of the gsi .",
    "as the hades experiment has published the first data and successfully finished various experimental runs , the need for realistic and detailed simulations is evident and growing .",
    "pluto is an available , standardized and efficient tool that facilitates such simulations .",
    "moreover , it can be adapted and integrated into simulation environments for other experiments .",
    "in particular it has been used for the simulations in the context of the planned cbm experiment  @xcite which is going to be operated at the new fair facility .",
    "starting from the basic philosophy , that an event generator has to fulfill different tasks during the life - time of an experiment , the pluto framework was designed to have a standard user - interface allowing for quick studies , but can be changed on the other hand in such a way to include sophisticated new models , including coupled channel approaches as well as interferences between various channels .",
    "this report is structured in the following way : first , we give an overview of the desired calculations for the physics of hadronic interactions at low energies .",
    "one of the main features , namely the mass - dependent widths of the resonances , is described in sec .",
    "[ physics ] .",
    "in addition , the mass sampling of the virtual photons and their decay into @xmath7 will be discussed in sec .",
    "[ dileptons ] . in sec .",
    "[ angular ] , the angular correlation parameterizations and multi - particle correlations are shown , which have been utilized for selected processes . the thermal model , used in the hades heavy - ion program  @xcite ,",
    "is explained in sec .",
    "[ thermal ] . in a second part",
    "we go more into the technical realization of the package and show the user interface for event production , starting from some simple examples up to the level of generating cocktails in sec .",
    "[ interface ] .",
    "finally , in sec .",
    "[ customization ] the internal structure of pluto is described , whose features allow for the extension of the included data base and the introduction of user - defined models .",
    "an important effect that must be taken into account for realistic simulations of hadronic interactions at low energies is the deviation of resonance shapes from fixed - width breit - wigner distributions , which is typically modeled as a mass - dependence in the resonance width .",
    "this is particularly important for resonances with large widths ( i.e. predominantly strongly decaying ) , such as the @xmath8 , @xmath9 , @xmath10 and @xmath11 resonance excitations for which the effect is largest .",
    "the next few subsections discuss the formalism behind the calculation of partial and total widths done in the pluto code .",
    "following the usual ansatz ( see e.g.  @xcite ) we use the relativistic form of the breit wigner distribution : @xmath12 where @xmath13 denotes the running unstable mass , and @xmath14 is the static pole mass of the resonance .",
    "the mass - dependent width depends on the partial widths : @xmath15 with @xmath16 the number of decay modes .",
    "the factor @xmath17 has been chosen such that the integral is statistically normalized ( @xmath18 ) .",
    "( [ eqn : breit_wigner ] ) is used between a minimum @xmath19 and maximum mass @xmath20 which is set for each particle individually in the data base , thus avoiding to sample masses which are extremely off - shell .",
    "this range is @xmath21 $ ] by default , but the limits can be changed by the user .      for those decay modes for which dedicated models are existing in pluto , the decay width @xmath22 is calculated explicitly as a function of mass .",
    "alternatively , they may be added by the user of the package , as described in sec .",
    "[ customization ] .",
    "the included breit - wigner model is interfacing to these decay models via a strictly object - oriented design .",
    "this makes sure to have always a self - consistent result .",
    "the known decay modes have an implicit energy threshold , below which their respective decay widths vanish .",
    "this can be deduced in 2 ways : the lowest invariant mass @xmath23 needed for each decay mode `` k '' is always the sum of the stable particle masses in the final state ( i.e. after all decays ) .",
    "this is implemented by a recursive call of all involved nested decays until stable particles are reached , and taking the lowest available mass sum as the invariant mass threshold @xmath23 , which ensures e.g. that calculated mass - dependent partial widths are zero below the threshold .    for those modes , which have no dedicated model",
    ", the fixed static partial width is used between the mass threshold @xmath23 ( or the minimum mass @xmath24 of the decay parent if larger ) and the maximum mass @xmath25 of the decay parent .",
    "this leads the the following condition for the mass - dependent branching ratio : @xmath26 in a second step , eqn .",
    "( [ eqn : width_sum ] ) is used with @xmath27 to check the partial widths at the mass pole where in many cases the branching ratios are defined , and scale each partial width model such that it matches this condition at the mass pole .    in selected cases it is not useful to define the branching ratio sharply at the mass pole , but as the total fraction of the integrated yield @xmath28 .",
    "this is in particular needed when particle production occurs at or above the mass pole of the parent .",
    "such an example is the decay mode @xmath29 which has been seen , but the branching ratio is only known with an upper limit and thus it is impossible to fix the partial width at the mass pole . by combining eqn  [ eqn : br ] with the normalized distribution function  [ eqn : breit_wigner ] , the static branching ratio can be recalculated as the integral of the weight folded with the mass - dependent branching ratio : @xmath30 and combined with the total normalization the partial decay width can be rewritten as : @xmath31 the mass - dependent branching ratios used in the breit - wigner eqn .",
    "[ eqn : breit_wigner ] result in asymmetric mass spectra shapes , but the eqns .",
    "( [ eqn : scbr]-[eqn : scpw ] ) give some constraints which are checked during the initialization .",
    "since they contain the distribution functions @xmath32 which are based originally on eqn .",
    "( [ eqn : width_sum ] ) and thus all decay widths , this is done iteratively until all required conditions ( the total normalization as well as the chosen branching ratio definition ) are fulfilled or a break condition has been reached , which serves as a self - consistent calculation .",
    "the majority of well - established resonance hadronic decays involve channels with two decay products , whereas multi - product decay modes might considered to be the outcome of a series of successive two - body decays through intermediate resonances  @xcite .",
    "this is also the approach taken in pluto , where two - body hadronic decay widths are calculated explicitly .",
    "this width is derived from a well - known ansatz  @xcite , which has been established in particular for the @xmath33-resonance  @xcite : @xmath34 where the subscript r in general refers to resonance observables corresponding to the static mass pole for the decay mode in hand , which for the @xmath9-resonance e.g. are @xmath351.232  gev / c@xmath1 and @xmath36  mev , whereas un - subscripted variables refer to the corresponding actual - mass observables .",
    "the dependence on the two decay products with the masses @xmath37 and @xmath38 enters via the terms @xmath39 and @xmath40 , namely the ( equal in absolute value ) momenta of one out of the two decay products in the rest frame of the parent resonance r. in the case of two stable products , the masses @xmath37 and @xmath38 are directly related to the decay mode `` k ''",
    ".    for the @xmath33-resonance , calculating the decay width is a simple matter since its decay strength is essentially exhausted in the @xmath41 channel ( branching ratio>99% ) .",
    "this means , that @xmath42 coincides with the total width .",
    "the pion and nucleon masses @xmath43 may be considered fixed for all purposes , since the pion has no strong decay modes and its width has a negligible effect in eqn .",
    "( [ eqn : width_monitz ] ) .",
    "in general , for arbitrary resonances other than the @xmath33-resonance , @xmath44 refers to the decay width of the parent resonance with mass equal to the mass pole via the decay mode specified by the identity of the two decay products and the transition angular momentum .",
    "the dependence on the decay mode enters via the angular momentum transfer in the @xmath45 exponent of the ratio @xmath46 in eqn .",
    "( [ eqn : width_monitz ] ) , with @xmath47 the transferred orbital angular momentum for the resonance decay . in the case of the @xmath9-resonance , which is almost entirely in @xmath48-wave , @xmath47 is equal to 1 .",
    "however , the transfer angular - momentum dependence is in general a non - trivial matter , since several multi - poles may be interfering .",
    "nonetheless , data are sparse to non - existent for high multi - pole transitions , and it is generally a reasonable approximation to treat the decay width as entirely due to the lowest - allowed multi - pole .",
    "this has been done on the basis of angular - momentum coupling and parity considerations  @xcite .",
    "variants of eqn .",
    "( [ eqn : width_monitz ] ) are also encountered in the literature , particularly with regard to the expression in the right - most bracket that represents the effective cutoff .",
    "we follow ref .",
    "@xcite which uses for the resonance the cutoff parameterization of ref .",
    "@xcite , with @xmath49 and the parameter @xmath50=300  mev for @xmath33 and mesons decays , among with the phase space factor : @xmath51 for higher baryon resonances , the parameterization @xmath52 has been applied .",
    "the greatest complication , however , which arises in the general case of a resonance decay with either or both of the decay products unstable , is due to the fact that the product masses are in general not fixed as in the case of the @xmath33 resonance , but can take values from a distribution function .    in ref .",
    "@xcite and elsewhere few specific cases , with one of the decay products unstable but decaying to stable products and the other with fixed mass , are treated explicitly . in general , calculating the decay width when both the decay products are unstable hadrons , or with arbitrarily many embedded decays , is a rather complicated matter . in pluto ,",
    "these cases are treated explicitly , making it possible to calculate realistic spectral functions for heavy @xmath10 resonances with multiple decay modes and a large `` depth '' , i.e. nested unstable hadron decays .",
    "this is done as follows : let us first consider the case @xmath53 where one of the decay products ( say the first ) is an unstable hadron and the other has a fixed mass ( @xmath38 ) .",
    "the decay width becomes : @xmath54 where we have introduced the dependence on the product masses explicitly in @xmath55 .",
    "the product of the daughters mass shape @xmath56 ) , which is the breit - wigner eqn .",
    "[ eqn : breit_wigner ] , with the momentum @xmath57 of one selected product in the rest frame of the parent particle introduces the product - mass dependence explicitly .",
    "it works as the effective distribution function for the mass variable @xmath37 , and weighs properly the contribution of each combination of product masses with the corresponding decay width @xmath55 .",
    "the momentum term acts as a phase space factor and is effectively a cutoff which guarantees a smooth falloff at the kinematical limit  @xcite .",
    "this expression is generalized in the case of two unstable hadrons : @xmath58 where the breit - wigner shape of the second unstable hadron is accounted for as well .",
    "( [ eqn : m1_width ] , [ eqn : m2_width ] ) must be normalized , namely the probability distribution must be integrated over the full range of validity .",
    "the normalization factor is obtained by removing @xmath59 from eqns .",
    "( [ eqn : m1_width ] , [ eqn : m2_width ] ) and evaluating the remaining integral which includes all distribution functions folded with the 2-body phase space factor @xmath60 .",
    "subsequently , corresponding normalization factors are divided out . for an unstable particle",
    "the mass range is defined in such a way that the sampling function @xmath32 in the sampling procedure takes values from its mass pole @xmath61 down to @xmath62 which avoids numerical instabilities and shows the correct behavior in the limit of small widths .",
    "the step function @xmath63 is used to fulfill energy conservation .",
    "an example of the calculations described above can be seen in fig .",
    "[ fig : n1535_partial_contribution ] . here , the @xmath64 is shown with selected contributions of partial decays .",
    "obviously , already the existence of the @xmath65 decay channel build structures in the @xmath41 exit channel .",
    "consequently , when simulating the reaction @xmath66 , this structure should be observed in the @xmath41 invariant mass .",
    "this is indeed an important feature of the simulation involving broad resonances : the decay modes can not be treated independently but should be rather combined in a coupled - channel calculation .    in the case of three decay products , the static , rather than mass - dependent widths and branching",
    "ratios from the data base are used .      for the decay sampling actually the breit - wigner distribution @xmath32 as given in eqn .",
    "( [ eqn : breit_wigner ] ) is convoluted with a phase - space factor for the sampling of the mass of an unstable hadron @xmath67 in a decay @xmath68 where @xmath69 is the parent resonance and @xmath70 is a stable hadron : @xmath71 assuming that @xmath72 ( the mass of the parent resonance ) has been obtained before by a sampling method on its distribution function @xmath73 .",
    "this is not a trivial matter : when sampling the parent resonance , in principle the decay products should be known in order to sample the correct shape as discussed in the previous subsection .",
    "this has the further consequence that in eqn .",
    "( [ eqn : m1_mass ] ) the distribution @xmath74 has to be replaced by @xmath75 if particle @xmath67 is unstable and will decay via a consecutive channel `` k '' ( just assume e.g. that @xmath67 is the @xmath64 but the decay into @xmath41 should be considered as shown in fig .",
    "[ fig : n1535_partial_contribution ] ) . consequently @xmath72",
    "must have been sampled before by using the distribution @xmath76 which takes into account explicitly our chosen decay mode .",
    "if the second particle itself is also unstable , the expression is generalized as : @xmath77 again , if consecutive decay modes follow for the particles @xmath78 , the probability distribution functions @xmath79 have to be replaced by @xmath80 , respectively .",
    "this is ensured automatically by the pluto framework in all cases where a particular decay chain has been set up by the user .    for three - body decays ,",
    "the phase space can not be calculated only by the parent mass , therefore a different approach was taken : first all daughter particles are sampled according to eqn .",
    "( [ eqn : breit_wigner ] ) . using these masses ,",
    "the three - body phase space is calculated , which is the projection of the dalitz plane on e.g. @xmath81 . by using the rejection method ( the test function is a constant value with @xmath82 ) broad resonance like the @xmath83 exhibit the correct shape at the phase space limit ( see fig .  [",
    "fig : rho_sample_phase ] ) .",
    "the total width , eqn .",
    "( [ eqn : width_sum ] ) , involves the sum of partial decay widths , only some of which are of the form  ( [ eqn : width_monitz ] , [ eqn : m1_width ] , [ eqn : m2_width ] ) for decay modes involving two hadrons as products .",
    "another process of interest for the hades physics program is the dalitz decay of pseudoscalar mesons . in these processes",
    "one of the two decay products is a virtual ( massive ) photon @xmath84 , which subsequently decays to a dilepton pair .",
    "these are on one hand sources of the continuum in dilepton invariant mass spectra  @xcite , but are on the other hand on their own accord probes of electromagnetic form factors .",
    "the processes of interest are @xmath85 .    in this context , it should be pointed out that a virtual photon ( decaying into 2 stable particles ) has 6 degrees of freedom , which are outlined in fig .",
    "[ fig : dilepton_angle ] : beside the invariant mass @xmath86 these are the momentum @xmath87 , the polar @xmath88 and the azimuthal emitting angle @xmath89 of the virtual photon in the rest frame of the source @xmath90 .",
    "in addition , the 2 decay angles of the photon into dilepton pairs , which are usually described with the helicity angle @xmath91 , and the treiman - yang angle @xmath92 .    for the pseudoscalar mesons , which are spin - less , no alignment information can be carried from the production mechanism to the decay , so @xmath88 , @xmath89 and @xmath92 are isotropic .",
    "the helicity angle distribution however is calculated for pseudoscalar mesons to be @xmath93  @xcite , which is included in pluto by default .",
    "since the pseudoscalar mesons have a negligible small width the momentum @xmath87 is in this case fully determined by the invariant mass of the virtual photon @xmath86 , which is also the invariant mass of the final dilepton pair",
    ".    for pseudoscalar - meson dalitz decays the mass dependence of the dalitz - decay width is given by  @xcite : @xmath94 where the index @xmath17 refers to the ( parent ) pseudoscalar meson , and @xmath13 , @xmath95 , and @xmath96 are the dilepton , electron , and pseudoscalar masses , and @xmath97 is the parent form factor :    * for the @xmath98 : @xmath99 * for the @xmath100 : @xmath101 * for the @xmath102 : @xmath103    eqn .",
    "( [ eqn : ps_dalitz_decay ] ) is used as the effective distribution function from which virtual - photon masses are sampled .",
    "its integral also yields the partial decay width for pseudoscalar dalitz - decay modes .",
    "currently only the vector - meson dalitz decay @xmath104 is implemented in the code .",
    "the mass dependence of the decay width is @xmath105 where the notation is as in eqn .",
    "( [ eqn : ps_dalitz_decay ] ) , and the new index @xmath106 refers to the @xmath98 .",
    "the form factor is as in eqn .",
    "( [ eqn : etap_dalitz_decay ] ) , with @xmath107=0.65  gev , and @xmath108=0.04  gev .      for @xmath109",
    ", the mass - dependence of the width is calculated directly from the matrix element , without scaling factors as in the previous two cases  @xcite : @xmath110 where the decay rate is defined as : @xmath111 with the indices a and b referring to the parent ( resonance ) and product nucleon respectively , and @xmath112 the ( common ) product center - of - mass momentum in the parent rest frame .",
    "the matrix element of eqn .",
    "( [ eqn : delta_dalitz_decay2 ] ) is  @xcite : @xmath113 where the index @xmath16 refers to the produced nucleon , @xmath114 is the electron charge , and @xmath115=2.7 is the coupling constant .    the resulting free distribution function , without the phase space corrections coming from any limited decay parent mass ( or total c.m . energy ) , can be seen in fig .",
    "[ fig : delta ] .",
    "it should be pointed out , that decay of the @xmath9 resonance in @xmath116 is unmeasured up to now , and the correct treatment is still under discussion .",
    "moreover , the bremsstrahlung has be taken into account in a coherent ways , since the final state is equal .",
    "a very promising ansatz has been published recently for the bremsstrahlung and @xmath9 case  @xcite , and the work to include such processes into the pluto framework has been started .",
    "vector mesons couple to photons , as it is well known from the vector meson dominance ( vmd ) model , and have a direct dilepton decay mode @xmath117 .",
    "the decay products ( electron - positron ) have obviously fixed masses , therefore mass sampling is not an issue here , but since this is perhaps the most important process from the point of view of hades , the decay widths ( and branching ratios ) are explicitly calculated in the code .",
    "the mass dependence of the direct vector - meson dilepton decay width for is given by  @xcite : @xmath118 where the the index @xmath119 refers to one of @xmath120 and @xmath121 , and @xmath122 is @xmath123 , @xmath124 , and @xmath125  gev@xmath3 respectively  @xcite .",
    "in addition , we follow the ansatz here that the @xmath8 is governed by the 2-pion phase space in order to be comparable to transport code calculations  @xcite . this cut - off behavior at @xmath126 can be seen in fig .",
    "[ fig : rho ] . however , this is still a question under discussion .",
    "the breit - wigner eqn .",
    "[ eqn : breit_wigner ] can also be replaced by the absolute value squared @xmath128 of the complex amplitude @xmath129 which is an alternative approach and can be enabled in pluto by the user interface .",
    "this offers the possibility to let the leading term @xmath130 of the decay channel `` k '' to be interfered with a various number of different terms .",
    "the expression for such an interference is the coherent sum of all contributing terms : @xmath131 among with the relative phase @xmath132 and the mixing intensity @xmath133 .",
    "the additional terms @xmath134 can be obtained from single resonance models , decay models or even an exchange graph which is not assigned to a fixed decay mode .",
    "pluto is able to add such stand - alone contributions , which makes it open for more advanced theoretical studies .    as an example for such calculations ,",
    "the well known @xmath135-mixing has been implemented , which arises in the coupling of the @xmath83-meson to the @xmath7 channel because the electromagnetic force does not conserve the @xmath136 component of the isospin .",
    "this discussion has been started already some time ago  @xcite and became important in the @xmath137 scattering experiments . on the other hand , taking the time - reversal reaction it should play a role in the di - lepton decay of the @xmath83 meson , in particular if produced in the @xmath138-fusion . after enabling the complex breit - wigner model for both the @xmath83 and the @xmath139 ,",
    "the @xmath83 amplitude is calculated to be : @xmath140 with the relative phase @xmath141 and the mixing amplitude @xmath142 .",
    "it should be noted that this appearing deviation from the normal breit - wigner shape is negligible for the dilepton cocktail and it is used here for test and demonstration purpose only .",
    "by default , the code samples scattering angles in the rest frame of the parent particle isotropically .",
    "multi - particle emission ( after the mass sampling has been done as described before ) is performed by the genbod algorithm  @xcite which calculates the momenta according to phase space .",
    "for a few select channels , however , empirical parameterizations of angular distributions and multi - particle correlations have been implemented .",
    "elastic @xmath143 scattering is important for detector and spectrometer calibration studies .",
    "it is therefore useful to have in hand a convenient parameterization for sampling realistic scattering angles .",
    "pluto includes a parameterization based on a phase - shift analysis encompassing the world data , from an algorithm ( said ) supplied by r. arndt  @xcite .",
    "this yields elastic pp scattering distributions accurate to within a fraction of 1% for proton beam energies expected for hades experiments .",
    "it should be noted that the sampled range of angles in the center of mass is [ 1,179 ] degrees , in order to avoid the singularities at forward and backward angles due to the coulomb potential .",
    "this is not a limitation since extreme angles practically coincide with the beam path , where no detection is possible .",
    "a. ) b. )    the disto collaboration has reported an anisotropy of the @xmath100 polar angle @xmath145 in the @xmath143 collision  @xcite at 2.15 , 2.5 and 2.85  gev beam energy .",
    "closer to threshold , this anisotropy seems to vanish  @xcite .",
    "in addition , the proton angular alignment ( which is the distribution the polar angle @xmath146 of any proton in the common @xmath143 rest frame , with respect to the beam momentum ) tends to be aligned stronger in forward / backward direction with increasing beam energy . fig .  [ fig : meson_polar_angles ] sketches these angles .",
    "such behavior is usually described with a fit using legendre - polynomials . in the @xmath100 case ,",
    "the usage of the first 2 even legendre - polynomials have found to be sufficient and hence the differential cross section can be parameterized as :    @xmath147    where a fit to the given data points has been applied using a 2nd order polynomial as a function of the total c.m .",
    "energy @xmath148 in the @xmath143 system :    @xmath149    obtained by this method , the following values have been used :    @xmath100-case : : :    @xmath150 , @xmath151 ,    @xmath152 @xmath143-case : : :    @xmath153 , @xmath154 ,    @xmath155      the dalitz plane of the @xmath100 decay into 3 charged pions shows a strong non - phase space behavior , which is caused by the difference of the light quark masses  @xcite .",
    "the decay slopes of this plane are usually parameterized as : @xmath157 with @xmath158 the kinetic energy of the individual pion in the @xmath100 rest frame and @xmath159 .",
    "then , the matrix element ( which is the deviation from the constant value of the dalitz plot ) can be parameterized as @xmath160 .",
    "pluto includes the result from crystal barrel  @xcite which is @xmath161 .",
    "this reaction @xmath162 follows ref .",
    "@xcite , where the angular distribution for @xmath139 production in @xmath162 in the center - of - mass frame was found to be sharply ( exponentially ) peaked at forward angles , consistent with the parameterization @xmath163 where @xmath164 depends on the invariant mass , and has been parameterized as @xmath165 by fitting the data of ref .",
    "@xcite . in a similar ways ,",
    "the @xmath166 and @xmath167 reactions have been included , using the data from  @xcite .",
    "this follows ref .",
    "@xcite , which is in excellent agreement with the data .",
    "the direct and exchange matrix elements , averaged over all the spin states , are given by @xmath170      \\frac{\\left[t-(m+m_n)^2\\right]^2}{3m^2 }    \\end{array}\\ ] ] @xmath171   \\times \\\\ ~\\\\ & &       \\left[tu+m_n(m+m_n)(m^2-m^2_n)\\right]\\cdot \\\\ ~\\\\ & &      \\left[tu-(m^2+m^2_n)(t+u)+(m+m_n)^4\\right]\\cdot \\\\ ~\\\\ & &      \\left[tu - m_n(m - m_n)(m^2-m^2_n)\\right ]    \\end{array}\\ ] ] where @xmath172 and @xmath173 are the @xmath174 and @xmath175 coupling constants with all the particles assumed on - shell , @xmath176 and @xmath177 are the standard mandelstam variables , @xmath13 is the resonance mass as sampled from eqn .",
    "( [ eqn : breit_wigner ] ) , and @xmath178 is the mass - dependent form factor @xmath179 where @xmath180  mev , @xmath181 and @xmath182 are as in eqn  ( [ eqn : width_monitz ] ) the momentum if the frame of the resonance ( the first one at pole mass ) , and @xmath183 is the unmodified form - factor , with @xmath184  gev from fits to data  @xcite .",
    "the argument @xmath177 in the form factor is one of the mandelstam variables . likewise , exchanging @xmath177 with @xmath176 one gets @xmath185 in the matrix elements above . the mass dependence in the form factor",
    "is slightly modified from the corresponding expression of ref .",
    "@xcite , the difference coming from the mass - dependent width of eqn .",
    "( [ eqn : width_monitz ] ) .",
    "these matrix elements result in the following expression for the differential cross section @xmath186 @xmath187 is a kinematical factor with @xmath188 the beam- and target - proton 4-vectors , and @xmath189 the nucleon mass . in switching from @xmath190 of eqn .",
    "( [ eqn : delta_decay_angles5 ] ) to @xmath191 , actually sampled by the code when scattering angles are picked , the extra phase space factor @xmath192 introduced in eqns .",
    "( [ eqn : m1_width]-[eqn : m2_width ] ) arises naturally .",
    "thus , sampling the mass @xmath13 and subsequently the center - of - mass scattering angle from eqn .",
    "( [ eqn : delta_decay_angles5 ] ) yields spectra consistent with differential cross sections , in good agreement with experimental data .",
    "the scattering - angle @xmath193 dependence enters through the mandelstam variables in the matrix elements .",
    "historically , the partial wave contributions of resonances have been found by scattering pions off nucleons and the measurement of the outgoing pion angular distribution in the resonance rest frame . in @xmath143 collisions , however , the initial situation is different . the usual picture of such a reaction is the exchange of mesons ( one boson exchange , obe ) .    the @xmath33 production in @xmath143 reactions is well described by pion exchange amplitudes .",
    "however , the decay angle in the @xmath33 rest frame , expect to be @xmath195 , with @xmath196 , is a more complicated issue . on one hand ,",
    "the direction of the virtual pion depends on the question if the direct or exchange term is dominating .",
    "measurements on the treiman - yang angle suggest the exchange of virtual pions  @xcite , but on the other hand , the extracted coefficient @xmath197 ( averaged over all terms ) gave @xmath198 for the region @xmath199 and drops down to @xmath200 for the region @xmath201 .",
    "@xcite extracts the coefficient @xmath197 to be 0.65 .",
    "our approach is to use the polar axis taken as the momentum transfer direction to the excited nucleon in the c.m .",
    "frame by using the calculation from the previous section , and scale @xmath17 such that the result of  @xcite is reproduced .",
    "this is also consistent with the data from  @xcite ( see fig .  [",
    "fig : delta_angles ] ) .      for the production of virtual photons ,",
    "one has to calculate the photoproduction amplitudes ( for a very good introduction on this topic see  @xcite ) . assuming only the @xmath203 transition ( so the spin flip of one single quark ) , which is a good approximation in the @xmath33-case , the expected distribution of the pion in the photoproduction @xmath204 is to be @xmath205 . with time - reversal arguments",
    ", one expects that the virtual photon angular distribution shows the same behavior which is our approach taken but the same damping factor has been used as obtained in the @xmath206 case .      the quasi - free scattering of a nucleon @xmath207 on a nucleus @xmath17 ( or vice versa ) is considered in pluto in two steps :",
    "first , the fermi - momentum and off - shell mass of the nucleon @xmath208 inside the nucleus @xmath17 are determined and the particle properties are set up correctly , and in a second step the reaction @xmath209 is performed with all the consecutive decay modes as defined by the user . at the moment a dedicated sampling model is included for the deuteron wave function  @xcite .",
    "thermal sources are needed in the case of heavy ion reactions  @xcite in order to extrapolate the meson production yield measured with hades to the full solid angle and to subtract the cocktail of `` trivial '' sources from the measured di - lepton spectrum .    in this case , pluto is able to emit mesons and baryonic resonances without a collision and without considering energy and momentum conservation , by a special particle which we call `` fireball '' .",
    "this means that first the particles are created ( for each particle species we set up one fireball ) and sub - sequentially decay in the pluto framework as described before .",
    "this systematic procedure allows directly comparing the elementary reactions with results obtained in heavy ion reactions .    in the case of stable ( long - lived ) particles",
    "only the total energy @xmath210 is sampled as a relativistic boltzmann distribution in the nucleus - nucleus c.m .",
    "frame : @xmath211 this distribution is not explicitly normalized to 1 , this is done numerically by the root tf1 object . a source with two temperatures ,",
    "as observed e.g. in pion production is realized by : @xmath212\\ ] ] where @xmath213 and @xmath214 are the respective fractions of the two components .",
    "optionally , radial flow is implemented using the siemens - rasmussen formulation  @xcite : @xmath215\\ ] ] with    * @xmath216 : blast velocity * @xmath217 * @xmath218 * @xmath219    note that in the limit @xmath220 , eqn .",
    "( [ boltzmann ] ) is recovered . in case of two temperatures ( @xmath221 ) , eqn .",
    "( [ radial_flow ] ) is extended as : @xmath222\\right .",
    "\\\\ &          + \\left.(1+f)e^{-\\gamma_r\\frac{e}{t_2 } }          \\left[\\left(\\gamma_r+\\frac{t_2}{e}\\right)\\frac{\\sinh              \\alpha_2}{\\alpha_2}-\\frac{t_2}{e}\\cosh \\alpha_2 \\right ]        \\right\\ }    \\end{array}\\ ] ] these distributions are sampled spatially isotropic or , optionally , with : @xmath223 note that most transport models and some data too show an dependence of the temperature on the angle , thus @xmath224 .",
    "such an effect can be optionally and roughly modeled in pluto as well .    for broad particles ,",
    "the energy and mass are sampled as : @xmath225 with @xmath32 from eqn .",
    "( [ eqn : breit_wigner ] ) . in the case",
    "that only one selected subsequent decay k should be calculated , @xmath32 has to be replaced with @xmath226 which includes the mass - dependent branching ratios .",
    "this distribution depends strongly on the temperature .",
    "examples are shown in fig .",
    "[ fig : thermal_rho ] for @xmath227  gev and @xmath228  gev .    fig .",
    "[ fig : c2c_inv ] shows a final dilepton final spectrum without any detector acceptance effects , where the parameters of the fireball and the relative abundances of the sources are adjusted to the reaction @xmath229c+@xmath229c  @xcite .",
    "after the features of the pluto package have been presented , the user interface and technical implementation of the framework are roughly described .",
    "the package does not need any additional libraries ( beside root  @xcite ) , which makes it possible to use it as a standalone environment for quick detector studies .",
    "moreover , it is small and fast ( a typical reaction with 1 million events takes only some few minutes ) . on the other hand",
    ", it is very important for advanced studies to allow the user for changes of almost all parameters and including new ideas .",
    "the latter one can be done even without recompilation , which is supported by the smooth interaction of the root - interpreter with c++ .",
    "an interface to attach different input sources and to allow 3@xmath230 party event generators for interaction is available as well .",
    "the main objects of pluto are ` pparticles ` .",
    "this class defines `` particle '' objects , the most elementary unit in the context of simulations with this package , and contains functions for handling particle observables . in the parlance of c++ , this class inherits from native 3- and 4-vector root classes  @xcite .",
    "these objects are modified via ` pchannels ` , which handle the decay of one `` parent '' particle into several `` daughter '' particles , respectively .",
    "[ fig : pchannel ] is sketching this basic concept .",
    "during runtime , these ` pchannels ` are connected to a ` pdistributionmanager ` which offers a list of included distributions and models for coupled - channel calculations and thus much of hadronic interaction models , like the empirical angular - distribution parameterizations the mass and momentum sampling .",
    "since particle production is done via a complete chain of consecutive decays , several ` pchannels ` are finally connected in a ` preaction ` , which also contains functions for the execution of simulated event loops ( see also fig .  [",
    "fig : pchannel ] ) .",
    "last , multi - reaction cocktail calculations are facilitated via the ` pdecaymanager ` .",
    "the following sub - sections describe how to set up a reaction , starting from a very simple example for the first usage , up to the description of the advanced features of pluto .",
    "all examples are based on root - macros ( or interactive sessions ) , which is a very elegant way to control and steer the pluto package .      the simplest approach to perform",
    "a reaction is to open a root - cint session and use the reaction parser of pluto :    .... > preaction my_reaction(6,\"p\",\"p\",\"p p rho0 [ e+ e-]\",\"rho_sample\",1,0,0,0 ) ; > my_reaction.loop(100000 ) ; ....    the arguments of the constructor which is used here , are the beam momentum , the beam and target particle name , and the decay products , separated by spaces ( including their decay in brackets ) , the filename , and 4 flags which are described in detail in sec .",
    "[ preaction ] .",
    "the second command in this example actually opens the root file `` rho_sample '' and produces 100000 events . in each of these events",
    ", @xmath83 mesons are sampled in @xmath143 collisions at 6.0  gev beam momentum using three body phase space scaling and a relativistic breit - wigner for the broad @xmath83 meson , as already discussed in sec .",
    "[ m3_model ] ( e.g. fig .",
    "[ fig : rho_sample_phase ] ) .",
    "this included physics can be shown in each case with the ` print()`-method of the ` preaction ` class :    .... > my_reaction.print ( ) ;    reaction of 6 particles interacting via 2 channels     reaction particles :       0 .",
    "quasi - particle ( fixed p beam and p target )       1 .",
    "p       2 .",
    "p       3 .",
    "rho0       4 .",
    "e+       5 .",
    "e-     reaction channels :       1 .",
    "p + p -- > p + p + rho0          interaction model(s ) :          [ p + p_m3_p_p_rho0 ] 3-body phase space rho0 < pbreitwigner >          [ p + p_genbod_p_p_rho0 ] pluto build - in genbod       2 .",
    "rho0 -- > e+ + e-          interaction model(s ) :          [ rho0_ee_e-_e+ ] dilepton direct decay          [ rho0_genbod_e-_e+ ] pluto build - in genbod     output files :       root : rho_sample.root , all particles on file . ....    this exhibits that the reaction involves 6 particles and is performed in 2 steps which are the production and the consecutive decay of the @xmath83-meson .",
    "the identifiers in the brackets can be used for the unique identification of the interaction models ( for details see sec .",
    "[ pdistributionmanager ] ) .    the resulting @xmath83-meson ( with particle i d 42 )",
    "mass can be analyzed by re - opening the root file and projecting the mass to a histogram :    .... data.draw(\"m()\",\"id()==41 \" ) ; ....    decays can also be nested , like in the case @xmath231 :    .... preaction my_reaction(3.13,\"p\",\"p\",\"p p eta [ dilepton [ e+ e- ] g ] \" ,      \" eta_dalitz\",1,0,0,0 ) ; my_reaction.print ( ) ;    //the \" print ( )",
    "\" statement is optional ....",
    "virtual photons are named `` dilepton '' or `` dimuon '' in pluto , depending on the final decay .",
    "a single reaction may also be defined by instantiating the objects by hand , which is demonstrated using the same reaction as above :    .... pparticle p1(\"p\",0.,0.,3.13 ) ; pparticle p2(\"p \" ) ;     pparticle q = p1+p2 ;        //construct the beam particle     //",
    "eta production pparticle p3(\"p \" ) ; pparticle p4(\"p \" ) ; pparticle eta(\"eta \" ) ; pparticle * eta_part[]={&q,&eta,&p4,&p3 } ; pchannel eta_prod(eta_part,3,1 ) ;     //",
    "eta dalitz decay pparticle di_eta(\"dilepton \" ) ; pparticle g_eta(\"g \" ) ;    pparticle * dalitz_part_eta[]={&eta,&di_eta,&g_eta } ; pchannel dalitz_decay_eta(dalitz_part_eta,2,1 ) ;     // decay of the eta dilepton     pparticle em_eta(\"e- \" ) ; pparticle ep_eta(\"e+ \" ) ; pparticle * dileptons_eta[]={&di_eta,&em_eta,&ep_eta } ; pchannel dilepton_decay_eta(dileptons_eta,2,1 ) ;     pchannel * c [ ] = { & eta_prod,&dalitz_decay_eta,&dilepton_decay_eta } ; preaction r(c,\"eta_dalitz\",3,0,0,0,1 ) ; r.loop(10000 ) ; ....    the structure of this macro becomes more clear after the next sub - sections , where the classes are described in more detail .",
    "a ` pparticle ` is a lorentz vector , together with a particle i d ( pid ) and a weight .",
    "the pid convention in the ` pparticle ` class is consistent with geant3  @xcite , except for the additional unstable particles of pluto .",
    "the weight is unity by default , unless explicitly set otherwise , and is updated self - consistently depending on the physics model of the interaction that produces a given particle .",
    "composite particles made up of two ( but not more ) constituent particles may be defined , where the pid assignment follows the ansatz pid = pid1 * 1000 + pid2 for the two constituent pid s .",
    "the `` addition '' is used for this operation , intended for the creation of a quasi particle at the entrance channel from the interaction of a beam particle ( 1st constituent ) with a target ( 2nd constituent ) . for composite particles ,",
    "the 4-vector is the sum of the constituent 4-vectors , and the weight is the product of the constituent weights ( uncorrelated weights assumed ) .",
    "several constructors are available for instantiating particles , where the last 2 have been used in the example above :    * ` pparticle(char * i d , double t ) ; ` * ` pparticle(char * i d ) ; ` * ` pparticle(char * i d , double px , double py , double pz ) ; `    here , `` i d '' is the unique particle name and @xmath232 the particle kinetic energy .",
    "@xmath233 are the 3-momentum components of the particle .",
    "functions to return physical observables such as the momentum , velocity- or lorentz- vector , weight , rapidity , mass , angles are inherited from the parent ` tlorentzvector ` class .",
    "particles participating in a simulation are instantiated in advance and subsequently updated during the execution of an event loop . in this way ,",
    "unnecessary invocation of time - consuming constructors and destructors is avoided .",
    "the masses are reassigned automatically via sampling if appropriate , e.g. for unstable resonances , during the execution of an event loop .",
    "an example of declaring a proton is shown , passing the kinetic energy ( gev ) as argument ( with the momentum assumed along the z axis ) :    .... > pparticle p(\"p\",2 . ) ;     //",
    "proton with kinetic energy ( gev ) > p.print ( ) ;               // print member function    p ( 0.000000,0.000000,2.784437;2.938272 ) wt = 1.000000 , m = 0.938272 pid = 14    vertex = 0.000000 0.000000 0.000000 ....    an example of a composite particle is illustrated next :    .... > pparticle p1(\"p\",0,0,2 ) ;    //",
    "p with 2 gev / c momentum along the z - axis > pparticle p2(\"p \" ) ;          // proton at rest ( default constructor ) > pparticle q = p1+p2 ;          // composite particle : beam + target ( in this >                             // order )    info in < pparticle::operator+ > : ( allocation ) keeping beam and target         particle for further reference    info in < pparticle::operator+ > : ( allocation ) the composite p + p has been         added > q.print ( ) ;                  // displays info    quasi - particle ( 0.000000,0.000000,2.000000;3.147425 ) wt = 1.000000 ,         pid1 = 14 , pid2 = 14    vertex = 0.000000 0.000000 0.000000 > cout <",
    "< q.id ( ) < < endl ;     // composite particle pid convention : pid2 * 1000",
    "// + pid1    14014                       // quasi - particle pid ....",
    "this demonstrates , that pluto adds new composite particles in the data base by a background operation whenever occurring , and the original scattering particles are kept for later calculations .",
    "more composite particles are created likewise in case a quasi - free reaction is studied , e.g. the scattering of @xmath234 in the @xmath235 reaction . here , first the momentum of the quasi - free nucleon is sampled and consequently the composite particle is updated in the event loop .    the particle properties and decay channels can be obtained via the following command :    .... > makestaticdata()->printparticle(\"dilepton \" )        primary key=52    primary name = dilepton     pluto particle id=51     particle static width [ gev]=0.000000     particle pole mass [ gev]=0.001022       this particle decays via the following modes :    primary key=160    primary name = dilepton -- > e+ + e-     decay index=90     branching ratio=1.000000     decay product 1->primary name = e-     decay product 2->primary name = e+   ....    this gives a simple method to read the information from the pluto data base , where the properties of all particles and decays are stored .",
    "more examples using the data base , including the addition of new particles and decays can be found in sec .",
    "[ database ] .",
    "a ` pchannel ` is a single step in a reaction process , consisting of a parent , elementary or quasi - particle from a beam - target interaction , and its subsequent decay into a number of decay products via a specified decay mode .",
    "the ` pchannel ` default constructor requires as minimum input a pointer to an array of pointers to the parent and decay particles , and the number of decay particles ( default two ) :    * ` pchannel(pparticle * * particles , int nt ) ; `    additional constructors are provided , adapted to facilitate multi - hadron thermal decay modes of quasi - particle fireballs .",
    "the decay models are not included in a single ` pchannel ` by default , as they are attached in a later step internally by using a dedicated interface in order to allow the user to apply changes . therefore ,",
    "` pchannels ` are not working as stand - alone objects outside of a reaction .",
    "* ` preaction(pchannel * * pchannel , char * file_name , int n , int f0 , int f1 , int f2 , int f3 ) ` * ` preaction(double_t momentum , char * beam , char * target , char * reaction , char * file_name , int_t f0 , int_t f1 , int_t f2 , int_t f3 ) ; `    a reaction is a complete physical process , consisting of one or several steps ( ` pchannels ` ) .",
    "the ` preaction ` constructor requires as input a ` pchannel`-type double pointer directed to an array of individual ` pchannel`-type pointers , a character - string specifying a file name including directory but without a suffix , and the number of constituent channels ( default is two ) .",
    "additional constructor arguments are flags of integer type specifying output , decay - mode , and vertex - calculation options .",
    "these are the following :    * output options for the root file ( default 0 ) : * * only the tracked ( i.e. stable ) particles are stored in the root file . * * all the particles are stored in the root file , including the composite particles .",
    "* decay - mode options ( default 0 ) : obsolete * vertex - calculation options ( default 0 ) : * * this option is off ( no vertex calculation ) . * * production vertices are calculated for those particles that are written on file ( depending on the output option ) .",
    "the origin is considered to be the parent , or beam and target vertex .",
    "this is also the case for the products of the first channel . for particles produced in subsequent channels",
    "the production vertex is calculated by adding straight - line segments successively , each of length obtained as the product of the parent vector velocity times a lifetime randomly sampled from an exponential decay - time distribution .",
    "an assumption of absence of any external magnetic fields is implicit . * ascii output options ( default 0 ) : * * no ascii output . * * ascii output files , formatted for input to hgeant .",
    "irrespective of the output option , ascii files contain only tracked particles . invoked from the ` pdecaymanager ` ( see below ) class , a separate ascii file is opened for each reaction channel processed . * * common ascii output file for all reaction channels processed by a ` pdecaymanager ` .",
    "the ` pdecaymanager ` is a front end class for simulations that need to cover a whole set of possible reaction chains ( `` cocktails '' ) .",
    "it uses the tabulated particle properties from the ` pdatabase ` , including ( static ) branching ratios .",
    "additional particles and decay branches may be included via the member functions .",
    "the standard way to set up a multi - step reaction is the following :      .... pdecaychannel * c = new pdecaychannel ; pdecaymanager * pdm = new pdecaymanager ; pdm->setverbose(1 ) ;           //",
    "print really useful info ....      first , the initial state is built ( e.g. proton with 3.5 gev kinetic energy on deuteron ) :    .... pparticle * p = new pparticle(\"p\",3.5 ) ;   //",
    "proton beam pparticle * d = new pparticle(\"d \" ) ;       //",
    "deuteron target pparticle * s = new pparticle(*p + * d ) ;   //",
    "composite quasiparticle ....      the user should assure that all the required channels are included in the simulation .",
    "the most simple method is to use the static branching ratios as defined in the data base and switch on any of the available channels , e.g. :    .... pdm->setdefault(\"w \" ) ;         // include omega decay modes pdm->setdefault(\"pi0 \" ) ;       // include pi0 decay modes pdm->setdefault(\"dilepton \" ) ; //",
    "e+e- production ....      here , only one channel is used , but more channels can be added . if `s` is a predefined particle and has a list of decay modes associated with it in ` pdata ` , `c` can be omitted and the predefined list can be used .",
    "otherwise the ` pdecaychannel ` constructor ( which is a supporting class ) may be utilized , as illustrated in the first two lines of the sequence below .",
    "once the final states have been specified , the reaction can be initialized :    .... c = new pdecaychannel ;      c->addchannel(0.1,\"p\",\"d\",\"w \" ) ;       // include decay modes c->addchannel(0.9,\"p\",\"p\",\"pi0 \" ) ;     // include decay modes pdm->initreaction(s , c ) ;               // initialize the reaction ....",
    "the ` pdecaychannel ` acts as list containing the default decay modes , which is shown here with 2 decays channels with the relative weights ( the first number in the ` addchannel()`-method ) selected such that the @xmath139 is produced in 10% of the events but the background from @xmath98-production in 90% .",
    "the last line actually combines the seed particle ( beam+target composite ) with its default decay modes .      ....",
    "pdm->loop(10000,0,\"pdomega\",1,0,0,0,0 ) ;     ....    the arguments are :    * number of events : 10000 . for reasons of normalization",
    "this number is the sum of event weights .",
    "the actual event number is returned by the loop function .",
    "* weight flag : 0 . if this is set , it acts as an additional normalization factor that adjusts the weight of the decay chain and all the product particles .",
    "otherwise , the number of events for one chain is calculated from the chain weight .",
    "* reaction name : `` pdomega '' . used in setting up output file names .",
    "* flags : f0 , f1 , f2 , f3 : these are the same as for ` preaction ` . * random flag : if=0 , process reactions sequentially , if=1 , sample reactions in random order .      in order to dicuss more applications for the distribution manager , the @xmath100 production in @xmath143 collisions is shown . here",
    ", the @xmath100-meson can be produced directly , or via the @xmath64 resonance . in order to avoid implementing the definition of the @xmath100 decay many times in the macro code",
    ", the ` pdecaymanager ` can be used , which finally constructs all reaction chains which are possible :    .... //",
    "beam pparticle p1(\"p\",2.2 ) ; pparticle p2(\"p \" ) ;    pparticle q = p1+p2 ; pdecaychannel * c = new pdecaychannel ; pdecaymanager * pdm = new pdecaymanager ;    //primary meson production nonresonant c->addchannel(0.42,\"p\",\"p\",\"eta \" ) ;    //via",
    "n*(1535 ) c->addchannel(0.58,\"p\",\"ns11 + \" ) ;    //decay of the n * pdecaychannel * nstar_decay = new pdecaychannel ; nstar_decay->addchannel(1.0,\"eta\",\"p \" ) ; pdm->addchannel(\"ns11+\",nstar_decay ) ;    //decay of the eta pdecaychannel * eta_dalitz_decay = new pdecaychannel ; eta_dalitz_decay->addchannel(1,\"g\",\"dilepton \" ) ; pdm->addchannel(\"eta\",eta_dalitz_decay ) ;    //decay of the virtual photon : pdecaychannel * eta_dilepton_decay = new pdecaychannel ; eta_dilepton_decay->addchannel(1.0,\"e+\",\"e- \" ) ;    pdm->addchannel(\"dilepton\",eta_dilepton_decay ) ; pdm->initreaction(&q , c ) ;    pdm->loop(100000,0,\"eta_sample\",1,0,0,1,1 ) ; ....    in this example , the decay modes are completely controlled by the user which means that the @xmath100 dalitz decay can be studied without background .",
    "pluto allows for the seamless modification of the particle array ( streaming out after the defined reaction was performed ) by external classes during the loop execution . in this way",
    ", different event generators may interact with pluto ( i.e. in order to execute the particle decay externally ) and additional particles can be added .",
    "the latter method is very important for detector studies , e.g. to embed single particle tracks into realistic background . from the software architecture point of view",
    ", the realization is done such that objects inherited from the base class ` pbulkdecay ` are added to the ` preaction ` , which are executed after all decays ( as defined in the ` preaction ` constructor ) have been finished . for external decays , at the moment only one external event generator is considered which is pythia  @xcite .      by using again the @xmath100 dalitz example it is demonstrated how to add single tracks in a reaction environment :    .... preaction my_reaction(3.13,\"p\",\"p\",\"p p eta [ dilepton [ e+ e- ] g ] \" ,      \" eta_dalitz_embedded\",1,0,0,0 ) ;    //construct the bulk container : pembeddedparticles * embedded = new pembeddedparticles ( ) ;    //add an e+ which we emit at a single point : pparticle * e_plus = new pparticle(\"e+\",1.,2.,3 . ) ;    //just add the particle to the container : embedded->addparticle(e_plus ) ;    //we can also add a \" white \" dilepton , which we emit in a small cone : pparticle * dilepton = new pparticle(\"dilepton \" ) ; embedded->addparticle(dilepton ) ; embedded->setsampling(0 , 1 . ,    //pmin and pmax in lab frame                         tmath::pi()/1000 . , //opening angle                        tmath::pi()/2 . ,     //theta of pointing vect .                        tmath::pi()/2 . ,     //phi of pointing vect .                        0.2 , 1.5 ) ;          //mass sampling ( optional )    //add our container to the reaction : my_reaction.addbulk(embedded ) ;    my_reaction.loop(100000 ) ; ....    where the class ` pembeddedparticles ` is employed to carry one ore more particle tracks which are ( optionally ) re - sampled during the event loop in order be emitted in selected regions inside a detector setup .      as it can be seen in the example above",
    ", the dilepton has been added in addition to the @xmath100 dalitz decay , but it was not decayed . here",
    "( and in any case where unstable particles are still un - decayed ) , the pluto bulk decay class can be used .",
    "the difference between the bulk decay and the normal treatment of decays is that in the first case not a specific reaction chain is constructed , but the particles are decayed using the mass - dependent branching ratio ( eqn .",
    "[ eqn : br ] ) . in order to demonstrate this feature ,",
    "the decay of the @xmath64 is used :    .... preaction my_reaction(6,\"p\",\"p\",\"p ns11+\",\"n1535_sample_bulk\",1,0,0,0 ) ;    pplutobulkdecay * pl = new pplutobulkdecay ( ) ; pl->setrecursivemode(1 ) ;   //let also the products decay pl->settaumax(0.001 ) ;      //maxtau in ns my_reaction.addbulk(pl ) ;    my_reaction.loop(100000 ) ; ....    the decay is done recursively , until stable particles ( defined such to have a life - time larger then @xmath236 ) are reached .",
    "this approach is completely complementary to the ` pdecaymanager ` but should give the same result beside the different normalization : the ` setdefault ` method of the ` pdecaymanager ` is always based on the static branching ratio ( and in this way the relative weights of the included ` preactions ` are calculated ) , whereas the mass - dependent branching ratios are calculated by default to be fixed at the pole mass . if eqn .",
    "[ eqn : scpw ] is explicitly enabled ( which is the case for the @xmath64 e.g. ) , the result should be the same and provide an independent cross - check of the framework functionality .",
    "for the decay of the @xmath64 in total 135 different possible reactions chains ( combinations of possible decays ) are considered , and the sampling of 200.000 events including all decay products takes usually 1 minute independent if the bulk decay or the decay manager have been chosen .    in fig.[fig",
    ": n1535_sample ] the obtained spectra for both methods are compared .",
    "it can be seen that the distributions agree within the error bars , which gives confidence on the functionality of the framework . moreover , they are similar to the original calculation shown in fig .  [",
    "fig : n1535_partial_contribution ] .",
    "the ` pdistributionmanager ` collects all information about the included physics ( single distributions and more complicated coupled channel calculations ) at one place and controls all objects which are offered to be used in the ` pchannels ` .",
    "the ` pchannels ` instead do not contain any calculation algorithm itself , but handle a list of distributions matching the requirement given by each channel .",
    "the disabling of distributions is done via unique identifier strings .",
    "this ensures that the production of events in reaction chains is done always consistent .",
    "therefore , the ` pdistributionmanager ` is a singleton which can be obtained via a constructor method like :    .... pdistributionmanager * dim = makedistributionmanager ( ) ; ....    and the included physics can be listed with :    .... dim->print ( ) ; ....    the individual distributions are organized in groups , which are not expanded by default :    .... eta_physics       physics about eta production , and decay : 5 enabled ( from 5 ) helicity_angles   helicity angles of dileptons : 3 enabled ( from 3 ) resonances_pw     partial waves of resonances : 4 enabled ( from 4 ) particle_models   mass sampling of particles : 27 enabled ( from 27 ) decay_models      phase space mass sampling & decay partial widths :                        178 enabled ( from 178 ) ....    these groups can be completely enabled , disabled , or expanded via the following commands :    .... makedistributionmanager()->enable(\"helicity_angles \" ) ; makedistributionmanager()->disable(\"helicity_angles \" ) ; makedistributionmanager()->expandgroup(\"helicity_angles \" ) ; ....    the last command makes the distributions appearing in the ` print()`-method , alternatively ` print(group_id ) ` can be used :    .... ...      helicity_angles              helicity angles of dileptons [ x ] eta_dilepton_helicity        helicity angle of the dilepton decay of eta [ x ] etaprime_dilepton_helicity   helicity angle of the dilepton decay of etaprime [ x ] pi0_dilepton_helicity        helicity angle of the dilepton decay of pi0 ... ....    single distributions can be enabled ( or disabled ) using their unique identifier string as well :    .... makedistributionmanager()->disable(\"eta_dilepton_helicity \" ) ; ....    another aspect is that distribution models might be strictly alternative and marked to be not valid at the same time .",
    "this can be shown e.g. when printing the decay models :    .... > makedistributionmanager()->print(\"decay_models \" ) ... ( x ) w_picutoff_e-_e+      dilepton direct decay with pion cutoff      ( ) rho0_ee_e-_e+     dilepton direct decay ... ....    here , 2 independent models of the decay @xmath237 can be chosen , by enabling one of them , the other will be disabled .",
    "in addition to the generation of events , pluto includes filter and user selection methods for rapid principle simulation studies adapted for particular experimental conditions , detector setups and geometries .",
    "a filter object is instantiated by two arguments : a pointer to a reaction , and a character string specifying explicitly the algebraic expression of the condition that is to be satisfied .",
    "the ` pfilter ` class implicitly invokes the root class ` tformula ` for the interpretation of the character string , and for transposing it to a mathematical formula .",
    "a variety of expressions are acceptable , inherited from the ` tformula ` class , including trigonometric functions , exponentiation , and standard boolean logic working on particle observables .",
    "a general - purpose beam smearing model can be used to re - sample the beam 4-momentum event by event .",
    "thus , simulations may take into account the dispersion and ( angular ) resolution of the beam , adapted to the individual experimental setup including the accelerator , and analyze the impact on the signal resolution .",
    "finally , a general purpose file output interface makes it possible to define output formats depending on the individual simulation framework of various experiments .",
    "the points as mentioned above make it possible also for other experiments to use pluto and its included physics . on the other hand , it is very useful to adapt in addition the build - in physics .",
    "this will be discussed in the next section .",
    "driven by the requirement of the on - going hades analysis ( and in parts also in the context of simulations for the fair experiments ) it is important that the pluto framework can be customized . only by comparing the data with several model assumptions conclusions can be drawn .",
    "therefore the pluto framework was extended such to make the incorporation of new models possible which can be done be the user without changing basic source code .",
    "this is achieved by a strictly object - oriented design , in combination with the modular architecture .",
    "the user is able to interact with the pluto - kernel in different ways , according to the level of experience and needs :    1 .",
    "the parameters of build - in distributions and models can be changed .",
    "2 .   build - in classes ( serving as templates ) can be utilized for reaction chains or decay channels not yet covered by build - in physics .",
    "new classes may be created by the user and compiled during run - time of a macro . by implementing standardized interface methods , the control of decays or reaction chains can be taken over .",
    "these are named `` distribution models '' ( base class ` pdistribution ` ) .",
    "new models may be created , which change in addition the partial widths and mass sampling of particles even if they are _ not _ directly used in the actual ` preaction ` setup .",
    "these are called `` channel models '' ( base class ` pchannelmodel ` inherited from ` pdistribution ` ) .      the way to change parameters",
    "can be demonstrated using e.g. the @xmath238 matrix element .",
    "recent results  @xcite differ from the build - in distribution , and new generation experiments are going to re - measure the dalitz slopes with a high precision  @xcite .",
    "these slopes can be changed by obtaining first the object from the ` pdistributionmanager ` by the known identifier :    .... pdistributionmanager * pdist = makedistributionmanager ( ) ; pdalitzdistribution   * eta_pion_decay = ( pdalitzdistribution * )      pdist->getdistribution(\"eta_hadronic_decay \" ) ; ....    consequently , the local methods of the given distribution class can be used :    .... eta_pion_decay->setslopes(1.22,0.22 ) ; //new result ....      the basic concept of the ` pdistribution ` ( and all distributions inherited from this base class ) is that they can be implemented many times for different reaction chains , including the ( grand)grandparent , and their siblings in addition . for of these each implementation procedure",
    "the user has to perform the following steps :    1 .",
    "the object has to be created with the ` new ` operator , among with a title and identifier ( the latter one must be unique ) .",
    "2 .   the user defines a decay chain template with the ` add()`-method . the right half of fig .",
    "[ fig : pdistribution_attach ] gives an overview of this principle .",
    "all local parameters which are needed for the individual algorithm have to be initialized correctly according to the physics case .",
    "these methods depend on the class which has been used in this context .",
    "4 .   the new object has to be added to the ` pdistributionmanager ` .      in order to show how a distribution class is implemented ,",
    "angular distributions are discussed , as they play always an important role in the production and decay of mesons and resonances .",
    "they could be sensitive to the production mechanism ( exchange of bosons ) , and might effect in combination with the detectors acceptance the integrated yield for individual channels .",
    "therefore , attention should be paid on the sensitivity of specific angular distribution cases .",
    "here , it is used as example to demonstrate the usage of a build - in distribution class ( ` pangulardistribution ` ) , which is able to handle many general purpose cases : polar angle distributions in the production of particles and polar alignment , as needed e.g. for the @xmath100 physics .",
    "the first step it to instantiate the object :    .... pangulardistribution * my_distribution = new      pangulardistribution(\"meson_distribution \" ,       \" polar angle of my meson \" ) ; ....    here , the first parameter is the unique identifier , and the second is a title .",
    "now , the decay chain template has to be created , as depicted in fig .",
    "[ fig : pdistribution_attach ] , which means that at least the parent and the daughters must be defined to be unambiguous .",
    "on the other hand in the case of - let us say the emission of a @xmath98 in @xmath143 collisions - this information is not enough , because the angular distribution algorithm has to know _ which _ of the particles in the three body final state has to be sampled .",
    "in order to deal with such ambiguities in the internal calculations the decay chain template can be extended with `` private '' option flags which can be read by the distribution objects during the initialization procedure . here",
    ", the angular distribution class is able to handle different cases explicitly , by choosing the primary particle by such a flag , and its reference frame .    for a first simple example",
    ", it should be assumed that the primary particle ( the particle for which the polar angle has to be sampled ) is a @xmath98 meson , and the reference for the angle is the c.m .",
    "frame :    ....",
    "my_distribution->add(\"pi0,daughter , primary \" ) ; my_distribution->add(\"p , daughter \" ) ; my_distribution->add(\"p , daughter \" ) ; my_distribution->add(\"q , parent , reference \" ) ; ....    in addition to the pid names ( as listed in the data base ) , the distribution interface offers in addition helpful identifiers :    `` q '' : : :    any composite particle `` ? ''",
    ": : :    a wildcard for any track `` * '' : : :    any number of additional tracks `` n '' : : :    any nucleon    each particle is finally combined with one of the possible relationships : `` parent '' , `` ( grand)grandparent '' , or siblings of such relatives ( like `` parent , sibling '' ) .    in total ,",
    "the given template reads like this : the distribution , which has been created in our example will be attached to any ` pchannel ` , which has a composite particle as a parent and 3 selected decay products ( one @xmath98 and 2 protons ) .",
    "the next step is to define the angular distribution function .",
    "the class ` pangulardistribution ` uses tf1/tf2 root objects for this purpose .",
    "the latter one is used for mass - dependent parameterizations like in eqn .",
    "( [ c2_param ] )",
    ". a simpler application would be to define a distribution only depending on @xmath239 :    .... tf1 * angles = new tf1(\"angles\",\"(x*x)/2\",-1,1 ) ; my_distribution->setanglefunction(angles ) ; ....    finally , the new distribution has to be added to the distribution manager :    .... makedistributionmanager()->add(my_distribution ) ; ....    the discussed class ` pangulardistribution ` allows also for the sampling of more sophisticated angular correlations .",
    "resonances like @xmath240 should decay into @xmath206 with dedicated partial waves , hence the dashed line in fig .",
    "[ fig : angles_definition ] is the @xmath10-momentum in the c.m . frame . in this context",
    ", the configuration would have to be defined like :    .... my_distribution->add(\"pi0,daughter , primary \" ) ; my_distribution->add(\"p , daughter \" ) ; my_distribution->add(\"np11+,parent , reference \" ) ; my_distribution->add(\"q , grandparent , base_reference \" ) ; ....    by using exactly such a method the @xmath241 decay angular distribution ( discussed in sec .",
    "[ pw_delta ] ) was implemented .",
    "pluto uses a multi - purpose data base with fast lookup - keys to store all information which are needed to read the particle properties as well as for the handling of the models .",
    "internally , these data base is filled in 2 steps : first , when user - interface classes like ` pchannel ` or ` pparticle ` are created the first time , the interface singleton ` makestaticdata ( ) ` fills the particle properties from a fixed table .",
    "second , if a ` preaction ` or ` pdecaymanager ` is instantiated the ` pdistributionmanager ` is filled and linked to the data base .",
    "tool classes are facilitated to create dedicated models for each decay using the particle properties like lepton number or width .",
    "this has two consequences for the user : particle and decay properties should be changed before the first creation of a particle takes place , and models should be chosen using the ` pdistributionmanager`-`enable ( ) ` or -`disable ( ) ` method before creating the reaction .    the direct write access to the data base is possible but recommended only for experts , however for the normal usage a various number of methods are available by using the ` makestaticdata ( ) ` interface .",
    "an example of defining a new decay like @xmath242 is depicted below :    .... makestaticdata()->addparticle(-1,\"a \" , 1.2 ) ; makestaticdata()->setparticletotalwidth(\"a\",0.3 ) ; makestaticdata()->addparticle(-1,\"b \" , 0.5 ) ; makestaticdata()->addparticle(-1,\"c \" , 0.3 ) ; makestaticdata()->adddecay(-1,\"a - > b + c \" , \" a \" , \" b , c \" , 1 . ) ; ....    where the `` @xmath243 '' indicates that pluto should assign the next available pid and decay index number .",
    "the numbers used in the methods are the mass ( for particles ) and the branching ratio ( for decays ) .",
    "the latter one are re - normalized such that the total sum is always equal to one .",
    "a complete description how to implement new distribution and channel models would go beyond the scope of this report .",
    "however , a short sketch of the technical realization in the framework is presented which is useful in the context of the discussion in sec .",
    "[ physics ] and  [ angular ] .",
    "the idea is that during the event loop the methods of the attached models in each ` pchannel ` are called which allow each distribution object to update the particle properties without any restriction , these are :    * ` init ( ) ` : called only once before the event loop is started to allow the distribution to obtain the particle objects via the private identifiers as discussed in sec .",
    "[ angularcase ] .",
    "* ` prepare ( ) ` : initial action in each event of the loop .",
    "used e.g. for the beam smearing model shortly introduced in sec .",
    "[ detector_filter ] . * ` samplemass ( ) ` : change the mass of the particles . used e.g. for the resonance sampling . * ` samplemomentum ( ) ` : used by the genbod - model and fermi momentum sampling . * ` sampleangle ( ) ` : used by the models to sample polar angle distributions . * ` isvalid ( ) ` : used by rejection models , e.g. the @xmath143 polar alignment in the @xmath244 reaction , because in such a case it is not possible to obtain an analytical function in the c.m",
    ". frame . * ` checkabort ( ) ` : can be used by the models to force the ` preaction ` to abort the complete chain and start from the decay of the first channel .",
    "* ` finalize ( ) ` : final actions .",
    "* ` getlocalweight ( ) ` : update the particle weight of the daughters .",
    "for the coupled channel models , the situation is more complex , since they should be able to be called without existing particle objects .",
    "[ fig : coupled_channel ] sketches this idea : a very large number of hidden channels might be involved which in particular the case in the sampling of higher resonance masses .",
    "the reason is that as explained in sec .",
    "[ m3_model ] decay sampling calculations involve the mass shapes and vice versa .    in order to consider this , coupled channel classes add some more methods .",
    "these methods are _ not _ directly called by the ` pchannel ` as depicted in fig .",
    "[ fig : coupled_channel ] , they use a ` pdistribution ` ( which is bound always to a decay ) as a doorway to the coupled - channel models .",
    "we use 2 variants of channel models , namely :    1 .",
    "models used for particle mass shapes for the calculation of @xmath32 ( or @xmath226 ) , and : 2 .   for decays in order to calculate @xmath245 .",
    "these include the determination of the partial decay widths .",
    "the latter one may work in addition as the interface to the ` pchannel ` .",
    "both implementations use one or more of the following methods :    * ` getweight(double_t * mass , int_t * decay_index ) ` : calculating the weight , either @xmath32 or @xmath246 . if the ` decay_index ` array is defined , the functions @xmath32 and @xmath247 have to be replaced by @xmath226 and @xmath248 . * ` getamplitude(double_t * mass , int_t * decay_index ) ` : returns the complex amplitude as used in the context of sec .",
    "[ complex ] .",
    "* ` getwidth(double_t * mass , int_t * decay_index ) ` : calculates the mass - dependent width as discussed in eqns .",
    "( [ eqn : m1_width],[eqn : m2_width ] ) . * ` samplemass(double_t * mass , int_t * decay_index ) ` : some as above but without particle objects . * ` getbr(double_t mass , double_t * br ) ` calculates mass - dependent branching ratios .    as a final summary of the implemented framework ,",
    "let us consider what will be done if a reaction has been defined by the user , like    .... preaction my_reaction(3.13,\"p\",\"p\",\"p ns11 + [ p eta [ dilepton [ e+ e- ] g ] ] \" ,      \" nstar\",1 ) ; ....    this constructor first calls the particle data filler in order to set up the data base .",
    "the particle decays are normalized such that the sum of all branching ratios will be equal to one .",
    "the `` + '' operator involved in the beam - target interaction adds the composite to the data base ( which is further treated a normal particle ) .",
    "all involved ` pchannels ` are constructed by the ` preaction ` among with their ` pparticles ` . in a second step ,",
    "the ` pdistributionmanager ` is instantiated and filled with all models using an included logic on e.g. particle species and width .",
    "each of these coupled - channel models is linked to the data base .",
    "moreover , all distribution models are attached to their corresponding ` pchannels ` ( if existing ) and initialized , thus they have access to the particle objects .    by starting the loop :    .... my_reaction.loop(10000 ) ....",
    "the distribution interface methods are called in each step as defined above .",
    "at least one model per channel is required as a doorway to do the mass sampling , in our example it is the decay in one stable and one unstable particle as outlined in eqn .",
    "[ eqn : m2_mass ] .",
    "hidden model are called to sample the @xmath64 mass shape taking all its decay modes into account to get each individual partial decay width .",
    "this involves moreover the mass shape of other resonances ( e.g. the @xmath240 ) .    in the case that a selected chain is calculated , as in our example , mass sampling is done in each step using the partial decay width rather then the total , which is automatically assigned by the framework .    after the decay products of the first ` pchannel ` have been sampled the second ` pchannel ` is called .",
    "on one hand this is a simple decay of a resonance into two stable products . on the other hand , the angles as defined in figs .",
    "[ fig : meson_polar_angles ] and  [ fig : angles_definition ] are determined by the class ` pangulardistribution ` and used to sample the angular distribution function . on failure of the rejection method",
    "the complete chain is re - sampled thus avoiding any distortion of the @xmath64 mass shape .",
    "the third decay involves the mass sampling of the @xmath100 dalitz decay , discussed in sec .",
    "[ etadalitz ] .",
    "the sampled virtual photon is been decayed in a forth step into leptons with obviously fixed masses .",
    "this demonstrates that many cases are handled in background without any required user interaction .",
    "in summary , we presented the pluto framework , originally intended for studies with the hades detector .",
    "it is based on c++ and root and has a very user - friendly interface , starting from a few lines of code the event production for selected channels can be initialized .",
    "the standardized interface between the event loop and the models allows for the implementation of customized model classes .",
    "several interface methods may be used , for mass and momentum sampling up the handling of complex amplitudes in hidden coupled - channel calculations .",
    "this enables the calculation of spectral functions from first principles for hadronic resonances with multiple decay modes .",
    "this capability , together with a number of theoretical and empirical hadronic - interaction models implemented in the code , provide tools for realistic simulations of elementary hadronic interactions , such as resonance excitation and decay , elastic proton - proton scattering , dalitz decays , and direct dilepton decays of vector mesons .",
    "several empirical parameterizations on angular distributions and momentum sampling have been included .",
    "moreover , a thermal model has been developed .",
    "the latter one handles multi - hadron decays of hot fireballs , and provide tools for studies of thermally produced hadrons and the distributions of their observables , comparison studies and the subtraction of trivial sources .",
    "the addition of a decay manager interface trivializes the setting up and execution of multi - channel ( `` cocktail '' ) simulations in elementary collisions .",
    "the package presented has been used to perform simulations for various hades experiment proposals , for the comparison of the hades c+c heavy ion data and for the @xmath143 model - dependent acceptance corrections .",
    "moreover , it has been utilized in the simulation for the coming cbm experiment at fair .",
    "the versatility and re - usability of the code , as demonstrated by a number of user interface classes and simulation macros distributed with the package , allow for rapid principle simulation studies adapted for particular questions .",
    "moreover , it is fully object - oriented , thus any specific process model can be exchanged by the user and defined interface methods allow for the interaction with the framework .",
    "therefore , it is open for future developments , as this is needed for the upcoming hades experiments and simulations for the new fair facility at gsi .",
    "the original author of this package ( m.  kagarlis ) likes to thank christoph ernst for his input regarding theoretical models and their implementation , and rene brun for his frequent assistance with root - related questions , at the early stages of this project .",
    "moreover , he is grateful to richard arndt , whose seminal work on phase - shift analyses of @xmath249 and @xmath174 elastic scattering data over the years is the standard in the literature , who has kindly supplied an algorithm from his code ( said ) that is implemented for @xmath143 elastic scattering angular distributions .",
    "he finally wishes to express his gratitude to bengt friman , whose input has been invaluable in developing the models that have been implemented in the framework for the calculation of hadronic - resonance widths and spectral functions .    the first author of this report thanks c.  sturm and m.  bleicher for the fruitful discussion on the @xmath83 mass shape , and e.l .",
    "bratkovskaya for proofreading parts of the manuscript . thanks also to a.  kupzc for the recent hints on the @xmath143 elastic channel ."
  ],
  "abstract_text": [
    "<S> pluto is a monte - carlo event generator designed for hadronic interactions from pion production threshold to intermediate energies of a few gev per nucleon , as well as for studies of heavy ion reactions . </S>",
    "<S> the package is entirely based on root , without the need of additional packages , and uses the embedded c++ interpreter of root to control the event production . </S>",
    "<S> the generation of events based on a single reaction chain and the storage of the resulting particle objects can be done with a few lines of a root - macro . </S>",
    "<S> however , the complete control of the package can be taken over by the steering macro and user - defined models may be added without a recompilation of the framework . </S>",
    "<S> multi - reaction cocktails can be facilitated as well using either mass - dependent or user - defined static branching ratios .    </S>",
    "<S> the included physics uses resonance production with mass - dependent breit - wigner sampling . </S>",
    "<S> the calculation of partial and total widths for resonances producing unstable particles is performed recursively in a coupled - channel approach . here </S>",
    "<S> , particular attention is paid to the electromagnetic decays , motivated by the physics program of hades . </S>",
    "<S> the thermal model supports 2-component thermal distributions , longitudinal broadening , radial blast , direct and elliptic flow , and impact - parameter sampled multiplicities .    </S>",
    "<S> the interface allows angular distribution models ( e.g. for the primary meson emission ) to be attached by the user as well as descriptions of multi - particle correlations using decay chain templates . </S>",
    "<S> the exchange of mass sampling or momentum generation models is also possible . for elementary reactions , angular distribution models for selected channels </S>",
    "<S> are already part of the framework , based on parameterizations of existing data .    </S>",
    "<S> this report gives an overview of the design of the package , the included models and the user interface .    </S>",
    "<S> @xmath0institut fr kernphysik , johann wolfgang goethe - universitt ,   60486 frankfurt , germany . </S>",
    "<S> + @xmath1gesellschaft fr schwerionenforschung mbh , 64291 darmstadt , germany . </S>",
    "<S> + @xmath2institut fr kernphysik , forschungszentrum jlich , 52428 jlich , germany . </S>",
    "<S> + @xmath3ii.physikalisches </S>",
    "<S> institut , justus liebig universitt giessen , 35392 giessen , germany . </S>",
    "<S> + @xmath4smoluchowski institute of physics , jagiellonian university of cracow , 30059 cracow , poland . </S>",
    "<S> + @xmath5institut de physique nuclaire dorsay , cnrs / in2p3 , 91406 orsay cedex , france . </S>"
  ]
}