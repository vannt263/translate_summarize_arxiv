{
  "article_text": [
    "in this paper we introduce protocol which uses multiple tcp streams ( with different last mile link ) to establish single reliable connection attempting to maximize bandwidth and minimize latency .",
    "the goal of the protocol is to transmit data from one host to another using multiple network paths .",
    "usually one host is a mobile device ( for example a laptop or a mobile wireless router ) .",
    "another host is a proxy hosted on a server with fast connection to the internet .",
    "the proxy forwards connections from mobile device to hosts on the internet , which presumably do not support this protocol . in this scenario client opens multiple tcp or tls over tcp connections ( each on a different interface ) to the proxy and transmits data via them .",
    "when packet is to be transmitted it is queued in an internal waiting queue of bounded size . when link is ready to transmit data , it chooses packet based on _ packet scheduling algorithm_. it does not necessarily choose first packet in queue .",
    "for example there may be one link with small latency and one with bigger .",
    "when the link with bigger latency is ready to transmit , it still may be preferable to send first packet via the link with smaller latency ( which may not be yet ready ) .",
    "by using existing transport protocol ( tcp ) , our protocol leverages decades of work dedicated to improving tcp over various link types . to illustrate the point , there are 14 different tcp congestion control algorithms in the linux kernel alone .",
    "as tcp - based web is probably the most important application of the internet , we should expect futher development of tcp and similar protocols ( such as quic ) .",
    "in addition , in virtually all environments tcp port 443 is not filtered on firewalls , while udp or ip based protocols often are .",
    "if queue and reorder buffers are large enough our protocol uses all available bandwidth ( as it always sends packets if there is any ready - to - send stream ) .",
    "this is in constrast to existing network - level striping protocols , which must deal with discrepancies in assumptions of higher level protocols or need to reimplement congestion control themselves .",
    "tunneling multiple tcp over single tcp stream may cause head - of - line blocking  @xcite .",
    "one can be avoid this by using other transport protocols such as sctp or quic .",
    "this is particulary important as we think that quic may become dominant transport protocol for http/2.0 ( it is already commonly used by google chrome when connecting to google services ) .",
    "hsieh and sivakumar  @xcite argue that striping transmission over multiple tcp links is unoptimal .",
    "however , use of edpf in our protocol mitigates `` data rate differential '' problem raised in their work .",
    "futhermore , our experiments have shown that even when `` dumb striping '' is used this effect is not significant .",
    "let us consider amount of data received over a link @xmath0 , assuming sending side continously transmits .",
    "it is an increasing function @xmath1 of bytes over time .",
    "we define _ link characteristic function @xmath2 _ as a derivative of @xmath3 over time .",
    "[ xlabel = time ( ms ) , ylabel = bandwidth ( mbps ) , height=4 cm , width= ] coordinates ( 0,0 ) ( 200,0 ) ( 300,0 ) ( 400,0.6 ) ( 450,0.7 ) ( 500,0.8 ) ( 550,0.75 ) ( 700,0.70 ) ( 900,0.72 ) ( 1200,0.73 ) ;    for purpose of scheduling algorithms , we assume that in an instant of time link has constant latency and bandwidth .",
    "this leads to a simple link characteristic function ( figure  [ fig : figsimple ] ) .",
    "[ xlabel = time ( ms ) , ylabel = bandwidth ( mbps ) , height=4 cm , width= ] coordinates ( 0,0 ) ( 200,0 ) ( 399,0 ) ( 400,0.70 ) ( 800,0.70 ) ( 1200,0.70 ) ;    the characteristic function of an ideal link aggregation algorithm would be the sum of aggregated link characteristic functions ( figure  [ fig : figmulti ] ) .",
    "[ xlabel = time ( ms ) , ylabel = bandwidth ( mbps ) , height=4 cm , width= ] coordinates ( 0,0 ) ( 200,0 ) ( 399,0 ) ( 400,0.70 ) ( 599,0.70 ) ( 600,1.1 ) ( 1200,1.1 ) ;",
    "our scheduling algorithm is based on edpf  @xcite ( earliest delivery path first ) significantly modified for streaming transport protocols ( e.g. tcp ) .",
    "when a link @xmath4 becomes ready - to - send we need to choose which packet is to be send via it . to accomplish this goal",
    "the algorithm keeps some state :    1 .   a queue of packets along with the link which they are currently scheduled for 2 .   for each link @xmath5 : 1 .   @xmath6  an estimated number of bytes which is currently travelling over @xmath5 2 .",
    "@xmath7  an estimated _ link characteristic function _ for @xmath5    packets in the queue are scheduled by the following algorithm :    @xmath8 @xmath9 @xmath10 @xmath11    estimated number of bytes @xmath6 is increased when a packet is transmitted and decreased on every access by current estimated bandwidth multiplied by the time elapsed from the last access .",
    "estimated delivery time can be computed as    @xmath12    data transmitted over a link @xmath0 is the integral of its characteristic function :    @xmath13    we assume that the link characteristic function is simple  it has constant bandwidth and latency ( figure  [ fig : figsimple ] ) .",
    "then , based on equations and , the following holds :    @xmath14    in our case :    @xmath15      determining available bandwidth between two hosts on the internet is hard  @xcite .",
    "however , we only need accurate bandwidth estimation when a lot ( comprable to the size of congestion window ) of data is sent .",
    "arrival time of small data bursts is dominated by the link latency .",
    "bandwidth estimation is updated only when tcp buffers of the operating system are filled . in this case",
    "the bandwidth is simply a rate in which os empties the buffers .",
    "our packet scheduling algorithm can be effeciently implemented by exploiting equation  :    @xmath8 @xmath16 @xmath17 @xmath18 @xmath10 @xmath11 @xmath19",
    "while decision to dispatch packet to some link is the best possible based on information we have , network condition change may be unnoticable for a long time . for example , it is not possible to immediately detect upstream cable being unplugged from wifi ap we are using .",
    "this means that we may send packet to a link which latency has significantly increased ( even to infinity , when link is never available again ) .",
    "however our goal is to guarantee reliable delivery . in order to achieve that goal",
    "we introduce acknowledgement packets and packet sequence ids . when packet is sent via link , monotonically increasing seqence i d is prepended to it .",
    "acknowledgement packets contain seqence i d of last received packet and are sent periodically .",
    "when acknowledgement for an interval of packets is not received for some time , the packet is readded to the waiting queue .",
    "possibility of tunneling of existing protocols would greatly increase utility of link aggregation protocol . however , we can not simply tunnel ip packets over reliable connection .",
    "this can lead to `` tcp over tcp meltdown ''",
    "@xcite that happens when tcp congestion control from two layer interfere badly .    to overcome this issue we can terminate tcp connections on both sides and send raw tcp stream over aggregated link in a manner similar to how socks transporent proxies work . as tcp requires ordered and reliable delivery and proposed aggregation protocol provides only reliability",
    ", additional reorder buffer has to be implemented .    in most cases",
    "additional flow control has to be implemented , for example one similar to ssh-2 connection protocol  @xcite .",
    "it can be shown that the size of the reorder buffer has to be of order of retransmission timeout multiplied by the fastest link bandwidth .",
    "we have have tested two internet connections  lte ( cellular ) and ethernet - over - coaxial ( wired ) .",
    "target host was running in nearby datacenter with substantially larger available bandwidth .",
    "tests marked x10 took 20 seconds and were repeated 10 times .",
    "we have averaged data from all measurements .",
    "tests marked x1 took 60 seconds and was performed once . moving average filter was applied to bandwidth results with window size equal to 100 ms ( blue line ) and 1000 ms ( green line ) .",
    "lte has fairly high latency and low bandwidth .",
    "eoc connection has smaller latency .",
    "however , large network buffers also increase latency during congestion .",
    "we can see that dumb scheduling algorithm has latency worse than both links .",
    "bandwidth jitter is also large .",
    "both effects can be caused by packets arriving out of order and waiting in the reorder buffer .",
    "however , overall bandwidth is roughly equal to the sum of bandwidth of aggregated links .",
    "our packet scheduling algorithm also has bigger latency than both links during sustained transfer .",
    "this is due to the packet scheduling being imperfect when network conditions are not constant .",
    "however , latency of initial packets is equal to the latency of the link with better latency .",
    "our approach can achieve goals of more complex protocol in a simpler way by aggregating links above transport layer . moreover , it has bigger potential for adoption in current networks .",
    "however , due to effects like tcp over tcp meltdown@xcite , it is not well suited for tunneling of non - stream protocols such as udp .",
    "osamu honda , hiroyuki ohsaki , makoto imase , mika ishizuka , junichi murayama _ understanding tcp over tcp : effects of tcp tunneling on end - to - end throughput and latency_. osaka university , ntt corporation"
  ],
  "abstract_text": [
    "<S> last mile link is often a bottleneck for end user . </S>",
    "<S> however , users typically have multiple ways of accessing the internet ( cellular , adsl , public wifi ) . </S>",
    "<S> this observation led to creation of protocols like mtcp  @xcite or r - mtp  @xcite . </S>",
    "<S> current bandwidth aggregation protocols are packet based . </S>",
    "<S> however , this is not always practical  for example , non - tcp protocols are often blocked on firewalls . </S>",
    "<S> moreover , a lot of effort was devoted over the years into making single - path tcp work well over various types of links . in this paper </S>",
    "<S> we introduce protocol which uses multiple tcp streams to establish single reliable connection attempting to maximize bandwidth and minimize latency . </S>"
  ]
}