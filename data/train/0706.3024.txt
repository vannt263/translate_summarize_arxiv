{
  "article_text": [
    "early last century dehn @xcite introduced three problems . we know them now as the word problem , the conjugacy problem and the isomorphism problem . given a finitely generated group @xmath0 and generating set @xmath1 , we have solved the word problem if we can give a procedure which determines , for each word @xmath2 whether or not @xmath3 represents the identity .",
    "we have solved the conjugacy problem if we can give a procedure which determines , for each pair of words @xmath4 , whether they represent elements which are conjugate in @xmath0 . for the isomorphism problem",
    ", dehn invites us to develop procedures for determining if two given groups are isomorphic .    using hyperbolic geometry dehn proceeded to solve the word and conjugacy problems for the fundamental groups of closed hyperbolic surfaces .",
    "let us take a moment to describe his solution of the word problem",
    ". for specificity , let us take the two - holed surface group @xmath5[x_2,y_2]\\rangle.\\ ] ] the cayley graph of this group sits in @xmath6 as the 1-skeleton of the tessellation of @xmath6 by regular hyperbolic octagons , and the relator @xmath7[x_2,y_2]$ ] labels the boundary of each octagon .",
    "a word @xmath3 now lies along the boundaries of these octagons and is a closed curve if and only if it represents the identity .",
    "dehn then shows that any reduced closed curve travels around the far side of some `` outermost '' octagon and in doing so contains at least 5 of its 8 edges .",
    "that is , each reduced word representing the identity contains more than half of a relator .",
    "( here we are allowing cyclic permutations of @xmath8 and @xmath9 . )",
    "this solves the word problem , for we can decompose the relator as @xmath10 where @xmath11 appears in @xmath12 and @xmath11 is longer than @xmath13 .",
    "this allows us to replace @xmath3 with the shorter word @xmath14 .",
    "if the word @xmath3 represents the identity and @xmath15 is not empty , we can again shorten @xmath15 in similar manner .",
    "this process either ends with a non - empty word which we can not shorten , in which case @xmath3 did not represent the identity , or with the empty word in which case @xmath3 did represent the identity .",
    "accordingly , we say the the group @xmath0 has a _",
    "dehn s algorithm _ if it has a finite presentation @xmath16 such that every word @xmath17 representing the identity contains more than half of some relator in @xmath18 .",
    "equivalently , we could write @xmath18 as a finite set of relations @xmath19 so that for each @xmath20 , @xmath21 and every word @xmath2 representing the identity contains some @xmath22",
    ".    it is a theorem @xcite @xcite @xcite that a group has such a dehn s algorithm if and only if it is one of those groups which are variously called gromov hyperbolic , hyperbolic , negatively curved or word hyperbolic .",
    "cannon @xcite suggested we take the following viewpoint .",
    "we have a class of machines designed to carry out due to the need to exorcize ( or traverse ) the blanks left by each replacement .",
    "if it is implemented on a random access machine , it is @xmath23 due to the size of the words needed to indicate addresses .",
    "if it is implemented out on a multi - tape machine it is @xmath24 since here blanks `` evaporate '' between the tapes @xcite .",
    "recently , @xcite has shown that there is a real - time multi - tape implementation . ]",
    "dehn s algorithm .",
    "such a machine would be equipped with a finite set of length reducing replacement rules @xmath25 .",
    "it would have a window of finite width through which it would examine a given word .",
    "this window would start at the beginning of the word .",
    "as the window moved along , the machine would scan the word looking for occurrences of @xmath22 s .",
    "if it fails to find any @xmath22 and is not already at the end of the word , it moves forward . if it finds a @xmath22 it replaces it with the corresponding @xmath26 .",
    "( the blank spaces magically evaporate . )",
    "the window then moves backwards one letter less than the length of the longest @xmath22 or to the beginning of the word if that is closer .",
    "it accepts a word if and only if it succeeds in reducing that word to the empty word .",
    "the key difference here is that our working alphabet is no longer restricted to the group generators .",
    "we shall see that there are several different classes of machines here with some rather divergent properties .",
    "we do not know if these competing definitions for the title of `` '' yield different classes of groups .",
    "our most restrictive version solves the word problem in a much larger class of groups than the word hyperbolic groups .",
    "we describe these classes of machines in terms of rewritings that they carry out . in each of these ,",
    "we are supplied with an alphabet @xmath27 and a finite set of pairs @xmath28 where for each @xmath20 , @xmath21 .",
    "we call these _ rewriting rules _ and write @xmath29 . we call @xmath22 and @xmath26 the _ left - hand side _ and the _ right - hand side _ respectively . for technical reasons",
    "we also have to allow the machines to have _ anchored _ rules : these are rules which only apply when the left - hand side is an initial segment of the current word .",
    "we write ` ^`@xmath11 for the left - hand side of an anchored rule and consider @xmath11 and ` ^`@xmath11 to be distinct .",
    "let @xmath30 be a finite set of rewriting rules such that each  side appears at most once .",
    "we say that @xmath31 is _ reduced _ with respect to @xmath30 if it contains none of the  sides in @xmath30 .",
    "the following algorithm , which we call the _ _  given by @xmath32 , replaces any @xmath31 by a reduced word in finitely many steps .",
    "if @xmath3 contains a  side , find one which ends closest to the start of @xmath3 ; if several end at the same letter , choose the longest ; if possible , choose an anchored one in preference to a non - anchored one of the same length . replace it by the corresponding  side .",
    "repeat until @xmath3 is reduced .",
    "here is a slightly different definition : the _ _  given by @xmath32 , replaces any @xmath31 by a reduced word in finitely many steps . here",
    "@xmath30 may also include end - anchored rules , with left - hand side @xmath11`^ ` , and rules anchored at both ends .",
    "if @xmath3 contains a  side , find one which starts closest to the start of @xmath3 ; if several start at the same letter , choose the longest ; prefer anchored rules when there is a choice .",
    "replace it by the corresponding  side . repeat until @xmath3 is reduced .",
    "each of these algorithms gives a reduction map @xmath33 where @xmath34 is the reduced word which the algorithm produces starting with @xmath3 .",
    "the  gets its name from the following property : if @xmath8 is the reduction map of an , then @xmath35 .",
    "we may wish to apply an  only to words in @xmath36 where @xmath37 .",
    "we then refer to @xmath38 as the _ input _ alphabet and @xmath27 as the _ working _ alphabet .",
    "the algorithm can then be given as a triple @xmath39 .",
    "we say that @xmath40 is the _ language _ of this triple .",
    "the same can be done for s    since this work first appeared in preprint form , mark kambites and friedrich otto @xcite have shown that the  lanaguages are contained in the set of chrurch - rosser languages and that a language is a  language if and only if it is a church - rosser language .    .",
    "clearly dehn s algorithm can be implemented as an , with @xmath41 and @xmath30 obtained from the @xmath22 .",
    "we generalize this as follows .",
    "( see section  [ endo ] for the example which originally motivated this definition . )    a group @xmath0 , with semi - group generators @xmath1 , has a algorithm if there exists an alphabet @xmath42 , and set of rewriting rules @xmath30 over @xmath27 , such that the  reduces @xmath43 to the empty word , if and only if @xmath44 represents the identity in @xmath0 .",
    "we have chosen s because of their nice group theoretic properties . using s in the previous definition",
    "ensures that the algorithm remembers group elements .",
    "that is , if @xmath0 has a algorithm with input alphabet @xmath1 and reduction map @xmath8 , and there are @xmath45 and @xmath46 in @xmath47 so that @xmath48 , then @xmath45 and @xmath46 denote the same element of @xmath0 .",
    "this property does not hold in general if one uses s.    on the other hand , s have nice language theoretic properties in that they support composition . in the following , we will conceal some technical details in the word `` mimics '' .",
    "one can imagine the   as being carried out by a machine with a finite number of internal states @xmath49 and a list of rewriting rules @xmath50 for each state @xmath49 .",
    "there is a  which mimics the action of this multi - state machine .",
    "consequently , given two s over the same alphabet @xmath27 with reduction maps @xmath51 and @xmath8 , there is a  which mimics a  whose reduction map is @xmath52 .",
    "we will refer to a algorithm carried out using a  as a non - incremental algorithm .      before describing our results",
    ", we note that many of these were independently rediscovered by mark kambites and friedrich otto @xcite .",
    "we show here that groups with algorithms have the following closure properties :    1 .",
    "if @xmath0 has a algorithm over one finite generating set then it has a algorithm over any finite generating set .",
    "if @xmath0 has a algorithm and @xmath0 is a finite index subgroup of @xmath53 then @xmath53 has a algorithm .",
    "if @xmath0 and @xmath53 have algorithms , then @xmath54 has a algorithm .",
    "if @xmath0 has a algorithm and @xmath53 is a finitely generated subgroup of @xmath0 then @xmath53 has a algorithm .",
    "this last closure property significantly increases the class of groups with algorithms .",
    "every word hyperbolic group has a algorithm , and as bridson and miller have pointed out to us , the finitely generated subgroups of word hyperbolic groups include groups which are not finitely presented and groups with unsolvable conjugacy problem @xcite .",
    "we also show that groups with algorithms include    1 .",
    "finitely generated nilpotent groups , 2 .",
    "many relatively hyperbolic groups including geometrically finite hyperbolic groups , and fundamental groups of graph manifolds all of whose pieces are hyperbolic .",
    "we prove the first of these by means of expanding endomorphisms .",
    "the parade example of an expanding endomorphism is the endomorphism of the integers @xmath55 .",
    "the facts that this map makes everything larger and that its image is finite index combine to give us decimal notation .",
    "our algorithms for nilpotent groups consist of this sort of decimalization together with cancellation .",
    "we are then able to combine these methods with the usual word hyperbolic algorithms to produce the second class of results .",
    "we are also able to prove that many groups do not have algorithms .",
    "we have the following criterion : suppose @xmath0 has two subsets , @xmath56 and @xmath57 and that both of these are infinite and the growth of @xmath57 is exponential .",
    "suppose also that these two sets commute .",
    "then @xmath0 does not have a algorithm .",
    "this allows us to rule out many classes of groups including baumslag - solitar groups , braid groups , thompson s group , solvegeometry groups and the fundamental groups of most seifert fibered spaces .",
    "in particular , we are able to say exactly which graph manifolds have fundamental groups which have algorithms .    we have discussed algorithms which are carried out by s and s. they can also be carried out non - deterministically . given a finite set of length reducing rewriting rules ,",
    "these solve the word problem nondeterministically if for each word @xmath3 , @xmath3 represents the identity if and only if it can be rewritten to the empty word by some application of these rules .",
    "all of these competing versions are closely related to the family of _ growing context sensitive languages_. a growing context - sensitive grammar is one in which all the productions are strictly length increasing .",
    "it is a theorem that a language @xmath58 is a growing context - sensitive language if and only if there is a symbol @xmath59 and a set of length reducing rewriting rules such that a word @xmath3 is in @xmath58 if and only if it can be rewritten to @xmath59 by some application of these rules .",
    "while the family of languages with non - deterministic algorithms and the family of growing context - sensitive languages may not be exactly the same , our criterion for showing that a group does not have a algorithm also seems likely to show that its word problem is not growing context - sensitive .",
    "now all automatic groups ( and their finitely generated subgroups ) have context - sensitive word problems @xcite . thus extending this result to the non - deterministic case",
    "would show that the class of groups with growing context - sensitive word problem is a proper subclass of those with context - sensitive word problem    examples of groups with context - sensitive word problem , but not growing context - sensitive word problem are given in @xcite . in work in progress",
    "( joint with derek holt and sarah rees ) we show that a language is growing constext - sensitive if and only if it is the language of a non - deterministic algorithm .",
    "in addition , we show that the methods of sections [ splicingetc ] and [ nodehn ] extend to these non - deterministic algorithms .",
    "this has additional language - theoretic consequences .    .",
    "we wish to thank gilbert baumslag , jason behrstock , brian bowditch , martin bridson , bill floyd , swarup gadde , bob gilman , susan hermiller , craig hodgson , chuck miller , walter neumann and kim ruane for helpful conversations .",
    "we also wish to give special thanks to jim cannon for suggesting the key idea of this work to us during a conference at the anu in 1996 , and for working with us during the evolution of this paper .",
    "let us start by justifying the term .",
    "[ incremental ] let @xmath60 denote reduction by a fixed . then for all @xmath61 , @xmath62",
    "if a substitution can be made in @xmath11 , the same substitution will be made in @xmath63 .",
    "therefore , in exactly the number of steps the algorithm takes to change @xmath11 into @xmath64 , it changes @xmath63 into @xmath65 .",
    "this shows that @xmath65 is an intermediate result of running the algorithm on @xmath63 .",
    "it follows that both must reduce to the same eventual result i.e. , @xmath35 .",
    "[ remembers ] let @xmath8 denote reduction with respect to a algorithm @xmath66 for @xmath0 .",
    "let @xmath67 be words in @xmath47 such that @xmath68 .",
    "then @xmath45 and @xmath46 represent the same element of @xmath0 .    if @xmath48 then @xmath69 from which it follows , by lemma  [ incremental ] , that @xmath70 equals the empty word .",
    "but since @xmath8 comes from a algorithm , this implies that @xmath45 and @xmath46 represent the same group element .",
    "this means that a algorithm always remembers what element of the group it was fed . in a sense",
    "this tells us that @xmath71 is a kind of `` canonical form '' for @xmath72 .",
    "as we shall see , proposition  [ remembers ] does not hold for non - incremental algorithms .",
    "the following proposition shows that the incremental rewriting algorithms form a subclass of the non - incremental ones .",
    "[ generalizes ] given rewriting rules @xmath73 there is a set of rewriting rules @xmath74 such that the non - incremental rewriting algorithm of @xmath74 carries out exactly the same substitutions as the incremental rewriting algorithm of @xmath73 .",
    "suppose we carry out the non - incremental rewriting algorithm given by @xmath73 .",
    "in what situation would it make a different substitution to that chosen by the ?",
    "clearly only when we encounter nested left - hand sides in our word . in that case the non - incremental algorithm chooses the longer word because it starts first , whereas the incremental algorithm chooses the shorter because it ends first .",
    "but this means that the  will never actually invoke the rule with the longer  side .",
    "therefore we can discard from @xmath30 any rules whose  sides contain another  side ending before the last letter .",
    "call the set of rules we obtain @xmath75 . using these rules",
    "both algorithms make exactly the same substitutions .",
    "the key result underlying the group theoretic properties of algorithms is that if a group has a algorithm with respect to one ( finite ) set of generators , it has one with respect to any other .",
    "let @xmath1 and @xmath76 be sets of semi - group generators for @xmath0 , such that @xmath66 is a algorithm for @xmath0 .",
    "each element of @xmath76 can be expressed as a word in @xmath47 .",
    "let @xmath77 be the length of the longest such word .",
    "let @xmath78 be the set of non - empty words of length at most @xmath77 in @xmath79 .",
    "we can use it as an alphabet , each of whose letters encodes up to @xmath77 letters of @xmath27 . since @xmath80",
    "we can regard @xmath76 as a subset of @xmath81 .",
    "the _ writing out _ map from @xmath82 to @xmath79 maps a word to the concatenation of its letters .",
    "lemma  [ compression ] shows that given @xmath83 we can construct an algorithm @xmath84 which , by `` mimicking '' @xmath83 , deletes its input precisely when @xmath83 deletes the written out version of the same input . unfortunately the algorithm we give is not quite an : its rules are not strictly length decreasing .",
    "the main point of this section is to explain how we can overcome this problem and give an  which does what we want .",
    "[ compression ] let @xmath85 be an incremental ( or non - incremental ) rewriting algorithm .",
    "then for any integer @xmath86 there exists a non - strictly length decreasing incremental ( resp .",
    "non - incremental ) rewriting algorithm @xmath87 with the following property .",
    "for each word @xmath88 , the reduction of @xmath3 with respect to @xmath87 written out , equals the reduction with respect to @xmath85 of @xmath3 written out .",
    "let @xmath89 be the length of the longest  side in @xmath30 .    for an incremental algorithm ,",
    "the set of  sides in @xmath75 is the set of all words of length less than or equal to @xmath89 in @xmath82 , with and without leading ` ^ ` s , which , when written out , contain a side of @xmath30 . for each such word",
    ", we write it out , apply one substitution from @xmath85 , and write it back into @xmath82 to obtain the corresponding  side ; an anchored rule can only be applied if the  side starts with a ` ^ ` .    that this can be done without making the  side any longer in @xmath82 than the  side should be clear : one case when the  side can not be any shorter",
    "is when the  side is one letter long , and the substitution we make on the written out word does not entirely delete it .",
    "we have to check that , modulo writing out , the two algorithms carry out the same substitutions .",
    "let @xmath3 , written out , contain a  side @xmath11 of @xmath30 .",
    "some subword of @xmath3 , adorned with a ` ^ ` if it is an initial segment , contains @xmath11 , and is a side in @xmath75 .",
    "the first @xmath75-  side ca nt end to the left of the end of @xmath11 , since it would then contain no @xmath30-at all .",
    "therefore the first @xmath75-  side contains @xmath11 , and is anchored if @xmath11 is an initial segment .",
    "the rule in @xmath75 for this  side carries out the substitution in @xmath30 for @xmath11 .    for a non - incremental algorithm",
    ", the set of  sides in @xmath75 is the set of words @xmath90 of length less than or equal to @xmath89 , with optional leading and trailing ` ^ ` s , such that    1 .",
    "@xmath91 written out contains a  side of @xmath30 , and 2 .",
    "if the first @xmath30-  side in @xmath91 starts fewer than @xmath89 @xmath27-letters from the end of @xmath91 , then @xmath91 ends with a ` ^ ` .",
    "let @xmath3 and @xmath11 be as above .",
    "we can find an @xmath75-  side @xmath91 in @xmath3 which contains @xmath11 .",
    "now @xmath11 could have a subword @xmath92 which is also a  side in @xmath30 . in principle , the first @xmath75-  side in @xmath3 might contain @xmath92 but not @xmath11 , but this is ruled out by ( 2 ) . therefore the first @xmath75-  side in @xmath3",
    "contains @xmath11 , and the corresponding rule does the right substitution .",
    "we want to adjust this basic construction so as to obtain rules which are strictly length decreasing .",
    "if each rule in @xmath30 were to delete at least @xmath77 letters , there would be no problem , but this will not generally be the case .",
    "when the input word has two or more letters we might write the result of a single substitution as a shorter word in @xmath93 .",
    "this does nt really solve the problem since we end up working in larger and larger alphabets . and what about a word of length @xmath94 in @xmath82 which when written out and reduced , is non - empty ?",
    "the algorithm we construct will not touch such a word unless it can delete it entirely .",
    "in fact , unless it can delete its input completely , it may stop short with some intermediate result of the original algorithm .",
    "this is fine since we only really care whether or not an input word is deleted completely .",
    "we return first to the original algorithm @xmath85 , and try to see to what extent it can be made to remove several letters at a time when it substitutes .",
    "it is helpful to think of the algorithm as being carried out by a machine which views the word it is processing through a window of size @xmath89 , where @xmath89 is the length of the longest  in @xmath30 .",
    "since the incremental algorithm works by observing the earliest ending left hand side , one might imagine that the machine acts when a left hand side ends at the end of the window .",
    "similarly , a  acts when a  side starts at the start of the window .",
    "if there are no  sides visible , the machine steps one letter to the right , or stops if it has reached the end of the word .",
    "if there _ is _ a side , it substitutes and steps @xmath95 letters to the left",
    ".    let @xmath3 be a word containing a  and let @xmath11 be the first such in @xmath3 .",
    "let us look at a subword @xmath91 of @xmath3 extending @xmath96 letters to the left of @xmath11 , and @xmath97 letters to the right , and see what the machine does .",
    "the machine s actions are entirely determined by the contents of this _ @xmath98-neighborhood of @xmath11 _ until such time as it needs to examine letters either to the left or to the right of it .",
    "we say that the machine goes to the left or to the right accordingly . in the first case",
    "the machine must first make at least @xmath99 substitutions .",
    "we call each substitution made in this way a _ subword reduction .",
    "_    if there are fewer than @xmath100 letters to the left of @xmath11 , @xmath91 is an initial segment of @xmath3 ; then the machine s actions are determined by the contents of @xmath91 until it ( inevitably ) goes to the right .",
    "if there are fewer than @xmath101 letters to the right , the machine can either go to the left or terminate .",
    "we make rules which carry out several substitutions at a time .",
    "the new  sides are the reducible words with no more than @xmath100 letters before the first  side , and no more than @xmath101 letters after it .",
    "the new  sides are the result of running the machine on the  sides until it goes to the left or the right . if the new side has fewer than @xmath100 letters before its first @xmath30-  side , we allow the machine to run until it goes to the right and make the resulting rule be anchored at the start . if there are fewer than @xmath101 letters after the @xmath30-  side , we allow the machine to run until it goes to the left or terminates ; for a  we make the resulting rule be end - anchored .",
    "we call the rules we obtain _ left - going _ if the machine went to the left and _ right - going _ if it went to the right or terminated",
    ".    finally , let us discard all right - going rules which have a  side with fewer than @xmath101 letters after the first @xmath30-  side , and non - empty  side .",
    "let @xmath75 contain all the remaining rules .",
    "we claim that as long as @xmath102 and @xmath103 a machine using the rules @xmath75 still carries out the same substitutions but may stop short of fully reducing the input word ( with respect to @xmath30 ) .",
    "let @xmath3 be a word containing an @xmath30-  and let @xmath11 be the first such in @xmath3 .",
    "we have to show that if @xmath3 contains an @xmath75-  then the first such contains @xmath11 .",
    "an @xmath75-  ca nt end to the left of the end of @xmath11 since in the incremental case it would contain no @xmath30- , while in the non - incremental case it would have to be a non - end - anchored rule with fewer than @xmath101 letters to the right of its first @xmath30- . therefore _ if _ any @xmath75-  contains @xmath11 , the first one in @xmath3 does .    if we can find no @xmath75-  containing @xmath11 then the @xmath98-neighborhood of @xmath11 must be one of the deleted  sides . in that case @xmath11",
    "ends within @xmath101 letters of the end of @xmath3 . since @xmath104 , any other rule which might apply , containing some other @xmath30-  @xmath105 to the right of @xmath11 , would also see @xmath11 , which is a contradiction .",
    "the fact that the rule for the @xmath98-neighborhood of @xmath11 has been deleted means that in this case the original algorithm would have terminated with a non - empty result .",
    "with @xmath3 and @xmath11 as above , we define the _ reduction point _ of an to be the  edge of @xmath11 , while for a  it is the  edge of @xmath11 .",
    "each rule is either ,    1 .",
    "left - going , deleting at least @xmath99 letters , 2 .",
    "right - going , deleting the whole  side , or 3 .",
    "right - going , shifting the reduction point at least @xmath106 letters to the right , or out of the word entirely .",
    "[ compression2 ]",
    "let @xmath85 be an incremental ( or non - incremental ) rewriting algorithm .",
    "then for any integer @xmath86 there exists an incremental ( resp .  non - incremental ) rewriting algorithm @xmath107 with the following property . for each word @xmath88 , the reduction of @xmath3 , with respect to @xmath107 , written out",
    "is an intermediate result of the reduction of @xmath3 written out with respect to @xmath85 .",
    "it is empty if and only if the latter is also .",
    "let us first give names to parts of our new working alphabet .",
    "let @xmath108 be all words in @xmath109 of length at most @xmath77 , and let @xmath110 be all longer words .",
    "our new input alphabet is a subset of @xmath108 , and an input word is a word in @xmath111 .    at",
    "any given time during the running of our new algorithm the current word will satisfy the following conditions .",
    "no @xmath110-letters end ( in the written out word ) to the right of the reduction point .",
    "any @xmath110-letters present will end at least @xmath112 original letters apart , i.e.  they will be relatively sparse",
    ".    we shall give rules that , modulo writing out , carry out subword reduction looking at least @xmath113 original letters to the left of the first  side and @xmath114 letters to the right .",
    "the left - hand sides are words in @xmath115 such that    1 .",
    "each is @xmath30-reducible when written out , 2 .",
    "each has up to @xmath116 original letters before the first original  side and up to @xmath117 following it , 3 .",
    "any @xmath110-letters present come before the reduction point and are sparse , as noted above , 4 .",
    "if there are fewer than @xmath100 original letters before the first original  side , it starts with a ` ^ ` , and 5 .",
    "( non - incremental case only ) if there are fewer than @xmath101 original letters following the first original  side , it ends with a ` ^ ` .",
    "modulo writing out , these are the same  sides as before except that we have to allow for the granularity of the @xmath108 and @xmath110 letters .    to obtain each corresponding  side we apply subword reduction to the written out word for @xmath118 steps or until subword reduction is complete if this happens first : it follows that there will be no left - going rules . if @xmath118 substitutions were made ( or the  side was deleted entirely ) we can write the result using at least one fewer @xmath110-letters , or fewer @xmath108-letters if no @xmath110-letters were present . since the reduction point moves at most @xmath112 original letters to the left , it moves past at most one @xmath110-letter",
    ". therefore we can write our  side so as to preserve the above conditions on the placement and sparsity of @xmath110-letters . if subword reduction is complete before @xmath118 substitutions have been made , and the result is non - empty , it may be impossible to keep the number of @xmath110 letters fixed and still write a length reducing rule .",
    "if this is the case , and there were fewer than @xmath101 original letters after the original  side , we discard the rule entirely . with @xmath119 or more",
    "original letters after the  side , only reductions which remove fewer than @xmath77 letters can force us to introduce a new @xmath110-letter . for an  the new reduction point will be to the right of our subword . by writing the new @xmath110-letter at the end of the  side",
    "we ensure that it ends at least @xmath120 letters to the right of the previous reduction point . since @xmath121 the sparsity of @xmath110-letters is preserved . for a  the new reduction point could be up to @xmath95 letters in from the end of our  side .",
    "thus our new @xmath110-letter might have to end up to @xmath122 original letters from the end of the .",
    "this still puts it at least @xmath123 letters to the right of the previous reduction point .",
    "the rules we have given are strictly length decreasing .",
    "they preserve the conditions given on the placement of @xmath110-letters .",
    "modulo writing out and working several steps at a time , the rules apply the same substitutions as the original algorithm . if a word is reducible when written out , either a rule will apply , or the word will be a few steps away from being reduced with a non - empty result .",
    "it follows that the new rules delete a word in @xmath124 if and only if the original rules deleted the same word written out .",
    "let us introduce the notion of a finite state .",
    "as with rewriting algorithms these can be either incremental or non - incremental .",
    "( we describe the non - incremental version : to obtain the incremental version , read `` ending at the current position '' wherever the definition says `` starting at the current position . '' ) such a machine comes with a finite collection of states , @xmath125 .",
    "one of these , @xmath126 is the start state . for each state",
    "@xmath127 there is a collection of length reducing replacement rules @xmath128 .",
    "there is also a transition function which chooses a new state depending on the current state and the contents of the subword of length @xmath89 starting at the current position , where @xmath89 is an upper bound for the lengths of all the sides .",
    "such a machine starts in the start state at the beginning of the input word . in state @xmath129 , it looks at the next @xmath89 letters for the longest  in @xmath130 starting at the current position , and to determine its new state .",
    "it then either substitutes and steps @xmath89 letters to the left , or steps one letter to the right . in either case",
    "it switches to the new state .",
    "it terminates when it reaches the end of the word with no further replacements possible .",
    "observe that when a   with state terminates it does not necessarily leave behind a word which is free of  sides . while s with state are ostensibly more powerful than rewriting algorithms ,",
    "we show that , by storing the state information in the current word , we can get a rewriting algorithm to `` mimic '' a .",
    "we then use s with state to show that s have a nice composition property .",
    "we can extend the concept of _ writing out _ to include any map @xmath131 induced by a map @xmath132 .",
    "a machine _ stops short _ if it terminates at a point when all remaining substitutions would have applied to a final segment of bounded length .",
    "one machine _",
    "mimics _ another if the result of the mimic written out is always a result of the original stopping short .",
    "[ statemachine ] given a non - incremental ( or incremental ) finite state , there is a  ( resp .  ) which mimics it .",
    "the mimic terminates with an empty word if and only if the finite state   terminates with an empty word _ in its start state .",
    "_    we give first a non - strictly length decreasing rewriting algorithm . at the end",
    "we sketch how the trick used in the proof of lemma  [ compression2 ] of introducing widely spaced `` multi - letter '' letters allows us to give strictly length - decreasing rules .",
    "the reason we prefer to give a non - strictly length decreasing algorithm here is that , while the details of making strictly length - decreasing rules are not hard , they would obscure the basically simple idea behind this proof .",
    "let @xmath27 be the working alphabet of our .",
    "we make copies of @xmath27 in different colors , one corresponding to each state of the machine , and one more in white . the input alphabet , and the copy of @xmath27 corresponding to the start state , we color indigo .",
    "at any given time during the running of the mimic algorithm an initial segment ( possibly empty ) of the current word is white .",
    "the first colored letter indicates a state of the   and its current position , and the remaining letters are all indigo .",
    "let @xmath89 be the length of the longest  of the .",
    "we specify the substitutions we wish the mimic to make rather than giving the precise rules .",
    "look @xmath89 letters to either side of the first colored letter .",
    "if a substitution is indicated ( according to the state of the first colored letter ) we make it , color up to @xmath95 letters indigo , and one the color of the new state . if no substitution is indicated , the first colored letter is turned white and the next letter is colored with the new state .",
    "a special case arises for rules which delete their whole  side and do not lead to the start state .",
    "since there is no suitable letter to color with the new state the mimic instead writes a colored blank .",
    "we then have to add a few more rules which take a colored blank followed by a letter and write the same letter in that color .",
    "it is not hard to see that the mimic and the   make essentially the same substitutions .",
    "when the mimic terminates it is with a word that is white except for its final letter which indicates the termination state of the .",
    "if the   terminates with an empty word , in a non - input state , the mimic leaves behind a single colored blank .    to make these rules length decreasing we instead look @xmath133 letters before and after the first colored letter in the incremental case ( @xmath133 before and @xmath134 after if non - incremental )",
    "we run the  as a subword reduction .",
    "if no substitutions are made , the first colored letter is shifted at least @xmath133 letters to the right and two white letters are replaced by one encoding them both .",
    "if subword reduction goes to the left , enough substitutions will be made to allow us to remove any `` double '' letters we find on the way ( these ending at least @xmath133 original letters apart ) . if we ca nt see @xmath133 ( resp .",
    "@xmath134 ) letters to the right we may have to discard the relevant rule and allow the mimic machine to terminate a little prematurely .",
    "this only happens in cases where the machine is unable to make any further substitutions between the current point and the end of the word .",
    "let @xmath32 and @xmath74 be s with reduction maps @xmath135 and @xmath136 respectively . ideally there would then be a  with reduction map @xmath137 .",
    "unfortunately this does nt appear quite to be the case .",
    "we have to allow the resulting algorithm to give its answer in some `` compression alphabet '' @xmath78 , and we may have to allow it to stop short of reaching its answer .",
    "we do nt really mind the compression alphabet , but having a machine stop short is a problem",
    ": it gets in the way of doing any further composition .",
    "reluctantly , we must add a further `` flavor '' of  to our collection .",
    "an _ nearly strict _  is one which may include some length preserving _ ending rules : _ these are end anchored rules such that the resulting algorithm has the property that one of these will apply only when the word is reduced with respect to all the strictly length decreasing rules , and afterwards the word will be fully reduced .",
    "we shall not consider here the question of how to determine , in general , whether a given set of rules has this property .",
    "what is hopefully clear is that if , in the proof of lemma  [ compression2 ] , we put back the deleted rules , we obtain a nearly strict .",
    "modulo writing out , the resulting algorithm achieves the reduction map of the original algorithm .",
    "furthermore it makes no difference to the proof if the original algorithm is itself nearly strict .",
    "[ compression3 ] let @xmath85 be a nearly strict .",
    "then for any integer @xmath86 there exists a nearly strict   @xmath107 with the following property . for each word @xmath88 ,",
    "the reduction of @xmath3 , with respect to @xmath107 , written out is the reduction of @xmath3 written out with respect to @xmath85 .",
    "similarly , when we construct a mimic for a non - incremental   with state , we can avoid stopping prematurely by allowing ending rules for the resulting machine .",
    "we can also allow a  with state to have ending rules .",
    "these are length preserving rules which put it into a _ terminal state , _ a state without rules which the machine can not leave .",
    "such a machine can also be mimicked by a nearly strict , the proof being virtually unchanged .",
    "we shall show that it is possible to compose nearly strict s. we can always recover a genuine which might stop short , by discarding the length preserving rules .",
    "[ composition ] let @xmath32 and @xmath74 be nearly strict s with reduction maps @xmath135 and @xmath136 respectively .",
    "there is a nearly strict @xmath138 which mimics the process of first applying @xmath32 and then applying @xmath74 .",
    "the reduction map of @xmath138 written out is the composition @xmath139 .",
    "this process can be carried out by a finite state . in its initial state",
    "it applies the rules in @xmath30 .",
    "once no more rules apply and it approaches the end of the word , it switches to a second state . in this state",
    "it simply compresses a little bit until it arrives at the start of the word again .",
    "then it switches into a third state where it uses the rules in @xmath75 modified , as in lemma  [ compression3 ] , for compressed input .",
    "what if @xmath30 includes ending rules ? without loss of generality , @xmath30-  sides are either @xmath140 letters long , or anchored at both ends .",
    "ending rules of length @xmath89 can be combined with compression .",
    "rules anchored at both ends can be modified so as to complete the entire reduction ( @xmath141 ) at a single step .",
    "with @xmath30 as above , our machine can recognize the end of a reduced word by finding any word of @xmath95 letters which is anchored at the end but not the start .",
    "( shorter entire words being already dealt with . )",
    "it can then start backtracking and compressing .",
    "when the modified @xmath75 has ending rules , these become ending rules for the finite state machine . finally , we transform the resulting   with state into a nearly strict .      from lemma  [ compression2 ] and the discussion at the start of this section we have the following result",
    ".    [ changegens ] let @xmath0 be a group with finite semi - group generating sets @xmath1 and @xmath76 .",
    "then @xmath0 has a algorithm with respect to @xmath1 if and only if it has one with respect to @xmath76 .    [ subgroups ]",
    "let @xmath0 be a group and let @xmath53 be a finitley generated subgroup of @xmath0 .",
    "if @xmath0 has a algorithm , @xmath53 has one too .",
    "choose a set of generators for @xmath0 which includes generators for @xmath53 .",
    "with respect to these generators , a algorithm for @xmath0 is also one for @xmath53 .",
    "[ finiteindex ] let @xmath0 be a group and let @xmath53 be a finite index subgroup of @xmath0 . if @xmath53 has a algorithm , @xmath0 also has one .",
    "fix a transversal @xmath142 for @xmath143 $ ] from which we omit the representative of the identity coset .",
    "fix a finite generating set @xmath1 for @xmath0 containing @xmath142 .",
    "each word @xmath144 with @xmath145 is equal in @xmath0 to a word of the form @xmath146 [ t]$ ] , for some @xmath147 and @xmath148 , where the brackets indicate that each letter may be omitted .",
    "if @xmath149 evaluates to an element of @xmath53 , it can be written as the @xmath150 or @xmath94-letter word @xmath146 $ ] , again for some @xmath151 .",
    "as @xmath152 vary in @xmath1 we obtain finitely many elements @xmath147 .",
    "let @xmath153 be a finite generating set for @xmath53 containing all non - identity elements obtained in this way and also , all of @xmath154 .",
    "the above equalities give rules @xmath8 of the form @xmath155 etc .",
    "we omit any rules with @xmath156 .",
    "the  @xmath157 turns a word in @xmath47 into a word in @xmath158 followed by at most two letters from @xmath1 by pushing a coset representitive along the word .",
    "if an input word to this algorithm represents an element of @xmath53 , the reduced word will be in @xmath158 .",
    "let @xmath159 be a algorithm for @xmath53 .",
    "we claim that @xmath160 is a algorithm for @xmath0 .",
    "the @xmath8 rules translate the word into a word in @xmath153 followed by a couple of letters keeping track of the coset",
    ". then the @xmath30 rules chase along behind applying @xmath53 s algorithm to the word in @xmath153 .",
    "the effect is exactly as if we applied @xmath161 first , followed by applying @xmath159 to the @xmath158 part of the result .",
    "if an input word represents the identity in @xmath0 , the first step produces a representation of the identity in @xmath158 and the second deletes it .",
    "an input word which does not represent the identity will reduce , either to some word containing letters in @xmath162 , if it does not evaluate into @xmath53 , or otherwise to a non - empty word in @xmath163 .",
    "the previous theorems hold both for both algorithms and non - incremental algorithms .",
    "the last of these suggests a way to construct a algorithm using the  which does not satisfy proposition  [ remembers ] .",
    "consider the case of @xmath53 finite index in @xmath0 .",
    "it is not hard to parlay a algorithm for @xmath53 into a  which solves the word problem in @xmath0 but destroys information in the case where the word is not in the identity coset .",
    "here is what it does : given a word @xmath3 , it first transforms this into a word of the form @xmath164 where @xmath165 is a word in the generators for @xmath53 ( possibly the empty word ) and @xmath166 is an element of the transversal , and is empty if and only if it represents the identity coset . if @xmath166 is empty , we now proceed to reduce @xmath165 according to the algorithm for @xmath53 . on the other hand ,",
    "if @xmath166 is not empty , we can proceed to wantonly destroy the information in @xmath165 .",
    "there is a  which is not mimicked by any .",
    "[ freeprods ] if @xmath0 and @xmath53 both have algorithms , then so does their free product @xmath54 .    #",
    "1(mod  # 1 )    we suppose that @xmath167 and @xmath168 are groups with algorithms @xmath169 and @xmath170 respectively and that the alphabets for these are disjoint .",
    "let @xmath171 we claim that @xmath66 is a algorithm for @xmath172 .    to see this , consider a word @xmath173 consisting of alternating non - empty words from the alphabets @xmath174 and @xmath175 . for simplicity , we will assume that we have numbered the two groups so that @xmath176 .",
    "we claim that as long as no @xmath177 evaluates to the identity , @xmath178 .",
    "( here we are using @xmath8 to denote reduction with respect to @xmath30 and @xmath179 to denote reduction with respect to @xmath180 .",
    "likewise , we will refer to @xmath180 as @xmath50 and @xmath181 as @xmath182 . )",
    "this claim is true when @xmath183 , for then only the rules of @xmath184 apply .",
    "suppose now that this claim holds for @xmath185 .",
    "we wish to establish it for the case @xmath186 . by induction an intermediate result of the reduction of @xmath187",
    "is @xmath188 and the portion before @xmath189 is fully reduced .",
    "further , the assumption that no @xmath177 evaluates to the identity implies that @xmath190 is non - empty . accordingly",
    "any further reductions are made either by a a non - anchored rule of @xmath191 applying entirely inside @xmath189 or by a rule of @xmath192 applying at the last letter of @xmath190 and the beginning of @xmath189 .",
    "any rule of @xmath192 changes only the letters of @xmath189 and performs exactly as an anchored rule of @xmath191 would have done had @xmath189 been the beginning of a word . these combine to produce @xmath193 as required .",
    "in particular if no @xmath177 represents the identity , then @xmath194 does not represent the identity and does not reduce to the empty word .",
    "now consider the case in which some @xmath177 represents the identity .",
    "we take @xmath177 to be the earliest such . the process of reducing the word @xmath195 produces @xmath196 as an intermediate result . as before , @xmath197 and @xmath198 conspire to reduce @xmath177 as @xmath50 would have done had @xmath177 stood alone .",
    "this produces @xmath199 .",
    "but this is an intermediate result of reducing @xmath200 .",
    "furthermore , @xmath15 represents the identity if and only if @xmath3 represents the identity .",
    "but the free product length of @xmath15 is two less than the free product length of @xmath3 .",
    "thus we may assume inductively that @xmath15 reduces to the empty word if and only if it represented the identity and we conclude the same about @xmath3 .",
    "since this induction reduces free product length by two , it remains to check two base cases .",
    "one is when the free product length of @xmath3 is 0 , and here there is nothing to check .",
    "the second is when the free product length is 1 .",
    "this is just application of the algorithm in one of the factor groups .",
    "we do not know how to prove this for non - incremental algorithms .",
    "this raises the following     are there groups with non - incremental algorithms which do not have algorithms ?",
    "let @xmath0 be a finitely generated group with finite set of semi - group generators @xmath1 .",
    "let @xmath201 denote the word metric on @xmath0 with respect to @xmath1 .",
    "we say that a homomorphism @xmath202 is an _ expanding endomorphism _ if @xmath203 is a finite index subgroup of @xmath0 and there exists a constant @xmath204 such that @xmath205 for all @xmath206 .",
    "observe that by taking a suitable power of @xmath207 we may make @xmath208 as large as we wish . by taking a finite set of coset representatives for @xmath209",
    "we see that there is a constant @xmath210 such that for all @xmath206 , the distance from @xmath44 to @xmath203 is at most @xmath210 .",
    "we say that @xmath203 is @xmath210-_dense _ in @xmath0 .",
    "let @xmath27 be the finite alphabet @xmath211 , where @xmath166 and @xmath212 are letters not in @xmath1 .",
    "we say that a word @xmath3 in @xmath27 is _ balanced _",
    "( with respect to @xmath166 ) if @xmath3 has the same number of @xmath166 s as @xmath212 s , and further , every initial segment of @xmath3 has at least as many @xmath166 s as @xmath212 s .",
    "each balanced word @xmath3 in @xmath27 represents an element of @xmath0 : we define the element represented by @xmath213 to be @xmath207 applied to the element represented by @xmath3 .    the following rules ( assuming @xmath207 is chosen so that both @xmath208 and @xmath210 are sufficiently large ) give a algorithm for @xmath0 . in the rules : @xmath44 denotes a word in @xmath47 , and @xmath214 and @xmath215 denote geodesic words in @xmath47 such that @xmath216 , and @xmath217 equals the distance from @xmath44 to @xmath203 .    1 .",
    "replace any non - geodesic word @xmath44 of length @xmath218 by an equivalent geodesic word .",
    "2 .   if @xmath44 is geodesic , with @xmath219 , replace @xmath44 by @xmath220 , or replace @xmath221 by @xmath222 .",
    "3 .   if @xmath44 is geodesic , with @xmath218 and @xmath223 ( i.e. @xmath224 ) , replace @xmath221 by @xmath225 .",
    "4 .   replace @xmath226 by the empty word .",
    "these rules clearly map balanced words to balanced words , and do not change the element of @xmath0 represented .",
    "it is clear that rules 1 , 3 and 4 are strictly length decreasing . for rule  2 to reduce length",
    "we need @xmath227 .",
    "we have @xmath219 , @xmath228 , and @xmath229 .",
    "it follows that rule  2 will be length decreasing if @xmath230 .",
    "[ normalform ] let @xmath0 , @xmath231 , @xmath208 and @xmath210 be as above .",
    "let @xmath3 be the reduction of a word in @xmath1 with respect to rules 1 - 4",
    ". then @xmath3 has the form @xmath232 , or just @xmath233 ( @xmath183 ) , such that :    1 .",
    "each @xmath234 is a geodesic word in @xmath1 of length less than @xmath235 ; 2 .",
    "each @xmath234 , for @xmath236 , is either in @xmath237 or it is empty ; 3 .   if @xmath86 , @xmath238 is not empty .",
    "we show first that all @xmath166 s appear at the start of @xmath3 .",
    "initially this is vacuously true .",
    "the only rule whose application could make this untrue is 2 since it is the only rule which creates @xmath166 s .",
    "but rule 2 is only applied at the start of the word , or when the immediately preceding letter is @xmath166 , for otherwise one of rules 1 - 3 would apply at least one letter to the left .",
    "rule 1 ensures that each @xmath234 is geodesic , while rule 2 ensures that the length of each @xmath234 is less than @xmath235 .",
    "rule 3 ensures that each @xmath234 , for @xmath236 , is either in @xmath237 or it is empty .",
    "rule 4 ensures that @xmath238 is not the empty word if @xmath86 .",
    "rules 1 - 4 reduce each word in @xmath1 to the empty word if and only if that word represents the identity element of @xmath0 .",
    "let @xmath239 be the reduction of a word in @xmath1 representing the identity in @xmath0 .",
    "let @xmath20 be the least integer such that @xmath234 is non - trivial .",
    "then if @xmath236 , 2 in lemma  [ normalform ] implies that @xmath44 belongs to a non-@xmath94 coset of @xmath240 .",
    "therefore @xmath234 is trivial for @xmath236 .",
    "hence @xmath238 represents the identity in @xmath0 . by 1 , @xmath238 is geodesic and therefore trivial . by 3 ,",
    "@xmath183 and so @xmath44 itself is trivial .",
    "the converse is clear .",
    "the process we have just described is essentially that of writing the decimal expansion of a number",
    ". indeed , if you apply this to the sum of @xmath241 @xmath94 s , @xmath242 , using the endomorphism @xmath243 you will get @xmath244 .",
    "this is nothing but the decimal @xmath241 with @xmath166 s performing the function of place notation .",
    "unfortunately , our decimal expansions can be a bit perverse .",
    "in addition to the numerals for the numbers @xmath150 through @xmath245 , we also have numerals for the numbers @xmath246 through @xmath247 .",
    "let us give these the numerals @xmath248 through @xmath249 .",
    "if you count up to @xmath250 and then count back down to 1 , you will wind up writing @xmath94 as @xmath251 .",
    "i.e. , as @xmath252 . evidently , we can write an arbitrarily long word for the number @xmath94 .",
    "we say that a algorithm is _ finite to one _ if as @xmath45 varies over all words representing a fixed element of @xmath0 , @xmath71 takes only finitely many values .",
    "there are algorithms which are not finite to one off the identity .    for the purposes of section  [ geofin ] we would like to modify our algorithm to avoid this behavior .",
    "given a reduced word @xmath253 , we call @xmath77 the _ height _ of @xmath3 . choose a positive integer @xmath254 such that @xmath255 .",
    "we add the following additional rules to our system .    1 .",
    "if @xmath3 is a reduced word , as above , with height at most @xmath254 , such that @xmath256 , replace @xmath3 by an equivalent geodesic word in @xmath47 .",
    "since there are only finitely many reduced words of height at most @xmath254 , this introduces only finitely many rules .",
    "[ heightbound ] let @xmath3 be the reduction of a word in @xmath47 with respect to rules 1 - 5 .",
    "if the height of @xmath3 is @xmath77 , and @xmath3 does not represent the identity , then @xmath257 .    for height",
    "@xmath258 the lemma is clear . for @xmath259",
    "we can write @xmath260 , where @xmath15 is reduced , of height @xmath261 , and not the identity , and @xmath233 is geodesic . for @xmath262 ,",
    "rule 5 ensures that @xmath263 .",
    "it follows that @xmath264 . by induction the lemma holds for all @xmath265 .",
    "for @xmath266 , writing @xmath3 as before , @xmath267 . by induction , @xmath268 . also @xmath269 which",
    ", by our choice of @xmath254 , is less than @xmath270 .",
    "therefore @xmath271 since @xmath272 .",
    "[ expendisvnil ] if @xmath0 admits an expanding endomorphism then @xmath0 is virtually nilpotent .",
    "each element @xmath206 can be represented by a word @xmath3 whose length is bounded by @xmath273 , for some @xmath274 . since there are only polynomially many such words , @xmath0 has polynomial growth and hence is virtually nilpotent .",
    "it is apparently unknown whether all torsion free nilpotent groups have expanding endomorphisms .",
    "however , we will see in the next section that they all have algorithms .",
    "[ expando ] if @xmath0 has an expanding endomorphism , then @xmath0 has a finite to one algorithm .",
    "as in corollary  [ expendisvnil ] , the length @xmath275 of an element @xmath206 gives a bound for the maximum length of any reduced normal form representing @xmath44 .",
    "therefore there are at most finitely many possible reduced normal forms for each element .",
    "the results of this section remain valid under the weaker hypothesis that @xmath0 has a finite index subgroup @xmath53 which admits an expanding endomorphism @xmath207 with respect to @xmath201 .",
    "the only change that needs to be made is to replace @xmath203 with @xmath276 throughout .",
    "this has the following corollary which we will need in our work on geometrically finite groups .",
    "let @xmath0 be finitely generated and suppose that @xmath0 has a finite index subgroup which has an expanding endomorphism .",
    "let @xmath1 be a set of semi - group generators for @xmath0 .",
    "then for any @xmath277 there exists a algorithm as above , with working alphabet @xmath231 , such that any normal form word @xmath3 with @xmath278 is a geodesic word in @xmath47 . in particular",
    ", this holds when @xmath0 is finitely generated and virtually abelian .",
    "let @xmath53 be a finite index subgroup with expanding endomorphism .",
    "( in the virtually abelian case , @xmath53 is a finite index free abelian subgroup . )",
    "raising to a sufficient power furnishes us with an expanding endomorphism of @xmath53 , with expansion factor @xmath208 such that @xmath279 . by lemma  [ heightbound ]",
    ", any normal form word @xmath3 with @xmath278 has height @xmath150 .",
    "we will call such a algorithm _ @xmath254-geodesic_.",
    "we will say that a rule @xmath280 is a local geodesic rule if both @xmath11 and @xmath13 are words in the group generators and @xmath13 is a geodesic .",
    "we will say that an @xmath254-geodesic algorithm @xmath66 is _ @xmath254-tight _ if @xmath281 is also a @xmath254-geodesic algorithm whenever @xmath8 is a finite set of local geodesic rules and the left hand sides of @xmath30 and @xmath8 are disjoint .",
    "we record here the following observation .",
    "the @xmath254-geodesic algorithms of corollary  [ expandisngeodesic ] are @xmath254-tight .    in this case",
    ", the rules of @xmath30 determine that any sufficiently long geodesic @xmath44 is replaced with a word @xmath282 where @xmath44 and @xmath214 are shorter geodesics .",
    "on the other hand , @xmath30 replaces any non - geodesic shorter than this with a geodesic .",
    "in particular , no rule of @xmath8 is ever applied .",
    "in this section we shall show that every finitely generated , torsion free nilpotent group embeds in a group which has an expanding endomorphism .",
    "it follows from theorem  [ expando ] and theorem  [ subgroups ] that every torsion free nilpotent group has a algorithm .",
    "since every finitely generated nilpotent group is virtually torsion free , it follows by theorem  [ finiteindex ] that every finitely generated virtually nilpotent group has a algorithm .",
    "we start with the group of @xmath283 upper triangular matrices with @xmath94 s on the diagonal . those with integer entries we denote by @xmath284 , those with real entries we denote by @xmath285 .",
    "for each @xmath286 define @xmath287 as follows .",
    "if @xmath288 , set @xmath289 it is not hard to see that @xmath290 is a homomorphism and that if @xmath291 then @xmath292 .",
    "let us fix a generating set @xmath1 for @xmath284 and endow @xmath285 with a left invariant metric .",
    "the action of @xmath293 on @xmath294 is co - compact by isometries and fixed point free .",
    "we wish to see that each @xmath295 , is a bounded distance away from some @xmath296 . for @xmath297 ,",
    "let @xmath298 be the upper triangular matrix with 1 s on the diagonal , @xmath299 located distance @xmath300 above the diagonal , and 0 s everywhere else .",
    "notice that multiplying @xmath301 by such an @xmath302 leaves unchanged the entries of @xmath45 below the @xmath303 off - diagonal and adds @xmath299 to the entries of @xmath45 on the @xmath303 off - diagonal .",
    "consequently , we can choose @xmath304 each with entries between 0 and 1 so that @xmath305",
    ". since the entries of each @xmath306 are bounded in size , so is their product .",
    "hence @xmath307 is a bounded distance away from @xmath45 as required .",
    "consequently ,    there is @xmath308 so that the embedding of the cayley graph @xmath309 into @xmath294 is a @xmath310 quasi - isometry .",
    "it is a standard result that a co - compact discrete isometric action on a geodesic metric space induces a @xmath311-quasi - isometry .",
    "it is not hard to see that in the case of a fixed point free action , we may take @xmath312 .    for @xmath313 ,",
    "the map @xmath290 is a @xmath314-expanding endomorphism on @xmath294 .",
    "that is , for @xmath315 , @xmath316 .",
    "it suffices to show that @xmath290 is everywhere infinitesimally @xmath314-expanding . for @xmath317 ,",
    "a tangent vector at @xmath318 is given by @xmath319 where @xmath320 with @xmath321 for all @xmath322 .",
    "without loss of generality we may assume @xmath323 .",
    "then by left invariance and linearity of matrix multiplication @xmath324 clearly @xmath290 extends linearly to all upper - triangular matrices and we have @xmath325    for @xmath326 , @xmath327 is finite index in @xmath293 .",
    "the proof is the same as the proof that @xmath293 is co - compact in @xmath294 .",
    "consequently ,    if @xmath328 , and @xmath326 then @xmath290 is an expanding endomorphism of @xmath293 .",
    "hence , by theorem  [ expando ] ,    @xmath293 has a finite to one algorithm .",
    "now it is a theorem ( see @xcite , chapter  5 ) that    if @xmath0 is a finitely generated , torsion free nilpotent group then @xmath0 embeds in @xmath293 , for some @xmath86 .",
    "hence , by theorem  [ subgroups ] and theorem  [ finiteindex ] ,    [ virtuallynilpotent ] if @xmath0 is finitely generated and virtually nilpotent , then @xmath0 has a algorithm .",
    "in this section we prove a theorem concerning algorithms for ( strongly ) relatively hyperbolic groups .",
    "we first proved this in the context of geometrically finite hyperbolic groups and these are the parade examaple of relatively hyperbolic groups .",
    "the statement and proof here are close parallels of the geometrically finite case .",
    "there are multiple equivalent definitions of what it means for a group to be ( strongly ) hyperbolic relative to a collection of subgroups @xmath329 .",
    "these are equivalent to farb s @xcite definition of relative hyperbolicity together with his bounded coset penetration property .",
    "usage of the term relatively hyperbolic varies slightly in that it is often possible to drop the requirement that the subgroups be finitely generated . in our usage",
    "these will all be finitely generated .",
    "the key geometric result is the relation the geodesics and horoballs of the negatively curved space to the geodesics of subspace upon which the group acts co - comactly .",
    "this is lemma  [ quasigeodesics ] here , the morse lemma , proposition  8.28 of @xcite .",
    "[ relativelyhyperbolicgroups ] suppose that @xmath0 is hyperbolic relative to @xmath330 .",
    "suppose also that for each @xmath20 , @xmath331 and any @xmath254 , @xmath332 has a algorithm with is @xmath254-tight .",
    "then @xmath0 has a algorithm .",
    "this algorithm consists of local geodesic rules together with algorithms for the @xmath332 .",
    "[ geofingroup ] if @xmath0 is a geometrically finite hyperbolic group , then @xmath0 has a algorithm .",
    "[ hypgphmflds ] if @xmath208 is a graph manifold each of whose pieces is hyperbolic then @xmath333 has a algorithm .    [ negativelycurvedmanifold ] suppose that @xmath208 is a finite volume negatively curved manifold with curvature bounded below and bounded away from zero .",
    "then @xmath333 has a algorithm .",
    "[ freeproductwithamalgamation ] suppose that @xmath100 and @xmath101 are groups with @xmath254-tight algorithms and that @xmath334 is a finite group which includes as a subgroup of each of these .",
    "then @xmath335 has a algorithm .",
    "corollaries [ geofingroup ] and [ hypgphmflds ] follow directly from theorem  [ relativelyhyperbolicgroups ] since the groups in question are hyperbolic relative to abelian ( or virtually abelian ) groups .",
    "corollary  [ freeproductwithamalgamation ] follows since the amalgam is hyperbolic relative to its factors . in the case of corollary  [ negativelycurvedmanifold ]",
    "the groups are hyperbolic relative to nilpotent groups @xcite .",
    "nilpotent groups have algorithms by theorem  [ virtuallynilpotent ] , but there is no guarantee that these are @xmath254-tight for arbitrary @xmath254 .",
    "it is only in the perhaps larger group of upper triangular matrices where this is guaranteed .",
    "however , once we have proved theorem  [ relativelyhyperbolicgroups ] , we will see how to proceed here .",
    "we suppose that @xmath0 is hyperbolic relative to a finite collection of subgroups @xmath336 .",
    "the _ parabolic _ subgroups of @xmath0 are the @xmath0-conjugates of @xmath336 .",
    "we take @xmath337 to be the set parabolic subgroups .",
    "the following are well known properties of relatively hyperbolic groups .",
    "see , for example , @xcite , @xcite and @xcite .       1",
    ".   @xmath0 acts discretely by isometries on a @xmath338-hyperbolic space @xmath339 .",
    "this action induces an action on the boundary @xmath340 .",
    "3 .   there is a @xmath0 equivariant family of horoballs @xmath341 .",
    "4 .   for each @xmath342",
    "we take @xmath343 to be @xmath344 .",
    "@xmath135 acts co - compactly on @xmath343 . 5 .",
    "@xmath0 acts co - compactly on @xmath345 .",
    "each horoball @xmath346 is quasiconvex .",
    "consequently , there is a rectraction @xmath347 which is inherited from the hyperbolic retraction of @xmath339 onto @xmath343 .",
    "( we will also refer to this retraction as @xmath348 where @xmath30 is the boundary of @xmath135 .",
    "[ shrink ] for points sufficiently distant from @xmath343 , the retraction @xmath349 shrinks @xmath318 distance by a super - linear factor .",
    "that is to say , there is a function @xmath350 with the property that for any linear function @xmath351 , there is @xmath352 such that for @xmath353 , @xmath354 and there is @xmath355 so that if @xmath356 then @xmath357 8 .",
    "there is @xmath338 with the following property .",
    "suppose that @xmath184 and @xmath56 are disjoint horospheres , i.e. , the boundaries of disjoint horoballs in @xmath337 .",
    "suppose that @xmath358 and @xmath359 are @xmath339 geodesics that start in @xmath184 and end in @xmath56 and that @xmath45 and @xmath360 are the last points of @xmath358 and @xmath359 in @xmath184 . then @xmath361 .",
    "[ boundedhorosphereretraction ] there is @xmath338 so that if @xmath184 and @xmath56 are disjoint horospheres , then @xmath362 has @xmath363 diameter bounded by @xmath338 .",
    "[ horoballgeodesicsdepartx ] given @xmath338 there is @xmath364 with the following property .",
    "suppose @xmath30 is the boundary of horoball @xmath101 .",
    "if @xmath358 is an @xmath339 geodesic that starts and ends on @xmath30 then the only portion of @xmath358 lying in the @xmath338 neighborhood of @xmath365 are an initial and terminal segment of @xmath358 , each of length at most @xmath364 .",
    "we need the following lemma which is proposition  8.28 of @xcite .",
    "there is @xmath338 depending only on @xmath366 and @xmath364 with the following property .",
    "suppose that @xmath3 is a @xmath311 quasigeodesic in @xmath318 and @xmath358 is a @xmath339 geodesic with the same endpoints .",
    "suppose that @xmath367 is the union of @xmath358 and the horospheres that it meets .",
    "then @xmath3 lies in a @xmath338 neighborhood of @xmath368 .",
    "given an @xmath339 geodesic , @xmath358 , it meets a finite ( possibly empty ) collection of horoballs , @xmath369 .",
    "replace each portion @xmath370 with an @xmath318 geodesic , @xmath371 to produce the @xmath318 paths @xmath372 we refer to a path formed in this way as a _",
    "rough geodesic_.    there is a @xmath366 such that every rough geodesic is an @xmath318 @xmath366 quasigeodesic .",
    "suppose that @xmath358 is an @xmath53 geodesic and @xmath373 is a corresponding rough geodesic .",
    "suppose that @xmath374 is a corresponding @xmath318 geodesic .",
    "by lemma  [ quasigeodesics ] , this lies in a @xmath338 neighborhood of @xmath367 .",
    "let us decompose @xmath374 as @xmath375 where @xmath376 is the portion of @xmath374 which lies within @xmath338 of the horosphere for @xmath371 , but not within @xmath338 of @xmath358 .",
    "some of these may be empty .",
    "however , it follows that for each @xmath20 , @xmath377 and @xmath378 lie within @xmath379 of each other . since each of these is geodesic , the difference in their lengths",
    "is bounded .",
    "similarly , for each @xmath20 , the endpoints of @xmath371 and @xmath376 are close to each other , thus bounding the difference in their lengths .",
    "accordingly , the difference in lengths along @xmath380 and @xmath374 arise only from these breakpoints each of which contributes only a bounded difference . since there is a mimimum distance between horospheres ,",
    "these breakpoints are bounded away from each other .",
    "the result follows .",
    "we record here two general properties of @xmath338-hyperbolic spaces .",
    "( here we use the parameterized version of @xmath338-hyperbolicity . )",
    "given @xmath381 , there are @xmath311 with the following property .",
    "suppose @xmath358 is a piecewise geodesic .",
    "suppose that each segment of @xmath358 has length at least @xmath382 , and that at each bend , both segments depart a @xmath338 neighborhood of each other after travelling at most distance @xmath383 from that bend .",
    "then @xmath358 is a @xmath311 quasigeodesic .",
    "suppose that @xmath384 and @xmath385 are given .",
    "then there is @xmath386 with the following property .",
    "if @xmath380 is a @xmath384 quasigeodesic and @xmath387 is formed from @xmath380 by replacing disjoint subpaths with @xmath385 quasigeodesics , the @xmath387 is a @xmath386 quasigeodesic .",
    "suppose @xmath0 is hyperbolic relative to @xmath388 .",
    "we would like to find a generating set @xmath1 in which @xmath388 are convex in the cayley graph of @xmath0 . given an set of generators @xmath76 for @xmath0 and @xmath389 , set @xmath390 and @xmath391    given @xmath210 sufficiently large , @xmath1 has the following properties :    1 .",
    "there are constants @xmath100 and @xmath101 with the following properties :",
    "suppose @xmath3 is a @xmath1-geodesic .",
    "let @xmath343 be a horosphere with @xmath135 conjugate to @xmath332 .",
    "suppose @xmath3 begins and ends at @xmath318 distance at most @xmath392 from @xmath343",
    ". then @xmath393 , where @xmath394 , @xmath395 , and @xmath396 .",
    "if @xmath3 begins on @xmath343 , @xmath45 is empty .",
    "if @xmath3 ends on @xmath343 , @xmath307 is empty . in particular ,",
    "a @xmath1-geodesic evaluating into @xmath332 , is written in letters all of which lie in @xmath332 .",
    "if we fix @xmath392 then if @xmath3 is sufficiently long , @xmath46 is non - empty .",
    "we claim that there is a bound @xmath397 independent of @xmath210 so that if @xmath398 is a @xmath399 edge which does not lie in @xmath135 , then the the @xmath318 length of @xmath400 is less than @xmath397 .",
    "if @xmath398 is an @xmath401 edge which does not lie in @xmath135 , then it lies within a bounded distance of some horosphere other than @xmath343 . by property  [ boundedhorosphereretraction ] of proposition  [ review ] , @xmath402 has bounded diameter .",
    "there are only finitely many @xmath76 letters and their edges also have bounded retractions onto @xmath343 .",
    "this gives the bound @xmath397 .",
    "now consider the case of a geodesic @xmath3 which begins and ends in @xmath135 .",
    "we wish to show that all edges of @xmath3 lie in @xmath135 .",
    "if this fails , we replace @xmath3 with a sub - segment whose only contact with @xmath135 are its two endpoints , @xmath300 and @xmath129 . notice that it must therefore have length at least 2 since it leaves and returns to @xmath343 .",
    "let @xmath403 be the maximum distance from @xmath343 to @xmath135 .",
    "then the path @xmath404 starts and ends within distance @xmath403 of @xmath3 .",
    "thus @xmath405 .",
    "now consider an @xmath318-geodesic from @xmath300 to @xmath129 .",
    "this has length at most @xmath406 and each point of it lies within distance @xmath403 of @xmath135 .",
    "it follows that the @xmath401 distance between @xmath300 and @xmath129 is at most @xmath407 .",
    "choosing @xmath210 sufficiently large contradicts the assumption that @xmath3 was geodesic .",
    "now consider the case in which @xmath300 and @xmath129 do not necessarily lie on @xmath343 .",
    "let @xmath408 and @xmath409 be their respective projections onto @xmath343 and @xmath410 and @xmath411 be points of @xmath135 near these .",
    "there are @xmath366 and @xmath364 depending on @xmath210 so that the embedding of @xmath0 into @xmath318 is a @xmath311 quasi - isometry .",
    "consider @xmath412 with @xmath166 a geodesic from @xmath300 to @xmath410 , @xmath11 a geodesic from @xmath410 to @xmath411 and @xmath13 a geodesic from @xmath411 to @xmath129",
    ". then @xmath413 now if @xmath46 does not appear in @xmath3 , i.e. , @xmath3 contains no subword lying in @xmath135 , then @xmath414 the value of @xmath366 can only decrease as @xmath210 increases , since @xmath366 measures how many @xmath399 letters it takes to travel a certain distance in @xmath318 , and for @xmath210 sufficiently large , @xmath415 .",
    "thus , for any sufficiently large @xmath210 , there is a linear bound @xmath416 on those @xmath3 for which @xmath46 is empty .",
    "we now suppose @xmath393 where @xmath46 is the maximal portion of @xmath3 lying in @xmath135 and is non - empty .",
    "let @xmath417 and @xmath418 be the endpoints of @xmath46 .",
    "we claim that these must lie a bounded distance from @xmath410 and @xmath411 . to see this ,",
    "notice that @xmath3 is an @xmath318 quasi - geodesic .",
    "it follows from lemma  [ quasigeodesics ] that @xmath3 fellow travels the its @xmath318 geodesic union the horosphere s that these meet .",
    "it is not hard to see that if @xmath419 is sufficiently large , this @xmath318 geodesic meets @xmath343 near @xmath408 and @xmath409 .    for @xmath420 , @xmath332 and",
    "@xmath421 meet in a finite ( perhaps trivial ) subgroup .",
    "we will assume that @xmath210 is chosen large enough so that any non - trivial elements common to one or more subgroups appear as generators .",
    "after choosing @xmath210 , we will refer to @xmath399 and @xmath401 as @xmath1 and @xmath422 .",
    "we are now in a position to describe the algorithm of theorem  [ relativelyhyperbolicgroups ] .",
    "this depends on constants @xmath423 and @xmath424 . for each @xmath20 , let @xmath425 be a @xmath423-tight algorithm for @xmath332 .",
    "we will assume that any rules operating inside a common subgroup rewrite immediately to a single letter and thus , these rules agree between the different @xmath50 .",
    "we take @xmath426 to be a collection of local geodesic rules which contain a left - hand side for each @xmath1 word which is not a geodesic .",
    "we assume that these agree with any rules which also appear in some @xmath50 .",
    "we will assume @xmath427 .",
    "we take @xmath428 and @xmath429 .",
    "we will show that with @xmath424 sufficiently large , @xmath430 is a algorithm .",
    "this requires a series of lemmas .",
    "we first check that the parabolic subgroup sub - algorithms are still effectively @xmath423-tight within @xmath18 .",
    "suppose that @xmath3 is the result of @xmath18 reducing a @xmath1 input word and that @xmath11 is a maximal @xmath431 subword of @xmath3 .",
    "then @xmath11 is a reduced word for a @xmath423-geodesic algorithm for @xmath332 .",
    "consider the process by which @xmath11 is produced . since the @xmath431 are disjoint , for @xmath432 , no @xmath433 rule can apply in the production of @xmath11 .",
    "consequently the formation of @xmath11 is carried out by @xmath50 rules and @xmath426 rules .",
    "notice that any non-@xmath422 input letters which are consumed in the production of @xmath11 must first be turned into @xmath422 letters prior to their consumption by @xmath50 .",
    "this is done by @xmath426 rules shortening non - geodesics into geodesics which must be in @xmath422 letters .",
    "therefore , @xmath11 could have been produced by applying the @xmath426 rules and @xmath50 rules to an input word in @xmath434 .",
    "the result now follows from the assuption that algorithm for @xmath332 is tight .",
    "it now follows that if @xmath3 is the result of @xmath18-reducing a @xmath47 input word , then @xmath3 consists of reduced words from the parabolic subgroups alternating with @xmath424-local geodesics which do not contain any parabolic letters .",
    "these @xmath424-local geodesics may be empty , but by assuming that the parabolic subwords are maximal , we may assume that no two adjacent parabolic subwords lie in the same parabolic subgroup . note that if two or more @xmath332 meet in a non - trivial finite subgroup , any ambiguity where one parabolic subgroup ends and another begins can only consist of a single letter .",
    "we will choose to decompose @xmath3 in a slightly different manner .",
    "we choose a parameter @xmath435 .",
    "we decompose @xmath3 as @xmath436 where the @xmath437 are the maximal parabolic subwords which represent group elements of length greater than @xmath438 . since all other maximal parabolic subwords represent group elements of length less than or equal to @xmath423 , each is an @xmath422-geodesic for some @xmath20 .",
    "it follows that the @xmath439 are @xmath424-local geodesics . again",
    ", some of the @xmath439 may be empty , but not if they lie between @xmath332 words .",
    "for @xmath423 , @xmath424 sufficiently large , there is @xmath440 such that each @xmath234 is a @xmath311-quasi - geodesic in @xmath339 . while increasing @xmath438 weakens the quasi - geodesity , increasing @xmath423 and @xmath424",
    "does not .",
    "let @xmath13 be an @xmath424-local geodesic of length @xmath424 .",
    "this is a cayley graph geodesic , and hence an @xmath318 @xmath310-quasi geodesic , with @xmath366 depending only on the embedding of @xmath441 into @xmath318 . by proposition",
    "[ quasigeodesics ] , @xmath11 asynchronously fellow - travels its @xmath339 geodesic @xmath358 together with any horospheres that @xmath358 enters .",
    "now @xmath358 can not stray far into any horosphere , for otherwise @xmath11 would contain parabolic subwords of length greater than @xmath438 .",
    "this bounds the ratio between the @xmath318 length and the @xmath339 length of @xmath358 .",
    "notice that this bound is independent of @xmath424 .",
    "thus , by increasing @xmath424 , we proportionally increase the @xmath318-length of @xmath11 . that is to say , there is @xmath442 is a cayley graph geodesic containing no parabolic subword of length greater than @xmath438 , then @xmath11 is an @xmath339- @xmath442-quasigeodesic .",
    "it is a standard result for @xmath338-hyperbolic spaces that given @xmath442 , for @xmath424 sufficiently large , there is @xmath311 so that every @xmath424-local @xmath442-quasigeodesic is a @xmath311 quasigeodesic .",
    "thus , choosing @xmath424 ( and hence , @xmath423 ) sufficiently large makes each @xmath234 an @xmath339 @xmath311 quasigeodesic as required .",
    "condsider the decomposition of @xmath3 into @xmath436 as above .",
    "ultimately , we must show that @xmath3 is empty if and only if the input word which created it represents the identity .",
    "we will examine several paths related to @xmath3 , namely @xmath443 @xmath444 @xmath445 where    * each @xmath377 is the @xmath446-geodesic for the corresponding @xmath234 , * each @xmath447 is the @xmath446-geodesic for the corresponding @xmath448 , * each @xmath449 is a cayley graph geodesic for the corresponding @xmath448 .",
    "given @xmath423 , @xmath424 , @xmath438 sufficiently large ,    * there is @xmath311 such that @xmath380 is an @xmath446- @xmath311-quasigeodesic .",
    "increasing @xmath423 and @xmath424 does not worsen this quasigeodesity .",
    "* there is @xmath311 such that @xmath450 is an @xmath446- @xmath311-quasigeodesic .",
    "* there is @xmath311 such that @xmath451 is a cayley graph @xmath311-quasigeodesic .",
    "we first consider @xmath380 .",
    "we choose @xmath438 sufficiently large .",
    "since each @xmath447 is long , by property  [ horoballgeodesicsdepartx ] of proposition  [ review ] , it spends only a limited time in a neighborhood of the exterior of its horoball .",
    "on the other hand , each @xmath377 can only spend a bounded time in the neighborhood of the horoballs it starts and ends at , for otherwise , by lemma   [ generators ] , it would start or end in the corresponding parabolic letters , contradicting the maximality of @xmath452 ( at its beginning ) or @xmath448 ( at its end ) . thus , the only way , @xmath380 can fail to satisfy the assumptions of proposition  [ goodbends ] is if one or more of the @xmath377 is short , i.e. , of @xmath318 length less than @xmath382 . in this case , we modify @xmath380 to produce @xmath374 by deleting each short @xmath377 and replacing @xmath447 with @xmath453 starting at the beginning of @xmath377 .",
    "clearly @xmath380 and @xmath374 asynchronously fellow travel . by proposition  [ goodbends ]",
    ", @xmath374 is an @xmath446 quasigeodesic , and thus , so is @xmath380 .",
    "it now follows by lemma  [ quasiquasiquasi ] that @xmath450 is an @xmath446 quasigeodesic .",
    "finally , it follows from lemma  [ roughgeodesics ] that @xmath451 is an @xmath318 quasigeodesic and hence a cayley graph qusigeodesic .    in the case where each @xmath454 has the falsification by fellow traveler property , this gives lemma  4.7 of @xcite .",
    "it then follows that the language of geodesics in @xmath455 is a regular language and that the growth of @xmath456 is rational .",
    "this includes the limit groups of @xcite since , as @xcite has shown , these are hyperbolic relative to abelian subgroups .",
    "( theorem [ relativelyhyperbolicgroups ] ) we suppose that @xmath3 is the result of @xmath18-reducing an input word in @xmath457 .",
    "we must show that @xmath3 is empty if and only if @xmath13 represents the identity . since @xmath3 remembers its group element ,",
    "the `` only if '' part is clear",
    ".    suppose now that @xmath13 represents the identity .",
    "then @xmath458 is an @xmath446- quasigeodesic .",
    "since it represents the identity , this bounds its length .",
    "this , in turn bounds the length of @xmath3 . recall that increasing @xmath423 and @xmath424 does not worsen the quasi - geodesity of @xmath380 , and",
    "thus does not degrade the bound on the length of @xmath3 .",
    "we may then assume that @xmath423 and @xmath424 are greater than this bound .",
    "thus , @xmath3 is a geodesic , in particular , a geodesic for the identity , and thus empty as required .",
    "( corollary [ negativelycurvedmanifold ] ) let @xmath459 where @xmath208 is a finite volume negatively curved manifold with curvature bounded below and bounded away from 0 . by @xcite , @xmath0 is hyperbolic relative to nilpotent subgroups @xmath388 .",
    "now each @xmath332 has a algorithm by theorem  [ virtuallynilpotent ] .",
    "however , there is no guarantee that this is @xmath254-tight for @xmath332 .",
    "it is , however , @xmath254-tight for matrix group @xmath293 .",
    "given any finite generating set @xmath337 for @xmath332 , we may include these into a generating set for @xmath293 .",
    "now , if @xmath460 , any @xmath254-tight algorithm for @xmath293 is @xmath94-tight .",
    "it follows that for each @xmath461 , @xmath300 is the unique reduced word for itself . in particular",
    ", this is a @xmath94-tight algorithm for @xmath332 .",
    "since lemma  [ generators ] holds for any sufficiently large @xmath210 , we can assume that @xmath422 contains any finite subset of @xmath332 we select .",
    "now consider the paths of lemma  [ quasigeodesicpaths ] .",
    "the decompositions depend on a parameter , @xmath438 , and this parameter is stated in terms of cayley graph length .",
    "however , it is only used to ensure that each @xmath462 is long , i.e. , that the @xmath446 geodesic of this group element is long . by choice of @xmath210 and hence , @xmath422 , we can force this to be the case for any parabolic group element whose reduced word is at least two letters long .",
    "the proof now proceeds as before .",
    "this and the following section are devoted to showing that certain groups do not have algorithms . in this section",
    "we develop tools that apply to any deterministic length - reducing rewriting system .",
    "thus we will be able to show that a particular group @xmath0 has neither a algorithm , nor a non - incremental algorithm .",
    "we believe that these results also hold for non - deterministic algorithms .",
    "these latter are related to growing context sensitive languages .",
    "extension of our methods to this case is work in progress .",
    "let @xmath463 be the sequence of words produced as a rewriting algorithm makes @xmath77 substitutions on @xmath464 .",
    "we call this sequence the _ history to time @xmath77 of @xmath464_. we can draw a _ diagram _ of the history as follows",
    ". draw @xmath464 as a row of @xmath465 adjacent unit squares , labelled with the letters of @xmath464 . for each",
    "@xmath466 we draw @xmath467 below @xmath468 as follows .",
    "draw a line segment under the first  appearing in @xmath468 .",
    "( we call this a",
    "_ substitution line_. ) underneath it put a row of equal width , height 1 rectangles , labelled with the corresponding , or if the  is empty , put a single black rectangle .",
    "fill the remainder of the row with a copy of whatever appears in that part of @xmath468 .",
    "the _ width of a letter of _",
    "@xmath467 is the width of its rectangle in the diagram .",
    "the _ width of a subword of _",
    "@xmath467 , not to be confused with its length , is the sum of the widths of the letters making it up ( i.e.  disregarding any black rectangles ) .    in order to get a handle on how the number of letters in a word decreases as the algorithm runs , we consider how the widths of letters increase .",
    "[ widerletter ]",
    "let @xmath89 be the length of the longest  of the rewriting system . in a diagram ,",
    "the letters of any  ( under a substitution line ) have width at least @xmath469 times that of the narrowest letter in the corresponding  ( above the substitution line ) .    if we were to first make all the letters of the  equal in width , deleting any black rectangles which appear , we would certainly not make the narrowest letter any narrower",
    ". then at least one letter , of at most @xmath89 , is removed , giving a further expansion of at least the stated factor .",
    "next we define the _ generation _ of each letter in a diagram .",
    "the generation of each letter in the first row is 0 .",
    "the generation of a letter in row @xmath466 is the generation of the letter above it , if it is not in a , or one more than the least generation of the letters above the substitution line , if it is in a .",
    "[ width ] if the generation of a letter is @xmath77 then its width is at least @xmath470 .",
    "true for row 0 .",
    "suppose it is true for row @xmath471 .",
    "since each letter in row @xmath20 not in a  has the same generation and width as the corresponding letter in the row above , the assertion holds for these letters . by lemma  [ widerletter ] any letter in a  is at least @xmath469 times the width of the narrowest letter in the corresponding .",
    "but the generation of each  letter exceeds the generation of the narrowest  letter by _ at most _ one . since the assertion is assumed to hold for the narrowest letter in the . , it holds for the letters of the",
    ".        see figure  [ splittingpath ] . a _ splitting path _ of length @xmath77 in a diagram for @xmath472 consists of @xmath77 vertical line segments running between letters , from the top of the diagram to the bottom , such that successive segments either join end to end , or are linked by a substitution line .",
    "segments may not cut substitution lines .",
    "for each segment substitution lines between the top and bottom of the segment , all lie to the same side of the segment .",
    "[ pathexists ] if @xmath473 contains a letter of generation @xmath44 , then the diagram contains a splitting path of length at most @xmath474 ending next to the letter .",
    "we may choose the path to end on either side of it .",
    "start at the bottom of the diagram with a vertical segment next to the letter of generation @xmath44 .",
    "extend upward until we come to a substitution line .",
    "above that line will be a letter of generation @xmath475 .",
    "start a new segment next to that letter and continue on up .",
    "after hitting at most @xmath44 substitution lines we reach the top of the diagram .",
    "( if we hit an endpoint of a substitution line we start a new segment only if the letter we are following is under the line . )",
    "this is not yet a splitting path : our vertical segments could still have substitution lines on both sides .",
    "when this happens it can only be with substitutions to the left in the upper part of the segment and to the right in the lower .",
    "( a sequence of substitutions going right to left would have to cross the vertical segment because such substitutions always overlap . )",
    "we split each such segment at the appropriate point and we are done .    associated with each splitting path are its _ details : _ for each vertical segment we record whether any substitutions take place to the left or the right .",
    "( if neither , we can arbitrarily designate it as left . ) for a left segment we record the first @xmath95 letters to its right ( which will be constant ) , or to the end of the word if nearer .",
    "for a right segment we record the @xmath95 letters to the left , or to the start of the word if nearer .",
    "if a segment ends on a substitution line we record the , the position at which the path splits it ( in the range @xmath476 ) and the position at which the next segment splits the  ( in the range @xmath477 ) .",
    "we say that two splitting paths ( in different diagrams ) are _ equivalent _ if they have the same details .",
    "( note : we do not require vertical segments to be the same height . )    for example , the details of the splitting path shown in figure  [ splittingpath ] might be given as : ( left , `` aaa '' ) , ( right , `` aaa '' , `` aaab '' , 3 , 2 ) , ( left , `` aaa '' ) , ( right , `` baa '' , `` aaab '' , 2 , 3 ) , ( left , `` aa '' ) .",
    "[ numsplits ] there are no more than @xmath478 equivalence classes of splitting path of length less than or equal to @xmath77 .",
    "given a splitting path for @xmath479 , we define @xmath480 and @xmath481 to be the subwords of @xmath467 , to the left and the right respectively of the path .",
    "the next lemma can be interpreted as telling us that the detail of the splitting path is like a message that is passed between @xmath482 and @xmath483 : if @xmath484 sends the same message as @xmath482 , @xmath483 wo nt notice the change .",
    "[ splicing ] let @xmath485 and @xmath486 contain equivalent splitting paths .",
    "then the history of @xmath487 , up to a suitable time , contains an equivalent splitting path , and ends with the word @xmath488 .",
    "cut the histories of @xmath489 and @xmath464 along their respective splitting paths .",
    "fit the left half of @xmath489 s history with the right half of @xmath464 s history .",
    "the lengths of vertical segments are most likely unequal : one side or the other is constant so we just make as many copies of the constant side as required to fit the two together .",
    "we claim that in the resulting sequence of words , each word differs from the next by replacing a  with its corresponding .",
    "this is clear when both words lie on the same segment or on successive segments joined end - to - end . in the remaining case , both path details record",
    "the same , split at the same point , and identical splitting points in the corresponding .",
    "we still have to show that the left - hand sides at which changes occur are those that would be chosen by the algorithm .",
    "consider words joined at a left segment .",
    "the  begins in @xmath490 ( and ends in it as well , unless it is one of the s on the path ) .",
    "therefore , from the start of the , the next @xmath89 letters are the same whether @xmath490 is completed by @xmath491 or @xmath492 ( since these begin with the same @xmath95 letters ) .",
    "the algorithm will therefore substitute at the same place in either word .",
    "now consider words joined at a right segment .",
    "the  ends somewhere in @xmath492 .",
    "any  in @xmath493 , starting to the left of this one , would have to start within @xmath95 letters of the end of @xmath490 , for otherwise it would be a  in @xmath26 ( wholly to the left of a right segment ) .",
    "but in view of this , the same  would appear in @xmath494 ( since @xmath495 and @xmath490 end with the same @xmath95 letters ) .",
    "it follows that we have constructed the history of @xmath487 .",
    "that it contains a copy of the same splitting path , and ends with @xmath488 , is clear .",
    "we would like to be able to say that @xmath496 is determined by @xmath484 and the splitting path but unfortunately this is not quite true .",
    "let @xmath497 $ ] denote the first word to the left of the last segment in the splitting path .",
    "what the proof of lemma  [ splicing ] shows is that @xmath497 $ ] is determined by @xmath484 and the splitting path .",
    "if the last segment is a right segment , then @xmath498 $ ] , but if not the best we can say is that @xmath496 is obtained from @xmath497 $ ] by substitutions entirely inside the latter .",
    "similar statements hold for @xmath499 .",
    "we extend the results of this section to subwords .",
    "if @xmath500 is a history of @xmath489 , and @xmath464 is a subword of @xmath489 , how shall we define the history of @xmath464 ?",
    "we can do it by fixing a _ deletion convention _ for the rewriting system : for each , decide which letters are deleted and which are changed to get the corresponding .",
    "it is then determined , when a substitution takes place over the boundary of @xmath501 , which letters of the  belong to @xmath502 and which do not .",
    "more generally we can consider @xmath489 to be split up into arbitrarily many subwords ; a deletion convention will determine how each @xmath26 is to be split up .",
    "we want to define the diagram of @xmath489 s history in such a way that each subword gets its own `` sub - diagram '' . in other words",
    ", we want the history of @xmath503 to occupy a rectangular block underneath @xmath464 .",
    "therefore , when a substitution takes place over a subword boundary , we adjust the widths of the  letters on either side of the new boundary to keep it vertically aligned under the previous boundary .",
    "the problem that arises is that a deletion may occur on one side only of the subword boundary : in that case lemma  [ widerletter ] fails .",
    "we make the following adjustments .",
    "we designate the @xmath95 letters to either side of a subword boundary as _",
    "border letters _ ( see figure  [ subword ] ) . when a contains both border and non - border letters , we assign widths as follows",
    ". the number of border letters will be the same in the  as in the , so we line them up under the border letters of the and keep their widths the same ; we expand the non - border letters to fill the remaining space evenly .",
    "otherwise we assign widths as previously stated . note",
    "that when a  contains a subword boundary , the  will consist only of border letters .",
    "now lemma  [ widerletter ] holds for all non - border letters .",
    "we restrict the definition of the generation of a letter to non - border letters : the _ generation _ of a non - border letter in a  is one more than the least generation of the non - border letters of the corresponding . with this adjustment",
    ", lemma  [ width ] goes through .",
    "splitting paths are defined as before except that we forbid any of the words included in the detail to cross a subword boundary .",
    "lemma  [ pathexists ] gives us such a path since we follow the edges of non - border letters ( letters for which the generation is defined ) .",
    "clearly a splitting path for @xmath503 is also one for @xmath489 .",
    "we show that the number of splitting paths required to split all subword histories , with a given starting length , is bounded by a polynomial function of that starting length",
    ". this bound is independent of the total number of substitutions in the history .",
    "it follows that if we have enough histories , two of them will have equivalent splitting paths .",
    "[ polysplits ] let @xmath464 be a subword of @xmath489 of length @xmath504 , and let @xmath479 be such that @xmath505 .",
    "then @xmath473 has a splitting path in one of at most @xmath506 equivalence classes , where @xmath507 are positive constants depending only on @xmath508 and @xmath89 .",
    "the splitting path can be chosen to end next to any non - border letter of @xmath473 .",
    "since @xmath505 it contains at least one non - border letter .",
    "choose one , and let @xmath44 be its generation .",
    "by lemma  [ width ] , its width is at least @xmath509 .",
    "but since this can not exceed @xmath510 , the width of @xmath464 , we have @xmath511 .    by lemma  [ pathexists ] ,",
    "we can find a splitting path , ending next to our chosen letter , of length at most @xmath474 . by remark  [ numsplits ]",
    ", the number of classes of splitting path , of length @xmath512 , does not exceed @xmath513 .",
    "since @xmath44 is bounded by a logarithm of @xmath254 , the result follows .",
    "we consider now a word divided into two subwords @xmath514 .",
    "we keep @xmath489 fixed , vary @xmath92 , and run the algorithm for some amount of time . intuitively speaking , our algorithm carries information between the two subwords , giving in principle a number of possible values for @xmath515 which is exponential in @xmath516 . we show that the number of distinct @xmath515 that can actually arise is only polynomial in @xmath516 .",
    "[ polynomial ] let @xmath489 be a fixed word of length @xmath517 in @xmath79 .",
    "for each word @xmath92 we choose a time @xmath166 and let @xmath518 be the result of applying @xmath166 substitutions to @xmath519 ; @xmath515 is then a function of @xmath92 .",
    "there exist positive constants @xmath520 , depending only on @xmath508 and @xmath89 , such that @xmath521 takes at most @xmath522 distinct values as @xmath92 varies . the same bound applies if we instead define @xmath523 to be the result of applying @xmath166 substitutions to @xmath524 .",
    "first consider all @xmath515 such that @xmath525 .",
    "then by lemma  [ polysplits ] , each @xmath500 has a splitting path ending @xmath95 letters from the start of @xmath515 , in one of at most @xmath506 classes .",
    "since @xmath526 is determined by @xmath527 and the class of the splitting path , and @xmath527 has at most @xmath254 possible values ( each being a subword at the end of @xmath489 ) , @xmath526 takes at most @xmath528 distinct values as @xmath92 varies .",
    "since @xmath529 is one of the , at most @xmath530 , words obtained by making substitutions in @xmath526 , @xmath529 itself can take at most @xmath531 values . on the other hand , since @xmath532 , this can take at most @xmath533 values .",
    "multiplying these two gives the required bound on the number of values @xmath515 can take when @xmath525 .",
    "the number of possible words of length less than @xmath534 is constant and , since we are assuming @xmath517 , we can absorb this into @xmath535 .",
    "the proof for @xmath523 is similar .",
    "if the rewriting system were not required to delete a letter with every substitution , the number of values @xmath521 could take might well be exponential in @xmath516 .",
    "in this section we use the results of the previous section to exhibit groups which have no algorithm .        1 .   for @xmath539",
    "each element of @xmath540 can be represented by a word of exactly length @xmath77 .",
    "2 .   there are @xmath541 and @xmath542 so that for infinitely many @xmath77 @xmath543 3 .",
    "each element of @xmath56 commutes with each element of @xmath57 .",
    "suppose to the contrary that we have a deterministic algorithm for @xmath0 .",
    "let @xmath27 be the working alphabet and let @xmath89 be the length of the longest left hand side .",
    "choose @xmath86 such that @xmath544 , and @xmath545 where @xmath546 and @xmath547 are as in lemmas  [ polysplits ] and [ polynomial ] .",
    "let @xmath182 be a set of words of length @xmath77 representing @xmath540 , for @xmath539 .",
    "we shall consider the effect of our supposed algorithm on words of the form @xmath548 , for @xmath549 and @xmath550 .",
    "all such words must reduce to the empty word since @xmath551 and @xmath552 commute . put @xmath553 and @xmath554 , and let @xmath555 denote the result of applying @xmath166 substitutions to @xmath556 .",
    "define @xmath166 , as a function of @xmath92 and @xmath489 , to be the least integer @xmath557 such that @xmath558 .",
    "i.e. , we run the algorithm until the first time at which both @xmath489 and @xmath352 have length less than @xmath134",
    ". then @xmath559 and @xmath560 are all well defined functions of @xmath92 and @xmath489 .",
    "since at most @xmath89 letters are deleted in each step it follows that @xmath561 .    for each pair @xmath562 , one or both of the inequalities @xmath563 ,",
    "@xmath564 holds .",
    "therefore one of these inequalities must hold for at least half of @xmath565 .",
    "we shall suppose it is the first , and argue to obtain a contradiction ; were it the second , a similar argument , interchanging the roles of @xmath515 and @xmath566 , would give a contradiction instead .    since we are assuming that , for at least half the pairs @xmath567 , @xmath563 , we can certainly find a @xmath568 such that for at least half of @xmath569 , @xmath570 .",
    "we fix this @xmath489 and henceforth regard @xmath571 as functions of @xmath92 alone .",
    ". by the choices we have made have made , @xmath573 .    by the definitions of @xmath166 and @xmath91 , @xmath574 for each @xmath575 . by lemma  [ polysplits ]",
    ", we can choose a splitting path for each @xmath500 , using at most @xmath576 classes .",
    "if we take into account also the position in @xmath489 at which the path begins , and the position in @xmath515 at which the path ends , we get at most @xmath577 classes .    by the definition of @xmath166 , @xmath578 , so the number of possible values @xmath579 can take , as @xmath92 ranges over @xmath91 , is less than @xmath580 . by lemma  [ polynomial",
    "] , the number of values @xmath560 can take is at most @xmath581 , for positive constants @xmath535 and @xmath334 depending only on @xmath508 and @xmath89 . on the other hand @xmath582",
    "so , by our choice of @xmath77 , @xmath583 @xmath92 s in @xmath91 which all give the same @xmath584 .    from step  3",
    ", we have more than @xmath585 @xmath92 s giving the same @xmath584 . from step  2 ,",
    "we have at most @xmath585 positioned splitting path classes for @xmath515 .",
    "therefore we can find @xmath586 such that ( writing @xmath587 for @xmath588 etc . ) , @xmath589 , and @xmath500 and @xmath590 contain equivalent splitting paths , starting at the same position in @xmath591 and ending at the same position in @xmath592 .    by lemma  [ splicing ] ,",
    "running the algorithm on @xmath593 yields @xmath594 .",
    "now @xmath595 , which does not represent the identity in @xmath0 but rather @xmath596 . on the other hand , @xmath597 which reduces to the empty word .",
    "therefore this rewriting system does not implement a algorithm for @xmath0 .          1 .   for @xmath539",
    "each element of @xmath540 can be represented by a word of exactly length @xmath77 .",
    "2 .   there are @xmath541 and @xmath542 and @xmath598 so that for all @xmath77 @xmath599 and @xmath600 3 .",
    "each element of @xmath56 commutes with each element of @xmath57 .",
    "the proof is very similar to that of theorem  [ expexp ] except that we have to start with @xmath489 longer than @xmath92 .",
    "as before , suppose that we have a deterministic algorithm for @xmath0 , with working alphabet @xmath27 , and longest  of length @xmath89 .",
    "choose @xmath601 and @xmath602 such that @xmath603 and @xmath604 let @xmath182 be a set of words of length @xmath605 bijecting to @xmath606 , for @xmath539 .",
    "if , for at least half of @xmath562 , @xmath608 , we can argue as in steps  1 - 4 , using ( [ enough.u ] ) , to find @xmath609 which break the algorithm . in the other case , arguing similarly , using ( [ enough.v ] ) , we can find @xmath610 which break the algorithm .",
    "we take among our generators for @xmath0 a letter @xmath307 denoting a central element of infinite order and a letter @xmath397 denoting the identity .",
    "we can then take @xmath611 , for if @xmath11 is a geodesic denoting an element of length @xmath612 , we can denote this element by @xmath613 .",
    "thus each element of @xmath614 is represented by a word of length @xmath77 .",
    "likewise , we can take @xmath615 .",
    "we then apply theorem  [ explin ] .                            in this case",
    "@xmath333 contains a finite index subgroup of the form @xmath625 where @xmath100 is isomorphic to @xmath626 and the action of the generator of @xmath627 has eigenvalues @xmath366 and @xmath628 with the modulus of @xmath366 greater than 1 .",
    "it follows that @xmath100 has exponential growth in @xmath333 ."
  ],
  "abstract_text": [
    "<S> viewing dehn s algorithm as a rewriting system , we generalise to allow an alphabet containing letters which do not necessarily represent group elements . </S>",
    "<S> this extends the class of groups for which the algorithm solves the word problem to include nilpotent groups , many relatively hyperbolic groups including geometrically finite groups and fundamental groups of certain geometrically decomposable manifolds . </S>",
    "<S> the class has several nice closure properties . </S>",
    "<S> we also show that if a group has an infinite subgroup and one of exponential growth , and they commute , then it does not admit such an algorithm . </S>",
    "<S> we dub these algorithms . </S>"
  ]
}