{
  "article_text": [
    "the maximum leaf problem is to find a spanning tree with the maximum number of leaves in a given undirected graph @xmath12 the problem is well studied from both algorithmic @xcite and graph - theoretical @xcite points of view .",
    "the problem has been studied from the parameterized complexity perspective as well and several authors @xcite have designed fixed parameter tractable ( fpt ) algorithms for solving the parameterized version of maximum leaf ( the @xmath2-leaf problem ) : given a graph @xmath13 and an integral parameter @xmath2 , decide whether @xmath13 has a spanning tree with at least @xmath2 leaves .",
    "maximum leaf can be extended to digraphs .",
    "a subgraph @xmath0 of a digraph @xmath1 is an _ out - tree _ if @xmath0 is an oriented tree with only one vertex of in - degree zero ( called the _ root _ ) .",
    "the vertices of @xmath0 of out - degree zero are _",
    "leaves_. if @xmath14 , then @xmath0 is an _ out - branching _ of @xmath1 .",
    "the directed maximum leaf problem is to find an out - branching with the maximum number of leaves in an input digraph . the parameterized version of the directed maximum leaf problem is directed @xmath2-leaf : given a digraph @xmath1 and an integral parameter @xmath2 , decide whether @xmath1 has an out - branching with at least @xmath2 leaves .",
    "if we add a condition that every out - branching in directed @xmath2-leaf must be rooted at a given vertex @xmath9 , we obtain a variation of directed @xmath2-leaf called the rooted directed @xmath2-leaf problem .",
    "the study of directed @xmath2-leaf has only begun recently .",
    "alon et al .",
    "@xcite proved that the problem is fpt for a wide family of digraphs including classes of strongly connected and acyclic digraphs .",
    "bonsma and dorn extended this result to all digraphs in @xcite , and improved the running time of the algorithm in @xcite to @xmath15 in @xcite .",
    "recently , kneis et al .",
    "@xcite obtained an algorithm for solving the problem in time @xmath16 .",
    "notice that the algorithm of kneis et al .",
    "@xcite applied to undirected graphs is of smaller running time ( as a function of @xmath2 ) than all previously known algorithms for @xmath2-leaf .",
    "yet , the algorithm of kneis et al .",
    "@xcite is not fast enough to answer in affirmative the question of fellows et al .",
    "@xcite of whether there exists a parameterized algorithm for max leaf of running time @xmath17 , where @xmath18 very recently , fernau et al .",
    "@xcite proved that no polynomial kernel for directed @xmath2-leaf is possible unless the polynomial hierarchy collapses to the third level ( they applied a recent breakthrough result of bodlaender et al .",
    "interestingly , rooted directed @xmath2-leaf admits a polynomial size kernel and fernau et al .",
    "@xcite obtained one of size @xmath19    the only known approximation algorithm for directed max leaf is due to drescher and vetta @xcite and its approximation ratio is @xmath20 , where @xmath21 is the maximum number of leaves in an out - branching of a digraph @xmath1 .    in this paper , we obtain an algorithm faster than the one of kneis et al .",
    "@xcite for directed @xmath2-leaf .",
    "our algorithm runs in time @xmath22 unfortunately , our algorithm can not solve the above - mentioned question of fellows et al .",
    "@xcite , but it shows that the remaining gap is not wide anymore . we also obtain a linear size kernel for directed @xmath2-leaf restricted to acyclic digraphs . notice that ( i ) directed max leaf restricted to acyclic digraphs is still np - hard @xcite , and ( ii ) for acyclic digraphs directed @xmath2-leaf and rooted directed @xmath2-leaf are equivalent since all out - branchings must be rooted at the unique vertex of in - degree zero .",
    "we recall some basic notions of parameterized complexity here , for a more in - depth treatment of the topic we refer the reader to @xcite .",
    "a parameterized problem @xmath23 can be considered as a set of pairs @xmath24 where @xmath25 is the _ problem instance _ and @xmath2 ( usually an integer )",
    "parameter_. @xmath23 is called _ fixed - parameter tractable ( fpt ) _ if membership of @xmath24 in @xmath23 can be decided in time @xmath26 , where @xmath27 is the size of @xmath25 , @xmath28 is a computable function , and @xmath29 is a constant independent from @xmath2 and @xmath25 .",
    "let @xmath23 be a parameterized problem .",
    "reduction @xmath30 to a problem kernel _ ( or _ kernelization _ ) is a many - to - one transformation from @xmath31 to @xmath32 , such that ( i ) @xmath33 if and only if @xmath34 , ( ii ) @xmath35 and @xmath36 for some function @xmath37 and ( iii ) @xmath30 is computable in time polynomial in @xmath27 and @xmath2 . in kernelization",
    ", an instance @xmath24 is reduced to another instance @xmath38 , which is called the _ problem kernel _ ; @xmath39 is the _ size _ of the kernel .",
    "the set of vertices ( arcs ) of a digraph @xmath1 will be denoted by @xmath40 ( @xmath41 ) .",
    "the number of vertices ( arcs ) of the digraph under consideration will be denoted @xmath42 ( @xmath43 ) . for a vertex @xmath44 of a subgraph @xmath45 of a digraph @xmath1 , @xmath46 and",
    "@xmath47 denote the sets of out - neighbors and in - neighbors of @xmath44 , respectively .",
    "also , let @xmath48 @xmath49 , and @xmath50 when @xmath51 we will omit the subscripts in the notation above .",
    "let @xmath1 be a digraph , @xmath0 an out - tree and @xmath52 .",
    "a @xmath53-_out - tree _ of @xmath1 is an out - tree @xmath54 of @xmath1 such that ( 1 ) @xmath55 , ( 2 ) @xmath56 are leaves in @xmath54 , ( 3 ) @xmath0 and @xmath54 have the same root .",
    "a @xmath53-_out - branching _ is a @xmath53-out - tree which is spanning .",
    "let @xmath57 be the maximum number of leaves over all @xmath53-out - branchings of @xmath1 .",
    "we set this number to 0 if there is no @xmath53-out - branching . for an out - tree @xmath0 in a digraph @xmath1",
    ", @xmath58 denotes the set of leaves in @xmath0 and @xmath59 , the set of _ internal vertices _ of @xmath0 . for any vertex @xmath44 in a tree @xmath0",
    "let @xmath60 denote the maximal subtree of @xmath0 which has @xmath44 as its root .",
    "throughout this paper we use a triple @xmath61 to denote a given digraph @xmath1 , an out - tree @xmath0 of @xmath1 and a set of vertices @xmath62 .",
    "we denote by @xmath63 the subgraph of @xmath1 obtained after deleting all arcs out of vertices in @xmath56 and all arcs not in @xmath64 which go into a vertex in @xmath65 .",
    "when @xmath0 and @xmath56 are clear from the context we will omit them and denote @xmath63 by @xmath66 . for further terminology and notation on directed graphs , one may consult @xcite .",
    "the following simple lemma will be used in the rest of the paper .",
    "[ obexist]@xcite a digraph @xmath1 has an out - branching if and only if @xmath1 has a single strong component without incoming arcs .",
    "one can decide whether a digraph has an out - branching in time @xmath67",
    "the algorithm of this section is similar to the algorithm in @xcite , but it differs from the algorithm in @xcite as follows .",
    "we decide in an earlier stage which one of the current leaves of @xmath0 can not be a leaf in a final @xmath53-out - branching and make them to be internal vertices based on lemma [ branch ] , see step 2 in algorithm @xmath68 .",
    "this decision works as a preprocessing of the given instance and gives us a better chance to come up with a @xmath53-out - tree with at least @xmath2 leaves more quickly .",
    "a more important reason for this step is the fact that our algorithm is easier than the main algorithm in @xcite to transform into a faster algorithm .",
    "the following simple result was used in @xcite and its proof can be found in @xcite .",
    "[ extension ] if there is an out - branching rooted at vertex @xmath9 , whenever we have an out - tree rooted at @xmath9 with at least @xmath2 leaves we can extend it to an out - branching rooted at @xmath9 with at least @xmath2 leaves in time @xmath69 .",
    "[ redgreen ] given a triple @xmath61 , we have @xmath70 .",
    "if there is no @xmath53-out - branching in @xmath1 , the subgraph @xmath66 does not have a @xmath53-out - branching either and the equality holds trivially .",
    "hence suppose that @xmath71 is a @xmath53-out - branching in @xmath1 with @xmath57 leaves .",
    "obviously we have @xmath72 .",
    "since the vertices of @xmath56 are leaves in @xmath71 , all arcs out of vertices in @xmath56 do not appear in @xmath71 , i.e. @xmath73 . moreover @xmath74 and thus all arcs not in @xmath64 which go into a vertex in @xmath65 do not appear in @xmath71 since otherwise we have a vertex in @xmath65 with more than one arc of @xmath71 going into it ( or , the root has an arc going into it ) .",
    "hence we have @xmath75 and the above equality holds .    [ branch ]",
    "given a triple @xmath61 , the following equality holds for each leaf @xmath44 of @xmath0 .",
    "@xmath76    if @xmath77 then the equality trivially holds , so we assume that @xmath78 .",
    "since any @xmath79-out - branching or @xmath80-out - branching is a @xmath53-out - branching as well , the inequality @xmath81 obviously holds . to show the opposite direction ,",
    "suppose @xmath54 is an optimal @xmath53-out - branching .",
    "if @xmath44 is a leaf in @xmath54 , then @xmath54 is a @xmath79-out - branching and @xmath82 .",
    "suppose @xmath44 is not a leaf in @xmath54 .",
    "delete all arcs entering @xmath83 in @xmath54 , add @xmath84 and let @xmath85 denote the resulting subgraph .",
    "note that @xmath86 for each vertex @xmath87 in @xmath85 which is not the root and @xmath88 . in order to show that @xmath85 is an out - branching it suffices to see that there is no cycle in @xmath85 containing @xmath44 .",
    "if there is a cycle @xmath89 containing @xmath44 in @xmath85 and @xmath90 , then @xmath91 forms a directed @xmath92-path in @xmath66",
    ". however this is a contradiction as @xmath93 and @xmath94 and there is no path from @xmath95 to @xmath65 in @xmath66 . hence @xmath85 is an out - branching .    as no vertex in @xmath56 has any arcs out of it in @xmath66 we note that @xmath96 .",
    "furthermore we note that @xmath97 as @xmath55 and all arcs we deleted from @xmath98 go to a vertex not in @xmath65 .",
    "therefore @xmath85 is a @xmath53-out - branching which has as many leaves as @xmath54 .",
    "this shows @xmath99 .",
    "[ defgrowtree ] given a triple @xmath61 and a vertex @xmath100 , define @xmath101 as follows .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ( 1 ) : :    @xmath102 . ( 2 ) : :    while @xmath103 add    @xmath104 to @xmath0 and let    @xmath105 . ( 3 ) : :    add @xmath106 to @xmath0 .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    now let @xmath107 .",
    "that is , @xmath101 contains exactly the arcs added by the above process .",
    "the idea behind this definition is the following : during the algorithm , we will decide that a given leaf @xmath44 of the partial out - tree @xmath0 built thus far is not a leaf of the out - branching we are looking for . then adding the out - arcs of @xmath44 to @xmath0 is correct . to make sure that the number of leaves of @xmath0 has increased even when",
    "@xmath108 , we add @xmath109 to @xmath0 instead of just adding the single out - arc of @xmath44 , as described in the following .",
    "[ newbranch ] suppose we are given a triple @xmath61 and a leaf @xmath110 . if @xmath111 then the following holds .",
    "( i ) : :    if @xmath112 then    @xmath113 .",
    "( ii ) : :    if @xmath114 then    @xmath115 .",
    "assume that @xmath54 is an optimal @xmath53-out - branching and that @xmath116 .",
    "we will now show that @xmath117 .",
    "if @xmath44 is a leaf of @xmath54 then this is clearly the case , so assume that @xmath44 is not a leaf of @xmath54 .",
    "let @xmath87 be the unique out - neighbor of @xmath44 in @xmath54 .",
    "as @xmath111 we note that there exists a path @xmath118 from the root of @xmath0 to @xmath87 in @xmath119 .",
    "assume that @xmath120 is chosen such that @xmath121 and @xmath122 .",
    "consider the digraph @xmath123}$ ] and note that @xmath124 can reach all vertices in @xmath125 .",
    "therefore there exists an out - branching in @xmath125 , say @xmath71 , with @xmath124 as the root .",
    "let @xmath85 be the out - branching obtained from @xmath54 by deleting all arcs in @xmath126 and adding all arcs in @xmath71 .",
    "note that @xmath127 as @xmath128 are leaves in @xmath85 and @xmath129 are the only leaves in @xmath54 which may not be leaves in @xmath85 ( and @xmath130 ) .",
    "therefore @xmath131 . as we always have @xmath132 we get the desired equality .",
    "this proves part ( ii ) of the lemma , as if @xmath114 then any optimal @xmath53-out - branching @xmath54 , must have @xmath116 .",
    "we therefore consider part ( i ) , where @xmath112 .",
    "let @xmath133 denote the set of leaves of @xmath101 and let @xmath134 .",
    "note that by the construction of @xmath101 the vertices of @xmath30 can be ordered @xmath135 such that @xmath136 is a path in @xmath101 . as before let @xmath54 be an optimal @xmath53-out - branching and note that if any @xmath137 ( @xmath138 ) is a leaf of @xmath54 then @xmath116 and the above gives us @xmath139 .",
    "this proves part ( i ) in this case , as we always have @xmath140 .",
    "therefore no vertex in @xmath141 is a leaf of @xmath54 and all arcs @xmath142 belong to @xmath54 . by lemma [ branch ]",
    "we may furthermore assume that @xmath54 contains all the arcs from @xmath143 to vertices in @xmath133 .",
    "therefore @xmath101 is a subtree of @xmath54 and @xmath144 .",
    "this completes the proof of part ( i ) .",
    "the following is an @xmath145 algorithm .",
    "its complexity can be obtained similarly to @xcite .",
    "we restrict ourselves only to proving its correctness .    _",
for every vertex @xmath146 , do @xmath147 .    if one of the returns of @xmath147 is `` yes '' then output `` yes '' .    otherwise , output `` no '' .",
    "@xmath68 :    ( 1 ) : :    if @xmath77 , return `` no '' .",
    "( 2 ) : :    while there is a vertex @xmath110 such    that @xmath148 , add the arcs    @xmath84 to @xmath0 .",
    "( 3 ) : :    if @xmath149 , return `` yes '' .",
    "if the number of    leaves in @xmath0 is at least @xmath2 , return `` yes '' .",
    "if all leaves in @xmath0 belong to @xmath56 ,    return `` no '' . stop .",
    "( 4 ) : :    choose a vertex @xmath110 .",
    "@xmath150 and    @xmath151``no '' .",
    "if    @xmath112 then let    @xmath152 .",
    "return    `` yes '' if either @xmath153 or @xmath154 is `` yes '' .",
    "otherwise return `` no '' .",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",
    "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _    while the first line in step 3 is unnecessary , we keep it since it is needed in the next algorithm where @xmath155 is not necessarily true , see ( 4.2 ) in the next algorithm , where @xmath156 .",
    "[ slow ] algorithm @xmath68 works correctly .",
    "in other words , @xmath1 has a @xmath53-out - branching with at least @xmath2 leaves if and only if algorithm @xmath68 returns `` yes '' .",
    "we begin by showing that a call to @xmath68 is always made with a proper argument @xmath61 , that is , @xmath0 is an out - tree of @xmath1 and @xmath157 .",
    "obviously the initial argument @xmath158 is proper .",
    "suppose @xmath61 is a proper argument .",
    "it is easy to see that @xmath159 is a proper argument .",
    "let us consider @xmath160 .",
    "by definition [ defgrowtree ] we note that @xmath161 is an out - tree in @xmath1 and since we consider the digraph @xmath66 at each step in definition [ defgrowtree ] we note that no vertex in @xmath56 is an internal vertex of @xmath161 .",
    "hence @xmath160 is a proper argument .",
    "consider the search tree @xmath162 that we obtain by running the algorithm @xmath68 .",
    "first consider the case when @xmath162 consists of a single node .",
    "if @xmath68 returns `` no '' in step 1 , then clearly we do not have a @xmath53-out - branching .",
    "step 2 is valid by lemma [ branch ] , i.e. it does not change the return of @xmath68 .",
    "so now consider step 3 .",
    "as @xmath163 after step 1 , and by lemma [ branch ] the value of @xmath57 does not change by step 2 we note that @xmath164 before we perform step 3 .",
    "therefore there exists a @xmath53-out - branching in @xmath1 .",
    "if @xmath149 or @xmath165 then , by lemma [ extension ] , any @xmath53-out - branching in @xmath1 has at least @xmath2 leaves and the algorithm returns `` yes '' . if @xmath166 then the only @xmath53-out - branching in @xmath1",
    "is @xmath0 itself and as @xmath167 the algorithm returns `` no '' as it must do .",
    "thus , the theorem holds when @xmath162 is just a node .",
    "now suppose that @xmath162 has at least two nodes and the theorem holds for all successors of the root @xmath30 of @xmath162 . by the assumption that @xmath30 makes further recursive calls , we have @xmath163 and there exists a vertex @xmath168 .",
    "if there is a @xmath53-out - branching with at least @xmath2 leaves , then by lemma [ newbranch ] there is a @xmath169-out - branching with at least @xmath2 leaves or @xmath170-out - branching with at least @xmath2 leaves .",
    "by induction hypothesis , one of @xmath153 or @xmath154 is `` yes '' and thus @xmath68 correctly returns `` yes '' .",
    "else if @xmath171 , then again by lemma [ newbranch ] and induction hypothesis both @xmath153 and @xmath154 are `` no '' .",
    "therefore the theorem holds for the root @xmath30 of @xmath162 , which completes the proof .",
    "we now show how the algorithm from the previous section can be made faster by adding an extra vertex to the set @xmath56 in certain circumstances . recall that step 2 in the above algorithm @xmath68 and in our new algorithm @xmath172 is new compared to the algorithm in @xcite .",
    "we will also allow @xmath56 to contain vertices which are not leaves of the current out - tree @xmath0 .",
    "the improved algorithm is now describedfor every vertex @xmath146 , do @xmath173 .    if one of the returns of @xmath173 is `` yes '' then output `` yes '' .    otherwise , output `` no '' .    @xmath174    ( 1 ) : :    if @xmath77 , return `` no '' .",
    "( 2 ) : :    while there is a vertex @xmath110 such    that @xmath148 , then add the    arcs @xmath84 to @xmath0 .",
    "( 3 ) : :    if @xmath149 , return `` yes '' . stop .",
    "if the number of    leaves in @xmath0 is at least @xmath2 , return `` yes '' .",
    "if all leaves in @xmath0 belong to @xmath56 ,    return `` no '' . stop .",
    "( 4 ) : :    choose a vertex @xmath110 , color    @xmath44 red and let @xmath175 .    +    ( 4.1 ) ; ;      let @xmath176 be the nearest ancestor of @xmath44 in      @xmath0 colored red , if it exists .",
    "( 4.2 ) ; ;      let @xmath177 .",
    "if @xmath176 exists and      @xmath178 has exactly two leaves @xmath44 and      @xmath179 and @xmath180 then : let      @xmath181 be a path in      @xmath182 such that      @xmath183 and      @xmath184 , and let      @xmath185 .",
    "( 4.3 ) ; ;      @xmath186 and      @xmath151``no '' .",
    "( 4.4 ) ; ;      if @xmath112 then      let @xmath187 .",
    "( 4.5 ) ; ;      return `` yes '' if either @xmath153 or @xmath154 is      `` yes '' .",
    "otherwise return `` no '' .",
the existence of @xmath188 in step ( 4.2 ) follows from the fact that @xmath176 was colored red , hence adding @xmath176 to @xmath56 would not have destroyed all out - branchings .",
    "note that @xmath189 does not necessarily belong to @xmath0 .    for the sake of simplifying the proof of theorem  [ fastcomplexity ] below",
    "we furthermore assume that the above algorithm picks the vertex @xmath44 in step 4 in a depth - first manner .",
    "that is , the vertex @xmath44 is chosen to be the last vertex added to @xmath0 such that @xmath110 .    [ fast ] algorithm @xmath172 works correctly .",
    "in other words , @xmath1 has a @xmath53-out - branching with at least @xmath2 leaves if and only if algorithm @xmath172 returns `` yes '' .",
    "the only difference between @xmath172 and @xmath68 is that in step ( 4.2 ) we may add an extra vertex @xmath189 to @xmath56 which was not done in @xmath68 .",
    "we will now prove that this addition does not change the correctness of the algorithm .",
    "so assume that there is an optimal @xmath53-out - branching @xmath54 with @xmath190 but @xmath191 .",
    "we will show that this implies that an optimal solution is found in the branch of the search tree where we put @xmath176 into @xmath56 .",
    "this will complete the proof as if an optimal @xmath53-out - branching @xmath54 does not contain @xmath44 as a leaf , by lemma [ newbranch ] it is found in @xmath192 and if it includes both @xmath44 and @xmath189 as leaves then it is found in @xmath193 ( in step ( 4.3 ) ) .    note that @xmath194 as @xmath178 had exactly two leaves @xmath44 and @xmath179 and @xmath180 and we have just assumed that @xmath44 is a leaf of @xmath54 .",
    "let @xmath195}$ ] and consider the following two cases .",
    "if @xmath189 can reach all vertices of @xmath125 in @xmath125 then proceed as follows .",
    "let @xmath71 be an out - branching in @xmath125 with @xmath189 as the root .",
    "let @xmath85 be the out - branching obtained from @xmath54 by deleting all arcs in @xmath196 and adding all arcs in @xmath71 .",
    "note that @xmath127 as @xmath197 are leaves in @xmath85 and @xmath198 are the only two leaves in @xmath54 which may not be leaves in @xmath85 .",
    "therefore an optimal solution is found when we add @xmath176 to @xmath56 .",
    "so now consider the case when @xmath189 can not reach all vertices of @xmath125 in @xmath125 .",
    "this means that there is a vertex @xmath199 which can not be reached by @xmath189 in @xmath125 .",
    "all such unreachable vertices lie on the same branch of @xmath200 ( the branch not containing @xmath201 ) .",
    "let @xmath202 be a path from the root of @xmath0 to @xmath203 , which does not use any arcs out of @xmath176 ( which exists as @xmath176 was colored red in step ( 4.1 ) , so adding @xmath176 to @xmath56 at this stage would not destroy all out - branchings ) .",
    "assume that @xmath204 is chosen such that @xmath205 and @xmath206 ( see figure 1 ) .",
    "consider the digraph @xmath207}$ ] and note that every vertex in @xmath208 can be reached by either @xmath189 or @xmath209 in @xmath208 .",
    "therefore , there exists two vertex disjoint out - trees @xmath210 and @xmath211 rooted at @xmath189 and @xmath209 , respectively , such that @xmath212 ( to see that this claim holds add a new vertex @xmath87 and two arcs @xmath213 and @xmath214 ) .",
    "furthermore since @xmath189 can not reach @xmath203 in @xmath125 we note that both @xmath210 and @xmath211 must contain at least two vertices .",
    "let @xmath215 be the out - branching obtained from @xmath54 by deleting all arcs in @xmath196 and adding all arcs in @xmath210 and in @xmath211 .",
    "note that @xmath216 as @xmath217 are leaves in @xmath215 and @xmath218 are the only three vertices which may be leaves in @xmath54 but not in @xmath215 .",
    "therefore again an optimal solution is found when we add @xmath176 to @xmath56 .",
    "[ fastcomplexity ] algorithm @xmath172 runs in time @xmath219 .    for an out - tree @xmath133 ,",
    "let @xmath220 .",
    "recall that we have assumed that @xmath172 picks the vertex @xmath44 in step 4 in a depth - first manner .",
    "consider the search tree @xmath162 that we obtain by running the algorithm @xmath173 .",
    "that is , the root of @xmath162 is the triple @xmath221 .",
    "the children of this root is @xmath222 when we make a recursive call in step ( 4.3 ) and @xmath223 if we make a recursive call in step ( 4.4 ) .",
    "the children of these nodes are again triples corresponding to the recursive calls .",
    "let @xmath224 be the number of leaves in a subtree @xmath30 of @xmath162 with triple @xmath61 . clearly , @xmath225 when @xmath61 is a leaf of @xmath162 . for a non - trivial subtree @xmath30 of @xmath162 , we will prove , by induction , that @xmath226 , where @xmath227 and @xmath228 assume that this holds for all smaller non - trivial subtrees .",
    "( note that the value of @xmath29 is chosen in such a way that in the inequalities in the rest of the proof , we have upper bounds for @xmath229 being at least 1 when @xmath230 is a leaf of @xmath162 . )",
    "recall that @xmath110 was picked in step ( 4 ) .",
    "now consider the following possibilities .",
    "if @xmath231 , then the number of leaves of @xmath30 is at most the following as if a call is made to @xmath192 in ( 4.4 ) then the number of leaves of @xmath0 increases by at least one :    @xmath232",
    "so we may assume that @xmath233 in ( 4.3 ) .",
    "now assume that @xmath234 in ( 4.4 ) . in this case either no recursive call is made in ( 4.4 ) or we increase the number of leaves in @xmath0 by at least two .",
    "therefore the number of leaves of @xmath30 is at most    @xmath235    so we may assume that @xmath233 in ( 4.3 ) and @xmath236 in ( 4.4 ) .",
    "let @xmath237 and consider the recursive call to @xmath238 .",
    "if we increase the number of leaves in @xmath54 in step ( 2 ) of this recursive call , then the number of leaves of the subtree of @xmath162 rooted at @xmath239 is at most    @xmath240    therefore , as @xmath241 , the number of leaves in @xmath30 is at most    @xmath242    so we may assume that we do not increase the number of leaves in step ( 2 ) when we consider @xmath239 .",
    "let @xmath87 and @xmath243 denote the two leaves of @xmath244 ( after possibly adding some arcs in step ( 2 ) ) .",
    "consider the recursive call to @xmath245 .",
    "if we increase the number of leaves of @xmath54 in step ( 2 ) in this call then the number of leaves in @xmath30 is at most    @xmath246    so we may assume that we do not increase the number of leaves in step ( 2 ) when we consider @xmath247 .",
    "however in this case we note that @xmath248 in this recursive call as when we consider @xmath243 the conditions of ( 4.2 ) are satisfied as , in particular , @xmath60 has exactly two leaves ) .",
    "so in this last case the number of leaves in @xmath30 is at most    @xmath249    we increase either @xmath250 or @xmath251 whenever we consider a child in the search tree and no non - leaf in @xmath162 has @xmath149 or @xmath252 .",
    "therefore , the number of nodes in @xmath162 is at most @xmath253 .",
    "as the amount of work we do in each recursive call is polynomial we get the desired time bound .",
    "note that directed maximum leaf can be solved in time @xmath254 by an exhaustive search using lemma [ obexist ] .",
    "our @xmath255 algorithm for directed @xmath2-leaf yields an improvement for directed maximum leaf , as follows .",
    "let @xmath256 .",
    "we can solve directed maximum leaf for a digraph @xmath1 on @xmath42 vertices using the following algorithm adml :    stage 1 .",
    ": :    set @xmath257 . for each @xmath258    apply @xmath173 to decide whether    @xmath1 contains an out - branching with",
    "at least    @xmath2 leaves .",
    "if @xmath1 contains such an    out - branching , go to stage 2 . otherwise , using binary search and    @xmath173 , return the maximum    integer @xmath259 for which @xmath1 contains an    out - branching with @xmath259 leaves .",
    ": :    set @xmath260 for    @xmath261 , using lemma [ obexist ] ,    decide whether @xmath262 has an out - branching    for any vertex set @xmath263 of @xmath1 of cardinality    @xmath2 and if the answer is `` no '' , return @xmath264 .",
    "the correctness of adml is obvious and we now evaluate its time complexity .",
    "let @xmath265 .",
    "since @xmath266 , stage 1 takes time at most @xmath267 since @xmath268 , stage 2 takes time at most @xmath269 thus , we obtain the following :    there is an algorithm to solve directed maximum leaf in time @xmath270",
    "lemma [ obexist ] implies that an acyclic digraph @xmath1 has an out - branching if and only if @xmath1 has a single vertex of in - degree zero . since it is easy to check that @xmath1 has a single vertex of in - degree zero , in what follows , we assume that the acyclic digraph @xmath1 under consideration has a single vertex @xmath271 of in - degree zero .",
    "we start from the following simple lemma .",
    "[ obdag ] in an acyclic digraph @xmath45 with a single source @xmath271 , every spanning subgraph of @xmath45 , in which each vertex apart from @xmath271 has in - degree 1 , is an out - branching .",
    "let @xmath272 be an undirected bipartite graph with vertex bipartition @xmath273 .",
    "a subset @xmath263 of @xmath274 is called a _ bidomination set _ if for each @xmath275 there is an @xmath276 such that @xmath277 the so - called _ greedy covering algorithm _ @xcite proceeds as follows : start from the empty bidominating set @xmath89 . while @xmath278 do the following :",
    "choose a vertex @xmath279 of @xmath274 of maximum degree , add @xmath279 to @xmath89 , and delete @xmath279 from @xmath274 and the neighbors of @xmath279 from @xmath280 .",
    "the following lemma have been obtained independently by several authors , see proposition 10.1.1 in @xcite .",
    "[ bdgreedy ] if the minimum degree of a vertex in @xmath280 is @xmath281 , then the greedy covering algorithm finds a bidominating set of size at most @xmath282    let @xmath1 be an acyclic digraph with a single source .",
    "we use the following reduction rules to get rid of some vertices of in - degree 1 .    *",
    "if @xmath1 has an arc @xmath283 with @xmath284 , then contract @xmath204 . *",
    "if @xmath1 has an arc @xmath283 with @xmath285 , @xmath286 and @xmath287 , then delete @xmath44 and add arc @xmath288 for each @xmath289 and @xmath290 .",
    "the reduction rules are of interest due to the following :    [ dd-lem ] let @xmath125 be the digraph obtained from an acyclic digraph @xmath1 with a single source using reduction rules a and b as long as possible .",
    "then @xmath125 has a @xmath2-out - branching if and only if @xmath1 has one .",
    "let @xmath1 have an arc @xmath283 with @xmath284 and let @xmath291 be the digraph obtained from @xmath1 by contracting @xmath204 .",
    "let @xmath0 be a @xmath2-out - branching of @xmath1 .",
    "clearly , @xmath0 contains @xmath204 and let @xmath54 be an out - branching obtained from @xmath0 by contracting @xmath204 .",
    "observe that @xmath54 is also a @xmath2-out - branching whether @xmath87 is a leaf of @xmath1 or not .",
    "similarly , if @xmath291 has a @xmath2-out - branching , then @xmath1 has one , too .",
    "let @xmath1 have an arc @xmath283 with @xmath285 , @xmath286 and @xmath287 and let @xmath291 be obtained from @xmath1 by applying rule b. we will prove that @xmath291 has a @xmath2-out - branching if and only if @xmath1 has one .",
    "let @xmath0 be a @xmath2-out - branching in @xmath1 .",
    "clearly , @xmath0 contains arc @xmath292 and @xmath44 is not a leaf of @xmath0 .",
    "let @xmath293 be the subset of @xmath294 such that @xmath295 for each @xmath296 and let @xmath279 be the vertex such that @xmath297 .",
    "then the out - branching @xmath54 of @xmath291 obtained from @xmath0 by deleting @xmath44 and adding arcs @xmath298 for every @xmath296 has at least @xmath2 leaves ( @xmath54 is an out - branching of @xmath291 by lemma [ obdag ] ) . similarly ,",
    "if @xmath291 has a @xmath2-out - branching , then @xmath1 has one , too .",
    "now consider @xmath125 .",
    "let @xmath272 be an undirected bipartite graph , with vertex bipartition @xmath273 , where @xmath274 is a copy of @xmath299 and @xmath280 is a copy of @xmath300 .",
    "we have @xmath301    [ db - lem ] let @xmath30 be a bidominating set of @xmath272 .",
    "then @xmath125 has an out - branching @xmath0 such that the copies of the leaves of @xmath0 in @xmath274 form a superset of @xmath302 .    consider a subgraph @xmath133 of @xmath272 obtained from @xmath272 by deleting all edges apart from one edge between every vertex in @xmath280 and its neighbor in @xmath30 . by lemma [ obdag ]",
    ", @xmath133 corresponds to an out - branching @xmath0 of @xmath125 such that the copies of the leaves of @xmath0 in @xmath274 form a superset of @xmath302 .",
    "if @xmath125 has no @xmath2-out - branching , then the number @xmath303 of vertices in @xmath125 is less than @xmath304    suppose that @xmath305 ; we will prove that @xmath125 has a @xmath2-out - branching .",
    "observe that by rules a and b , all vertices of @xmath125 are of in - degree at least 2 apart from @xmath271 and some of its out - neighbors .",
    "let @xmath306 denote the set of out - neighbors of @xmath271 of in - degree 1 and let @xmath307 be the set of copies of @xmath306 in @xmath280 .",
    "observe that the vertices of @xmath308 of @xmath309 are all of degree at least 2 .",
    "thus , by lemma [ bdgreedy ] , @xmath309 has a bidominating set @xmath263 of size at most @xmath310 hence , @xmath311 is a bidominating set of @xmath272 and , by lemma [ db - lem ] , @xmath125 has a @xmath312-out - branching with @xmath313 it is not difficult to see that @xmath314",
    "it would be interesting to see whether directed @xmath2-leaf admits an algorithm of significantly smaller running time , say @xmath315 another interesting and natural question is to check whether a linear - size kernel exists for rooted directed @xmath2-leaf ( for all digraphs ) .",
    "* acknowledgements * research of gutin , kim and yeo was supported in part by an epsrc grant .",
    "research of daligault was supported in part by alliance project `` decomposition de graphes orients '' and anr project graal .",
    "we are thankful to serge gaspers for his ideas leading to section [ admlsec ] .",
    "n. alon , f.v .",
    "fomin , g. gutin , m. krivelevich , and s. saurabh .",
    "better algorithms and bounds for directed maximum leaf problems .",
    "27th conf .",
    "foundations software technology and theoretical computer science _",
    "notes comput .",
    "4855 ( 2007 ) , 316327 .",
    "fellows , c. mccartin , f.a .",
    "rosamond , and u. stege .",
    "coordinated kernels and catalytic reductions : an improved fpt algorithm for max leaf spanning tree and other problems .",
    "notes comput .",
    "1974 ( 2000 ) , 240251 .",
    "h. fernau , f.v .",
    "fomin , d. lokshtanov , d. raible , s. saurabh , and y. villanger , kernel(s ) for problems with no kernel : on out - trees with many leaves .",
    "report ( 2008 ) http://arxiv.org/abs/0810.4796v2"
  ],
  "abstract_text": [
    "<S> a subgraph @xmath0 of a digraph @xmath1 is an _ out - branching _ if @xmath0 is an oriented spanning tree with only one vertex of in - degree zero ( called the _ root _ ) . </S>",
    "<S> the vertices of @xmath0 of out - degree zero are _ </S>",
    "<S> leaves_. in the directed max leaf problem , we wish to find the maximum number of leaves in an out - branching of a given digraph @xmath1 ( or , to report that @xmath1 has no out - branching ) . in the directed @xmath2-leaf problem , we are given a digraph @xmath1 and an integral parameter @xmath2 , and we are to decide whether @xmath1 has an out - branching with at least @xmath2 leaves . </S>",
    "<S> recently , kneis et al . ( </S>",
    "<S> 2008 ) obtained an algorithm for directed @xmath2-leaf of running time @xmath3 . </S>",
    "<S> we describe a new algorithm for directed @xmath2-leaf of running time @xmath4 . </S>",
    "<S> this algorithms leads to an @xmath5-time algorithm for solving directed max leaf on a digraph of order @xmath6 the latter algorithm is the first algorithm of running time @xmath7 for directed max leaf , where @xmath8 in the rooted directed @xmath2-leaf problem , apart from @xmath1 and @xmath2 , we are given a vertex @xmath9 of @xmath1 and we are to decide whether @xmath1 has an out - branching rooted at @xmath9 with at least @xmath2 leaves . </S>",
    "<S> very recently , fernau et al . ( </S>",
    "<S> 2008 ) found an @xmath10-size kernel for rooted directed @xmath2-leaf . in this paper , we obtain an @xmath11 kernel for rooted directed @xmath2-leaf restricted to acyclic digraphs . </S>"
  ]
}