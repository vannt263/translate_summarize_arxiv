{
  "article_text": [
    "coding ( ac ) @xcite and its fast implementation quasi ac ( qac ) @xcite have widely been used for data compression due to its entropy - approaching performance . to deal with noisy transmission",
    ", the ac can be extended in two ways to implement joint source - channel coding ( jscc ) : one is to introduce forbidden intervals corresponding to forbidden symbols @xcite , e.g. error - correcting ac ( ecac ) , which has been used for image and video transmission @xcite ; the other is to insert markers into the sequence of source symbols at fixed positions @xcite .",
    "recently , to deal with slepian - wolf coding ( swc ) @xcite , the ac has also been extended in two ways : one is to introduce overlapped intervals corresponding to ambiguous symbols , e.g. distributed ac ( dac ) @xcite and overlapped qac ( oqac ) @xcite ; the other is to puncture some bits of ac bitstream , e.g. punctured qac ( pqac ) @xcite .",
    "there are also some variants of the dac , e.g. time - shared dac ( ts - dac ) @xcite for symmetric swc , rate - compatible dac @xcite , decoder - driven adaptive dac @xcite for online estimation of source statistics , etc .",
    "most recently , dac implementation of distributed joint source - channel coding ( djscc ) has also appeared @xcite .",
    "let @xmath4 be the source and @xmath5 decoder side information ( si ) .",
    "it is straightforward to know that the performance of the ac is possible to approach to source entropy @xmath6 .",
    "however , to the best of the author s knowledge , no analysis on the performance of the ecac and the dac is found in the literature up to now .",
    "for the ecac , we have no idea whether the rate can approach to the limit @xmath7 , where @xmath8 is channel capacity . for the dac",
    ", nobody knows whether the rate can approach to the limit @xmath9 @xcite . for the dac - based djscc , it remains an open question whether the rate can approach to the limit @xmath10 .",
    "this paper is devoted to the performance analysis on the dac . in the author",
    "s opinion , to answer the question whether the rate of the dac can approach to the limit @xmath9 , the prerequisites include two folds .",
    "first , one needs to know how many paths will be created as the dac decoding proceeds .",
    "second , one should know the probability density function ( pdf ) of the hamming distances between those decoding paths and the source .    in @xcite , the author introduces the concept of codeword spectrum which is a function defined over interval @xmath11 .",
    "for dac codeword spectrum of equiprobable binary sources along proper decoding paths , the problem is formatted as solving a system of functional equations including four constraints @xcite . then",
    ", three approximation methods are proposed in @xcite for calculating dac codeword spectrum , i.e. numeric approximation , polynomial approximation , and gaussian approximation .",
    "though the concept of dac codeword spectrum seems wonderful , it finds no usage in practice up to now .    in this paper , by using dac codeword spectrum as a tool , the author answers an important question : how many ( proper and wrong ) paths will be created as the dac decoding proceeds ?",
    "this is the first application of dac codeword spectrum up to now . through this work",
    ", the author expects to find more applications of dac codeword spectrum in the future .",
    "this paper is arranged as follows .",
    "section [ sec : principle ] briefly introduces the principle of dac codec .",
    "section [ sec : preliminaries ] introduces the concepts that will be used in the following analyses , e.g. * path spectrum * , * time spectrum * , * population * , * expansion factor * , etc . , and reveals the relations between expansion factor and path / time spectrum .",
    "section [ sec : time ] researches the evolution and numeric calculation of time spectrum .",
    "section [ sec : results ] reports experimental and theoretical results of expansion factor . finally , section [ sec : conclusion ] concludes this paper .",
    "consider an infinite - length , stationary , and equiprobable binary source @xmath12 .",
    "let @xmath13 be decoder si , where @xmath14 .",
    "the dac encoder @xcite iteratively maps source symbols ` 0 ' and ` 1 ' onto intervals @xmath0 and @xmath15 , where @xmath16 .",
    "we call @xmath17 overlapping factor , which satisfies @xmath18 the resulting codeword of @xmath4 is denoted by @xmath19 .",
    "the dac encoding process is in fact a transform that converts source @xmath4 into codeword @xmath19 .",
    "we denote the rate of @xmath19 by @xmath20 .",
    "it is easy to obtain @xmath21      the dac decoder works in a symbol - driven mode . because @xmath22 when @xmath23 , intervals @xmath0 and @xmath15 are partially overlapped .",
    "though this overlapping leads to a larger final interval and hence a shorter codeword , it also causes an ambiguity during the decoding as a cost . to describe the dac decoding process , a ternary symbol set @xmath24 is defined , where @xmath25 represents the ambiguous symbol .",
    "once symbol @xmath25 is met , the decoder will perform a branching : two candidate paths are created , corresponding to two alternative symbols ` 0 ' and ` 1 ' . therefore ,",
    "as the decoding proceeds , more and more paths will be created . undoubtedly , among them",
    ", there is only one proper path corresponding to source @xmath4 .",
    "we denote the @xmath26-th path as @xmath27 , where @xmath28 is the @xmath29-th symbol along path @xmath30 .    for path @xmath30 , when decoding symbol @xmath28 , the state of a @xmath31-bit dac decoder is described by parameter set @xmath32 , where @xmath33 , @xmath34 , and @xmath35 are @xmath31-bit integers .",
    "@xmath33 and @xmath34 are the lower and upper bounds of the range at time @xmath29 .",
    "@xmath35 is the @xmath31-bit codeword in the buffer at time @xmath29 .",
    "obviously , @xmath36 let @xmath37 then @xmath38 [ c ] { l 's }              0 , & $ 0 \\leq u_{ji } < ( 1-q)$ \\\\              \\mathcal{a } , & $ ( 1-q ) \\leq u_{ji } < q$\\\\              1 , & $ q \\leq u_{ji } < 1$%          \\end{ieeeeqnarraybox}.      \\right.\\ ] ]    if @xmath39 , then two candidate paths are created , corresponding to symbols ` 0 ' and ` 1 ' , respectively .",
    "for each path , its metric is updated according to si @xmath5 and its corresponding sub - interval is selected for next iteration . to maintain linear complexity , each time a symbol is decoded",
    ", the decoder makes use of the @xmath40-algorithm to retain at most @xmath40 paths with the best partial metric , and prune others @xcite .",
    "finally , after all source symbols are decoded , the path with the best overall metric is output as the estimate of @xmath4 .",
    "with the help of fig . [",
    "fig : decoding ] , we give the definitions of path spectrum , population , time spectrum , and expansion factor in turn as follows .",
    "[ def : path_spectrum]_*path spectrum * : _ when decoding @xmath19 along path @xmath30 , the pdf of @xmath41 is called the path spectrum of @xmath19 along path @xmath30 .    for example , in fig .",
    "[ fig : decoding ] , there are four decoding paths , each of which corresponds to its path spectrum .",
    "specially , we are interested in the path spectrum along the proper decoding path @xmath4 , which is denoted by @xmath42 , where @xmath43 . according to @xcite ,",
    "@xmath42 should satisfy the following constraints @xmath44[c]{l 's }          \\int_0 ^ 1 { f(u)du } = 1\\\\          f(u ) = f(1-u)\\\\          f(u ) = f(u / q)/(2q ) , & $ 0 \\leq u < ( 1-q)$ \\\\          f(u ) = \\frac{f(\\frac{u}{q } ) + f(\\frac{u-(1-q)}{q})}{2q } , & $ ( 1-q ) \\leq u < q$ \\\\",
    "f(u ) = \\frac{f(\\frac{u-(1-q)}{q})}{2q } , & $ q \\leq u < 1 $      \\end{ieeeeqnarraybox}.\\ ] ] as for the calculation of @xmath42 , three approximation methods have been proposed in @xcite .",
    "[ def : population]_*population * : _ the number of paths * after * decoding the @xmath29-th symbol is called the population at time @xmath29 , which is denoted by @xmath45 .    as there is only one path",
    "* before * decoding the first symbol , we have @xmath46 . as for",
    "the example of population , please refer to fig .",
    "[ fig : decoding ] .",
    "[ def : breadth_spectrum]_*time spectrum * : _ when decoding the @xmath29-th symbol , there are @xmath47 paths .",
    "we call the pdf of @xmath48 as the time spectrum of @xmath19 at time @xmath29 , which is denoted by @xmath49",
    ".    please refer to fig .",
    "[ fig : decoding ] for the example of time spectrum . as @xmath50 is the pdf of @xmath51 , the normalization property should hold , i.e. @xmath52 in addition , as we are investigating equiprobable binary sources , the symmetry property should also hold , i.e. @xmath53 when decoding the first symbol , there is only one path , which is undoubtedly the proper path . hence , from the statistical view , the time spectrum at time @xmath54 is equivalent to the path spectrum along the proper decoding path @xmath4 , i.e. @xmath55    [ def : expansion_factor]_*expansion factor * : _ we define the expansion factor at time @xmath29 as the ratio of the expectation of @xmath56 to that of @xmath47 , which is denoted by @xmath57 , i.e. @xmath58 .",
    "please refer to fig .",
    "[ fig : decoding ] for the example of expansion factor .",
    "when @xmath59 falls into @xmath60 , two branches will be created , or in other word , one more path will be created . therefore ,",
    "if there are @xmath47 paths at time @xmath61 , then from the statistical view , @xmath62 more paths will be created at time @xmath29 on average , i.e. @xmath63 therefore , the expansion factor at time @xmath29 is @xmath64 especially , as @xmath65 and @xmath46 , we have @xmath66 then recursively , we have @xmath67    from the above analyses , we can see that time spectrum @xmath50 is the key to answering all questions .",
    "once we know @xmath50 , expansion factor @xmath57 can be obtained and then population @xmath68 can be deduced in turn .",
    "with the help of fig . [",
    "fig : evolution ] , we illustrate how the time spectrum evolutes as the decoding proceeds",
    ". let @xmath50 be the time spectrum at time @xmath29 . if @xmath69 , then the 0-branch will be created and interval @xmath0 at time @xmath29 will be mapped onto interval @xmath11 at time @xmath70 .",
    "it means that the part of @xmath50 over interval @xmath69 will be mapped onto @xmath71 over interval @xmath72 at the next iteration [ fig .",
    "[ fig : evolution ] ] .",
    "similarly , if @xmath73 , then the 1-branch will be created and interval @xmath15 at time @xmath29 will be mapped onto interval @xmath11 at time @xmath70 .",
    "meanwhile , the part of @xmath50 over interval @xmath73 will be mapped onto @xmath74 over interval @xmath72 at the next iteration [ fig .",
    "[ fig : evolution ] ] .",
    "finally , the time spectrum at time @xmath70 should be the sum of @xmath71 and @xmath74 [ fig .",
    "[ fig : evolution ] ] , i.e. @xmath75 where @xmath76 is introduced to make sure @xmath77 .",
    "it is easy to obtain @xmath78 as @xmath29 approaches to the infinite , we have @xmath79 hence , @xmath80 it means : as the decoding proceeds , the time spectrum will converge to the uniform distribution .",
    "meanwhile , we can also obtain @xmath81 . finally @xmath82      intuitively , @xmath68 reflects the residual uncertainty of @xmath4 given its dac codeword @xmath19 .",
    "therefore , the conditional entropy of @xmath4 given @xmath19 can be calculated by @xmath83 according to ( [ eqn : population ] ) , we have @xmath84 thus , @xmath85 it is obvious that @xmath86 i.e. @xmath87 thus , we obtain @xmath88 since @xmath19 is the codeword of @xmath4 , the mutual information between @xmath19 and @xmath4 is just the partial information of @xmath4 provided @xmath19 . recall that the rate of @xmath19 is @xmath89 , so @xmath90 it means that the rate of a dac codeword can reach the mutual information between it and the coded source , or in other word , any rate-@xmath17 dac codeword conveys @xmath17 bits information of the coded source on average .      as path spectrum @xmath42 , to find the closed form of time spectrum @xmath50 is not an easy thing .",
    "thus , inspired by the work in @xcite , the author proposes a numeric method for calculating @xmath50 .",
    "this method is described in detail below .",
    "we divide the interval @xmath91 $ ] into @xmath92 uniform cells .",
    "let @xmath93 .",
    "then @xmath50 can be approximated by @xmath94 , where @xmath95 , for a large @xmath92 .      before iteration , we set @xmath96 , @xmath97 , where @xmath98 can be obtained by the method given in @xcite .",
    "recursively , @xmath99 can be obtained from @xmath94 by ( we omit coefficient @xmath76 ) @xmath100      as @xmath77 , we have @xmath101 , i.e. @xmath102",
    "let @xmath103 , then @xmath99 should be normalized as @xmath104      let @xmath105 and @xmath106 , then the expansion factor at time @xmath70 can be calculated by @xmath107",
    "[ fig : results ] includes some theoretical and experimental results of expansion factor . for theoretical results ,",
    "the author first calculates the path spectrum along the proper decoding path @xmath42 through the numeric method given in @xcite , where the number of cells is set to @xmath108 . then seeded with @xmath42 , the numeric method given in section [ sec : time_numeric ] is run to obtain @xmath50 , where the number of cells is also set to @xmath108 .",
    "finally , the expansion factor at time @xmath29 is obtained by ( [ eqn : expansion_factor_numeric ] ) .    for experimental results ,",
    "a 31-bit dac codec is used to encode @xmath109 various length-1024 equiprobable binary sequences",
    ". then these codewords are decoded .",
    "the decoder first counts the number of length-@xmath29 paths ( i.e. only @xmath29 symbols are decoded for each path ) , @xmath45 , through full search .",
    "then the expansion factor at time @xmath29 can be obtained by @xmath110 , where @xmath68 means the average of @xmath45 over @xmath109 dac codewords .    from fig .",
    "[ fig : results ] , the reader can find that the theoretical results coincide with the experimental results perfectly .",
    "both theoretical and experimental curves converge to @xmath3 rapidly , meaning that the above analyses are well verified .",
    "this paper researches an important problem : how many paths will be created as the dac decoding proceeds ? to answer this question , the author inctroduces the concepts of path spectrum , time spectrum , and expansion factor .",
    "the relations between time spectrum , path spectrum , and expansion factor are revealed . a numeric method to calculate time spectrum",
    "is proposed .",
    "the given experimental and theoretical results coincide with each other perfectly . in the future",
    ", the author will continue the work and research another important problem : how about the pdf of the hamming distances between decoding paths and the source ?",
    "m. grangetto , b. scanavino , g. olmo , and s. bendetto , `` iterative decoding of serially concatenated arithmetic and channel codes with jpeg2000 applications , '' , vol .",
    "15571567 , jun . 2007 ."
  ],
  "abstract_text": [
    "<S> distributed arithmetic coding ( dac ) proves to be an effective implementation of slepian - wolf coding ( swc ) , especially for short data blocks . to study the property of dac codewords , </S>",
    "<S> the author has proposed the concept of dac codeword spectrum . for equiprobable binary sources , </S>",
    "<S> the problem was formatted as solving a system of functional equations . then , to calculate dac codeword spectrum in general cases , three approximation methods have been proposed . in this paper , </S>",
    "<S> the author makes use of dac codeword spectrum as a tool to answer an important question : how many ( including proper and wrong ) paths will be created during the dac decoding , if no path is pruned ? the author introduces the concept of another kind of dac codeword spectrum , i.e. * time spectrum * , while the originally - proposed dac codeword spectrum is called * path spectrum * from now on . to measure </S>",
    "<S> how fast the number of decoding paths increases , the author introduces the concept of * expansion factor * which is defined as the ratio of path numbers between two consecutive decoding stages . </S>",
    "<S> the author reveals the relation between expansion factor and path / time spectrum , and proves that the number of decoding paths of any dac codeword increases exponentially as the decoding proceeds . </S>",
    "<S> specifically , when symbols ` 0 ' and ` 1 ' are mapped onto intervals @xmath0 and @xmath1 , where @xmath2 , the author proves that expansion factor converges to @xmath3 as the decoding proceeds .    </S>",
    "<S> distributed source coding ( dsc ) , slepian - wolf coding ( swc ) , distributed arithmetic coding ( dac ) , codeword spectrum . </S>"
  ]
}