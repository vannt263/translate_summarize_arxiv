{
  "article_text": [
    "the bilateral filter of tomasi and maduchi @xcite is a particular instance of an edge - preserving smoothing filter .",
    "the origins of the filter can be traced back to the work of lee @xcite and yaroslavsky @xcite .",
    "the susan framework of smith and brady @xcite is also based on a similar idea .",
    "the relation between the bilateral and other closely related filters is surveyed in @xcite .",
    "the bilateral filter has turned out to be a versatile tool that has found widespread applications in image processing , computer graphics , computer vision , and computational photography .",
    "a detailed survey of some of these applications can be found in @xcite .",
    "more recently , the bilateral filter has received renewed attention in the context of image denoising @xcite . the original bilateral filter @xcite has a straightforward extension to signals of arbitrary dimension and , in particular , to video and volume data @xcite .",
    "thus , while we will limit our discussion to images in this paper , the ideas that we present next can also be extended to higher - dimensional signals .",
    "consider a discrete image @xmath3 where @xmath4 is some finite rectangular domain of @xmath5 .",
    "the gaussian bilateral filtering of this image is given by @xmath6 where both the _ spatial _ and _ range _ kernels are gaussian , @xmath7 in practice , the domain of the spatial kernel @xmath8 is restricted to some neighbourhood of the origin .",
    "typically , @xmath8 is a square neighbourhood , @xmath9 \\times [ -w , w]$ ] where @xmath10 @xcite .",
    "we refer the reader to @xcite for a detailed exposition on the working of the filter .",
    "it is clear that a direct implementation of requires @xmath11 operations per pixel . in general , the directly computed bilateral filter is slow for practical settings of @xmath12 @xcite . to address this issue ,",
    "researchers have come up with several fast algorithms @xcite that are based on some form of approximation and yield various levels of speed and accuracy .",
    "we refer the interested reader to @xcite for a survey of algorithms for fast bilateral filtering .",
    "the ultimate goal in this regard is to reduce the complexity to @xmath2 per pixel , that is , the run time of the implementation should not depend on @xmath12 .",
    "this is commonly referred to as a constant - time implementation .",
    "the constant - time algorithms in @xcite are particularly relevant to the present work .",
    "the authors here proceed by approximating the gaussian range kernel using polynomial and trigonometric functions , and demonstrate how the bilateral filter can be decomposed into a series of spatial gaussian filters as result .",
    "now , since a gaussian filter can be implemented in constant - time using separability and recursion @xcite , the overall approximation can therefore be computed in constant - time .      in this paper",
    ", we propose a fast @xmath2 algorithm for computing which is motivated by the line of work in @xcite .",
    "in particular , we present a novel approximation for the range term in that allows us to decompose the bilateral filter into a series of fast gaussian convolutions .",
    "the fundamental difference between the above papers and the present approach is that instead of approximating the gaussian and then translating the approximation , we directly approximate the translated gaussians using the so - called gauss - polynomials .",
    "the advantages of the proposed approximation are the following :    @xmath13 it is generally much more accurate than the polynomial approximation in @xcite .",
    "@xmath13 for a fixed approximation degree ( to be defined shortly ) , it leads to exactly half the number of gaussian filterings than that required by the approximation in @xcite , and hence has a smaller run time .",
    "@xmath13 it does not involve transcendental functions such as @xmath14 and @xmath15 which are used in @xcite .",
    "it only involves polynomials ( and just a single gaussian ) and hence can be efficiently implemented on hardware @xcite .",
    "this is partly what motivated the present work .",
    "moreover , we also show how the proposed approximation can be improved by first centering the range data , then applying the approximation algorithm , and finally adding back the centre to the processed range data .",
    "the main idea in @xcite was to approximate the range kernel in using appropriate polynomials and trigonometric functions . by using these approximations in place of the gaussian kernel",
    ", it was shown that the numerator and denominator of can be approximated using a series of gaussian filtering .",
    "the present idea is to consider the translates of the range kernel @xmath16 that appear in , where @xmath17 and @xmath18 take values in some intensity range , say , @xmath19 $ ] .",
    "for example , @xmath20 and @xmath21 for an @xmath22-bit grayscale image . we can write @xmath23 for a fixed translation @xmath24 , this is a function of @xmath25 .",
    "notice that the first term is simply a scaling factor , while the second term is a gaussian centered at the origin .",
    "in fact , the second term essentially contributes to the `` bell '' shape of the translated gaussian .",
    "the third term is a monotonic exponential function which is increasing or decreasing depending on the sign of @xmath24 .",
    "this term helps in translating the gaussian to @xmath26 . the decomposition in plays an important role in the rest of the discussion and is illustrated in figure [ decomposition ] .",
    "+    consider the taylor series of the exponential function , @xmath27 by dropping the higher - order terms , we obtain the following approximation of : @xmath28.\\ ] ] being the product of a gaussian and a polynomial of degree @xmath29 , we will henceforth refer to as a `` gauss - polynomial '' of degree @xmath29 .    at this point , we note that one of the proposals in @xcite was to approximate @xmath16 using its taylor polynomial .",
    "the fundamental difference with our approach is that instead of approximating the entire gaussian , we approximate one of its component , namely the monotonic exponential in .",
    "the intuition behind this is that a polynomial eventually goes to infinity as one moves away from the origin .",
    "this makes it difficult to approximate the gaussian function on its asymptotically - decaying tails . as against this ,",
    "the exponential function in is monotonic and hence can be more accurately approximated using polynomials .",
    "this is explained with an example in figure [ comparison ] .",
    "in particular , notice in figure [ comparison ] ( b ) that the gauss - polynomial approximation is fairly accurate over the entire range of interest and is comparable to the raised - cosine approximation @xcite .",
    "we note that for a fixed degree @xmath29 , the accuracy of the gauss - polynomial approximation in depends on @xmath24 .",
    "indeed , when @xmath30 , there is nothing to approximate since the exponential function reduces to a constant in this case . on the other hand , we see from that the magnitude of the higher - order terms increases with increase in @xmath31 , and the approximation accuracy drops as a result .",
    "this is demonstrated with an example in figure [ comparisontau ] ( a ) .",
    "of course , the approximation can be improved by using gauss - polynomials of higher degree .",
    "however , we note that for a fixed degree , the approximation accuracy can be improved simply by reducing the maximum @xmath31 that appears in .",
    "we propose the following `` centering '' trick in which we set , for example , @xmath32 we next translate each pixel intensity by @xmath33 , which has the effect of centering the transformed intensity range at the origin . for example , when @xmath20 and @xmath21 , the maximum @xmath31 equals @xmath34 . however ,",
    "if we center the intensity range @xmath35 $ ] , say at @xmath36 , then we can effectively reduce the maximum @xmath31 to @xmath37 .",
    "the gauss - polynomial approximations obtained after the centering are shown in figure [ comparisontau ] ( b ) .",
    "the above idea of centering is compatible with the bilateral filter precisely because of the following property of the bilateral filter .",
    "if @xmath38 , then @xmath39    this is a simple consequence of the fact that the range kernel depends only on the intensity difference , and that for a fixed range term , preserves constant functions . in other words , we can first centre the intensity range , apply the bilateral filter , and finally add back the centre to the output .",
    "we now present the constant - time implementation of using gauss - polynomials .",
    "suppose that @xmath29 is the degree of the polynomial in . for @xmath40 , define the images @xmath41 denote the gaussian filtering of @xmath42 by @xmath43 ,",
    "that is , @xmath44 substituting @xmath17 and @xmath18 , and using the gauss - polynomial approximation in place of @xmath16 , it can be verified that ( after interchanging summations ) we can express the numerator of as @xmath45 where @xmath46 similarly , we can express the denominator of as @xmath47 where @xmath48 in other words , we can approximate by @xmath49 note that we have effectively transferred the non - linearity of the bilateral filter to the intermediate images in , which are obtained from the input image using pointwise non - linear transforms .",
    "the main leverage that we get from the above manipulation is that , for any arbitrary @xmath12 , can be computed using @xmath2 operations per pixel @xcite .",
    "the overall cost of computing is therefore @xmath2 per pixel . in other words",
    ", we have a constant - time approximation of the bilateral filter . in this regard , we note that the above analysis holds if we replace the spatial gaussian filter by any other filter ( e.g. , a box filter ) that has a constant - time implementation .",
    "@xmath50 @xmath38 @xmath51 @xmath52 @xmath53 @xmath54 @xmath55 @xmath56 @xmath57 @xmath58    the overall algorithm is summarized in algorithm [ gpf ] .",
    "we will henceforth refer to this as the gauss - polynomial - based bilateral filter ( ` gpf ` ) .",
    "notice that we use centering and to improve the accuracy .",
    "moreover , we efficiently implement steps to .",
    "in particular , we recursively compute the images in and the factorials in and .",
    "notice that steps @xmath59-@xmath60 , @xmath61-@xmath62 , @xmath63 , and @xmath64 are applied to each pixel ( cheap pointwise operations ) . to avoid confusion , we note that the specification of the some of quantities in algorithm [ gpf ] are somewhat different from the corresponding definitions in - .",
    "it is clear that the main computations in ` gpf ` are the gaussian filterings in step @xmath65 ( and the initial filtering in step @xmath22 ) .",
    "that is , the overall cost is dominated by the cost of computing @xmath66 gaussian filterings . in this regard ,",
    "we note that for the same degree @xmath29 , the number of gaussian filterings required in @xcite is @xmath67 .",
    "indeed , we will see in section [ sec : results ] for a fixed @xmath29 , the overall run - time of ` gpf ` is about a third of that of @xcite .",
    "finally , we note that ` gpf ` involves the evaluation of a transcendental function just once in step 4 .",
    "thus , ` gpf ` is better suited to hardware implementation @xcite compared to the algorithm in @xcite which involves the repeated evaluation of cosine and sine functions .",
    "we now present some results concerning the accuracy and run - time of the proposed ` gpf ` algorithm . in particular , we compare it with some of the fast algorithms @xcite . the experiments were performed using matlab on an intel quad - core 2.7 ghz machine with 8 gb memory .",
    "we implemented the gaussian filtering in ` gpf ` and @xcite using deriche s constant - time algorithm @xcite .",
    "the average run - times of the various fast algorithms are reported in table [ table ] for a @xmath68 .",
    "we do not redundantly report the run - times for different image sizes , since this can roughly be estimated from the run - times in table [ table ] ( the algorithms scale linearly with the number of pixels ) .",
    "notice that the run time of ` gpf ` and @xcite does not change appreciably with @xmath12 .",
    "to evaluate the accuracy , we also report the mean - squared - error ( mse ) between the exact implementation of and the result obtained using the fast algorithms in table [ table ] .",
    "in particular , the mse between two images @xmath69 and @xmath70 is defined to be @xmath71 db , where @xmath72 .",
    "notice that ` gpf ` is competitive with the existing algorithms in terms of accuracy and run - time .",
    "in particular , ` gpf ` has the smallest run - time , and its mse is in general better than the rest of the algorithms and comparable to that of the raised - cosine - based approximation in @xcite .",
    "the degree of the raised - cosine and the gauss - polynomial filter is @xmath73 for all the experiments ( this gives a good tradeoff between accuracy and run - time ) . in this regard ,",
    "an open question is how the accuracy of ` gpf ` varies with the degree , as a function of @xmath12 and @xmath74 .",
    "this will be addressed in future work .",
    "note that the run - time of the polynomial approximation in @xcite is almost identical to that of the proposed algorithm and is hence not reported . for a visual comparison ,",
    "we report the result obtain on the _ peppers _ image in figure [ outputimages ] .",
    "notice the visible distortions in subfigure ( d ) which arises on account of the poor approximation of the gaussian kernel using taylor polynomials .",
    "l*6cr + & @xmath59 & @xmath75 & @xmath76 & @xmath77 & @xmath78 & @xmath79 + exact & 1.5s & 3.2s & 5.3s & 8.4s & 32.5s & 73.2s + @xcite & 93ms & 134ms & 191ms & 261ms & 847ms & 1.92s + @xcite & 112ms & 118ms & 115ms & 116ms & 118ms & 120ms + @xcite & 210ms & 215ms & 220ms & 225ms & 230ms & 250ms + ` gpf ` & 74 ms & 82ms & 88ms & 89ms & 95ms & 98ms +   +    @xcite & 5.9 & 7.8 & 9.1 & 9.8 & 12.2 & 13.1 + @xcite & -3.3 & -1.1 & 0.5 & 1.8 & 6.2 & 9.2 + @xcite & -10.5 & -6.4 & -3.8 & -1.7 & 4.4 & 7.8 + ` gpf ` & -9.6 & -5.6 & -3.1 & -1.1 & 5.1 & 8.4 +    [ table ]     +   +",
    "we presented a fast algorithm for bilateral filtering based on gauss - polynomial decompositions of the translations of the range kernel .",
    "we presented some preliminary results which demonstrated the accuracy and speed of the algorithm in comparison to some of the existing fast algorithms for bilateral filtering .",
    "in particular , we saw that the algorithm is comparable to the one in @xcite , but has a smaller run time ( about a third ) .",
    "moreover , as remarked in the introduction , the proposed algorithm has an edge over @xcite in the context of hardware implementation  it is based on polynomials and does not involve the computation of multiple trigonometric functions @xcite .",
    "we note that the algorithm has a direct extension to other variants of the bilateral filter including the joint and guided filter @xcite , and can also be extended for handling volume and video data @xcite .",
    "g. petschnigg , r. szeliski , m. agrawala , m. cohen , h. hoppe , and k. toyama , `` digital photography with flash and no - flash image pairs , '' _ acm transactions on graphics _ , vol .",
    "664 - 672 , 2004 ."
  ],
  "abstract_text": [
    "<S> the bilateral filter is a versatile non - linear filter that has found diverse applications in image processing , computer vision , computer graphics , and computational photography . </S>",
    "<S> a common form of the filter is the gaussian bilateral filter in which both the spatial and range kernels are gaussian . </S>",
    "<S> a direct implementation of this filter requires @xmath0 operations per pixel , where @xmath1 is the standard deviation of the spatial gaussian . in this paper </S>",
    "<S> , we propose an accurate approximation algorithm that can cut down the computational complexity to @xmath2 per pixel for any arbitrary @xmath1 ( constant - time implementation ) . </S>",
    "<S> this is based on the observation that the range kernel operates via the translations of a fixed gaussian over the range space , and that these translated gaussians can be accurately approximated using the so - called gauss - polynomials . </S>",
    "<S> the overall algorithm emerging from this approximation involves a series of spatial gaussian filtering , which can be efficiently implemented ( in parallel ) using separability and recursion . </S>",
    "<S> we present some preliminary results to demonstrate that the proposed algorithm compares favorably with some of the existing fast algorithms in terms of speed and accuracy .    bilateral filter , approximation , gauss - polynomial , convolution , fast algorithm . </S>"
  ]
}