{
  "article_text": [
    "martin - lf type theory ( mltt ) and its manifestations , in proof assistants such as agda and coq , is intended to be a framework for formalizing ( constructive ) mathematics on a full scale .",
    "it is known that the intensional version of mltt is sometimes difficult to employ when formalizing mathematics that depends on having ( propositional ) equality between sets or setoids .",
    "this may be troublesome in parts of category theory @xcite where an equality on objects is a standard assumption .",
    "a typical situation is when we wish to deal with some category of sets or setoids on equal footing to other categories .",
    "the built - in propositional equalities of type theory , given by the intensional identity types , are not extensional enough for this work without further complications .",
    "the root of the problem is that the intensional identity type of mltt induces a non - trivial groupoid structure on types @xcite .",
    "this can be avoided by introducing extra elimination axioms like the k - axiom of streicher @xcite , the uniqueness of identity proofs axiom , or weaker axioms @xcite . adding these axioms is , however , an unsatisfactory solution according to the general philosophy of mltt , where the elimination rule is supposed to be generated by the introduction rule .    in this paper we consider solutions to this problem within the standard intensional version of mltt with one universe and w - types . in section 4.1",
    "we recall that any ( proof - irrelevant ) family @xmath0 of setoids over a setoid @xmath1 gives rise to a category @xmath2 of setoids with objects @xmath1 .",
    "we may regard the family @xmath0 as a setoid of setoids , and a crucial issue here is to construct rich or large enough such families . depending on closure conditions of @xmath0 , the category @xmath2 has corresponding categorical constructions .",
    "a first solution is to explicitly construct @xmath0 such that it is closed under particular constructions , here exemplified by finite limits ( section 4.2 ) .",
    "a smoother solution is however to employ a universe @xmath3 of iterative sets that forms a model of aczel - myhill constructive set theory ( czf ) , and consider the category of setoids that the sets of @xmath3 induces .",
    "this turns out to be a well - behaved category of setoids , which is isomorphic to the internal category of sets of @xmath3 ( theorem [ main ] ) .",
    "theorem [ main ] allows passage between the setoids of type theory and the sets of @xmath3 . the model and the theorem",
    "have been formalized in the proof assistant coq , and give , in principle , a method for formalizing further category - theoretic results in coq that depend on a good category of sets .",
    "this makes it possible to integrate set - theoretic and type - theoretic reasoning , where set theory has a simpler language which is better adapted to solve certain complications arising from transport functions of families of setoids , and type theory has a more direct computational interpretation .",
    "models of czf have previously been implemented in systems similar to coq : in lego by mendler @xcite and in agda / alfa by takeyama @xcite .",
    "see also hickey @xcite and yu @xcite for work done in metaprl . however , we add a new twist here by allowing urelements or atoms in the model , and importantly , giving the relation to setoids , via the notion of a @xmath3-representable setoid ( section [ v_represent ] ) .",
    "our formalized model moreover allows us to embed an arbitrary setoid @xmath4 in a czf - universe @xmath5 . as a bonus of the construction @xmath5",
    ", we obtain a model of czf with atoms ( elements of @xmath4 ) , which is formalized as a first - order theory czfu ( section [ czfu_section ] ) .",
    "we end by some remarks on the formalization in coq ( section [ coq_implementation ] ) .",
    "in the following we freely use the propositions - as - types principle in the logical arguments .",
    "thus we may speak of a proof @xmath6 of a proposition @xmath7 , meaning that @xmath6 is an element of type @xmath7 which is written @xmath8 as usual . in our implementation in coq",
    "this corresponds to avoiding the built - in type prop and using set or type for propositions .",
    "( see section [ coq_implementation ] . )",
    "recall that a _ setoid _ @xmath9 is a type @xmath10 with an equivalence relation @xmath11 .",
    "we denote the constructions associated with proofs of reflexivity , symmetry and transitivity as follows    * @xmath12 ( @xmath13 ) * @xmath14 ( @xmath15 ) * @xmath16 ( @xmath17 )    we shall often write @xmath18 for @xmath13 to simplify notation . for setoids @xmath1 and @xmath19 , an _ extensional function _",
    "@xmath20 is a pair @xmath21 where @xmath22 and @xmath23 is a proof - object for extensionality of the operation @xmath24 , that is that @xmath25 we write @xmath26 for @xmath27",
    ".    for setoids @xmath1 and @xmath19 denote by @xmath28 the setoid of extensional functions from @xmath1 to @xmath19 , with point - wise equality ( @xmath29 ) as equivalence relation .",
    "the setoids and extensional functions form an e - category , which shall be named * setoids * here .",
    "we recall that an e - category @xmath30 has a type of objects with no equality assumed between them .",
    "the morphisms , denoted @xmath31 , from object @xmath1 to @xmath19 is a setoid and the composition operation @xmath32 is an extensional function .",
    "the usual laws for composition and identity are supposed to be satisfied .",
    "[ fecat ] let @xmath33 be a family of setoids indexed by a type @xmath34 .",
    "then an e - category @xmath35 of setoids can be formed whose type of objects is @xmath34 and where @xmath36    the e - category * setoids * considered here ( and elsewhere ) is closely related to the exact completion of a syntactic category arising from type theory ( cf .",
    "the match is not precise since the e - category is internal to type theory , whereas the exact completion takes place on the meta - level .",
    "@xcite compare several variants of the notion of setoid and their formalization in coq .",
    "in their terminology we use _ total setoids _ but employ * set*-valued equivalence relations instead of their * prop*-valued ones .",
    "a good notion of a family of setoids over a setoids is the following ( compare the discussion in @xcite ) .",
    "a _ proof irrelevant family @xmath0 of setoids over a setoid @xmath1 _  or just _ family of setoids _  consists of a setoid @xmath37 for each @xmath38 , and for @xmath39 an extensional function @xmath40 which satisfies the conditions ( f1 )  ( f3 ) below .    1 .",
    "@xmath41 for @xmath18 .",
    "2 .   @xmath42 for @xmath43 and @xmath44 .",
    "this is the proof - irrelevance condition , since @xmath45 does not depend on @xmath46 .",
    "3 .   @xmath47 for @xmath48 , @xmath49 and @xmath50 .",
    "the function @xmath45 is sometimes called a _ transport function . _ because of condition ( f2 ) , condition ( f1 ) can be replaced by ( f1 ) @xmath51 and condition ( f3 ) can be replaced by ( f3 ) @xmath52 we shall sometimes use the notation @xmath53 for @xmath54 when @xmath0 is clear from the context .    as can be seen from ( f1 )  ( f3 ) a family @xmath0 may be regarded as a functor ( or rather e - functor ) from the discrete e - category @xmath55 , induced by @xmath1 , to * setoids*.",
    "it is well - known that the e - category of setoids in martin - lf type theory forms a locally cartesian closed ( lcc ) category ; see @xcite .",
    "it can moreover be shown to be a pretopos with further properties @xcite .",
    "in fact , one can straightforwardly verify in coq ( see for instance @xcite ) that the e - category of setoids forms an lcc pretopos . for categories of setoids with equality on objects",
    "the constructions are more delicate and this is the subject of this and the next section .",
    "categories can be presented in an essentially algebraic way ; cf .  @xcite .",
    "this is a useful formulation especial for doing category theory internally to a category , but also in set theory .",
    "a _ ( small ) category @xmath56 _ is a triple of classes ( sets ) @xmath57 , @xmath58 , @xmath59 consisting of _ objects , _ _ arrows _ and _ composable arrows , _ equipped with class functions ( functions ) @xmath60 , @xmath61 and @xmath62 that satisfy the axioms    1 .",
    "@xmath63 , 2 .",
    "@xmath64 , 3 .",
    "@xmath65 , 4 .",
    "@xmath66 , 5 .",
    "@xmath67 ,    and    1 .",
    "@xmath68 , 2 .",
    "@xmath69 , 3 .",
    "@xmath70 , 4 .",
    "@xmath71 , 5 .",
    "@xmath72 .",
    "the category * set * of sets and functions can be constructed in the standard way in zf or czf using these operations , and its categorical properties developed , following e.g. @xcite .",
    "we can simply obtain a type - theoretic definition by replacing sets and classes with setoids ( with respective size restrictions ) and functions by extensional functions .    a _ functor _",
    "@xmath73 is a triple of extensional functions @xmath74 , @xmath75 , such that all operations of the categories are preserved , that is    * @xmath76 , * @xmath77 , * @xmath78 , * @xmath79 , * @xmath80 , * @xmath81 .",
    "the axioms 1  9 take a more familiar form if we rewrite them using the composition predicate @xmath82 ( or @xmath83 ) defined by @xmath84    any category @xmath56 may be viewed as an e - category @xmath85 by ignoring the equality on objects and defining @xmath86 to be the setoid @xmath87 , \\sim)\\ ] ] where @xmath88 iff @xmath89 .",
    "composition and identity are then defined in the obvious way using the axioms above .",
    "we may even consider @xmath90 as a proof - irrelevant family over the setoid @xmath91 .",
    "this gives an equivalent notion of category which is perhaps more natural in the type - theoretic language .",
    "we recall the following construction from @xcite and @xcite .",
    "any family @xmath0 of setoids over a setoid @xmath1 gives rise to a category of setoids @xmath92 in the following way .",
    "the objects are given by the index setoid @xmath93 , and are thus equipped with equality , and the setoid of arrows @xmath58 is @xmath94 where two arrows are equal @xmath95 if , and only if , there are proof objects @xmath96 and @xmath97 such that the diagram @xmath98\\efig\\ ] ] commutes , or equivalently @xmath99.\\ ] ] ( note that @xmath45 and @xmath100 are independent of @xmath46 and @xmath6 . ) the domain and codomain maps @xmath101 and @xmath102 are given by @xmath103 and @xmath104 .",
    "the setoid @xmath59 of composable maps is then @xmath105 , \\approx)\\ ] ] where @xmath106 if and only if @xmath107 and @xmath108 .",
    "the composition map @xmath109 is given by @xmath110 furthermore , let @xmath111 it is straightforward to verify    [ cafthm ] if @xmath0 is a family of setoids over a setoid @xmath1 , then @xmath92 is a small category .",
    "[ compchar ] in the category @xmath112 the composition predicate @xmath113 may be characterized as follows @xmath114 if @xmath115 and @xmath116 are definitionally equal , then @xmath117 is the identity map",
    ".      an important property of the category of sets is that the terminal object ( i.e.  the singleton set ) generates the category . in such categories it is possible to interpret the internal logic in terms of elements ; see @xcite .",
    "we recall some definitions before proving that @xmath112 has the same property .",
    "let @xmath118 be a category with terminal object @xmath119 . recall that an _ element _ of an object @xmath120 is an arrow @xmath121 .",
    "an arrow @xmath122 of the category is here called _ onto _ if for every @xmath123 , there is some @xmath121 with @xmath124 .",
    "the arrow is as usual _ mono _ if for any @xmath125 in @xmath118 , @xmath126 implies @xmath127 .",
    "if each arrow @xmath122 in @xmath128 that is both onto and mono , is also an isomorphism , then we say that @xmath119 is a _ strong generator _ for @xmath128 . for a family @xmath0 of setoids over @xmath1",
    ", we say that _",
    "@xmath129 represents a setoid @xmath130 _ if @xmath131 is isomorphic to @xmath130 .",
    "we also say that _",
    "@xmath0 contains @xmath130 _ ( up to isomorphism ) .",
    "the category @xmath112 has a strong generator whenever the family @xmath0 contains the terminal object .",
    "this follows from the straightforwardly proven result .",
    "note that part ( d ) uses the type - theoretic choice principle coming from @xmath132-elimination .",
    "let @xmath0 be a family of setoids indexed by the setoid @xmath1 , and suppose that @xmath129 represents the terminal setoid",
    ". then    1 .",
    "@xmath116 is the terminal object in @xmath112 .",
    "if @xmath133 is an arrow of @xmath112 then it is mono if and only if @xmath134 is injective .",
    "if @xmath133 is an arrow of @xmath112 then it is onto if and only if @xmath134 is surjective .",
    "the terminal object of @xmath112 is a strong generator for the category .",
    "if the family @xmath0 is a universe , we get a category @xmath112 with closure conditions depending on the type - theoretic closure conditions of the universe . in @xcite",
    "it was shown that by letting @xmath135 be a particular universe of @xmath136-small setoids , the category is a locally cartesian closed pretopos with @xmath137 . by a such a universe",
    "we mean that , for each @xmath138 , @xmath139 is a setoid where both the underlying type @xmath140 and the truth - values of @xmath141 are in the type theoretic universe @xmath136 .",
    "however , the construction of @xmath1 and @xmath0 in that paper used constructions going outside standard intensional type theory , in fact , a tacit assumption was made of a principle ( see ( * ? ? ?",
    "* theorem 5.2 ) ) which is equivalent to uniqueness of identity proofs , which , in turn , is false in the groupoid model . in @xcite",
    "a somewhat weaker axiom is proposed , which may possibly let the constructions of @xcite go through .",
    "we have constructed ( in coq ) a graded universe of setoids @xmath142 , with no transfinite types , but closed under grade bounded @xmath143 and @xmath132 , as well as sums and coequalizers , to be able to mimic constructions of categorical universes in extensional type theory @xcite . however",
    "the expected categorical properties of @xmath144 have turned out quite difficult to verify formally . in the next subsection",
    "we present instead a method to taylor particular categorical universes which is more manageable .",
    "we present a method for constructing categories of setoids closed under particular constructions , and exemplify with the construction of pullbacks .",
    "let @xmath34 be the inductive type defined by the rules @xmath145 the identity on this type is decidable and satisfies @xmath146 this forms the setoid of _ construction stages_. the symbol @xmath147 signifies the basic stage .",
    "let @xmath148 be any family of setoids indexed by a setoid @xmath19 . then define by recursion on @xmath149 , @xmath150 and @xmath151 , such that @xmath150 is a setoid and @xmath151 is family of setoids on @xmath150 .",
    "let @xmath152 and @xmath153 .",
    "let @xmath154 , \\sim\\bigr ) \\end{split}\\ ] ] where @xmath155 is given by @xmath156 and then @xmath157 , \\approx \\bigr).\\ ] ] where @xmath158 for @xmath159 , define @xmath160 by letting @xmath161 where @xmath162 is some proof of @xmath163 ( that can be obtained from ( [ speq1 ] ) ) .",
    "it is straightforward to check that @xmath164 is a family of setoids over @xmath165 .",
    "moreover the following is a pullback square in the e - category of setoids @xmath166 , \\efig\\ ] ] where @xmath167 and @xmath168 .",
    "define using @xmath169-elimination , for @xmath170 , @xmath171 by letting @xmath172 and @xmath173 .",
    "finally we define @xmath174 where @xmath175 and @xmath176 and further for @xmath177 , we define @xmath178 where @xmath179 is obtained by @xmath169-elimination with @xmath180 and @xmath181 .",
    "the identity type of @xmath34 is decidable , so it enjoys the uniqueness of identity proofs property by hedberg s theorem @xcite .",
    "then one may easily verify that @xmath182 is a family of setoids over @xmath183 .",
    "furthermore the category @xmath184 given by this family has chosen pullbacks , which means that there are two extensional functions @xmath185 defined on the setoid of arrows with common codomain @xmath186 such that for all @xmath187 , @xmath188\\efig\\ ] ] is a pullback .",
    "using these constructions it is now possible to verify :    [ haspullbacks ] the category @xmath144 has chosen pullbacks .",
    "we expect that it should be possible to extend the construction above to other properties ( e.g.  lcc pretoposes ) by adding new construction stages to ( [ stages ] )",
    ". the formal verification will probably be quite cumbersome .",
    "however it is possible to obtain rich categorical universes that are smoother to construct and verify . in the next section",
    "we show that chosing @xmath1 and @xmath0 to be induced by the aczel universe @xmath3 of iterative sets , the category @xmath112 gets good categorical properties ; see theorem [ main ] .",
    "it is known that the category of sets inside constructive zermelo - fraenkel set theory ( czf ) has good category - theoretic properties @xcite .",
    "these can preferably be established on basis of the essentially algebraic formulation of categories given in section 4 .",
    "aczel @xcite presented a model of czf in mltt .",
    "this suggests that we may use such models of czf to build useful categories for type theory .",
    "the model builds on the iterative conception of set , which is to say , a set is a , possibly infinite , well - founded tree , and where equality of sets is defined in terms of bisimulation .",
    "we consider here a modification of aczel s standard model of czf , to be able to add urelements or atoms . for a universe @xmath189 , and a setoid @xmath190 ( of urelements ) ,",
    "the set - theoretic universe @xmath191 is inductively defined by the rules @xmath192 the equality @xmath193 is the smallest relation satisfying the two rules    @xmath194    @xmath195 the membership relation is defined by @xmath196 and declaring @xmath197 to be false .",
    "we have @xmath198 iff @xmath199 , so that equality of atoms is exactly that of the setoid .",
    "the standard model is the special case when @xmath4 is the empty setoid ( no atoms ) .",
    "we say that a setoid _",
    "@xmath200 belongs to the universe @xmath136 _ if there is some @xmath201 with @xmath202 , and some @xmath203 such that for all @xmath204 , @xmath205 for such setoids we have :    [ smallness ] if @xmath4 is a setoid which belongs to @xmath136 , then the relations @xmath206 and @xmath207 are propositions in @xmath136 .    it is crucial that the basic relations @xmath208 and @xmath209 are interpreted as propositions in the universe @xmath136 in order to be able to verify that all bounded formulas ( @xmath210-formulas ) may be used in the separation scheme of czf .",
    "we will thus consider @xmath5 where the setoid @xmath4 belongs to @xmath136 .",
    "there is no principal difficulty in extending the construction to finitely many setoids of atoms .",
    "we consider here for simplicity only pure sets , thus let @xmath211 .",
    "for each @xmath212 define the setoid @xmath213 of elements of @xmath3 belonging to @xmath214 by letting @xmath215 and @xmath216 note that for a set @xmath217 , it holds that @xmath218 where @xmath219 we define therefore @xmath220 it is thereby easy to find the setoid and its underlying type from the set .",
    "a setoid @xmath1 is _",
    "@xmath3-representable _ iff there is some @xmath212 and a bijection @xmath221 .",
    "let @xmath217 and @xmath222 .",
    "if we examine @xmath223 the standard construction of the setoid of functions from @xmath224 to @xmath225 , it has the underlying type @xmath226 and equality @xmath227 defined by @xmath228 let @xmath229 denote the type in ( [ fntype ] ) .",
    "define @xmath230 which gives the graph of the function @xmath231 , when @xmath232 .",
    "suppose that the type @xmath229 has a code @xmath233 in @xmath136 so that @xmath234 .",
    "now we can form @xmath235 which is the set all of functions from @xmath214 to @xmath236 .",
    "indeed we have @xmath237 where the latter can be formally expressed as the conjunction of the following statements @xmath238 @xmath239 @xmath240 note that these are the interpretations of the corresponding first - order czf formulas in the structure @xmath241 .",
    "we have the following bijective correspondence    for any @xmath242 , there is a bijection @xmath243 given by @xmath244 .",
    "actually we have arrived at the standard definition of the function set by analyzing representable sets and functions .",
    "the internal category of sets in @xmath3 may be described as follows .",
    "define the category @xmath245 to have as objects @xmath246 the setoid @xmath247 .",
    "the arrows @xmath248 has as underlying type @xmath249 where @xmath250 is the predicate definable using czf formulas @xmath251 equality @xmath252 is defined to be @xmath253 .",
    "the setoid @xmath254 of composable arrows has for underlying type @xmath255 and its equality is given by @xmath256 iff @xmath257 .",
    "again these can be given by straightforward intepretations of first - order czf - formulas .",
    "composition @xmath258 of arrows is obtained by composition of relations in the usual set - theoretic way .",
    "[ v_is_cat ] @xmath245 is a category .",
    "a different category is constructed using the method of section [ catfromfam ] .",
    "we extend @xmath259 to a family of setoids @xmath260 over the setoid @xmath247 .",
    "let @xmath261 for @xmath262 .",
    "for a proof object @xmath46 for @xmath263 , or equivalently , for @xmath264 we thus have @xmath265 let @xmath266 .",
    "this defines an extensional function @xmath267    @xmath260 is a family of setoids over @xmath268 .",
    "the function @xmath269 , is independent of @xmath46 . indeed ,",
    "if @xmath270 are arbitrary and @xmath271 , then @xmath272 this verifies ( f2 ) .",
    "if @xmath273 , then @xmath274 , so @xmath275 . hence @xmath276 is the identity , and ( f1 ) is clear . finally , we check ( f3 ) .",
    "suppose we have three proof objects @xmath277 , @xmath278 and @xmath279 .",
    "expanding as above we have @xmath280 and @xmath281 for all @xmath282 and @xmath283 .",
    "thus @xmath284 for all @xmath282 .",
    "now the third proof object gives similarly @xmath285 for all @xmath282 .",
    "hence for all @xmath282 , @xmath286 thus @xmath260 is a family of setoids over @xmath268 .    from the family @xmath287",
    ", we may construct the category @xmath288 , as in section [ catfromfam ] and , then compare it to the category @xmath289 above .",
    "the objects of the two categories are give by the same setoid .",
    "let @xmath290 be the identity map .",
    "there is a bijection @xmath291 given by @xmath292 further , this yields a bijection @xmath293 by letting @xmath294 act on the two component arrows .",
    "it is then straightforward to verify that @xmath295 , @xmath294 and @xmath296 form a functor which is an isomorphism .",
    "we have    [ main ] the categories @xmath297 and @xmath245 are isomorphic .",
    "the model @xmath5 in section [ vm ] suggests an axiomatization of czf with urelements or atoms .",
    "for an example of a classical set theory with atoms , see e.g.   @xcite . in @xcite , a theory called @xmath298 , which is czf extended with a class of individuals ,",
    "is mentioned but the axioms are not detailed in that paper .",
    "it is not clear to us whether it is actually a version of the theory presented below .",
    "nevertheless , we propose the following axiomatization of czf with atoms , czfu .",
    "the language is that of set theory , with a binary predicate for membership @xmath208 , extended with unary predicate @xmath299 , for being a set .",
    "define @xmath300 .",
    "write @xmath301 for @xmath302 and @xmath303 for @xmath304",
    ".    the axioms are the following    1 .",
    "each object is either a set or an atom .",
    "2 .   @xmath306 .",
    "an object which has an element must be a set .",
    "3 .   @xmath307 .",
    "sets are determined by their elements .",
    "let @xmath308 be any formula .",
    "then take set - induction for this formula as an axiom @xmath309    since atoms have no elements this is actually equivalent to @xmath310    1 .",
    "union : @xmath311 .",
    "2 .   pairing : @xmath312 .",
    "3 .   bounded separation : let @xmath308 be any bounded formula . then take as an axiom : @xmath313 4 .",
    "subset collection : for any formula @xmath314 @xmath315 5 .",
    "strong collection : for any formula @xmath314 @xmath316 6 .",
    "infinity axiom : @xmath317 here @xmath318 .",
    "if we add the purity axiom ( everything is a set ) we get a system , which is easily seen to be equivalent to the standard czf .",
    "( purity ) : @xmath319 .",
    "[ czfuthm ] for any setoid @xmath200 belonging to @xmath136 , the set - theoretic universe @xmath5 is a model of czfu .",
    "the model also verifies that there is a set containing all atoms , that is @xmath320    the proof is similar to the verification in aczel s standard set - theoretic model in case of the axioms c3  c6 , c8  c10 .",
    "the axioms c1 and c2 are directly verified by the meaning of @xmath321 and @xmath322 . as for axiom c7 , bounded separation , we may use the standard proof once we have noticed that by lemma [ smallness ] , @xmath323 and @xmath324 are in @xmath136 , whenever @xmath4 is in @xmath136 .    to verify ( [ atomsformset ] ) first construct @xmath325 where @xmath326 is such that @xmath327 and @xmath328 is given by @xmath329 .",
    "then for any @xmath330 , @xmath331 if , and only if , there is @xmath332 such that @xmath333 , that is @xmath334 is true .",
    "in our coq implementation @xcite we understand setoids in the sense of propositions - as - types , which means that the equality relation takes its truth values in set or type .",
    "this is in contrast to the standard setoids of coq where the equality relation is prop - valued .",
    "_ total setoids _ of barthe _ et al .",
    "_ @xcite . )",
    "we have used the built - in type set to interpret the universe @xmath136 .",
    "the setoids belonging to @xmath136 are therefore setoids based on set and called just setoids .",
    "what we call setoids in this paper is called typeoid in the coq code and they are based on type .",
    "the @xmath3-sets and @xmath5-sets are constructed using the generalized inductive definitions available for type of coq .",
    "they could as well have been constructed using a general w - type . in several places record types",
    "are used , which corresponds to @xmath132-type applications of mltt .",
    "the following theorems of the paper are formalized : theorems [ cafthm ] , [ generator].(d ) , [ haspullbacks ] , [ v_is_cat ] , [ main ] , and [ czfuthm ] .",
    "we verify as well the regular extension axiom ( rea ) @xcite in our coq implementation .",
    "this axiom is crucial for formalizing transfinite inductive definitions in czf .",
    "there are important extensions of the rea @xcite that unfortunately seem difficult to model in the coq - system , since the system currently lacks the ability to handle general inductive - recursive definition .",
    "apart from using a set - theoretic universe to overcome the limitations of the built in equality of intensional type theory , there are also possible practical utilizations in proof development .",
    "an application of the kind of implementation presented here is to integrate type - theoretic and set - theoretic methods in proofs .",
    "the set - theoretic methods make it possible avoid certain coherence problems that may be difficult to solve in type theory , for instance regarding families of setoids and involved inductive definitions .",
    "the type - theoretic methods have the well known advantages with type checking that guide construction of proofs , and a direct computational interpretation .",
    "one may develop theorems in czf ( or czfu ) and then translate the first order formulas and proofs into the richer language that is modelled in the coq implementation .",
    "this translation can easily be done automatically , and the development of the czf theorems could be done in a theorem prover or proof assistant that can handle intuitionistic logic .",
    "peter aczel .",
    "the type - theoretic interpretation of constructive set theory : inductive definitions . in : r.b .",
    "marcus , g.j .",
    "dorn , and g.j.w .",
    "dorn ( eds . ) , _ logic , methodology , and philosophy of science vii , _ north - holland , amsterdam and new york , 1986 , pp .  17  49 .      benno van den berg and ieke moerdijk",
    ". a unified approach to algebraic set theory . in : s.b .",
    "cooper , h.  geuvers , a.  pillay and j.  v \" annen ( eds . ) _ logic colloquium 2006 , _ lecture notes in logic , cambridge university press 2009 , pp .",
    "18  37 .        martin hofmann . on the interpretation of type theory in",
    "locally cartesian closed categories in : _ proceedings of computer science logic , _ lecture notes in computer science , springer , 1994 , pp .",
    "427  441 .",
    "martin hofmann and thomas streicher .",
    "the groupoid interpretation of type theory . in : g.  sambin and j.",
    "smith ( eds . ) _ twenty - five years of constructive type theory ( venice , 1995 ) , _ pp .",
    "83  111 , oxford logic guides , 36 , oxford univ . press , new york , 1998 .",
    "maria e.  maietti .",
    "modular correspondences between dependent type theories and categorical universes including pretopoi and topoi .",
    "_ mathematical structures in computer science _ 15 ( 2005 ) , pp .",
    "1089 1149 ."
  ],
  "abstract_text": [
    "<S> in this paper we consider the problem of building rich categories of setoids , in standard intensional martin - lf type theory ( mltt ) , and in particular how to handle the problem of equality on objects in this context . </S>",
    "<S> any ( proof - irrelevant ) family @xmath0 of setoids over a setoid @xmath1 gives rise to a category @xmath2 of setoids with objects @xmath1 . </S>",
    "<S> we may regard the family @xmath0 as a setoid of setoids , and a crucial issue in this article is to construct rich or large enough such families . </S>",
    "<S> depending on closure conditions of @xmath0 , the category @xmath2 has corresponding categorical constructions . </S>",
    "<S> we exemplify this with finite limits . </S>",
    "<S> a very large family @xmath0 may be obtained from aczel s model construction of czf in type theory . </S>",
    "<S> it is proved that the category so obtained is isomorphic to the internal category of sets in this model . </S>",
    "<S> set theory can thus establish ( categorical ) properties of @xmath2 which may be used in type theory . </S>",
    "<S> we also show that aczel s model construction may be extended to include the elements of any setoid as atoms or urelements . as a byproduct </S>",
    "<S> we obtain a natural extension of czf , adding atoms . </S>",
    "<S> this extension , czfu , is validated by the extended model . </S>",
    "<S> the main theorems of the paper have been checked in the proof assistant coq which is based on mltt . </S>",
    "<S> a possible application of this development is to integrate set - theoretic and type - theoretic reasoning in proof assistants . </S>"
  ]
}