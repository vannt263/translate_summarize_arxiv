{
  "article_text": [
    "@xmath3 versus @xmath4 , the problem of whether non - determinism helps in logarithmic space bounded computation , is a longstanding open question in computational complexity . at present , only a few results are known .",
    "it is known that the problem is equivalent to the question of whether there is a log - space algorithm for the _ directed connectivity _ problem , namely given an @xmath0 vertex directed graph @xmath5 and pair of vertices @xmath6 , find out if there is a directed path from @xmath7 to @xmath8 in @xmath5 . in 1970 , savitch @xcite gave an @xmath9-space deterministic algorithm for directed connectivity , thus proving that @xmath10 for every space constructable function @xmath11 . in 1987 and 1988 , immerman @xcite and szelepcsenyi @xcite independently gave an @xmath12-space non - deterministic algorithm for directed _ non - connectivity _ , thus proving that @xmath13-@xmath4 .",
    "for the problem of _ undirected connectivity _",
    "( i.e. where the input graph @xmath5 is undirected ) , a probabilistic algorithm was shown in 1979 using random walks by aleliunas , karp , lipton , @xmath14 , and rackoff @xcite , and in 2005 , reingold @xcite gave a deterministic @xmath12-space algorithm for the same problem , showing that undirected connectivity is in @xmath3 .",
    "trifonov @xcite independently gave an @xmath15 algorithm for undirected connectivity .",
    "+ in terms of monotone computation , in 1988 karchmer and wigderson @xcite showed that any monotone circuit solving undirected connectivity has depth at least @xmath16 , thus proving that undirected connectivity is not in monotone-@xmath17 and separating monotone-@xmath17 and monotone-@xmath18 . in 1997 raz and mckenzie @xcite proved that monotone-@xmath19 monotone-@xmath20 and for any @xmath21 , monotone-@xmath22 monotone-@xmath23 .",
    "+ potechin @xcite separated monotone analogues of l and nl using the switching network model , described in @xcite . in particular , potechin @xcite proved that any monotone switching network solving directed connectivity on @xmath0 vertices must have size at least @xmath1 and this bound is tight . to do this ,",
    "potechin @xcite first proved the result for certain - knowledge switching networks , which are a simple and intuitive subclass of monotone switching networks for directed connectivity .",
    "potechin @xcite then proved the result for all monotone switching networks solving directed connectivity using fourier analysis and a partial reduction from monotone switching networks for directed connectivity to certain - knowledge switching networks .",
    "+ however , proving good non - monotone bounds requires proving stronger lower bounds on monotone switching networks for directed connectivity .",
    "the reason is that potechin @xcite obtained the above results by considering inputs consisting of just a path and isolated vertices , which are the hardest inputs for monotone algorithms to solve but which are easy for non - monotone algorithms to solve . to obtain lower bounds on general switching networks for directed connectivity",
    ", we must consider different inputs , and a lower size bound on all switching networks for directed connectivity solving these inputs implies the same lower bound on all monotone switching networks solving these inputs .",
    "+ in this paper , we consider a set of inputs which we originally thought were hard for monotone switching networks to solve .",
    "instead , we show that there is a monotone switching network for directed connectivity of polynomial size which solves these inputs , but any certain - knowldge switching network solving these inputs must have super - polynomial size .",
    "thus , monotone switching networks for directed connectivity are strictly more powerful than certain - knowledge switching networks .",
    "+ to properly state these results , we must first recall some definitions from potechin @xcite and introduce a few new definitions .",
    "these definitions will be used throughout the paper .",
    "[ modifiedswitchingdefinition ] a switching network for directed connectivity on a set @xmath24 of vertices with distinguished vertices @xmath6 is a tuple @xmath25 where @xmath26 is an undirected multi - graph with distinguished vertices @xmath27,@xmath28 and @xmath29 is a labeling function such that each edge @xmath30 has a label of the form @xmath31 or @xmath32 for some vertices @xmath33 .",
    "+ we say that such a switching network is a switching network for directed connectivity on @xmath0 vertices , where @xmath34 , and we take its size to be @xmath35 .",
    "a switching network for directed connectivity is monotone if it has no labels of the form @xmath32 .",
    "we say a switching network @xmath26 for directed connectivity on a set of vertices @xmath24 accepts an input graph @xmath5 if there is a path @xmath36 in @xmath26 from @xmath27 to @xmath28 whose edges are all consistent with the input graph @xmath5 ( i.e. of the form @xmath37 for some edge @xmath38 or @xmath39 for some @xmath40 ) . +",
    "we say a switching network for directed connectivity is sound if it does not accept any input graphs @xmath5 on the set of vertices @xmath24 which do not have a path from @xmath7 to @xmath8 .",
    "+ we say a switching network for directed connectivity is complete if it accepts all input graphs @xmath5 on the set of vertices @xmath24 which have a path from @xmath7 to @xmath8 .",
    "+ if @xmath26 is a switching network for directed connectivity on a set of vertices @xmath24 , then we say that @xmath26 solves directed connectivity on @xmath24 if @xmath26 is both complete and sound .",
    "[ exampleone ]    .",
    "there is a path from @xmath27 to @xmath28 in @xmath26 whose labels are consistent with the input graph @xmath5 if and only if there is a path from @xmath7 to @xmath8 in @xmath5 .",
    "for example , if we have the edges @xmath41 , @xmath42 , and @xmath43 in @xmath5 , so there is a path from @xmath7 to @xmath8 in @xmath5 , then in @xmath26 , starting from @xmath27 , we can take the edge labeled @xmath41 , then the edge labeled @xmath42 , then the edge labeled @xmath41 , and finally the edge labeled @xmath43 , and we will reach @xmath28 . if in @xmath5 we have the edges @xmath41 , @xmath42 , @xmath44 , and @xmath45 and no other edges , so there is no path from @xmath7 to @xmath8 , then in @xmath26 there is no edge that we can take to @xmath28 , so there is no path from @xmath27 to @xmath28.,height=188 ]    given a nonempty set @xmath46 of input graphs @xmath5 on a set of vertices @xmath24 with distinguished vertices @xmath6 ,",
    "let @xmath47 be the set of input graphs in @xmath46 which contain a path from @xmath7 to @xmath8 and let @xmath48 be the set of input graphs in @xmath46 which do not contain a path from @xmath7 to @xmath8 . if @xmath49 and @xmath50 , we say that a switching network @xmath26 for directed connectivity on @xmath24 solves the set of inputs @xmath46 if @xmath26 accepts all @xmath51 and @xmath26 does not accept any @xmath52 . if @xmath53 , we say that a switching network @xmath26 for directed connectivity on @xmath24 solves the set of inputs @xmath54 if @xmath26 is sound and @xmath26 accepts all @xmath51 .",
    "if @xmath55 , we say that a switching network @xmath26 for directed connectivity on @xmath24 solves the set of inputs @xmath56 if @xmath26 is complete and @xmath26 does not accept any @xmath52 .",
    "[ forbutnotsolving ]     for directed connectivity on @xmath57 .",
    "@xmath26 accepts an input graph @xmath5 if and only if @xmath5 either has the edges @xmath41 and @xmath58 or has the edges @xmath45 and @xmath43 and at least one of the edges @xmath41 , @xmath58 . thus , @xmath26 is sound but not complete.,height=188 ]    if @xmath26 is a switching network for directed connectivity on a set of vertices @xmath24 , then @xmath26 solves directed connectivity on @xmath24 if and only if @xmath26 solves the set @xmath46 of all possible input graphs @xmath5 on the set of vertices @xmath24 .    in this paper",
    ", we will consider monotone switching networks @xmath26 for directed connectivity which solve a set of inputs @xmath59 where each input graph @xmath60 contains a path from @xmath7 to @xmath8 .",
    "thus , in this paper we will only consider sound monotone switching networks for directed connectivity , but these switching networks may not be complete .",
    "+ we now define the difficulty of a set of inputs for monotone switching networks for directed connectivity .    given a non - empty set of inputs @xmath46 of input graphs with vertex set @xmath24 , let @xmath61 be the size of the smallest monotone switching network for directed connectivity on @xmath24 which solves the set of inputs @xmath46 .    in this paper",
    ", we will consider families of inputs @xmath62 where for each @xmath63 , @xmath64 consists of input graphs on @xmath63 vertices .",
    "we say a family of sets of inputs @xmath62 is easy for monotone switching networks for directed connectivity if there is a polynomial @xmath65 such that for all @xmath63 , @xmath66 .",
    "if not , we say that it is hard for monotone switching networks for directed connectivity .",
    "potechin @xcite introduced a subclass of monotone switching networks for directed connectivity called certain - knowledge switching networks which are simple but nevertheless have considerable power .",
    "they are defined as follows :    a knowledge set @xmath67 is a directed graph with @xmath68 , and we represent @xmath67 by the set of its edges . + given a knowledge set @xmath67 , define the transitive closure @xmath69 of @xmath67 as follows : + if there is no path from @xmath7 to @xmath8 in @xmath67 , then @xmath70 there is a path from @xmath71 to @xmath72 in @xmath73 .",
    "+ if there is a path from @xmath7 to @xmath8 in @xmath67 , then @xmath69 is the complete directed graph on @xmath24 .",
    "+ each transitive closure represents an equivalence class of knowledge sets .",
    "we say @xmath74 if @xmath75 and we say @xmath76 if @xmath77 as sets .",
    "[ certainknowledgedef ] a certain - knowledge description of a monotone switching network for directed connectivity on a set of vertices @xmath24 is an assignment of a knowledge set @xmath78 to each @xmath79 .",
    "we say a certain - knowledge description is valid if the following conditions hold : + 1 .",
    "@xmath80 and @xmath81 .",
    "+ 2 . if there is an edge @xmath82 with label @xmath31 between vertices @xmath83 and @xmath84 in @xmath26 , then + @xmath85 and @xmath86 + we say a monotone switching network for directed connectivity is a certain - knowledge switching network if there is a valid certain - knowledge description of it .",
    "all certain - knowledge switching networks for directed connectivity are sound .",
    "[ examplecertainknowledge ]     solving directed connectivity on @xmath57 together with a valid certain - knowledge description for it.,height=188 ]    [ certainknowledgerules ] the condition that @xmath85 and @xmath86 is equivalent to the condition that we can obtain @xmath87 from @xmath88 using only the following reversible operations on a knowledge set @xmath67 : + operation 1 : add or remove @xmath31 .",
    "+ operation 2 : if @xmath89 are both in @xmath67 and @xmath90 , add or remove @xmath91 .",
    "+ operation 3 : if @xmath92 is in @xmath67 , add or remove any edge except @xmath92 .",
    "+ if this condition is satisfied , we say we can get from @xmath88 to @xmath87 with the edge @xmath31",
    ". + similarly , two knowledge sets @xmath93 and @xmath94 are equal if and only if we can obtain @xmath94 from @xmath93 using only operations 2 and 3 .",
    "we define the difficulty of a set of inputs for certain knowledge switching networks in a similar way .    given a non - empty set of inputs @xmath46 of input graphs with vertex set @xmath24 ,",
    "let @xmath95 be the size of the smallest certain - knowledge switching network for directed connectivity on @xmath24 which solves the set of inputs @xmath46 .",
    "we say a family of sets of inputs @xmath62 is easy for certain - knowledge switching networks if there is a polynomial @xmath65 such that for all @xmath63 , @xmath96 . if not , then we say it is hard for certain knowledge switching networks .    in this paper , we will often consider certain - knowledge switching networks which have a valid certain - knowledge description where all knowledge sets contain only edges of the form @xmath97 for some @xmath98 .",
    "accordingly , we introduce the following definitions :    given a set @xmath99 , let @xmath100 be the knowledge set @xmath101    [ basiccertainknowledge ] given a set of vertices @xmath24 containing @xmath6 , let @xmath102 be the certain - knowledge switching network with vertices @xmath103 and all labeled edges allowed by condition 2 of definition [ certainknowledgedef ] , where @xmath104 has knowledge set @xmath100 . note that @xmath105 .",
    "the certain - knowledge switching network shown in figure 3 is @xmath106 .",
    "given a non - empty set of inputs @xmath46 of input graphs with vertex set @xmath24 , let @xmath107 be the size of the smallest @xmath108 such that @xmath102 solves the set of inputs @xmath46 .",
    "we are now ready to properly state our results .",
    "we define inputs as follows :    [ augmentedinputsdef ] let @xmath109 be a graph on a vertex set @xmath110 with distinguished vertices @xmath6 and let @xmath24 be a set of vertices which also contains @xmath7 and @xmath8 .",
    "+ if @xmath111 are disjoint subsets of @xmath24 , @xmath112 , and @xmath113 is a one - to - one map with @xmath114 and @xmath115 , then let @xmath116 be the graph with @xmath117 and + @xmath118    [ exampleinput ]     for the given @xmath119,height=377 ]    in section [ easyinputs ] , we prove the following result , which shows that even for certain - knowledge switching networks , edges of the form @xmath120 can make the input easier to solve .    [ aneasyinput ] if @xmath121 is a path of length @xmath122 from @xmath7 to @xmath8 where @xmath123 is a constant and if @xmath24 is a set of vertices of size @xmath0 containing @xmath6 , then letting @xmath46 be the set of inputs of the form @xmath124 , @xmath95 is at most @xmath125 ( where the constants depend on @xmath123 ) .",
    "however , the idea used in the proof does not work if the inputs have both edges of the form @xmath120 and edges of the form @xmath126 . in section [ weirdconstruction ]",
    ", we use fourier analysis to describe more sophisticated techniques which can use edges of the form @xmath120 and edges of the form @xmath126 with equal effectiveness . using these techniques , we prove the following result :    [ efficientnetwork ] if @xmath127 is a set of input graphs with vertex set @xmath110 , all of which contain a path from @xmath7 to @xmath8 , then given a set of vertices @xmath24 containing @xmath6 , letting @xmath128 , @xmath34 , and @xmath129 , if we let @xmath46 be the set of all inputs of the form @xmath130 , then + @xmath131    finally , in section [ certainknowledgefails ] , we show the following lower bound on certain knowledge switching networks :    [ certainknowledgelowerbound ] if @xmath121 is a path of length @xmath122 from @xmath7 to @xmath8 , @xmath24 is a set of vertices of size @xmath0 containing @xmath6 , and @xmath132 , then letting @xmath46 be the set of inputs of the form @xmath133 and letting + @xmath134 , @xmath135 .",
    "we then compare theorems [ efficientnetwork ] and [ certainknowledgelowerbound ] and show the following corollary :    [ separationcorollary ] there is a family of sets of inputs @xmath136 such that @xmath136 is hard for certain - knowledge switching networks but @xmath136 is easy for monotone switching networks for directed connectivity .    in other words , monotone switching networks for directed connectivity",
    "are strictly more powerful than certain knowledge switching networks .      in this paper",
    ", we follow the notation and conventions of potechin @xcite . throughout the paper ,",
    "we use lower case letters ( i.e. @xmath137 ) to denote vertices , edges , and functions , and we use upper case letters ( i.e. @xmath138 ) to denote graphs and sets of vertices and edges .",
    "we use unprimed symbols to denote vertices , edges , etc . in the directed graph @xmath5 , and we use primed symbols to denote vertices , edges , etc . in the switching network @xmath26 .",
    "+ in this paper , we do not allow graphs to have loops or multiple edges from one vertex to another .",
    "when a graph has loops or multiple edges from one vertex to another we use the term multi - graph instead .",
    "we take all paths to be simple ( i.e. we do not allow paths to have repeated vertices or edges ) . +",
    "it may seem that edges of the form @xmath97 or @xmath139 for vertices @xmath140 which are not on the path from @xmath7 to @xmath8 are irrelevant and should not make it easier for monotone switching networks to solve the input .",
    "however , as we will show , this is not the case . in this section ,",
    "we prove theorem [ aneasyinput ] , showing that such edges can in fact be useful even for certain - knowledge switching networks .",
    "we recall the statement of theorem [ aneasyinput ] below .",
    ".1 in * theorem [ aneasyinput ] .",
    "* _ if @xmath121 is a path of length @xmath122 from @xmath7 to @xmath8 where @xmath123 is a constant and if @xmath24 is a set of vertices of size @xmath0 containing @xmath6 , then letting @xmath46 be the set of inputs of the form @xmath124 , @xmath95 is at most @xmath125 ( where the constants depend on @xmath123 ) . _",
    "the case @xmath141 is trivial , so we assume that @xmath142 .",
    "+ consider the following procedure for building a certain knowledge switching network @xmath26 : + 1 .",
    "choose an ordering @xmath143 of the vertices @xmath144 + 2 .",
    "for each @xmath145 $ ] , let @xmath146 and add a vertex with knowledge set @xmath147 to @xmath26 . we take @xmath148 and @xmath149 , so @xmath27 is the vertex in @xmath26 with vertex set @xmath150 .",
    "add all edges allowed by condition 2 of definition [ certainknowledgedef ] to g. + clearly , any such @xmath26 is sound",
    ". we will now show that on average such a @xmath26 solves a constant fraction of the possible inputs @xmath124    let @xmath151 be the vertices @xmath152 . given an input graph of the form @xmath124 ,",
    "let @xmath153 be the index such that @xmath154 .",
    "+ if @xmath155 then the switching network @xmath26 accepts the input @xmath124 .",
    "note that for any @xmath145 $ ] we can move from @xmath156 to @xmath157 using the edge @xmath158 unless @xmath159 for some @xmath160 .",
    "however , if @xmath161 then @xmath162 so we can move from @xmath156 to @xmath157 using the edge @xmath163 .",
    "we just need to check that we can get from @xmath164 to @xmath165 using an edge in @xmath124 . however , this is clear , as @xmath124 contains an edge @xmath139 for some @xmath166 so we can use the edge @xmath139 to get from @xmath164 to @xmath165 .",
    "thus , such a @xmath26 accepts any given @xmath124 with probability at least @xmath167 .",
    "now note that instead of using this construction only once , we can use it repeatedly , adding the new vertices to @xmath26 each time .",
    "each time we use this construction and add the new vertices to @xmath26 , on average @xmath26 will accept at least @xmath167 of the inputs @xmath124 that it did not accept before . by the probabilistic method",
    ", there is always a choice for the ordering @xmath143 of the vertices @xmath144 which will make @xmath26 accept at least @xmath167 of the inputs @xmath124 that it did not accept before .",
    "there are less then @xmath168 distinct inputs of the form @xmath124 , so we can create a certain - knowledge switching network accepting all such inputs by repeating this construction at most @xmath169 times , giving a @xmath26 of size at most @xmath170 .    from the proof of theorem 1.3 of potechin @xcite ,",
    "any certain - knowledge switching network which accepts all paths of length @xmath122 must have size at least @xmath171 . by corollary 5.22 and theorem 6.1 of potechin @xcite , any sound monotone switching network for directed connectivity which accepts all paths of length @xmath122 must have size at least @xmath172 .",
    "thus , the edges @xmath173 make it much easier for both certain - knowledge switching networks and monotone switching networks for directed connectivity to solve these inputs .",
    "we have just shown that certain - knowledge switching networks can effectively use edges of the form @xmath173 .",
    "however , it seems much harder for a certain - knowledge switching network to use both edges of the form @xmath173 and edges of the form @xmath174 , and we will show in section [ certainknowledgefails ] that this is indeed the case . in this section , we show that surprisingly , a monotone switching networks for directed connectivity can effectively use both edges of the form @xmath173 and edges of the form @xmath174 . we will use the viewpoint of potechin @xcite of looking at everything in terms of possible cuts of the input graph @xmath5 . accordingly , we recall the following definitions and facts from potechin @xcite .",
    "we define an s - t cut ( below we use cut for short ) of @xmath5 to be a partition of @xmath24 into subsets @xmath175 such that @xmath176 and @xmath177 .",
    "we say an edge @xmath31 crosses @xmath178 if @xmath179 and @xmath180 .",
    "let @xmath181 denote the set of all cuts @xmath178 .",
    "@xmath182 , where @xmath34 .    given two functions @xmath183 , we define @xmath184    given a set of vertices @xmath185 that does not include @xmath7 or @xmath8 , define @xmath186 .",
    "the set @xmath187 is an orthonormal basis for the space of functions from @xmath181 to @xmath188 .",
    "potechin @xcite took a given monotone switching network for directed connectivity and used fourier analysis to analyze it . here , we will use suitably defined functions from @xmath181 to @xmath188 to create our switching network .",
    "[ switchingnetworkconstruction ] given a set of functions @xmath189 from @xmath181 to @xmath188 where @xmath190 for all cuts @xmath178 and @xmath191 for all cuts @xmath178 , define the switching network @xmath192 to have vertices @xmath193 .",
    "+ for each vertex @xmath194 we define @xmath195 to be @xmath196 .",
    "+ for each pair of vertices @xmath197 in @xmath192 and each possible edge @xmath37 between two vertices of @xmath5 , create an edge @xmath82 with label @xmath37 between @xmath198 and @xmath199 if and only if @xmath200 for all cuts @xmath178 which are not crossed by @xmath37 .",
    "any monotone switching network for directed connectivity constructed in this way is sound .",
    "assume we have a path from @xmath27 to @xmath28 in @xmath192 using only the edges of some input graph @xmath5 .",
    "since for each cut @xmath178 , @xmath201 and @xmath202 , there must be some edge @xmath82 in this path with endpoints @xmath197 such that @xmath203 .",
    "but then by definition , if @xmath37 is the label of @xmath82 then @xmath37 must cross the cut @xmath178 .",
    "thus , for all cuts @xmath178 , @xmath204 contains an edge @xmath37 crossing @xmath178 so there must be a path from @xmath7 to @xmath8 in @xmath5 .",
    "let @xmath205 be a set of functions from @xmath181 to @xmath188 .",
    "if @xmath206 , we say that we can go from @xmath207 to @xmath11 with the edge @xmath37 if @xmath208 for all cuts @xmath178 which are not crossed by @xmath37 .",
    "we say that we can reach @xmath11 from @xmath207 using the set of edges @xmath209 if there is a sequence of functions @xmath210 from @xmath181 to @xmath188 such that @xmath211 , @xmath212 , and for all @xmath21 @xmath213 and we can get from @xmath214 to @xmath215 with some edge @xmath216 .    if @xmath205 is a set of functions from @xmath181 to @xmath188 containing the functions @xmath217 and @xmath218 and if @xmath206 , then let @xmath219 be the vertices corresponding to @xmath220 in @xmath192 .",
    "we can go from @xmath207 to @xmath11 with the edge @xmath37 if and only if there is an edge in @xmath192 with label @xmath37 between @xmath83 and @xmath84 .",
    "similarly , we can reach @xmath11 from @xmath207 using the set of edges @xmath209 if and only if there is a path from @xmath83 to @xmath84 in @xmath192 which uses only the edges in @xmath209 .",
    "it is useful to know when we can go from one function @xmath207 to another function @xmath11 with a given edge @xmath37 .",
    "we answer this question with the following proposition .",
    "[ keyproposition ] let @xmath221 be a function @xmath222 .",
    "let @xmath223 be vertices of @xmath5 which are not @xmath7 or @xmath8 .",
    "@xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath225 if and only if @xmath221 has the form + @xmath226 + 2 .",
    "@xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath227 if and only if @xmath221 has the form + @xmath228 + 3 .",
    "@xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath31 if and only if @xmath221 has the form + @xmath229 +    we prove claim 1 as follows .",
    "let @xmath230 be the set of possible cuts @xmath231 of @xmath232 . given a function @xmath222",
    ", we define the function @xmath233 to be @xmath234 where @xmath235 and @xmath236 .",
    "+ writing @xmath237 , we have that @xmath238 + @xmath224 for all cuts which can not be crossed by the edge @xmath225 if and only if @xmath239 , which is true if and only if @xmath240 for all @xmath241 , which is true if and only @xmath221 has the given form , and this completes the proof . + claim 2 can be proved in a similar way . to prove claim 3 , note that @xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath31 if and only if @xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath242 and @xmath224 for all cuts @xmath178 which can not be crossed by the edge @xmath227 . using claims 1 and 2 , it is easily verified that this is true if and only if @xmath221 has the given form .      in this subsection , we give examples of what monotone switching networks for directed connectivity can do with the edges @xmath120 and @xmath126 . we begin with the following simple construction , which illustrates that it is relatively easy to use these edges to move around in the fourier basis .",
    "let @xmath243 be a non - empty set of vertices with @xmath99 and let @xmath244 . if @xmath205 is a set of functions containg @xmath245 and all of the functions @xmath246\\}$ ] and we have a set of edges @xmath209 such that for all @xmath21 , @xmath247 or @xmath248 , then we can reach either @xmath249 or @xmath250 from @xmath251 using the set of edges @xmath209 .",
    "we prove this result by induction .",
    "the base case @xmath252 is trivial .",
    "assume that we can reach either @xmath253 or @xmath254 from @xmath251 using the set of edges @xmath209 .",
    "by assumption , @xmath209 contains either the edge @xmath255 or the edge @xmath256 . if @xmath209 contains the edge @xmath257 then by proposition [ keyproposition ] we can go from @xmath253 to @xmath258 with the edge @xmath37 and we can go from @xmath254 to @xmath259 with the edge @xmath37 , so the result follows . similarly ,",
    "if @xmath209 contains the edge @xmath260 then by proposition [ keyproposition ] we can go from @xmath253 to @xmath259 with the edge @xmath37 and we can go from @xmath253 to @xmath259 with the edge @xmath37 , so the result follows .",
    "we now give several more complicated examples of what monotone switching networks for directed connectivity can do with the edges @xmath120 and @xmath126 .",
    "these examples are motivated by the following idea .",
    "potechin @xcite associates each knowledge set @xmath67 with the function @xmath261 where @xmath262 if there is an edge @xmath263 crossing @xmath178 and @xmath264 otherwise . in particular , +",
    "@xmath265 + the idea is to mimic these functions with the vertices of @xmath266 replaced by subsets of vertices . + for the rest of this subsection , we will use the following setup : + let @xmath267 be the vertices of @xmath24 , let @xmath268 be disjoint subsets of @xmath144 , and let @xmath46 be a non - empty subset of @xmath269 $ ] .",
    "assume that for each @xmath270 we have a distinguished vertex @xmath271 .",
    "let @xmath272 be a partition of the vertices of @xmath273 and assume that we have a set of functions @xmath205 from @xmath181 to @xmath188 which contains the functions @xmath217 , @xmath274 and a set of edges @xmath209 which contains all of the edges @xmath120 and @xmath126",
    ".    given a subset @xmath185 , define @xmath275 .",
    "for all @xmath21 , define @xmath276 and define @xmath277    [ startlemma ] let @xmath278 be an element of @xmath46 and take @xmath279 .",
    "if @xmath209 contains the edge @xmath280 and @xmath205 contains the function @xmath281 , the function @xmath282 , and all functions + @xmath283 $ ] , + then we can reach @xmath11 from @xmath207 using the edges of @xmath209 .",
    "@xmath284 , so by proposition [ keyproposition ] we can get from @xmath207 to @xmath285 with the edge @xmath280 . + if @xmath286 $ ] , then + @xmath287 + using proposition [ keyproposition ] , it is easily verified that we can get from @xmath288 to @xmath289 with an edge @xmath216 where @xmath290 if @xmath291 , @xmath292 if @xmath293 , and @xmath37 is arbitrary otherwise ( as in this case @xmath294 ) .",
    "+ now note that @xmath295 , so we can reach @xmath11 from @xmath207 using the edges of @xmath209 , as needed .",
    "[ endlemma ] let @xmath296 be an element of @xmath46 and let @xmath297 .",
    "if @xmath209 contains the edge @xmath298 and @xmath205 contains the function @xmath282 and all functions + @xmath299 $ ] , + then we can reach @xmath300 from @xmath11 using the edges of @xmath209 .",
    "@xmath301 , so by proposition [ keyproposition ] we can get from @xmath285 to @xmath300 with the edge @xmath298 .",
    "+ the functions @xmath288 are the same as before , so for all @xmath286 $ ] we can get from @xmath289 to @xmath302 with an edge in @xmath209 . now note that @xmath295 , so we can reach @xmath300 from @xmath11 using the edges of @xmath209 , as needed .",
    "[ progresslemma ] let @xmath278 be an element of @xmath46 and take @xmath279 . if @xmath209 contains the edge @xmath303 for some @xmath304 and @xmath205 contains the function @xmath281 , the function @xmath282 , all functions + @xmath305 , @xmath306 $ ] , where + @xmath307 , + and all functions + @xmath283 $ ] , + then we can reach @xmath11 from @xmath207 using the edges of @xmath209 .",
    "@xmath308 where + @xmath309 , so by proposition [ keyproposition ] we can get from @xmath207 to @xmath310 with the edge @xmath303 .",
    "+ if @xmath286 $ ] , then + @xmath311 where + @xmath312 + using proposition [ keyproposition ] , it is easily verified that we can get from @xmath313 to @xmath314 with an edge @xmath216 where @xmath290 if @xmath291 , @xmath292 if @xmath293 , and @xmath37 is arbitrary otherwise ( as in this case @xmath315 ) .",
    "+ the functions @xmath288 are the same as before , so for all @xmath286 $ ] we can get from @xmath288 to @xmath289 with an edge in @xmath209 . now note that @xmath316 and @xmath295 , so we can reach @xmath11 from @xmath207 using the edges of @xmath209 , as needed .",
    "we are now ready to construct our monotone switching network and prove theorem [ efficientnetwork ] .",
    "we recall the statement of theorem [ efficientnetwork ] below .",
    ".1 in * theorem [ efficientnetwork ] .",
    "if @xmath127 is a set of input graphs with vertex set @xmath110 , all of which contain a path from @xmath7 to @xmath8 , then given a set of vertices @xmath24 containing @xmath6 , letting @xmath128 , @xmath34 , and @xmath129 , if we let @xmath46 be the set of all inputs of the form @xmath130 , then + @xmath131 _    let @xmath143 be the vertices of @xmath144 and let @xmath151 be the vertices of @xmath317 .",
    "+ we will use lemmas [ startlemma ] , [ endlemma ] , and [ progresslemma ] as follows : + let @xmath318 be a set of partitions of @xmath144 into @xmath123 parts , i.e. each @xmath319 is of the form @xmath320 where all of the @xmath321 are disjoint and @xmath322 .",
    "+ assume that we have an input graph of the form @xmath323 . recall that @xmath324 is a partition of @xmath24 , @xmath325 , and @xmath326 is a one - to - one map . let @xmath327 .",
    "+ for a non - empty subset @xmath46 of @xmath269 $ ] of size at most @xmath108 , if there is an @xmath328 such that writing @xmath329 we have that @xmath330 , then this gives the setup required to use lemmas [ startlemma ] , [ endlemma ] , and [ progresslemma ] .",
    "+ think of the function @xmath281 as though it were the knowledge set @xmath331 and think of the function @xmath282 as though it was the knowledge set @xmath332 .",
    "lemmas [ startlemma ] , [ endlemma ] , and [ progresslemma ] show us how to mimic the certain - knowledge swiching network @xmath333 defined in definition [ basiccertainknowledge ] using only the edges in @xmath204 .",
    "+ however , as we go from one @xmath334 $ ] to another , we may need to switch from one partition @xmath335 to another .",
    "we show that this can be done with the following lemma :    [ switchinggears ] let @xmath336 and @xmath320 be two partitions of @xmath144 and define + @xmath337 .",
    "+ if we have a subset @xmath46 such that @xmath338 , then if @xmath205 contains the function + @xmath339 , the function + @xmath340 , and all functions of the form + @xmath341 , @xmath286 $ ] , then we can reach @xmath342 from @xmath343 using only the edges of @xmath204 .    for @xmath286 $ ] , + @xmath344 + letting @xmath345 , @xmath346 +",
    "if @xmath347 for all @xmath348 then @xmath294 so we can trivially get from @xmath288 to @xmath289 . if @xmath349 for some @xmath348 then @xmath350 and either @xmath351 or @xmath352 . using proposition [ keyproposition ] ,",
    "it is easily verified that we can get from @xmath288 to @xmath289 with the edge @xmath353 if @xmath354 and we can get from @xmath288 to @xmath289 with the edge @xmath355 if @xmath356 .",
    "+ @xmath357 and @xmath358 , so it follows that we can reach @xmath342 from @xmath343 using only the edges of @xmath204 , as needed .",
    "we will now construct our set @xmath205 of functions .",
    "note that there are at most @xmath359 non - empty subsets @xmath46 of @xmath269 $ ] of size at most @xmath108 and recall that @xmath318 is a set of partitions of @xmath144 into @xmath123 parts .",
    "we will take all functions required by lemmas [ startlemma ] , [ endlemma ] , [ progresslemma ] , and [ switchinggears ] for all possible input graphs of the form @xmath130 .",
    "+ we begin by taking all functions of the form @xmath360 + these functions depend only on the partition @xmath329 , the subset @xmath334 $ ] , and the values @xmath361 .",
    "thus , we have at most @xmath362 such functions .",
    "+ we then take all functions of the form + @xmath283 $ ] + as required by lemma [ startlemma ] , lemma [ endlemma ] , and lemma [ progresslemma ] . recall that @xmath363 , so these functions depend only on the partition @xmath329 , the subset @xmath334 $ ] , the values @xmath364 , the vertex @xmath365 , the value @xmath366 , and the value of @xmath63 .",
    "thus , we have at most @xmath367 such functions .",
    "+ similarly , we take all functions of the form + @xmath305 , @xmath306 $ ] , where + @xmath281 and + @xmath307 + as required by lemma [ progresslemma ] .",
    "these functions depend only on the partition @xmath329 , the subset @xmath334 $ ] , the values @xmath364 , the vertices @xmath368 , the value @xmath369 , and the value of @xmath63 .",
    "thus , we have at most @xmath370 such functions . + finally , we take all functions of the form @xmath371 + as required by lemma [ switchinggears ] .",
    "these functions depend only on the partitions @xmath372 ,",
    "@xmath373 , the value of @xmath63 , and the values @xmath374 .",
    "thus , we have at most @xmath375 such functions . + in total , we have at most @xmath376 functions .    if for every choice of the vertices @xmath377 and for all subsets @xmath334 $ ] of size at most @xmath108 there is an @xmath328 such that writing @xmath329 we have that @xmath330 , then for the set of functions @xmath205 described above , @xmath192 accepts all input graphs of the form @xmath323 .",
    "let @xmath323 be an input graph and take @xmath327 . since @xmath127 and @xmath378 , the certain - knowledge switching network @xmath333 described in definition [ basiccertainknowledge ] accepts the input graph @xmath379 , i.e. there is a path @xmath36 from @xmath27 to @xmath28 in @xmath333 using only the edges of @xmath379 .",
    "we will show that we can follow each step of the certain - knowledge switching network @xmath333 in @xmath192 .",
    "+ assume that we are currently at the vertex with knowledge set @xmath380 in @xmath333 and we are at a corresponding vertex in @xmath192 with function + @xmath360 where @xmath381 for some @xmath328 and + @xmath330 .",
    "+ the knowledge - set of the next vertex on @xmath36 has one of the following three forms : + 1 .",
    "@xmath382 where @xmath383 , @xmath384 , and either @xmath385 contains the edge @xmath386 for some @xmath387 or @xmath385 contains the edge @xmath388 , which implies that @xmath204 either contains the edge @xmath303 for some @xmath387 or @xmath385 contains the edge @xmath280 . in this case , by assumption there is an @xmath389 such that writing @xmath390 we have that @xmath391 .",
    "we can use lemma [ switchinggears ] to + reach @xmath392 from @xmath360 and then we can use either lemma [ startlemma ] or [ progresslemma ] to reach @xmath393 from @xmath392 + 2 .",
    "@xmath394 where @xmath395 , @xmath396 , and either @xmath385 contains the edge @xmath386 for some @xmath387 or @xmath385 contains the edge @xmath388 , which implies that @xmath204 either contains the edge @xmath303 for some @xmath387 or @xmath385 contains the edge @xmath280 . in this case , we can use either lemma [ startlemma ] or [ progresslemma ] to reach + @xmath397 from @xmath360 + 3 .",
    "@xmath398 . here",
    "@xmath396 and @xmath385 contains the edge @xmath399 for some @xmath387 , which implies that @xmath204 contains the edge @xmath298 for some @xmath387 . in this case",
    ", we can use lemma [ endlemma ] to reach @xmath300 from @xmath360 .",
    "+ thus , we can follow each step of the certain - knowledge switching network @xmath333 in @xmath192 using only the edges of @xmath204 . in @xmath333",
    ", we started at @xmath27 and ended at @xmath28 , so there must be a path from @xmath27 to @xmath28 in @xmath192 using only the edges in @xmath204 .",
    "thus , we just need to ensure that for each non - empty subset @xmath46 of @xmath269 $ ] of size at most @xmath108 , there is an @xmath328 such that writing @xmath329 we have that @xmath330 .",
    "if we are given @xmath400 and a subset @xmath334 $ ] of size at most @xmath108 , then if we pick assign each @xmath401 to @xmath321 with probability @xmath402 and look at the resulting partition @xmath320 , the probability that @xmath330 is + @xmath403 + there are at most @xmath168 choices for @xmath400 and @xmath359 choices for @xmath46 , so by the probabilistic method we can choose at most @xmath404 distinct @xmath335 and guarantee that for each non - empty subset @xmath46 of @xmath269 $ ] of size at most @xmath108 , there is an @xmath328 such that writing @xmath329 we have that @xmath330 . plugging @xmath405 into our expression for",
    "the number of functions @xmath205 must contain , we find that + @xmath406    this construction can be improved to obtain an @xmath407 upper bound .",
    "the best lower bound we have for monotone switching networks solving these inputs is @xmath408 .",
    "in this section , we prove a lower bound on certain - knowledge switching networks and deduce that monotone switching networks for directed connectivity are strictly more powerful than certain - knowledge switching networks .",
    ".1 in * theorem [ certainknowledgelowerbound ] .",
    "* _ if @xmath121 is a path of length @xmath122 from @xmath7 to @xmath8 , @xmath24 is a set of vertices of size @xmath0 containing @xmath6 , and @xmath132 , then letting @xmath46 be the set of inputs of the form @xmath133 and letting + @xmath134 , @xmath135 . _",
    "consider which knowledge sets can be useful for accepting a particular input graph @xmath133 .",
    "we can ignore operation 3 of proposition [ certainknowledgerules ] , as if we are ever in a position to use that operation , we can go immediately to @xmath28 instead . given an input graph @xmath133 , if we only use operations 1 and 2 of proposition [ certainknowledgerules ] then we can only obtain edges of the form @xmath409 , @xmath410 , @xmath411 , of the form @xmath120 , or of the form @xmath126 .",
    "+ by lemma 3.17 of potechin @xcite , any path in a certain - knowledge switching network from @xmath27 to @xmath28 using only the edges of @xmath133 must pass through at least one vertex @xmath412 such that the union of the endpoints of the edges in @xmath413 contains at least @xmath108 of the vertices in @xmath414 .",
    "call a knowledge set @xmath67 useful for the input graph @xmath133 if @xmath67 only contains edges of the form @xmath409 , @xmath410 , @xmath411 , of the form @xmath120 , or of the form @xmath126 , the union of the endpoints of the edges in @xmath67 contains at least @xmath108 of the vertices in @xmath414 , and @xmath415    [ certainknowledgerequirement ] if a certain - knowledge switching network @xmath26 accepts all inputs of the form @xmath133 , then for each such input graph @xmath416 , @xmath26 contains at least one vertex @xmath198 whose knowledge set @xmath67 is useful for @xmath5 .",
    "[ requirementdifficulty ] for any knowledge set @xmath67 , if we choose a random input graph of the form @xmath416 then the probability that @xmath67 is useful for @xmath5 is at most @xmath417 .",
    "let @xmath266 be the union of the endpoints of the edges of @xmath67 .",
    "if @xmath418 , then for any input graph @xmath416 , @xmath266 contains at least @xmath419 vertices in @xmath420 .",
    "@xmath67 can only be useful for @xmath5 if @xmath421 and @xmath422 .",
    "once @xmath414 has been chosen , each other vertex @xmath423 is randomly put into @xmath3 or @xmath424 , so the probability of this occuring is at most @xmath425 .",
    "+ if @xmath426 , let @xmath427 .",
    "the probability that if we choose a random input graph @xmath416 that we will have @xmath428 is + @xmath429 + @xmath132 and @xmath430 , so it is easily verified that + @xmath431 and @xmath432 . +",
    "thus the probability that @xmath67 will be useful for @xmath5 is at most @xmath417 , as needed .",
    "combining proposition [ certainknowledgerequirement ] and lemma [ requirementdifficulty ] , we immediately see that @xmath135 .",
    "* corollary [ separationcorollary ] . *",
    "_ there is a family of sets of inputs @xmath136 such that @xmath136 is hard for certain - knowledge switching networks but @xmath136 is easy for monotone switching networks for directed connectivity . _",
    "if @xmath433 then it follows from lemmas 3.12 and 3.17 of potechin @xcite that @xmath434 . by theorem [ efficientnetwork ] , @xmath435 + taking @xmath123 to be @xmath436 , @xmath61 is polynomial in @xmath0 but @xmath95 is superpolynomial in @xmath0 .",
    "in this paper , we have shown that the type of input described in definition [ augmentedinputsdef ] is easy for a monotone switching network to solve but difficult for a certain - knowledge switching network to solve .",
    "although this result does not give any direct progress towards the goal of first proving stronger lower bounds on monotone switching networks for directed connectivity and then extending them to the non - monotone case , we believe that this result and the ideas used to prove it are nevertheless very valuable .",
    "first of all , a major obstacle in proving lower bounds in complexity theory is the difficulty of ruling out `` weird '' algorithms or circuits .",
    "this result shows that for monotone switching networks for directed connectivity , this difficulty is necessary , as there are some inputs for which the simple and intuitive certain - knowledge switching networks are not optimal .",
    "second , fourier analysis played a key role in constructing a small monotone switching network solving the type of input described in definition [ augmentedinputsdef ] .",
    "this gives further evidence that the fourier analysis approach introduced in potechin @xcite is the most fruitful way to analyze monotone switching networks for directed connectivity .",
    "finally , this result gives insight into what monotone switching networks for directed connectivity can and can not do .",
    "if we prove stronger lower bounds as well , this result may allow us to find large classes of inputs for which we can determine almost exactly how hard a given input is for a monotone switching network for directed connectivity to solve .",
    "r. aleliunas , r. m. karp , r. j.lipton , l. @xmath14 , and c. rackoff .",
    "random walks , universal traversal sequences , and the complexity of maze problems .",
    "proceedings of the 20th annual symposium on foundations of computer science , p.218 - 223 , 1979"
  ],
  "abstract_text": [
    "<S> l ( logarithmic space ) versus nl ( non - deterministic logarithmic space ) is one of the great open problems in computational complexity theory . in the paper `` bounds on monotone switching networks for directed connectivity '' , we separated monotone analogues of l and nl using a model called the switching network model . </S>",
    "<S> in particular , by considering inputs consisting of just a path and isolated vertices , we proved that any monotone switching network solving directed connectivity on @xmath0 vertices must have size at least @xmath1 and this bound is tight . </S>",
    "<S> + if we could show a similar result for general switching networks solving directed connectivity , then this would prove that @xmath2 . </S>",
    "<S> however , proving lower bounds for general switching networks solving directed connectivity requires proving stronger lower bounds on monotone switching networks for directed connectivity . to work towards this goal </S>",
    "<S> , we investigated a different set of inputs which we believed to be hard for monotone switching networks to solve and attempted to prove similar lower size bounds . </S>",
    "<S> instead , we found that this set of inputs is actually easy for monotone switching networks for directed connectivity to solve , yet if we restrict ourselves to certain - knowledge switching networks , which are a simple and intuitive subclass of monotone switching networks for directed connectivity , then these inputs are indeed hard to solve . </S>",
    "<S> + in this paper , we give this set of inputs , demonstrate a `` weird '' polynomially - sized monotone switching network for directed connectivity which solves this set of inputs , and prove that no polynomially - sized certain - knowledge switching network can solve this set of inputs , thus proving that monotone switching networks for directed connectivity are strictly more powerful than certain - knowledge switching networks .    </S>",
    "<S> * acknowledgement : * + this material is based on work supported by the national science foundation graduate research fellowship under grant no . 0645960 . </S>"
  ]
}