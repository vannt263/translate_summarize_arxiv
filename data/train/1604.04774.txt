{
  "article_text": [
    "in his classical paper on singularities @xcite , arnold has classified all isolated hypersurface singularities over the complex numbers with modality @xmath2 .",
    "he has given normal forms in the sense of polynomial families with moduli parameters such that every stable equivalence class of function germs contains at least one ( but only finitely many ) elements of these families .",
    "we refer to such elements as normal form equations .",
    "two germs are stably equivalent if they are right equivalent after the direct addition of a non - degenerate quadratic form .",
    "two function germs @xmath4 $ ] , where @xmath5 , are right equivalent , written @xmath6 , if there is a @xmath7-algebra automorphism @xmath8 of @xmath9 $ ] such that @xmath10 . using the splitting lemma , any germ with an isolated singularity at the origin can be written , after choosing a suitable coordinate system , as the sum of two functions on disjoint sets of variables .",
    "one function that is called the non - degenerate part , is a non - degenerate quadratic form , and the other part , called the residual part is in @xmath11 .",
    "the splitting lemma is implemented in singular  as part of the library ` classify.lib ` @xcite .    in @xcite",
    ", arnold has made this classification explicit by describing an algorithmic classifier , which is based on a series of @xmath1 theorems .",
    "this approach determines the type of the singularity in the sense of its normal form .",
    "however , the values of the moduli parameters are not determined , that is , no normal form equation is given .",
    "arnold s classifier is implemented in ` classify.lib ` .",
    "classification of complex singularities has a multitude of practical and theoretical applications .",
    "the classification of real singularities in @xcite is based on determining the complex type of the singularity .    in this paper",
    ", we develop a determinator for complex singularities of modality @xmath2 and corank @xmath2 , which computes , for a given rational input polynomial , a normal form equation in its equivalence class . for singularities with non - degenerate newton boundary ,",
    "our determinator is based on a simple and uniform approach , which does not require a case - by - case analysis ( except for some trivial final steps to read off the values of the moduli parameters according to arnold s choice of the normal form ) .",
    "two series of cases with degenerate newton boundary are handled with more specific methods . here",
    ", we use results of @xcite to compute a normal form . in this way",
    ", we obtain an approach which does not only determine the moduli parameters , but also allows for an elegant implementation .",
    "we have implemented our algorithm in the singular - library ` classify2.lib ` @xcite .",
    "it is important to note that two different normal form equations do not necessarily represent two different right equivalence classes . in @xcite the complete structure of the equivalence classes for ,",
    "in particular , complex singularities of modality @xmath12 and corank @xmath0 is determined , in the sense that all equivalences between normal form equations are described .",
    "all normal form equations in the right equivalence class of a given unimodal corank @xmath0 singularity can , hence , be determined by combining our classifier with the results in @xcite .",
    "there is not yet a similar complete description of the structure of the equivalence classes of bimodal singularities .",
    "this paper is structured as follows : in section [ definitions and preliminary results ] , we give the fundamental definitions and provide the prerequisites on singularities and their classification . in section [ section :",
    "generalalg ] , we develop a general algorithm for the classification of complex singularities of modality @xmath2 and corank @xmath2 . essentially , the algorithm is structured into a subalgorithm for elimination below the newton polygon , and a subalgorithm for elimination on and above the newton polygon , which also determines the values of the moduli parameters .",
    "the algorithm for the two series of germs of modality @xmath0 with degenerate newton boundary is discussed in section [ section : degeneratealg ] .",
    "in this section , we give some basic definitions and results , as well as some notation that will be used throughout the paper .    [ def nfequ ]",
    "let @xmath13 $ ] be a union of equivalence classes with respect to the relation @xmath14 .",
    "a * normal form * for @xmath15 is given by a smooth map @xmath16\\subset\\operatorname{\\mathbb{c}}[[x_1,\\ldots , x_n]]\\ ] ] of a finite - dimensional @xmath7-linear space @xmath17 into the space of polynomials for which the following three conditions hold :    * @xmath18 intersects all equivalence classes of @xmath15 , * the inverse image in @xmath17 of each equivalence class is finite , * @xmath19 is contained in a proper hypersurface in @xmath17 .",
    "the elements of the image of @xmath20 are called * normal form equations*.    arnold has chosen a normal form for each of the corank @xmath0 singularities of modality @xmath2 .",
    "he has also associated a type to each normal form , see table [ tab : normal_forms ] .",
    "we denote the normal form corresponding to the type @xmath21 by @xmath22 . for @xmath23 with @xmath15 as in definition",
    "[ def nfequ ] , we write @xmath24 for the corresponding normal form equation .    in the following ,",
    "we give a short account on weighted jets , filtrations , and newton polygons .",
    "see @xcite and @xcite for more details .",
    "let @xmath25 be a weight on the variables @xmath26 .",
    "the @xmath27-weighted degree on @xmath28 is given by @xmath29 .",
    "if the weight of all variables is equal to @xmath12 , we refer to the weighted degree of a monomial @xmath30 as the standard degree of @xmath30 and write @xmath31 for @xmath32 .",
    "we use the same notation for terms of polynomials .",
    "we call a polynomial @xmath33 $ ] * quasihomogeneous * or weighted homogeneous of degree @xmath34 with respect to the weight @xmath27 if @xmath35 for any term @xmath36 of @xmath37 .",
    "[ def : piecewiseweight ] let @xmath38 be a finite family of weights on the variables @xmath26 .",
    "for any monomial ( or term ) @xmath39 $ ] , we define the * piecewise weight * with respect to @xmath27 as @xmath40 a polynomial @xmath37 is called * piecewise homogeneous * of degree @xmath34 with respect to @xmath27 if @xmath35 for any term @xmath36 of @xmath37 .",
    "let @xmath27 be a ( piecewise ) weight on @xmath28 .    1 .",
    "let @xmath41 be the decomposition of @xmath42 $ ] into weighted homogeneous summands @xmath43 of @xmath27-degree @xmath44 .",
    "the * weighted @xmath45-jet * of @xmath37 with respect to @xmath27 is @xmath46 the sum of terms of @xmath37 of lowest @xmath27-degree is the * principal part * of @xmath37 with respect to @xmath27 .",
    "a power series in @xmath9 $ ] has * filtration * @xmath47 with respect to @xmath27 if all its monomials are of @xmath27-weighted degree @xmath34 or higher .",
    "the power series of filtration @xmath34 form a sub - vector space @xmath48 \\,.\\ ] ] 3 .",
    "a power series @xmath49 $ ] is * weighted @xmath50-determined * with respect to the weight @xmath27 if @xmath51 we define the * weighted determinacy * of @xmath37 as the minimum number @xmath50 such that @xmath37 is @xmath50-determined .",
    "let @xmath52 be a single weight .",
    "a power series @xmath53 $ ] is called * semi - quasihomogeneous * with respect to @xmath27 if its principal part with respect to @xmath27 is non - degenerate , that is , has finite milnor number . is ( semi-)quasihomogeneous if there exists a weight @xmath27 such that @xmath37 is ( semi-)quasihomogeneous with respect to @xmath27 . ]",
    "the principal part is then called the * quasihomogeneous part * of @xmath37 .    1 .   if the weight of each variable is @xmath12 , we write @xmath54 and @xmath55 instead of @xmath56 and @xmath57 , respectively .",
    "2 .   if for a given type @xmath21 , @xmath58 is independent of @xmath59 , we denote it by @xmath60",
    ".    there are similar concepts of jets and filtrations for coordinate transformations :    [ phi ] let @xmath8 be a @xmath7-algebra automorphism of @xmath9 $ ] and let @xmath27 be a weight on @xmath28 .    1",
    ".   for @xmath61 we define _ @xmath62 _ as the automorphism given by @xmath63 if the weight of each variable is equal to @xmath12 , that is , @xmath64 , we write @xmath65 for @xmath66 .",
    "[ enum : filtration ] @xmath8 has filtration @xmath34 if , for all @xmath67 , @xmath68    note that @xmath69 for all @xmath70 .",
    "furthermore note that @xmath71 has filtration @xmath72 , and that , for @xmath61 , @xmath66 has filtration @xmath45 if @xmath73 .",
    "the following definition gives an infinitesimal analogue of the above definition .",
    "a formal vector field @xmath74 has filtration @xmath34 with respect to a weight @xmath27 , if the directional derivative of @xmath75 raises the filtration by not less than @xmath34 ,",
    "that is , @xmath76    in a similar way as ( * ? ? ?",
    "* proposition 8) , one can prove :    [ wfact ] let @xmath77 $ ] be two power series with @xmath78 .",
    "let @xmath79 and suppose that the maximal weighted filtration of @xmath37 with respect to @xmath27 is @xmath50 .",
    "furthermore , let @xmath8 be a @xmath7-algebra automorphism of @xmath9 $ ] such that @xmath10 .",
    "if @xmath80 factorizes as @xmath81 in @xmath82 $ ] , then @xmath83 factorizes as @xmath84    let @xmath85 $ ] , let @xmath21 be a corank @xmath0 singularity type .",
    "we call @xmath86 where @xmath59 is generic , the * support * of @xmath37 and of @xmath21 , respectively .",
    "let @xmath87 and let @xmath88 and @xmath89 be the boundaries in @xmath90 of the convex hulls of @xmath91 and @xmath92 , respectively .",
    "then :    1 .",
    "@xmath88 and @xmath89 are called the * newton polygons * of @xmath37 and @xmath21 , respectively .",
    "the compact segments of @xmath88 or @xmath89 are called * faces*. if @xmath93 is a face , then the set of monomials of @xmath37 lying on @xmath93 is denoted by @xmath94 and the sum of the terms lying on @xmath93 by @xmath95 .",
    "moreover , we write @xmath96 for the set of monomials corresponding to the lattice points of @xmath93 , and set @xmath97 .",
    "we use the same notation for a set of faces , considering the monomials lying on the union of the faces .",
    "any face @xmath93 induces a weight @xmath98 on @xmath99 in the following way : if @xmath93 has slope @xmath100 , in lowest terms , and @xmath101 , we set @xmath102 and @xmath103 .",
    "4 .   if @xmath104 are the weights associated to the faces of @xmath105 , respectively @xmath89 , ordered by increasing slope , there are unique minimal integers @xmath106 such that the piecewise weight associated to @xmath107 by definition [ def : piecewiseweight ] is constant on @xmath88 , respectively @xmath89 .",
    "we denote this piecewise weight by @xmath108 , respectively @xmath109 , and the corresponding constant by @xmath110 , respectively @xmath111 .",
    "let @xmath112 and @xmath113 be faces with weights @xmath114 and @xmath115 , respectively , and let @xmath27 be the piecewise weight defined by @xmath114 and @xmath115 .",
    "let @xmath34 be the @xmath27-degree of the monomials on @xmath116 and @xmath117 .",
    "then @xmath118 is the newton polygon associated to the sum of all monomials of @xmath27-degree @xmath34 .",
    "a monomial @xmath30 lies strictly underneath , on or above @xmath88 , if the @xmath108-degree of @xmath30 is less than , equal to or greater than @xmath110 , respectively .",
    "we use this notation also with respect to @xmath89 , @xmath109 , and @xmath111 .",
    "given @xmath119 $ ] and @xmath120 , we write @xmath121 for the coefficient of @xmath30 in @xmath37 .    the * jacobian ideal * @xmath122 $ ] of @xmath37 is generated by the partial derivatives of @xmath123 $ ] .",
    "the * local algebra * of @xmath37 is the residue class ring of the jacobian ideal of @xmath37 .",
    "suppose @xmath37 is a non - degenerate germ , @xmath124 are monomials representing a basis of the local algebra of @xmath37 , and @xmath125 are the monomials in this basis above or on @xmath88 .",
    "we then call @xmath125 a * system * of the local algebra of @xmath37",
    ".    let @xmath37 be a semi - quasihomogeneous function with quasihomogeneous part @xmath126 , and let @xmath124 be monomials representing a basis of the local algebra of @xmath126 .",
    "then @xmath124 also represent a basis of the local algebra of @xmath37 .",
    "[ thm : quasinf ] let @xmath37 be a semi - quasihomogeneous function with quasihomogeneous part @xmath126 and let @xmath125 be a system of the local algebra of @xmath37 .",
    "then @xmath37 is equivalent to a function of the form @xmath127 with constants @xmath128 .    in @xcite ,",
    "the following approach is used to extend the above results to a larger class of singularities of corank  @xmath0 .    a piecewise homogeneous function @xmath126 of degree @xmath34 satisfies",
    "* condition a * , if for every function @xmath129 of filtration @xmath130 in the ideal spanned by the derivatives of @xmath126 , there is a decomposition @xmath131 where the vector field @xmath132 has filtration @xmath133 and @xmath134 has filtration bigger than @xmath135 .",
    "note that quasihomogeneous functions satisfy condition a.    [ principalpart]suppose that the principal part @xmath126 of the piecewise homogeneous function @xmath37 has finite milnor number and satisfies condition a. let @xmath125 be a system of the local algebra of @xmath126 .",
    "then @xmath37 is equivalent to a function of the form @xmath136 with constants @xmath128 .",
    "following arnold s proof of theorem [ thm : quasinf ] , theorem [ principalpart ] can be proven by iteratively applying the following lemma .",
    "[ lemma : quasinf ] let @xmath137 $ ] be a piecewise homogeneous function of weighted @xmath27-degree @xmath138 that satisfies condition a , and let @xmath139 be the monomials of a given @xmath27-degree @xmath140 in a system of the local algebra of @xmath126 .",
    "then , for every series of the form @xmath141 , where the filtration of @xmath142 is greater than @xmath138 , we have @xmath143 where the terms in @xmath144 of degree less than @xmath145 are the same as in @xmath142 , and the part of degree @xmath145 can be written as @xmath146 with @xmath147 .",
    "let @xmath148 denote the sum of the terms of degree @xmath145 in @xmath142 .",
    "there exists a decomposition of @xmath129 of the form @xmath149,\\ ] ] since @xmath139 represent a monomial vector space basis of the local algebra of @xmath126 in degree @xmath145 .",
    "let @xmath150 be the @xmath27-degree of @xmath151 , and let @xmath152",
    ". then @xmath153 where @xmath154 has filtration greater than @xmath145 .",
    "applying the transformation defined by @xmath155 to @xmath156 , we transform @xmath37 to @xmath157 where the filtration of @xmath158 is greater than @xmath145 .",
    "a system of the local algebra is in general not unique . for his lists of normal forms of hypersurface singularities",
    ", arnold has chosen in each case ( in particular ) a specific system of the local algebra . in the rest of the paper , we call these systems the * arnold systems*.    we say that @xmath159 $ ] has * non - degenerate newton boundary * if for every face @xmath93 of @xmath88 the saturation of @xmath95 has finite milnor number",
    ". has non - degenerate newton boundary if there exists a germ @xmath160 $ ] with @xmath161 which has non - degenerate newton boundary .",
    "we use the analogous terminology also for semi - quasihomogeneous . ]    [ rmk elimination ]    1 .   note that if @xmath37 has non - degenerate newton boundary and finite milnor number , then the principal part of @xmath37 with respect @xmath108 has finite milnor number .",
    "2 .   also note that for arnold s normal forms @xmath22 of corank and modality @xmath2 the principal part with respect to @xmath109 satisfies condition a. 3 .",
    "suppose that @xmath37 is a function of corank @xmath0 with non - degenerate newton boundary such that , for one of arnold s normal forms @xmath22 of modality @xmath2 , the support of the principal part @xmath126 of @xmath37 with respect to @xmath109 coincides with that of the principal part of @xmath22 .",
    "then a system of the local algebra of @xmath126 is also a system of the local algebra of @xmath37 .",
    "it follows from lemma [ lemma : quasinf ] that all hypersurface singularities of corank @xmath2 and modality @xmath2 with non - degenerate newton boundary are finitely weighted determined .",
    "moreover , we explicitely obtain the weighted determinacy for each such singularity .",
    "we now describe an algorithm to determine an arnold normal form equation for a given input polynomial @xmath162 , @xmath163 $ ] of modality @xmath164 . in this section ,",
    "we limit our discussion on functions with a normal form with non - degenerate newton boundary . in the case of normal forms with degenerate newton boundary , our algorithm will resort to special algorithms described in section [ section : degeneratealg ] .",
    "figures [ fig infinite ] to [ fig w ] illustrate the modality @xmath0 types with non - degenerate newton boundary .",
    "the figures show in the gray shaded area all monomials which can possibly occur in a polynomial @xmath37 of the given type @xmath21 .",
    "the faces of the newton polygon @xmath89 are shown in blue .",
    "the dots with a thick black circle indicate the moduli monomials in the arnold system .",
    "red dots indicate monomials which are not in @xmath165 .",
    "monomials occuring in any normal form equation with non - zero coefficients are shown as blue dots .",
    "the structure of our algorithm consists out of two basic steps , see algorithm [ alg : classification ] .",
    "we first determine the complex type of @xmath37 by removing all the monomials underneath @xmath89 , in the semi - quasihomogeneous cases , and all the monomials underneath and on @xmath89 which are not in @xmath22 , in the other cases ( algorithm [ alg : clas ] ) .",
    "after that , we determine a normal form equation of @xmath37 ( using algorithm  [ alg : parameter ] in the non - simple cases ) .",
    "more generally , we will formulate the algorithm in a way , that it is applicable to any @xmath166 , and will recognize if @xmath37 is of modality @xmath167 , returning an error in this case .",
    "apply algorithm [ alg : clas ] to @xmath37 .",
    "apply algorithm [ alg : parameter ] to the output of algorithm [ alg : clas ] and return the result .",
    "we first discuss algorithm [ alg : clas ] .",
    "if @xmath37 is of corank @xmath168 , then @xmath37 is of type @xmath169 , where @xmath170 .",
    "suppose now that @xmath37 is of corank @xmath0 .",
    "determining @xmath21 in the process , we remove all monomials below @xmath89 if @xmath89 has only one face , and all monomials on or below @xmath89 which are not in @xmath22 , if @xmath89 has two faces .",
    "let @xmath34 be the maximal filtration of @xmath37 .",
    "if @xmath37 is of type @xmath171 , nothing has to be done .",
    "note that @xmath37 is of type @xmath171 if and only if the @xmath34-jet of @xmath37 has @xmath172 different roots over the complex numbers .",
    "if @xmath37 is not of type @xmath171 , then algorithm [ alg : lineartransformation ] will transform @xmath37 such that @xmath173 . using ( * ? ? ? * proposition 8) , we find the corresponding linear transformation by factorizing @xmath174 .    at this stage we know that @xmath175 .",
    "we store the monomials of the @xmath34-jet of @xmath37 in @xmath176",
    ". the remainder of algorithm [ alg : clas ] will proceed in an iterative way , changing @xmath37 and @xmath177 in the process : in each step of the iteration , we can have one of the following two possibilities for @xmath88 :    1 .",
    "[ two face ] note that monomials of the form @xmath178 or @xmath179 can not be intersection points of ( finite ) faces of @xmath89 .",
    "if any of the monomials @xmath180 which is not of this form lies on two faces of @xmath88 , it is clear that @xmath89 has at least two faces with corner point @xmath181 .",
    "the algorithm will then stay in this case .",
    "let @xmath112 and @xmath113 be the two different faces of @xmath88 on which @xmath181 lies .",
    "the corner point in all modality @xmath12 and @xmath0 cases with a newton polygon with two faces is either @xmath182 or @xmath183 .",
    "it follows that if @xmath184 , @xmath185 or @xmath186 , then @xmath37 is not of modality @xmath2 .",
    "otherwise , using the shape of @xmath187 and the fact that @xmath188 is a corner point of @xmath189 , all monomials in @xmath37 on @xmath189 of the form @xmath190 or @xmath191 can be removed iteratively , by increasing degree , each time replacing the corresponding terms of the given degree by higher @xmath108-degree terms using algorithm [ alg : transformation ] . after each iteration , @xmath37 , @xmath112 , @xmath113 and @xmath189 are recalculated . in each iteration , there will either be no terms of the considered form on @xmath189 , in which case the process stops , or the number of equivalence classes in the local algebra of @xmath37 represented by powers of @xmath192 or @xmath193 underneath @xmath189 strictly increases , except possibly in the last two steps of the process ( where monomials on the final newton polygon may be removed ) .",
    "note that , if @xmath194 and @xmath195 are largest powers of @xmath192 and @xmath193 underneath @xmath189 , then @xmath196 represent different equivalence classes .",
    "since @xmath197 is finite , the process must stop after finitely many iterations .",
    "no further monomials on @xmath189 can be removed without creating terms underneath @xmath189 .",
    "hence , in all cases in consideration , this algorithm will produce the newton polygon of the normal form .",
    "in fact , if @xmath198 does not coincide with @xmath199 for some type @xmath21 of modality @xmath2 , then the modality of @xmath37 is bigger than @xmath0 . otherwise , @xmath37 is a germ of the corresponding type @xmath21 , and all monomials in @xmath37 underneath or on @xmath89 not in @xmath22 are removed .",
    "2 .   suppose no monomials in @xmath177 , except monomials of the form @xmath178 or @xmath179 , lie on two faces of @xmath88 .",
    "then @xmath37 is not of type @xmath200 or @xmath201 , since these cases will be recognized to have two faces in the first iteration of the above step .",
    "all the monomials in @xmath177 lie on only one face of @xmath88 .",
    "let @xmath93 be this face .",
    "if @xmath202 is non - degenerate , then @xmath37 is a semi - quasihomogeneous germ .",
    "since @xmath203 for any automorphism @xmath8 of filtration @xmath204 with respect to the weight @xmath27 associated to @xmath93 , @xmath205 is an invariant of the type of @xmath37 .",
    "the corresponding type @xmath21 can , hence , be identified .",
    "the case @xmath171 will already be recognized as a semi - quasihomogeneous function in the first iteration , and @xmath37 will be returned by the algorithm without any change . in all other cases ,",
    "the weight @xmath27 associated with @xmath93 will be such that @xmath206 . if @xmath142 is degenerate , then either @xmath37 has monomials underneath @xmath89 , or @xmath89 is degenerate . for all semi - quasihomogeneous cases of modality @xmath2 , except @xmath171 ,",
    "@xmath207 is divisible by a power of @xmath192 , and @xmath192 has the highest multiplicity among all prime factors .",
    "any weighted jet of @xmath22 with respect to a face lying below @xmath89 and intersecting @xmath89 in @xmath207 has the same property .",
    "suppose @xmath93 is such a face . then @xmath208 with @xmath209 .",
    "taking into account that the weighted degree of @xmath192 is greater than the weighted degree of @xmath193 , it follows that @xmath210 with @xmath211 .",
    "the right equivalence @xmath212 , @xmath213 transforms @xmath37 such that @xmath214 . if the normal form of @xmath37 has a non - degenerate newton boundary , but is not semi - quasihomogeneous , we can proceed in the same way : suppose @xmath93 lies underneath or on the face of biggest slope of @xmath89 .",
    "if @xmath215 is the factor of highest multiplicity of @xmath142 with @xmath211 , then the right equivalence @xmath212 , @xmath213 transforms @xmath37 such that @xmath214 .",
    "we then update @xmath216 and pass to the next iteration .",
    "if @xmath142 does not have any @xmath192-linear factor , then the normal form of @xmath37 has a degenerate newton boundary . in this case , we resort to the algorithms described in section [ section : degeneratealg ] . since @xmath197 is finite , the same argument as in ( [ two face ] ) shows that the iteration terminates after finitely many steps .    1.05    @xmath217 residual part given by the splitting lemma applied to @xmath37 , as implemented in ` classify.lib ` .",
    "[ begin case a ] @xmath218 [ end case a ] ` false ` ` false ` ( modality @xmath167 ) @xmath37:= output of algorithm [ alg : lineartransformation ] applied to @xmath219 $ ] @xmath220 , where @xmath221 maximal filtration of @xmath37 w.r.t .  the standard grading .",
    "let @xmath222 be the faces of @xmath88 ordered by increasing slope . `",
    "false ` ( modality @xmath167 ) @xmath187 @xmath223 @xmath37:= output of algorithm [ alg : transformation ] with input @xmath37 , @xmath142 , @xmath36 , and weights @xmath224",
    "let @xmath222 be the faces of @xmath88 .",
    "@xmath187 , where @xmath44 and @xmath45 are such that @xmath225 @xmath223 ` false ` ( modality @xmath167 ) let @xmath93 be the face of @xmath88 of smallest slope such that @xmath226 .",
    "@xmath202 let @xmath215 be the factor of @xmath142 with highest multiplicity .",
    "replace @xmath37 by @xmath212 , @xmath213 applied to @xmath37 .",
    "@xmath227 ` false ` ( modality @xmath167 )    1.05    factorize @xmath228 over @xmath7 , where @xmath229 , @xmath215 , @xmath230 , @xmath231 and @xmath232 are monic in @xmath192 and pairwise coprime , and @xmath233.[begin max filtration ] replace @xmath37 with @xmath212 , @xmath213 applied to @xmath37 .",
    "replace @xmath37 with @xmath234 , @xmath235 applied to @xmath37 .",
    "replace @xmath37 with @xmath212 and @xmath236 applied to @xmath37 .",
    "replace @xmath37 with @xmath212 , @xmath213 applied to @xmath37 .",
    "replace @xmath37 with @xmath234 , @xmath235 applied to @xmath37 .",
    "write @xmath237 , @xmath238 , @xmath239 and @xmath240 .",
    "replace @xmath37 with @xmath241 , @xmath242 applied to @xmath37 .",
    "@xmath37    1.05    @xmath243 the sum of the terms of @xmath244 of lowest @xmath245-degree @xmath246 the term of @xmath247 of lowest @xmath248-degree @xmath249 the sum of the terms of @xmath250 of lowest @xmath248-degree @xmath251 the term of @xmath252 of lowest @xmath245-degree [ line : oneface ] [ line : onefaceend]@xmath253&\\rightarrow&\\operatorname{\\mathbb{k}}[x , y]\\\\         x&\\mapsto & x - t / m_{x , y}\\\\         y&\\mapsto & y\\end{aligned}\\ ] ] @xmath254 @xmath253&\\rightarrow&\\operatorname{\\mathbb{k}}[x , y]\\\\         x&\\mapsto & x\\\\         y&\\mapsto&y - t / m_{y , x }   \\end{aligned}\\ ] ] @xmath254 @xmath37[end above ]    we now discuss algorithm [ alg : parameter ] , which determines the values of the moduli parameters .",
    "let @xmath255 be the weight associated to @xmath89 . if @xmath89 has only one face @xmath93 , then @xmath94 is not necessarily equal to @xmath256 .",
    "we achieve equality by a weighted linear transformation . in the cases where @xmath89 has two faces",
    ", equality has already been achieved in algorithm [ alg : clas ] . above @xmath89 , we then use the method described in the proof of lemma [ lemma : quasinf ] to reduce @xmath37 modulo @xmath257 where @xmath258 : we iteratively apply algorithm [ alg : transformation ] to each term , in the two face case only considering terms in @xmath257 , proceeding weighted degree by weighted degree in increasing order ( and in each weighted degree according to a total ( ordinary ) degree ordering ) . after handling a given weighted degree ,",
    "if arnold s system for type @xmath21 contains a monomial @xmath30 of this degree , we write the sum of the remaining terms in the form @xmath259 where @xmath260 $ ] are weighted homogeneous , @xmath261 , and as @xmath262 otherwise . by remark",
    "[ rmk elimination ] this is always possible .",
    "applying @xmath263 , @xmath264 , results in replacing the sum of the remaining terms by a sum of terms which are either in arnold s system in the @xmath27-degree under consideration , or of higher @xmath27-degree .",
    "since @xmath37 is weighted @xmath145-determined , we stop the iteration when we reach degree @xmath265 , where @xmath145 is the @xmath27-degree of the highest @xmath27-degree monomial in arnold s system .    in the semi - quasihomogeneous cases , line [ call alg 4 ] in algorithm [ alg : parameter ]",
    "can be omitted , since the reduction modulo @xmath257 is also handled by lines [ line arnold1 ] to [ line arnold end ] .    in algorithm",
    "[ alg : parameter ] , arnold s system can be replaced by any other choice of a system of the local algebra .",
    "the algebraic extension of @xmath266 introduced for representing the moduli parameters can arise in two steps of the overall algorithm : reversal of the linear jet in algorithm [ alg : lineartransformation ] , and rescaling of the variables at the end of algorithm [ alg : parameter ] .",
    "note that the transformation reversing the linear jet is obtained from the factorization @xmath228 . here , a field extension can only occur if @xmath267 and @xmath268 .    1.05    [ line branch deg ] result of algorithm [ alg : classificationdeg ] applied to @xmath37[line branch deg2 ] @xmath269 and @xmath270 apply a weighted homogeneous transformation to @xmath37 such that @xmath214 .",
    "@xmath271 highest @xmath27-degree of a monomial in arnold s system of @xmath21 @xmath272 [ above nondeg ] @xmath217 result of algorithm  [ alg : transformation ] with input @xmath37 , @xmath126 , @xmath36 and @xmath273 , @xmath273[call alg 4 ] @xmath217 result of algorithm  [ alg : transformation ] with input @xmath37 , @xmath126 , @xmath36 and @xmath115 , @xmath114 [ line arnold1 ] [ line arnold end ] apply @xmath263 , @xmath264 to @xmath37.[line arnold4 ] delete all terms in @xmath37 of @xmath27-degree @xmath274 .",
    "apply transformation @xmath275 , @xmath276 over an algebraic extension of @xmath277 to transform the non - parameter terms to the terms of @xmath22 .",
    "read off the parameters @xmath278 .",
    "( @xmath22 , @xmath279 )",
    "in this section we give a classification algorithm for the singularities @xmath280 , where @xmath281 is the milnor number , in arnold s list .",
    "they have the property that in all coordinate systems the newton boundary is degenerate , which is the reason that they have to be treated separately .",
    "they are of multiplicity @xmath172 and the @xmath172-jet is a @xmath172-th power of a linear homogeneous polynomial . after a suitable automorphism of @xmath282 $ ] , we may assume that the corresponding polynomial is of the form @xmath283 this automorphism was already constructed in the previous section .",
    "singularities of this type have been studied in @xcite .",
    "it is proved that the milnor number satisfies @xmath284 , and equality holds if and only if @xmath285 } w_{ij}\\neq 0.\\ ] ] if the milnor number @xmath286 is even , then the germ of the curve defined by @xmath37 is irreducible with semi  group @xmath287 . in the odd case , the curve has two branches .",
    "let @xmath288 and assume @xmath289 .",
    "let @xmath290 be the weighted degree reverse lexicographical ordering with respect to the weights @xmath291 on @xmath282 $ ] with @xmath292 .",
    "in @xcite it is proved that in case of @xmath281 being even the leading ideal of the jacobian ideal @xmath293 is generated by @xmath294 .",
    "if @xmath281 is odd , then the leading ideal is generated by @xmath295 .",
    "we obtain a monomial basis of @xmath282/\\langle \\frac{\\partial f}{\\partial x } , \\frac{\\partial f}{\\partial y}\\rangle$ ] as @xmath296 with @xmath297 in case that @xmath281 is even and @xmath298 in case that @xmath281 is odd .",
    "let @xmath299 if @xmath281 is even and @xmath300 if @xmath281 is odd .",
    "the normal form given in this way for the case that the milnor number is odd differs from arnold s normal form . instead of @xmath303 and @xmath304",
    ", he used the monomials @xmath305 and @xmath306 . from a computational point of view , our choice is better .",
    "it is easy to convert our normal form to arnold s normal form .",
    "see figure [ fig infinite deg ] , for an illustration of the normal forms ( using our choice of parameter monomials ) .",
    "the construction of the automorphism in the theorem is done separately for each weighted degree : assume we have already @xmath307 for some @xmath308 ( with milnor number @xmath309 .",
    "if @xmath310 , then we have @xmath311}w_{ij}=0.\\ ] ] this implies that @xmath312 we obtain @xmath313 for suitable @xmath314 .",
    "now we can choose an automorphism @xmath301 of @xmath282 $ ] such that @xmath315 ( note that we could even find an automorphism mapping @xmath316 to @xmath317 .",
    "we obtain @xmath318 for suitable @xmath319 .",
    "if @xmath320 then we have @xmath321 } w_{ij}\\neq 0.\\ ] ] similarly as before , we can write @xmath322 with @xmath323 since the milnor number is @xmath324 , we obtain @xmath325 . using a similar automorphism as in the previous case , we may assume with @xmath326 ( the first modulus ) , that @xmath327 note , that @xmath328 , and we have to compute the normal form of @xmath37 up to degree @xmath329 .",
    "now we can write @xmath330 with @xmath331 using an automorphism as before , we may assume that @xmath332 .",
    "if @xmath335 we define an automorphism @xmath301 of @xmath282 $ ] by the exponential of the vector field @xmath336 with @xmath337 since by construction , @xmath338 , we obtain @xmath339 for suitable @xmath340 .",
    "now let @xmath344 and write @xmath345 using an automorphism as in the first case , we may assume @xmath332 , and obtain as normal form @xmath346 we summarize the approach in algorithm [ alg : classificationdeg ] .",
    "apply transformation @xmath275 , @xmath276 over an algebraic extension field of @xmath277 to @xmath37 to transform the weighted homogeneous part of @xmath37 to @xmath347 .",
    "let > be the local weighted degree reverse lexicographical ordering with weights @xmath291 and @xmath292 .",
    "compute a standard basis @xmath348 of @xmath349 with respect to @xmath290 .",
    "compute @xmath281 the milnor number of @xmath37 , and set @xmath350 . @xmath351",
    "@xmath352 weighted homogeneous part of @xmath37 of degree @xmath308 write @xmath353 .",
    "construct automorphism @xmath301 with @xmath354 up to degree @xmath329 .",
    "@xmath355 @xmath352 weighted homogeneous part of @xmath37 of degree @xmath356 @xmath357 @xmath358 write @xmath359 .",
    "construct automorphism @xmath301 with @xmath360 up to degree @xmath329 .",
    "@xmath361 @xmath362 write @xmath363 .",
    "construct automorphism @xmath301 with @xmath354 up to degree @xmath329 .",
    "@xmath361 @xmath364 construct automorphism @xmath301 defined by the vector field @xmath365 up to degree @xmath341 .",
    "@xmath366 @xmath367 write @xmath368 .",
    "( @xmath369 ) , @xmath370 )    the approach described in algorithm  [ alg : parameter ] in case of a non - degenerate newton boundary can be adapted to also handle the cases @xmath280 .",
    "however , this strategy requires more iterations than algorithm  [ alg : classificationdeg ] . to adapt algorithm  [ alg : parameter ] , we remove lines  [ line branch deg ] and  [ line branch deg2 ] , and in line [ call alg 4 ] , we call algorithm  [ alg : parameterdeg ] instead of algorithm [ alg : transformation ] if @xmath37 is of type @xmath280 .    note that in these cases algorithm [ alg : clas ] does not require a field extension , hence , algorithm  [ alg : parameterdeg ] is called with input defined over @xmath371 . note",
    "also that algorithm  [ alg : parameterdeg ] is applicable with any choice of a system @xmath17 of the local algebra .",
    "@xmath372 and @xmath373 @xmath352 output of algorithm [ alg : transformation ] with input @xmath37 , @xmath126 , @xmath36 and @xmath374 @xmath375 arnold s system of @xmath376/\\operatorname{jac}(f)$ ] g @xmath377 monomial in @xmath17 of minimal @xmath27-degree factorize @xmath378 over @xmath371 with @xmath379 and @xmath380 $ ] linear .",
    "@xmath381 automorphism defined by @xmath382 up to @xmath383degree @xmath341 @xmath384 @xmath385 @xmath386 result of algorithm  [ alg : transformation ] with input @xmath387 , @xmath126 , @xmath388 and @xmath248 , @xmath245[call alg 4a ] @xmath389 @xmath390 @xmath391 automorphism defined by @xmath392 up to @xmath383degree @xmath341 .",
    "@xmath393 @xmath394 result of algorithm  [ alg : transformation ] with input @xmath395 ,",
    "@xmath126 , @xmath388 and @xmath248 , @xmath245[call alg 4b ] @xmath395                  bhm , j. , marais , m. , pfister , g. , 2016 .",
    "classify2.lib . a singular 4 library for classifying isolated hypersurface singularities of corank and modality up to 2 , and to determine the moduli parameters .",
    "singular distribution .",
    "https://github.com/singular/sources .",
    "krger , k. , 1997 .",
    "classify.lib . a singular 4 library for classifying isolated hypersurface singularities w.r.t .",
    "right equivalence , based on the determinator of singularities by v.i .",
    "arnold . singular distribution ."
  ],
  "abstract_text": [
    "<S> in @xcite , arnold has obtained normal forms and has developed a classifier for , in particular , all isolated hypersurface singularities over the complex numbers up to modality @xmath0 . </S>",
    "<S> building on a series of @xmath1 theorems , this classifier determines the type of the given singularity . however , </S>",
    "<S> for positive modality , this does not fix the right equivalence class of the singularity , since the values of the moduli parameters are not specified . in this paper , we present a simple classification algorithm for isolated hypersurface singularities of corank @xmath2 and modality @xmath3 . for a singularity given by a polynomial over the rationals , </S>",
    "<S> the algorithm determines its right equivalence class by specifying a polynomial representative in arnold s list of normal forms .    </S>",
    "<S> = 1 </S>"
  ]
}