{
  "article_text": [
    "financial applications in the risk industry are underpinned by large - scale stochastic simulations which are data , memory and computationally intensive @xcite .",
    "these simulations are run on a weekly , monthly or quarterly basis on production systems such as commodity clusters to generate risk metrics including probable maximum loss ( pml ) @xcite and tail value - at - risk ( tvar ) @xcite due to catastrophic events such as earthquakes , hurricanes and floods .",
    "the results obtained from these simulations are then interpreted by actuaries for key decision making and planning a financial year .",
    "the simulations that run on a routine basis are sufficient if the risk metrics do not have to be updated before their next run .",
    "consider a simulation that takes into account the fluctuation of one parameter , for example , currency , on a weekly basis .",
    "the simulation is performed on a weekly basis to update the risk metrics . however , this is not the case in real - time scenarios where risk metrics will need to be obtained on an ad hoc basis before the next routine run .",
    "for example , consider real - time online pricing when an underwriter needs to close a deal with a client over the telephone .",
    "production systems are not the right type of infrastructure for simulating on an ad hoc basis since they are firstly optimised to run routine simulations and accommodate data of known sizes , and secondly , over committed and at best fully utilised resources with no scope to satisfy the data , memory and computational requirements of ad hoc simulations .",
    "consequentially , even if ad hoc simulations are performed on production clusters they tend to be slow .",
    "one solution to this problem would be to use dedicated systems for ad hoc simulations",
    ". however , this is not always possible since there is an additional investment on top of the maintenance costs of production clusters .",
    "an alternative solution to reduce the cost of investment is by using hardware accelerators as coprocessors in heterogeneous clusters @xcite . though computation can be accelerated to suit ad hoc simulations the memory and data requirements can not be always satisfied .",
    "hardware accelerators have limited memory and thereby can not handle large data in memory .",
    "cloud computing infrastructure has the potential to address the above challenges .",
    "maintenance costs can be eliminated and resources can be scaled on - demand , which can satisfy the requirements of ad hoc risk simulations @xcite . in this paper ,",
    "the research question , `` are clouds ready to accelerate ad hoc financial simulations ? '' is explored .",
    "one application , namely aggregate risk analysis , widely employed in the risk industry is developed and deployed on the cloud .",
    "parallel techniques to accelerate the analysis and techniques to efficiently accommodate data and handle memory on cloud vms are investigated .",
    "the experimental studies on the cloud indicate that the application achieves up to a 60x acceleration on vms with hardware accelerators but with poor acceleration due to wasted computational time per dollar spent .",
    "nevertheless the cloud can accommodate financial simulations .",
    "the remainder of this paper is organised as follows .",
    "section [ relatedwork ] considers research related to risk applications .",
    "section [ aggregateriskanalysis ] presents aggregate risk analysis .",
    "section [ experimentalstudies ] presents an experimental study of sequential and parallel implementations on cloud vms .",
    "this paper concludes in section [ conclusion ] by considering future work .",
    "the domain of computational finance and risk addresses problems related to achieving fast computations , surmounting challenges of data management and efficiently handling memory of computing systems .",
    "therefore , this domain is dependent on the advances in high - performance computing .",
    "research of financial applications on production - based computing systems have progressed from small scale clusters @xcite to large supercomputers @xcite , and the typical problem addressed is achieving fast computations .",
    "these applications are hosted either on in - house clusters or on supercomputing infrastructures to which the owners of the application have access .",
    "a number of financial applications are being migrated from small clusters to be hosted on multiple core processors and many core coprocessor which are available at a low budget @xcite .",
    "for example , research related to financial applications exploiting the cell be processor @xcite @xcite , fpgas @xcite @xcite and gpus @xcite .",
    "in all the above research , the need for speeding up financial applications are presented and is achieved .",
    "however , ad hoc analytics in financial risk is important which is now possible with the availability of scalable on - demand vms provided by cloud computing and the development of big data techniques . given that the cloud is a potential high - performance computing platform to address big data problems it is now ripe to explore risk applications in the cloud context @xcite .",
    "there is limited research exploring the feasibility of accelerating and accommodating financial simulations for ad hoc analysis on the clouds .",
    "the research reported in this paper is motivated towards this end .",
    "financial applications are underpinned by large - scale simulations which are both data , memory and computationally intensive .",
    "one such simulation is a monte - carlo like simulation performed on a portfolio of risk held by a reinsurer , referred to as aggregate risk analysis @xcite .",
    "this simulation provides actuaries and decision makers with millions of alternate views of catastrophic events , such as earthquakes , that can occur and the order in which they can occur in a year for portfolio risk management and real - time pricing .",
    "millions of trials are simulated , with each trial comprising a set of possible future earthquake events and the probable loss for each trial is estimated .",
    "although aggregate risk analysis is an embarrassingly parallel problem , there are significant challenges in achieving efficient parallelism .",
    "one major challenge is sharing large input data between the processing cores constrained by limited memory bandwidth .",
    "further , the challenge of accommodating input data in limited memory hardware is constrained by the complex memory architecture of accelerating hardware such as gpus .",
    "large and small sized data along with metadata are required for performing aggregate risk analysis .",
    "the large data required is the year event table , denoted as @xmath0 , which contains the occurrence of earthquake events for a year .",
    "the yet is obtained from a catalogue of possible future earthquakes that is generated using earthquake models . the frequency and the physical characteristic of the potential earthquake , and the damage the earthquake will cause",
    "are estimated by the hazard and vulnerability modules respectively of the earthquake model .",
    "the yet provides a million distinct views of potential earthquakes that can occur in a year .",
    "each record in a yet is called a trial , denoted as @xmath1 , which represents a possible sequence of event occurrences for any given year .",
    "the sequence of events is defined by a set of tuples containing the i d of an event and the time - stamp of its occurrence in a trial , @xmath2 .",
    "the set is ordered by ascending time - stamp values . a typical yet",
    "may comprise one million trials , and each trial may have one thousand event time - stamp pairs .",
    "the yet is represented as @xmath3    where @xmath4 and @xmath5 .",
    "the small data required for aggregate risk analysis is the event loss tables , denoted as @xmath6 , which represents the collection of specific events and their corresponding losses .",
    "each record in an elt is denoted using event - loss pairs @xmath7 and a set of financial terms associated with the elt @xmath8 .",
    "a typical aggregate risk analysis may comprise ten thousand elts , each containing tens of thousands of event losses with exceptions even up to a few million event losses .",
    "the elts is represented as @xmath9    where @xmath10 .",
    "the metadata is defined as a portfolio , denoted as @xmath11 , which contains a group of programs , denoted as @xmath12 represented as @xmath13 , with @xmath14 .",
    "each program in turn covers a set of layers , denoted as @xmath15 , that cover a collection of elts under a set of financial terms of the layer . a single layer @xmath16 is composed of the set of elts @xmath17 , and two set of layer terms , denoted as @xmath18 and @xmath19 .",
    "a typical layer covers approximately three to thirty individual elts .",
    "the layer can be represented as @xmath20    where @xmath21 .    the algorithm ( line no . 1 - 17 shown in algorithm [ algorithm1 ] ) for aggregate analysis has two stages . in the first stage ,",
    "data is loaded into local memory what is referred to as the preprocessing stage in this paper . in this stage @xmath0 , @xmath6 and @xmath11 , are loaded into memory .",
    "populate @xmath22 using @xmath23    in the second stage , the four step simulation executed for each layer and for each trial in the yet is performed as shown below and the resulting year loss table ( @xmath22 ) is produced .    in the first step shown in line no . 6 in which each event of a trial its corresponding event loss in the set of elts associated with the layer is determined . in the second step shown in line nos . 7 - 9 , secondary uncertainty is applied to each loss value of the event - loss pair extracted from an elt .",
    "a set of contractual financial terms are then applied to the benefit of the layer . for this the losses for a specific event s net of financial terms @xmath24 are accumulated across all elts into a single event loss shown in line no .",
    "9 . in the third step in line",
    "11 the event loss for each event occurrence in the trial , combined across all elts associated with the layer , is subject to occurrence terms . in the fourth step in line no .",
    "12 aggregate terms are applied .",
    "the financial terms @xmath25 and @xmath26 applied on the loss values combined across all elts associated with the layer are occurrence and aggregate terms .",
    "two occurrence terms , namely ( i ) occurrence retention , denoted as @xmath27 , which is the retention or deductible of the insured for an individual occurrence loss , and ( ii ) occurrence limit , denoted as @xmath27 , which is the limit or coverage the insurer will pay for occurrence losses in excess of the retention are applied .",
    "occurrence terms are applicable to individual event occurrences independent of any other occurrences in the trial .",
    "the occurrence terms capture specific contractual properties of excess of loss @xcite treaties as they apply to individual event occurrences only . the event losses net of occurrence terms",
    "are then accumulated into a single aggregate loss for the given trial .",
    "the occurrence terms are applied as @xmath28 .",
    "two aggregate terms , namely ( i ) aggregate retention , denoted as @xmath29 , which is the retention or deductible of the insured for an annual cumulative loss , and ( ii ) aggregate limit , denoted as @xmath30 , which is the limit or coverage the insurer will pay for annual cumulative losses in excess of the aggregate retention are applied .",
    "aggregate terms are applied to the trial s aggregate loss for a layer . unlike occurrence terms",
    ", aggregate terms are applied to the cumulative sum of occurrence losses within a trial and thus the result depends on the sequence of prior events in the trial .",
    "this behaviour captures contractual properties as they apply to multiple event occurrences .",
    "the aggregate loss net of the aggregate terms is referred to as the trial loss or the year loss .",
    "the aggregate terms are applied as @xmath31 .",
    "the analysis generates loss values associated with each trial of the yet which populates the year loss table ( ylt ) .",
    "important risk metrics such as the probable maximum loss ( pml ) and the tail value - at - risk ( tvar ) which are used for both internal risk management and reporting to financial regulators and rating agencies can be derived from the output of the analysis .",
    "furthermore , these metrics flow into a final stage of the risk analytics pipeline , namely enterprise risk management , where liability , asset , and other forms of risks are combined and correlated to generate an enterprise wide view of risk .",
    "additional functions can be used to generate reports that will aid actuaries and decision makers , for example , reports presenting return period losses ( rpl ) .",
    "the simulations can also be extended for providing vital information required for disaster recovery and management .",
    "in this section , the cloud computing platform investigated for implementing sequential and parallel aggregate risk analysis is presented .",
    "the data structures chosen for representing the input and intermediate data to address memory bottlenecks and optimisations to improve the performance of the analysis are considered .",
    "an empirical study of the analysis both sequentially and in parallel on ( single and multiple core ) cpu and ( single and multiple ) gpu vms on the cloud are presented .",
    "aggregate risk analysis was performed on public vms available from the amazon elastic compute cloud ( ec2 ) and on private vms .",
    "table [ table1 ] shows the underlying hardware and specifications of the vms used for this research .",
    "the vms offered by amazon are referred to as instances .",
    "five types of instances are offered by amazon , namely the ( i ) general purpose , ( ii ) memory optimised , ( iii ) cluster compute , ( iv ) storage optimised , and ( v ) gpu instances are used for the analysis . only instances with at least 15 gb of ram are used ( this is a requirement for the analysis ) .",
    "the general purpose instances employed are the ` m1 ` and ` m3 ` instances , namely ` m1.xlarge ` , ` m3.xlarge ` and ` m3.2xlarge ` .",
    "the ` m1 ` instance is a vm of intel(r ) xeon(r ) cpu e5 - 2650 and ` m3 ` instances are vms abstracted over intel(r ) xeon(r ) cpu e5 - 2670 .",
    "each virtual cpu ( vcpu ) of the ` m3 ` instances is a hardware hyperthread on the underlying processor .",
    "the memory optimised instances employed are the ` m2 ` and ` cr1 ` instances , namely ` m2.xlarge ` , ` m2.2xlarge ` , ` m2.4xlarge ` and ` cr1.8xlarge ` .",
    "the ` m2 ` instances are vms of intel(r ) xeon(r ) cpu e5 - 2665 and the ` cr1 ` instance abstracts intel(r ) xeon(r ) cpu e5 - 2670 .",
    "each virtual cpu ( vcpu ) of the ` cr1 ` instance is a hardware hyperthread on the underlying processor .",
    "the compute optimised instance employed are the ` cc1 ` and ` cc2 ` instances , namely ` cc1.4xlarge ` and ` cc2.8xlarge ` .",
    "both ` cc1 ` and ` cc2 ` instances are abstraction of intel(r ) xeon(r ) cpu x5570 .",
    "each virtual cpu ( vcpu ) of the ` cc2 ` instance is a hardware hyperthread on the underlying processor .",
    "the storage optimised instance employed are the ` hi1 ` and ` hs1 ` instances , namely ` hi1.4xlarge ` and ` hs1.8xlarge ` .",
    "the ` hi1 ` instance abstracts intel(r ) xeon(r ) cpu e5620 and ` hs4 ` is a vm over the intel(r ) xeon(r ) cpu e5 - 2650 .",
    "the gpu instance employed is ` cg1.4xlarge ` backed by two intel(r )",
    "xeon(r ) cpu x5570 and two nvidia tesla m2050 gpus .",
    "each gpu consists 448 processor cores and 3 gb of total global memory yielding 2.625 gb of user available memory and a memory bandwidth of 148.4 gb / sec .",
    "two private vms ` vm1 ` and ` vm2 ` are employed . `",
    "vm1 ` is backed by intel(r ) xeon(r ) e5 - 2620 which is relatively old hardware when compared to the underlying processor for amazon instances . `",
    "vm2 ` is backed by intel(r ) xeon(r ) e5 - 2665 similar to the underlying cpu on the ` m2 ` instances . `",
    "vm2 ` is also supported by the same gpu on the amazon gpu instance .",
    "the vcpus of both vms are hardware hyperthreads on the underlying processor and the xen hypervisor is used .",
    "the ubuntu 13.10 cloud image is used on all vms .",
    "sequential and parallel versions of aggregate risk analysis were implemented .",
    "c++ was used for the sequential implementation , openmp was used in the parallel implementation on multiple core instances , and cuda was used for the sequential and parallel implementations on gpu instances . on the cpu instances ,",
    "both versions were compiled using the gnu compiler collection g++ 4.6 and optimised using `` -o3 ` ' ; the parallel implementation required ` -fopenmp ` during compilation for including the openmp directive .",
    "the nvidia cuda compiler ( nvcc 5.0 ) was used for compiling on the gpu instances .",
    "message passing interface ( mpi ) was employed and added nearly 10% to the execution times and was also found to lower the efficiency of the vms ; hence those results are not presented . however , for a multiple gpu instance a combination of mpi to communicate between the instances , openmp for exploiting parallelism of the virtual cores on each instance and cuda programming for exploiting the gpu were employed .",
    "p1.5 cm p0.8 cm p0.8 cm p2.4 cm p0.8 cm",
    "* instance type * & * no . of virtual cpus ( vcpu )",
    "* & * memory ( gib ) * & * processor type * & * clock speed ( ghz ) * +   + ` m1.xlarge ` & 4 & 15.0 & intel xeon e5 - 2650 & 2.00 + ` m2.xlarge ` & 2 & 17.1 & intel xeon e5 - 2665 & 2.40 + ` m2.2xlarge ` & 4 & 34.2 & intel xeon e5 - 2665 & 2.40 + ` m2.4xlarge ` & 8 & 68.4 & intel xeon e5 - 2665 & 2.40 + ` m3.xlarge ` & 4 & 15.0 & intel xeon e5 - 2670 & 2.60 + ` m3.2xlarge ` & 8 & 30.0 & intel xeon e5 - 2670 & 2.60 + ` cr1.4xlarge ` & 32 & 244.0 & intel xeon e5 - 2670 & 2.60 + ` cc1.4xlarge ` & 16 & 23.0 & intel xeon x5570 & 2.93 + ` cc2.8xlarge ` & 32 & 60.5 & intel xeon x5570 & 2.93 + ` hi1.4xlarge ` & 16 & 60.5 & intel xeon e5620 & 2.40 + ` hs1.4xlarge ` & 16 & 117.0 & intel xeon e5 - 2650 & 2.00 + & 16 & 22.5 & intel xeon x5570 & 2.93 + & 448 & 3.0 & nvidia tesla m2050 & 0.575 +     + ` vm1 ` & 12 & 128.0 & intel xeon e5 - 2620 & 2.00 + & 16 & 64.0 & intel xeon e5 - 2665 & 2.40 + & 448 & 3.0 & nvidia tesla m2050 & 0.575 +      in all the implementations each trial in the yet is executed using a single thread .",
    "all data required for the analysis is available as an amazon elastic block storage ( ebs ) volume which is attached onto an instance . nearly fifteen hours of continuous data transfer was required to the ebs volume .",
    "+    one important factor for obtaining good performance in the aggregate risk analysis algorithm is the selection of a data structure for representing elts .",
    "the elts function as dictionaries with key - value pairs requiring fast random key lookup . a sparse representation of elts covered by a layer using direct access tables was implemented .",
    "although fast lookups are obtained a sparse representation is at the expense of high memory utilisation .",
    "if a yet consists of 1,000,000 events and an elt consists of 10,000 event - loss pairs , then the direct access table would contain 1,000,000 event entries of which 990,000 events would have zero loss values . considering that one layer would cover fifteen elts in a typical analysis , 15 million event - loss pairs",
    "need to be generated in the memory of the instance of which 14,850,000 events have zero loss values .",
    "nevertheless a direct access table was employed in all implementations .",
    "alternate compact representations were not chosen for the following reasons : ( i ) a search operation is required to find an event - loss pair in a compact representation .",
    "sequential and binary search require @xmath32 and @xmath33 memory accesses respectively to locate an event - loss pair .",
    "even if a constant - time space - efficient hashing scheme requiring a constant number of memory accesses is adopted there is considerable implementation and run - time performance complexity .",
    "this overhead will be high on gpus with complex memory hierarchies consisting of global and shared memories .",
    "( ii ) to perform aggregate analysis on a yet of one million trials , each trial comprising one thousand events , and for a layer covering fifteen elts , there are fifteen billion event - loss pairs .",
    "direct access tables , although require large memory space , allow for the least number of memory accesses as each lookup in an elt requires only one memory access per search operation .    two data structure implementations of the elts were considered . in the first implementation ,",
    "each elt is an independent table , and therefore , in a read cycle , each thread independently looks up its events from the elts .",
    "all threads within a block access the same elt .",
    "by contrast , in the second implementation , the elts are combined as a single table .",
    "consequently , the threads then use the shared memory to load entire rows of the combined elts at a time .",
    "the latter implementation performs poorly compared to the former since for the threads to collectively load from the combined elt each thread must first write which event it requires .",
    "this results in additional memory overheads .",
    "on the cpu instance offering multiple virtual cores the entire data required for the analysis is processed in memory .",
    "the gpu implementation uses the gpu s global memory to store all of the required data structures . the parallel implementation on the gpu requires high memory transactions and leads to inefficient performance on the gpu platform . to surmount this challenge shared memory",
    "can be utilised over global memory .",
    "the algorithm is optimised in the following four ways .",
    "firstly , by chunking , which refers to processing a block of events of fixed size ( or chunk size ) for the efficient use of shared memory .",
    "chunking is more beneficial in the gpu implementation than in the cpu implementations . in the case of the gpu implementation",
    "looking up events in a trial and applying financial terms to losses at the event and layer level are chunked .",
    "further , the financial and layer terms are stored in the streaming multi - processor s constant memory .",
    "if the intermediate losses are represented in global memory , then while applying the financial terms at the event and layer level would require the global memory to be accessed and updated adding considerable memory overheads .",
    "the memory overhead is minimised by chunking when ( i ) the financial terms are applied , and ( ii ) reading events in a trial from the yet .",
    "chunking reduces the number of global memory update and global read operations .",
    "moreover , the benefits of data striding can also be used to improve speed - up .",
    "secondly , the implementation are optimised by loop unrolling , which refers to the replication of blocks of code included within for loops by the compiler to reduce the number of iterations performed by the for loop .",
    "this is done using the pragma directive .",
    "thirdly , the implementations on the cpu and gpu are optimised by using single precision operations when possible .",
    "read operations are faster using float variables as they are only half the size of a double variable .",
    "the performance of single precision operations tend to be approximately twice as fast as double precision operations .",
    "fourthly , in the case of the gpu a further optimisation can be achieved by migrating data from both shared and global memory to the kernel registry .",
    "the kernel registry has the lowest latency compared to all other forms of memory available in the gpu architecture .",
    "the results obtained from the experimental studies are presented in this section .",
    "all data required for the analysis is stored as an ebs volume and attached onto the instances considered in table [ table1 ] .",
    "figure [ graphset0 ] to figure [ graphset3 ] are results obtained on cpu instances ; the multi - core architecture of the instances are exploited in the parallel implementation .",
    "figure [ graph4 ] and figure [ graphset5 ] are results obtained on the gpu instance ; both single and multiple gpus are exploited in the parallel implementation . in all experiments ,",
    "the analysis uses as input a yet comprising one million trials , with each trial consisting of one thousand catastrophic events , and one portfolio with one program comprising one layer covering sixteen elts .",
    "the input parameters are realistic and were chosen based on industry - wide practices .",
    "+      figure [ graphset0 - 1 ] shows the graph plotted for the time taken for sequentially performing aggregate risk analysis on all instances shown in table [ table1 ] . under the general purpose instances ,",
    "the ` m1 ` is the slowest for performing the analysis requiring 565 seconds ; the ` m3 ` instance is over 37% faster than the ` m1 ` instance .",
    "the memory optimised instance ` cr1 ` is the fastest for performing the analysis requiring 295 seconds which is 37% faster than the memory optimised ` m2 ` instances .",
    "the difference in the performance obtained on storage optimised instances is just over 20% .",
    "cluster instances ` cc1 ` and ` cc2 ` perform comparably to the ` cg1 ` instance . the fastest sequential cpu performance on the cloud requires less than five minutes which is nearly 50% fastest than the slowest sequential performance on the cloud .",
    "private vms ` vm1 ` and ` vm2 ` have surprisingly good performance . `",
    "vm1 ` takes only 340 seconds which is nearly 40% faster than ` m1 ` instances .",
    "the ` vm2 ` vm completes the analysis in 288 seconds which is over 2% faster than the best performance on amazon .",
    "figure [ graphset0 - 2 ] shows the both the increase in the total time taken for the fastest sequential analysis on the cloud when the number of trials are varied between two hundred thousand and one million trials .",
    "the parallel implementation of the analysis on the cpu requires multiple threads to be executed on the instance which can be done in two ways .",
    "firstly , by executing a single thread per virtual core , and secondly , by executing multiple threads per core .    figure [ graphset1 ] shows the graphs obtained from the parallel implementation of the analysis when one thread is executed per virtual core on the instance .",
    "the graphs are organised based on the number of virtual cores on the instance .",
    "the instance with two virtual cores obtains nearly a 96% efficiency when two threads are employed ( figure [ graphset1 - 1 ] ) .",
    "instances with four virtual cores obtain upto 87.5% efficiency ( figure [ graphset1 - 2 ] ) .",
    "the two instances with eight virtual cores have an average efficiency of over 70% ( figure [ graphset1 - 3 ] ) .",
    "the storage optimised , ` cc1 ` and ` cg1 ` instances with sixteen cores each exhibit very little speedup and efficiency for more than eight cores ( figure [ graphset1 - 4 ] ) .",
    "surprisingly , there is no hardware acceleration obtained which is expected . beyond eight cores it would seem that the cost of hardware and the use of virtualised hardware on the sixteen core vms do not benefit the analysis .",
    "another reason is that as the number of cores are increased the bandwidth to access memory is not equally increased which is a limiting factor .",
    "similarly , in the case of thirty two core instances no acceleration is obtained beyond sixteen cores ( figure [ graphset1 - 5 ] ) .",
    "the fastest parallel execution on the cpu is obtained on the cluster compute instance ` cc2.8xlarge ` taking 27 seconds with a speedup of nearly 11x over the fastest sequential implementation .",
    "the performance of ` cr1.8xlarge ` is second to the ` cc2 ` instance requring 40 seconds when multiple threads are employed though it performs the sequential analysis the fastest .",
    "the private vms again outperform the public instances ( figure [ graphset1 - 6 ] ) . `",
    "vm1 ` takes 44 seconds achieving a speedup of 7.5x over its sequential performance and ` vm2 ` takes 22 seconds achieving a speedup of 13x over its sequential performance .",
    "figure [ graphset2 ] shows the graphs obtained from the parallel implementation of the analysis when multiple threads are executed on the instances . in all cases , multiple threads per amazon",
    "core do not provide any acceleration for the analysis . increasing the number of threads per core results in an increase in the communication cost between threads .",
    "the private vms ` vm1 ` and ` vm2 ` achieve a speedup of 9% and 5% respectively when multiple threads are employed per virtual core .",
    "+    figure [ graphset3 - 1 ] shows the graph plotted for the best time taken for performing parallel aggregate risk analysis on all instances shown in table [ table1 ] . under the general purpose instances ,",
    "though the ` m1 ` instance is the slowest for performing the sequential analysis and for parallel analysis the ` m2.xlarge ` is the slowest requiring 240 seconds .",
    "virtual core acceleration is achieved on the ` m1 ` instance which is over 1.5x faster than ` m2.xlarge ` .",
    "the ` m3.2xlarge ` is nearly 2 times faster than ` m3.xlarge ` and ` m1.xlarge ` .",
    "the cluster instance ` cc2 ` followed by ` cr1 ` are the fastest requiring 27 seconds and 40 seconds respectively .",
    "hence upto a 21x speedup is obtained for parallel analysis by exploiting the multi - core architecture over the sequential analysis and upto a 9x speedup over the slowest parallel analysis . again , private vms outperform public instances . the best performance of of ` vm2 ` is 21 seconds using multiple threads which is 22% faster than the best performance achieved by the ` cc2 ` instance . similarly , ` vm1 ` takes 38 seconds for the analysis on multiple threads which is 5% faster than the second best performance by ` cr1 ` instances on public instances .",
    "figure [ graphset3 - 2 ] shows the increase in the total time taken for the fastest parallel analysis on the cloud when the number of trials are varied between two hundred thousand and one million trials .",
    "+   +      single and multiple gpu instances ( ` cg1.4xlarge ` ) are considered for risk analysis on the cloud .",
    "cuda provides an abstraction over the streaming multi - processors of the gpu , referred to as a cuda block . unlike the parallel implementations on the cpu instance an additional parameter that needs to be considered in the gpu implementations is the number of threads executed per cuda block . to represent 1,000,000 trials of the analysis on the gpu instance consider each trial",
    "is executed on one thread .",
    "if 128 threads are executed on one streaming multi - processor there will be approximately 7813 blocks which need to be executed on 14 streaming multi - processors ; each streaming multi - processor will therefore need to execute 558 blocks .",
    "all threads executed on a streaming multi - processor share fixed allocations of shared and constant memory .",
    "therefore , there is a trade - off for optimal performance ; each thread can access larger amounts of shared and constant memory if there are fewer threads per block , but then the global memory will required to be accessed more resulting in increased global memory overheads .",
    "figure [ graph4 ] shows the time taken for parallel risk analysis on a single gpu instance when the number of threads per cuda block are varied between 1 and 512 .",
    "at least 16 threads per block are required to achieve performance comparable to the best parallel implementation which is noted on ` cc2.8xlarge ` instance . to exploit the full potential of hardware acceleration offered by gpus",
    "at least 64 threads are required .",
    "an improvement in the performance is observed with 256 threads per block beyond which performance starts to diminish .",
    "the best time for performing the analysis on a single gpu is 19.93 seconds which is around 15x faster than the best sequential performance on the cpu , nearly 1.4x faster than the best multiple core performance on the cpu , and over 6x faster than the sequential performance on a gpu . on the private vm ` vm2 ` takes only 16.86 seconds .",
    "this is nearly 16% faster than the gpu on the public instance .",
    "the performance of the analysis on multiple gpu instances is shown in figure [ graphset5 - 1 ] . in the multiple gpu implementation",
    "the workload for the analysis is decomposed and made available to the multiple instances that employ gpus .",
    "each cpu thread schedules the workload on the gpus .",
    "time taken for the analysis on four amazon gpu instances is 5.024 seconds which is approximately 3.97 times faster than employing a single gpu with close to 97% efficiency .",
    "compared to the sequential implementation on a single gpu a speedup of over 24x is achieved when multiple gpu instances are used . on the other hand ` vm2 ` takes only 4.238 seconds which is 16% faster than the multiple gpus on the public instance .",
    "figure [ graphset5 - 2 ] shows the performance of the analysis on four gpus when the number of threads per block is varied from 16 to 64 .",
    "experiments could not be pursued beyond 64 threads per block due to the limitation on the block size the shared memory can use .",
    "the best performance of 5.024 seconds on the public vm and 4.2375 seconds on the private vm is achieved when the number of threads per block is 32 ; the block size is the same as the warp size of the gpu , therefore , an entire block of threads can be swapped when high latency operations occur . increasing the number of threads per block",
    "does not improve the performance since there is shared memory overflow .",
    "+      the experimental studies indicate that the public clouds are a suitable platform for accommodating risk simulations . the data , memory and computational requirements can be met on the cloud vms .",
    "risk simulation can be accelerated on the public cloud although the simulations do not scale well over the virtual cores of the instances ; for example , for thirty two core instances no acceleration is achieved beyond sixteen cores .",
    "this results in wasted computational time per dollar spent on the simulation .",
    "hence , maximum performance can not be achieved thereby not fully exploiting the potential of the public cloud .",
    "nevertheless , a 60x speedup is achieved on public instances over a baseline implementation .",
    "interestingly , the private vms are faster than the public instances . for example , the sequential cpu implementation , parallel cpu implementation and the parallel gpu implementation on private vms are up to 40% , 22% and 16% faster than the best performance achieved on public instances .",
    "the cloud is a potential platform for performing ad hoc risk simulations important to financial applications .",
    "scalable and on - demand resources of the cloud are attractive for running ad hoc simulations and for meeting their data , memory and computational requirements . the research reported in this paper",
    "was motivated towards experimentally verifying whether clouds are ready to accelerate financial simulations . a typical application employed in the financial industry , namely aggregate risk analysis , was developed and deployed on a variety of cloud vms .",
    "the implementation exploited parallelism to accelerate the application and efficient management of data and memory to accommodate the application on the cloud .",
    "the experimental results indicate that the application can be accommodated to run on the cloud and an acceleration of up to 60x over a baseline implementation can be obtained with hardware accelerators on the cloud .",
    "nevertheless , there is poor efficiency in the acceleration achieved highlighting the inability to harness the full potential of all available compute cores resulting in wasted computational performance .",
    "it is noted that the private vms perform better than the public vms .",
    "migrating financial applications onto the cloud is viable since the cloud provides a suitable platform to accommodate the computational , data and memory demands of ad hoc simulations .",
    "this is of significant benefit to the financial industry as well as its associated industries since the scalability and availability of resources on an on - demand basis reduce maintenance costs .",
    "however , while acceleration was achieved for the simulation , in our experience it could not be run most efficiently on the public cloud since there was wasted computational time for every dollar spent .",
    "m. showerman , j. enos , a. pant , v. kindratenko , c. steffen , r. pennington and w. -m .",
    "hwu , `` qp : a heterogeneous multi - accelerator cluster , '' proceedings of the 10th lci international conference on high - performance clustered computing , 2009 .",
    "d. kondo , b. javadi , p. malecot , f. cappello and d. p. anderson , `` cost - benefit analysis of cloud computing versus desktop grids , '' proceedings of the ieee international symposium on parallel and distributed processing , 2009 .",
    "m. armbrust , a. fox , r. griffith , a. d. joseph , r. katz , a. konwinski , g. lee , d. patterson , a. rabkin , i. stoica and m. zaharia , `` a view of cloud computing , '' communications of the acm , vol .",
    "53 , issue 4 , april 2010 , pp .",
    "50 - 58 .",
    "a. srinivasan , `` parallel and distributed computing issues in pricing financial derivatives through quasi monte carlo , '' proceedings of the international parallel and distributed processing symposium , 2001 .",
    "k. huang and r. k. thulasiram , `` parallel algorithm for pricing american asian options with multi - dimensional assets , '' proceedings of the 19th international symposium on high performance computing symposium , 2005 , pp .",
    "177 - 185 .",
    "s. weston , j. -t .",
    "marin , j. spooner , o. pell and o. mencer , `` accelerating the computation of portfolios of tranched credit derivatives , '' proceedings of workshop on high performance computational finance , 2010 .",
    "d. m. dang , c. c. christara and k. r. jackson , `` an efficient gpu - based parallel algorithm for pricing multi - asset american options , '' concurrency and computation : practice and experience , vol .",
    "24 , no . 8 , 2012 , pp . 849 - 866 .",
    "d. cummins , c. lewis and richard phillips , `` pricing excess - of - loss reinsurance contracts against catastrophic loss , '' the financing of catastrophe risk , editor : k. a. froot , university of chicago press , 1999 , pp ."
  ],
  "abstract_text": [
    "<S> applications employed in the financial services industry to capture and estimate a variety of risk metrics are underpinned by stochastic simulations which are data , memory and computationally intensive . </S>",
    "<S> many of these simulations are routinely performed on production - based computing systems . </S>",
    "<S> ad hoc simulations in addition to routine simulations are required to obtain up - to - date views of risk metrics . </S>",
    "<S> such simulations are currently not performed as they can not be accommodated on production clusters , which are typically over committed resources . </S>",
    "<S> scalable , on - demand and pay - as - you go virtual machines ( vms ) offered by the cloud are a potential platform to satisfy the data , memory and computational constraints of the simulation . </S>",
    "<S> however , `` are clouds ready to accelerate ad hoc financial simulations ? ''    </S>",
    "<S> the research reported in this paper aims to experimentally verify this question by developing and deploying an important financial simulation , referred to as ` aggregate risk analysis ' on the cloud . </S>",
    "<S> parallel techniques to improve efficiency and performance of the simulations are explored . </S>",
    "<S> challenges such as accommodating large input data on limited memory vms and rapidly processing data for real - time use are surmounted . </S>",
    "<S> the key result of this investigation is that aggregate risk analysis can be accommodated on cloud vms . </S>",
    "<S> acceleration of up to 24x using multiple hardware accelerators over the implementation on a single accelerator , 6x over a multiple core implementation and approximately 60x over a baseline implementation was achieved on the cloud . </S>",
    "<S> however , computational time is wasted for every dollar spent on the cloud due to poor acceleration over multiple virtual cores . </S>",
    "<S> interestingly , private vms can offer better performance than public vms on comparable underlying hardware .    </S>",
    "<S> cloud computing ; heterogeneous computing ; aggregate risk analysis ; financial risk ; risk simulation </S>"
  ]
}