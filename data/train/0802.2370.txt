{
  "article_text": [
    "this paper introduces quanfruit v1.1 , a java application available@xcite for free .",
    "( source code included in the distribution . ) recently , farhi - goldstone - gutmann ( fgg ) wrote a paper@xcite that proposes a quantum algorithm for evaluating nand formulas .",
    "quanfruit outputs a quantum circuit for the ffg algorithm .",
    "we say a unitary operator acting on a set of qubits has been compiled if it has been expressed as a seo ( sequence of elementary operations , like cnots and single - qubit operations ) .",
    "seo s are often represented as quantum circuits .",
    "there exist software ( quantum compilers ) like qubiter@xcite for compiling arbitrary unitary operators ( operators that have no a priori known structure ) .",
    "quanfruit is a special purpose quantum compiler .",
    "it is special purpose in the sense that it can only compile unitary operators that have a very definite , special structure .",
    "the quanfruit application is part of a suite of java applications called quansuite .",
    "quansuite applications are all based on a common class library called qwalk .",
    "each quansuite application compiles a different kind of quantum evolution operator .",
    "the applications output a quantum circuit that equals the input evolution operator .",
    "we have introduced 6 other quansuite applications in 2 earlier papers . ref.@xcite",
    "introduced quantree and quanlin .",
    "ref.@xcite introduced quanfou , quanglue , quanoracle , and quanshi .",
    "quanfruit calls methods from these 6 previous applications , so it may be viewed as a composite of them .    before reading this paper ,",
    "the reader should read refs.@xcite and @xcite .",
    "many explanations in refs.@xcite and @xcite still apply to this paper .",
    "rather than repeating such explanations in this paper , the reader will be frequently referred to refs.@xcite and @xcite .",
    "the goal of all quansuite applications , including quanfruit , is to compile an input evolution operator @xmath0 .",
    "@xmath0 can be specified either directly ( e.g. in quanfou , quanshi ) , or by giving a hamiltonian @xmath1 such that @xmath2 ( e.g. in quanglue and quanoracle ) .",
    "the standard definition of the evolution operator in quantum mechanics is @xmath3 , where @xmath4 is time and @xmath1 is a hamiltonian . throughout this paper",
    ", we will set @xmath5",
    "so @xmath2 .",
    "if @xmath1 is proportional to a coupling constant @xmath6 , reference to time can be restored easily by replacing the symbol @xmath6 by @xmath7 , and the symbol @xmath1 by @xmath8 .",
    "the input evolution operator for quanfruit is @xmath9 , where    h_fruit = .",
    "@xmath10 where @xmath11 for some positive integer @xmath12 .",
    "@xmath13 is proportional to the incidence matrix for a line graph , where the edges of the graph connect states that are consecutive in a gray order .",
    "for example , for @xmath14 , the graph of fig.[fig - line - graph ] yields : h_line = g    c|c|c|c|c|c|c|c|c| & & & & & & & & + & 0&1 & & & & & & + & 1&0 & & 1 & & & & + & & & 0&1 & & & 1 & + & & 1&1&0 & & & & + & & & & & 0&1 & & + & & & & & 1&0 & & 1 + & & & 1 & & & & 0&1 + & & & & & & 1&1&0 +    , [ eq - h - line ] where @xmath6 is a real number that we will call the * coupling constant*.        @xmath15 where @xmath16 for some positive integer @xmath17 .",
    "@xmath18 is proportional to the incidence matrix for a balanced - binary tree graph .",
    "for example , for @xmath19 , the graph of fig.[fig - tree - graph ] yields : h_tree = g    c|c|c|c|c|c|c|c|c| & & & & & & & & + & & & & & & & & + & & & 1&1 & & & & + & & 1 & & & 1&1 & & + & & 1 & & & & & 1&1 + & & & 1 & & & & & + & & & 1 & & & & & + & & & & 1 & & & & + & & & & 1 & & & & +    , [ eq - h - tr ] where @xmath6 is the same coupling constant as before .    @xmath20 .",
    "in fact ,    h_glue = g .",
    "here @xmath21 labels the god state of the tree , the one with children but no parents .",
    "( @xmath22 labels the dud node ) we will call @xmath23 the * line door*. if @xmath24 , then the tree is connected to a tail of states . for @xmath14 , from fig.[fig - line - graph ] , if @xmath25 , then the tree is connected to the midpoint of the line of states (  runway \" ) .",
    "the number of leaves in the tree is half the number of nodes in the tree : @xmath26 . also , @xmath27 for some positive integer @xmath28 .",
    "@xmath29 . in fact ,    h_oracle = g , where @xmath30 are the inputs to the nand formula .",
    "the dimension of the matrix @xmath31 is not generally a power of two . to represent it as a quantum circuit",
    ", we need to extend it to @xmath32 , where = 2^ , = \\{n : n_s , line + n_s , tree2^n } .",
    "[ eq - nb ]    define h_glue = h_glue + h_glue^ , h_ora = h_ora + h_ora^. [ eq - htoh ] ( this last equation is fine as an operator statement , but as a matrix statement , @xmath33 and @xmath34 must be  padded \" with zeros to make the equation true . by `` padding a matrix with zeros '' , we mean embedding it in a larger matrix , the new entries being zeros . )",
    "one can split @xmath31 into two parts , which we call the * bulk hamiltonian * @xmath35 and the * boundary corrections hamiltonian * @xmath36 :    h_fruit = h_bulk + h_corr , where    h_bulk = h_line + h_tree , h_corr = h_glue + h_ora .",
    "( again , this last equation requires zero padding if considered a matrix equation . ) note that @xmath37=0 $ ] and @xmath38=0 $ ] .    for @xmath39 ,",
    "if @xmath40 , we say @xmath41 * approximates ( or is an approximant ) of order * @xmath42 for @xmath0 .    given an approximant @xmath43 of @xmath0 , and some @xmath44 , one can approximate @xmath0 by @xmath45 .",
    "we will refer to this as * trotter s trick * , and to @xmath46 as the * number of trots*.    for @xmath47 , quanfruit approximates @xmath48 with a suzuki approximant of order @xmath49 that is derived in ref.@xcite .",
    "quanfruit also applies the trotter trick with @xmath50 trots to the @xmath47 approximant of @xmath48 .    for @xmath51",
    ", quanfruit always approximates @xmath52 with an approximant of order 3 , that is derived in ref.@xcite .",
    "quanfruit also applies the trotter trick with @xmath53 trots to the @xmath51 approximant of @xmath52 .",
    "ref.@xcite gives exact ( to numerical precision ) compilations of the glue and oracle parts of @xmath54 .",
    "quanfruit uses these compilations , so the order of the suzuki ( or other ) approximant and the number of trots do not arise in quanfruit , for either the glue or the oracle .    for @xmath55",
    ", quanfruit also approximates @xmath56 with a suzuki approximant of order @xmath57 . recall that @xmath58 for @xmath59 is the second order suzuki approximant , and higher order ones are defined recursively from this one .",
    "thus , all suzuki approximants are specified by giving two functions of @xmath4 , @xmath60 and @xmath61 . to get a  meta \" suzuki approximant , we set @xmath62 and @xmath63 .",
    "quanfruit also applies the trotter trick with @xmath64 trots to the @xmath65 approximant of @xmath56 .",
    "fig.[fig - qfruit - main ] shows the * control panel * for quanfruit . this is the main and only window of the application .",
    "this window is open if and only if the application is running",
    ".        the control panel allows you to enter the following inputs :    file prefix : : :    prefix to the 3 output files that are written when you press the    * write files * button .",
    "for example , if you insert test in this text    field , the following 3 files will be written :    +    * test_qfru_log.txt    * test_qfru_eng.txt    * test_qfru_pic.txt line : number of qubits : : :    the parameter @xmath12 defined above .",
    "tree : number of qubits : : :    the parameter @xmath17 defined above .",
    "coupling constant : : :    the parameter @xmath66 defined above . line door : : :    the parameter @xmath23 defined above . bands : : :    you must enter here an even number of integers separated by any    non - integer , non - white space symbols .",
    "say you enter    @xmath67 . if    @xmath30 for @xmath68 are as    defined above , then @xmath69 iff @xmath70 .",
    "each set    @xmath71 is a  band \" . if @xmath72 , the    band has a single element .",
    "quanfruit checks that    @xmath73 , @xmath74 , and    @xmath75 for all @xmath76 .",
    "it also checks    that @xmath77 .",
    "( if    @xmath78 , bands @xmath79 and    @xmath76 can be merged . if    @xmath80 , bands @xmath79    and @xmath76 overlap . )",
    "line : number of trots : : :    the parameter @xmath81 defined above . line : order of approximant : : :    the parameter @xmath82 defined above . tree : number of trots : : :    the parameter @xmath83 defined above . tree : order of approximant : : :    this parameter is always 3 .",
    "meta : number of trots : : :    the parameter @xmath84 defined above .",
    "meta : order of approximant : : :    the parameter @xmath85 defined above .    the control panel displays the following outputs :    number of qubits : : :    the parameter @xmath86 defined by eq.([eq - nb ] ) .",
    "number of elementary operations : : :    the number of elementary operations in the output quantum circuit .",
    "if    there are no loops , this is the number of lines in the english file ,    which equals the number of lines in the picture file .",
    "when there are    loops , the  loop k reps:@xmath46 \" and  next k \" lines are not    counted , whereas the lines between  loop k reps:@xmath46 \" and     next k \" are counted @xmath46 times .",
    "error : : :    the distance in the frobenius norm between the input evolution    operator and the output quantum circuit ( i.e. , the seo given in the    english file ) .",
    "for a nice review of matrix norms , see ref.@xcite . for    any matrix @xmath87 ,",
    "its frobenius norm is    defined as @xmath88 .",
    "another common matrix norm is the 2-norm .",
    "the 2-norm    @xmath89 of @xmath90 equals the largest singular    value of @xmath90 .",
    "the frobenius and 2-norm of @xmath90    are related by@xcite : @xmath91 .",
    "message : : :    a message appears in this text field if you press * write files * with a    bad input . the message tries to explain the mistake in the input .",
    "pressing the * write files * button of the control panel of quanfruit generates 3 files ( log , english , picture ) .",
    "these files are analogous to their namesakes for quantree , quanlin and other quansuite applications .",
    "ref.@xcite explains how to interpret them .",
    "the quansuite applications , based on the qwalk class library , exhibit some code innovations that you will find very helpful . hopefully , these innovations will become commonplace in future quantum computer software .    *",
    "* qwalk class library does most of the work in all quansuite applications : * look in the source folder for any of the quansuite applications .",
    "you ll find that it contains only 3 or 4 classes .",
    "most of the classes are in the source folder for qwalk . that s because most of the work is done by the qwalk class library , which is independent of the quansuite application .",
    "* * reusability of seo writers : * look at the class fruitseo_writer in the source folder for quanfruit .",
    "you ll find that fruitseo_writer utilizes the methods glueseo_writer ( ) , oracleseo_writer ( ) , treeseo_writer ( ) , lineseo_writer ( ) , and shiftseo_writer ( ) .",
    "thus , fruitseo_writer delegates its seo writing to methods from the quansuite applications : quanglue , quanoracle , quantree , quanlin and quanshi .",
    "in fact , quanfruit can be viewed as a composite of these simpler quansuite applications .",
    "this reusability of seo writers is made possible by the novel technique described in appendix [ app - pad ] . *",
    "* nested loops : * the english and picture files of quansuite applications can have loops within loops .",
    "this makes the english and picture files shorter , without loss of information .",
    "however , if you want to multiply out all the operations in an english file ( this is what the class seo_reader in qwalk does ) , then having nested loops makes this task more difficult .",
    "seo_reader of qwalk is sophisticated enough to understand nested loops . *",
    "* painless object oriented implementation of suzuki approximants and trotter s trick : * higher order suzuki approximants can be implemented painlessly by using the classes : qwalk / src / suzfunctions and qwalk / src / suzwriter .",
    "see the class quanlin / src / lineseo_writer for an example of how it s done .",
    "essentially , all you have to do is to override the two abstract methods in qwalk / src / suzfunctions .",
    "+ trotter s trick can also be easily implemented in a quansuite application , by using loop and next lines in the english file .",
    "see the write ( ) method of quanlin / src / lineseo_writer for an example .",
    "suppose we know how to compile @xmath93 .",
    "is it possible to use this compilation to compile @xmath94 , where @xmath95 and @xmath96 are square matrices of zeros ?",
    "the answer is yes , as we show next .      _",
    "_ s_s & = & + & = & ( _ b-1 ) ( _ b-2 ) ( + 1 ) ( ) h _ . as usual , @xmath102 .",
    "we will say that @xmath1 has been padded with @xmath92 s to obtain @xmath101 .",
    "now let @xmath103 be the unitary operation that shifts state @xmath104 to @xmath105 , with @xmath106 .",
    "the application quanshi gives a compilation of @xmath103 .",
    "using @xmath103 , one can define a matrix @xmath107 from @xmath101 as follows :"
  ],
  "abstract_text": [
    "<S> this paper introduces quanfruit v1.1 , a java application available for free . </S>",
    "<S> ( source code included in the distribution . ) recently , farhi - goldstone - gutmann ( fgg ) wrote a paper arxiv : quant - ph/0702144 that proposes a quantum algorithm for evaluating nand formulas . </S>",
    "<S> quanfruit outputs a quantum circuit for the ffg algorithm . </S>"
  ]
}