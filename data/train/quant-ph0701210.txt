{
  "article_text": [
    "based on our experience gained in recent years in monte carlo wave - function ( mcwf ) simulations of simple moving - particle cavity qed ( cqed ) systems performed with low - level codes @xcite , we have decided to summarise our know - how on the problem by developing a high - level framework for such simulations .",
    "the framework is highly modular and therefore easy to maintain , relies solely on standard c++ programming techniques and therefore portable , and provides an interface which is easy to use even for those not so familiar with the theoretical models of moving - particle cqed ( @xcite is a review of the theory involved ) .",
    "meanwhile , thanks to the optimisation mechanisms of c++ compilers , we are safe to claim not to have noticeably lost in efficiency as compared to our previous low - level codes .",
    "potentially , the framework is of good use for the quantum optics community .",
    "simulating moving quantum particles presents many non - trivial numerical problems especially of stability @xcite .",
    "hence , in the framework very careful numerics is needed . accordingly , as discussed in app .",
    "[ sec : method ] , we use a slightly modified version of the original mcwf algorithm ( cf eg @xcite ) involving the use of adaptive step - size ode steppers and interaction picture .    at present",
    "the framework consists of three parts : the first part is the mcwf driver ( sec .",
    "[ sec : trajectory ] ) , which has only an abstract view on the open system to be simulated , represented by an abstract class .",
    "this abstract class stands at the origin of a class hierarchy consisting the second part of the framework ( sec .",
    "[ sec : os ] ) .",
    "eg a system can be an element system or a composite system containing several element systems .",
    "the aim of the hierarchy is to provide the user with tools to build composite systems from several elements , and to facilitate the implementation of such elements .",
    "clearly , the first two parts stand quite independently of each other and are also generally applicable . as the third part of the framework",
    "several elements are provided at the lower levels of the hierarchy intended as building blocks for systems of moving - particle cqed ( sec .",
    "[ sec : cqed ] ) .",
    "the building blocks are pumped moving particles , pumped lossy cavity modes , pumped two - level atoms , and interactions between them eg interaction between a cavity mode and a pumped particle moving along or orthogonal to it .",
    "this third part is independent of the first part , but not , of course , of the second part , the elements stemming from the same class hierarchy .    for a given system on the highest level",
    "the user is required to write a simple driver program in c++ in which he / she defines the system to be simulated using the elements ( selecting a number of free elements and interactions between them ) and passes this system to the mcwf driver , which then evolves the system on a number of monte carlo trajectories .",
    "a description of the user interface and example drivers are given in sec .",
    "[ sec : drivers ] .",
    "note that our approach here is quite different from the one presented in @xcite .",
    "that approach is built on a hierarchy of classes representing hilbert space operators and state vectors , and the application of operators on vectors is defined .",
    "operators acting on complex systems can then be built from elementary operators using direct product .",
    "a similar idea is implemented in the popular quantum optics toolbox for matlab @xcite .",
    "consider for a moment how this approach could be applied for moving particles : in this case dealing with both operators @xmath0 and @xmath1 can not be avoided .",
    "a moving - particle state vector can be stored in either representation ( the state - vector object stores in which representation it is at the moment ) , and when the other operator is to be applied , an in - place fast fourier transformation ( fft ) is needed . however , as our experience shows , such a transformation always has numerical errors , which can disturb careful statistics .    in our approach",
    "the user is provided with a much higher level interface , our classes representing whole physical systems instead of hilbert space operators .",
    "this is certainly at the cost of flexibility , but our framework does not aim at such generality as the above , since it has been developed with a more concrete problem in mind , in particular , cqed with moving particles . for this given problem",
    "we consider our approach as more efficient than the above , since , as we will show in sec .",
    "[ sec : cqed ] we can completely avoid in - place fft .    in the following we first present the highest level of the framework , that is , the user interface , so that the reader can immediately get a feeling about our approach . also , by reading sec .",
    "[ sec : drivers ] the reader can in principle already use the framework , so this can be considered as a short write - up .",
    "this is followed by the long write - up , the presentation of the different parts of the framework .",
    "we include sections entitled `` desideratum '' in which we indicate features that would logically belong to the given part , but are as yet missing because we have not yet needed them .",
    "these may easily be implemented in the future .    finally , in sec .",
    "[ sec : testruns ] , we summarise our test runs performed with the framework . in the appendices we describe our version of the mcwf method and the most important modules used in the framework .",
    "the source code contains more than 60 source files and a totality of about 4000 lines , and is distributed in ` tgz ` format .",
    "it can be get either from sourceforge.net at http://sourceforge.net/projects/cppqed/ or directly from the authors .",
    "the framework has been tested under debian gnu / linux and redhat linux operating systems , in both cases the gnu c++ compiler has been used for compilation .",
    ".classes constituting the user interface of the framework , with the set of elements extendable in the future at will .",
    "next to each class their most important parameters are listed , these are explained in the text .",
    "the ` interaction`s take references to their subsystems as parameters  ` cavity ` is an instant of class ` ( pumped)lossymode ` , ` ( pumped)particle ` one of ` ( pumped)movingparticle ` , while ` particlecavity ` one of ` movingparticlecavity ` cf sec .",
    "[ sec : mpc ] . [ cols= \" < , < \" , ]"
  ],
  "abstract_text": [
    "<S> we present a framework for efficiently performing monte carlo wave - function simulations in cavity qed with moving particles . </S>",
    "<S> it relies heavily on the object - oriented programming paradigm as realised in c++ , and is extensible and applicable for simulating open interacting quantum dynamics in general . </S>",
    "<S> the user is provided with a number of `` elements '' , eg pumped moving particles , pumped lossy cavity modes , and various interactions to compose complex interacting systems , which contain several particles moving in electromagnetic fields of various configurations , and perform wave - function simulations on such systems . </S>",
    "<S> a number of tools are provided to facilitate the implementation of new elements . </S>"
  ]
}