{
  "article_text": [
    "let us recall here some basic facts about the relationship between 3-edge colorings ( also called tait colorings ) and hamiltonian cycles in cubic graphs ; the details can be found in @xcite . by a _",
    "cubic graph _ we understand a connected 3-regular multi - graph that is allowed to have double edges , but no loops ( obviously , a graph with loops can not have either edge colorings or hamiltonian cycles ) . consider a set of three distinct elements called `` colors '' ( say , @xmath0 , where @xmath1 stands for `` red '' , @xmath2  for `` green '' , and @xmath3  for `` blue '' ) .",
    "3-edge coloring _ , or _ tait coloring _ is an assignment of a color to every edge such that the edges incident with each vertex have distinct colors .",
    "every 3-edge coloring of a cubic graph @xmath4 gives rise to three distinct 2-factors ( that is , 2-regular spanning subgraphs ) of @xmath4 called _ tait cycles _ : each tait cycle is the union of edges painted in two colors out of the three ( the complement to a tait cycle is a perfect matching  the union of disjoint edges painted in the third color ) .",
    "if a cubic graph @xmath4 has a hamiltonian cycle , then @xmath4 also admits a 3-edge coloring that is unique up to a permutation of colors : just paint the hamiltonian cycle ( which always has even length ) in two intermittent colors , and paint the complement perfect matching in the remaining third color .",
    "the above connection between 3-edge colorings and hamiltonian cycles suggests the following method of enumerating ( and actually finding ) all the hamiltonian cycles in a cubic graph :    1 .",
    "find all 3-edge colorings ( tait colorings ) of a given cubic graph up to permutations of colors ; 2 .",
    "find all the corresponding 2-factors ( tait cycles ) ; 3 .",
    "check for connected 2-factors ( hamiltonian cycles ) .",
    "this procedure gives the complete list of hamiltonian cycles in a cubic graph .",
    "for the enumeration of 3-edge colorings we use an exhaustive backtracking algorithm that works in two runs . during the first run it dynamically separates all the vertices into two types : `` rigid '' ones",
    "( that admit a unique coloring of edges incident with them ) , and `` soft '' ones ( with exactly two possibilities of coloring the incident edges ) ; no backtracking is needed on this stage .",
    "the second run is the actual painting of edges : after it successfully colored the graph or was unable to complete the coloring , it returns to the last visited soft vertex and tries a different possibility .",
    "the details are explained in the next section .",
    "first we partition the set of vertices @xmath5 , of the graph @xmath4 into two disjoint subsets @xmath6 of rigid ( @xmath7 ) and soft ( @xmath8 ) vertices .",
    "we note that this partition is not canonical .",
    "initially we put @xmath9 and dynamically change their content .",
    "we also introduce a temporary set @xmath10 of _ unidentified _ vertices that we already visited , and an ordered list of colored edges @xmath11 .",
    "we label the vertices of @xmath4 by integers @xmath12 . for the vertex with number @xmath13",
    "we denote the numbers of adjacent vertices by @xmath14 . an edge connecting @xmath13 and @xmath15 we denote by @xmath16 $ ] .",
    "we start at the vertex @xmath17 and add it to the set @xmath7 of rigid vertices .",
    "we add the three edges @xmath18,\\,[0,n^0_1],\\,[0,n^0_2]$ ] incident with it to the list @xmath11 , and we add their endpoints @xmath19 to @xmath10 .",
    "now we check if any of the vertices in @xmath10 are the endpoints of at least two edges in @xmath11 . if this is the case , we move all such vertices from @xmath10 to @xmath7 , and for every such vertex we also add the remaining third edge incident to it to the set @xmath11 ( if it is not already there ) .",
    "we continue the above procedure until there is no vertex left in @xmath10 that is an endpoint of at least two edges in @xmath11 .",
    "now pick the vertex from @xmath10 with the smallest number , say @xmath13 , and move it into @xmath8 .",
    "note that @xmath13 is an endpoint of a single edge in the current set @xmath11 .",
    "next , we append to @xmath11 the two remaining edges incident with @xmath13 , add their endpoints to @xmath10 , and again check if any of the vertices in @xmath10 bound at least two edges in @xmath11 . if they do , such vertices are moved to @xmath7 , and the missing edges incident with these vertices are added to @xmath11 .",
    "otherwise , we pick a vertex from @xmath10 with the smallest number , move it to @xmath8 and repeat the procedure until @xmath10 becomes empty , or , equivalently , until @xmath11 coincides with @xmath20 . since @xmath4 is connected , this would mean that @xmath21 . setting @xmath22 and @xmath23",
    "we obtain the required partition .    the final list of edges @xmath11 provides the order in which we attempt to paint the edges of the graph .",
    "as above , we start at the vertex 0 and paint the edges @xmath18,\\,[0,n^0_1],\\,[0,n^0_2]$ ] incident with it in colors @xmath24 respectively . if the next edge in @xmath11 has a rigid vertex as its endpoint , then there is a unique color left for the remaining third edge incident with that vertex .",
    "if the next pair of edges is incident with a soft vertex , we choose one of the two options for painting these edges ( in case we visit this vertex for the first time ) . continuing this way we may successfully reach the end of the list @xmath11 and get a complete edge coloring that we save for our record .",
    "it may as well happen that the procedure ends prematurely when two edges incident to the same vertex are painted in the same color . in both cases we return in @xmath11 to the previous soft vertex that was visited only once , and start over painting edges in a different way . at the end",
    "we get the list of all possible tait colorings and check which of them produce connected tait cycles ( that is , hamiltonian cycles ) .    let us now illustrate this algorithm on a simple example .",
    "consider the graph @xmath4 on 8 vertices @xmath25 shown on fig .",
    "1 . we start with @xmath26 .",
    "the initial vertex @xmath17 is a rigid vertex , @xmath27 .",
    "add the edges @xmath28,[0,3],[0,7]$ ] to @xmath11 and the vertices @xmath29 to @xmath10 .",
    "none of these vertices is an endpoint of two edges in @xmath11 , so we remove the vertex 1 from @xmath10 , append it to @xmath8 , and add the edges @xmath30 $ ] and @xmath31 $ ] to @xmath11 . again , none of the vertices in @xmath10 is an endpoint of two edges in @xmath11 , so we move the vertex 2 to @xmath8 and add the edges @xmath32 $ ] and @xmath33 $ ] to @xmath11 . now",
    "the vertex 3 bounds two edges in @xmath11 , namely , @xmath34 $ ] and @xmath32 $ ] . we move it to @xmath7 ,",
    "add the edge @xmath35 $ ] to @xmath11 and the vertex 4 to @xmath7 .",
    "none of the vertices @xmath36 in @xmath10 bounds at least two edges , so we move the vertex 4 to @xmath8 and add the edges @xmath37 $ ] and @xmath38 $ ] to @xmath11 .",
    "we see that the vertices 5 and 7 become rigid , and so does the vertex 6 .",
    "thus , we get @xmath39 , and the ordered set of edges is @xmath40,[0,3],[0,7],[1,2],[1,6],[2,3],[2,5],[3,4],[4,5],[4,7],[5,6],[6,7]\\}$ ] .    let us start coloring the graph .",
    "we paint the edges @xmath28,[0,3],[0,7]$ ] in colors @xmath41 respectively .",
    "there are two possible ways of coloring the edges incident with the first soft vertex 1 .",
    "we first paint @xmath30 $ ] in color @xmath2 and @xmath31 $ ]  in color @xmath3 . at the next soft vertex 2",
    "we again have two options , and choose the first one of them  paint @xmath32 $ ] in color @xmath1 , and @xmath33 $ ]  in color @xmath3 .",
    "the edge @xmath35 $ ] incident with the rigid vertex 3 necessarily have color @xmath3 . at the last soft vertex 4 both possibilities of coloring the edges @xmath37,[4,7]$ ] lead to complete edge colorings of @xmath4 .",
    "now we return to the previous soft point 2 and paint@xmath32 $ ] in @xmath3 , and @xmath33 $ ]  in @xmath1 .",
    "this gives us one more tait coloring ( one of the options can not be completed ) .",
    "finally , returning to the first soft point 1 and painting the edges @xmath30,[1,6]$ ] in colors @xmath42 respectively , we get the last coloring .",
    "thus , there exist 4 distinct tait colorings of the graph @xmath4 ( up to permutations of colors ) listed in the following table :    [ cols= \" < , < , < , < , < \" , ]     the first one of these 4 edge colorings has no hamiltonian cycles associated with it , whereas the other three ones produce two hamiltonian cycles each . they are listed below ( we indicate in brackets the corresponding alternating colors ) :    @xmath43",
    "it is clear that the computational complexity of this algorithm is of order @xmath44 since the set of soft vertices @xmath45 depends on the ordering of vertices of @xmath4 , the complexity also depends on this ordering . to give an upper bound for @xmath46 for a simple graph without double edges we note that , every time we add two new edges to @xmath11 incident with a soft vertex , we encounter one of the three possibilities :    1 .",
    "both new endpoints belong to @xmath10 ; 2 .",
    "one new endpoint belongs to @xmath10 an one to @xmath7 ( the vertex from @xmath7 then gives rise to new vertices that are added to @xmath47 ) ; 3 .",
    "both new endpoints belong to @xmath7 .    in any case , every soft vertex gives rise to at least two new vertices in @xmath48 and the lower bound 2 is attained when the both endpoints of the edges incident with a soft vertex belong to @xmath49 thus , when the union @xmath50 becomes equal to @xmath5 for the first time , we have the inequality @xmath51 in particular , it implies that @xmath52 at this stage .",
    "let @xmath2 be the girth of @xmath4 ( that is , the length of the shortest cycle in @xmath4 ) .",
    "when we reach the stage @xmath53 , every new soft vertex gives rise to at least @xmath54 rigid vertices .",
    "this means that no more than @xmath55 vertices will be added to @xmath8 .",
    "therefore , in the case @xmath56 , i.e. , when @xmath4 is triangle free , the number of soft vertices @xmath57 as @xmath58 .",
    "thus , the speed of our algoritm is on a par with the fastest algoritms that find a single edge coloring or a single hamiltonian cycle in a cubic graph , or even better ( cf .",
    ", e.g. , @xcite ) .",
    "the absence of short cycles makes the algorithm even faster with complexity bounded from above by @xmath59 .",
    "( note that the presence of double edges does not slow down the algorithm because at least one of their two common endpoints is rigid . )",
    "it is instructive to compare the above complexity estimate with the results of @xcite .",
    "let @xmath60 $ ] denote the eigenvalues of the ( normalized ) adjacency matrix of a simple cubic graph @xmath4 .",
    "consider the mean@xmath61 and the variance @xmath62 of the exponents @xmath63 .",
    "for each fixed @xmath64 the points @xmath65 form clusters called _ filars _ that enjoy a fractal - like structure . from the results of @xcite combined with the above considerations it follows that the closer is the point @xmath65 to the origin , the faster works our algorithm for the corresponding graph .",
    "this algorithm was implemented in c++ code and compiled on a windows x86 machine ( pentium iv 3.40 ghz processor with 1 gb of ram ) using ccg gnu compiler ( the program code is given in appendix ) .",
    "a good benchmark for testing programs that search for a hamiltonian cycle is provided by the horton graph @xcite , displayed on fig .",
    "2 . it is a cubic bipartite graph on 96 vertices without hamiltonian cycles , but with many `` long '' cycles ( that is , cycles of length close to 96 ) .",
    "some programs choke when they reach such a long cycle , not being able to transform it into a hamiltonian one .",
    "our program completed the search in @xmath66 steps ( so that the actual complexity is of order @xmath67 ) .",
    "the process took 6336 sec .",
    "of machine time , found 143982592 tait colorings and no hamiltonian cycles .",
    "our program is an open source program and its ansi c++ code is available at the following address : @xmath68 ( we do not present it here because of its length ) .",
    "the code does not use any platform specific header files , and with minor modifications it can be compiled with essentially any c++ compiler that is not mentally challenged .",
    "* acknowledgement * we thank j.  filar for his interest in this work .",
    "the work of ve , sr was supported , in part , by the australian research council discovery grant dp0666632 .",
    "the work of pz was partially supported by the president of russian federation grant nsh - u329.2006.1 and by the russian foundation for basic research grant 05 - 01 - 00899 .",
    "tutte , w. t. _ graph theory_. cambridge univ . press , 1984 .",
    "eppstein , d. improved algorithms for 3-coloring , 3-edge - coloring , and constraint satisfaction , 12th acm - siam symp .",
    "discrete algorithms , washington , 2001 , 329337 .",
    "bondy , j. a. and murty , u. s. r. , _ graph theory with applications_. ny , north holland , 1976 .",
    "ejov , v. v. , filar , j. a. , lukas , s. k. and zograf , p.g .",
    "clustering of spectra and fractals of regular graphs .",
    "preprint math.co/0610742 ( to appear in jmaa ) ."
  ],
  "abstract_text": [
    "<S> we propose an effective algorithm that enumerates ( and actually finds ) all 3-edge colorings and hamiltonian cycles in a cubic graph . </S>",
    "<S> the idea is to make a preliminary run that separates the vertices into two types : `` rigid '' ( such that the edges incident to them admit a unique coloring ) and `` soft '' ones ( such that the edges incident to them admit two distinct colorings ) , and then to perform the coloring . </S>",
    "<S> the computational complexity of this algorithm is on a par with ( or even below ) the fastest known algorithms that find a single 3-edge coloring or a hamiltonian cycle for a cubic graph . </S>"
  ]
}