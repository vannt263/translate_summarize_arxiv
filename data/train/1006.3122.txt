{
  "article_text": [
    "rooted trees , and more generally digraphs , are widely used to represent evolutionary relationships in biology  @xcite .",
    "such a digraph typically has a set  @xmath1 of labelled leaves ( vertices of outdegree 0 ) which corresponds to the collection of present - day species under study .",
    "the arcs in the digraph are directed away from a single ` root ' vertex which represents the evolutionary ancestor of the species in  @xmath1 .",
    "the remaining vertices of the digraph are usually unlabelled ; they represent hypothetical ancestral species , and an arc from  @xmath2 to  @xmath3 indicates that ancestral species @xmath2 contributes directly to the genetic makeup of  @xmath3 .",
    "the simplest phylogenetic networks are trees , and these have traditionally been used when evolution is described purely by the formation of each new species from an existing one .",
    "however , processes of reticulate evolution ( in particular the formation of hybrid species , and lateral gene transfer ) mean that a new species can have genetic contributions from more than one ancestral species , which is the reason digraphs are increasingly seen as a desirable model in molecular systematics  @xcite . more precisely , if one considers the evolution of a particular gene , its evolution will generally be described by a tree , but reticulate processes mean that different genes can have different evolutionary tree structures , that can only be adequately reconciled by fitting them into a phylogenetic network .",
    "this raises a fundamental question in computational phylogenetics : given a tree and a phylogenetic network , both with leaf set  @xmath1 , is there an efficient algorithm to determine whether the tree ` fits inside ' the network ( in a sense we define precisely below ) ?",
    "in general this question is np - hard , even for certain restricted classes of phylogenetic networks .",
    "however , we show that , for particular classes , there exist polynomial - time algorithms which also provide a recipe for finding an explicit embedding of the tree in the phylogenetic network . in addition , we consider the computational complexity of deciding whether a subset of  @xmath1 is a cluster of some tree that sits inside a given network .",
    "the structure of this article is as follows . after giving formal definitions in the next section",
    ", we present our polynomial - time algorithms for the ` tree containment ' problem in section  [ sec : polytime ] , discuss the ` cluster containment ' problem in section  [ sec : cluster ] , show the computational intractability of both problems for certain classes of networks in section  [ sec : hard ] , and finish with an open problem in section  [ sec : open ] .",
    "consider a set  @xmath1 of taxa .",
    "a _ rooted phylogenetic network _ ( _ network _ for short ) on  @xmath1 is a directed acyclic ( simple ) graph with a single _ root _",
    "( vertex with indegree  0 ) , _ leaves _ ( vertices with outdegree  0 ) bijectively labeled by  @xmath1 and no vertices with indegree and outdegree one .",
    "we identify each leaf with its label and refer to the directed edges ( arcs ) as _",
    "edges_.    a vertex is called a _ reticulation vertex _ ( _ reticulation _ for short ) if it has indegree at least two and a _ tree - vertex _ otherwise .",
    "an edge is called a _ tree - edge _ if it ends in a tree - vertex and it is called a _ reticulation - edge _ otherwise .",
    "tree - path _ is a directed path that contains only tree - edges . a network with no reticulations is said to be a _ rooted phylogenetic tree _ ( _ tree _ for short ) .",
    "a network is said to be _ binary _ if each reticulation has indegree two and outdegree one and all of the vertices have outdegree at most two",
    ".    given two vertices  @xmath4 ( of some tree or network ) , we use  @xmath5 to denote that there is a directed path from  @xmath6 to  @xmath7 . if  @xmath5 and @xmath8 , we write  @xmath9 . for a vertex  @xmath3",
    ", we define @xmath10 .",
    "if  @xmath11 is an edge , then we say that  @xmath2 is a _ parent _ of  @xmath3 and  @xmath3 is a _ child _ of  @xmath2 .",
    "if two vertices  @xmath4 have a common parent , then they are said to be _",
    "an edge  @xmath12 of a network  @xmath13 is a _ cut - edge _ if removal of  @xmath12 disconnects the undirected graph underlying  @xmath13 .",
    "a cut - edge is _ trivial _ if it ends in a leaf .",
    "given a tree  @xmath14 and network  @xmath13 , we say that  @xmath13 _ displays _",
    "@xmath14 if there is a subgraph  @xmath15 of  @xmath13 that is a subdivision of  @xmath14 ( i.e.  @xmath15 can be obtained from  @xmath14 by replacing edges by directed paths ) . for a tree  @xmath14 on  @xmath1 and a subset  @xmath16",
    ", we use  @xmath17 to denote the tree on  @xmath18 that is displayed by  @xmath14 .",
    "these concepts are illustrated in fig .",
    "[ fig : leo ] .    .",
    "this network is normal , but not binary and has one reticulation vertex . _",
    "middle _ : one of the two rooted phylogenetic trees on @xmath19 that are displayed by this network .",
    "_ right _ : if we add either of the dashed edges , the resulting network is no longer normal ; adding the steeper , left - most arrow violates condition ( r3 ) while adding the right - most arrow results in a network that violates the tree - child property for the parent of  @xmath20 and  @xmath21 . ]    in the first part of this paper we consider the following fundamental decision problem :    lp.85 + _ instance : _ & a set  @xmath1 of taxa , a rooted phylogenetic network  @xmath13 on  @xmath1 and a rooted phylogenetic tree  @xmath14 on  @xmath1 .",
    "+ _ question : _ & does  @xmath13 display  @xmath14 ?",
    "+    this problem is known to be np - complete  @xcite for the general class of rooted , binary phylogenetic networks . here",
    "we study the restriction of this problem to some established classes of rooted phylogenetic networks .",
    "we then consider the complexity of a related ` cluster containment ' problem .      a phylogenetic network @xmath13 is said to be _ regular _ if for any two distinct vertices  @xmath22 of  @xmath13    1 .",
    "2 .   @xmath24 if and only if  @xmath25 ; 3 .",
    "there is no edge  @xmath11 if there is also a directed path from  @xmath2 to  @xmath3 of length greater than one .",
    "a phylogenetic network  @xmath13 is said to be _ tree - child _",
    "( see e.g. @xcite ) if each vertex of  @xmath13 either is a leaf or has a child that is a tree - vertex .",
    "it follows immediately that from each vertex of a tree - child network there exists a tree - path to a leaf .",
    "a network is said to be _ normal _ if it is tree - child , has no vertices of outdegree 1 , and in addition condition ( r3 ) above holds .",
    "it has been shown that any normal network is regular , i.e. that automatically conditions ( r1 ) and ( r2 ) hold  @xcite .",
    "this section describes our main results , polynomial - time algorithms for tree containment restricted to normal networks and to binary tree - child networks .",
    "we first give an algorithm for normal networks in section  [ sec : normal ] , because this algorithm is simpler and will be used as a subroutine for the algorithm for binary tree - child networks in section  [ sec : treechild ] .",
    "we show that , given a normal phylogenetic network  @xmath13 and a phylogenetic tree  @xmath14 , one can decide in polynomial time whether  @xmath13 displays  @xmath14 .",
    "we propose the following algorithm .",
    "an example is in figure  [ fig : normalalg ] .",
    "* algorithm * locatenormal + for each reticulation  @xmath26 of  @xmath13 , do the following .    1 .",
    "find a leaf  @xmath27 that can be reached from  @xmath26 by a tree - path .",
    "2 .   construct a set  @xmath18 consisting of  @xmath27 and , for each parent  @xmath28 of  @xmath26 , a leaf that can be reached from  @xmath28 by a tree - path .",
    "if  @xmath27 does not have a sibling in  @xmath17 , report that  @xmath13 does not display  @xmath14 .",
    "4 .   if  @xmath27 does have a sibling in  @xmath17 , let  @xmath29 be such a sibling and  @xmath30 the reticulation from which  @xmath29 can be reached by a tree - path .",
    "delete all edges entering  @xmath26 except for @xmath31 .",
    "when there are no reticulations left , the network has been transformed into a phylogenetic tree  @xmath15 . check if  @xmath15 is a subdivision of  @xmath14 .",
    "if it is , report that  @xmath13 displays  @xmath14 .",
    "otherwise , report that  @xmath13 does not display  @xmath14 .     in ( a ) and normal network  @xmath13 in ( b ) .",
    "dotted edges are removed from  @xmath13 ; in  ( b ) because  @xmath32 and @xmath20 are siblings in @xmath33 , in  ( c ) because  @xmath21 and  @xmath34 are siblings in @xmath35 , and in  ( d ) because  @xmath34 and  @xmath12 are siblings in @xmath36 . ]",
    "[ thm : normal ] given a normal phylogenetic network  @xmath13 on  @xmath1 and a phylogenetic tree  @xmath14 on  @xmath1 , algorithm locatenormal decides in polynomial time whether  @xmath13 displays  @xmath14 .",
    "moreover , if  @xmath13 displays  @xmath14 , locatenormal finds the unique subtree of  @xmath13 that is a subdivision of  @xmath14 .",
    "we first show that , for any reticulation  @xmath26 , the leaves in the set  @xmath18 described by the algorithm ( which exist by the tree - child property ) are always distinct . to show this ,",
    "assume that two such tree - paths end in the same leaf .",
    "since tree - paths can not combine in a reticulation , the only remaining possibility is that , for two parents  @xmath37 of  @xmath26 , the tree - path from  @xmath38 to a leaf passes through  @xmath39 .",
    "however , this implies the existence of a directed path @xmath40 of length greater than one , contradicting ( r3 ) , since there is also an edge  @xmath41 .",
    "we now prove that locatenormal reports that  @xmath13 displays  @xmath14 if and only if this is the case .",
    "if the algorithm reports that  @xmath13 displays  @xmath14 , then it is clear that  @xmath13 indeed displays  @xmath14 , since the algorithm checks if the constructed subtree  @xmath15 of  @xmath13 is a subdivision of  @xmath14 .",
    "now suppose that  @xmath13 displays  @xmath14 .",
    "then there exists a subtree  @xmath15 of  @xmath13 that is a subdivision of  @xmath14 .",
    "take any reticulation  @xmath26 and  @xmath18 as in the algorithm .",
    "observe that the root of  @xmath15 is the root of  @xmath13 by property  ( r1 ) .",
    "thus , by this observation and the fact that there is a tree - path from  @xmath26 to a leaf ,  @xmath26 and exactly one of the edges entering  @xmath26 are included in  @xmath15 .",
    "let  @xmath42 be the edge entering  @xmath26 that is included in  @xmath15 and  @xmath43 the leaf in  @xmath18 that can be reached from  @xmath44 by a tree - path .",
    "then  @xmath43 is a sibling of  @xmath27 in  @xmath45 ( which is isomorphic to @xmath17 ) and hence @xmath46 .",
    "it follows that locatenormal deletes all reticulation - edges not included in  @xmath15 , thus reconstructing  @xmath15 .",
    "moreover , since there is no choice which reticulation - edges to delete , the subtree  @xmath15 is unique .",
    "the running - time is clearly polynomial in the size of the input .",
    "moreover , the number of vertices of a normal network grows at most quadratically with the number of leaves  @xcite .",
    "hence , the running - time is also polynomial in the number of leaves .",
    "this subsection shows that , given a binary tree - child phylogenetic network  @xmath13 and a phylogenetic tree  @xmath14 , one can decide in polynomial time whether  @xmath13 displays  @xmath14 .",
    "we partition the reticulations of  @xmath13 into four types .",
    "+ * type i. * there is no tree - path between the parents of the reticulation . + * type ii .",
    "* there is a singe edge connecting the parents of the reticulation . +",
    "* type iii .",
    "* there is a tree - path between the parents of the reticulation that contains a vertex that is the parent of two tree - vertices .",
    "+ * type iv .",
    "* there is a tree - path between the parents of the reticulation that contains at least one internal vertex but no vertex that is the parent of two tree - vertices .",
    "note that in a normal network all reticulations are of type  i , because of restriction ( r3 ) .",
    "thus , the difficulty in generalizing the algorithm for normal networks in section  [ sec : normal ] is that the algorithm for tree - child networks below also has to take reticulations of types  ii , iii and ( especially ) iv into account .    * algorithm * locatetreechild + repeat the following four steps until none is applicable . +",
    "* if there is a reticulation of type i , proceed as for normal networks . + * step 2 . *",
    "if there is a reticulation of type ii , choose one of its two incoming edges arbitrarily and remove it .",
    "+ * step 3 .",
    "* if there is a reticulation  @xmath26 of type iii , do the following .    1 .",
    "let  @xmath38 and  @xmath39 be the parents of  @xmath26 such that  @xmath47 . pick a vertex  @xmath3 that lies on the path from  @xmath38 to  @xmath39 and is the parent of two tree - vertices .",
    "let  @xmath21 be the child of  @xmath3 that does not lie on the path between the parents of  @xmath26 .",
    "let  @xmath48 and  @xmath49 be leaves that can be reached from  @xmath50 and  @xmath21 respectively by tree - paths .",
    "if  @xmath51 and  @xmath27 are siblings in  @xmath52 , remove the edge @xmath41 from  @xmath13 .",
    "3 .   if  @xmath51 and  @xmath49 are siblings in  @xmath52 , remove the edge @xmath53 from  @xmath13 .",
    "4 .   otherwise ,",
    "report that  @xmath13 does not display  @xmath14",
    ".    * step 4 .",
    "* if there is a reticulation of type iv , do the following .    1 .",
    "if  @xmath13 contains a nontrivial cut - edge  @xmath11 , let  @xmath54 be the set of taxa reachable from  @xmath3 . find a vertex  @xmath55 of  @xmath14 with @xmath56 ( if there is no such vertex , report that  @xmath13 does not display  @xmath14 ) .",
    "construct  @xmath57 from  @xmath14 by deleting all descendants of  @xmath55 and labeling  @xmath55 by a new taxon  @xmath58 .",
    "construct  @xmath59 from  @xmath13 by deleting all descendants of  @xmath3 and labeling  @xmath3 by  @xmath49 .",
    "construct @xmath60 by restricting  @xmath13 to the vertices and edges reachable from  @xmath3 .",
    "run the algorithm recursively for @xmath61 and @xmath62 . if  @xmath59 displays  @xmath57 and  @xmath60 displays  @xmath63 , report that  @xmath13 displays  @xmath14",
    "otherwise , report that  @xmath13 does not display  @xmath14 .",
    "2 .   contract all vertices with indegree and outdegree 1 .",
    "find a leaf  @xmath64 that has a reticulation as sibling . construct a tree - path  @xmath65 as follows .",
    "initialise  @xmath65 as  @xmath64 and , as long as the first vertex  @xmath3 of  @xmath65 has a reticulation as sibling , add the parent of  @xmath3 to  @xmath65 . construct a set  @xmath18 by including  @xmath64 and , for each reticulation that has a parent on  @xmath65 , a leaf that can be reached from this reticulation by a tree - path .",
    "if  @xmath64 does not have a sibling in  @xmath17 , report that  @xmath13 does not display  @xmath14 .",
    "4 .   if  @xmath64 does have a sibling  @xmath29 in  @xmath17 , let  @xmath66 be the reticulation from which  @xmath29 can be reached by a tree - path .",
    "let  @xmath67 and  @xmath68 be the parents of  @xmath66 such that @xmath69 . remove the edge @xmath70 from  @xmath13 .    when there are no more reticulations left , check if the resulting phylogenetic tree  @xmath15 is a subdivision of  @xmath14 .",
    "if it is , report that  @xmath13 displays  @xmath14 .",
    "otherwise , report that  @xmath13 does not display  @xmath14 .",
    "[ thm : treechild ] given a binary tree - child phylogenetic network  @xmath13 on  @xmath1 and a phylogenetic tree  @xmath14 on  @xmath1 , algorithm locatetreechild decides in polynomial time whether  @xmath13 displays  @xmath14 .",
    "if there exist reticulations of type  i or  iii , it can be shown analogously to the proof of theorem  [ thm : normal ] that steps  1 and  3 of locatetreechild either resolve these reticulations in the only possible way , or conclude that  @xmath13 does not display  @xmath14 .",
    "it is furthermore clear that step  2 correctly deals with reticulations of type  ii ( because  @xmath13 is binary ) and step  4.1 with nontrivial cut - edges .",
    "thus , from now on , we assume that all reticulations are of type  iv and that there are no nontrivial cut - edges .",
    "we first show that a leaf  @xmath64 as described by step  @xmath71 indeed exists , i.e. we show that there is a leaf that has a sibling which is a reticulation .",
    "consider a tree - path  @xmath72 of maximum length . because  @xmath72 is a tree - path",
    ", it ends in a tree - vertex  @xmath64 , which must be a leaf because  @xmath13 is tree - child and  @xmath72 is of maximum length .",
    "the single parent of  @xmath64 is a tree - vertex because , if it were a reticulation ,  @xmath72 would consist of just  @xmath64 but , by the existence of a type  iv reticulation , there exists a tree - path of length at least two .",
    "thus , leaf  @xmath64 has a sibling , which has to be a reticulation because otherwise it would be possible to extend  @xmath72 to a longer tree - path .",
    "this shows the existence of a leaf  @xmath64 as described in step  @xmath71 .",
    "we now show that the algorithm reports that  @xmath13 displays  @xmath14 precisely when this is the case .",
    "the algorithm checks if the constructed subgraph  @xmath15 is a subdivision of  @xmath14 , so it will clearly never report that  @xmath13 displays  @xmath14 if this is not the case .",
    "so assume that  @xmath13 does display  @xmath14 .",
    "it remains to show that the algorithm will construct some subdivision of  @xmath14 in  @xmath13 .",
    "observe that , apart from  @xmath64 , all vertices on the path  @xmath65 have two children : one reticulation and one tree - vertex ( which lies on  @xmath65 ) .",
    "let  @xmath73 be the set of all reticulations with a parent on  @xmath65 .",
    "thus ,  @xmath18 consists of  @xmath64 and , for each reticulation in  @xmath73 , a leaf that can be reached from this reticulation by a tree - path . by the choice of  @xmath64 , the path  @xmath65 contains at least one other vertex , and so the set  @xmath18 contains at least two leaves .",
    "we claim that all parents of reticulations in  @xmath73 lie on  @xmath65 .",
    "assume that this is not the case .",
    "then there is a reticulation  @xmath74 with two parents  @xmath75 such that @xmath76 and one of  @xmath75 is not on  @xmath65 while the other one is .",
    "since  @xmath65 and the path @xmath76 both contain only tree - edges , we must have that  @xmath77 is on  @xmath65 while  @xmath78 is not .",
    "however , then the path  @xmath79 contains a vertex that is the parent of two tree - vertices , which means that  @xmath74 is of type  iii .",
    "this is a contradiction because the algorithm has already resolved all reticulations of type  iii in step  3 .",
    "thus , apart from  @xmath64 , @xmath65 consists precisely of the parents of reticulations in  @xmath73 . since  @xmath13 displays  @xmath14",
    ", there exists a subtree  @xmath15 of  @xmath13 that is a subdivision of  @xmath14 .",
    "we next claim that  @xmath64 has a sibling in  @xmath45 .",
    "let  @xmath80 be the last vertex on the path  @xmath65 for which the reticulation - edge leaving  @xmath80 is included in  @xmath15 ( such a vertex exists because one of the edges entering the sibling of  @xmath64 is included in  @xmath15 ) .",
    "let  @xmath29 be the leaf in  @xmath18 that can be reached from the reticulation - child of  @xmath80 by a tree - path .",
    "clearly ,  @xmath29 and  @xmath64 are siblings in  @xmath45 ( which is isomorphic to  @xmath17 ) .",
    "thus , the algorithm removes the edge @xmath70 from  @xmath13 , with  @xmath66 the reticulation - child of  @xmath80 and  @xmath67 equal to either  @xmath80 or the other parent of  @xmath66 .",
    "first suppose that  @xmath67 is not equal to  @xmath80 .",
    "thus , @xmath81 and  @xmath67 is the other parent of  @xmath66 . in this case",
    ", the algorithm correctly removes the edge @xmath70 that is not in  @xmath15 and we are done .",
    "now assume that  @xmath82 and thus that the algorithm removes the edge @xmath70 that is in  @xmath15 .",
    "we replace in  @xmath15 the edge @xmath70 by the edge @xmath83 .",
    "the resulting subgraph of  @xmath13 is again a subdivision of  @xmath14 , because none of the reticulation - edges leaving vertices below  @xmath82 were included in  @xmath15 ( by the choice of  @xmath80 ) .",
    "see figure  [ fig : treechildproof ] for an illustration .",
    "we conclude that the algorithm correctly constructs a subdivision of  @xmath14 in  @xmath13 .",
    "the running - time is clearly polynomial in the size of the input .",
    "moreover , the number of reticulations in a tree - child network is at most  @xmath84 and it can be shown by induction on the number  @xmath85 of reticulations that the number of edges of a binary tree - child network is at most  @xmath86 . hence , the running - time is also polynomial in the number of leaves .    .",
    "a subdivision of the tree  @xmath14 in the network  @xmath13 is indicated by solid lines .",
    "replacing edge @xmath70 by @xmath83 gives another subdivision of  @xmath14 in  @xmath13 , because @xmath70 is the last edge leaving the path  @xmath65 ( the vertical path ) that is used by the subdivision . ]",
    "a _ cluster _ is a strict subset of  @xmath1 .",
    "there are two different ways of seeing clusters in networks .",
    "let  @xmath3 be a vertex of a network  @xmath13 on  @xmath87 .",
    "the _ hardwired cluster _ of  @xmath3 , denoted  @xmath88 , is the set containing all taxa that can be reached from  @xmath3 .",
    "a cluster is said to be a hardwired cluster of  @xmath13 if it is the hardwired cluster of some vertex of  @xmath13 .",
    "a cluster  @xmath89 is said to be a _ softwired cluster _ of  @xmath3 if  @xmath54 equals the set of all taxa that can be reached from  @xmath3 when , for each reticulation  @xmath26 , exactly one incoming edge of  @xmath26 is `` switched on '' and the other incoming edges of  @xmath26 are `` switched off '' .",
    "notice that each vertex has exactly one hardwired cluster and one or more softwired clusters .",
    "we say that  @xmath54 is a _ softwired cluster _ of a network  @xmath13 if it is a softwired cluster of some vertex of  @xmath13 .",
    "the softwired clusters of  @xmath13 can elegantly be characterized as follows .",
    "a cluster  @xmath89 is a softwired cluster of  @xmath13 if and only if there exists a tree  @xmath14 such that  @xmath54 is a hardwired cluster of  @xmath14 and  @xmath14 is displayed by  @xmath13 .",
    "we are interested in the following decision problem .",
    "lp.85 + _ instance : _ & a set  @xmath1 of taxa , a rooted phylogenetic network  @xmath13 on  @xmath87 and a cluster  @xmath90 .",
    "+ _ question : _ & is  @xmath54 a softwired cluster of  @xmath13 ? +    this problem is known to be np - complete  @xcite for general binary phylogenetic networks . however , it has a polynomial - time algorithmic solution if we restrict  @xmath13 to tree - child networks  @xcite",
    ". we will show below ( theorem [ thm : reghard ] ) that , if we extend the class of normal networks to regular networks , the problem cluster containment becomes np - hard , even if we add further structural restrictions to this class of networks .",
    "but first we describe yet another class of networks for which both problems tree containment and cluster containment  have polynomial - time algorithms .",
    "we finish this section by observing that both tree containment and cluster containment are polynomial - time solvable for the class of binary level-@xmath0 networks .",
    "a binary network is _ biconnected _ if it contains no cut - edges .",
    "a biconnected subgraph  @xmath91 of a binary network  @xmath13 is said to be a _ biconnected component _ if there is no biconnected subgraph  @xmath92 of @xmath13 that contains  @xmath91 .",
    "a binary phylogenetic network is a _",
    "@xmath93 network _",
    "if each biconnected component has at most  @xmath0 reticulations .",
    "[ obs : levelk ] tree containment and cluster containment are polynomial - time solvable when restricted to binary level-@xmath0 networks , for any fixed  @xmath0 .",
    "we may assume that the network contains no nontrivial cut - edges , because step  4.1 of algorithm locatetreechild can be applied until there are no nontrivial cut - edges left .",
    "a level-@xmath0 network with no nontrivial cut - edges contains at most  @xmath0 reticulations .",
    "thus , we can loop through all  @xmath94 ways of selecting one incoming edge for each of the  @xmath0 reticulations . for each of the resulting trees",
    ", we check whether it is a subdivision of the input tree ( in case of the tree containment problem ) or check whether the input cluster is a cluster of the obtained tree ( in case of the cluster containment problem ) .",
    "a phylogenetic network is said to be _ tree - sibling _ ( see e.g.  @xcite ) if each reticulation has a sibling that is a tree - vertex .",
    "a phylogenetic network  @xmath13 is said to be _ time - consistent _ ( see e.g.  @xcite ) if it is possible to assign each vertex  @xmath3 of  @xmath13 a `` time stamp '' @xmath95 such that for each edge  @xmath11 of  @xmath13 :    1 .",
    "@xmath96 if @xmath11 is a tree - edge and 2 .",
    "@xmath97 if @xmath11 is a reticulation - edge .",
    "[ thm : reghard ] tree containment and cluster containment are both np - complete when restricted to tree - sibling , time - consistent , regular phylogenetic networks .",
    "we reduce from the tree containment and cluster containment problems on general networks , which were shown to be np - complete by kanj et al .",
    "@xcite .",
    "let  @xmath1 be a set of taxa , and let  @xmath13 and  @xmath14 be a network and tree on  @xmath1 , respectively .",
    "we will modify  @xmath13 to a tree - sibling , time - consistent , regular network  @xmath98 on a set of taxa  @xmath99 and show that a cluster  @xmath89 is a softwired cluster of  @xmath98 if and only if it is a softwired cluster of  @xmath13 . since this modification can be carried out in polynomial time and the size of  @xmath98",
    "is polynomial in the size of  @xmath13 , this shows np - hardness of cluster containment on tree - sibling , time - consistent , regular networks .",
    "furthermore , we will ( in polynomial time ) modify  @xmath14 to a tree  @xmath15 on  @xmath100 and show that  @xmath98 displays  @xmath15 if and only if  @xmath13 displays  @xmath14 , thus showing np - hardness of tree containment on this restricted class of networks .",
    "the construction of  @xmath98 and  @xmath15 relies on repeatedly applying the following operation . for a vertex  @xmath3 of  @xmath13 ,",
    "define hangleaves@xmath101 as making the following changes to  @xmath13 ,  @xmath14 and  @xmath1 .",
    "we add two new taxa  @xmath102 to  @xmath1 .",
    "let  @xmath26 be the root of  @xmath13 .",
    "we add to  @xmath13 leaves  @xmath102 , a new root  @xmath66 , an internal vertex  @xmath28 and edges  @xmath103 and  @xmath104 .",
    "let  @xmath105 be the root of  @xmath14 .",
    "we add to  @xmath14 the leaves  @xmath102 , a new root  @xmath106 , an internal vertex  @xmath107 and edges  @xmath108 and  @xmath109 .",
    "see figure  [ fig : modification ] .",
    "modifies  @xmath13 and  @xmath14 .",
    "vertices  @xmath26 and  @xmath105 are the roots of  @xmath13 and  @xmath14 respectively . ]",
    "we now describe how we transform  @xmath13 into a tree - sibling , time - consistent , regular network by repeated applications of hangleaves .",
    "first , we make the network regular by doing the following for each pair  @xmath22 of distinct vertices of  @xmath13 .    1 .",
    "if  @xmath110 , then apply hangleaves@xmath111 and hangleaves@xmath101 .",
    "2 .   if  @xmath25 but there is no directed path from  @xmath2 to  @xmath3 , then apply hangleaves@xmath101 .",
    "if there exist two distinct directed paths from  @xmath2 to  @xmath3 , one of which is an edge , then subdivide this edge with a single vertex  @xmath112 and apply hangleaves@xmath113 .",
    "for any two vertices  @xmath22 of  @xmath13 , operations  1 ,  2 and  3 make sure that properties  ( r1 ) ,  ( r2 ) and  ( r3 ) ( respectively ) of a regular network are satisfied .",
    "furthermore , by the definition of hangleaves , these properties are also satisfied for newly added vertices .",
    "it follows that the obtained network is regular .",
    "call this network  @xmath114 .",
    "the next step is to make the network time - consistent . for each reticulation - edge @xmath11 of  @xmath114 ,",
    "subdivide @xmath11 by a new vertex  @xmath112 and apply hangleaves@xmath113 .",
    "let  @xmath115 be the resulting phylogenetic network .",
    "we claim that  @xmath115 is time - consistent .",
    "let  @xmath116 be a labeling of the vertices of  @xmath114 such that @xmath117 for each edge @xmath11 .",
    "this is possible because  @xmath114 is acyclic .",
    "we specify a label  @xmath118 ( the time - stamp ) for each vertex  @xmath3 of  @xmath115 as follows .",
    "each vertex of  @xmath115 that is also a vertex of  @xmath114 gets the same label as in  @xmath114 , i.e. @xmath119 for all  @xmath120 .",
    "now consider a reticulation - edge @xmath11 of  @xmath114 .",
    "such an edge corresponds to two edges @xmath121 and @xmath122 of  @xmath115 .",
    "now label vertex  @xmath112 the same as vertex  @xmath3 , i.e. @xmath123 .",
    "observe that @xmath122 is a reticulation - edge and now satisfies restriction ( tc2 ) of time - consistency .",
    "furthermore , we have @xmath124 and so @xmath121 , which is a tree - edge , satisfies restriction ( tc1 ) of time - consistency .",
    "it remains to label the vertices that have been added by hangleaves .",
    "this can easily be done in such a way that the restrictions of time - consistency are satisfied .",
    "namely , we give  @xmath64 and  @xmath28 the same label as  @xmath3 , give  @xmath66 any label that s smaller than @xmath125 and  @xmath43 any label that is greater than @xmath126 ( processing vertices in the same order as in which they have been added by applications of hangleaves ) .",
    "finally , we make the network tree - sibling . for each reticulation",
    "@xmath26 of  @xmath115 , that has not been added by hangleaves , we do the following .",
    "observe that , as a result of the modifications that made  @xmath115 time - consistent ,  @xmath26 has two siblings , both of which are reticulations added by two different applications of hangleaves .",
    "pick any of the two siblings and call it  @xmath64 .",
    "let  @xmath3 be the common parent of  @xmath64 and  @xmath26 .",
    "subdivide edge  @xmath104 by a new vertex  @xmath112 and apply hangleaves@xmath113 .",
    "reticulation  @xmath26 now has a sibling that is a tree - vertex , namely  @xmath112 .",
    "moreover , all reticulations  @xmath64 added by applications of hangleaves have a sibling  @xmath43 that is a tree - vertex .",
    "hence , the resulting network is tree - sibling",
    ". let  @xmath98 be this resulting network and  @xmath15 the resulting tree .",
    "we claim that  @xmath98 is not only tree - sibling , but also still regular and time - consistent . to see that  @xmath98 is regular , observe that it has been obtained from the regular network  @xmath114 by repeatedly subdividing an edge by a new vertex  @xmath112 and applying hangleaves@xmath113 .",
    "it can easily be checked that a regular network remains regular after such a modification . to see that  @xmath98 is also time - consistent , observe that it has been constructed from time - consistent network  @xmath115 by repeatedly subdividing an edge  @xmath104 by a new vertex  @xmath112 and applying hangleaves@xmath113 . using that  @xmath64 is a leaf added by hangleaves ,",
    "it can easily be checked that a time - consistent network remains time - consistent after such a modification .",
    "thus ,  @xmath98 is a tree - sibling , time - consistent , regular network .",
    "it remains to show that ( i )  a cluster  @xmath89 is a softwired cluster of  @xmath98 if and only if it is a softwired cluster of  @xmath13 and ( ii )  @xmath98 displays  @xmath15 if and only if  @xmath13 displays  @xmath14 . the crux to showing these things is that  @xmath98 and  @xmath15 have been obtained from  @xmath13 and  @xmath14 by subdividing edges and applying hangleaves . by this observation ,",
    "( i ) is clear .    to see",
    "( ii ) , let  @xmath127 , @xmath128 and  @xmath129 be the result of a single application of hangleaves@xmath101 to @xmath130 .",
    "we claim that  @xmath127 displays  @xmath128 if and only if  @xmath13 displays  @xmath14 . first note",
    "that an embedding of  @xmath14 in  @xmath13 can easily be extended to an embedding of  @xmath128 in  @xmath127 by adding to the embedding all new vertices , a path from  @xmath66 to the root of the embedding and edges @xmath131 , @xmath132 , @xmath133 .",
    "now consider an embedding of  @xmath128 in  @xmath127 .",
    "since  @xmath64 and  @xmath43 are siblings in  @xmath128 , this embedding necessarily contains the newly added vertices and edges except for the edge @xmath104 .",
    "thus , the restriction of the embedding of  @xmath128 in  @xmath127 to an embedding of  @xmath14 in  @xmath127 does not contain any of the newly added vertices and edges and is thus an embedding of  @xmath14 in  @xmath13 .",
    "thus ,  @xmath127 displays  @xmath128 if and only if  @xmath13 displays  @xmath14 . by recursively applying this argument",
    ", it follows that  @xmath98 displays  @xmath15 if and only if  @xmath13 displays  @xmath14 .",
    "for a vertex  @xmath3 and a leaf  @xmath64 of some phylogenetic network , we say that  @xmath3 is a _ stable ancestor _ of  @xmath64 if all directed paths from the root to  @xmath64 pass through  @xmath3 .",
    "a network is said to be _ reticulation - visible _ if each reticulation is a stable ancestor of some leaf .",
    "recently , it was shown that cluster containment is polynomial - time solvable for reticulation - visible networks  @xcite .",
    "this class of networks contains , but is more general than , the class of tree - child networks .",
    "thus , the tantalizing question remaining open after this work is whether tree containment is also polynomial - time solvable for reticulation - visible networks .",
    "note that tree containment can not simply be solved by checking if each cluster of the input tree  @xmath14 is a softwired cluster of the input network  @xmath13 ( using an algorithm for cluster containment ) .",
    "this approach fails because , even if all clusters of  @xmath14 are softwired clusters of  @xmath13 , and even if  @xmath13 is reticulation - visible , it might be that  @xmath13 does not display  @xmath14 , see  @xcite .",
    "thus , there is no obvious reduction from cluster containment to tree containment or vice versa .",
    "l. nakhleh , evolutionary phylogenetic networks : models and issues . in : _ the problem solving handbook for computational biology and bioinformatics _ , l. heath and n. ramakrishnan ( editors ) .",
    "springer , to appear ."
  ],
  "abstract_text": [
    "<S> _ phylogenetic trees _ and _ networks _ are leaf - labelled graphs that are used to describe evolutionary histories of species </S>",
    "<S> . the tree containment problem asks whether a given phylogenetic tree is embedded in a given phylogenetic network . </S>",
    "<S> given a phylogenetic network and a cluster of species , the cluster containment problem asks whether the given cluster is a cluster of some phylogenetic tree embedded in the network . </S>",
    "<S> both problems are known to be np - complete in general . in this article </S>",
    "<S> , we consider the restriction of these problems to several well - studied classes of phylogenetic networks . </S>",
    "<S> we show that tree containment is polynomial - time solvable for normal networks , for binary tree - child networks , and for level-@xmath0 networks . on the other hand , we show that , even for tree - sibling , time - consistent , regular networks , both tree containment and cluster containment remain np - complete .    </S>",
    "<S> algorithms , computational complexity , phylogenetic trees , phylogenetic networks </S>"
  ]
}