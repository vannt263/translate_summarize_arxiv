{
  "article_text": [
    "asymptotically zero power dissipation can be achieved by performing computation in a reversible manner , which implies  @xcite that logical reversibility must be supported to achieve physical reversibility .",
    "consequently , major research attention is given towards the synthesis of a boolean function using basic reversible logic gates , a problem otherwise known as reversible logic synthesis .",
    "an @xmath0-variable boolean function @xmath1 is a mapping @xmath2 .",
    "an alternative representation of a boolean function @xmath1 is a mapping @xmath3 , which is known as the truth table representation . using any basis of @xmath4",
    ", we can express each @xmath5 as an @xmath0-tuple @xmath6 , @xmath7 , @xmath8 .",
    "thus we can derive the truth table representation from the former representation .",
    "alternatively , an @xmath0-variable boolean function @xmath9 can be considered to be a multivariate polynomial over @xmath10 .",
    "this polynomial can be expressed as a sum - of - products representation of all distinct @xmath11-th order products @xmath12 of the variables .",
    "this representation of @xmath1 is called the _ algebraic normal form _ ( anf ) of @xmath1 .",
    "an @xmath0-variable boolean function is _ reversible _ if all its output patterns map uniquely to an input pattern and vice - versa .",
    "it can be expressed as an @xmath0-input , @xmath0-output bijection or alternatively , as a permutation function over the truth value set @xmath13 .",
    "the problem of reversible logic synthesis is to map such a reversible boolean function on a reversible logic gate library .",
    "reversible gates are characterized by their implementation cost in quantum technologies , which is dubbed as quantum cost ( qc ) @xcite .",
    "prominent classical reversible logic gates include not , feynman ( or cnot ) , toffoli ( or ccnot ) gates .",
    "controlled not gates can be generalized as @xmath14 gate , where first @xmath15 variables are used as control lines .",
    "there are other reversible logic gate families such as fredkin gate family ( @xmath16 ) , where first @xmath17 variables are used as control lines and last @xmath18 lines undergo swap , when the logical conjunction of first @xmath17 variables is true .",
    "* not gate : @xmath19 * controlled not gate : also known as feynman or cnot gate .",
    "@xmath20 * controlled controlled not gate : also known as toffoli gate .",
    "@xmath21 this gate can be generalized with @xmath14 gate , where first @xmath15 variables are used as control lines .",
    "not gate is denoted as @xmath22 gate .",
    "* swap gate : @xmath23 this gate can be generalized to the fredkin gate family ( @xmath16 ) , where first @xmath17 variables are used as control lines and last @xmath18 lines undergo swap .",
    "multiple sets of reversible gates form an universal gate library for realizing classical boolean functions such as , ( i ) nct : not , cnot , toffoli .",
    "( ii ) nctsf : not , cnot , toffoli , swap , fredkin . (",
    "iii ) gt : @xmath14 .",
    "( iv ) gtgf : @xmath14 and @xmath16 .",
    "generally , gates with more control lines incur higher qc .        reversible logic synthesis begins from a given @xmath0-variable boolean function , which can be irreversible .",
    "the first step is to convert it to a reversible boolean function by adding additional constant input bits ( known as _ ancilla inputs _ ) .",
    "if these constant input bits are not restored to their original values at the end of computation , then these are referred as _",
    "reversible logic synthesis methods can be grossly classified as following . first ,",
    "_ optimal _",
    "implementation is found by making a step - by - step exhaustive enumeration or by formulating the reversible logic synthesis as a sat problem  @xcite .",
    "optimal implementation up to @xmath25-variable boolean functions are known  @xcite .",
    "pseudo - optimal synthesis for linear boolean functions is proposed at  @xcite .",
    "second , _ transformation - based methods _",
    "@xcite , which apply controlled transformations to map output boolean functions to input boolean functions .",
    "third category includes methods based on _ decision diagrams _",
    "@xcite , each node of the decision diagram is converted to an equivalent reversible circuit structure .",
    "while these methods are known to scale for large boolean functions , they introduce too many garbage bits . finally , _",
    "search - based methods _ start from an exclusive sum - of - product ( esop ) representation of the boolean function .",
    "the ideal candidates for reversible logic realization at each depth is chosen via heuristic search  @xcite .",
    "another synthesis , based on esop formulation , is proposed in  @xcite .",
    "there a heuristic esop minimization tool  @xcite is used for generating reversible circuits with fixed number of ancilla lines . for a detailed survey of reversible logic synthesis ,",
    "reader is kindly referred to  @xcite .",
    "* motivation : * the promise held by quantum computing is driving the research of reversible logic synthesis . despite several major advancements of this research , the complexity study of the problem is not done so far .",
    "this is important since , optimal , comprehensive reversible circuit synthesis is done up to only all @xmath25-variable boolean functions  @xcite and up to selected @xmath26-variable boolean functions  @xcite .",
    "the rest of this paper is organized as following . in the following section  [ sec : obj ] ,",
    "the performance objectives for reversible logic synthesis are discussed . in section  [ sec : ancilla_bounds ] , analayis of computational complexity for bounded - ancilla reversible logic synthesis is presented .",
    "this is followed by the computational complexity analysis for ancilla - free reversible logic synthesis in section  [ sec : ancilla_free_bounds ] .",
    "two different formulations for exactly solving the reversible logic synthesis problem is presented in sections  [ sec : shortest_path ] and  [ sec : ilp_formulation ] respectively .",
    "experimental results with these methods are reported in section  [ sec : results ] . the paper is concluded and future works are outlined in section  [ sec : conclusion ] .",
    "before presenting the complexity analysis of reversible logic synthesis , it is necessary to develop a better understanding of the performance objectives . the major performance objectives of reversible logic synthesis are gate count , logical depth , quantum cost , ancilla and garbage count .      in literature , either ancilla count or garbage count or total line count is reported .",
    "ancilla - free synthesis is achievable by several methods  @xcite , whereas several synthesis methods compromise ancilla count for achieving scalability  @xcite or lowering qc  @xcite .",
    "gate count is used as a major performance objective in many synthesis flows  @xcite due to its simple cost annotation . however , several composite gates ( e.g. peres gates ) are presented both as a single gate or multiple gates in literature .",
    "for example , peres gates are considered as a single gate for multiple benchmark circuits presented in  @xcite , whereas the gate counts reported for the quantum arithmetic circuits in  @xcite count peres gates as a collection of toffoli and cnot gates . to avoid confusion ,",
    "library - specific gate counts are reported in  @xcite .",
    "quantum cost ( qc ) for a reversible gate is technology - dependent .",
    "a set of primitive gates are actually implemented on experimental quantum circuits , which are used to build more complex gates and thus the qc is computed by simply adding those primitive gates .",
    "early studies of primitive reversible gates are presented at  @xcite , which is adopted for the derivation of qc for generalized toffoli and fredkin gates in  @xcite .",
    "recent advances at experimental quantum computing  @xcite shows that the qc of negative - control gates are comparable to that of positive - control gates , thereby spawning several works on reversible logic synthesis with mixed - polarity gate libraries  @xcite .",
    "an improved circuit , in terms of less quantum cost , for generalized toffoli gates is presented in  @xcite . in a significant new result ,",
    "improved qc for generalized peres gates as well for generalized toffoli gates are presented in  @xcite .",
    "reduced qc values are reported by introducing a new gate library in  @xcite .    though there are established performance metrics for evaluating the quality of a reversible circuit , yet",
    "the continuously evolving quantum technology needs to be considered for a fair benchmarking .",
    "the synthesis tools should also be adaptable to new performance objectives and their trade - offs .",
    "the complexity of exact sum - of - product ( sop ) minimization , in terms of number of literals , where the input is an incomplete or complete truth - table specification is studied in  @xcite and  @xcite .",
    "it is shown that the problem - _ is there a sop representation of a given truth - table specification with at most k literals ? _ -",
    "is np - complete . the proof is based on the fact that the well - known exact procedure of sop minimization , quine - mccluskey includes a function call to the minimum cover problem .",
    "minimum cover problem is shown to be np - complete in 1972  @xcite .",
    "we introduce few definitions , which are needed for rest of this section .",
    "given a set of elements @xmath27 and a set @xmath28 of @xmath0 sets , whose union equals @xmath29 , the minimum set covering problem is to identify the smallest subset of @xmath28 , the union of which contains all elements of @xmath29 .",
    "exact cover or exact set cover problem is a decision problem , where the goal is to find a subset of @xmath28 , the union of which contains all elements and each element of @xmath29 is covered exactly by one subset .",
    "exact cover problem returns false if no such set exists .",
    "for example , given a set @xmath30 and @xmath31 , @xmath32 returns the minimum set cover and @xmath33 returns an exact cover . the exact cover problem and",
    "the decision version of set covering problem are np - complete  @xcite .",
    "the worst - case complexity of sop formulation ( @xmath34 ) is more than the corresponding complexity of the esop formulation @xmath35  @xcite , for an @xmath0-variable boolean function .",
    "this led researchers to look for efficient esop minimization flows and several exact esop minimization algorithms have been presented  @xcite . for the computational complexity of reversible logic synthesis ,",
    "exact esop minimization holds a clue , since for an @xmath0-variable boolean functions , an esop formulation with @xmath11 cubes directly corresponds to a reversible circuit realization with @xmath11 @xmath14 gates and at most @xmath0 ancilla lines , each corresponding to one output function .",
    "it might be argued that , the function of an esop is independent of the order of its product terms whereas , the function of a reversible circuit is affected by the order of the sequence of @xmath14 gates .",
    "however , that does not hold true for a bounded - ancilla reversible logic circuit , where the ancillae ensure that the inputs remain unchanged .",
    "the not gates inserted between the @xmath14 gates can be ignored if mixed - polarity @xmath14 gates are considered .",
    "this is exemplarily shown in the reversible circuit realizations depicted in fig .",
    "[ fig : esop_tof ] for the boolean functions @xmath36 and @xmath37 respectively .        exact minimization of esop is well - studied in literature  @xcite . in  @xcite ,",
    "exact esop minimization is done based on the shortest path enumeration of a decision diagram , which leads to the complexity of @xmath38 for an @xmath0-variable boolean function .",
    "computational complexity analysis is not done there .",
    "another exact esop minimization is proposed by steinbach and mishchenko  @xcite .",
    "there , the exact esop formulation is reduced to a problem of a so called _",
    "coverage matrix_. we adopt the exact minimization procedure from  @xcite for studying the computational complexity . in the following ,",
    "we briefly describe the formulation .    first , the sop or truth table formulation is converted to an esop formulation . for a sop to esop formulation ,",
    "the following transformation can be used . @xmath39",
    "it is straightforward to show that for a sop formulation with @xmath40 cubes , an esop formulation with @xmath41 literals is obtained . alternatively , constructing an anf from a boolean truth table specification can be done using @xmath42 operations with standard algorithm .",
    "the input to the algorithm is the truth table @xmath43 $ ] , and the output is the coefficient vector of the canonical algebraic normal form ( anf ) , represented as @xmath44 $ ] . only if @xmath45 = 1 , where 0 @xmath46 j @xmath46 @xmath47 , then the monomial @xmath48 exists in the anf of @xmath1 , where ( @xmath49 ) is the binary representation of index @xmath50 . for an @xmath0-variable boolean function , @xmath51 , where @xmath52 can be computed as following .",
    "@xmath53        first , the sop or truth table formulation is converted to an esop formulation . based on the esop formulation , a special normal form ( snf )",
    "is introduced in  @xcite .",
    "it was shown that it is also a canonical esop representation like anf . whereas anf is a positive - polarity expression ,",
    "snf is mixed - polarity . for exact esop minimization ,",
    "a coverage matrix is constructed , where the rows and columns correspond to all possible ( @xmath54 ) cubes of an @xmath0-variable boolean function @xmath1 and the cubes of snf(@xmath1 ) respectively .",
    "the goal of exact esop minimization is to include the fewest row - cubes from @xmath1 to cover all the column - cubes from snf(@xmath1 ) , which reduces to a variation of the minimum set covering problem .",
    "however , there is a subtle difference between the minimum set covering problems encountered in esop and sop minimization . for the sop formulation ,",
    "the goal is to cover the on - set of output function with minimum number of cubes , where multiple cubes can cover a on - value as in _ inclusive or_. for esop formulation , an on - value can be covered by odd number of cubes and an off - value can be covered by even number of cubes as in _ exclusive or_. this is exemplarily shown in the karnaugh - map diagrams in fig .",
    "[ fig : off_cover ] .",
    "the dotted lines shows the exact cover without multiple covering of an element .",
    "the solid lines shows the covers with multiple covering . note",
    "that while multiple cover of the off - set in the left - hand figure decreases the number of cubes , whereas multiple covers of the on - set elements leaves the number of cubes intact but , increases the sizes of the cubes , thus reducing literals .",
    "based on this , we propose the following formulation of esop minimization .",
    "esop minimization is a minimum set covering problem , where the union is defined as following .",
    "+ @xmath55 , where + @xmath56",
    "if @xmath57 + @xmath56 if @xmath58 + we refer to the problem as xor - set - cover .",
    "formally , the xor - set - cover problem is :    * input : * @xmath59 where @xmath60 is a set of subsets , consisting of members from @xmath29 and @xmath61    * question : * does @xmath29 have a @xmath60-cover of size @xmath62 , where the union of two sets is defined as above ?",
    "xor - set - cover is in np .",
    "let us say , @xmath63 is a proposed @xmath60-cover solution .",
    "we propose the following verification flow .",
    "* @xmath63 is subset of @xmath60 * @xmath64 @xmath46 @xmath62 * @xmath65 is odd .",
    "the verifier runs in time polynomial in the length of the @xmath63 .",
    "xor - set - cover problem is np - complete .",
    "suppose we have a black box @xmath66 which takes a three tuple @xmath67 as input and returns @xmath68 _ iff _",
    "@xmath69 has a xor set @xmath70 cover of size @xmath71 otherwise it returns @xmath72 . here",
    ", @xmath73 is same as defined previously . now using @xmath66 as a subroutine we have to solve the exact set cover problem .",
    "so , the input for exact set cover problem is also a three tuple @xmath74 and we have to answer whether @xmath69 has a set @xmath70-cover of size @xmath71 .",
    "if for any input @xmath74 , the @xmath66 gives @xmath68 as output , then we can conclude that @xmath74 is an exact set cover .",
    "now the problem is when @xmath66 gives @xmath72 as output .",
    "then there are two following possibilities .    1 .",
    "@xmath69 has exact @xmath70-set cover of size @xmath71 , let @xmath75 be a solution i.e , union of the elements of @xmath76 gives the set @xmath69 .",
    "as @xmath66 is giving the output @xmath72 , so , we can say that if we perform the @xmath77 operation defined previously among the elements of @xmath76 , then there exists at least one element @xmath78 , which is present in even number of elements of @xmath76 .",
    "2 .   @xmath69 does nt have exact @xmath70-cover of size @xmath71 .    among the above two possibilities , for the first possibility",
    ", we can take an element @xmath78 and remove it from one element of @xmath70 , say @xmath79 be the new set of subsets and check whether @xmath69 has xor set @xmath79-cover of size @xmath71 .",
    "then , we can repeat this process for each element of @xmath70 for a fixed @xmath80 and then repeat this process for each element @xmath78 .",
    "if for every input @xmath66 gives @xmath72 as output then conclude that @xmath69 does nt have exact @xmath70-set cover of size @xmath71 otherwise , if for at least one single query to @xmath66 it give the output @xmath68 conclude that @xmath69 has exact @xmath70-set cover of size @xmath71 .",
    "so , here we have reduced the exact set cover problem to xor - set - cover problem .",
    "as , exact set cover is known np - complete problem and xor - set - cover is in np , so xor - set - cover problem is np - complete .",
    "it is important to show how the xor - set - cover is applicable to the problem at hand .",
    "we start by enumerating all possible cubes w.r.t .",
    "@xmath0 input variables of the boolean function @xmath1 .",
    "we arrange a coverage matrix , where all possible cubes ( @xmath54 ) are arranged row - wise and the cubes from the canonical snf or anf are arranged column - wise .",
    "let us assume that we have @xmath81 and @xmath82 elements in the on - set and in the off - set respectively .",
    "further , the cubes belonging to the off - set are also added to the columns .",
    "hence , we get a @xmath83 coverage matrix .",
    "the elements of the matrix are assigned a value of @xmath72 if a row - cube does not cover a column - cube .",
    "otherwise , the element value is assigned to be @xmath68 if the column - cube belongs to the on - set and a value of @xmath84 if it belongs to the off - set .",
    "an exemplary coverage matrix is shown in table  [ tab : coverage_matrix ] , where the on - set column headers are marked bold .",
    "a valid solution for the coverage matrix is a xor - set - cover , where the columns belonging to on - set can be replicated odd number of times and the columns belonging to the off - set can be replicated even number of times .",
    "note that , there is a upper limit of replication  @xcite.the on - set cubes can be replicated up to @xmath85 times and off - set cubes can be replicated up to @xmath86 times .",
    ".exemplary @xmath18-variable coverage matrix  @xcite [ cols=\"^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     the shortest path formulation for reversible logic synthesis provides the computational viewpoint of what has been a purely memory - oriented approach in  @xcite and  @xcite . the sheer number of nodes for @xmath25-variable and beyond presents a bottleneck for scaling the shortest path approach . on the other hand",
    ", this may provide opportunities for utilizing graph theoretic results such as approximate shortest paths .",
    "in this paper , we studied the complexity of exact reversible logic synthesis , for both the cases of the circuit being bounded - ancilla and ancilla - free . for the bounded - ancilla scenario ,",
    "the problem is shown to be np - hard .",
    "for ancilla - free reversible logic synthesis , we linked the problem to sorting by cost - constrained transpositions , for which the computational complexity is not known .",
    "we attempted two different formulations for solving the exact problem namely , ( 0 - 1 ) ilp and shortest path problem .",
    "the former approach fails to produce optimal solutions in acceptable time .",
    "the shortest path problem formulation is used to generate comprehensive results for @xmath87-variable functions , while scaling it up to larger variable sizes remain an interesting future work .",
    "m.  perkowski and m.  chrzanowska - jeske , `` an exact algorithm to minimize mixed - radix exclusive sums of products for incompletely specified boolean functions , '' in _ ieee iscas _",
    ", vol .  2 , pp .",
    "16521655 , 1990 .",
    "t.  sasao , `` an exact minimization of and - exor expressions using reduced covering functions , '' in _ in proceedings of the synthesis and simulation meeting and international interchange _ , pp .  374383 , 1993 .",
    "w.  n.  n. hung , x.  song , g.  yang , j.  yang , and m.  perkowski , `` quantum logic synthesis by symbolic reachability analysis , '' in _ proceedings of the 41st annual design automation conference _",
    ", dac 04 , pp .",
    "838841 , 2004 ."
  ],
  "abstract_text": [
    "<S> reversible logic circuit is a necessary construction for achieving ultra low power dissipation as well as for prominent post - cmos computing technologies such as quantum computing . </S>",
    "<S> consequently automatic synthesis of a boolean function using elementary reversible logic gates has received significant research attention in recent times , creating the domain of reversible logic synthesis . in this paper , we study the complexity of reversible logic synthesis . </S>",
    "<S> the problem is separately studied for bounded - ancilla and ancilla - free optimal synthesis approaches . the computational complexity for both cases </S>",
    "<S> are linked to known / presumed hard problems . </S>",
    "<S> finally , experiments are performed with a shortest - path based reversible logic synthesis approach and a ( 0 - 1 ) ilp - based formulation . </S>"
  ]
}