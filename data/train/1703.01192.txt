{
  "article_text": [
    "many widely used applications read and write documents in a domain specific language based on xml @xcite or json @xcite . this paper and accompanying source code ( github.com/breck7/tree )",
    "present a new whitespace - based notation that can serve a similar purpose but with a grammar roughly one - tenth the size of xml or json .",
    "this paper describes the notation and three of its advantages when used as a document encoding .",
    "tree notation encodes two data structures .",
    "the first is a * tree * , which is an array of nodes .",
    "the second is a * node * , which may contain a line of content and also may contain a tree ( enabling recursion ) .",
    "tree notation defines three tokens : a node separator ( `` \\n '' ) , a node edge ( `` ' ' ) , and a node pair separator ( `` ' ' ) .",
    "a comparison quickly illustrates nearly the entirety of the notation :    json :    .... {   \" title \" : \" about ada \" ,   \" stats \" : {    \" pageviews \" : 42   } } ....    tree notation :    .... title about ada stats   pageviews 42 ....",
    "tree notation s grammar , while minimal , provides a natural way to represent complex data structures like maps , sets , vectors , n - dimensional matrixes , tuples , structs , and arrays , with or without recursion .",
    "tree provides the two base data structures but a dsl building upon those can represent any of these complex structures as well as primitives . any structure currently encoded in a json or xml document",
    "can be represented in tree , even preserving data types with an appropriate dsl .",
    "in addition , tree notation has a few advantages when compared to other document formats .",
    "when a document is composed of blocks written in multiple languages , those blocks may require verbose encoding to accomodate the underlying base notation .    in the example snippet",
    "below , a json - backed ipython notebook encodes python to json .",
    "the resulting document is more complex :    .... {   \" source \" : [    \" import matplotlib.pyplot as plt\\n \" ,    \" import numpy as np\\n \" ,    \" print(\\\"ok\\ \" ) \"    ] } ....    with tree notation , the python block is indented and requires no additional transformation :    .... source   import matplotlib.pyplot as plt   import numpy as np   print(\"ok \" ) ....",
    "json and xml serializers can encode the same object to different documents by varying whitespace .",
    "although ignoring whitespace can be a useful feature in a language , it can also lead to large diffs  and sometimes merge conflicts  for small or non - existant semantic changes , because of different serialization implementations .    in tree notation",
    ", there is one and only one way to serialize an object .",
    "diffs contain only semantic meaning .",
    "tree notation does not have parse errors .",
    "every document is a valid tree notation document .",
    "errors only occur at the higher dsl level ( i.e. a mistyped property name ) .",
    "typos made at the spot of a tree notation token affect only the local nodes .",
    "with other base encodings , to get from a blank document to a certain valid document in keystroke increments requires stops at invalid documents . with tree notation",
    "all intermediate steps are valid .    segments of a document may be edited at runtime with no risk of breaking the parsing of the entire document .",
    "a developer working on an editor that allows a user to edit the document source does not have to worry about handling both errors at the dsl level and errors at the base notation level .",
    "the latter class of errors is eliminated with tree notation .",
    "while this paper s primary purpose is to introduce tree notation and highlight some benefits , it is relevant to also address a few obvious drawbacks of the language .",
    "xml and json are now ubiquitous , with json alone having over 250 widely used and well tested implementations in over 50 programming languages @xcite .",
    "tree notation is new , and library and application support , compared to other popular base notations , rounds to zero .    despite the lack of widespread support at present , because of the ease of implementation and intrinsic benefits mentioned above , tree notation may still be worthwhile in certain applications .      some popular formats , including json , specify encodings for common primitive types like booleans and numbers .",
    "encoded documents can then be parsed directly to the matching data structures in memory .",
    "the base tree notation is relatively bare and delegates the encoding and decoding of additional types to the implementation or dsl . thus parsing a tree document into the desired data structures requires an additional specification and/or parse step .",
    "this may not be a significant disadvantage , however . as noted by others @xcite ,",
    "rarely are the primitive data structures in a base level encoding like json enough to fully describe a structure , and in practice a higher level specification and additional parse step is used .",
    "tree s permissive , antifragile grammar enables experimentation and may lead to the development of beneficial higher level notations over time that build on tree without introducing backwards incompatibilities .",
    "some developers dislike indentation - based encodings .",
    "in addition , a tree structure in tree notation extends over multiple lines , with one node per line , whereas other notations may benefit from a denser display of information , with multiple nodes per line .",
    "tree notation can serve as an alternative to json or xml for a base level encoding for a dsl .",
    "tree supports clean multi - lingual composition , aligns well with version control paradigms , and has a permissive base grammar that allows for robust runtime editing .    with more tooling support and further experimentation",
    ", tree notation may improve developer productivity and enable new beneficial design patterns in document editors .",
    ".... tree    nodes : node [ ] ;    new(str , nodesep=\"\\n\",edgechar= \" \" , pairchar= \" \" ): tree ;    node    name : string ;    value ?",
    ": string ;    tree ? : tree ; ....",
    "note : a bare implementation can drop the pairchar and replace the name and value members with a single `` line : string '' member .",
    ".... grammar tree ;    tree : node+ ;    node : edge name ?",
    "newline ?   | name separator ?",
    "newline ?",
    "| newline ;    edge : space+ ; name : stringchar+ ; value : ( stringchar|space)+ ; separator : space ;    space : ' ' ; newline : ' \\n ' ; stringchar : ~ [ \\n ] ; ....",
    ".... o :   s : title about ada   o : stats    n : pageviews 42 ...."
  ],
  "abstract_text": [
    "<S> a new minimal notation is presented for encoding tree data structures . </S>",
    "<S> tree notation may be useful as a base document format for domain specific languages .    </S>",
    "<S> shell : bare demo of ieeetran.cls for journals </S>"
  ]
}