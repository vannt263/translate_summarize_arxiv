{
  "article_text": [
    "meanders @xcite form a set of combinatorial problems concerned with the enumeration of self - avoiding curves crossing a line through a given number of points .",
    "meanders are considered distinct up to any smooth deformation .",
    "this problem seems to date back at least to work of poincar on differential geometry @xcite .",
    "since then it has from time to time been studied by mathematicians in various contexts such as the folding of a strip of stamps @xcite or folding of maps @xcite .",
    "more recently it has been related to enumerations of ovals in planar algebraic curves @xcite and the classification of 3-manifolds @xcite . during the last decade or so has it has received considerable attention in other areas of science . in computer science meanders",
    "are related to the sorting of jordan sequences @xcite and have been used for lower bound arguments @xcite . in physics meanders",
    "are relevant to the study of compact foldings of polymers @xcite , properties of the temperley - lieb algebra @xcite , matrix models @xcite , and defects in liquid crystals and @xmath2 dimensional gravity @xcite .",
    "the difficulty in the enumeration of most interesting combinatorial problems is that , computationally , they are of exponential complexity .",
    "that is to say , the time it takes to calculate the first @xmath0 terms in the generating function grows asymptotically as @xmath3 , where @xmath4 is the growth rate .",
    "initial efforts at computer enumeration of meanders were based on direct counting .",
    "independently , koehler @xcite and lunnon @xcite , studied the number of ways of folding a strip of stamps ( or a map ) of length @xmath0 , and published result up to , respectively , @xmath5 and 24 .",
    "lando and zvonkin @xcite studied closed meanders , open meanders and multi - component systems of closed meanders , and calculated the number of open meanders up to @xmath6 and the number of closed meanders up to @xmath7 .",
    "the calculation of the number of closed meanders was subsequently extended up to @xmath5 by pratt @xcite .",
    "di francesco _",
    "studied semi - meanders , a problem equivalent to the stamp folding problem @xcite , and extended the calculation to @xmath8 @xcite , in addition they studied numerous other problems including that of multi - component systems of semi - meanders .",
    "few exact and mathematically rigorous results have been obtained for any of the many meander problems . however , in a recent paper it was conjectured that some of the meander problems can be related to a gravitational version of a certain loop model @xcite . from the conformal field theory of the model , conjectures were proposed for the exact critical exponent of closed and open meanders , @xmath9 , as well as the exponent for semi - meanders , @xmath10 .",
    "this work has recently been extended to multi - component systems of closed and semi - meanders @xcite and to various other geometries .",
    "conjectures were given for the critical exponents as functions of the loop - fugacity @xmath11 .",
    "these were checked numerically @xcite and found to be correct within numerical error .",
    "in a recent paper @xcite we analysed extended series for the meander generating functions . using the numerical technique of differential approximants @xcite we obtained accurate estimates for the exponents and found that the conjecture for the semi - meander exponent is unlikely to be correct ,",
    "while the conjecture for closed meanders is just consistent with the results from the analysis .",
    "the purpose of this paper is to give a detailed description of the new and improved algorithm used to derive the series studied in @xcite .",
    "while the algorithm still has exponential complexity , the growth rate is much smaller than that experienced with direct counting , and consequently the calculation can be carried much further .",
    "the algorithm is easily modified to enumerate various multi - component systems of closed meanders , semi - meanders or open meanders .",
    "in particular we have extended the calculation for closed meanders up to @xmath12 , for open meanders up to @xmath13 , and for semi - meanders up to @xmath14 .    in section  [ sec",
    ": def ] we shall briefly describe some meander problems and define the meandric numbers . section  [ sec : enum ] contains a detailed description of the transfer matrix algorithm for the enumeration of closed meanders and an outline of generalisations to other problems .",
    "finally we give our conclusions in section  [ sec : conclusion ] .",
    "a _ closed meander _ of order @xmath0 is a closed self - avoiding curve crossing an infinite line @xmath1 times ( see figure  [ fig : meanclose ] ) .",
    "the meandric number @xmath15 is simply the number of such meanders distinct up to smooth transformations .",
    "note that each meander forms a single connected curve . the number of closed meanders is expected to grow exponentially , with a sub - dominant term given by a critical exponent , @xmath16 .",
    "the exponential growth constant @xmath17 is often called the _ connective constant_. the generating function is expected to behave as    @xmath18    and hence have a singularity at @xmath19 with exponent @xmath20 .",
    "a few examples of closed meanders of order 2 and 3 , respectively . ]",
    "we can extend the definition to _ multi - component systems of closed meanders _",
    ", where we allow configurations with several disconnected closed meanders .",
    "the meandric numbers @xmath21 are the number of meanders with @xmath1 crossings and @xmath22 components , and we thus obtain the more general generating function :    @xmath23    obviously , @xmath24 , and @xmath25 .",
    "an example of a multi - component meander system with several pieces is shown in figure  [ fig : meansys ] .",
    "in addition one could also look at further restrictions on these systems .",
    "two obvious examples would be to exclude configurations where meanders are nested within one another or where meanders can be separated from one another , i.e. , all smaller meanders are completely enclosed within a larger meander .",
    "an example of a system of closed meanders of order 7 with 3 components . ]    an _ open meander _ of order @xmath0 is a self - avoiding curve running from west to east while crossing an infinite line @xmath0 times ( see figure  [ fig : meanopen ] ) .",
    "the number of such curves is @xmath26 and we can define a generating function for this problem in analogy with ( [ eq : meangen ] ) . it should be noted @xcite that @xmath27 , and hence the critical exponent is identical to that of closed meanders and the connective constant is @xmath17 .",
    "an example of an open meander of order 11 . ]     two examples of semi - meanders .",
    "the first of these has one component , crosses the line 7 times and winds around the origin once , while the second has 4 components crosses the line 7 times and winds around the origin 3 times . ]    finally , instead of looking at crossings of an infinite line one could consider a semi - infinite line and allow the curve to wind around the end - point of the line @xcite .",
    "semi - meander _ of order @xmath0 is a closed self - avoiding curve crossing the semi - infinite line @xmath0 times . the number of semi - meanders of order @xmath0 is denoted by @xmath28 and we define a generating function as in ( [ eq : meangen ] ) . in this case",
    "a further interesting generalisation is to study the number of semi - meanders @xmath29 which wind around the end - point of the line exactly @xmath30 times .",
    "again we could also study systems of multi - component semi - meanders according to the number of independent meanders .",
    "two semi - meanders are shown in figure  [ fig : meansemi ] .",
    "the method used to enumerate meanders is based on the transfer matrix algorithm devised by enting @xcite in his pioneering work on the enumeration of self - avoiding polygons . derrida @xcite used a similar algorithm to study self - avoiding walks .",
    "the transfer matrix technique involves drawing a boundary line perpendicular to the infinite line .",
    "the intersection between the boundary and a given meander results in a set of loop - ends .",
    "each loop - end is connected ( to the left of the boundary ) to at most one other loop - end . in the case of",
    "closed meanders the matching is perfect and each loop - end is connected to exactly one other loop - end . in the case of open meanders",
    "there is in addition one and only one loop - end which is free and therefore not connected to any other loop - ends , as illustrated in figure  [ fig : intersect ] . in addition to the information describing the configuration of loop - ends , and how they are connected , we need to know where the infinite line is situated within the loop - ends .",
    "this can be done simply by specifying how many loop - ends lie beneath the infinite line . for each such configuration",
    "we keep count of all the possible ( partially completed ) meanders which gives rise to that particular configuration of loop - ends .",
    "meanders can then be enumerated by successive moves of the boundary line , so that exactly one crossing is added with each move .",
    "an extra crossing is added _ either _ by putting in a new loop across the infinite line _ or _ by taking an existing loop - end immediately above / below the line and dragging it to the other side .",
    "these general remarks hold for all the meander enumeration problems . in the following we give a detailed description of the algorithm used in the enumeration of closed connected meanders .",
    "afterwards we describe how to generalise the method to other meander problems .",
    "examples of loop - configurations along the boundary ( vertical line ) during the transfer matrix calculation for closed meanders ( left panel ) and open meanders ( right panel ) .",
    "numbers along the boundary give a possible encoding of the loop - ends in the partially completed meander . ]      in the enumeration of closed connected meanders the two major constraints which must be observed are self - avoidance and the constraint that all meanders constructed during the calculation must consist of a single connected component . as we move the boundary line , the partially completed meanders will consist of a number of disjoint loop segments , which must be connected to each other if a valid closed meander is to be produced .",
    "a pair of loops can be placed relative to one another in two distinct ways , namely , side by side or nested , as shown in the left panel of figure  [ fig : looppair ] . in each case",
    "it is possible to connect the loop - ends so as to form a single loop ( middle panel ) or so as to form graphs with two separate components ( right panel ) .",
    "it is connections equivalent to these latter cases which we must avoid .",
    "so the constraint , which must be observed in order to avoid separate components , is that a loop can be closed on itself only if the boundary intersects no other loops .",
    "illustration of how two partial loops can be placed ( a ) , how they can be connected to from a single loop ( b ) , and connections leading to graphs with more than one component ( c ) . ]    to avoid loops closing on themselves we have to label the loop - ends so we can keep track of how they are connected to one another .",
    "one scheme would be to assign a unique label to each loop as indicated in figure  [ fig : intersect ] .",
    "however , due to the two - dimensional nature of the problem and since the curve making up a meander is self - avoiding , there is a scheme better suited to a computer algorithm .",
    "each configuration of loop - ends can be represented by an ordered set of states @xmath31 , where    @xmath32    it is easy to see that this encoding uniquely describes which loop - ends are connected . in order to find the upper loop - end , matching a given lower end , we start at the lower end and work upwards in the configuration counting the number of  0 s and  1 s we pass ( the ` 0 ' of the initial lower end is _ not _ included in the count ) .",
    "we stop when the number of  1 s exceeds the number of  0 s .",
    "this ` 1 ' marks the matching upper end of the loop .",
    "it is worth noting that there are some restrictions on the possible configurations .",
    "firstly , every lower loop - end must have a corresponding upper end , and it is therefore clear that the total number of  0 s is equal to the total number of  1 s . secondly , as we look through the configuration starting from the bottom the number of  0",
    "s is never smaller than the number of  1 s .",
    "those familiar with algebraic languages will immediately recognise that each configuration of labelled loop - ends forms a dyck word ( see @xcite ) .",
    "the total configuration of loop - ends and their placement relative to the infinite line can thus be described by a pair of integers @xmath33 , where @xmath34 is the number of loop - ends below the infinite line and @xmath35 is the integer whose binary representation corresponds to the configuration of loop - ends .",
    "we shall call such a @xmath33-pair a _ signature _ , and in practise we represent it by a 64-bit integer with the first 6 bits coding @xmath34 and the remaining bits coding @xmath35 . in the following",
    "we shall often explicitly write out the binary representation , @xmath36 of @xmath35 , and use the notation @xmath37 to mean a configuration of loop - ends obtained by concatenating the binary strings @xmath38 and @xmath39",
    ".     positions of the boundaries ( dashed lines ) during the transfer matrix calculation .",
    "numbers along the boundaries give the encoding of the loop structure of the intersection with the partially completed meander to the left of the boundaries . ]",
    "the algorithm for enumerating closed connected meanders is :    1 .",
    "set the maximum order @xmath0 of the meandric numbers we wish to calculate .",
    "start with the signature @xmath40 with a count of 1 , that is one loop crossing the infinite line .",
    "set the number of crossings @xmath41 .",
    "set the meandric number @xmath42 .",
    "next move the boundary one step ahead and add one more crossing , @xmath43 , to all existing signatures .",
    "a new crossing is added either by putting in an additional loop or by dragging an existing loop - end ( immediately above or below ) across the infinite line . + adding : : :    a new loop is inserted simply by taking an existing _ source _ signature    @xmath44 , where @xmath38    ( @xmath39 ) is the configuration of loop - ends below ( above )    the infinite line , and creating a new _ target _ signature    @xmath45 .",
    "the count of the source is added    to the count of the target .",
    "this first type of move is illustrated in    figure  [ fig : transfer ] where in moving to position 2 we generate the    target signature @xmath46 from the source    @xmath40 .",
    "additional loops are also inserted while    moving to positions 4 and 7 . dragging",
    ": : :    as we cross the infinite line with an existing loop - end we _ either _    leave it at that _ or _ we may be allowed to connect the loop - end to the    loop - end on the other side of the infinite line .    +    no connection : ; ;      from the source @xmath33 we produce the the two targets      @xmath47 and @xmath48 , by dragging a      loop - end from below to above and vice versa .",
    "both these updates are      allowed provided @xmath49 and      @xmath50 , where @xmath51 is the number      of  1 s in @xmath35 . for @xmath52 only the target      @xmath53 is allowed and for @xmath54 only the      target @xmath47 is allowed .",
    "examples of these moves are      given in figure  [ fig : transfer ] when moving to positions 3 , 5 , 8 and      11 .",
    "connecting loop - ends : ; ;      there are four distinct cases depending on whether the loop - ends      below and above are of type ` 0 ' or ` 1 ' .",
    "+      case 00 : : :        in this case we connect a lower loop - end from below the line to a        lower loop - end above the line . from a source",
    "@xmath55 we generate the target        @xmath56 , where the symbol        @xmath57 indicates that this string is changed        via further processing .",
    "this is so because by connecting the two        lower loop - ends an upper loop - end elsewhere in the old        configuration @xmath39 becomes a lower loop - end in the        new configuration @xmath57 .",
    "an example of this        type of relabelling is shown in figure  [ fig : transfer ] where in the        move to position 9 we see that the signature        @xmath58 before the step becomes the        configuration @xmath59 after the step . that is ,        the upper end of the third loop before the step becomes the lower        end of the second loop after the step .",
    "in general the nesting of        loops could be more complicated and the general rule for the        relabelling of the configuration is as follows : when connecting        two  0",
    "s we work upwards in the configuration , counting the number        of  0 s and  1 s we pass until the number of  1 s exceeds the        number of  0 s .",
    "this ` 1 ' is the matching end of the inner loop and        it should now be changed to a ` 0 ' , thus becoming the lower end of        the outer loop ( drawing a few further figures should make this        relabelling clearer ) .",
    "case 10 : : :        in this case we connect an upper loop - end from below to a lower        loop - end above .",
    "so from a source @xmath60 we        generate the target @xmath61 .",
    "case 01 : : :        this is never allowed since it would result in a closed loop and        thus generate graphs with separate components .",
    "the only exception        is when there are no other loop - ends in @xmath35 , but this        case is dealt with in 3 .",
    "case 11 : : :        in this case we connect an upper loop - end from below the line to        an upper loop - end above the line . from a source",
    "@xmath62 we generate the target        @xmath63 .",
    "the rule for the        relabelling of @xmath38 @xmath64 is        similar to the case ` 00 ' , but we work downwards in the string        @xmath38 until we find the unmatched lower loop - end ,        which is then changed to an upper loop - end .",
    "+ note that all of the above moves may be allowed .",
    "so from a given source we can generate up to four targets , by adding a new loop , by dragging a loop - end from below to above the infinite line , doing the reverse , or by connecting two loop - ends across the infinite line .",
    "as we move along and generate new target signatures their counts are calculated by adding up the count for the various source signatures which could generate that target .",
    "for example the target @xmath46 is generated from the sources @xmath40 , @xmath59 , @xmath65 , and @xmath66 , by , respectively , putting in an additional loop , moving a loop - end below the line , moving a loop - end above the line and connecting two loop - ends across the line .",
    "if @xmath67 is odd then set @xmath68 and extract the meandric number @xmath69 as the count of the signature @xmath40 .",
    "this is the only case in which we are allowed to close a loop . doing so obviously adds one more crossing .",
    "4 .   if @xmath70 go to 2 .",
    "not all possible signatures that can be generated in a calculation to order @xmath0 are actually required .",
    "the main restriction is that no meanders should have more than @xmath1 crossings .",
    "since each move adds one more crossing and reduces the number of loop - ends above / below the infinite line by at most one , it is clear that for a given signature we have to add at least @xmath71 additional crossings in order to produce a closed meander . thus if , for a given signature , @xmath72 , we can discard the signature since it would contribute only to a meandric number exceeding the order to which we wish to carry out the calculation .",
    "further savings of a factor of almost 2 is obtained by using the symmetry with respect to reflection in the infinite line . a further factor of approximately 2 is obtained as follows . note that @xmath73 is the minimum number of additional crossings and that for some signatures further crossings are needed .",
    "the most obvious case is when the loop - ends above and below the infinite line are connected to one another . in this case",
    "we can not connect the two ends and first we have to move one of the loop - ends across the line .",
    "so when @xmath74 , this results in at least two extra crossings . in the general case one can readily write an algorithm to count the actual number of additional crossings required , and as stated above this results in a saving of close to 2 in the number of signatures one need retain .        as we noted above connecting a ` 0 ' below the line to a ` 1 ' above the line results in a closed loop .",
    "failure to observe the restriction on this closure would result in graphs with disconnected components , either one closed meander over another or one closed meander within another .",
    "obviously these are just the types of graphs required in order to enumerate multi - component systems of closed meanders .",
    "so by noting that each such closure adds one more component it is straightforward to generalise the algorithm to enumerate systems of closed meanders .",
    "the only major change is that , rather than just storing the number of partially completed meanders , for each signature we have to store a generating function , that is a polynomial giving the number of partially completed meanders with @xmath22 components , where @xmath75 .",
    "open meanders are a little more complicated .",
    "the first part of the necessary generalisation consists in adding an extra piece of information to our signature .",
    "we have to keep track of a single free end by specifying its position within the configuration of connected loop - ends .",
    "one simple way of doing this is , in analogy with the infinite line , to specify the number , @xmath76 , of ( connected ) loop - ends below the free end , so that @xmath77 is the position of the free end as counted from the bottom .",
    "so a configuration is now described by a signature @xmath78 .",
    "naturally , we also have to generalise the algorithm described above .",
    "we now start with the signature @xmath79 , that is a single free end below the infinite line , and no crossings .",
    "the updating rules for adding a new crossing are very similar to the ones described above for closed meanders .",
    "one difference is that when a new loop is added ( two loop - ends joined ) below the free end , @xmath77 is increased ( decreased ) by 2 .",
    "we also need to consider what happens when joining the free end to a connected loop - end . in this case",
    "we have to change the matching end of the connected loop to the new free end in the target signature and we have to change @xmath77 accordingly .",
    "an example illustrating this is shown in figure  [ fig : freejoin ] .",
    "the updating rule when the free end does not join with the loop - end on the other side is obviously just to increase ( decrease ) @xmath34 by 1 as the free end is moved below ( above ) the line .",
    "an example of the transformation of a signature as the free end is joined to a loop - end . in this case",
    "the source signature @xmath80 gives rise to the target @xmath81 .",
    "]      finally , in order to enumerate semi - meanders all we need do is change the starting configuration .",
    "we now start in a position just before the first crossing of the semi - infinite line with @xmath30 loops nested with one another . by running the algorithm for each @xmath30 from 0 to @xmath0 we can count all semi - meanders with up to @xmath0 crossings .",
    "the generalisation to multi - component systems of semi - meanders is the same as for closed meanders .      using the new algorithm we have calculated @xmath15 up to @xmath12 as compared to the previous best of @xmath5 obtained by v. r. pratt @xcite . to fully appreciate the advance",
    "it should be noted that the computational complexity grows exponentially , that is the time required to obtain @xmath0 term grows asymptotically as @xmath82 . for direct enumerations time is simply proportional to @xmath15 and thus @xmath83 . thus extending the count of the meandric number from 16 to 24 by direct counting",
    "would have required approximately @xmath84 as much cpu time as the calculation of the first 16 terms .",
    "the transfer matrix method employed in this paper is far more efficient . in figure",
    "[ fig : numconf ] we have plotted the maximum number of signatures required in order to calculate the number of closed meanders up to order @xmath0 .",
    "as can be seen , the number of signatures grows exponentially with @xmath0 , and the numerical evidence suggests that the computational complexity is such that @xmath85 , which obviously is a very significant improvement on direct counting .",
    "the drawback of the transfer matrix method is that , since we need to store all the different signatures , the memory requirement of the algorithm also grows exponentially with growth rate @xmath86 , whereas direct counting algorithms typically have memory requirements which are linear in @xmath0 .",
    "in fact it is exactly the memory requirement which is the major limitation of the transfer matrix method .",
    "the calculations reported in this paper used up to 2 gb of memory and typically took a few days of cpu time .     the number of distinct signatures required during the transfer matrix calculation of the number of closed meanders with @xmath1 crossings . the solid line , drawn as a guide to the eye , corresponds to a growth rate @xmath87 . ]    di francesco et al . @xcite carried out a more detailed analysis of the complexity of the algorithm as it applies to multi - component systems of closed meanders and obtained the estimate @xmath88 , for the number of signatures , very close to the purely empirical estimate obtained here .",
    "another way of gauging the improved efficiency is to note that the calculations for semi - meanders carried out in @xcite were `` done on the parallel cray - t3d ( 128 processors ) of the cea - grenoble , with approximately 7500 hours @xmath89 processors . '' or in total about 100 years of cpu time .",
    "the equivalent calculations can be done with the transfer matrix algorithm in about 15 minutes on a single processor workstation !      finally a few remarks of a more technical nature .",
    "the number of contributing configurations becomes very sparse in the total set of possible states along the boundary line and as is standard in such cases one uses a hash - addressing scheme @xcite .",
    "since the integer coefficients occurring in the expansion become very large , the calculation was performed using modular arithmetic @xcite .",
    "this involves performing the calculation modulo various prime numbers @xmath90 and then reconstructing the full integer coefficients at the end . in calculations involving only single component meanders most of the memory is used storing the signatures so we used primes of the form @xmath91 .",
    "the chinese remainder theorem ensures that any integer has a unique representation in terms of residues .",
    "if the largest integer occurring in the final expansion is @xmath92 , then we have to use a number of primes @xmath93 such that @xmath94 .",
    "up to 3 primes were needed to represent the coefficients correctly . in calculations involving systems of multi - component",
    "meanders the main storage requirement comes from the generating functions . in order to save memory",
    "we used primes of the form @xmath95 so that the residues of the coefficients in the polynomials could be stored using 16 bit integers . in this case",
    "we used up to 6 primes .",
    "we have presented an improved algorithm for the enumeration of plane meanders .",
    "the computational complexity of the algorithm for the problem of closed meanders is estimated to be @xmath96 , much better than direct counting algorithms which have complexity @xmath97 . implementing this algorithm enabled us to obtain closed meanders up to order @xmath12 , compared to the previous best of @xmath5 .",
    "we also counted the number of open meanders up to order @xmath13 and semi - meanders up to order @xmath14 . from our extended series",
    "we obtained precise estimates for the connective constants and critical exponents @xcite .",
    "this showed that a recent conjecture for the exact value of the semi - meander critical exponent is unlikely to be correct , while the conjectured exponent value for closed and open meanders is just consistent with the results from the analysis .",
    "the series for the various generating functions so far generated with this algorithm and studied in @xcite can be obtained via e - mail by sending a request to i.jensen@ms.unimelb.edu.au or via the world wide web on the url http://www.ms.unimelb.edu.au/ iwan/ by following the instructions .",
    "financial support from the australian research council is gratefully acknowledged ."
  ],
  "abstract_text": [
    "<S> a closed plane meander of order @xmath0 is a closed self - avoiding curve intersecting an infinite line @xmath1 times . </S>",
    "<S> meanders are considered distinct up to any smooth deformation leaving the line fixed . </S>",
    "<S> we have developed an improved algorithm , based on transfer matrix methods , for the enumeration of plane meanders . </S>",
    "<S> while the algorithm has exponential complexity , its rate of growth is much smaller than that of previous algorithms . </S>",
    "<S> the algorithm is easily modified to enumerate various systems of closed meanders , semi - meanders , open meanders and many other geometries . </S>"
  ]
}