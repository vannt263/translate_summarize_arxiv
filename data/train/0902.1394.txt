{
  "article_text": [
    "nowadays , peer - to - peer ( p2p ) overlay live streaming systems are of significant interest , thanks to their low implementation complexity , scalability and reliability properties , and ease of deployment .",
    "leveraging on the well understood p2p communication paradigm , the viability to deliver live streaming content on top of a self - organizing p2p architecture has been widely assessed both in terms of research contributions , as well as in terms of real - life applications .    in principle , the most natural and earlier solution for deploying a p2p streaming system was to organize peer nodes in one or more overlay multicast trees , and hence continuously deliver the streamed information across the formed paths .",
    "this is the case in @xcite .",
    "however , in practice , this approach may not be viable in large - scale systems and with nodes characterized by intermittent connectivity ( churn ) .",
    "in fact , whenever a node in the middle of a path abruptly disconnects , complex procedures would be necessary to i ) allow the reconstruction of the distribution path , and ii ) allow the nodes affected by such event to recover the amount of information lost during the path reconfiguration phases .",
    "to overcome such limitations , a completely different approach , called _ data - driven _",
    ", delivers content on the basis of content availability information , locally exchanged among connected peers , without any a priori pre - established path .",
    "this approach essentially creates a mesh topology among overlay nodes .",
    "several proposed solutions , such as @xcite , adopt the data - driven approach .    in this paper we focus on _ chunk - based",
    "_ systems , where , similarly to most file - sharing p2p applications , the streaming content is segmented into smaller pieces of information called chunks .",
    "chunks are elementary data units handled by the nodes composing the network in a store - and - forward fashion",
    ". a relaying node can start distributing a chunk only when it has completed its reception from another node .",
    "while the solutions based on multicast overlay trees usually organize the information in form of small ip packets to be sequentially delivered across the trees and can not be regarded as chunk - based , some data - driven solutions , like the ones proposed in @xcite , may be regarded as chunk - based .",
    "a characterizing feature of the chunk - based approach is that , in order to reduce the per - chunk signalling burden , the chunk size is typically kept to a fairly large value , greater than the typical packet size .    in this paper",
    "we raise some very basic and foundational questions on chunk - based systems : what are the theoretical performance limits , with specific attention to delay , that _ any _ chunk - based peer - to - peer streaming system is bounded to ? which fundamental laws describe how performances depend on network parameters such as the available bandwidth or system parameters such as the number of nodes",
    "a peer may at most connect to ? and which are the system topologies and operations which would allow to approach such bounds ?",
    "the aim of this paper is to answer these questions .",
    "the answer is completely different from the case of systems where the streaming information , optionally organized in sub - streams , is continuously delivered across overlay paths ( for a theoretical investigation of such class of approaches refer to @xcite and references therein contained ) .",
    "as we will show , in our scenario the time needed for a chunk to be forwarded across a node significantly affects delay performance .",
    "in more detail , we focus on the ability to reach the greatest possible number of nodes in a given time interval ( this will be later on formally defined as `` stream diffusion metric '' ) or equivalently the ability to reach a given number of nodes in the smallest possible time interval ( i.e. absolute delay ) .",
    "we derive analytic expressions for the maximum asymptotic stream diffusion metric in an homogeneous network composed of stable nodes whose upload bandwidth is the same ( for simplicity , multiple of the streaming rate ) .    with reference to such homogeneous and ideal scenario",
    ", we show how this bound relates to two fundamental parameters : the upload bandwidth available at each node , and the number of neighbors a node may deliver chunks to . in addition , we show that the serialization of chunk transmissions and the organization of peer nodes into multiple overlay unbalanced trees allow to achieve the proposed bound .",
    "this suggests that the design of real - world applications could be driven by two simple basic principles : i ) the serialization of chunk transmissions , and ii ) the organization of chunks in different groups so that chunks in different groups are spread according to different paths . as a matter of fact , in a companion paper @xcite , we have indeed presented a simple data - driven heuristic , called _ o - streamline _ , which exploits the idea of using serial transmissions over multiple paths and relies on a pure data - oriented operation ( i.e. chunk paths are not pre - established ) .",
    "such heuristic successfully achieves performances close to the ones of the theoretical bound .",
    "this paper is organized as follows .",
    "section [ s : moti ] explains the rational behind this work .",
    "section [ s : bound ] introduces the stream diffusion metric and derives the relative bound . the overlay topology that allows to achieve the presented bound",
    "is described in section [ s : algo ] .",
    "sections [ s : perfo ] presents some performance evaluation results .",
    "section [ s : related ] reviews the related work .",
    "finally , section [ s : conclu ] concludes the paper .",
    "goal of this section is to clarify why p2p _ chunk - based _ streaming systems have significantly different performance issues with respect to streaming systems , where the information content continuously flows across one or more overlay paths or trees .",
    "unless ambiguity occurs , such systems will be referred to as , with slight abuse of name , _ flow - based _ systems .",
    "more precisely , we will show that i ) theoretical bounds derived for the flow - based case may not be representative for chunk - based systems , and new , _ fundamentally different _ , bounds are needed , ii ) the methodological approaches which are applicable in the two cases are completely diverse , and fluidic approaches may be replaced with inherently discrete - time approaches where , as shown later on , @xmath0-step fibonacci series and sums enter into play .",
    "we recall that `` flow - based '' system denotes a stream distribution approach where the streaming information , possibly organized in multiple sub - streams , is delivered with continuity across one or more overlay network paths .",
    "clearly , in the real ip world , continuous delivery is an abstraction , as the streaming information will be delivered in the form of ip packets .",
    "however , the small size of ip packets yields marginal transmission times at each node . as such , the remaining components that cause delay over an overlay link ( propagation and path delay because of queueing in the underlying network path ) may be considered predominant .",
    "we can conclude that the delay performances of flow - based systems ultimately depend on the delay characterizing a path between the source node and a generic end - peer . more specifically ,",
    "if we associate a delay figure to each overlay link , then the source to destination delay depends on the sum of the link delays : the transmission times needed by the flow to `` cross '' a node may be neglected , or , more precisely , they play a role only because the ` crossed' nodes compose the vertices of the overlay links , whose delays dominate the overall delay performance .    as a consequence ,",
    "the delay performance optimization becomes a minimum path cost problem , as such addressed with relevant analytical techniques .",
    "if we further assume that the network links are homogeneous ( i.e. characterized by the same delay ) , then the problem of finding a delay performance bound is equivalent to finding what is the minimum depth of the tree ( or multiple trees ) across which the stream is distributed . this problem has been thoroughly addressed in @xcite , under the general assumption that a stream may be subdivided into sub - streams ( delivered across different paths ) , and that each node may upload information to a given maximum number of children .",
    "for instance , if we assume no restriction on the number of children a node may upload to , then it is proven in @xcite that a tree depth equal to two is always sufficient .",
    "this is indeed immediate to understand and visualize in the special case of all links with a `` sufficient '' amount of available upload bandwidth - see figure [ fig:2a ] for a constructive example , while each peer node has a bandwidth at least equal to @xmath1 , being @xmath2 the number of peer nodes composing the overlay .",
    "as shown in @xcite the same result holds under significantly less restrictive assumptions on the available bandwidth . ] .    ,",
    "ii ) delivering each sub - stream to a different node , and iii ) letting each node @xmath3 replicate and deliver the @xmath3-th sub - stream to the remaining @xmath4 nodes . ]    at this stage , it should be clear that , in the context of flow - based systems , as long as some feasibility conditions are met ( see e.g. @xcite ) , the bandwidth available on each link plays a limited role with respect to the delay performance achievable .",
    "this is clearly seen by looking again at figure [ fig:2a ] : if for instance we double the bandwidth available on each link , the delay performances do not change ( at least until the source is provided with a large enough amount of bandwidth to serve all peers in a single hop ) .      chunk - based systems",
    "have a key difference with respect to flow - based systems : the streaming information is organized into chunks whose size is significantly greater than ip packets .",
    "since a peer must complete the reception of a chunk before forwarding it to other nodes ( i.e. chunks are delivered in a store - and - forward fashion ) , the obvious consequence is that delay performance are mostly affected by the chunk transmission time .",
    "thus , in terms of delay performance , the behavior of chunk - based systems is opposite to the one of flow - based systems . not only chunk transmission times can not be neglected anymore with respect to link - level delays ( propagation and underlying network queueing ) , but also we can safely assume that in most scenarios any other delay component at the link - level has negligible impact when compared with the chunk transmission times",
    "this consideration can be restated as : the delay performances of chunk - based systems do not depend on the sum of the delays experienced while traveling over an overlay link , but depend on the sum of the delays experienced while _ crossing a node_.    from a superficial analysis , one might argue that the overall delay optimization problem does not change . in fact",
    ", the transmission delay of a chunk at a given node could be attributed to the overlay link over which the chunk is being transmitted , and , also in this case , the optimization could be stated as a minimum path cost problem .",
    "however , a closer look reveals that this is not at all the case .",
    "the reasons are manifold and can be illustrated with the help of figure [ fig:2b ] . in this figure , and consistently throughout the paper , we rely on the following notation .",
    "@xmath5 is the chunk size ( in bit ) ; @xmath6 is the streaming constant bit rate ( in bps ) .",
    "@xmath7 is the chunk `` inter - arrival '' time at the source , being such arrival process a direct consequence of the segmentation into chunks done at the source : a new chunk will be available for delivery only when @xmath5 information bits , generated at rate @xmath6 , are accumulated ( see top of figure [ fig:2b ] ) .",
    "@xmath8 is the available upload bandwidth , assumed to be the same for all network nodes , including the source ( homogeneous bandwidth conditions ) .",
    "@xmath9 is the normalized upload bandwidth of each node with respect to the streaming bit rate . in this paper , for simplicity , we consider the case of @xmath10 integer greater or equal than 1 , i.e. @xmath8 being either equal or a multiple of @xmath6 .",
    "the _ minimum _",
    "transmission time for a chunk is equal to @xmath11 ; this is true only if the whole upload bandwidth @xmath8 is used to transmit _ a single chunk to a single node_. moreover , we rely on the common simplifying assumption , in overlay p2p systems , that the only bandwidth bottleneck is the uplink bandwidth of the access link that connects the peer to the underlying network ( the downlink bandwidth is considered sufficiently large not to be a bottleneck - this is common in practice , due to the large deployment of asymmetric access links - e.g. , adsl ) . the first reason why the overall delay optimization problem can not be stated as a minimum path cost problem in the case of chunk - based systems is the sharing of the available upload bandwidth @xmath8 across multiple overlay links .",
    "as a consequence , i ) it is not possible to _ a priori _ associate a constant delay cost to overlay links originating from a given node , ii ) the delay experienced while transmitting a chunk depends on the fraction of the bandwidth that the node is dedicating to such transmission .",
    "for instance , figure [ fig:2b ] shows that the source node is transmitting a given chunk in parallel to two nodes ; as such , the transmission delay is @xmath12 . if the source were transmitting the chunk only to node 1 , this delay would be halved .",
    "the second reason is that the transmission time may not be the _ only _ component of the overall chunk delivery delay .",
    "this is highlighted for the case of node n1 .",
    "after receiving chunk 1 , node n1 adopts the strategy of _ serializing _ the delivery of chunk 1 to nodes n4 and n5 . on the one side , in both cases",
    "the chunk will be transmitted in the same time , namely @xmath13 ; this is the minimum transmission time for a chunk , as all the available bandwidth is always dedicated to a single transmission .",
    "on the other side , the time elapsing between the instant at which the chunk is available at node n1 and the instant at which the chunk is received by node n5 is greater than the transmission time , as it includes also the time spent by node n1 while transmitting the chunk to node n4 .    the third and final aspect which characterizes chunk - based systems in a _ streaming _ context is that there is a tight constraint which relates the number of peer nodes that can be _ simultaneously _ served and the available upload bandwidth .",
    "if we look back flow - based systems in figure [ fig:2a ] , we see that only practical implementation issues may impede the source node to arbitrarily subdivide the stream into sub - streams , and the tree depth may be indeed trivially optimized by using as many sub - streams as the number of nodes in the network . on the contrary , in chunk - based systems ,",
    "the number of nodes that can be served is no more a `` free '' parameter , but it is tightly constrained by the stream rate and the available upload bandwidth .",
    "this fact can be readily understood by looking at the source node in the example illustrated in figure [ fig:2b ] . due to their granularity ,",
    "new chunks are available for delivery at the source node every @xmath14 seconds .",
    "hence , in order to keep the distribution of chunks balanced ( i.e. , to avoid introducing delays with respect to the time instant at which chunks are available at source and to privilege specific chunks by giving them extra distribution time ) , the source node must complete the delivery of every chunk before the next new chunk is available for the delivery ( i.e. within @xmath15 seconds ) .",
    "this implies that the source node can not deliver a single chunk to more than @xmath10 nodes , being @xmath16 the ratio between the upload bandwidth and the streaming rate .",
    "let @xmath17 be the set of all peers which compose a p2p streaming network , and let @xmath18 be the cardinality of such network .",
    "let @xmath19 be a generic peer in the network .",
    "since the streamed information is organized into subsequently generated chunks , @xmath20 is expected to receive all these chunks with some delay after their generation at the source .",
    "let us define with @xmath21 the specific interval of time elapsing between the generation of chunk @xmath22 ( @xmath23 ) at the source , and its completed reception at peer @xmath20 . in most generality",
    ", different chunks belonging to the stream may be delivered through different paths .",
    "this implies that @xmath21 may vary with the chunk index @xmath22 .",
    "let @xmath24 be the maximum delay experienced by peer @xmath20 among all possible chunks .    to characterize the delay performance of a whole p2p streaming network , we are interested in finding the maximum of the delay experienced across all peers composing the network , i.e. : @xmath25 we refer to this network - wide performance metric as _ absolute network delay_. however",
    ", for reasons that will be clear later on , this performance metric does not yield to a convenient analytical framework .",
    "thus , we introduce an alternative delay - related performance metric , which we call _ stream diffusion metric_. this is formally defined as follows : @xmath26 in plain words , @xmath27 is the number of peers that may receive each chunk in at most a time interval @xmath28 after its generation at the source .",
    "the most interesting aspect of the stream diffusion metric @xmath27 is that it can be conveniently applied also to networks composed of an infinite number of nodes ( for such networks , obviously , the absolute network delay @xmath29 would be infinite ) .",
    "moreover , for finite - size networks , it is straightforward to derive the absolute network delay from the stream diffusion metric . since @xmath27 is a non - decreasing monotone function of the continuous time variable @xmath28 and it describes the number of peers that may receive the whole stream within a maximum delay @xmath28 , for a finite size network composed of @xmath30 peers the value of @xmath28 at which @xmath27 reaches @xmath30 is also the maximum delay experienced across all peers .",
    "the formal relation between the absolute network delay and the stream diffusion metric is hence @xmath31      before stating the bound , we need to provide some preliminary notation .",
    "let @xmath32 be the @xmath0-step fibonacci sequence defined as follows : @xmath33 let @xmath34 be a new sequence defined as the sum of the first @xmath35 non - null terms of the @xmath0-step fibonacci sequence , i.e. , @xmath36    let us assume that propagation delays and queueing delays experienced in the underlying physical network because of congestion are negligible with respect to the minimum chunk transmission time @xmath37 , namely the time needed to transmit a chunk by dedicating , to such transmission , _ all _ the upload capacity of a node .",
    "in what follows , we measure the time using , as time unit , the value @xmath38 above defined .",
    "we can now state the following theorem on the upper bound of @xmath27 .",
    "[ th:1]in a p2p chunk - based streaming system where all peer nodes have the same normalized upload capacity @xmath16 ( assumed integer greater or equal than 1 ) and @xmath0 overlay neighbors to delivery chunks to , the stream diffusion metric is upper bounded by @xmath39 for integer values of @xmath28 ( i.e. multiple of @xmath38 ) while , for non integer values of @xmath28 , @xmath40 must be considered .",
    "the proof of theorem [ th:1 ] is omitted for reasons of space .",
    "we refer the reader to @xcite for the full details .",
    "we only observe that the proof is based on the following property : the minimum amount of time elapsing between the time instant at which a peer receives a chunk and the time instant at which it has transmitted the received chunk to _",
    "i _ , @xmath41 , of its @xmath0 neighbors is lower bounded by @xmath3 , and this is achieved if and only if the chunk transmission is serialized .",
    "in other words , the bound in ( [ e : n - upper - bound ] ) may be achieved only by serializing chunk transmissions .",
    "thanks to the asymptotic expression of @xmath0-step fibonacci sums , which has been derived in @xcite , equation ( [ e : n - upper - bound ] ) can be more conveniently expressed in the following asymptotic closed form : @xmath42 where i ) @xmath43 represents the so said @xmath0-step fibonacci constant and it is the only real root with modulo greater than @xmath44 of the characteristic polynomial @xmath45 of the @xmath0-step fibonacci sequence , and ii ) @xmath46 is a suitable polynomial about which more details can be found in @xcite .",
    "for the convenience of the reader , the first few values of the fibonacci constants are @xmath47 , while the first few values of the terms @xmath48 are @xmath49 .",
    "the derived bound explicitly accounts for the fact that each node at most can feed @xmath0 neighbors .",
    "if this restriction is removed , we obtain a more simple and immediate expression ( see @xcite for more details ) @xmath50",
    "the provided bound offers only limited insights on how chunks should be forwarded across the overlay topology .",
    "specifically , the bound clearly suggests that delay performances are optimized only if chunks are serially delivered towards the neighbor nodes , but does not make any assumption on which specific paths the chunks should follow , or in other words , which overlay topologies should be used .",
    "we now show that , to attain the performance bound , peer nodes have to be organized according to i ) an overlay unbalanced tree if @xmath51 , ii ) multiple overlay unbalanced trees if @xmath52 and multiple of @xmath10 ( generalization to arbitrary integer values of @xmath0 being straightforward ) .",
    "when the number of neighbor nodes @xmath0 is equal to the normalized upload capacity @xmath10 , the source node can deliver each chunk to _ all _ its @xmath0 neighbors before a new chunk arrives .",
    "as such , the source node can repeatedly apply a round - robin scheduling policy during the time interval @xmath54 , which elapses between the arrivals of consecutive chunks . specifically , in the first @xmath38 seconds it can send a given chunk to a given node , say peer @xmath55 , then send the chunk to peer @xmath56 , and so on until peer @xmath57 .",
    "if this policy is repeated for every chunk , the result is that any neighbor of the source also receives a new chunk every @xmath54 seconds .",
    "hence , each neighbor of the source may apply the same scheduling policy with respect to its neighbors , and so on . as a consequence , every node in the network receives chunks from the same parent , and in the original order of generation : in other words ,",
    "chunks are delivered over a tree topology .",
    "the operation of the above described chunk distribution mechanism is depicted in figure [ f : serial - tree ] , which refers to the case @xmath58 and a network composed of @xmath59 nodes . in this figure",
    "the source is denoted with an `` s '' .",
    "the nodes and the chunks are progressively indexed starting from @xmath44 . going from the upper part of the figure to its lower part ,",
    "we see how the first two chunks are progressively distributed starting from the source ; the time since the start of the transmission , measured in time units , until time instant @xmath60 is reported on the left side of the figure .",
    "the tree on the left hand side of the figure distributes the first chunk , while the tree on the right hand side of the figure distributes the second chunk . in more detail , since the first chunk is assumed to be available for transmission at the source at time instant @xmath61 , the source starts transmitting the first chunk to node 1 at @xmath61 and after finishing this transmission , i.e at @xmath62 , it sends the first chunk to node 2 , in series . in its turn",
    ", node 1 sends the first chunk first to node 3 and then to node 4 , in series , and so on .",
    "likewise , node 2 sends the first chunk first to node 5 and then to node 7 , in series , and so on .",
    "as regards the second chunk , the source starts transmitting it to node 1 at time @xmath63 , exactly when that chunk is available for the transmission . after finishing transmitting the first chunk to node 1",
    ", the source sends the same chunk to node 2 , in series . in their turn ,",
    "node 1 and 2 distribute the second chunk in same manner as the first chunk , i.e. sending the second chunk in series first to nodes 3 and 5 respectively , and then to nodes 4 and 7 respectively .",
    "it is to be noted that , even if two distribution trees are depicted in figure [ f : serial - tree ] , actually there is only one distribution , which repeats itself for each chunk with period @xmath64 .",
    "in other words , a given node receives all chunks through the same path .",
    "it is also interesting to note that the tree formed in figure [ f : serial - tree ] is unbalanced in terms of number of hops .",
    "for instance , the first chunk reaches node 19 at time @xmath65 after crossing nodes 1,3,6 and 11 .",
    "conversely , the same chunk reaches node 15 , again at time @xmath65 , after crossing nodes 2 and 7 .",
    "the unbalancing in terms of number of hops is a consequence of the fact that the proposed approach achieves equal - delay source - to - leaves paths , and that the time in which a chunk waits for its transmission turn at a node ( because of serialization ) contributes to such path delay .",
    "we are now in condition to evaluate the stream diffusion metric @xmath27 . to this end , let us introduce @xmath66 as number of new nodes that complete the download of a chunk exactly @xmath3 time units after the generation of that chunk at the source node , in such a way that @xmath27 can be assessed according to the equation @xmath67 . with reference to figure [",
    "f : serial - tree ] , @xmath68 ( node 1 ) , @xmath69 ( nodes 2 and 3 ) , @xmath70 ( nodes 4 , 5 and 6 ) , @xmath71 ( nodes 7 , 8 , 9 , 10 and 11 ) , @xmath72 ( nodes 12 , 13 , 14 , 15 , 16 and 17 ) .",
    "thus , @xmath73 , which is equal to the performance bound @xmath74 evaluated at @xmath65 . to generalize the evaluation of @xmath66 , we observe that only the nodes which have completed the download of a chunk exactly after @xmath75 since the generation of that chunk have still children to be served , whereas nodes that have completed the download of that chunk with a delay less than @xmath76 have already served all their @xmath0 children . as a consequence , if we set @xmath77 to take the children served by the source into account , it results @xmath78 for @xmath79 and @xmath80 for @xmath81 .",
    "it is then easy to evaluate the sequence @xmath66 for a given @xmath51 and to verify that @xmath82 and consequently @xmath83 .",
    "easy algebraic manipulations allow to turn the last equality into @xmath84 , which guarantees the matching between the stream diffusion metric of the described chunk distribution mechanism and the performance bound @xmath74 for each value of @xmath28 .",
    "when @xmath52 , the source can not deliver a chunk to all its @xmath0 neighbors , but only to a subset of @xmath10 peers .",
    "hence , in principle , it might distribute chunks through the same tree as discussed before , and hence every peer in the network would use only @xmath10 neighbors out of the available @xmath0 .",
    "however , the provided bound assures that performance in the case @xmath52 are better than in the case @xmath51 .",
    "for instance , if @xmath86 , the case @xmath87 outperforms the case @xmath88 as follows :    [ cols=\"<,<,<,<,<,<,<,<,<\",options=\"header \" , ]     a thorough general explanation of how to design a mechanism which attains the bound in the case @xmath52 and multiple of @xmath10 is complex ( for reasons that will emerge later on ) .",
    "hence , in this paper we limit ourselves to show how the bound may be achieved through the simple example depicted in figure [ f : serial - forest ] , which refers to the case @xmath86 and @xmath87 and a network composed of @xmath89 nodes .",
    "the notation in this figure is the same as in figure [ f : serial - tree ] . as in the case",
    "@xmath64 , at time @xmath61 the source node receives chunk # 1 and serially delivers it to nodes 1 and 2 .",
    "however , with respect to the case @xmath64 , at time @xmath63 , when the source node receives chunk # 2 , instead of sending it again to nodes 1 and 2 , it delivers that chunk to the remaining two neighbors ( nodes 13 and 14 ) .",
    "this process is repeated for the subsequent chunks , and specifically the odd - numbered chunks are serially delivered to nodes 1 and 2 , while the even - numbered ones are serially delivered to nodes 13 and 14 . as a consequence of this operation of the source , each neighbor of the source i ) receives directly from the source only half chunks , ii ) receives a new chunk from the source every 4 time units . as such",
    ", neighbors of the source have the necessary extra time to deliver each chunk they receive from the source to all their @xmath87 neighbors .",
    "the same holds for the remaining peer nodes .",
    "for instance , with regard to chunk # 1 , node 1 serves that chunk to all its four neighbors ( nodes 3 , 4 , 7 and 13 ) in series .",
    "node 2 serves instead chunk # 1 only to three neighbors ( nodes 5 , 8 and 14 ) out of four available , since all nodes in the network have already received chunk # 1 at @xmath65 and there are no nodes to be served . in their turn , all nodes that have been served by nodes 1 and 2 , transmit chunk # 1 to their neighbors ( unless their neighbors have already received that chunk ) in series , and so on , until all nodes in the network receive chunk # 1 .",
    "this allows delivering chunk # 1 to 24 nodes in 5 time units , instead of the previous 19 nodes .",
    "it is to be noted that chunks are now distributed by means of two distinct unbalanced trees , the left one for odd - numbered chunks and the right one for even - numbered chunks , which repeat themselves with period @xmath87 . in general , the number of distribution trees is @xmath90 , where we use the assumption that @xmath0 is integer multiple of @xmath10 .",
    "we are now in condition to evaluate the stream diffusion metric @xmath27 . as in the case @xmath51 ,",
    "let us introduce @xmath66 as number of new nodes that complete the download of a chunk exactly @xmath3 time units after the generation of that chunk at the source node , in such a way that @xmath27 can be assessed according to the equation @xmath91 .",
    "with reference to figure [ f : serial - tree ] and to the left hand side tree , @xmath68 ( node 1 ) , @xmath69 ( nodes 2 and 3 ) , @xmath70 ( nodes 4 , 5 and 6 ) , @xmath92 ( nodes 7 , 8 , 9 , 10 , 11 and 12 ) , @xmath93 ( nodes 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 and 24 ) . the amounts @xmath66 take on the same values even in the right hand side tree .",
    "thus , @xmath94 , which is equal to the performance bound @xmath74 evaluated at @xmath65 . to generalize the evaluation of @xmath66",
    ", we observe that , if @xmath95 , the source is still serving a given chunk ; otherwise , the source is already serving the next chunk .",
    "in addition , only the nodes which have completed the download of a chunk exactly after @xmath75 since the generation of that chunk have still children to be served , whereas nodes that have completed the download of that chunk with a delay less than @xmath76 have already served all their @xmath0 children . as a consequence , if we set @xmath77 to take the children served by the source into account , it results @xmath96 for @xmath79 , @xmath97 for @xmath98 and @xmath99 for @xmath100 .",
    "it is then easy to evaluate the sequence @xmath66 for a given pair of @xmath0 and @xmath10 values and to verify that @xmath101 and consequently @xmath102 .",
    "easy algebraic manipulations allow to turn the last equality into @xmath84 , which guarantees the matching between the stream diffusion metric of the described chunk distribution mechanism and the performance bound @xmath74 for each value of @xmath28 .    before concluding the description of the case @xmath52 and multiple of @xmath10",
    ", we finally observe that a peer node needs to be part of all the @xmath90 trees in order to properly receive the full stream .",
    "this leads to a complex issue which we call the `` tree intertwining problem '' , that is : how nodes should be placed in every tree so that the different role of a node in every considered tree does not lead to sharing the node s upload capacity among the different trees ( and hence to performance impairments with respect to the bound s prediction , or even congestion ) .",
    "this can be more easily illustrated through the following example .",
    "let us first consider node 5 . in the left ( odd - numbered ) tree ,",
    "node 5 is in charge of serving two neighbors , namely 11 and 17 .",
    "if node 5 were used by the right ( even - numbered ) tree in place of node 15 , it would also have to forward even - numbered chunks to three additional neighbors , thus breaking the assumption that a node has at most @xmath87 neighbors .",
    "the problem is actually more complex , as we can understand by considering the following second case . in the odd - numbered tree ,",
    "node 2 has to serve three nodes , namely nodes 5 , 8 , and 14 . at a first glance",
    ", we might conclude that node 2 can be also used by the even - numbered tree provided that it is placed in a position of the tree that requires the node to serve only a single node . however , this is not the case .",
    "in fact , let us assume to replace node 7 in the even - numbered tree with node 2 .",
    "this implies that node 2 would be required to deliver an even - numbered chunk to node 24 at every time instant @xmath103 .",
    "however , node 2 is required by the left tree to deliver an odd - numbered chunk at instants of time @xmath104 , and @xmath105 .",
    "thus , since @xmath106 , node 2 should simultaneously deliver an odd - numbered chunk to node 5 , and an even - numbered chunk to node 24 , which would not allow reaching the bound .",
    "unfortunately , the `` intertwining problem '' for unbalanced trees can not be solved by letting interior nodes of a given tree play the role of leaves in the remaining trees is greater than @xmath107 times the number of non - leaf nodes . ] .",
    "however , we proved in @xcite that i ) the tree - intertwining problem can be solved via exhaustive search for arbitrary @xmath10 and @xmath0 and for any network size for which the bound @xmath74 is attainable , and that ii ) there exists a constructive approach which allows finding one of the many possible solutions without relying on exhaustive search . since",
    "this proof is complex and it requires significant extra space and technical elaboration , we refer the interested readers to @xcite for the details .",
    "figure [ f : change_groups ] plots the stream diffusion metric @xmath27 as a function of @xmath38 in a @xmath86 bandwidth scenario , for a single unbalanced tree ( @xmath88 ) , two unbalanced trees ( @xmath87 ) , infinite unbalanced tree ( @xmath108 ) and a single _ balanced _ tree ( @xmath88 and parallel transmissions ) .",
    "the first important observation about figure [ f : change_groups ] regards the impact of the number of neighbor nodes @xmath0 on the stream diffusion metric bound .",
    "the figure shows that there is a significant improvement when moving from the case @xmath64 of single tree to that of multiple trees . interestingly ( but expected , as the fibonacci constants @xmath43 increase only marginally when @xmath0 becomes large ) ,",
    "the advantage in using more than a few trees is limited : this is especially important if an algorithm is designed to mimic the unbalanced multiple tree operation , as complexity ( i.e. signalling burden ) increases with @xmath0 .",
    "the second important observation regards the improvement brought about by serializing the transmissions ( and hence unbalanced trees ) with respect to parallel chunk transmissions ( and hence balanced trees ) .",
    "the figure shows that the performance improvement is significant : in the case @xmath88 the stream diffusion metric @xmath27 for serial chunk transmissions ( i.e. , the bound ) is one order of magnitude greater than for parallel chunk transmissions at @xmath109 , and three orders of magnitude at @xmath110 .     as a function of @xmath38 in a @xmath86 bandwidth scenario , for @xmath88 ( balanced and unbalanced tree ) , @xmath87 ( two unbalanced trees ) , and @xmath108 ( infinite unbalanced trees ) . ]",
    "the literature abounds of papers proposing practical and working distribution algorithms for p2p streaming systems ; however very few theoretical works on their performance evaluation have been published up to now . as a matter of fact , due to the lack of basic theoretical results and bounds , common sense and intuitions and heuristics",
    "have driven the design of p2p algorithms so far .",
    "the few available theoretical works mostly focus on the flow - based systems , as they have been defined in subsection [ ss : flow ] . in such case ,",
    "a fluidic approach is typically used to evaluate performance and the bandwidth available on each link plays a limited role with respect to the delay performance , which ultimately depend on the delay characterizing a path between the source node and a generic end - peer .",
    "this is the case in @xcite and @xcite .",
    "moreover , there are also other studies that address the issue of how to maximize throughput by using various techniques , such as network coding @xcite or pull - based streaming protocol @xcite .",
    "this work differs from the previously cited ones mainly because it focuses on chunk - based systems , for which discrete - time approaches are most suitable than fluidic approaches .",
    "surprisingly enough , according to the best of our knowledge and our literature survey , there is only one work @xcite where chunk - based systems are theoretically analyzed . in more detail ,",
    "the author of @xcite derives a minimum delay bound for p2p video streaming systems , and proposes the so called _ snow - ball _ streaming algorithm to achieve such bound . like the theoretical bound presented in this paper , the bound in @xcite , that is expressed in terms of delay in place of stream diffusion metric , can be achieved only in case of serial chunk transmissions and it is equivalent to the one that we found as a particular case when @xmath111",
    ". however , the assumptions under which such bound has been derived in @xcite are completely different .",
    "in fact , with reference to a network composed of @xmath112 nodes excluding the source node , the proposed _ snow - ball _ algorithm for chunk dissemination requires that i ) the source node serves each one of the @xmath112 network nodes with different chunks , ii ) nodes other than the source serve @xmath113 different neighbors . in other words ,",
    "the resulting overlay topology is such that i ) the source node is connected to all the @xmath2 network nodes , ii ) nodes other than the source have @xmath114 overlay neighbors . due to this , our approach may be definitely regarded as significantly different from the one in @xcite .",
    "differently from @xcite , we indeed consider the case of limited overlay connectivity among nodes and we show that organizing nodes in a forest - based topology allows to achieve performance very close to the ones of the snow - ball case .",
    "in this paper we derived a theoretical performance bound for chunk - based p2p streaming systems .",
    "such bound has been derived in terms of the stream diffusion metric , a performance metric which is directly related to the end - to - end minimum delay achievable in a p2p streaming system . the presented bound for the stream diffusion metric depends on i ) the upload bandwidth available at each node , assumed homogeneous for all nodes , and ii ) the number of neighbors to transmit chunks to .",
    "k - step fibonacci sequences play a fundamental role in such a bound .",
    "the importance of the presented theoretical bound is twofold : on the one hand , it provides an analytical reference for performance evaluation of chunk - based p2p streaming systems ; on the other hand , it suggests some basic principles , which can be exploited to design real - world applications .",
    "in particular , it suggests i ) the serialization of chunk transmissions , and ii ) the organization of chunks in different groups so that chunks in different groups are spread according to different paths .",
    "m.castro , p.druschel , a.kermarrec , a.nandi , a.rowston , a.singh , _ splitstream : high - bandwidth multicast in cooperative environments _ , in proc . of the nineteenth acm symposium on operating systems principles , 298 - 313 , 2003 .",
    "f. pianese , d. perino , j. keller , e. biersack , _ pulse : an adaptive , incentive - based , unstructured p2p live streaming system _ , ieee transactions on multimedia , special issue on content storage and delivery in peer - to - peer networks , volume 9 , n. 6 , 2007 .",
    "g. bianchi , n. blefari melazzi , l. bracciale , f. lo piccolo , s. salsano , _ fundamental delay bounds in peer - to - peer chunk - based real - time streaming systems _ , technical report , 2008 ( on line available at netgroup.uniroma2.it/p2p/streaming-tech-rep.pdf ) ."
  ],
  "abstract_text": [
    "<S> this paper addresses the following foundational question : what is the maximum theoretical delay performance achievable by an overlay peer - to - peer streaming system where the streamed content is subdivided into chunks ? as shown in this paper , </S>",
    "<S> when posed for chunk - based systems , and as a consequence of the store - and - forward way in which chunks are delivered across the network , this question has a fundamentally different answer with respect to the case of systems where the streamed content is distributed through one or more flows ( sub - streams ) . to circumvent the complexity emerging </S>",
    "<S> when directly dealing with delay , we express performance in term of a convenient metric , called `` stream diffusion metric '' . </S>",
    "<S> we show that it is directly related to the end - to - end minimum delay achievable in a p2p streaming network . in a homogeneous scenario , </S>",
    "<S> we derive a performance bound for such metric , and we show how this bound relates to two fundamental parameters : the upload bandwidth available at each node , and the number of neighbors a node may deliver chunks to . in this bound , k - step fibonacci sequences do emerge , and appear to set the fundamental laws that characterize the optimal operation of chunk - based systems . </S>"
  ]
}