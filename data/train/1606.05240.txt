{
  "article_text": [
    "sets and their characterisitic vectors will not be distinguished .",
    "we refer to bondy and murty @xcite about graph theory terminolgy and facts . given an undirected graph @xmath10 and positive weights @xmath11 on the edges @xmath12 , the maximum cut problem ( max cut ) is that of finding the set of vertices @xmath13 that maximizes the weight of the edges in the cut @xmath14 or @xmath15 or @xmath16 ; that is , the weight of the edges with one endpoint in @xmath13 and the other in @xmath17 .",
    "the ( decision variant of the ) max cut is one of the karp s original np - complete problems @xcite , and has long been known to be np - complete even if the problem is unweighted ; that is , if @xmath18 for all @xmath12 @xcite .",
    "this motivates the research to solve the max cut problem in special classes of graphs .",
    "the max cut problem is solvable in polynomial time for the following special classes of graphs : planar graphs @xcite , line graphs @xcite , graphs with bounded treewidth , or cographs @xcite .",
    "but the problem remains np - complete for chordal graphs , undirected path graphs , split graphs , tripartite graphs , graphs that are the complement of a bipartite graph @xcite and planar graphs if the weights are of arbitrary sign @xcite . besides its theoretical importance , the max cut problem has applications in circuit layout design and statistical physics @xcite . for a comprehensive survey of the max cut problem ,",
    "the reader is referred to poljak and tuza @xcite and ben - ameur et al . @xcite .",
    "the best known algorithm for max cut in planar graphs has running time complexity @xmath19 , where @xmath20 is the number of vertices of the graph @xcite .",
    "the main result of this paper is to exhibit a linear time algorithm for a special variant of max cut in series parallel graphs .",
    "let us give some definitions .",
    "given an undirected graph @xmath10 and a subset of vertices @xmath21 , a connected sides cut @xmath2 is a cut where both induced subgraphs @xmath4 $ ] and @xmath5 $ ] are connected .",
    "special connected sides cuts are trivial cuts , i.e. cuts with one single vertex in one side . the corresponding weighted variant of max cut for connected sides cuts is called max connected sides cut problem ( max cs cut ) .",
    "it is clear that max cut and max cs cut are the same problem for complete graphs .",
    "since max cut is np - hard for complete graphs ( see @xcite ) then max cs cut is np - hard in the general case .",
    "another motivation is that max cs cut gives a lower bound for max cut .",
    "a parallel closure of a graph is an induced subgraph on two vertices .",
    "a series extension of the graph @xmath10 based on the edge @xmath22 is adding a vertex @xmath23 of degree 2 in the middle of @xmath24 in order to have two edges instead of @xmath24 .",
    "a parallel extension of @xmath25 based on the edge @xmath24 is adding an edge @xmath26 having the same incident vertices as @xmath24 .",
    "series parallel graphs are graphs obtained by applying recursively series and/or parallel extensions starting from one edge",
    ". a series degree of a vertex @xmath23 in a graph @xmath25 is the degree of @xmath23 after replacing every parallel closure of @xmath25 by one single edge .",
    "a series labeling of the vertices of a series parallel graph is a labeling of the vertices from 0 to @xmath27 starting from the first two vertices @xmath28 and @xmath29 and so on to the last added vertex .",
    "any series parallel graph contains at least one vertex of series degree 2 .",
    "so , given a vertex @xmath23 of series degree 2 with the two parallel closures @xmath30 and @xmath31 incident to @xmath23 , and the two adjacent vertices @xmath32 and @xmath33 to @xmath23 , we can contract all edges of @xmath30 ( or @xmath31 ) and replace @xmath23 by @xmath32 ( or @xmath33 ) , and we obtain a new series parallel graph with a new vertex of series degree 2 . each involved graph in any step of this process is labeled @xmath34 , with @xmath35 and @xmath36 is the induced subgraph on the two vertices @xmath28 and @xmath29 .",
    "let @xmath36 and @xmath37 be two graphs with @xmath38 an edge of @xmath39 .",
    "the 2-sum of @xmath36 and @xmath37 , denoted @xmath40 , based on the edges @xmath41 and @xmath42 is the graph obtained by identifying @xmath41 and @xmath42 on an edge @xmath24 , and keeping @xmath43 , as it is .",
    "we say that max cs cut is linear for a class of graphs if there is a linear time algorithm to solve it in such class .",
    "the remaining of the paper is organized as follows : in section 2 , we give a linear time algorithm for max cs cut in series parallel graphs , in section 3 , we prove that 2-sums preserve the linearity of max cs cut .",
    "we deduce a linear time algorithm for min cut in series parallel graphs in section 4 , and we conclude in section 5 .",
    "maxcscutsp algorithm : input : a series parallel graph @xmath10 with a series labeling of @xmath44 , a positive weight function @xmath6 defined on @xmath7 . output : a @xmath6-maximum connected sides cut @xmath8 in @xmath25 .",
    "0 ) begin 1 ) @xmath45 ; 2 ) while @xmath46 do 3 ) begin 4 ) let @xmath30 and @xmath31 be the two parallel closures incident to @xmath47 in @xmath48 : 5 ) if @xmath49 then contract @xmath31 ; 6 ) else : contract @xmath30 ; 7 ) @xmath50 ; 6 ) end of while 7 ) @xmath51 ; 8) @xmath52 ; 9 ) while @xmath53 do 10 ) begin 11 ) let @xmath30 and @xmath31 the two parallel closures incident to @xmath47 in @xmath48 : 12 ) if @xmath54 then @xmath55 ; 13 ) @xmath56 ; 14 ) end of while 15 ) end of maxcscutsp algorithm .",
    "this algorithm has two phases : phase i ( steps 1 - 6 ) and phase ii ( steps 7 - 14 ) . in each step , we do roughly @xmath20 operations , so the complexity of maxcscutsp is @xmath57 , where @xmath58 .",
    "maxcscutsp algorithm solves max cs cut in series parallel graphs .",
    "the summary of the algorithm is as follows : maxcscut chooses a vertex v with series degree 2 ( step 4 ) and contract the less weighted parallel closure incident to v ( steps 5 and 6 ) . and",
    "so on the resulted graph until it reaches @xmath36 , the starting single parallel closure ( phase i ) . in @xmath36 , the @xmath6-maximum connected sides cut is @xmath59 ( step 8) .",
    "after that , it goes in the reverse path ( phase ii ) : the @xmath6-maximum connected sides cut is either the trivial cut based on the current vertex @xmath47 with series degree 2 or the current computed connected sides cut ( step 12 ) .",
    "let @xmath47 be the chosen vertex with series degree 2 in @xmath48 , @xmath30 and @xmath31 the two parallel closures incident to @xmath47 .",
    "without loss of generality , we can suppose that @xmath60 and @xmath61 .",
    "let @xmath62 be the w - maximum connected sides cut in @xmath63 .",
    "it suffices to prove that @xmath64 .",
    "let @xmath8 be a connected sides cut in @xmath48 distinct from @xmath65 . since @xmath60 , we have only two cases : * case 1 : * @xmath66 then @xmath8 is a connected sides cut in @xmath67 containing @xmath31 . and",
    "vice versa , any connected sides cut in @xmath67 containing @xmath31 is a connected sides cut in @xmath48 containing @xmath31 .",
    "* case 2 : * @xmath68 then @xmath8 is a connected sides cut in @xmath61 not containing @xmath31 . and vice versa , any connected sides cut in @xmath61 not containing @xmath31 is a connected sides cut in @xmath48 not containing @xmath31 .",
    "so the connected sides cuts candidates for the @xmath6-maximum connected sides cut in @xmath48 and @xmath69 are the same , except @xmath65 .",
    "note that maxcscut algorithm solves max cs cut in series parallel graphs even for arbitrary sign weight functions .",
    "let @xmath70 be the class of connected sides cuts of @xmath25 .",
    "we need the following lemma .",
    "@xmath71 and @xmath72 .",
    "it follows that a @xmath6-maximum connected sides cut in @xmath40 is one of the three following connected sides cuts : ( cases 1 - 2 ) one of the two @xmath6-maximum connected sides cuts in @xmath48 which does not contain @xmath73 , ( case 3 ) or the 2-sum of the @xmath6-maximum connected sides cuts containing @xmath73 . to find a @xmath6-maximum connected sides cut in @xmath48 which does not contain @xmath73 ( case 2 )",
    ", we have to contract @xmath38 .",
    "we need then to perform at most @xmath74 operations , where @xmath75 is the linearity coefficient and @xmath76 is the number of vertices of @xmath48 ( by induction ) .",
    "to find @xmath77 ( case 3 ) , we have to put @xmath78 , as big as possible , e.g. sum of the positive weights of all edges , and find @xmath79 . in this case",
    ", we need to perform at most @xmath80 operations ( by induction ) .",
    "so we have to compute max cs cut twice in each graph and compare three cuts .",
    "the total number of operations is bounded then by @xmath81 , where @xmath20 is the number of vertices of @xmath40 .",
    "so linearity of the problem is preserved .",
    "mincutsp algorithm : input : a series parallel graph @xmath10 with a series labeling of @xmath44 , a positive weight function @xmath6 defined on @xmath7 . output : a @xmath6-minimum connected sides cut @xmath8 in @xmath25 .",
    "we keep the same steps as maxcscutsp algorithm except the following changes in two steps : 5 ) if @xmath82 then contract @xmath31 ; 12 ) if @xmath83 then @xmath55 ; since this algorithm is similar to maxcscutsp , then its complexity is @xmath57 , where @xmath58 . and it is not difficult to see , similarly to maxcscutsp , that mincutsp gives the minimum weighted connected sides cut in a series parallel graph without computing the maximum flow .",
    "we can conclude with the following result .",
    "given a connected graph @xmath0 and a positive weight function @xmath6 defined on @xmath7 .",
    "then any @xmath6-minimum cut is a connected sides cut of @xmath25 .",
    "let @xmath2 be a cut with @xmath4 $ ] disconnected .",
    "it suffices to prove that @xmath2 is not a @xmath6-minimum cut .",
    "let @xmath84 $ ] be one connected component of @xmath4 $ ] .",
    "since @xmath25 is connected , then @xmath85 ( i.e. there are edges between @xmath3 and @xmath86 ) .",
    "it follows that @xmath87 .",
    "another consequence of lemma 3.1 and theorem 4.1 is the following corollary .",
    "2-sums preserves the linearity of min cut .",
    "we have introduced a new variant of max cut : max cs cut , which is also np - hard .",
    "we have provided two linear time algorithms for max cs cut and min cut , respectively , in series parallel graphs .",
    "we have proved that 2-sums preserve the linearity of max cs cut and min cut .",
    "further directions are to study max cs cut in larger classes of graphs than series parallel graphs .",
    "* acknowledgements * the author is grateful to the deanship of scientific research at al imam mohammad ibn saud islamic university ( imsiu ) for supporting financially this research under the grant no 331203 .",
    "f. barahona , ( 1990 ) , _ planar multicommodity flows , max cut , and the chinese postman problem _ , in : polyhedral combinatorics , proceedings dimacs workshop , morristown , new jersey , 1989 , w. cook , p.d .",
    "seymour ( eds . ) [ dimacs series in discrete mathematics and theoretical computer science , volume 1 ] , american mathematical society , providence , rhode island : 189202 .",
    "w. ben - ameur , a. r. mahjoub , and j. neto , _ the maximum cut problem _ , in : paradigms of combinatorial optimization , problems and new approaches , 2nd edition , j. wiley and sons , usa , v. t. paschos ( ed . ) , 2014 .",
    "poljak and tuza ( 1995 ) , _ the max - cut problem  a survey _ , in : special year on combinatorial optimization , w. cook , l. lovasz and p. seymour ( eds . ) , dimacs series in discrete mathematics and theoretical computer science , american mathematical society , 1995 ."
  ],
  "abstract_text": [
    "<S> given a graph @xmath0 , a connected sides cut @xmath1 or @xmath2 is the set of edges of e linking all vertices of u to all vertices of @xmath3 such that the induced subgraphs @xmath4 $ ] and @xmath5 $ ] are connected . </S>",
    "<S> given a positive weight function @xmath6 defined on @xmath7 , the maximum connected sides cut problem ( max cs cut ) is to find a connected sides cut @xmath8 such that @xmath9 is maximum . </S>",
    "<S> max cs cut is np - hard . in this paper , we give a linear time algorithm to solve max cs cut for series parallel graphs . </S>",
    "<S> we deduce a linear time algorithm for the minimum cut problem in the same class of graphs without computing the maximum flow .    * </S>",
    "<S> 2010 mathematics subject classification : * 90c27 , 90c57 . maximum cut , maximum connected sides cut , linear time algorithm , series parallel graphs , minimum cut . </S>"
  ]
}