{
  "article_text": [
    "it is now well known that compressed sensing offers a method of taking few sensing measurements of high - dimensional sparse vectors , while at the same time enabling efficient and stable reconstruction  @xcite . in this field ,",
    "the restricted isometry property is arguably the most popular condition to impose on the sensing matrix in order to acquire state - of - the - art reconstruction guarantees :    [ defn.rip ] we say a matrix @xmath2 satisfies the @xmath3-_restricted isometry property ( rip ) _ if @xmath4 for every vector @xmath5 with at most @xmath6 nonzero entries .    to date",
    ", rip - based reconstruction guarantees exist for basis pursuit  @xcite , cosamp  @xcite and iterative hard thresholding  @xcite , and the ubiquitous utility of rip has made the construction of rip matrices a subject of active research  @xcite@xcite . here",
    ", random matrices have found much more success than deterministic constructions  @xcite , but this success is with high probability , meaning there is some ( small ) chance of failure in the construction .",
    "furthermore , rip is a statement about the conditioning of all @xmath7 submatrices of an @xmath8 sensing matrix , and so it seems computationally intractable to check whether a given instance of a random matrix fails to satisfy rip ; it is widely conjectured that certifying rip for an arbitrary matrix is @xmath0-hard . in the present paper",
    ", we prove this conjecture .",
    "[ prob.rip ] given a matrix @xmath2 , a positive integer @xmath6 , and some @xmath9 , does @xmath2 satisfy the @xmath3-restricted isometry property ?",
    "in short , we show that any efficient method of solving problem  [ prob.rip ] can be called in an algorithm that efficiently solves the @xmath0-complete subset sum problem . as a consequence of our result ,",
    "there is no method by which one can efficiently test for rip provided @xmath1 .",
    "this contrasts with previous work  @xcite , in which the reported hardness results are based on less - established assumptions on the complexity of dense subgraph problems .    in the next section ,",
    "we review the basic concepts we will use from computational complexity , and section  3 contains our main result .",
    "in complexity theory , problems are categorized into complexity classes according to the amount of resources required to solve them .",
    "for example , the complexity class @xmath10 contains all problems which can be solved in polynomial time , while problems in @xmath11 may require as much as exponential time .",
    "problems in @xmath0 have the defining quality that solutions can be verified in polynomial time given a certificate for the answer .",
    "as an example , the graph isomorphism problem is in @xmath0 because , given an isomorphism between graphs ( a certificate ) , one can verify that the isomorphism is legitimate in polynomial time .",
    "clearly , @xmath12 , since we can ignore the certificate and still solve the problem in polynomial time .    while problem categories provide one way to describe complexity , another important tool is the _ polynomial - time reduction _ , which allows one to show that a given problem is `` more complex '' than another . to be precise ,",
    "a polynomial - time reduction from problem @xmath13 to problem @xmath14 is a polynomial - time algorithm that solves problem @xmath13 by exploiting an oracle which solves problem @xmath14 ; the reduction indicates that solving problem @xmath13 is no harder than solving problem @xmath14 ( up to polynomial factors in time ) , and we say `` @xmath13 reduces to @xmath14 , '' or @xmath15 .",
    "such reductions lead to some of the most popular definitions in complexity theory : we say a problem @xmath14 is called @xmath0-_hard _ if every problem @xmath13 in @xmath0 reduces to @xmath14 , and a problem is called @xmath0-_complete _ if it is both @xmath0-hard and in @xmath0 . in plain speak ,",
    "@xmath0-hard problems are harder than every problem in @xmath0 , while @xmath0-complete problems are the hardest of problems in @xmath0 .",
    "contrary to popular intuition , @xmath0-hard problems are not merely problems that seem to require a lot of computation to solve .",
    "of course , @xmath0-hard problems have this quality , as an @xmath0-hard problem can be solved in polynomial time only if @xmath16 ; this is an open problem , but it is widely believed that @xmath1  @xcite .",
    "however , there are other problems which seem hard but are not known to be @xmath0-hard ( e.g. , the graph isomorphism problem ) . as such",
    ", while testing for rip in the general case seems to be computationally intensive , it is not obvious whether the problem is actually @xmath0-hard .",
    "indeed , by the definition of @xmath0-hard , one must compare its complexity to the complexity of every problem in @xmath0 .",
    "to this end , notice that @xmath15 and @xmath17 together imply @xmath18 , and so to demonstrate that a problem @xmath19 is @xmath0-hard , it suffices to show that @xmath17 for some @xmath0-hard problem @xmath14 .    in the present paper ,",
    "we demonstrate the hardness of certifying rip by reducing from the following problem :    [ prob.spark ] given a matrix @xmath20 and some positive integer @xmath6 , do there exist @xmath6 columns of @xmath20 which are linearly dependent ?    problem  [ prob.spark ] has a brief history in computational complexity .",
    "first , mccormick  @xcite demonstrated that the analogous problem of testing the girth of a transversal matroid is @xmath0-complete , and so by invoking the randomized matroid representation of marx  @xcite , problem  [ prob.spark ] is hard for @xmath0 under randomized reductions  @xcite .",
    "next , khachiyan  @xcite showed that the problem is @xmath0-hard by focusing on the case where @xmath6 equals the number of rows of @xmath20 ; using a particular matrix construction with vandermonde components , he reduced this instance of the problem to the subset sum problem .",
    "recently , tillmann and pfetsch  @xcite used ideas similar to mccormick s to strengthen khachiyan s result : they prove problem  [ prob.spark ] is @xmath0-hard without focusing on such a specific instance of the problem .",
    "each of these complexity results use @xmath8 matrices with integer entries whose binary representations take @xmath21 bits for some polynomial @xmath22 ; we will exploit this feature in our proof .",
    "[ thm.rip ] problem  [ prob.rip ] is @xmath0-hard .    reducing from problem  [ prob.spark ] , suppose we are given a matrix @xmath20 with integer entries . letting @xmath23 denote the size of the smallest collection of linearly dependent columns of @xmath20",
    ", we wish to determine whether @xmath24 . to this end",
    ", we take @xmath25 to be the size of the largest entry in @xmath20 , and define @xmath26 and @xmath27 ; note that we choose @xmath19 to be of this form instead of @xmath28 to ensure that the entries of @xmath2 can be expressed in @xmath29 bits without truncation .",
    "of course , linear dependence between columns is not affected by scaling , and so testing @xmath2 is equivalent to testing @xmath20 .",
    "in fact , since we plan to appeal to an rip oracle , it is better to test @xmath2 since the right - hand inequality of definition  [ defn.rip ] is already satisfied for every @xmath30 : @xmath31 we are now ready to state the remainder of our reduction : for some value of @xmath32 ( which we will determine later ) , ask the oracle if @xmath2 is @xmath3-rip ; then @xmath33 the remainder of this proof will demonstrate ( i ) and ( ii ) .",
    "note that ( i ) immediately holds for all choices of @xmath9 by the contrapositive .",
    "indeed , @xmath24 implies the existence of a nonzero vector @xmath5 in the nullspace of @xmath2 with @xmath34 nonzero entries , and @xmath35 violates the left - hand inequality of definition  [ defn.rip ] . for ( ii )",
    ", we also consider the contrapositive .",
    "when @xmath36 , we have that every size-@xmath6 subcollection of @xmath20 s columns is linearly independent . letting @xmath37 denote the submatrix of columns indexed by a size-@xmath6 subset @xmath38",
    ", this implies that @xmath39 , and so @xmath40 .",
    "since the entries of @xmath20 lie in @xmath41 , we know the entries of @xmath42 lie in @xmath43 , and since @xmath42 is integral with positive determinant , we must have @xmath44 .",
    "in fact , @xmath45 and so we can rearrange to get @xmath46 where the last inequality follows from @xmath47 and other coarse bounds .",
    "therefore , if we pick @xmath48 , then since our choice for @xmath49 was arbitrary , we conclude that @xmath2 is @xmath3-rip whenever @xmath36 , as desired .",
    "moreover , since @xmath32 can be expressed in the standard representation using @xmath29 bits , we can ask the oracle our question in polynomial time .",
    "it is important to note that theorem  [ thm.rip ] is a statement about testing for rip in the worst case ; this result does not rule out the existence of matrices for which rip is easily verified ( e.g. , using coherence in conjunction with the gershgorin circle theorem for small values of @xmath6  @xcite ) ."
  ],
  "abstract_text": [
    "<S> this paper is concerned with an important matrix condition in compressed sensing known as the restricted isometry property ( rip ) . </S>",
    "<S> we demonstrate that testing whether a matrix satisfies rip is @xmath0-hard . as a consequence of our result , </S>",
    "<S> it is impossible to efficiently test for rip provided @xmath1 . </S>"
  ]
}