{
  "article_text": [
    "the knapsack problem is one of the famous tasks in combinatorial optimization .",
    "items and each of them has a profit of @xmath2 measuring the usefulness of this item during the trip and a size @xmath3 .",
    "a natural constraint is that the total size of all selected items must not exceed the capacity @xmath4 of the knapsack .",
    "the aim of the hitchhiker is to select a subset of items while maximizing the overall profit under the capacity constraint . ] in the knapsack problem ( kp ) we are given a set @xmath5 of @xmath6 items .",
    "every item @xmath7 has a profit @xmath2 and a size @xmath3 .",
    "further there is a capacity @xmath4 of the knapsack .",
    "the task is to choose a subset @xmath8 of @xmath5 , such that the total profit of @xmath8 is maximized and the total size of @xmath8 is at most @xmath4 . within the d - dimensional knapsack problem ( d - kp ) a set a of @xmath6 items and",
    "a number @xmath0 of dimensions is given .",
    "every item @xmath7 has a profit @xmath2 and for dimension @xmath9 the size @xmath10 .",
    "further for every dimension @xmath9 there is a capacity @xmath11 .",
    "the goal is to find a subset @xmath8 of @xmath5 , such that the total profit of @xmath8 is maximized and for every dimension @xmath9 the total size of @xmath8 is at most the capacity @xmath11 .",
    "further we consider the multiple knapsack problem ( mkp ) where beside @xmath6 items a number @xmath1 of knapsacks is given .",
    "every item @xmath7 has a profit @xmath2 and a size @xmath3 and each knapsack @xmath9 has a capacity @xmath11 .",
    "the task is to choose @xmath1 disjoint subsets of @xmath5 such that the total profit of the selected items is maximized and each subset can be assigned to a different knapsack @xmath9 without exceeding its capacity @xmath11 by the sizes of the selected items .",
    "surveys on the knapsack problem and several of its variants can be found in books by kellerer et al .",
    "@xcite and by martello et al . @xcite .",
    "the knapsack problem arises in resource allocation where there are financial constraints , e.g. capital budgeting .",
    "capital budgeting problems have been introduced in the 1950s by lorie and savage @xcite and also by manne and markowitz @xcite and a survey can be found in @xcite .    from a computational point of view",
    "the knapsack problem is intractable @xcite .",
    "this motivates us to consider the fixed - parameter tractability and the existence of kernelizations of knapsack problems . beside the standard parameter @xmath12 ,",
    "i.e. the threshold value for the profit in the decision version of these problems , and the number of items , knapsack problems offer a large number of interesting parameters . among these",
    "are the sizes , the profits , the number of different sizes , the number of different profits , the number @xmath0 of dimensions , the number @xmath1 of knapsacks , and combined parameters on these .",
    "such parameters were considered for fixed - parameter tractability of the subset sum problem , which can be regarded as a special case of the knapsack problem , in @xcite and in the field of kernelizaton in @xcite .",
    "this paper is organized as follows . in section [ sec - pre ] , we give preliminaries on fixed - parameter tractability and kernelizations , which are two equivalent concepts within parameterized complexity theory .",
    "we give a characterization for the special case of polynomial fixed - parameter tractability , which in the case of integer - valued problems is a super - class of the set of problems allowing polynomial time algorithms .",
    "we show that a parameterized problem can be solved by a polynomial fpt - algorithm if and only if it is decidable and has a kernel of constant size .",
    "this implies a tool to show kernels of several knapsack problems .",
    "further we cite a useful theorem for finding kernels of knapsack problems with respect to parameter @xmath6 by compressing large integer values to smaller ones .",
    "we also give results on the connection between the existence of parameterized algorithms , approximation algorithms , and pseudo - polynomial algorithms . in section [ sec - kp ]",
    ", we consider the knapsack problem .",
    "we apply known results as well as our characterizations to show fixed - parameter tractability and the existence of kernelizations . in section [ sec - mkp ] ,",
    "we look at the d - dimensional knapsack problem .",
    "we show that the problem is not pseudo - polynomial in general by a pseudo - polynomial reduction from independent set , but pseudo - polynomial for every fixed number @xmath0 of dimensions .",
    "we give several parameterized algorithms and conclude bounds on possible kernelizations . in section [ def - sec - mkp ] , we consider the multiple knapsack problem .",
    "we give a dynamic programming solution and a pseudo - polynomial reduction from 3-partition in order to show that the problem is not pseudo - polynomial in general , but for every fixed number @xmath1 of knapsacks .",
    "further we give parameterized algorithms and bounds on possible kernelizations for several parameters . in the final section [ sec - con ]",
    "we give some conclusions and an outlook for further research directions .",
    "in this section we recall basic notations for common algorithm design techniques for hard problems from the textbooks @xcite , @xcite , @xcite , and @xcite .      within parameterized complexity",
    "we consider a two dimensional analysis of the computational complexity of a problem . denoting the input by @xmath13 , the two considered dimensions are the input size @xmath14 and the value of a parameter @xmath15 , see @xcite and @xcite for surveys .",
    "let @xmath16 be a decision problem and @xmath17 the set of all instances of @xmath16 .",
    "parameterization _ or _ parameter _ of @xmath16 is a mapping @xmath18 that is polynomial time computable .",
    "the value of the parameter @xmath15 is expected to be small for all inputs @xmath19 .",
    "parameterized problem _ is a pair @xmath20 , where @xmath16 is a decision problem and @xmath21 is a parameterization of @xmath16 .",
    "for @xmath20 we will also use the abbreviation @xmath21-@xmath16 .",
    "an algorithm @xmath5 is an _ fpt - algorithm with respect to @xmath21 _ , if there is a computable function @xmath22 and a constant @xmath23 such that for every instance @xmath24 the running time of @xmath5 on @xmath13 is at most @xmath25 or equivalently at most @xmath26 , see @xcite . for the case",
    "where @xmath27 is also a polynomial , @xmath5 is denoted as _",
    "polynomial fpt - algorithm with respect to @xmath21_.    a parameterized problem @xmath20 belongs to the class @xmath28 and is called _ fixed - parameter tractable _ , if there is an fpt - algorithm with respect to @xmath21 which decides @xmath16 .",
    "typical running times of an fpt - algorithm w.r.t .",
    "parameter @xmath21 are @xmath29 and @xmath30 .",
    "a parameterized problem @xmath20 belongs to the class @xmath31 and is _ polynomial fixed - parameter tractable _",
    "@xcite ) , if there is a polynomial fpt - algorithm with respect to @xmath21 which decides @xmath16 .",
    "please note that polynomial fixed - parameter tractability does not necessarily imply polynomial time computability for the decision problem in general .",
    "a reason for this is that within integer - valued problems there are parameter values @xmath15 which are larger than any polynomial in the instance size @xmath14 .",
    "an example is parameter @xmath32 for problem knapsack in section [ sec - para - kp ] . on the other hand , for small parameters polynomial",
    "fixed - parameter tractability leads to polynomial time computability .",
    "let @xmath20 be some parameterized problem and @xmath4 be some constant such that for every instance @xmath13 of @xmath16 it holds @xmath33 .",
    "then the existence of a polynomial fpt - algorithm with respect to @xmath21 implies a polynomial time algorithm for @xmath16 .",
    "let @xmath5 be some polynomial fpt - algorithm with respect to @xmath21 for @xmath20 .",
    "then @xmath5 has a running time of @xmath34 for two constants @xmath0 , @xmath35 .",
    "since @xmath33 we obtain a running time which is polynomial in @xmath14 .    in order to state lower bounds we give the following corollary .",
    "[ cor - pfpt - p ] let @xmath20 be some parameterized problem and @xmath4 be some constant such that @xmath16 is np - hard and for every instance @xmath13 of @xmath16 it holds @xmath33 . then there is no polynomial fpt - algorithm with respect to @xmath21 for @xmath20 , unless @xmath36 .",
    "an algorithm @xmath5 is an _ xp - algorithm with respect to @xmath21 _ , if there are two computable functions @xmath37 such that for every instance @xmath24 the running time of @xmath5 on @xmath13 is at most @xmath38    a parameterized problem @xmath20 belongs to the class @xmath39 and is called _ slicewise polynomial _ , if there is an xp - algorithm with respect to @xmath21 which decides @xmath16 .",
    "typical running times of an xp - algorithm w.r.t .",
    "parameter @xmath21 are @xmath40 and @xmath41 .      in order to show fixed - parameter intractability",
    ", it is useful to show the hardness with respect to one of the classes @xmath42 $ ] for some @xmath43 , which were introduced by downey and fellows @xcite in terms of weighted satisfiability problems on classes of circuits . the following relations ",
    "the so called _ @xmath44-hierarchy _  hold and all inclusions are assumed to be strict .",
    "@xmath45 \\subseteq { \\mbox{w}}[2 ] \\subseteq \\ldots \\subseteq",
    "{ \\mbox{xp}}\\ ] ]    in the case of hardness with respect to some parameter @xmath21 a natural question is whether the problem remains hard for _ combined _ parameters , i.e.parameters @xmath46 that consists of @xmath47 parts of the input .",
    "the given notations can be carried over to combined parameters , e.g. an fpt - algorithm with respect to @xmath46 is an algorithm of running time @xmath48 for some constant @xmath4 and some computable function depending only on @xmath49 .",
    "next we consider the question , whether the sizes and the values can be reduced , such that their bit - length is bounded polynomially in a given parameter .",
    "let @xmath20 be a parameterized problem , @xmath17 the set of all instances of @xmath16 and @xmath18 a parameterization for @xmath16 .",
    "a polynomial time transformation @xmath50 is called a _ kernelization _ for @xmath20 , if @xmath27 maps a pair @xmath51 to a pair @xmath52 , such that the following three properties hold .    * for all @xmath24 it holds @xmath13 is a yes - instance for @xmath16 if and only if @xmath53 is a yes - instance for @xmath16 . *",
    "* there is some function @xmath55 , such that @xmath56 . depends only on the parameter @xmath15 and not on the size of @xmath13 . ]",
    "the pair @xmath52 is called _ kernel _ for @xmath20 and @xmath57 is the _ size of the kernel_.",
    "if @xmath58 is a polynomial , linear , or constant function of @xmath21 , we say @xmath52 is a _ polynomial _ , _ linear _ , or _ constant kernel _ , respectively , for @xmath20 .",
    "next we show that fpt - algorithms lead to kernels .",
    "although the existence is well known ( theorem 1.39 in @xcite ) , we give a proof since we need the kernel size later on .",
    "[ th - ker ] let @xmath20 be some parameterized problem .",
    "if there is an fpt - algorithm that solves @xmath20 for every instance @xmath13 in time @xmath59 , then @xmath16 is decidable and there is a kernel of size @xmath60 for @xmath20 .",
    "let @xmath61 and @xmath5 be an fpt - algorithm with respect to @xmath21 which runs on input @xmath13 in time @xmath62 for some function @xmath27 and some constant @xmath4 . w.l.o.g .",
    "we assume that there is one constant size yes - instance @xmath63 and one constant size no - instance @xmath64 of @xmath16 .",
    "the following algorithm @xmath8 computes a kernelization for @xmath20 .",
    "algorithm @xmath8 simulates @xmath65 steps of algorithm @xmath5 . if during this time @xmath5 stops and accepts or rejects , then @xmath8 chooses @xmath63 or @xmath64 , respectively , as the kernel . otherwise we know that @xmath66 and thus @xmath67 and @xmath8 states @xmath51 as kernel .",
    "algorithm @xmath8 has a running time in @xmath68 and leads to a kernel of size @xmath69 .",
    "the existence of an fpt - algorithm is even equivalent to the existence of a kernelization for decidable problems @xcite .",
    "[ th - fg ] for every parameterized problem @xmath20 the following properties are equivalent :    1 .",
    "@xmath61 2 .",
    "@xmath16 is decidable and @xmath20 has a kernelization .",
    "thus for fixed - parameter tractable problems the existence of kernels of _ polynomial _ size are of special interest . for a long time polynomial kernels",
    "only were known for parameterized problems obtained from optimization problems with the standard parameterization ( i.e.  problem @xmath12-@xmath16 defined in section [ sec - approx ] ) . in this paper",
    "we will give a lot of examples for further parameters which lead to polynomial kernels for knapsack problems .",
    "for the special case where @xmath27 is a polynomial theorem [ th - ker ] implies that polynomial fpt - algorithms lead to polynomial kernels .",
    "[ th - polyker ] let @xmath20 be some parameterized problem . if @xmath70 , then @xmath16 is decidable and there is a polynomial kernel for @xmath20 .",
    "a remarkable difference to the relation of theorem [ th - fg ] is that the reverse direction of corollary [ th - polyker ] does not hold true , unless @xmath36 .",
    "this can be shown by the knapsack problem parameterized by the number of items @xmath6 , @xmath6-kp for short . by theorem [ maintheorem2 ]",
    "there is a polynomial kernel of size @xmath71 for @xmath6-kp but by corollary [ cor - pfpt - p ] there is no polynomial fpt - algorithm for @xmath6-kp .",
    "the used transformation @xmath27 for the proof of corollary [ th - polyker ] runs in time @xmath72 , while a kernelization may have a transformation @xmath27 which runs in polynomial time in @xmath14 _ and _ @xmath15 .",
    "this will be exploited within the following characterization of problems allowing kernels of constant size .",
    "[ th - me ] for every parameterized problem @xmath20 the following properties are equivalent :    1 .",
    "@xmath70 2 .",
    "@xmath16 is decidable and @xmath20 has a kernel of @xmath73 size .",
    "\\(1 ) @xmath74 ( 2 ) : let @xmath70 and @xmath5 be a polynomial fpt - algorithm with respect to @xmath21 which runs on input @xmath13 in time @xmath75 for two constants @xmath0 and @xmath35 .",
    "w.l.o.g .",
    "we assume that there is one constant size yes - instance @xmath63 and one constant size no - instance @xmath64 of @xmath16 .",
    "we run @xmath5 on input @xmath13 and instead of deciding we transform the input to the yes- or no - instance of bounded size .",
    "this leads to a kernel of constant size and the algorithm uses polynomial time in @xmath14 and @xmath15 .",
    "\\(2 ) @xmath74 ( 1 ) : if @xmath20 has a kernel of size @xmath76 , we can solve the problem on input @xmath13 as follows .",
    "first we compute the kernel @xmath52 in polynomial time w.r.t . @xmath14 and @xmath15",
    ". then we check , whether the instance @xmath53 belongs to the set of yes - instances of size at most @xmath4 , which does not dependent on the input .",
    "the special case that we take the parameter in unary , i.e. @xmath77 , was mentioned in @xcite .",
    "then for some parameterized problem @xmath20 it holds that @xmath16 belongs to @xmath78 if and only if it has a kernel of size @xmath73 .    by theorem",
    "[ th - me ] and corollary [ cor - pfpt - p ] we obtain the following result .",
    "[ cor - pfpt - p2 ] let @xmath20 be some parameterized problem and @xmath4 be some constant such that @xmath16 is np - hard and for every instance @xmath13 of @xmath16 it holds @xmath33 .",
    "then there is no kernel of @xmath73 size with respect to @xmath21 for @xmath20 , unless @xmath36 .",
    "we have shown that every @xmath79 has for every instance @xmath13 a kernel of size @xmath80 using a kernelization of running time @xmath81 .",
    "further we have shown that every @xmath79 has for every instance @xmath13 a kernel of size @xmath73 using a kernelization of running time @xmath82 .",
    "we want to have a closer look at the differences between these two types of kernelizations .",
    "[ th - me1 ] for every parameterized problem @xmath20 the following properties are equivalent :    1 .",
    "@xmath61 2 .",
    "@xmath16 is decidable and @xmath20 has a kernelization of running time @xmath81 .",
    "@xmath16 is decidable and @xmath20 has a kernelization of running time @xmath82 .",
    "\\(1 ) @xmath83 ( 2 ) : proof of theorem 1.39 in @xcite .",
    "( 1 ) @xmath83 ( 3 ) : proof of theorem 1 in @xcite .    that is , the existence of a kernel found by a kernelization of running time which is polynomial in @xmath14 is equivalent to the existence of a kernelization of running time which is polynomial in @xmath14 and @xmath15 .",
    "it remains open whether this is also the case for the existence of polynomial kernels .    for the case of constant kernels",
    "the proof of theorem [ th - me ] uses a kernelization of running time which is polynomial in @xmath14 and @xmath15 .",
    "this is really necessary , which can be seen as follows .",
    "the knapsack problem parameterized by the capacity @xmath4 , @xmath4-kp for short , is in @xmath31 by theorem [ maintheorem ] .",
    "but if there would be a kernel for @xmath4-kp of size @xmath73 found by a kernelization of running time @xmath81 then the part ( 2 ) @xmath74 ( 1 ) of the proof of theorem [ th - me ] implies a polynomial algorithm for knapsack .    a very useful theorem for finding kernels of knapsack problems with respect to parameter number of items @xmath6 is the following result of frank and tardos on compressing large integer values to smaller ones .",
    "[ th - ft87 ] given a vector @xmath84 and an integer @xmath85 , there exists an algorithm that computes a vector @xmath86 in polynomial time , such that for some number @xmath87 , the notation @xmath88 gives its absolute value . ]",
    "@xmath89 and @xmath90 for all @xmath91 with @xmath92 .    by choosing vectors",
    "@xmath93 @xmath94 @xmath95 we immediately see that for each @xmath96 there also is @xmath97 .",
    "this result can be used to equivalently replace equations and inequalities for @xmath98 @xmath99 with @xmath100 by choosing vector @xmath101 and @xmath102 such that @xmath103 .",
    "let @xmath16 be some optimization problem and @xmath13 be some instance of @xmath16 .",
    "by @xmath104 we denote the value of an optimal solution for @xmath16 on input @xmath13 . an _ approximation algorithm _ @xmath5 for @xmath16 is an algorithm which returns a feasible solution for @xmath16 .",
    "the value of the solution of @xmath5 on input @xmath13 is denoted by @xmath105 .",
    "an approximation algorithm @xmath5 has _ relative performance guarantee @xmath102 _ , if @xmath106 holds for every instance @xmath13 of @xmath16 .",
    "a _ polynomial - time approximation scheme ( ptas ) _ for @xmath16 is an algorithm @xmath5 , for which the input consists of an instance of @xmath16 and some @xmath107 , @xmath108 , such that for every fixed @xmath107 algorithm @xmath5 is a polynomial time approximation algorithm with relative performance guarantee @xmath109 .",
    "efficient polynomial - time approximation scheme ( eptas ) _ is a ptas running in time @xmath110 , for some computable function @xmath27 and some constant @xmath23 .",
    "a _ fully polynomial - time approximation scheme ( fptas ) _ is a ptas running in time @xmath111 , for two constants @xmath4 and @xmath112 .",
    "obviously every fptas is an eptas and every eptas is a ptas .",
    "next we recall relations between the existence of approximation schemes for optimization problems and fixed - parameterized algorithms .    given some optimization problem @xmath16 the corresponding decision problem of @xmath16 is obtained by adding an integer @xmath12 to the input of @xmath16 and changing the task into the question , whether the size of an optimal solution is at least ( for maximization problems ) or at most ( for minimization problems ) @xmath12 . by choosing the threshold value @xmath12 as a parameter we obtain the so - called _ standard parameterization _",
    "@xmath12-@xmath16 of the so - defined decision problem .",
    "@xmath12-@xmath16    an instance @xmath13 of @xmath16 and an integer @xmath12 .",
    "@xmath12    is there a solution such that @xmath113 ( for a maximization problem @xmath16 ) or @xmath114 ( for a minimization problem @xmath16 ) ?    there are two useful connections between the existence of special ptas for some optimization problem @xmath16 and fpt - algorithms for @xmath12-@xmath16 .",
    "[ theorem - fg ] if some optimization problem @xmath16 has an eptas with running time @xmath115 , then there is an fpt - algorithm that solves the standard parameterization @xmath12-@xmath16 of the corresponding decision problem in time @xmath116 .",
    "[ theorem - cc97 ] if some optimization problem @xmath16 has an fptas with running time @xmath117 , then there is a polynomial fpt - algorithm that solves the standard parameterization @xmath12-@xmath16 of the corresponding decision problem in time @xmath118 .",
    "the main idea in the proofs of theorem [ theorem - fg ] and theorem [ theorem - cc97 ] is that the given approximation scheme for @xmath119 for optimization problem @xmath16 leads to an fpt - algorithm that solves the standard parameterization of the corresponding decision problem @xmath12-@xmath16 with the given running time . for so - called scalable optimization problems ( cf .",
    "@xcite ) the reverse direction of theorem [ theorem - cc97 ] also holds true .    by the definition",
    ", the existence of an approximation scheme for some optimization problem @xmath16 applies the fundamental parameter @xmath120 measuring the goodness of approximation .",
    "every ptas provides for a fixed error @xmath107 a polynomial time algorithm .",
    "since these algorithms are not very practical , the question arises whether @xmath121 can be taken out of the exponent of the input size .",
    "this is the case if the ptas is even an eptas .",
    "a formal method to combine the error bound @xmath107 and decision problems is the so - called gap version of an optimization problem , which was introduced by marx in @xcite .",
    "let @xmath16 be some optimization or decision problem and @xmath17 the set of all instances of @xmath16 .",
    "for some @xmath24 we denote by @xmath122 the value of the largest number occurring in @xmath13 .",
    "an algorithm @xmath5 is _ pseudo - polynomial _",
    ", if there is a polynomial @xmath123 such that for every instance @xmath13 the running time of @xmath5 on @xmath13 is at most @xmath124 , see @xcite .",
    "a problem @xmath16 is _ pseudo - polynomial _ if it can be solved by a pseudo - polynomial algorithm .",
    "[ def - str - np - h ] a problem is _ strongly np - hard _",
    ", if it remains np - hard , if all of its numbers are bounded by a polynomial in the length of the input .    [ th - strongnp - pseudo ] if some problem @xmath16 is strongly np - hard , then @xmath16 is not pseudo - polynomial .",
    "the notation of pseudo - polynomial algorithms can be carried over to parameterized algorithms @xcite .",
    "for an instance @xmath13 of some problem @xmath16 the function @xmath125 is defined by the maximum length of the binary encoding of all numbers in @xmath13 . since",
    "the binary coding of an integer @xmath126 has length @xmath127 , the relation @xmath128 holds and function @xmath129 is a parameter for @xmath16 .",
    "further , if there is a pseudo - polynomial algorithm @xmath5 for @xmath16 then there is a polynomial @xmath130 , such that for every instance @xmath13 of @xmath16 the running time of @xmath5 can be bounded by @xmath131 this implies that there are constants @xmath132 and @xmath133 such that the running time of @xmath5 can be bounded by @xmath134 and thus @xmath5 is an fpt - algorithm with respect to parameter @xmath125 .",
    "[ th - val - para ] for every pseudo - polynomial problem @xmath16 there is an fpt - algorithm that solves @xmath129-@xmath16 in time @xmath135 .",
    "the simplest of all knapsack problems is defined as follows .",
    "max knapsack ( max kp )    a set @xmath136 of @xmath6 items , for every item @xmath137 , there is a size of @xmath3 and a profit of @xmath2 .",
    "further there is a capacity @xmath4 for the knapsack .",
    "find a subset @xmath138 such that the total profit of @xmath8 is maximized and the total size of @xmath8 is at most @xmath4 .",
    "the max knapsack problem can be approximated very good , since it allows an fptas @xcite and thus can be regarded as one of the easiest hard problems .    in this paper ,",
    "the parameters @xmath6 , @xmath2 , @xmath3 , and @xmath4 are assumed to be positive integers , i.e. they belong to the set @xmath139 .",
    "let @xmath140 and @xmath141 .",
    "the same notations are also used for @xmath142 instead of @xmath143 . in order to avoid trivial solutions",
    "we assume that @xmath144 and that @xmath145 .    for some instance @xmath13 its size @xmath14",
    "can be bounded by the number of items and the binary encoding of all numbers in @xmath13 ( cf .",
    "@xcite ) . @xmath146",
    "the size of the input is important for the analysis of running times .    in order to show fpt - algorithms and kernelizations we frequently will use bounds on the size of the input and on the size of a solution of our problems .",
    "let @xmath64 be a knapsack instance on item set @xmath147 .",
    "instance @xmath148 on item set @xmath149 is a _",
    "reduced instance _ for @xmath64 if    @xmath150 and    @xmath151 .    for max",
    "kp we can bound the number and sizes of the items of an instance as follows .",
    "[ le - blb ] every instance of max kp can be transformed into a reduced instance , such that @xmath152 .    in order to avoid trivial solutions we assume ,",
    "that there is no item in @xmath5 , whose size is larger than the capacity @xmath4 , i.e.   @xmath153 for every @xmath154 .",
    "further for @xmath155 we can assume that there are at most @xmath156 items of size @xmath157 in @xmath5 .    by the harmonic series we always can bound the number @xmath6 of items in @xmath5 by @xmath158    if we have given an instance @xmath64 for max kp with more than the mentioned number @xmath159 of items of size @xmath157 for some @xmath155",
    ", we remove all of them except the @xmath159 items of the highest profit .",
    "the new instance @xmath148 satisfies @xmath152 and is a reduced instance of @xmath64 .",
    "the latter result is useful in remark [ rem - c - kern ] .",
    "we have shown an alternative proof for lemma [ le - blb ] in @xcite .    since the capacity @xmath4 and",
    "the sizes of our items are positive integers , every solution @xmath8 of some instance of max kp even contains at most @xmath4 items . but this observation does not lead to a reduced instance . in",
    "order so solve the problem using this bound one has to consider @xmath160 many possible subsets of @xmath5 which is much more inefficient than the dynamic programming approach mentioned in theorem [ t - dy2 ] .",
    "integer programming is a powerful tool , studied for over 50 years , that can be used to define a lot of very important optimization problems @xcite .",
    "max kp can be formulated using a boolean variable @xmath161 for every item @xmath162 , indicating whether or not @xmath137 is chosen into the solution @xmath8 , by a so - called binary integer program ( bip ) .",
    "@xmath163\\label{lp - kp3 } \\end{aligned}\\ ] ]    for some positive integer @xmath6 , let @xmath164=\\{1,\\ldots , n\\}$ ] be the set of all positive integers between @xmath165 and @xmath6 .",
    "we apply bip versions for our knapsack problems to obtain parameterized algorithms ( theorem [ maintheorem ] ) .",
    "dynamic programming solutions for max kp are well known .",
    "the following two results can be found in the textbook @xcite .",
    "[ t - dy2 ] max kp can be solved in time @xmath166 .",
    "[ t - dy1 ] max kp can be solved in time @xmath167 , where @xmath168 is an upper bound on the value of an optimal solution .    since for unary numbers the value of",
    "the number is equal to the length of the number the running times of the two cited dynamic programming solutions is even polynomial .",
    "thus max kp can be solved in polynomial time if all numbers are given in unary . in this paper",
    "we assume that all numbers are encoded in binary .",
    "although max kp is a well known example for a pseudo - polynomial problem we want to give this result for the sake of completeness .",
    "[ th - si - bug - pseudo ] max kp is pseudo - polynomial .",
    "we consider the running time of the algorithm which proves theorem [ t - dy1 ] . in the running time @xmath169",
    "part @xmath170 is polynomial in the input size and part @xmath171 is polynomial in the value of the largest occurring number in every input .",
    "( alternatively we can apply the running time of the algorithm cited in theorem [ t - dy2 ] . )",
    "since max kp is an integer - valued problem defined on inputs of various informations , it makes sense to consider parameterized versions of the problem . by adding a threshold value @xmath12 for the profit to the instance and choosing a parameter @xmath15 from this instance @xmath13 , we define the following parameterized problem .",
    "@xmath21-knapsack ( @xmath21-kp )    a set @xmath136 of @xmath6 items , for every item @xmath137 , there is a size of @xmath3 and a profit of @xmath2 .",
    "further there is a capacity @xmath4 for the knapsack and a positive integer @xmath12 .",
    "@xmath15    is there a subset @xmath138 such that the total profit of @xmath8 is at least @xmath12 and the total size of @xmath8 is at most @xmath4 .    for some instance @xmath13 of @xmath21-kp its size @xmath14",
    "can be bounded by @xmath172    next we give parameterized algorithms for the knapsack problem .",
    "the parameter @xmath173 counts the number of distinct item sizes within knapsack instance @xmath13 .",
    ".overview of parameterized algorithms for kp [ cols=\"<,<,<,^,<,<\",options=\"header \" , ]     [ maintheorem2-mkp ] there exist kernelizations for the parameterized multiple knapsack problem such that the upper bounds for the sizes of a possible kernel in table [ tab - mkp - ker - survey ] hold true .    for parameter @xmath174",
    "we proceed as in the proof of theorem [ maintheorem2 ] which shows a kernel of size @xmath71 for @xmath6-kp . in the case of",
    "@xmath6-mkp we have to scale @xmath1 inequalities of type ( [ eq - ker - n-1 ] ) on @xmath6 variables and one inequality of type ( [ eq - ker - n-2 ] ) on @xmath175 variables by theorem [ th - ft87 ] .",
    "for the obtained instance @xmath53 we can bound @xmath176 by the number of items @xmath6 and @xmath177 numbers of value at most @xmath178 and @xmath179 numbers of value at most @xmath180 . thus @xmath6-mkp has a kernel of size @xmath181 we can assume @xmath182 ( cf .",
    "beginning of section [ def - sec - mkp ] ) and since every item is assigned to at most one knapsack ( cf .",
    "( [ lp - mkp3 ] ) ) we know @xmath183 .",
    "thus we obtain a kernel of size @xmath184 for @xmath6-mkp .    for parameter @xmath185",
    "we obtain by theorem [ maintheorem - mkp ] and theorem [ th - me ] a kernel of constant size .    for the remaining six parameters of table [ tab - mkp - ker - survey ] the upper bounds follow by theorem [ maintheorem - mkp ] and theorem [ th - ker ] .",
    "we have considered the max knapsack problem and its two generalizations max multidimensional knapsack and max multiple knapsack .",
    "the parameterized decision versions of all three problems allow several parameterized algorithms .    from a practical point of view choosing",
    "the standard parameterization @xmath12 is not very useful , since a large profit of the subset @xmath8 violates the aim that a good parameterization is small for every input .",
    "so for kp we suggest it is better to choose the capacity as a parameter , i.e.  @xmath32 , since common values of @xmath4 are low enough such that the polynomial fpt - algorithm is practical .",
    "the same holds for d - kp and mkp .",
    "further one has a good parameter , if it is smaller than the input size @xmath14 but measures the structure of the instance .",
    "this is the case for the parameter number of items @xmath6 within all three considered knapsack problems .    the special case of the max knapsack problem , where @xmath186 for all items @xmath154 is known as the subset sum problem .",
    "for this case we know that @xmath187 and we conclude the existence of fpt - algorithms with respect to parameter @xmath6 , @xmath4 , and @xmath12 .",
    "kernels for the subset sum problem w.r.t .",
    "@xmath6 and the number of different sizes @xmath188 are examined in @xcite .    the closely related minimization problem @xmath189   \\label{lp}\\end{aligned}\\ ] ] is known as the change making problem , whose parameterized complexity is discussed in @xcite .    in our future work , we want to find better fpt - algorithms , especially for d - kp and mkp .",
    "we also want to consider the following additional parameters .",
    "* @xmath190 for kp * @xmath190 , @xmath191 , @xmath192 , @xmath171 , @xmath193 , and @xmath129 for d - kp , and * @xmath173 , @xmath190 , @xmath129 , @xmath192 , @xmath171 , and @xmath193 for mkp .    also from a theoretical point of view",
    "it is interesting to increase the number of parameters for which the parameterized complexity of the considered problems is known .",
    "for example if our problem is @xmath194$]-hard with respect to some parameter @xmath21 , then a natural question is to ask , whether it remains hard for the _ dual parameter _",
    "that is , if @xmath21 measures the costs of a solution , then for some optimization problem the dual parameter @xmath196 measures the costs of the elements that are not in the solution @xcite . since @xmath12-d - kp is @xmath194$]-hard the question arises , whether d - kp becomes tractable w.r.t .",
    "parameter @xmath197 .",
    "more general , one also might consider more combined parameters , i.e.parameters that consists of two or more parts of the input .",
    "for d - kp combined parameters including @xmath12 are of our interest .",
    "the existence of polynomial kernels for knapsack problems seems to be nearly uninvestigated .",
    "recently a polynomial kernel for kp using rational sizes and profits is constructed in @xcite by theorem [ th - ft87 ] .",
    "this result also holds for integer sizes and profits ( cf .",
    "theorem [ maintheorem2 ] ) . by considering polynomial fpt - algorithms we could show some lower bounds for kernels for kp ( cf .",
    "table [ tab - kp - ker - survey ] ) .",
    "we want to consider further kernels for d - kp and mkp , try to improve the sizes of known kernels , and give lower bounds for the sizes of kernels .",
    "a further task is to extend the results to more knapsack problems , e.g. max - min knapsack problem and restricted versions of the presented problems , e.g. multiple knapsack with identical capacities ( mkp - i ) , see @xcite .",
    "we also want to consider the existence of parameterized approximation algorithms for knapsack problems , see @xcite for a survey .",
    "we would like to thank klaus jansen and steffen goebbels for useful discussions .",
    "m.  etscheid , s.  kratsch , m.  mnich , and rglin .",
    "polynomial kernels for weighted problems . in _ proceedings of mathematical foundations of computer science _ ,",
    "volume 9235 of _ lncs _ , pages 287298 .",
    "springer - verlag , 2015 .",
    "fellows , s.  gaspers , and f.a .",
    "parameterizing by the number of numbers . in _ proceedings of the symposium on parameterized and exact computation _ ,",
    "volume 6478 of _ lecture notes in computer science _ , pages 123134 .",
    "springer - verlag , 2010 .",
    "f.  gurski , j.  rethmann , and e.  yilmaz . computing partitions with applications to capital budgeting problems . in _",
    "operations research proceedings ( or 2015 ) , selected papers_. springer - verlag , 2016 . to appear .",
    "k.  jansen . a fast approximation scheme for the multiple knapsack problem . in _ proceedings of the conference on current trends in theory and practice of computer science _ ,",
    "volume 7147 of _ lncs _ , pages 313324 .",
    "springer - verlag , 2012 .",
    "j.  nederlof , e.  j. van leeuwen , and r.  van  der zwaan .",
    "reducing a target interval to a few exact queries . in _ proceedings of mathematical foundations of computer science _ , volume 7464 of _ lncs _ , pages 718727 .",
    "springer - verlag , 2012 .",
    "r.  niedermeier .",
    "reflections on multivariate algorithmics and problem parameterization . in _ proceedings of the annual symposium of theoretical aspects of computer science _ ,",
    "volume  5 of _ lipics _ , pages 1732 .",
    "schloss dagstuhl - leibniz - zentrum fuer informatik , 2010 ."
  ],
  "abstract_text": [
    "<S> the knapsack problem ( kp ) is a very famous np - hard problem in combinatorial optimization . </S>",
    "<S> also its generalization to multiple dimensions named d - dimensional knapsack problem ( d - kp ) and to multiple knapsacks named multiple knapsack problem ( mkp ) are well known problems . </S>",
    "<S> since kp , d - kp , and mkp are integer - valued problems defined on inputs of various informations , we study the fixed - parameter tractability of these problems . the idea behind fixed - parameter tractability is to split the complexity into two parts - one part that depends purely on the size of the input , and one part that depends on some parameter of the problem that tends to be small in practice . further we consider the closely related question , whether the sizes and the values can be reduced , such that their bit - length is bounded polynomially or even constantly in a given parameter , i.e. the existence of kernelizations is studied . </S>",
    "<S> we discuss the following parameters : the number of items , the threshold value for the profit , the sizes , the profits , the number @xmath0 of dimensions , and the number @xmath1 of knapsacks . </S>",
    "<S> we also consider the connection of parameterized knapsack problems to linear programming , approximation , and pseudo - polynomial algorithms .    </S>",
    "<S> * keywords : * knapsack problem ; d - dimensional knapsack problem ; multiple knapsack problem ; parameterized complexity ; kernelization </S>"
  ]
}