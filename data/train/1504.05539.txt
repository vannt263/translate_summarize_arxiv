{
  "article_text": [
    "the problem we consider in this paper is a general one of learning to predict aspects of the interaction between a decision making agent and its environment . at each of a series of discrete time steps @xmath0",
    ", the environment generates an observation @xmath1 , and the agent takes an action @xmath2 . whereas @xmath3 is an arbitrary discrete set , we assume without loss of generality that @xmath4 can be represented as a vector of bits .",
    "the action and observation events occur in sequence , @xmath5 , with each event of course dependent only on those preceding it .",
    "this sequence will be called _ experience_. we are interested in predicting not just each next observation but more general , action - conditional functions of future experience , as discussed in the next section .    in this paper we use a random - walk problem with seven states , with _ left _ and _ right _ actions available in every state :",
    "the observation upon arriving in a state consists of a special bit that is @xmath6 only at the two ends of the walk and , in the first two of our three experiments , seven additional bits explicitly indicating the state number ( only one of them is 1 ) .",
    "this is a _ continuing _ task : reaching an end state does not end or interrupt experience .",
    "although the sequence depends deterministically on action , we assume that the actions are selected randomly with equal probability so that the overall system can be viewed as a markov chain .",
    "the td networks introduced in this paper can represent a wide variety of predictions , far more than can be represented by a conventional td predictor . in this paper",
    "we take just a few steps toward more general predictions . in particular ,",
    "we consider variations of the problem of prediction by a fixed interval .",
    "this is one of the simplest cases that can not otherwise be handled by td methods .",
    "for the seven - state random walk , we will predict the special observation bit some numbers of discrete steps in advance , first unconditionally and then conditioned on action sequences .",
    "a _ td network _ is a network of nodes , each representing a single scalar prediction .",
    "the nodes are interconnected by links representing the td relationships among the predictions and to the observations and actions .",
    "these links determine the extensive semantics of each prediction  its desired or target relationship to the data .",
    "they represent _ what _ we seek to predict about the data as opposed to _ how _ we try to predict it .",
    "we think of these links as determining a set of _ questions _ being asked about the data , and accordingly we call them the _ question network_. a separate set of interconnections determines the actual computational process ",
    "the updating of the predictions at each node from their previous values and the current action and observation .",
    "we think of this process as providing the _ answers _ to the questions , and accordingly we call them the _",
    "answer network_. the question network provides targets for a learning process shaping the answer network and does not otherwise affect the behavior of the td network . it is natural to consider changing the question network , but in this paper we take it as fixed and given .",
    "figure [ network]a shows a suggestive example of a question network .",
    "the three squares across the top represent three observation bits .",
    "the node labeled 1 is directly connected to the first observation bit and represents a prediction that that bit will be 1 on the next time step .",
    "the node labeled 2 is similarly a prediction of the expected value of node 1 on the next step .",
    "thus the extensive definition of node 2 s prediction is the probability that the first observation bit will be 1 two time steps from now .",
    "node 3 similarly predicts the first observation bit three time steps in the future .",
    "node 4 is a conventional td prediction , in this case of the future discounted sum of the second observation bit , with discount parameter @xmath7 .",
    "its target is the familiar td target , the data bit plus the node s own prediction on the next time step ( with weightings @xmath8 and @xmath7 respectively ) .",
    "nodes 5 and 6 predict the probability of the third observation bit being 1 _ if _ particular actions _ a _ or _ b _ are taken respectively .",
    "node 7 is a prediction of the average of the first observation bit and node 4 s prediction , both on the next step .",
    "this is the first case where it is not easy to see or state the extensive semantics of the prediction in terms of the data .",
    "node 8 predicts another average , this time of nodes 4 and 5 , and the question it asks is even harder to express extensively .",
    "one could continue in this way , adding more and more nodes whose extensive definitions are difficult to express but which would nevertheless be completely defined as long as these local td relationships are clear .",
    "the thinner links shown entering some nodes are meant to be a suggestion of the entirely separate answer network determining the actual computation ( as opposed to the goals ) of the network . in this paper",
    "we consider only simple question networks such as the left column of figure [ network]a and of the action - conditional tree form shown in figure [ network]b .",
    "more formally and generally , let @xmath9 $ ] , @xmath10 , denote the prediction of the @xmath11th node at time step @xmath0 .",
    "the column vector of predictions @xmath12 is updated according to a vector - valued function @xmath13 with modifiable parameter @xmath14 : @xmath15 the update function @xmath13 corresponds to the answer network , with @xmath14 being the weights on its links . before detailing that process",
    ", we turn to the question network , the defining td relationships between nodes .",
    "the td target @xmath16 for @xmath17 is an arbitrary function @xmath18 of the successive predictions and observations . in vector form",
    "we have is a function of all the future predictions and observations , but in this paper we treat only the one - step case . ]",
    "@xmath19 where @xmath20 is just like @xmath21 , as in ( [ y ] ) , except calculated with the _ old _ weights before they are updated on the basis of @xmath22 : @xmath23 ( this temporal subtlety also arises in conventional td learning . ) for example , for the nodes in figure [ network]a we have @xmath24 , @xmath25 , @xmath26 , @xmath27 , @xmath28 , @xmath29 , and @xmath30 .",
    "the target functions @xmath18 are only part of specifying the question network .",
    "the other part has to do with making them potentially conditional on action and observation .",
    "for example ,",
    "node 5 in figure [ network]a predicts what the third observation bit will be _ if _ action _ a _ is taken . to arrange for such semantics",
    "we introduce a new vector @xmath31 of _ conditions , _",
    "@xmath32 , indicating the extent to which @xmath17 is held responsible for matching @xmath16 , thus making the @xmath11th prediction conditional on @xmath32 .",
    "each @xmath32 is determined as an arbitrary function @xmath33 of @xmath34 and @xmath35 . in vector form",
    "we have : @xmath36^n.\\ ] ] for example , for node 5 in figure [ network]a , @xmath37 if @xmath38 , otherwise @xmath39 .",
    "equations ( [ z][bb ] ) correspond to the _ question _ network .",
    "let us now turn to defining @xmath13 , the update function for @xmath40 mentioned earlier and which corresponds to the _ answer _ network",
    ". in general @xmath13 is an arbitrary function approximator , but for concreteness we define it to be of a linear form @xmath41 where @xmath42 is a feature vector , @xmath43 is an @xmath44 matrix , and @xmath45 is the @xmath46-vector form of the identity function ( experiments 1 and 2 ) or the s - shaped logistic function @xmath47 ( experiment 3 ) .",
    "the feature vector is an arbitrary function of the preceding action , observation , and node values : @xmath48 for example , @xmath49 might have one component for each observation bit , one for each possible action ( one of which is @xmath6 , the rest @xmath50 ) , and @xmath46 more for the previous node values @xmath51 . the learning algorithm for each component @xmath52 of @xmath43",
    "is @xmath53 where @xmath54 is a step - size parameter .",
    "the timing details may be clarified by writing the sequence of quantities in the order in which they are computed : @xmath55 finally , the target in the extensive sense for @xmath40 is @xmath56 where @xmath57 represents component - wise multiplication and @xmath58 is the policy being followed , which is assumed fixed .",
    "in this experiment we sought to predict the observation bit precisely @xmath46 steps in advance , for @xmath59 , 2 , 5 , 10 , and 25 . in order to predict @xmath46 steps in advance , of course",
    ", we also have to predict @xmath60 steps in advance , @xmath61 steps in advance , etc . , all the way down to predicting one step ahead .",
    "this is specified by a td network consisting of a single chain of predictions like the left column of figure [ network]a , but of length 25 rather than 3 .",
    "random - walk sequences were constructed by starting at the center state and then taking random actions for 50 , 100 , 150 , and 200 steps ( 100 sequences each ) .",
    "we applied a td network and a corresponding monte carlo method to this data .",
    "the monte carlo method learned the same predictions , but learned them by comparing them to the actual outcomes in the sequence ( instead of @xmath16 in ( [ eq : learn ] ) ) .",
    "this involved significant additional complexity to store the predictions until their corresponding targets were available .",
    "both algorithms used feature vectors of 7 binary components , one for each of the seven states , all of which were zero except for the one corresponding to the current state .",
    "both algorithms formed their predictions linearly ( @xmath62 was the identity ) and unconditionally ( @xmath63 ) .    in an initial set of experiments ,",
    "both algorithms were applied online with a variety of values for their step - size parameter @xmath54 . under these conditions",
    "we did not find that either algorithm was clearly better in terms of the mean square error in their predictions over the data sets .",
    "we found a clearer result when both algorithms were trained using batch updating , in which weight changes are collected  on the side \" over an experience sequence and then made all at once at the end , and the whole process is repeated until convergence . under batch updating , convergence is to the same predictions regardless of initial conditions or @xmath54 value ( as long as @xmath54 is sufficiently small ) , which greatly simplifies comparison of algorithms .",
    "the predictions learned under batch updating are also the same as would be computed by least squares algorithms such as lstd(@xmath64 ) ( bradtke & barto , 1996 ; boyan , 2000 ; lagoudakis & parr , 2003 ) .",
    "the errors in the final predictions are shown in table 1 .    for 1-step predictions , the monte - carlo and td methods performed identically of course , but for longer predictions a significant difference was observed .",
    "the rmse of the monte carlo method increased with prediction length whereas for the td network it decreased .",
    "the largest standard error in any of the numbers shown in the table is 0.008 , so almost all of the differences are statistically significant .",
    "td methods appear to have a significant data - efficiency advantage over non - td methods in this prediction - by-@xmath46 context ( and this task ) just as they do in conventional multi - step prediction ( sutton , 1988 ) .",
    ".rmse of monte - carlo and td - network predictions of various lengths and for increasing amounts of training data on the random - walk example with batch updating .",
    "[ cols=\"^,^,^,^,^,^,^,^,^,^ \" , ]",
    "experiments 1 and 2 showed advantages for td learning methods in markov problems .",
    "the feature vectors in both experiments provided complete information about the nominal state of the random walk . in experiment 3 , on the other hand , we applied td networks to a non - markov version of the random - walk example , in particular , in which only the special observation bit was visible and not the state number . in this case",
    "it is not possible to make accurate predictions based solely on the current action and observation ; the previous time step s predictions must be used as well .    as in the previous experiment",
    ", we sought to learn @xmath46-step predictions using action - conditional question networks of depths 2 , 3 , and 4 .",
    "the feature vector @xmath49 consisted of three parts : a constant 1 , four binary features to represent the _ pair _ of action @xmath65 and observation bit @xmath4 , and @xmath46 more features corresponding to the components of @xmath51 .",
    "the features vectors were thus of length @xmath66 for the three depths . in this experiment , @xmath62 was the s - shaped logistic function .",
    "the initial weights @xmath67 and predictions @xmath68 were both @xmath50 .",
    "fifty random - walk sequences were constructed , each of 250,000 time steps , and presented to td networks of the three depths , with a range of step - size parameters @xmath54 .",
    "we measured the rmse of all predictions made by the networks ( computed from knowledge of the task ) and also the  empirical rmse , \" the error in the one - step prediction for the action actually taken on each step .",
    "we found that in all cases the errors approached zero over time , showing that the problem was completely solved .",
    "figure [ exp3 ] shows some representative learning curves for the depth-2 and depth-4 td networks .        in ongoing experiments on other non - markov problems",
    "we have found that td networks do not always find such complete solutions .",
    "other problems seem to require more than one step of history information ( the one - step - preceding action and observation ) , though less than would be required using history information alone .",
    "our results as a whole suggest that td networks may provide an effective alternative learning algorithm for predictive state representations ( littman et al . , 2000 ) .",
    "previous algorithms have been found to be effective on some tasks but not on others ( e.g , singh et al . , 2003 ; rudary & singh , 2004 ; james & singh , 2004 ) .",
    "more work is needed to assess the range of effectiveness and learning rate of td methods vis - a - vis previous methods , and to explore their combination with history information .",
    "td networks suggest a large set of possibilities for learning to predict , and in this paper we have begun exploring the first few .",
    "our results show that even in a fully observable setting there may be significant advantages to td methods when learning td - defined predictions .",
    "our action - conditional results show that td methods can learn dramatically faster than other methods .",
    "td networks allow the expression of many new kinds of predictions whose extensive semantics is not immediately clear , but which are ultimately fully grounded in data .",
    "it may be fruitful to further explore the expressive potential of td - defined predictions .",
    "although most of our experiments have concerned the representational expressiveness and efficiency of td - defined predictions , it is also natural to consider using them as state , as in predictive state representations .",
    "our experiments suggest that this is a promising direction and that td learning algorithms may have advantages over previous learning methods .",
    "finally , we note that adding nodes to a question network produces new predictions and thus may be a way to address the discovery problem for predictive representations .",
    "the authors gratefully acknowledge the ideas and encouragement they have received in this work from satinder singh , doina precup , michael littman , mark ring , vadim bulitko , eddie rafols , anna koop , tao wang , and all the members of the rlai.net group .",
    "james , m.  and singh , s. ( 2004 ) .",
    "learning and discovery of predictive state representations in dynamical systems with reset . in _ proceedings of the twenty - first international conference on machine learning _ ,",
    "pages 417424 .",
    "sutton , r.  s. ( 1995 ) .",
    "models : modeling the world at a mixture of time scales .",
    "in a.  prieditis and s.  russell ( eds . ) , _ proceedings of the twelfth international conference on machine learning _ , pp .  531539 .",
    "morgan kaufmann , san francisco ."
  ],
  "abstract_text": [
    "<S> we introduce a generalization of temporal - difference ( td ) learning to networks of interrelated predictions . rather than relating a single prediction to itself at a later time , as in conventional td methods , a td network relates each prediction in a set of predictions to other predictions in the set at a later time . </S>",
    "<S> td networks can represent and apply td learning to a much wider class of predictions than has previously been possible . using a random - walk example </S>",
    "<S> , we show that these networks can be used to learn to predict by a fixed interval , which is not possible with conventional td methods . </S>",
    "<S> secondly , we show that if the inter - predictive relationships are made conditional on action , then the usual learning - efficiency advantage of td methods over monte carlo ( supervised learning ) methods becomes particularly pronounced . </S>",
    "<S> thirdly , we demonstrate that td networks can learn predictive state representations that enable exact solution of a non - markov problem . </S>",
    "<S> a very broad range of inter - predictive temporal relationships can be expressed in these networks . </S>",
    "<S> overall we argue that td networks represent a substantial extension of the abilities of td methods and bring us closer to the goal of representing world knowledge in entirely predictive , grounded terms .    </S>",
    "<S> temporal - difference ( td ) learning is widely used in reinforcement learning methods to learn moment - to - moment predictions of total future reward ( value functions ) . in this </S>",
    "<S> setting , td learning is often simpler and more data - efficient than other methods . </S>",
    "<S> but the idea of td learning can be used more generally than it is in reinforcement learning . </S>",
    "<S> td learning is a general method for learning predictions whenever multiple predictions are made of the same event over time , value functions being just one example . </S>",
    "<S> the most pertinent of the more general uses of td learning have been in learning models of an environment or task domain ( dayan , 1993 ; kaelbling , 1993 ; sutton , 1995 ; sutton , precup & singh , 1999 ) . in these works , </S>",
    "<S> td learning is used to predict future values of many observations or state variables of a dynamical system .    </S>",
    "<S> the essential idea of td learning can be described as  learning a guess from a guess \" . in all previous work , </S>",
    "<S> the two guesses involved were predictions of the same quantity at two points in time , for example , of the discounted future reward at successive time steps . in this paper </S>",
    "<S> we explore a few of the possibilities that open up when the second guess is allowed to be different from the first .    to be more precise </S>",
    "<S> , we must make a distinction between the _ extensive definition _ of a prediction , expressing its desired relationship to measurable data , and its _ td definition _ , expressing its desired relationship to other predictions . in reinforcement learning , for example </S>",
    "<S> , state values are extensively defined as an expectation of the discounted sum of future rewards , while they are td defined as the solution to the bellman equation ( a relationship to the expectation of the value of successor states , plus the immediate reward ) . </S>",
    "<S> it s the same prediction , just defined or expressed in different ways . in past work with td methods , the td relationship was always between predictions with identical or very similar extensive semantics . in this paper </S>",
    "<S> we retain the td idea of learning predictions based on others , but allow the predictions to have different extensive semantics . </S>"
  ]
}