{
  "article_text": [
    "prolog is a representative programming language for introductory education in ai programming .",
    "it has several characteristic mechanisms , including powerful pattern matching ( unification , in prolog terminology ) , automatic backtracking , and meta - programming .",
    "however , the implementation of these mechanisms is unique , so it is difficult for beginners to learn prolog , especially if they have experience in procedural programming languages like c and basic .",
    "extra - logical predicates , such as ` assertz ' and ` retract ' , enable knowledge data to be altered dynamically and meta - programs to be created but they can also make prolog programs difficult to understand and debug .    visualization using program diagrams can effectively facilitate the understanding and debugging of programs . the transparent prolog machine , a well - known prolog visualization system@xcite , displays the structure of a pure prolog program as a tree with and/or branches ( an and/or tree ) and depicts the states of the various goals as symbols at its nodes . other visualization and debugging systems for prolog and ( constraint ) logic programming languages ( e.g. @xcite ) also use and/or trees . however , it is not easy to correlate the content of a prolog program with that of its corresponding and/or tree because the structure of the clauses of the prolog program and their representations in the and/or tree are different .",
    "this paper is the first report that describes a prolog visualization system , which we have implemented in sicstus prolog @xcite to support prolog programming education .",
    "the system uses logichart diagrams to visualize prolog programs .",
    "logichart is a program diagram description language that we developed to help visualize the execution flow of prolog programs @xcite .",
    "a logichart diagram has a tree - like structure , as shown in fig .",
    "[ logichart ] , with the following two features .",
    "( 1 ) the head and body goals that compose each clause are aligned horizontally , and ( 2 ) a calling goal and the heads of the clauses that it calls are aligned vertically .",
    "feature ( 1 ) gives clauses in a prolog program and their representations in the corresponding logichart diagram a similar structure so that it is easier to see the correspondences between them .",
    "feature ( 2 ) makes it easier to understand the relationships between related clauses , because they are vertically adjacent .",
    "the system has three functions : ( 1 ) it animates prolog execution ( goal calling , success , and failure ) on the logichart diagram , ( 2 ) it visualizes a dynamic change in a prolog program in real time by calling extra - logical predicates , such as ` assertz ' and ` retract ' , and ( 3 ) it displays variable substitution processes in a text widget in real time .",
    "logichart diagrams have been developed to represent computation , which is the response of a prolog program to a query , as an intelligible diagram @xcite .",
    "a prolog program is visualized by using logichart diagrams as follows . for goal sequences ` g@xmath0 , g@xmath1 g@xmath2 ' of a user s query , the system adds the clause ` prolog_program : - g@xmath0 , g@xmath3 , @xmath4 g@xmath2 . ' to the program .",
    "the node labeled ` prolog_program ' corresponding to the head of this clause is the root node of the logichart diagram .",
    "the head and body goals composing a clause are horizontally aligned from left to right according to the prolog syntax . however",
    ", a goal and clauses , which have heads that can be unified with it , are vertically aligned from top to bottom in the same order as the clauses in the prolog program . in this manner , the logichart is defined based on the prolog syntax and the evaluation rule of prolog interpreters ( leftmost derivation , depth - first search ) . as a result , a logichart diagram is relatively easy to understand , and correspondence with the source prolog program is clearly presented .",
    "it must be noted that the logichart diagram includes an execution tree ( whose root node is labeled ` prolog_program ' ) for the user s query as a subtree .",
    "figure  [ logichart ] shows a logichart diagram that corresponds to the prolog program shown below and the query ` ? - test(x , y , z ) . ' .    ....",
    "test(x , y , z ) : - appendlist(x , y , z ) ,          write((x , y , z)),nl .",
    "test ( _ , _ , _ ) : - write(end),nl .",
    "appendlist([],x , x ) .",
    "appendlist([x|l1],l2,[x|list ] ) : -           appendlist(l1,l2,list ) . ....",
    "node labels used in logichart diagrams are shown in fig .",
    "[ labels ] .",
    "the heads , body goals , built - in predicates , and user - defined predicates are clearly and distinctively depicted using these node labels .",
    "the label ` recursive clause ' enables depicting a prolog program including recursive goals within a finite - area logichart diagram .",
    "we formalized logichart - agg @xcite , an attribute graph grammar defined for specifying the syntax and layout rules of logichart diagrams .",
    "it consists of a context - free graph grammar whose productions are formalized to specify the graph - syntax rules of logichart diagrams .",
    "it also uses semantic rules , which are defined so that they extract the layout information needed to display a logichart diagram as the attributes attached to node labels .",
    "the semantic rules are formalized so as to obtain logichart diagrams for a minimum - area layout under a specific layout constraint .",
    "the logichart - agg specifications are very concise and consist of 13 productions associated with 88 semantic rules .",
    "some of the productions and their associated semantic rules in the logichart - agg are illustrated in figs .",
    "[ prod1 ] to [ prod4 ] .    ' , width=340 ]    figure [ prod1 ] shows the production and semantic rules to rewrite the initial node ` [ prolog _ program ] ' .",
    "these rules are formalized to represent queries given in the prolog syntax , and the nonterminal node ` goal ' in the right - hand - side graph corresponds to the query .",
    "a graph that is isomorphic to the right - hand side of production 1 is derived by applying this production to the initial node .",
    "semantic rules @xmath5 and @xmath6 mean that the x - coordinate of node ` 1 ' is ` rootx ' and that the y - coordinate of node ` 1 ' is ` rooty ' .",
    "semantic rule @xmath7 means that the x - coordinate of node ` 2 ' is equal to ` rootx ' plus the width of the node labeled `` prolog_program '' plus the horizontal gap ` gapx ' .",
    "semantic rule @xmath8 means that the y - coordinate of node ` 2 ' is ` rooty ' .",
    "the root node `` prolog_program '' and the subdiagram derived from the nonterminal node ` 2 ' labeled ` goal ' are aligned with a horizontal separation of ` gapx ' by these semantic rules .        the production and semantic rules shown in fig .",
    "[ prod2 ] are as formalized for the ` and ' operation on prolog goals .",
    "a node labeled ` goal ' is replaced with a graph that is isomorphic to the right - hand side of production 2 by applying this production .",
    "semantic rule @xmath9 means that the x - coordinate of node ` 2 ' is equal to the x - coordinate of node ` 1 ' plus the width of the subdiagram derived from node ` 1 ' plus the horizontal gap ` gapx ' .",
    "therefore , goals connected by the operator ` and ' are aligned with a separation of ` gapx ' horizontally .        the production and semantic rules shown in fig . [ prod4 ]",
    "are formalized for the call of a goal .",
    "the semantic rule @xmath10 means that the y - coordinate of node ` 2 ' is equal to the y - coordinate of node ` 1 ' plus the depth of node ` 1 ' plus the vertical gap ` gapy ' .",
    "therefore , a calling goal and the clause heads of the goals called by it are aligned with a separation of ` gapy ' vertically .    implementing the prolog visualization system in complete accord with logichart - agg guarantees that , for any correct prolog program , the corresponding logichart diagram is displayed ( completeness ) and any logichart diagram displayed by the system is valid for logichart - agg ( soundness ) @xcite .",
    "the prolog visualization system is implemented in sicstus prolog with the tkl / tk library @xcite and is intended to support prolog programming education .",
    "a user edits and then saves a prolog program by using the system s text editor or other editors .",
    "he / she then inputs the prolog program into the system .",
    "next , he / she inputs a query into the system via a query - inputting window . a logichart diagram for the prolog program and the query",
    "is then depicted in a canvas widget .",
    "figure [ text ] shows the system s text editor , and fig .",
    "[ query ] shows the query - inputting window .",
    "the system has some features specifically designed to support prolog programming learning .",
    "the system visually traces prolog execution on a logichart diagram in real time .",
    "a tracer implemented using a meta - interpreter technique displays the goal - execution process on the logichart diagram ; the color of each node changes depending on the goal state , i.e. , the node corresponding to a goal that has been called becomes green , a goal that has succeeded becomes blue , and a goal that has failed becomes red .",
    "the tracer has two modes , i.e. , one - step and automatic . in the one - step mode , each step of goal calling is executed and visualized in the logichart diagram whenever the ` go ' button is pressed , while in the automatic mode the query is executed completely and the final state is visualized in the logichart diagram .",
    "the effect of cut ( ` ! ' ) on a program execution flow is clearly and intelligibly visualized in the one - step mode on a logichart diagram .",
    "figure [ cut ] shows a screen shot of a visual trace of the prolog program shown below and the query ` ?",
    "- f. ' .    ....",
    "f : - g , ! , h , fail .",
    "f.      g : - write(a),nl .",
    "g : - write(b),nl .",
    "h. ....        if the goals specified in a query are satisfied , and if variables are included in the query , then the system displays a messagebox window that asks whether the system executes backtracking or not .",
    "if the user clicks the ` yes ' button , the system executes backtracking and the backtracking process is visualized on the logichart diagram .",
    "dynamic changes in a prolog program by calling extra - logical predicates , such as ` asserta ' , ` assertz ' , and ` retract ' , are visualized in real time using a logichart diagram .",
    "figures [ before ] and [ after ] show a dynamic change in the prolog program shown below and the query ` ? - f. ' by calling ` assertz((g(y ) : - k(y ) ) ) ' .    ....",
    "f : - g(x ) , h(x ) , g(x ) .",
    "g(a ) .",
    "h(y ) : - assertz((g(y ) : - k(y ) ) ) .",
    "k(x ) : - write(x ) .",
    "....            clauses retracted by calling ` retract ' are not eliminated but depicted with crosses in a logichart diagram . for the prolog program shown below and the query ` ? - f. ' , a screen shot of a logichart diagram after calling ` retract((g : - write(a ) ) ) ' is shown in fig .",
    "[ retract ] .    ....",
    "f : - g , h , g , fail .",
    "g : - write(a ) .",
    "g : - write(b ) .",
    "h : - retract((g : - write(x ) ) ) . ....",
    "if the nodes corresponding to those of the retracted clauses are eliminated from the logichart diagram , the backtracking process in the logichart diagram becomes impossible to visualize .",
    "depicting retracted clauses with crosses enables visualizing the backtacking process in the logichart diagram .",
    "the variable - substitution process is displayed in a text widget in real time .",
    "figure [ variable ] shows a text widget displaying variable substitution for each node .",
    "we are now implementing a function to display variable - substitution information within the logichart diagram .",
    "we presented a prolog visualization system that is implemented in complete accord with logichart - agg .",
    "logichart diagrams make it easy to understand the prolog execution flow .",
    "a remarkable feature of the system is that it visualizes the dynamic alteration of a logichart diagram by calling extra - logical predicates , such as ` assertz ' and ` retract ' .",
    "we are currently developing fine- and coarse - grained ( logichart ) diagrams as proposed in @xcite to visualize and navigate in large execution trees .",
    "these will help to develop the prolog visualization system into a practical prolog developing environment .",
    "the usefulness of our prolog visualization system for prolog programming education needs to be empirically investigated .",
    "99 eisenstadt , m. , brayshaw , m. : a fine - grained account of prolog execution for teaching and debugging , _ instructional science _ , vol.19 , no.4 , pp.407436 ( 1990 ) .",
    "brayshaw , m. , eisenstadt , m. : a practical graphical tracer for prolog , _ j. man - machine studies _ , 35 , pp.597631 ( 1991 ) .",
    "tamir , d.e . : a visual debugger for pure prolog , _ information sciences _ , vol.3 , no.2 , pp.127147 ( 1995 ) .",
    "carro , m. , hermenegildo , m. : tools for search - tree visualization : the apt tool .",
    "lecture notes in computer science , vol.1870 , springer - verlag , pp.237252 ( 2000 ) .",
    "cameron , m. , garcia de la banda , m. , marriott , k. , moulder , p. : vimer : a visual debugger for mercury , _ proceedings of the fifth acm - sigplan international conference on principles and practices of declarative programming ( ppdp03 ) _ , pp.5666 ( 2003 ) .",
    "`` sicstus syntax '' , http://www.sics.se/isl/sicstuswww/site/index.html adachi , y. , imaki , t. , tsuchida , k. , yaku , t. : prolog visualization based on attribute graph grammar , _ proceedings cdrom of the fundamental conference of the 15th ifip world computer congress _ ( 1998 ) .",
    "adachi , y. , tsuchida , k. , imaki , t. , yaku , t. : logichart - intelligible program diagram for prolog and its processing system , _ electronic notes in theoretical computer science _ ,",
    "volume 30 , issue 4 , elsevier science ( 2000 ) .",
    "adachi , y. , furusawa , y. : logichart : a prolog program diagram and its layout , _ electronic communications of the easst _ , volume 7 , pp.4762 ( 2007 ) .",
    "adachi y. : syntax - directed program visualization , _ proceedings of the 2005 international workshop on visual languages and computing _ , pp.303308 ( 2005 ) ."
  ],
  "abstract_text": [
    "<S> we have developed a prolog visualization system that is intended to support prolog programming education . </S>",
    "<S> the system uses logichart diagrams to visualize prolog programs . </S>",
    "<S> the logichart diagram is designed to visualize the prolog execution flow intelligibly and to enable users to easily correlate the prolog clauses with its parts . </S>",
    "<S> the system has the following functions . </S>",
    "<S> ( 1 ) it visually traces prolog execution ( goal calling , success , and failure ) on the logichart diagram . </S>",
    "<S> ( 2 ) dynamic change in a prolog program by calling extra - logical predicates , such as ` assertz ' and ` retract ' , is visualized in real time . </S>",
    "<S> ( 3 ) variable substitution processes are displayed in a text widget in real time . </S>"
  ]
}