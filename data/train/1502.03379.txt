{
  "article_text": [
    "genetic material can be transferred between organisms by hybridization , recombination and horizontal gene transfer besides traditional reproduction .",
    "recent studies in comparative genomics suggest that these `` lateral '' processes are a driving force in evolution which shapes the genome of a species  @xcite . accordingly",
    ", phylogenetic networks have commonly been used to model reticulate evolutionary histories of species  @xcite . a plethora of methods for reconstructing reticulate evolutionary histories of species and related algorithmic issues",
    "have extensively been studied over the past two decades  @xcite .",
    "phylogenetic network _ is an acyclic digraph with a set @xmath0 of labeled leaves ( that is , vertices of outdegree zero ) and a root ( having indegree zero ) .",
    "the leaves are in one - to - one correspondence with a collection of taxa under study , whereas the unique root represents their least common ancestor .",
    "vertices with indegree one represent speciation events .",
    "vertices of indegree at least two represent an evolutionary process by which genetic material was horizontally transferred from one species to another .",
    "a fundamental question in the study of phylogenetic networks is to determine whether a tree is _ displayed _ by a phylogenetic network over the same set of taxa ( in a sense we define precisely below ) .",
    "this problem is called the _ tree containment problem _  @xcite . answering this question is indeed useful to validate and justify a phylogenetic network model by testing whether it displays existing phylogenies over a set of taxa under study .",
    "the problem is -complete in general  @xcite , even on the more restricted class of _ tree - sibling time - consistent regular networks _  @xcite .",
    "although great effort has been devoted to the study of that problem , it has been shown to be polynomial - time solvable only for a couple of interesting classes of phylogenetic networks , namely , _",
    "normal _ networks and _ tree - child _ networks  @xcite .",
    "determining the complexity of the tree containment problem for a class of phylogenetic networks that properly contains tree - child networks , particularly those with the so - called _ reticulation - visibility property _ , is an open problem  @xcite .    in this paper",
    ", we study the tree containment problem for _ nearly stable _ phylogenetic networks ( defined in the next section ) , which generalize normal and tree - child networks .",
    "recombination histories of viruses , hybridization histories of plants , and histories of horizontal gene transfers reported in literature often satisfy the property that defines those networks  @xcite .",
    "our key results include : ( i ) the number of reticulations in a reticulation - visible or nearly stable phylogenetic network is linearly bounded from above in terms of the number of taxa ; and ( ii ) the tree containment problem for nearly stable phylogenetic networks can be solved in quadratic time . omitted proofs and details will appear in the extended version .",
    "a _ ( phylogenetic ) network _ on a set @xmath0 of taxa is a directed acyclic graph with a single root ( a vertex with indegree 0 ) which satisfies the following properties : ( i ) its leaves ( vertices with outdegree 0 ) are in one - to - one correspondence with the taxa in @xmath0 ; ( ii ) there are no vertices with both indegree one and outdegree one ; and ( iii ) there is a path from the root to any other vertex .",
    "we identify each leaf with the taxon corresponding to it and refer to the directed edges ( tail , head ) as _",
    "branches_.    in a network , _ reticulation vertices _ ( or simply _ reticulations",
    "_ ) are vertices with indegree at least two and outdegree one ; _ tree vertices _ are vertices with indegree one and outdegree at least two .",
    "a branch is a _ tree branch _ if it ends at a tree vertex ; it is called a _ reticulation branch _ otherwise .",
    "a network is _ binary _ if its root , leaves and the other vertices have degree 2 , 1 and 3 , respectively .",
    "a _ phylogenetic tree _ is simply a binary network without reticulations .    for a binary network @xmath1 ,",
    "we shall use @xmath2 to denote the root of @xmath1 .",
    "let @xmath3 and @xmath4 be vertices in @xmath1 .",
    "we say that @xmath3 is a _ parent _ of @xmath4 and @xmath4 is a _ child _ of @xmath3 if @xmath5 is a branch .",
    "more generally , we say that @xmath3 is an _ ancestor _ of @xmath4 and equivalently @xmath4 is a _ descendant _ of @xmath3 if there is a directed path from @xmath3 to @xmath4 .",
    "a vertex @xmath3 in @xmath1 is a",
    "_ stable ancestor _ of a vertex @xmath6 if it belongs to all directed paths from @xmath2 to @xmath6 .",
    "we say that @xmath3 is _ stable _ if there exists a leaf @xmath7 such that @xmath3 is a stable ancestor of @xmath7 .",
    "[ three_facts ] let @xmath1 be a binary network .",
    "the following facts hold .    *",
    "a vertex is stable if it has a stable tree child . *",
    "a reticulation is stable if and only if its unique child is a stable tree vertex . *",
    "if a tree vertex is stable , then its children can not both be reticulations .",
    "a network is a _ tree - child _",
    "network if every vertex has a child that is a tree vertex  @xcite .",
    "it can be proved that a network is a tree - child network if and only if every vertex is stable .",
    "it is _ reticulation - visible _ if all its reticulations are stable  @xcite .",
    "it is _ nearly stable _ if for every vertex , either that vertex is stable or its parents are .    _ contracting _ a branch @xmath8 means replacing it with a single vertex @xmath9 in such a way that all neighbors of @xmath10 and @xmath6 become neighbors of @xmath9 . given a binary phylogenetic tree @xmath11 and a binary network @xmath1 , we say that @xmath1 _ displays _",
    "@xmath11 if there is a spanning subtree @xmath12 of @xmath1 that is a _ subdivision _ of @xmath11 , i.e. @xmath12 has the same vertex set as @xmath1 and @xmath11 can be obtained from @xmath12 by contracting all branches in @xmath12 incident with the vertices with outdegree 1 and indegree 1 , all branches incident with the `` dummy leaves '' ( leaves in @xmath12 that correspond to tree vertices in @xmath1 ) , and all branches incident with a vertex of indegree 0 and outdegree 1 .",
    "shows an example of a phylogenetic network @xmath1 and a tree that is displayed in @xmath1 .",
    "obtained after the reticulation branch between the parents of @xmath13 and @xmath14 is removed .",
    "( c ) a tree displayed in @xmath1 through the subtree in ( b).,scaledwidth=70.0% ]    in this work , we study the _ tree containment problem _ ( tcp ) , which is that of determining whether a phylogenetic tree is displayed by a network or not .",
    "an arbitrary network with @xmath15 leaves can have a very large number of reticulations . to analyze the time complexity of an algorithm designed for solving a network problem",
    ", we need to bound the size of the network by a function of @xmath15 .",
    "removing a reticulation branch from each reticulation in a binary network @xmath1 yields a spanning subtree @xmath12 .",
    "all leaves in @xmath1 are still leaves in @xmath12 , but @xmath12 may additionally contain some  dummy leaves \" that correspond to tree vertices whose outgoing branches have both been removed .",
    "the following lemma says that it is always possible to remove proper reticulation branches so as to obtain a tree without dummy leaves .",
    "[ lemma_no_dead_end ] let @xmath1 be a binary reticulation - visible phylogenetic network .",
    "we can determine which reticulation branch to remove at each reticulation so that the tree obtained after removing the selected branches contains no dummy leaves .",
    "let @xmath11 be a tree obtained from @xmath1 by removing exactly one reticulation branch incident to each reticulation .",
    "in order for @xmath11 not to contain any dummy leaves , we need to guarantee that the reticulation branches to be removed are incident with different tree vertices . in other words , the branches to be removed",
    "form a matching that covers every reticulation in @xmath1 .",
    "since @xmath1 has the reticulation - visibility property , the parents of each reticulation are both tree vertices ( ) .",
    "such a set of reticulation branches exists and can be found by applying hall s theorem to a bipartite graph with tree vertices and reticulations as vertex sets and reticulation branches as edges .",
    "since each reticulation is the head of two reticulation branches and each tree vertex is the tail of at most two reticulation branches , there exists a matching that covers all the reticulations ( see a result of n. alon on page 429 in @xcite ) .     is a non - cross branch removed from a path .",
    "assume that a cross branch @xmath16 has been removed from a reticulation @xmath17 inside the segment from @xmath3 and @xmath4 , where @xmath18 is not shown , and two cross branches have also been removed from two tree vertices @xmath19 and @xmath20 between @xmath17 and @xmath4 .",
    "* c*. some cross branches must have been removed from their tails located between the heads of two non - cross branches that are removed from a path ( in this case , between @xmath4 and @xmath21 ) . *",
    "d*. if two cross branches have been removed from two reticulations in a path , then the upper reticulation ( @xmath22 here ) is not stable .",
    "[ linear_bound_figure],scaledwidth=90.0% ]    [ linear_bound ] let @xmath1 be a binary reticulation - visible phylogenetic network with @xmath15 leaves .",
    "then @xmath1 has at most @xmath23 reticulations .",
    "assume @xmath1 contains @xmath24 reticulations . by",
    ", we can obtain a tree @xmath11 without dummy leaves by removing @xmath24 reticulation branches from @xmath1 . since @xmath1 is binary",
    ", an internal vertex in @xmath11 has either one or two children ; equivalently , @xmath11 is a subdivision of a rooted binary tree @xmath12 over the same leaves as @xmath1 . therefore , @xmath12 has @xmath25 internal vertices ( including its root ) of outdegree 2 and there are @xmath26 paths @xmath27 ( @xmath28 ) satisfying ( i ) the ends of each @xmath27 are either the root of @xmath11 , a leaf , or internal vertices of outdegree 2 , and ( ii ) each internal vertex of @xmath27 has both indegree and outdegree 1 if @xmath27 consists of two or more branches .    for each path @xmath27 of length @xmath29 ,",
    "an internal vertex of @xmath27 is either a tree vertex of @xmath1 , whose outgoing branch not in @xmath27 has been removed , or a reticulation , whose incoming branch not in @xmath27 has been removed . for convenience of discussion , we divide the removed reticulation branches into * cross * and * non - cross * branches ( with respect to @xmath11 ) ( a ) .",
    "a removed branch is called a _ cross branch _ if its tail and head are located on two different paths @xmath27 and @xmath30 , @xmath31 , otherwise it s called a _",
    "non - cross branch_. we first have the following facts .",
    "assume at least @xmath32 cross branches @xmath33 have been removed from the @xmath26 paths @xmath27 .",
    "at least two heads @xmath22 and @xmath34 are on the same path @xmath27 ( d ) . using an argument similar to that used in the proof of fact ( 2 ) , one of @xmath22 and @xmath34 which is upstream in @xmath27 is not stable , a contradiction .",
    "therefore , at most @xmath26 cross branches have been removed to produce @xmath11 .",
    "by fact ( 3 ) , there are also at most @xmath26 non - cross branches removed during the process .",
    "since we removed one incoming branch for each reticulation , we conclude that there are at most @xmath23 reticulations in @xmath1 .",
    "[ lemma : bin - ns - to - bin - rv ] let @xmath1 be a binary nearly stable network , and let @xmath35 ( resp .",
    "@xmath36 ) denote the number of all unstable ( resp .",
    "stable ) reticulations in @xmath1 .",
    "we can transform @xmath1 into a binary reticulation - visible network @xmath37 with the property that @xmath37 has the same leaf set as @xmath1 and @xmath38 .",
    "let @xmath39 be an unstable reticulation in @xmath1 , whose child is denoted by @xmath14 .",
    "since @xmath1 is nearly stable , @xmath14 is stable . by ( 2 )",
    ", @xmath14 is a stable reticulation .",
    "let @xmath13 denote a parent of @xmath39 ; then @xmath13 is stable by definition of @xmath1 , and it is a tree vertex by ( 2 ) .",
    "let @xmath40 denote the other child of @xmath13 . since @xmath13 is stable",
    ", @xmath40 is a tree vertex ( ( 3 ) ) .",
    "in addition , @xmath40 is stable .",
    "assume on the contrary that @xmath40 is unstable",
    ". then both its children must be stable by the nearly - stable property of @xmath1 .",
    "hence , by ( 2 ) and the fact that @xmath40 is unstable , both its children are stable reticulations .",
    "since @xmath39 is unstable , @xmath39 is not a child of @xmath40 .",
    "this implies that @xmath13 is unstable , a contradiction .",
    "finally , let @xmath41 be the parent of @xmath13 .",
    "@xmath42 be the other parent of @xmath39 and @xmath43 be the other parent of @xmath14 ( see ) .",
    "note that @xmath44 .",
    "otherwise , @xmath42 is unstable , contradicting that there are no two consecutive unstable vertices . to transform @xmath1 into a binary reticulation - visible network ,",
    "we remove unstable vertex @xmath39 by first removing the branch @xmath45 , and then contracting the paths @xmath42-@xmath39-@xmath14 and @xmath41-@xmath13-@xmath40 into branches @xmath46 and @xmath47 . both @xmath14 and @xmath40",
    "are clearly still stable in the resulting network . by rewiring around every unstable reticulation in @xmath1",
    ", we produce a binary reticulation - visible network @xmath37 .",
    "the inequality follows from the fact that no stable reticulation is removed , and no new reticulation is created during the rewiring .",
    ", its stable child @xmath14 and its stable parents ( @xmath13 and @xmath42 ) in the original network @xmath1 . to transform @xmath1 into a reticulation - visible network , we remove the incoming reticulation branch @xmath45 ( * b * ) and then contract paths @xmath41-@xmath13-@xmath40 and @xmath42-@xmath39-@xmath14 ( * c * )",
    "the rewiring eliminates the unstable reticulation vertex @xmath39 .",
    "[ figure1],scaledwidth=80.0% ]    [ lemma : u - is - at - most - two - s ] for a binary nearly stable network @xmath1 , @xmath48",
    ".    directly follows from the fact that an unstable reticulation must have a stable reticulation as its child , and any stable reticulation can be the child of at most two unstable reticulations .",
    "[ bound_thm ] let @xmath1 be a binary nearly stable network with @xmath15 leaves .",
    "let @xmath49 denotes the number of tree vertices in @xmath1 .",
    "then :    1 .",
    "@xmath1 has at most @xmath50 reticulations ; 2 .",
    "@xmath51 and @xmath52 .",
    "\\(i ) and imply @xmath53 .",
    "\\(ii ) we can think of the network as a flow network , with @xmath2 as source and the @xmath15 leaves as sinks .",
    "hence , the number of tree vertices equals @xmath25 plus the number of reticulations , that is , at most @xmath54 ( by ( i ) ) .",
    "since the outdegree of the root is two , and the outdegrees of each tree and reticulation vertex are 2 and 1 , respectively , @xmath1 has @xmath55 branches at most .",
    "in this section , we shall present a quadratic - time algorithm for solving the tcp .",
    "if a given network @xmath1 and a given reference tree @xmath11 contain a common subphylogeny , then we can simplify the task of determining whether @xmath1 displays @xmath11 by replacing the common subphylogeny by a new leaf .",
    "therefore , without loss of generality , we assume that @xmath1 does not contain a subphylogeny with two or more leaves .",
    "we call this property the _ subphylogeny - free property_.     is the network root and the directed path from @xmath56 to @xmath9 is represented by a coiled path .",
    "the parent @xmath9 of @xmath10 is not shown in * c*.,scaledwidth=90.0% ]    [ lemma_tcp ] let @xmath1 be a nearly stable phylogenetic network satisfying the subphylogeny - free property .",
    "let @xmath57 be a longest root - to - leaf path of four or more vertices in @xmath1 , where @xmath58 and @xmath7 the leaf end .",
    "then the subnetwork consisting of the descendants of @xmath9 exhibits one of the structures given in .",
    "note that @xmath6 can not be a tree vertex : since @xmath59 is a longest root - to - leaf path , the other child of @xmath6 would otherwise be a leaf , thereby contradicting our assumption that @xmath1 satisfies the subphylogeny - free property .",
    "therefore , @xmath6 is a reticulation .",
    "there are two possible cases for @xmath10 .    1 .",
    "* the @xmath10 is a reticulation : * then @xmath10 is unstable , and @xmath9 must be a stable tree vertex ( see ( 2 ) for both claims ) , which is stable on @xmath7 or some other leaf .",
    "let @xmath43 be the other child of @xmath9 . by ( 3 )",
    ", @xmath43 is either a tree vertex or a leaf .",
    "if @xmath43 is a leaf , we obtain the subnetwork in a. if @xmath43 is a tree vertex , then neither of its children is a tree vertex : since @xmath59 is a longest path , a tree vertex child of @xmath43 would have two leaves as children , thereby contradicting the subphylogeny - free property . note",
    "that @xmath43 s children can not both be reticulations either , since otherwise @xmath9 would be unstable .",
    "therefore , one child of @xmath43 is a leaf and the other is a reticulation with a leaf child ( again because @xmath59 is a longest path ) , as shown in b. 2 .   *",
    "the @xmath10 is a tree vertex : * let @xmath41 denote the other child of @xmath10 .",
    "note that @xmath41 can not be a tree vertex , otherwise both its children would be leaves ( since @xmath59 is a longest path ) , which would contradict our assumption that @xmath1 has the subphylogeny - free property .",
    "if @xmath41 is a leaf , we obtain the subnetwork shown in c. if @xmath41 is a reticulation , then its only child is a leaf ( again because @xmath59 is a longest path ) , so @xmath41 is stable on that leaf and @xmath10 is therefore unstable . since @xmath1 is nearly stable , @xmath9 must be a stable tree vertex .",
    "we consider the other child @xmath43 of @xmath9 in the following subcases",
    "if @xmath43 is a leaf , then we have the subnetwork given in d. 2 .",
    "if @xmath43 is a tree vertex and also a parent of @xmath41 and @xmath6 , then we obtain the subnetwork in e. 3 .",
    "if @xmath43 is a tree vertex and in addition , @xmath43 is a parent of @xmath41 , but not a parent of @xmath6 : then @xmath9 is stable on @xmath60 , the unique child of @xmath41 .",
    "let @xmath61 be the other child of @xmath43 ; then @xmath61 can not be a tree vertex , since both its children would then be leaves , which would contradict our assumption that @xmath1 has the subphylogeny - free property . if @xmath61 is a reticulation , its child must be a leaf , since @xmath59 is a longest path .",
    "thus , we have the subnetwork given in f. if @xmath61 is a leaf , we obtain the subnetwork in g. 4 .   if @xmath43 is a tree vertex and in addition , @xmath43 is a parent of @xmath6 , but not a parent of @xmath41 , then a discussion similar to that of case ( 2.2 ) characterises the only two possible subnetworks ( h and [ 5_cases]i ) in this case . 5 .",
    "if @xmath43 is a tree vertex and in addition , @xmath43 is neither a parent of @xmath6 nor a parent of @xmath41 : then again we look at @xmath43 s children",
    ". both can not be reticulations , otherwise @xmath9 is unstable , a contradiction .",
    "if neither of them is a reticulation , then there is a subtree below @xmath43 ; if one of them is a reticulation and the other is a tree vertex , then again there is a subtree .",
    "the only possible case that remains , shown in j , is the case where one child is a reticulation and the other is a leaf . 6 .",
    "if @xmath43 is a reticulation : then @xmath9 unstable .",
    "this is impossible , as @xmath9 is a stable tree vertex .",
    "the subnetwork below @xmath43 of the structures shown in b , [ 5_cases]g , [ 5_cases]i , [ 5_cases]j and that below @xmath10 in c match the following pattern :        in which a leaf @xmath7 has a reticulation sibling @xmath4 and a leaf nephew , @xmath60 .",
    "such a pattern is called an _ uncle - nephew structure_. note that if @xmath7 and @xmath60 are not siblings in a tree displayed by @xmath1 , then the reticulation branch @xmath5 should not be used .",
    "if @xmath7 and @xmath60 are siblings , either @xmath5 or the other branch entering @xmath4 can be used . here , since the other branch enters @xmath4 from an unspecified vertex , it is simply called a _",
    "dangling branch_. it is not hard to see that for a tree @xmath11 in which @xmath7 and @xmath60 are siblings , if @xmath11 is displayed in the network resulting from the removal of @xmath5 , it is also displayed in the one after the dangling branch is removed .",
    "hence , to determine whether @xmath1 displays a tree @xmath11 , we can simplify the network by eliminating @xmath4 using the following processuncle - nephew reduction * in an uncle - nephew substructure shown above , remove the dangling branch if @xmath7 and @xmath60 are siblings in @xmath11 , or remove @xmath5 otherwise . then contract vertices with indegree and outdegree 1 .",
in each of the other cases , we can also simplify the network by using information on the input tree . to summarize how to simplify the network",
    ", we use the following notation for each vertex @xmath9 in a network @xmath1 :    * @xmath62 denotes the subnetwork consisting of all the descendants of @xmath9 ; * @xmath63 denotes the dangling branch entering @xmath3 from its parent not in @xmath62 for @xmath3 in @xmath62 ; * @xmath64 denotes the subnetwork obtained by adding @xmath5 into @xmath37 for a subnetwork @xmath37 of @xmath1 and a branch @xmath5 of @xmath1 ; * @xmath65 denotes the subnetwork obtained by removing @xmath5 from @xmath37 for a subnetwork @xmath37 of @xmath1 ; * @xmath66 denotes the parent of a vertex @xmath3 in a tree @xmath11 .",
    "[ validation ] let @xmath1 be a binary nearly stable network with no uncle - nephew structure , and @xmath11 a tree with the same set of labeled leaves .",
    "let @xmath9 be a tree vertex in @xmath1 .",
    "define @xmath37 as follows .    1 .",
    "when @xmath62 matches the structure of a , define @xmath67 if @xmath7 and @xmath60 are not sibling in @xmath11 and @xmath68 otherwise .",
    "2 .   when @xmath62 matches the structure of d , define @xmath69 when @xmath7 and @xmath70 are siblings , or when @xmath7 and @xmath60 are siblings and their parent is a sibling of @xmath70 in @xmath11 , and @xmath71 otherwise .",
    "3 .   when @xmath62 matches the structure of e , define @xmath72 .",
    "when @xmath62 matches the structure of f , define @xmath73 if @xmath7 and @xmath60 are siblings in @xmath11 and @xmath74 otherwise .",
    "when @xmath62 matches the structure of h , define @xmath75 if @xmath7 and @xmath60 are siblings in @xmath11 and @xmath71 otherwise .",
    "then @xmath37 is nearly stable and @xmath1 displays @xmath11 only if @xmath37 displays @xmath11 .    since none of the simplifications removes any leaf and all of them only reduce possible paths from @xmath2 to a leaf , the resulting network @xmath37 is nearly stable .",
    "assume @xmath62 is the subnetwork in a and @xmath1 displays @xmath11 .",
    "then there exists a subtree @xmath12 of @xmath1 that is a subdivision of @xmath11 and let @xmath76 corresponds @xmath3 in @xmath12 . clearly , @xmath3 is of degree 3 and hence a tree vertex in @xmath1 .",
    "we consider two cases .",
    "case a. leaves @xmath7 and @xmath60 are not siblings in @xmath11 .",
    "we first have that @xmath77 , @xmath78 for @xmath10 and @xmath6 in a. we also have @xmath79 .",
    "otherwise , @xmath60 must be a child of @xmath3 in @xmath12 and @xmath7 is a sibling of @xmath60 in @xmath11 , a contradiction .",
    "therefore , the path from @xmath3 to @xmath7 contains two or more vertices and @xmath6 is the parent of @xmath7 in this path .",
    "if @xmath10 is the parent of @xmath6 in the same path , neither @xmath80 nor @xmath81 is in @xmath12 , indicating that @xmath82 also displays @xmath11 .    if @xmath83 in the same path , then @xmath8 is not in @xmath12 and hence @xmath10 becomes a dummy leaf in @xmath12 , as there is no leaf other than @xmath7 below @xmath10 in @xmath62 .",
    "if @xmath81 is in @xmath12 , then @xmath84 is not in @xmath12 and @xmath85 is a subtree of @xmath37 in which only the dummy leaf @xmath10 is relocated .",
    "hence , @xmath37 also displays @xmath11 .",
    "case b. leaves @xmath7 and @xmath60 are siblings in @xmath11 .    then @xmath3 is a common ancestor of @xmath7 and @xmath60 in @xmath1 .",
    "if @xmath86 , the path from @xmath3 to @xmath7 in @xmath12 must be @xmath87 , as this is only path from @xmath9 to @xmath7 in @xmath1 . hence , @xmath84 and @xmath80 are not in @xmath12 .",
    "therefore , @xmath12 is a subtree of @xmath37 and @xmath37 also displays @xmath11 .",
    "if @xmath79 , then @xmath3 is an ancestor of @xmath9 and hence @xmath9 is the parent of @xmath60 in the path from @xmath3 to @xmath60 in @xmath12 .",
    "note that @xmath88 .",
    "if @xmath89 , then @xmath84 is in @xmath12 , but both @xmath80 and @xmath81 are not .",
    "@xmath90 is a subtree of @xmath37 .",
    "noting that @xmath91 is also a subdivision of @xmath11 , @xmath37 displays @xmath11 .    if @xmath83 , then @xmath92 is in the path from @xmath3 to @xmath7 in @xmath12 .",
    "this implies that @xmath8 is not in @xmath12 and @xmath10 is a dead - end in @xmath12 .",
    "if @xmath81 is in @xmath12 , the subtree @xmath93 of @xmath37 is a subdivision of @xmath11 .",
    "if @xmath81 is not in @xmath12 , the subtree @xmath94 of @xmath37 is a subtree of @xmath37 .",
    "hence , @xmath37 displays @xmath12 .",
    "similarly , we can prove that @xmath1 displays @xmath11 only if @xmath37 displays @xmath11 when @xmath62 is the subnetwork in the panels d , f , and h in .",
    "note also that the subnetworks in the panels @xmath95 and @xmath96 are essentially identical ( if the positions of @xmath6 and @xmath41 are switched ) . due to the limited space",
    ", the details are omitted here .",
    "the case when @xmath62 is the subnetwork in e is trivial , as deletion of which two reticulation branches from @xmath6 and @xmath41 does not affect outcome .    by , we are able to determine whether a nearly stable phylogenetic network @xmath1 displays a binary tree @xmath11 or not by repeatedly executing the following tasks in turn until the resulting network @xmath37 becomes a tree :    * compute a longest path @xmath59 in @xmath97 ; * simplify @xmath37 by considering the subnetwork at the end of @xmath59 according to the cases in ; * contract degenerated reticulations in @xmath37 and replace the parent of a pair of leaves appearing in both @xmath37 and @xmath11 with a new leaf .    and then check if @xmath37 is identical to @xmath11 .",
    "finally , we analyze the time complexity .",
    "let @xmath1 and @xmath11 have @xmath15 leaves . by , there are @xmath98 vertices and @xmath98 branches in @xmath1 .",
    "since we eliminate at least a reticulation in each loop step , the algorithm stops after @xmath98 loop steps . in each loop step ,",
    "a longest path can be computed in @xmath98 time ( @xcite , page 661 ) , as @xmath1 is acyclic ; both the second and third tasks can be done in constant time . in summary ,",
    "our algorithm has quadratic time complexity .",
    "we have developed a quadratic - time algorithm for the tcp for binary nearly stable phylogenetic networks .",
    "our algorithm not only is applicable to a superclass of tree - child networks , but also has a lower time complexity than the algorithm reported in @xcite .",
    "although phylogenetic network models built in the study of viral and plant evolution are often nearly stable , it is interesting to know whether the tcp is polynomial time solvable or not for networks with other weak properties .    in particular , the problem remains open for binary networks with the visibility property , but the upper bound we have presented on the number of reticulation vertices of such networks , as well as our algorithm for nearly stable phylogenetic networks , provide definitely valuable ideas to solve the problem , exactly or heuristically , on phylogenetic networks with the reticulation visibility property .",
    "the project was financially supported by merlion programme 2013 .",
    "marcussen , t. , jakobsen , k.s . , danihelka , j. , ballard , h.e . ,",
    "blaxland , k. , brysting , a.k . ,",
    "oxelman , b. : inferring species networks from gene trees in high - polyploid north american and hawaiian violets ( _ viola _ , violaceae ) .",
    "61 , 107126 ( 2012 )      moret , b.m.e .",
    ", nakhleh , l. , warnow , t. , linder , c.r . , tholse , a. , padolina , a. , sun , j. , timme , r. :",
    "phylogenetic networks : modeling , reconstructibility , and accuracy .",
    "ieee / acm trans .",
    "1(1 ) , 1323 ( 2004 )"
  ],
  "abstract_text": [
    "<S> a fundamental problem in the study of phylogenetic networks is to determine whether or not a given phylogenetic network contains a given phylogenetic tree . we develop a quadratic - time algorithm for this problem for binary nearly - stable phylogenetic networks . </S>",
    "<S> we also show that the number of reticulations in a reticulation visible or nearly stable phylogenetic network is bounded from above by a function linear in the number of taxa . </S>"
  ]
}