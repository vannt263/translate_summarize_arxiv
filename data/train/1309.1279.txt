{
  "article_text": [
    "many interesting classes of graphs are defined by forbidding induced subgraphs , see  @xcite for a survey .",
    "this is why the detection of several kinds of induced subgraphs is interesting , see  @xcite where many such problems are surveyed . in particular , the problem of deciding whether a graph @xmath2 contains as an induced subgraph some graph obtained after possibly subdividing prescribed edges of a prescribed graph @xmath7 has been studied .",
    "it turned out that this problem can be polynomial or np - complete according to @xmath7 and to the set of edges that can be subdivided .",
    "the most general tool for solving this kind of problems ( when they are polynomial ) seems to be the _ three - in - a - tree _ algorithm of chudnovsky and seymour :    [ th : cs ] let @xmath2 be a graph and @xmath8 be three distinct vertices of @xmath2 .",
    "deciding whether there exists an induced tree of @xmath2 that contains @xmath8 can be performed in time @xmath1 .    how to use three - in - a - tree",
    "is discussed in  @xcite and further evidences of its generality are given in  @xcite .",
    "the complexity of four - in - a - tree is not known , and more generally of @xmath3-in - a - tree , where @xmath9 is a fixed integer .",
    "but these problems are more tractable when restrictions are given on the girth ( length of a smallest cycle ) of the graph as suggested by derhy , picouleau and trotignon who proved :    [ th : dpt ] let @xmath2 be a triangle - free graph and @xmath10 be four distinct vertices of @xmath2 . deciding whether there exists an induced tree of @xmath2 that contains @xmath10 can be performed in time @xmath11 .    here",
    ", we study @xmath3-in - a - tree for graphs of girth at least @xmath3 .",
    "note that the problem is solved by the two theorems above for @xmath4 and @xmath5 . for @xmath6 ,",
    "we follow the method that has been already succesful for theorems  [ th : cs ] and  [ th : dpt ] : studying the structure of a graph that does not contain the desired tree .",
    "it turns out that in most of the cases , the structure is simple .",
    "note that the proofs in the present work are independent form  @xcite : we do not use results from  @xcite , and as far as we can see , our results do not simplify  @xcite or  @xcite .",
    "-structure ( @xmath12[f : cycle ] ]    we call _ @xmath3-structure _ any graph obtained from the cycle on @xmath3 vertices by adding a pending path to each vertex of cycle , see section  [ sec : k ] for a formal definition .",
    "an example is shown in figure  [ f : cycle ] which obviously does not contain an induced tree covering the @xmath3 pending vertices .",
    "the main result of section  [ sec : link ] states that for @xmath0 , a graph of girth at least @xmath3 that does not contain an induced tree covering @xmath3 given vertices _ must contain _ a @xmath3-structure .",
    "the main result of section  [ sec : k ] states that ( with one exception , see below ) , if the graph contains a @xmath3-structure , then the @xmath3-structure _ decomposes _ the graph , meaning that every vertex of the original cycle is a cut - vertex of the graph .",
    "-structure [ f : k4s ] ]    but there is a noteworthy exception that arises curiously only when @xmath13 .",
    "the graph @xmath2 on figure  [ f : k4s ] is obtained from @xmath14 by subdividing all edges once , and by adding a pending path to each vertex of degree  2 .",
    "this graph has girth 6 .",
    "let @xmath7 be a connected induced subgraph of @xmath2 that contains the 6 pending vertices .",
    "we claim that @xmath7 contains at least three vertices of degree 3 in @xmath2 .",
    "otherwise , it does not contains at least 2 of them , so the pending vertex whose neighbor is between these is isolated ; a contradiction .",
    "hence , @xmath7 contains three vertices of degree 3 and a cycle of length 6 goes through them .",
    "hence , no induced tree of @xmath2 can cover the 6 pending vertices .",
    "this is what we call a _",
    "@xmath14-structure_. the main result of section  [ sec : k4 ] states roughly that if a graph of girth  6 contains a @xmath14-structure and if no induced tree covers the 6 pending vertices then the @xmath14-structure _ decomposes _ the graph , meaning that every pair of vertices of the original @xmath14 and every vertex of degree  2 arising from the subdivisions is a cutset of the graph .",
    "let us sum up the results .",
    "our main result , theorem  [ th : main ] , states that when @xmath6 , and @xmath2 is a connected graph of girth at least @xmath3 together with @xmath3 vertices then either @xmath2 contains a @xmath3-structure that decomposes @xmath2 , or @xmath13 and @xmath2 contains a @xmath14-structure that decomposes @xmath2 , or @xmath2 contains an induced tree covering the @xmath3 vertices .",
    "all this leads to an @xmath1-time algorithm that decides whether a graph of girth at least @xmath3 contains an induced tree that covers @xmath3 prescribed vertices .",
    "we use standard notation from  @xcite .",
    "since we use only induced subgraphs , we say that @xmath2 _ contains _",
    "@xmath7 when @xmath7 is an induced subgraph of @xmath2 .",
    "also , by _ tree of @xmath2 _ we mean induced subgraph of @xmath2 that is a tree . by _",
    "path _ we mean induced path . in complexity of algorithms ,",
    "@xmath15 stands for the number of vertices of the input graph and @xmath16 for the number of its edges .",
    "we call _ terminal _ of a graph any vertex of degree one . solving @xmath3-vertices - in - a - tree or @xmath3-terminals - in - a - tree are equivalent problems , because if @xmath3 vertices @xmath17 of graph @xmath2 are given , we build the graph @xmath18 obtained from @xmath2 by adding a pending neighbor @xmath19 to @xmath20 , @xmath21",
    ". an induced tree of @xmath2 covers @xmath17 if and only an induced tree of @xmath18 covers @xmath22 .",
    "hence , in the rest of the paper we assume for convenience that the vertices to be covered are all terminals .",
    "recall that a _ terminal _ in a graph is a vertex of degree  1 .",
    "branch - vertex _ is a vertex of degree at least  3 .",
    "the following is a basic fact whose proof is omited .",
    "[ l : desctree ] a tree @xmath23 with @xmath3 terminals contains at most @xmath24 branch - vertices . moreover",
    "if @xmath23 contains exactly @xmath24 branch - vertices then every branch - vertex is of degree 3 .",
    "[ l : linktree ] let @xmath25 be integers such that @xmath0 and @xmath26 .",
    "let @xmath2 be a graph of girth at least @xmath3 and @xmath27 be @xmath28 distinct terminals of @xmath2 .",
    "let @xmath23 be an induced tree of @xmath2 whose terminals are @xmath29 .",
    "let @xmath30 be a path from @xmath31 to @xmath32 such that @xmath32 has at least one neighbor in @xmath23 and no vertex of @xmath33 has neighbors in @xmath23 .",
    "then one and only one of the following outcomes holds :    * @xmath34 contains a tree of @xmath2 that covers @xmath35 . *",
    "moreover , @xmath23 and @xmath30 can be described as follows ( up to a relabelling of @xmath37 ) : 1 .",
    "@xmath23 is the union of @xmath38 vertex - disjoint paths @xmath39 , @xmath40 , ",
    ", @xmath41 ; 2 .",
    "the only edges between these paths are such that @xmath42 is a path ; 3 .",
    "@xmath43 .",
    "this is algorithmic in the sense that when @xmath23 and @xmath30 are given , the tree of the first outcome or the relabelling of the second can be computed in time @xmath44 .    clearly , at most one of the outcomes holds ( because if the second holds then no tree of @xmath45 can cover @xmath27 )",
    "let us prove that at least one of the outcomes holds .",
    "let @xmath46 be the set of the neighbors of @xmath32 in @xmath23 .",
    "if @xmath47 then @xmath45 is a tree that covers @xmath48 so let us suppose that @xmath49 .",
    "let us call a _",
    "basic path _ any subpath of @xmath23 linking two distinct vertices of @xmath50 and with no interior vertices in @xmath50 .",
    "all the basic paths are on at least @xmath38 vertices because the girth of @xmath2 is at least @xmath3 .",
    "now we consider two cases :    * case 1 : * for all basic paths @xmath51 of @xmath23 there exists an interior vertex @xmath52 of @xmath51 that has degree two in @xmath23 .",
    "then , let @xmath53 .",
    "for all basic paths @xmath51 , if @xmath54 , then let @xmath52 be a vertex of degree two ( in @xmath23 ) of @xmath51 , let @xmath55 and go the next path @xmath51 . at the end of this loop , one vertex of degree two is deleted from all basic paths .",
    "remark that one vertex @xmath52 can be contained in several basic paths .",
    "hence , @xmath56 contains no more cycle , but is still connected because the deleted vertices have all degree  2 and exactly one is deleted in each basic path .",
    "hence , we obtain a tree @xmath56 that covers @xmath57 .",
    "this takes time @xmath44 because we enumerate all the pairs @xmath58 to find the basic paths .",
    "* case 2 : * we are not in case  1 , so there exists a basic path @xmath51 whose interior vertices are all of degree at least  3 in @xmath23 . then , since @xmath23 has @xmath59 terminals , lemma  [ l : desctree ] says that it has at most @xmath60 branch - vertices . on the other hand ,",
    "since a basic path is on at least @xmath38 vertices ( because the girth is at least  @xmath3 ) , @xmath51 contains at least @xmath61 branch - vertices of @xmath23 .",
    "so in fact , because @xmath62 , we have @xmath36 and @xmath51 contains all the @xmath61 branch - vertices of @xmath23 .",
    "since @xmath51 has no interior vertex of degree  2 , in fact @xmath51 contains @xmath38 vertices .",
    "we name @xmath63 the vertices of @xmath51 .",
    "note that @xmath32 is adjacent to @xmath64 and @xmath65 because @xmath51 is a basic path .",
    "in particular , @xmath64 and @xmath65 are not terminals of  @xmath2 .    for all @xmath66",
    ", @xmath67 is a cutvertex of @xmath23 that isolates one terminal among @xmath37 from all the other terminals .",
    "up to relabelling , we suppose that this terminal is @xmath20 .",
    "we name @xmath68 the unique path of @xmath23 between @xmath20 and @xmath67 .",
    "note that @xmath32 is not adjacent to @xmath69 ( because @xmath51 is a basic path ) .",
    "so the second outcome of our lemma holds , unless @xmath32 has at least one neighbor in some @xmath70 . for @xmath71 , we let @xmath72 be the neighbor of @xmath67 along @xmath68 , if @xmath32 has a neighbor in @xmath68 then we name @xmath73 the neighbor of @xmath32 closest to @xmath20 along @xmath68 and if no such neighbor exists , we put @xmath74 .",
    "suppose that for all @xmath75 we have @xmath76 .",
    "then , the paths @xmath77 , @xmath75 together with @xmath30 and @xmath78 form a graph with a unique cycle : @xmath79 . by deleting a vertex @xmath80 such that @xmath81",
    ", we obtain a tree that covers @xmath17 .",
    "hence , we may assume that for some @xmath82 , @xmath83 and up to symmetry we suppose @xmath84 .",
    "then @xmath85 is a cycle on @xmath86 vertices , so @xmath87 because of the girth .",
    "hence , @xmath88 , so @xmath89",
    ". then the paths @xmath90 , @xmath91 , together with @xmath30 form a tree that covers @xmath92 .",
    "a graph is a _",
    "@xmath3-structure _ with respect to @xmath3 distinct terminals @xmath17 if it is made of @xmath3 vertex - disjoints paths of length at least one @xmath93 ,  , @xmath94 such that the only edges between them are @xmath95 , @xmath96 ,  , @xmath97 , @xmath98 .",
    "[ l : firststep ] let @xmath0 be an integer .",
    "let @xmath2 be a connected graph of girth at least @xmath3 and @xmath27 be @xmath28 terminals where @xmath99 .",
    "then either @xmath2 contains a tree that covers the @xmath28 terminals or @xmath100 and @xmath2 contains a @xmath3-structure with respect to @xmath101 .",
    "this is algorithmic in the sense that we provide an @xmath1 algorithm that finds the tree or the @xmath3-structure .",
    "we suppose that @xmath3 is fixed and we prove the statement by induction on @xmath28 . for @xmath102 and @xmath103 ,",
    "the lemma is clear : a tree exists ( for instance , a shortest path linking the two terminals ) .",
    "suppose the lemma holds for some @xmath104 and let us prove it for  @xmath28 . by the induction hypothesis there exists an induced tree @xmath23 of @xmath2 that covers @xmath29 .",
    "let @xmath30 be a path from @xmath31 to some vertex @xmath32 that has neighbors in @xmath23 , and suppose that @xmath30 is minimal with respect to this property .",
    "then , no vertex of @xmath33 has a neighbor in @xmath23 .",
    "we apply lemma  [ l : linktree ] .",
    "if the first outcome holds , we have our tree .",
    "otherwise , @xmath45 is a @xmath3-structure . all this can be implemented in time @xmath1 because terminals are taken one by one , there are at most @xmath15 of them and for each of them we rely on basic subroutines like bfs ( breadth first search , see  @xcite ) to find @xmath30 and on the @xmath44 algorithm of lemma  [ l : linktree ] .",
    "a graph is a _ @xmath14-stucture _ with respect to 6 distinct terminals @xmath105 if it is made of 6 vertex - disjoints paths of length at least one @xmath106 , @xmath107 , @xmath108 , @xmath109 , @xmath110 , @xmath111 and four vertices @xmath112 such that the only edges between them are @xmath113 , @xmath114 , @xmath115 , @xmath116 , @xmath117 , @xmath118 , @xmath119 , @xmath120 , @xmath121 , @xmath122 , @xmath123 , @xmath124 .",
    "( see figure  [ f : k4s ] . )",
    "we put @xmath125 .",
    "we use the following ordering of the vertices @xmath126 , @xmath127 , @xmath128 , @xmath129 : @xmath130 .",
    "we say that a @xmath14-structure @xmath131 in a graph @xmath2 _ decomposes _",
    "@xmath2 if the two following conditions hold :    1 .",
    "[ i : d1 ] for all @xmath132 such that @xmath133 , @xmath134 is a cutset of @xmath2 that separates @xmath135 from @xmath136 ; 2 .",
    "[ i : d2 ] for all @xmath132 such that @xmath137 , @xmath138 is a cutset of @xmath2 that separates @xmath135 from @xmath136 .",
    "[ l : k4 ] if a graph @xmath2 of girth 6 contains a @xmath14-structure @xmath131 with respect to 6 terminals @xmath139 then one and only one of the following outcomes holds :    * @xmath131 decomposes @xmath2 ; * @xmath2 contains a tree that covers @xmath140 .",
    "this is algorithmic in the sense that if @xmath131 is given , testing whether @xmath131 decomposes @xmath2 or outputing the tree can be performed in time @xmath1 .",
    "let us first check that at most one of the output holds .",
    "suppose that the first outcome holds , and let @xmath7 be a connected induced subgraph of @xmath2 covering @xmath141 .",
    "then @xmath7 must contain at least three vertices among @xmath112 , because if it fails to contain two of them , say @xmath142 , then @xmath143 is isolated from the rest of the graph because of condition  [ i : d1 ] .",
    "hence , we may assume that @xmath7 contains @xmath144 .",
    "also , because of condition  [ i : d2 ] , @xmath7 must contain @xmath145 , @xmath146 and @xmath147 .",
    "hence , @xmath7 contains the cycle @xmath148 .",
    "hence , @xmath7 can not be a tree , so the second outcome fails .",
    "now let @xmath7 be an induced subgraph of @xmath2 that contains @xmath131 and such that @xmath131 decomposes @xmath7 ( @xmath7 exists since @xmath131 decomposes @xmath131 ) .",
    "we show that for any vertex @xmath149 of @xmath150 , @xmath151 either is decomposed by @xmath131 or contains a tree covering @xmath141 .",
    "this will prove the theorem by induction and will be the description of an @xmath1 algorithm since for each @xmath149 , the proof gives the way to actually build the tree when there is one by calling the algorithm of lemma  [ l : linktree ] and searching the graph ( with bfs for instance ) .",
    "note also that testing whether @xmath131 decomposes some graph can be performed in linear time by 12 checks of connectivity .",
    "suppose that @xmath151 is not decomposed by @xmath131 .",
    "from the definition of decomposition , there are two cases :    * case 1 : * condition  [ i : d1 ] fails . up to symmetry",
    ", we suppose that @xmath152 is a not cutset of @xmath151 that separates @xmath143 from @xmath153 .",
    "let @xmath154 ( resp .",
    "@xmath155 ) be the connected component of @xmath156 that contains @xmath143 ( resp .",
    "that contains @xmath157 ) .",
    "hence , @xmath149 has a neighbor in @xmath154 and a neighbor in @xmath155 .",
    "let @xmath30 be a shortest path in @xmath158 from @xmath143 to some vertex @xmath32 that has a neighbor in @xmath159 .",
    "note that @xmath30 must go through @xmath149 . because @xmath159 is a tree that covers @xmath153",
    ", we may apply lemma  [ l : linktree ] to @xmath159 and @xmath30 in @xmath160 .",
    "hence , either we find the tree or @xmath32 has exactly two neighbors in @xmath159 that have degree 2 in @xmath159 and that are adjacent to @xmath128 or @xmath129 . since the girth is 6 , we may assume up to symmetry that these two neighbors are @xmath146 and @xmath161 .",
    "because of the girth 6 , @xmath32 is not adjacent to @xmath126 , @xmath127 and @xmath145 .",
    "if @xmath32 has a neighbor in @xmath162 , we let @xmath163 be a shortest path from @xmath32 to @xmath143 in @xmath164 . otherwise , we let @xmath165 . we observe that @xmath166 is a tree that covers @xmath141 .",
    "* case 2 : * condition  [ i : d1 ] is satisfied but condition  [ i : d2 ] fails . up to symmetry , we suppose that @xmath167 is a not cutset of @xmath151 that separates @xmath143 from @xmath153 .",
    "let us consider a path @xmath51 in @xmath151 from @xmath143 to some vertex in @xmath168 and let us suppose @xmath51 is minimal with respect to this property .",
    "since condition  [ i : d1 ] is satisfied , @xmath51 must be from @xmath143 to @xmath126 or @xmath127 ( @xmath126 say ) .",
    "note that the neighbor of @xmath126 along @xmath51 can not be adjacent to @xmath127 ( or there is a cycle on 4 vertices ) .",
    "we observe that @xmath169 is a tree that covers @xmath141 .",
    "for @xmath3-structures , we assume that notation like in the definition is used .",
    "we put @xmath170 .",
    "we say that a @xmath3-structure @xmath131 in a graph @xmath2 _ decomposes _ @xmath2 if for all @xmath82 such that @xmath171 , @xmath172 is a cutset of @xmath2 that separates @xmath173 from @xmath174 .",
    "[ l : k ] let @xmath6 be an integer .",
    "if a graph @xmath2 of girth at least @xmath3 contains a @xmath3-structure @xmath131 with respect to @xmath3 terminals @xmath101 then one of the following outcomes holds :    * @xmath131 decomposes @xmath2 ; * @xmath13 and there exists a vertex @xmath149 of @xmath175 such that @xmath176 is a @xmath14-structure with respect to @xmath177 ; * @xmath2 contains a tree that covers @xmath141 .",
    "this is algorithmic in the sense that testing whether @xmath131 decomposes @xmath2 or outputing the tree or outputing a ralebelling showing that @xmath176 is a @xmath14-structure can be performed in time @xmath1 .",
    "let @xmath7 be an induced subgraph of @xmath2 that contains @xmath131 and such that @xmath131 decomposes @xmath7 ( @xmath7 exists since @xmath131 decomposes @xmath131 ) .",
    "we show that for any vertex @xmath149 of @xmath150 , @xmath151 either satisfies the first outcome or is a @xmath14-structure or contains a tree covering @xmath141 .",
    "this will prove the theorem by induction and be the description of an @xmath1 algorithm since for each  @xmath149 , the proof gives the way to actually build the tree or the relabelling by calling the algorithm of lemma  [ l : linktree ] and searching the graph ( with bfs for instance ) .",
    "note also that testing whether @xmath131 decomposes some graph can be performed in time @xmath178 , or @xmath11 since @xmath179 , by @xmath3 checks of connectivity .",
    "suppose that @xmath151 is not decomposed by @xmath131 .",
    "let @xmath154 ( resp .",
    "@xmath155 ) be the connected component of @xmath180 that contains @xmath181 ( resp .",
    "that contains @xmath182 ) . up to symmetry",
    ", we may assume that @xmath149 has a neighbor in @xmath154 and a neighbor in @xmath155 .",
    "let @xmath30 be a shortest path in @xmath158 from @xmath183 to some vertex @xmath32 that has a neighbor in @xmath159 .",
    "note that @xmath30 must go through  @xmath149 . because @xmath159 is a tree that covers @xmath184",
    ", we may apply lemma  [ l : linktree ] to @xmath159 and @xmath30 in @xmath160 . hence , either we find the tree or @xmath32 has exactly two neighbors in @xmath159 and @xmath185 must be one of the folowing : @xmath186 , @xmath187 , @xmath188 , @xmath189 where @xmath72 denotes the neighbor of @xmath67 along @xmath68 .    when @xmath190 , we observe that @xmath191 is a _ square _ ,",
    "i.e. a cycle on 4 vertices , contradicting our assumption on the girth .    when @xmath192 ( or symmetrically @xmath193 ) , then @xmath32 is not adjacent to @xmath194 ( otherwise @xmath195 is a square ) . if @xmath32 has a neighbor in @xmath196 , we let @xmath163 be a shortest path from @xmath32 to @xmath181 in @xmath197 .",
    "otherwise , we let @xmath198 . we observe that @xmath199 is a tree that covers @xmath141 .",
    "we are left with the case when @xmath200 .",
    "suppose first that @xmath32 has no neigbhor in  @xmath201 . then @xmath202 is a tree that covers @xmath141 .",
    "suppose now that @xmath32 has a neighbor in @xmath203 .",
    "we let @xmath163 be a shortest path from @xmath32 to @xmath181 in @xmath204 . if @xmath205 then @xmath206 induces a tree that covers  @xmath141 .",
    "if @xmath207 then we observe that @xmath208 induces a tree that covers  @xmath141 .",
    "so we may assume that @xmath209 is one of @xmath210 , @xmath211 . if @xmath212 then @xmath213 is a @xmath214 so @xmath215 because of the girth assumption .",
    "hence @xmath216 is a tree that covers @xmath141 .",
    "so we are left with the case when @xmath217 .",
    "then @xmath218 is a @xmath219 , so @xmath215 or @xmath220 because of the girth . if @xmath215 then @xmath221 is a tree that covers @xmath141 .",
    "if @xmath13 then @xmath222 is a @xmath14-structure as shown by the following relabelling : @xmath223 , @xmath224 , @xmath225 , @xmath226 , @xmath227 , @xmath228 , @xmath229 , @xmath230 , @xmath231 , @xmath232 , @xmath233 , @xmath234 , @xmath235 , @xmath236 , @xmath237 , @xmath238 .",
    "[ th : main ] let @xmath6 be an integer . let @xmath2 be a connected graph of girth at least @xmath3 and @xmath17 be terminals of @xmath2 . then one and only one of the following holds :    * @xmath2 contains @xmath3-structure @xmath131 with respect to @xmath17 and @xmath131 decomposes  @xmath2 ; * @xmath13 , @xmath2 contains a @xmath14-structure @xmath131 with respect to @xmath239 and @xmath131 decomposes @xmath2 ; * @xmath2 contains a tree covering @xmath17 .      by lemma  [ l : firststep ] , we can output a tree covering @xmath141 or a @xmath3-structure of @xmath2 in time @xmath1 . if a @xmath3-structure @xmath131 is ouptut , then by lemma  [ l : k ] , we can check whether @xmath131 decomposes @xmath2 ( in which case no tree exists ) or find a tree , or find a @xmath14-structure @xmath159 . in this last case , by lemma  [ l : k4 ] , we can check whether @xmath159 decomposes @xmath2 or find a tree .",
    "[ th : algo ] let @xmath0 be an integer .",
    "let @xmath2 be a connected graph of girth at least @xmath3 and @xmath17 be vertices of @xmath2 .",
    "deciding whether @xmath2 contains an induced tree covering @xmath17 can be performed in time @xmath1 .",
    "* remark : * in all the proofs above for @xmath6 , we use very often that the input graph contains no triangle and no square . forbidding longer cycles is used less often .",
    "this suggests that the @xmath3-in - a - tree problem might be polynomial for graphs with no triangle and no square .",
    "we leave this as an open question ."
  ],
  "abstract_text": [
    "<S> for all integers @xmath0 , we give an @xmath1 time algorithm for the problem whose instance is a graph @xmath2 of girth at least @xmath3 together with @xmath3 vertices and whose question is `` does @xmath2 contains an induced subgraph containing the @xmath3 vertices and isomorphic to a tree ? '' .    </S>",
    "<S> this directly follows for @xmath4 from the three - in - a - tree algorithm of chudnovsky and seymour and for @xmath5 from a result of derhy , picouleau and trotignon . </S>",
    "<S> here we solve the problem for @xmath6 . </S>",
    "<S> our algorithm relies on a structural description of graphs of girth at least @xmath3 that do not contain an induced tree covering @xmath3 given vertices ( @xmath6 ) .    </S>",
    "<S> ams mathematics subject classification : 05c75 , 05c85 , 05c05 , 68r10 , 90c35    key words : tree , algorithm , three - in - a - tree , @xmath3-in - a - tree , girth , induced subgraph . </S>"
  ]
}