{
  "article_text": [
    "digital systems ( _ e.g. _ , filters and controllers ) are used in various applications due to advantages over the analog counterparts , such as reliability , flexibility , and cost .",
    "however , there are disadvantages in the use of digital systems ; since they are typically implemented in microprocessors , errors might be introduced due to quantizations and round - offs  @xcite .",
    "the hardware choice , representations ( _ e.g. _ , direct forms ) , and implementation features ( _ e.g. _ , number of bits , fixed - point arithmetic ) influence the digital - system precision and performance  @xcite .    to detect errors in a digital system implementation , considering finite word - length ( fwl ) effects ,",
    "a model checking procedure based on satisfiability modulo theories has been proposed in the literature , named as digital - system verifier ( dsverifier )  @xcite .",
    "dsverifier checks specific properties related to overflow , limit cycle , stability , and minimum - phase in digital system realizations  @xcite .",
    "currently , there are several toolboxes in matlab with functions to facilitate digital systems design  @xcite .",
    "for instance , the fixed - point designer toolbox provides data - types and tools for developing fixed - point digital systems .",
    "there are also other toolboxes implemented with different objectives , _",
    "e.g. _ , optimization , digital control , and digital signal processing .",
    "however , there is no toolbox to reproduce counterexamples in digital systems generated by model checkers .",
    "this paper makes the following original contributions .",
    "we describe and evaluate a novel matlab toolbox called dsvalidatorto automatically check whether a given counterexample is reproducible .",
    "we propose a particular format to represent counterexamples , which can be used by other verifiers and matlab toolboxes .",
    "we show that dsvalidatorcan validate a set of intricate counterexamples for digital controllers used in a quadrotor attitude system within seconds .",
    "dsvalidatoris suitable for linear time - invariant causal discrete - time dynamic systems ( controllers and filters ) , and considers implementation and fwl aspects .",
    "dsvalidatorsupports digital systems represented by transfer functions , _",
    "i.e. _ , frequency domain equations that are able to represent input - to - output relations in a dynamical system .",
    "the following expression presents the general form of a transfer function representation for a digital system : @xmath0 where @xmath1 is called forward - shift operator , @xmath2 is called backward - shift operator , @xmath3 and @xmath4 are the transfer function denominator and numerator , resp .",
    "another representation is the difference equation , which can be described as @xmath5    eq .   allows us to compute the system output ( _ i.e. _ , @xmath6 ) at the @xmath7-th instant ( _ i.e. _ , at time @xmath8 , where @xmath9 is the system sample time ) using values of the past output and the present and past input ( _ i.e. _ , @xmath10 ) .",
    "a digital system is stable _ iff _ all of its poles are inside the @xmath1-plane unitary circle ; poles must have the modulus less than one .",
    "minimum - phase is also a desirable property for feedback controllers .",
    "a digital controller is a minimum - phase controller _",
    "iff _ all of its zeros are inside the @xmath1-plane unitary circle .",
    "the counterexample reproducibility for minimum - phase and stability does not require us to compute the output / states since we perform polynomial analysis .",
    "first , fwl effects over coefficients are computed for @xmath4 and @xmath3 in eq .  .",
    "a function @xmath11}:\\mathcal{p}^{n}\\rightarrow\\mathcal{p}^{n}$ ] is used , where @xmath12 is a space of polynomials of @xmath7-th order .",
    "@xmath13}$ ] and @xmath14}$ ] are the numerator and denominator polynomials with fwl effects used by dsvalidatorto compute round - off effects in the digital - system poles and zeros . for stability",
    ", dsvalidatorcomputes the roots of @xmath14}$ ] .",
    "if any root presents modulus equal or greater than one , then the system is unstable ; otherwise , it is stable .",
    "minimum - phase reproduction is similar , but dsvalidatorcomputes the @xmath13}$ ] root instead .",
    "when an operation result exceeds the limited range of the processor s word - length , overflow might occur in the output of the digital controller realization , resulting in undesirable nonlinearities in the output . in order to reproduce an overflow counterexample ,",
    "the output sequence must be computed for the given input sequence ; the counterexample should contain an input sequence @xmath10 that leads the digital - system to overflow .",
    "dsvalidatorcan read the counterexample provided by a given verifier , and then compute fwl effects on the coefficients , _",
    "i.e. _ , dsvalidatorcomputes @xmath14}$ ] and @xmath13}$ ] . after that , dsvalidatorchecks the word - length representation limits , considering @xmath7-integer bits and @xmath15-fractional bits .",
    "the maximum representable value is computed as @xmath16 , and the minimum representable value is computed as @xmath17 . then , eq .   is iteratively unrolled , considering the input ( @xmath10 , from the counterexample ) to produce the output ( @xmath6 ) .",
    "after that , dsvalidatorchecks whether each output is inside the word - length representation limits ; the output is overflow free if @xmath18 is inside the word - length limits",
    ". a detected overflow violation must be similar to the counterexample indicated by the verifier ; otherwise , the counterexample is not reproducible .",
    "limit cycle is defined by the presence of oscillations in the output , even when the input sequence is constant .",
    "limit cycles can be classified as granular or overflow .",
    "overflow limit cycles appear when an operation results in overflow using the wrap - around mode .",
    "granular limit cycles , in turn , are autonomous oscillations due to round - offs in the least significant bits  @xcite . to reproduce limit cycle counterexamples , constant inputs and initial states provided by a verifier are used as test signals in dsvalidatorto compute the output sequence considering a given realization form ( _ e.g. _ , direct form ) .",
    "first , dsvalidatorobtains fwl effects on the numerator and denominator coefficients .",
    "the constant input , initial states , and realization form are provided by the counterexample and employed to compute the output .",
    "if the output ( @xmath6 ) provided by dsvalidatorleads to limit cycles with the same characteristics ( _ i.e. _ , amplitude and period ) from that indicated by the verifier , then the limit cycle counterexample is reproducible ; otherwise , the verifier presents an error .",
    "dsvalidatorexploits counterexamples provided by the dsverifier tool  @xcite . fig .",
    "[ fig - counterexample - dsv ] shows an example of the present counterexample format related to a limit cycle violation for the digital system represented by eq .",
    "( [ control_1 ] ) : @xmath19    .... property = limit_cycle numerator   = { 2002 ,   -4000 ,   1998 } denominator   = { 1 ,   0 ,   -1 } x_size = 10 sample_time = 0.001 implementation = < 13,3 > numerator ( fixed - point ) = { 2002 , -4000 , 1998 } denominator ( fixed - point ) = { 1 , 0 , -1 } realization = dfi dynamical_range = { -1 , 1 } initial_states = { -0.875 , 0 , -1 } inputs = { 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 } outputs = { 0 , -1 , 0 , -1 , 0 , -1 , 0 , -1 , 0 , -1 } ....    the proposed counterexample format shown in fig .",
    "[ fig - counterexample - dsv ] contains all needed information to simulate any digital system that is represented by a transfer function .",
    "the current counterexample format shows the ( violated ) property , transfer function numerator and denominator , fixed - point representation , bound , sample time , implementation aspects ( integer and fractional bits ) , realization form , dynamical range , initial states , inputs , and outputs .",
    "dsvalidatorconsiders `` .out '' files to extract the counterexample and to transform them into variables that can be manipulated inside the matlab workspace",
    ". currently , dsvalidatoris able to validate the minimum - phase , overflow , stability , and limit cycle for a digital system that is represented by a transfer function .",
    "there are five steps to perform the automated validation in dsvalidator .",
    "first , we extract the counterexample attributes ; second , we convert all counterexamples attributes into variables that can be manipulated in the matlab workspace ; third , we simulate the counterexample as an executable test harness for the failed property ; fourth , we compare the result between the output provided by the verifier and the output provided during the simulation ; and finally we produce a ` .mat ` file with counterexamples , reporting all test cases execution time and status ( ` failed ` if the counterexample is not reproducible ; and ` successful ` otherwise )",
    "[ fig - valid - report ] shows an example of the counterexample reproducibility report generated by dsvalidatorfor the digital system represented by eq .  .",
    "dsvalidatorimplements the following functions to validate counterexamples : . ]",
    "* * macro functions : * represent functions to reproduce the validation steps ( _ e.g. _ , extraction , parser , simulation , comparison , and report ) . * * validation functions : * check and validate a violated property ( _ e.g. _ , overflow , limit cycle , stability , and minimum - phase ) .",
    "* * realizations : * reproduce realizations for the delta / direct form i , ii , and transposed direct form ii to be used for validating overflow and limit cycle . *",
    "* numerical functions : * perform the quantization process , rounding mode , overflow mode ( wrap - around and saturate ) , fixed - point operations ( _ e.g. _ , sum , subtraction , multiplication , division ) , and delta operator . * * graphic functions : * plot the graphical representation of overflow , limit cycle oscillations , and poles / zeros representing stability / minimum - phase with or without fwl effects inside a unitary circle .      the dsvalidatorresult is a ` .mat ` file , which is structured with counterexample data composed by classes and attributes as shown in fig .",
    "[ fig2 ] .",
    "the attributes are defined in the ` .mat ` file with the following structure : _ test case i d _ that represents the counterexample identification ; _ digital system _ that represents the numerator , denominator , and transfer function representation ; _ implementation _ that represents the integer and fractional bits , dynamical ranges , delta operator , sample time , bound , and realization form ; _ inputs _ that represent a constant input vector and initial states ; _ outputs _ report the verification and simulation results , execution time in matlab , and validation status ; _ status _ reports the validation status : ` failed ` or ` successful ` .      to run dsvalidator , all counterexamples ( cf .",
    "section  [ sec : counterexample - format ] ) must be provided as `` .out '' files .",
    "dsvalidatorcan be called via command line in matlab as :    ` dsv_validation(path , property , ovmode , rmode , filename ) `    where ` path ` is the directory with all counterexamples , ` property ` is the desired property to be validated , ` ovmode ` is the overflow mode , ` rmode ` is the rounding mode , and ` filename ` is the ` .mat ` file , which is generated after the validation process . after executing ` dsv_validation ` ,",
    "the validation result prints statistics about each counterexample ( or test case ) .",
    "[ fig - valid - report ] shows a report example for the digital system represented by eq .",
    "[ control_1 ] for realizations dfi , dfii and tdfii .    ....",
    "running automatic validation ... counterexamples validation report ... test case 1 time : 0.081929 status : successful test case 2 time : 0.013996 status : successful test case 3 time : 0.009488 status : successful general report : total successful : 3 total failed : 0 total tests : 3 total execution time : 0.10541 ....",
    "we evaluate dsvalidatorto validate counterexamples for @xmath20 digital controllers extracted from an unmanned aerial vehicle ( uav ) ( in particular , a quadrotor attitude system )  @xcite .",
    "the experiments evaluate overflow , minimum - phase , stability , and limit cycle in @xmath21 different numerical formats : @xmath22 for each digital controller , using @xmath22 different realizations forms ( _ i.e. _ , dfi , dfii , and tdfii ) , which resulted in @xmath23 different verification tasks for each property ( @xmath24 verification tasks ) . all experiments with dsvalidator v@xmath25.@xmath26 were conducted on an otherwise idle intel core i3 - 4005u , with @xmath27 ghz and @xmath28 gb of ram , running ubuntu @xmath29-bits .",
    "dsverifier produced @xmath30 counterexamples for minimum - phase , @xmath30 for stability , @xmath31 for limit cycle , and @xmath32 for overflow ( @xmath33 counterexamples in total ) .",
    "table  [ table - results ] shows the dsvalidatorresults for the quadrotor attitude system digital controllers .",
    ".experimental results for the quadrotor attitude system . [ cols=\">,^,^,^\",options=\"header \" , ]     the automated validation for all counterexamples took less than @xmath25 second . for the limit cycle property , however",
    ", @xmath25 counterexample did not produce the same result from dsverifier during the simulation , which means that the computations for the outputs in this specific counterexample ( using dfii realization ) are not reproduced in dsvalidatorand must be further investigated in dsverifier .",
    "dsvalidatoris able to validate a large set of counterexamples produced for the quadrotor attitude system digital controllers ; one particular counterexample for limit cycle was not reproduced due to a possibly ( incorrect ) computation performed by dsverifier .",
    "given the current knowledge in verification , there is no other automated matlab toolbox to reproduce digital - system counterexamples generated by verifiers . as future work , dsvalidatorshould validate closed - loop control systems , including state - space , and other types of properties .",
    "17 diniz p. , da  silva e. , netto s. ( 2010 ) `` digital signal processing : system analysis and design '' .",
    "e - libro , cambridge university press    bessa i. , ismail h. , cordeiro l. , chaves filho j. , ( 2016 ) `` verification of fixed - point digital controllers using direct and delta forms realizations . '' , 20(2):95126 .",
    "ismail h. , bessa i. , cordeiro l. , chaves filho j. , lima filho e. ( 2015 ) `` dsverifier : a bounded model checking tool for digital systems '' . in spin , lncs 9232 , p. 126 - 131 .    matlab toolbox ( 2016 ) . in https://www.mathworks.com",
    "/ products/.    schilling r. and harris s. `` fundamentals of digital signal processing using matlab '' .",
    "second edition , 2010 .",
    "clarkson university , postdam , n.y .",
    "bouabdallah , s. and murrieri , p. and siegwart , r.``design and control of an indoor micro quadrotor '' , in icra , vol . 5 , pp . 43934398 ( 2004 ) .",
    "bessa i. , ismail h. , palhares r. , cordeiro l. , chaves filho j. ( 2016 ) `` formal non - fragile stability verification of digital control systems with uncertainty '' . in ieee trans . computers ( to appear ) .",
    "in order to execute dsvalidatorin matlab , ] user must install the dsvalidatortool in the linux version of matlab 2016a .",
    "each counterexample must be stored as a `` .out '' file extension .",
    "if the user has more than one digital system to be validated , a directory with all `` .out '' files must be created .",
    "* tool required : * matlab ( version : 2016a ) .    *",
    "operating system : * linux ( recommended : ubuntu 16.04 lts . )      in order to install dsvalidator , user must download the dsvalidatorinstallation file from the dsverifier web page ( http://dsverifier.org/matlab-toolbox ) . after that , the following steps must be executed :    1 .",
    "open matlab .",
    "2 .   execute the file with the `` @xmath34 '' extension ( or double - click on it ) ; a pop - up screen to install dsvalidatorwill be shown .",
    "3 .   click on the `` @xmath35 '' button .",
    "user should visualize dsvalidatorinstalled in the @xmath36 located at the matlab toolbar .      in dsverifier , users must provide a specification that contains the digital - system numerator and denominator coefficients ; the implementation specification that contains the number of bits in the integer and fractional parts ; and the input range . for delta realizations",
    ", user must also provide the delta operator . in the command - line version",
    ", dsverifier can be invoked as :    ` dsverifier ` _ _ realization _ _ property _ _ x - size _ _",
    "+ bmc _ _ show - ce - data > file.out    where _ _ is the digital - system specification file , _ _ is the chosen realization form , _ _ is the property to be verified , _ _ is the verification bound , _",
    "i.e. _ , the number of times that the digital system is unwound , while the parameter _ _ indicates the bmc tool to be used ( cbmc or esbmc ) .    for an ansi - c specification file with many controllers ( or filters ) , additional macro parameters must be provided ( ` dds\\_id ` and ` dimplementation\\_id ` ) :    ` dsverifier ` _ _ realization _ _ property _ _ x - size _",
    "_ + bmc _ _ -dds@xmath37id= _ _ _ _ -dimplementation@xmath37id= _ _ _ _ show - ce - data + > file.out    where _ _ is the digital - system specification file , _ _ is the chosen realization form , _ _ is the property to be verified , _ _ is the verification bound , _ _ is the bmc tool to be used ( cbmc or esbmc ) , _ _ is the digital controller @xmath38 in the specification file , and _ _ represents the digital controller implementation .",
    "currently , @xmath22 realization forms are supported for digital controllers : direct form i ( dfi ) , direct form ii ( dfii ) , and transposed direct form ii ( tdfii ) . additionally , we support delta realizations to check stability and minimum - phase , _",
    "i.e. _ , delta direct form i ( ddfi ) , delta direct form ii ( ddfii ) , and transposed delta direct form ii ( tddfii ) .",
    "we also support @xmath28 different properties to validate the counterexample : overflow , limit cycle , stability , and minimum - phase .",
    "[ dsverifer - file ] shows an ansi - c specification file with @xmath25 controller and @xmath39 implementations :    .... # include < dsverifier.h > # if ds_id = = 1      digital_system ds = {          .b = { 1.5 , -0.5 } ,          .b_size = 2 ,          .a = { 1.0 , 0.0 } ,          .a_size = 2 ,          .sample_time = 0.02      } ;        # define implementation_count 2      # if implementation_id = = 1          implementation impl = {              .int_bits = 2 ,              .frac_bits = 14 ,              .max = 1.0 ,              .min = -1.0 ,          } ;      # endif        # if implementation_id = = 2          implementation impl = {              .int_bits = 4 ,              .frac_bits = 12 ,              .max = 1.0 ,              .min = -1.0 ,          } ;            # endif # endif ....    using the specification shown in fig .",
    "[ dsverifer - file ] as an ` input.c ` file , dsverifier can be invoked to check a specific property .",
    "the parameter ` show - ce - data ` must be appended to dsverifier to ensure that the counterexample is provided in a `` .out '' file . in our particular example , the goal is to check for an overflow violation , that considers the digital controller for dfi and dfii realizations , and @xmath39 different numerical formats ( ` < 2,14 > ` and ` < 4,14 > ` ) .",
    "dsverifer can be invoked as :    ` dsverifier ` _ input.c _ realization dfi property overflow x - size 10 bmc cbmc -dds@xmath37id=1 -dimplementation@xmath37id=1 show - ce - data + > ds1@xmath37impl1@xmath37dfi.out    to verify the same digital controller , but with the second implementation ( ` < 4,14 > ` ) and dfi realization :    ` dsverifier ` _ input.c _ realization dfi property overflow x - size 10 bmc cbmc -dds@xmath37id=1 -dimplementation@xmath37id=2 show - ce - data + > ds1@xmath37impl2@xmath37dfi.out    using dfii realization to check for an overflow violation in the first implementation ` < 2,14 > ` :    ` dsverifier ` _ input.c _ realization dfii property overflow x - size 10 bmc cbmc -dds@xmath37id=1 -dimplementation@xmath37id=1 show - ce - data + > ds1@xmath37impl1@xmath37dfii.out    last , for the second implementation ( `",
    "< 4,12 > ` ) using dfii realization :    ` dsverifier ` _ input.c _ realization dfii property overflow x - size 10 bmc cbmc -dds@xmath37id=1 -dimplementation@xmath37id=2 show - ce - data + > ds1@xmath37impl2@xmath37dfii.out    now , we have @xmath28 output files that are generated with the respective counterexample for the overflow property , as follows :    ds1@xmath37impl1@xmath37dfi.out , ds1@xmath37impl2@xmath37dfi.out , ds1@xmath37impl1@xmath37dfii.out , ds1@xmath37impl2@xmath37dfii.out    if we open a `` .out '' file ( _ e.g. _ , ds1@xmath37impl1@xmath37dfi.out ) , then we visualize the counterexample shown in fig .",
    "[ fig - counterexample ] .",
    ".... verification failed counterexample data :    property = overflow    numerator   = { 0.1 , -0.09996 }    denominator   = { 1.0 , -1.0 }    x size = 10    sample time = 0.02    implementation = < 10,6 >    numerator ( fixed - point ) = { 384.0 , -128.0 }    denominator ( fixed - point ) = { 256.0 , 0.0 }    realization = dfi    dynamic range = { -1,1 }    inputs = { 85.328125 , -0.0625 , 0.0 , -128.6875 , -215.984375 , -256.0 , 256.0 , -197.359375 , 0.0 85.34375 }    outputs = { 128.0 , -42.765625 , 0.03125 , -193.03125 , -259.640625 , -276.0 , 512.0 , -424.046875 , 98.6875 , 128.015625 } ....",
    "after verifying a given digital - system , one ( or more ) .out file is ( are ) generated , which must be saved in a directory , _",
    "e.g. _ , `` /overflow '' . in order to check whether a given counterexample is reproducible and reliable , user must invoke dsvalidatorin the matlab command - line as follows :        .... counterexamples validation report ... test case 1 time : 0.08845 status : successful test case 2 time : 0.010247 status : successful general report : total successful : 2 total failed : 0 total tests : 2 total time execution : 0.098697 ....        fig .",
    "[ fig - report ] shows the report related to the validation process of @xmath39 test cases ; note that in this report , there are @xmath22 important pieces of information : `` test case @xmath38 '' , `` execution time '' , and `` validation status '' .",
    "the `` test case @xmath38 '' represents the test case identification that is validated ; `` execution time '' reports in seconds the time to reproduce the test case in matlab ; `` validation status '' reports ` successful ` or ` failed ` ; ` successful ` means that the counterexample produced by dsverifier is reproducible , while ` failed ` means that there is a divergence about the results between matlab and dsverifier . at the end of the validation report",
    ", the total number of ` successful ` and ` failed ` test cases is provided as well as the total execution time spent during the simulation .",
    "after the validation process , we can individually check other functions in dsvalidatorto inspect a specific step or process .",
    "for instance , if we want to inspect the overflow graphic representation ( see fig .  [ fig - overflow ] ) , then we can invoke the function ` plot_overflow(system ) ` as follows :                  other functions from dsvalidator can be used to check the counterexamples , _",
    "e.g. _ , there are functions to reproduce the rounding mode , quantization process , and fixed - point operations .",
    "consider the digital system represented by eq .",
    ":          fig .",
    "[ fig - pole - zero ] shows the poles and zeros graphic representation with ( and without ) fwl effects .",
    "note that when we consider fwl effects in fig .",
    "[ fig - pole - zero ] , one zero is out of the @xmath1-plane unitary circle and thus the controller is a non - minimum - phase system .              as a result ,",
    "those functions return ` successful ` or ` failed ` .",
    "if we execute the example for the digital system represented by eq .  , the result for stability is ` successful ` , which means that the system is stable .",
    "the minimum - phase result is ` failed ` , which means that the controller is a non - minimum - phase system ."
  ],
  "abstract_text": [
    "<S> an automated counterexample reproducibility tool based on matlab is presented , called dsvalidator , with the goal of reproducing counterexamples that refute specific properties related to digital systems . </S>",
    "<S> we exploit counterexamples generated by the digital - system verifier ( dsverifier ) , which is a model checking tool based on satisfiability modulo theories for digital systems . </S>",
    "<S> dsvalidatorreproduces the execution of a digital system represented by a transfer function to validate counterexamples provided by the dsverifier tool and also to manipulate those counterexamples within other matlab toolboxes . </S>",
    "<S> our case study shows that dsvalidatorcan validate a set of intricate counterexamples for digital controllers used in a quadrotor attitude system within seconds . </S>"
  ]
}