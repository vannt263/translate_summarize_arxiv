{
  "article_text": [
    "a _ graph _ @xmath0 is a collection of points @xmath1 that are connected by links @xmath2 .",
    "the points are usually known as _",
    "nodes _ or _ vertices _ while the links are called _ edges _ , _ arcs _ or _",
    "lines_. an _ undirected graph _ is a graph in which the edges have no orientation ; that is , the edges are not ordered pairs of vertices but sets of two vertices .",
    "a _ proper @xmath3-coloring _ of an undirected graph @xmath4 is an assignment of one of @xmath3 possible colors to each vertex of @xmath4 such that no two adjacent vertices share the same color . more specifically , given the set of colors @xmath5 , an _",
    "@xmath3-coloring _ of g is a mapping @xmath6 , assigning a color to each vertex .",
    "we say that @xmath7 is _ proper _ if @xmath8 the _ graph coloring problem _ consists in determining whether is possible to find a proper @xmath3-coloring of the graph  @xmath4 . for a basic reference on graph coloring , see e.g.  @xcite .",
    "graph coloring has been used in many practical applications such as timetabling and scheduling  @xcite , computer register allocation  @xcite , radio frequency assignment  @xcite , and printed circuit board testing  @xcite .",
    "the graph coloring problem was proved to be np - complete  @xcite , so it is reasonable to believe that no polynomial - time exact algorithm solving these problems can be found .",
    "for this reason , a wide variety of heuristics and approximation algorithms have been developed for solving graph coloring problems .",
    "see  @xcite for a bibliographic survey of algorithms and applications , or the more recent survey  @xcite .    in this paper",
    "we show that the douglas  rachford algorithm can be successfully used as heuristic for solving a wide variety of graph coloring problems when they are conveniently modeled as feasibility problems . despite the convergence of the douglas ",
    "rachford algorithm is only guaranteed for convex sets , the method has been successfully employed for solving many different nonconvex optimization problems , specially those of combinatorial nature ( see , e.g. ,  @xcite ) .",
    "the douglas  rachford method belongs to the family of so - called projection algorithms , which are traditionally analyzed using nonexpansivity properties when the problem is convex .",
    "there are very few results explaining why the algorithm works in nonconvex settings , and even less justifying its good global performance .",
    "for example , the global convergence of the algorithm for the case of a sphere and a line was proved in  @xcite ( see also @xcite ) , and global convergence for the case of a halfspace and a potentially nonconvex set was recently proved in  @xcite . for local convergence results involving nonconvex sets , see e.g.  @xcite .",
    "the good performance of the douglas  rachford algorithm for solving the problem consisting in coloring the edges of a complete graph with three colors while avoiding monochromatic triangles was shown by elser et al . in  @xcite .",
    "elser seems to have been the first to see the remarkable potential of the algorithm for solving nonconvex problems .",
    "the paper is structured as follows .",
    "section  [ sec : preliminaries ] contains some preliminary results and notions .",
    "we show how to model the graph coloring problem as a feasibility problem in section  [ sec : modeling_graphcoloring ] .",
    "when available , maximal clique information can be easily added to the model , as explained in section  [ subsec : clique ] .",
    "we present two ways of reformulating a 3-sat problem as a graph coloring problem in section  [ subsec:3sat ] .",
    "the precoloring and list coloring problems , which are variations of the graph coloring problem , are discussed in section  [ sec : precoloring ] .",
    "we also treat in this section a well - known example of the precoloring problem : sudoku puzzles . in section  [ sec:8q ] , we show that the 8-queens puzzle , as well as some generalizations , can be also modeled as modified graph coloring problems . in section  [ sec : hamiltonian ] , we discuss the hamiltonian path problem .",
    "we report the results of a collection of numerical experiments in section  [ sec : numerical ] , where we exhibit the good performance of the douglas  rachford method for finding a solution of all the graph coloring problems considered along the paper .",
    "we finish with various concluding remarks in section  [ sec : conclusion ] .",
    "let @xmath9 be a hilbert space with inner product @xmath10 and induced norm  . given a nonempty subset @xmath11 and @xmath12 ,",
    "a point @xmath13 is said to be a _",
    "best approximation _ to @xmath14 from @xmath15 if @xmath16    if a best approximation in @xmath15 exists for every point in @xmath9 , then @xmath15 is called _",
    "proximal_. the _ projector operator _ onto c is the set - valued mapping @xmath17 given by @xmath18 and the _ reflector _ is defined as @xmath19 , where @xmath20 denotes the identity operator .",
    "if every point @xmath12 has exactly one best approximation @xmath21 , then @xmath15 is called _ chebyshev _ and @xmath21 is referred as the _ projection _ of @xmath14 onto @xmath15 . in this case , both @xmath22 and @xmath23 are single - valued .",
    "recall that a weakly closed subset of a hilbert space is convex if and only if it is a chebyshev set ( see , e.g.  ( * ? ? ?",
    "* theorem  3.2 ) ) .    given @xmath24 , the _ feasibility problem",
    "_ consists in finding a point belonging to all these sets , that is , @xmath25 in many practical situations , the projection onto each of these sets can be easily computed , while finding a point in the intersection of the sets might be intricate . in such cases , and when the sets are convex , the douglas  rachford method ( dr in short ) is a useful tool to solve the problem .",
    "let @xmath26 be closed and convex sets .",
    "consider the douglas  rachford operator defined as @xmath27 given any @xmath28 , for every @xmath29 , define @xmath30 .",
    "then , the following holds .    *",
    "if @xmath31 , then @xmath32 converges weakly to a point @xmath33 such that @xmath34 . *",
    "if @xmath35 , then @xmath36 .    see  ( * ? ? ?",
    "* theorem  3.13 and corollary  3.9 ) .",
    "finitely many sets in a feasibility problem are usually handled by reducing the problem to the two - sets case trough the pierra s _ product space formulation_. to this aim , consider the hilbert product space @xmath37 and define the sets @xmath38 while the set @xmath39 , sometimes called the _ diagonal _ , is always a closed subspace , the properties of @xmath15 are largely inherited .",
    "for instance , @xmath15 is nonempty if @xmath40 are not disjoint ; and if @xmath40 are closed and convex , so is @xmath15 .",
    "thus , the feasibility problem can be reformulated as a two - sets problem , since @xmath41 moreover , knowing the projections onto @xmath40 , the projections onto @xmath15 and @xmath39 can be easily computed . indeed , for any @xmath42 ,",
    "we have @xmath43 see  ( * ? ? ?",
    "* lemma  1.1 ) . for further details",
    "see , for example ,  ( * ? ? ?",
    "* section  3 ) .    throughout this paper",
    "the space @xmath9 will be the euclidean space @xmath44 of @xmath45 real matrices .",
    "its inner product is given by @xmath46 where @xmath47 is the transpose matrix of @xmath48 , and @xmath49 is the trace of a square matrix @xmath50 .",
    "the induced norm corresponds to the _ frobenius _ norm @xmath51    let us introduce two results that characterize some projections on @xmath44 , which will be useful later for computing the projection onto different sets .",
    "[ fact : proj_unitvector ] let @xmath52 denote the unit vectors of the standard basis of @xmath53 , and consider @xmath54 . then",
    ", for any @xmath55 , @xmath56    see , e.g. , ( * ? ? ?",
    "* remark  5.1 ) .",
    "[ fact : proj_nullspace ] let @xmath57 be a full row rank matrix",
    ". consider @xmath58 . then , for any @xmath59 , one has @xmath60 where @xmath61 denotes the identity matrix .",
    "see , e.g. , ( * ? ? ?",
    "* proposition  3.28(iii ) ) .    to finish this section ,",
    "let us shortly summarize some basic concepts of graph theory .",
    "complete graph _ is an undirected graph in which every pair of nodes is connected by an edge .",
    "clique _ is a subset of vertices of an undirected graph such that its induced graph is complete .",
    "maximal clique _ is a clique that can not be extended by adding one more vertex .",
    "a _ path _ is a sequence of edges that connects a sequence of distinct vertices .",
    "a path is said to be a _ cycle _ if there is an edge from the last vertex in the path to the first one .",
    "the @xmath3-coloring of a graph @xmath0 with @xmath62 nodes can be easily modeled as a feasibility problem . to this aim ,",
    "let @xmath63 , where @xmath64 indicates that vertex @xmath65 receives color  @xmath66 .",
    "then , we have the following constraints : @xmath67 constraint   together with   determine that each node has exactly one color .",
    "constraint   combined with   impose the requirement that any two adjacent nodes can not be assigned with the same color .",
    "the formulation of the constraints has a big effect in the behavior of the douglas  rachford scheme when applied to nonconvex constraints . on one hand ,",
    "ones needs a formulation where the projection onto the sets is easy to compute . on the other hand ,",
    "the formulation chosen often determines whether or not the douglas  rachford scheme can successfully solve the problem at hand always , frequently or never  @xcite .",
    "for these two reasons , we have realized that it is convenient to reformulate constraint   as follows @xmath68 where @xmath69 for all @xmath70 and @xmath71 . although we have considerably increased the number of variables of the feasibility problem by adding @xmath72 new variables , we have empirically observed that the douglas  rachford scheme becomes much more successful with this formulation .",
    "finally , note that , since the labeling of the colors does not have any significant meaning , every permutation of a proper coloring is also a proper coloring . in our numerical tests we observed that this abundance of equivalent solutions significantly decreases the rate of success of the douglas  rachford algorithm . to avoid this problem",
    ", we restrict the set of possible colorings to those that assign the first color to the first vertex , that is , we add the constraint @xmath73 we shall also add the additional constraint that all @xmath3 colors have to be used , i.e. , @xmath74    let @xmath75 be the set of edges , where @xmath76 for every @xmath77 .",
    "let @xmath78 and @xmath79 , and let @xmath80 be the set of colors .",
    "then , the @xmath3-coloring problem determined by constraints  , , , and   can be formulated as a feasibility problem with four constraints : @xmath81 where @xmath82 and @xmath83 observe that constraint @xmath84 can be expressed in matrix form as @xmath85 where @xmath86 is defined by @xmath87 for each @xmath77 and @xmath88 .",
    "the projections onto each of the above sets can be derived from fact  [ fact : proj_unitvector ] and fact  [ fact : proj_nullspace ] .",
    "the projections of any @xmath89 onto @xmath90 , @xmath91 and @xmath92 are given , pointwise , by @xmath93=\\left\\{\\begin{array}{ll } 1&\\text{if } i\\in i , k=\\arg\\!\\max\\{z_{i1},z_{i2},\\ldots , z_{im}\\},\\\\          z_{ik}&\\text{if } i\\in p,\\\\                                        0&\\text{otherwise};\\end{array}\\right.\\\\ \\left(p_{c_3}(z)\\right)[i , k]=\\left\\{\\begin{array}{ll } 1&\\text{if } i=\\arg\\!\\max\\{z_{1k},z_{2k},\\ldots , z_{nk}\\},\\\\          \\min\\left\\{1,\\max\\left\\{0,{\\operatorname{round}}(z_{ik})\\right\\}\\right\\}&\\text{otherwise};\\end{array}\\right.\\\\ \\left(p_{c_4}(z)\\right)[i , k]=\\left\\{\\begin{array}{ll } 1&\\text{if } i = k=1,\\\\ z_{ik } & \\text{otherwise};\\end{array}\\right.\\end{gathered}\\ ] ] for each @xmath94 and @xmath95 , where the lowest index is chosen in @xmath96 ( the projections onto @xmath90 and @xmath91 may not be unique ) .",
    "since @xmath48 is full row rank , the projection onto @xmath84 is given by @xmath97      let us consider now the so - called _ windmill graph _ @xmath98 , which is the graph constructed for @xmath99 and @xmath100 by joining @xmath101 copies of a complete graph with @xmath102 vertices at a shared vertex .",
    "a plot of @xmath103 is shown in figure  [ fig : windmill ] .    ;",
    "; ; ; ; ; ; ; ; ; ; ; ; ;    every windmill graph @xmath98 can be easily @xmath102-colored ( there are @xmath104 different ways ) . despite this abundance of valid colorings , the douglas  rachford scheme described in the previous section fails to find a solution",
    "rather often , see the results in figure  [ fig : exp_windmillcliques ] .",
    "this graph has an additional available information that can be used : it has @xmath101 maximal cliques of length  @xmath102 , and each color can be used at most once within each maximal clique .",
    "let @xmath105 be a nonempty subset of maximal cliques of the graph @xmath0 and let @xmath106 .",
    "let @xmath107 , with @xmath108 .",
    "thus , @xmath109 .",
    "the maximal clique information can be easily added into constraint @xmath84 in  .",
    "indeed , let @xmath110 where @xmath111 is defined by @xmath112 for each @xmath113 and @xmath114 .",
    "this is clearly an equivalent formulation of the @xmath3-coloring problem , where we have added @xmath115 new variables ( now @xmath116 ) , which correspond to the ( redundant ) information that each color can only be used once within each maximal clique . despite that , this formulation can be advantageous , as shown in figure  [ fig : exp_windmillcliques ] .",
    "for some particular graphs , adding this information can be crucial , see table  [ tbl:3-sat ] , where we compare two reformulations of 3-sat problems with and without maximal clique information . explaining these reformulations",
    "is the subject of the next section .",
    "boolean variable _ takes logical values : true ( t ) or false ( f ) .",
    "literal _ is either a variable or its negation ( @xmath117 ) .",
    "a _ clause _ is a disjunction ( @xmath118 ) of literals .",
    "a formula in _ conjunctive normal form _ is a conjunction ( @xmath119 ) of clauses .",
    "given a formula in conjunctive normal form with @xmath120 literals per clause , the _ 3-sat _ ( _ 3-satisfiability _ ) problem consists in determining if there exists an assignment of variables that makes the formula true .",
    "specifically , let @xmath121 be @xmath62 boolean variables and consider @xmath3 clauses @xmath122 , where each clause is the disjunction of @xmath120 literals , @xmath123 with @xmath124 .",
    "let @xmath125 be the formula comprising the conjunction of all the clauses : @xmath126 then , the 3-sat problem consists in determining if there exists an assignment of the variables that makes the formula @xmath125 true .",
    "[ exa:3sat ] consider the following 3-sat problem with @xmath120 variables and @xmath127 clauses : @xmath128 there are several solutions to @xmath125 such as @xmath129 , @xmath130 or @xmath131 , among others .",
    "a 3-sat problem can be reduced to a 3-coloring problem by using gadgets .",
    "is a small graph whose coloring solves some part of the problem . using a set of gadgets and connecting them in an appropriate manner ,",
    "the 3-coloring problem of the full graph can be made equivalent to solving the 3-sat problem .",
    "we start by creating @xmath132 gadgets , one for each variable and an additional one for setting the interpretation of the colors :    * create a gadget formed by a complete graph with 3 `` color - meaning '' nodes named t , f and g , see figure  [ fig : gadgetcommon](a ) . as this gadget is a complete graph , a different color must be assigned to each node .",
    "the color assigned to node t will be interpreted as true , the color assigned to f as false , and the remaining color assigned to g ( _ ground _ node ) will not have any special interpretation .",
    "* for each variable @xmath133 , construct a gadget with 2 connected nodes , one associated to @xmath133 and the other to @xmath134 .",
    "link both of them to the node g to create a gadget of the form in figure  [ fig : gadgetcommon](b ) .",
    "this gadget forces a logical choice in the value of the variables .",
    "thus , every variable will be assigned to either t or f , and the assignment of every variable and its complement will be consistent .",
    "next , we present two different formulations of the gadgets corresponding to the clauses .    * for the _ 4-nodes formulation _ , take each clause @xmath135 and create the gadget in figure  [ fig : gadget2](a ) with the nodes associated to @xmath136 , @xmath137 , @xmath138 , f , g , and 4 new nodes .",
    "the new unlabeled nodes do not have any special meaning , but , by the construction of the gadgets , every 3-coloring of a clause gadget will assign the same color as t to at least one of the literals @xmath136 , @xmath137 or @xmath138 .",
    "thus , a valid 3-coloring of the gadget will make the corresponding clause to be true . + for the _ 5-nodes formulation _",
    ", the process is similar but introduces five new nodes instead of four : the gadget is shown in figure  [ fig : gadget2](b ) .    *",
    "finish building the graph by connecting the clause gadgets together using the edges from the common gadgets from figure  [ fig : gadgetcommon ] .",
    "full graphs for the four and five node formulations of the 3-sat problem in example  [ exa:3sat ] are shown in figure  [ fig : graph_gadget ] .",
    "the graph resulting from putting all these gadgets together in the 4-nodes formulation has a total of @xmath139 nodes and @xmath140 edges .",
    "observe that the graph has @xmath132 maximal cliques with @xmath120  nodes , one for each gadget of type  ( a ) and  ( b ) . in the 5-nodes formulation ,",
    "the resulting graph has a total of @xmath141 nodes and @xmath142 edges .",
    "the number of maximal cliques with 3 nodes has increased up to @xmath143 , one for each gadget of type  ( a ) and  ( b ) and two for each gadget of type  ( c ) .",
    "a 3-coloring of the graph built under one of these two formulations corresponds to a solution of the associated 3-sat problem .",
    "a solution to the 3-sat problem in example  [ exa:3sat ] using both formulations is shown in figure  [ fig : graph_gadget ] .",
    "+    the results of testing the performance of the douglas  rachford method for solving a sample of 3-sat problems using both reformulations as 3-coloring problems is shown in section  [ sec : numerical ] , see table  [ tbl:3-sat ] . with a totally different direct formulation , the douglas ",
    "rachford method was first shown to be successful for solving 3-sat problems in  @xcite .",
    "in many practical graph coloring problems , the set of eligible colors for each of the nodes can be different .",
    "this is the case in the _ precoloring problem _ , a slight modification of the graph coloring problem in which a subset of the vertices has been preassigned to some colors .",
    "the task is to color the remaining vertices to obtain a valid coloring of the entire graph . more generally , in the _ list coloring problem _",
    ", each vertex can only be colored from a list of admissible colors .    the notion of list coloring",
    "was independently introduced by vizing  @xcite , and erds , rubin and taylor  @xcite .",
    "given a graph @xmath0 and a set of @xmath3 colors @xmath5 , let @xmath144 be a mapping assigning to each vertex @xmath145 a list of admissible colors @xmath146 .",
    "thus , the list coloring problem consists in finding a proper coloring of the vertices of the graph @xmath4 verifying that the color assigned to each vertex belongs to its list of admissible colors ; that is , @xmath147 .",
    "note that an ordinary graph coloring problem is a special case of list coloring where @xmath148 for every vertex @xmath149 , and so are the precoloring problems , where the precolored vertices have a list of admissible colors with length one .",
    "list coloring problems can be reduced to standard graph coloring problems . to this aim",
    ", one shall add a complete subgraph with @xmath3 new nodes , each one representing a color in @xmath150 , and connect each vertex @xmath149 with the new nodes that represent the colors not belonging to  @xmath151 .",
    "if we denote by @xmath152 the cardinality of a finite set @xmath48 , the new graph will have @xmath153 nodes , @xmath154 edges , and an additional maximal clique of length @xmath3 . in this way",
    ", any valid @xmath3-coloring of the extended graph will lead to a solution for the original list coloring problem .",
    "an example of such construction with a wheel graph of @xmath155 nodes is shown in figure  [ fig : listcoloring ] .",
    "= [ thick ] ;    = [ thick ]    ;    = [ dashed ] ( b0,c1 ) ( b1,c0 ) ( b3,c0 ) ( b1,c1 ) ( b0,c2 )    note that the new feasibility problem is defined in @xmath156 .",
    "constraint @xmath92 has to be changed , as it no longer makes sense .",
    "we have @xmath3 new nodes , labeled @xmath157 , each of them representing a color . to include this information",
    ", we shall replace @xmath92 by @xmath158 thereby , the solution set is @xmath159 .",
    "the projection onto @xmath160 is given by @xmath161=\\left\\{\\begin{array}{ll } 1&\\text{if } i = k+n,\\\\ z_{ik } & \\text{otherwise}.\\end{array}\\right.\\ ] ]    as the increase in the number of nodes and edges may cause the dr algorithm to become slower , another option here would be to directly modify the constraint  @xmath90 to only allow admissible colors , that is , to replace it by the set @xmath162 whose projection is given by @xmath163=\\left\\{\\begin{array}{ll } 1&\\text{if } i\\in i , k=\\arg\\!\\max\\{z_{ij } , j\\in l(i)\\},\\\\ z_{ik}&\\text{if } i\\in p,\\\\ 0&\\text{otherwise}.\\end{array}\\right.\\ ] ] constraint @xmath92 has to be removed from the feasibility problem , and the solution set becomes @xmath164 .",
    "we shall compare the performance of dr with both formulations in section  [ sec : numerical ] .",
    "it is easy to formulate _",
    "sudoku puzzles _ as graph coloring problems .",
    "this kind of puzzles consist in a @xmath165 grid , divided in nine @xmath166 subgrids , with some entries already prefilled .",
    "the objective is to fill the remaining cells in such a way that each row , each column and each subgrid contains the digits from @xmath167 to @xmath168 exactly once .",
    "we shall model sudokus as 9-precoloring problems , with the aim of applying dr .",
    "the construction of the graph is very simple and intuitive .",
    "each cell in the grid shall be represented by a node .",
    "then , we link two nodes if their respective associated cells lay in the same row , same column or same subgrid ( see figure  [ fig : sudoku_graph ] ) .",
    "the graph obtained contains @xmath169 nodes and @xmath170 edges .",
    "furthermore , a rich maximal clique information is known .",
    "namely , there are @xmath171 maximal cliques of size @xmath168 , one per row , one per column and one per subgrid .    in 0,1,2 n 0,1,2 ( -3*,--+ ) rectangle ( 8*+2*+3*,--- ) ; ( + -,3 * ) rectangle ( + + , -8 * -2 * -3 * ) ;    in 0,1,2 in 0,1,2 ( + , -- ) circle [ radius = cm ] ;    in 0,1,2 n 0,1,2 in 0,1,2 n 0,1,2 ( ) at ( + , -- ) ;    sudoku puzzles can be directly modeled as integer feasibility programs . despite the douglas  rachford algorithm fails to solve these integer problems , it can be successfully used for solving the puzzles after reformulating them as binary programs , see  ( * ? ? ?",
    "* section  6 ) .",
    "we must acknowledge here the fundamental contribution of veit elser  @xcite , who first realized the usefulness of this binary reformulation for the success of the dr algorithm .",
    "we associate a color to each of the @xmath168 digits of the puzzle .",
    "since some cells of the sudoku are prefilled , this is actually a graph precoloring problem .",
    "a valid coloring of the graph will lead to a solution of the sudoku , as shown in the example in figure  [ fig : sudoku_colored ] .",
    "the _ 8-queens puzzle _ consists in placing eight chess queens on an @xmath172 chessboard , so that none of them attack any other .",
    "since a chess queen can be moved any number of squares vertically , horizontally or diagonally , the puzzle s constraints can be formulated as : there is at most one queen at each row , each column and each diagonal .",
    "the reformulation of an 8-queens puzzle as a graph coloring problem is similar to the one shown for sudokus .",
    "each square in the chessboard is represented by a node , and two nodes are linked if their corresponding squares lay on the same column , row or diagonal .",
    "the graph has @xmath173 nodes , @xmath174 links and @xmath175 maximal cliques .    to solve the 8-queens puzzle ,",
    "it is not necessary to color all the nodes , but only @xmath176 of them with only one color .",
    "thus , we are dealing with a partial graph coloring problem , in which we add the constraint that the color has to be used exactly @xmath176 times .",
    "we must then remove the set @xmath92 in   and replace the sets @xmath90 and @xmath91 by @xmath177 where @xmath178 and @xmath179 ( puzzles with more colors can be considered ) .",
    "hence , the solution set of the puzzle is @xmath180 .",
    "the projections onto @xmath181 and @xmath182 are given by @xmath183=\\left\\{\\begin{array}{ll } \\min\\left\\{1,\\max\\{0,{\\operatorname{round}}(z_{ik})\\}\\right\\}&\\text{if } i\\in i , k=\\arg\\!\\max\\{z_{i1},z_{i2},\\ldots , z_{im}\\},\\\\ z_{ik}&\\text{if } i\\in p,\\\\ 0&\\text{otherwise};\\end{array}\\right.\\\\ \\left(p_{\\widecheck c_3}(z)\\right)[i , k]=\\left\\{\\begin{array}{ll } 1&\\text{if } i\\in q_{k , q},\\\\\\min\\left\\{1,\\max\\{0,{\\operatorname{round}}(z_{ik})\\}\\right\\}&\\text{if } i\\in p,\\\\ 0&\\text{otherwise;}\\end{array}\\right.\\end{gathered}\\ ] ] where , for a given color @xmath95 , we denote by @xmath184 the set of indices corresponding to the @xmath185 largest values in @xmath186 ( lowest index is chosen in case of tie ) .",
    "the 8-queens puzzle can be easily posed for any size of the chessboard .",
    "the problem has been generalized in many different directions , see  @xcite for a recent survey .",
    "one of these generalizations is the @xmath187 puzzle , where one must cover an entire chessboard @xmath188 with @xmath189 queens , so that two queens of the same color do not attach each other .",
    "this problem is actually the @xmath62-coloring problem of the chessboard queens graph , so it can be directly modeled as explained in section  [ sec : modeling_graphcoloring ] using formulation  .",
    "different shapes can also be considered : we show in figure  [ fig : puzzles](b ) a chessboard with a hole , and in figure  [ fig : puzzles](c ) a puzzle dedicated to jonathan borwein . a solution to these puzzles , obtained with dr ,",
    "is shown in figure  [ fig : puzzles_solved ] .",
    "the use of the douglas  rachford algorithm for solving the @xmath62-queens puzzle is proposed and studied in  @xcite .",
    "one of the main advantages of formulating these puzzles as graph coloring problems is that it is straightforward to model many variations of the problem .",
    "for instance , to model the knights puzzle , a similar puzzle played with knights instead of queens , one only needs to change the links of the chessboard graph , see figure  [ fig : puzzles](a ) .",
    "a _ hamiltonian path _ is a path in a graph that visits every vertex exactly once .",
    "the hamiltonian path problem consists in determining whether or not such a path exists . in this section",
    "we adapt the graph coloring scheme with the aim of using the douglas  rachford algorithm for finding hamiltonian paths .",
    "given a graph @xmath4 with @xmath62 nodes , our objective will be to find an @xmath62-coloring of the graph , where each color @xmath190 will represent a position in the path . in order to ensure that the coloring represents a valid path",
    ", we will impose that two nodes assigned with two consecutive colors must be linked .",
    "constraint @xmath84 becomes now redundant , as every node must be assigned with a different color , and it is thus no longer necessary to work in @xmath191 , but in @xmath192 .",
    "hence , constraint @xmath90 becomes @xmath193 and the set @xmath91 must be modified and replaced by @xmath194 we have observed that the performance of dr is decreased if @xmath84 is removed , and that it is better to replace it by the redundant constraint @xmath195 , see the experiment shown in figure  [ fig : exp_kntour ] .",
    "note that constraint @xmath92 forces the path to start on node  @xmath167 ( a path which may not even exist ) , so it must be eliminated .",
    "the projection onto @xmath196 is hard to compute because of the recurrent dependence between all the columns in the matrix @xmath197 . to overcome this problem",
    ", we propose to split the set  @xmath196 into two constraints , one relating each odd column with its following one , and another similar constraint for the even columns .",
    "that is , we define the constraints @xmath198 which satisfy @xmath199 , where @xmath200 denotes the integer part of a number .",
    "therefore , the solution set of the hamiltonian path problem is @xmath201 .    to compute the projections onto @xmath202 and @xmath203 ,",
    "consider the function @xmath204 defined by @xmath205 and let us denote by @xmath206 where the lowest index is taken in @xmath207 to avoid multivaluedness .",
    "then , the projections onto @xmath202 and @xmath203 can be obtained as follows @xmath208=\\left\\{\\begin{array}{ll } 1&\\text{if } i = s_{k , k+1}^0 , k < n \\text { and } k \\text { is odd},\\\\ 1&\\text{if } i = s_{k-1,k}^1 \\text { and } k \\text { is even},\\\\ \\min\\left\\{1,\\max\\{0,{\\operatorname{round}}(x_{ik})\\}\\right\\}&\\text{otherwise;}\\end{array}\\right.\\\\ \\left(p_{\\widetilde c_{3,\\text{even}}}(z)\\right)[i , k]=\\left\\{\\begin{array}{ll } 1&\\text{if } i = s_{k , k+1}^0 , k <",
    "n \\text { and } k \\text { is even},\\\\ 1&\\text{if } i= s_{k-1,k}^1 , 1<k \\text { and } k \\text { is odd},\\\\ \\min\\left\\{1,\\max\\{0,{\\operatorname{round}}(x_{ik})\\}\\right\\}&\\text{otherwise.}\\end{array}\\right.\\end{gathered}\\ ] ]      a _ hamiltonian cycle _ is a hamiltonian path that is also a cycle , that is , there is a link connecting the last node in the path and the first one .",
    "the problem of finding such a cycle can be cast as a hamiltonian path problem as we show next .",
    "given a graph @xmath0 , select any node @xmath145 and make a copy of it , i.e. , create a new node @xmath209 that is connected with all nodes linked to @xmath210 .",
    "then , create another two new nodes @xmath211 and @xmath212 , and link @xmath211 with @xmath210 and @xmath212 with @xmath209 ( see figure  [ fig : hamiltoniancycle ] ) .",
    "= [ thick ] ( c0,c1,c3,c2,c0 ) ( c1,c2 )    = [ thick ] ( c0,c1,c3,c2,c0 ) ( c1,c2 ) = [ dashed ] ( c4,c2 ) ( c4,c1 ) ( s0,c4 ) ( s1,c0 )    since @xmath211 and @xmath212 have _ degree one _",
    "( i.e. , they are only linked with another node ) , every admissible hamiltonian path in the new graph needs to start in one of these nodes and finish in the other .",
    "thus , after removing @xmath211 and @xmath212 , we end up with a path going from @xmath210 to @xmath209 .",
    "as these nodes were originally the same , we have actually found a hamiltonian cycle .",
    "an example of hamiltonian path / cycle arises in the _ knight s tour problem_. the _ knight s path problem _ consists in finding a sequence of moves of a knight on a chessboard such that it visits exactly once every square .",
    "if the final position of such a path is one knight s move away from the starting position of the knight , the path is called a _ knight",
    "s cycle_. thus , to find a knight s cycle , one only needs to build the graph corresponding to the knight s movements on a chessboard , and find a hamiltonian cycle in the graph .",
    "a solution for a @xmath213 chessboard computed with dr is shown in figure  [ fig : knights_tour ] .",
    "chessboard computed with dr . for 10  random starting points , the method found a solution for every instance , with an average ( maximum ) time of 1,397 seconds ( 3,301 seconds , respectively ) . ]",
    "in this section we test the performance of the douglas  rachford algorithm for solving a representative sample of the graph coloring problems previously presented .",
    "all codes are written in python  2.7 and the tests were run on an intel core i7 - 4770 cpu 3.40ghz with 12 gb ram , under windows 10 ( 64-bits ) .",
    "we begin our tests with one of the most well - known graphs : petersen graph ( see figure  [ fig : petersen ] ) .",
    "this graph has 10 vertices , 15 edges and can be 3-colored in 120 different ways .",
    "; ; ;    the results of our first experiment are shown in figure  [ fig : exp_petersen ] .",
    "for 100,000 random starting points and using formulation  , we report the number of iterations needed by the douglas  rachford algorithm until it obtained a solution .",
    "the success rate was 100% in this experiment : for every starting point , the algorithm was able to find a solution .",
    "75 - 149 & 9,037 & 99.88% 150 - 224 & 112 & 99.99% 225 - 299 & 6 & 100% unsolved & 0 & 100%    in our second experiment , we tested the performance of the douglas  rachford algorithm with formulation   for finding a valid coloring of complete graphs with 4 , 5 and 6 nodes .",
    "a complete graph with @xmath62 vertices has @xmath214 edges and can be @xmath62-colored in @xmath215 different ways .",
    "the algorithm was stopped after 500 iterations .",
    "dr was able to find a solution for every random starting point for the graphs of 5 and 6 nodes , while it failed in 0.16% of the starting points for the complete graph of 4 nodes .",
    "the results are shown in figure  [ fig : exp_complete456 ] .",
    "-coloring of a complete graph with @xmath62 vertices for 10,000 random starting points , with @xmath216 .",
    "each solution was found , on average , in 0.00281 seconds for @xmath217 , 0.00429 seconds for @xmath218 , and 0.00642 seconds for @xmath219 .",
    "instances were labeled as `` unsolved '' after 500 iterations . ]     cumul .",
    "& instances & cumul . 0 - 99 & 9,961 & 99.61% & 9,934 & 99.34% & 9,718 & 97.18% 100 - 199 & 22 & 99.83% & 61 & 99.95% & 272 & 99.9% 200 - 299 & 1 & 99.84% & 5 & 100% & 10 & 100% 300 - 499 & 0 & 99.84% & 0 & 100% & 0 & 100% unsolved & 16 & 100% & 0 &",
    "100% & 0 & 100%    we also tested the performance of the douglas  rachford algorithm on two wheel graphs of 5 and 6 nodes ( see figure  [ fig : wheel ] ) .",
    "the results are shown in figure  [ fig : exp_wheel56 ] .",
    "a wheel graph with @xmath62 vertices has @xmath220 edges .",
    "if @xmath62 is even , it can be 4-colored in @xmath221 different ways ; if @xmath62 is odd , it can be 3-colored in 6 different ways .    ;    ;    ;    ;         0 - 74 & 9,938 & 99.38% & 9,455 & 94.55% 75 - 149 & 57 & 99.95% & 541 & 99.96% 150 - 224 & 1 & 99.96% & 4 & 100.0% 225 - 299 & 2 & 99.98% & 0 & 100.0% 300 - 374 & 1 & 99.99% & 0 & 100.0% 375 - 499 & 0 & 99.99% & 0 & 100.0% unsolved & 1 & 100% & 0 &",
    "100%    we repeated the same experiment with three cycle graphs ( consisting in a given number of vertices connected in a closed chain ) . a cycle graph with @xmath62 vertices",
    "has @xmath62 edges .",
    "if @xmath62 is even , it can be 2-colored in 2 different ways ; if @xmath62 is odd , it can be 3-colored in @xmath222 different ways .",
    "the results are shown in figure  [ fig : exp_cycles101520 ] .",
    "instances & cumul . & instances & cumul . 0 - 99 & 10,000 & 100.0% & 9,903 & 99.03% & 8,251 & 82.51% 100 - 199 & 0 & 100.0% & 94 & 99.97% & 1,748 & 99.99% 200 - 299 & 0 & 100.0% & 0 & 99.97% & 1 & 100.0% 300 - 499 & 0 & 100.0% & 0 & 99.97% & 0 & 100.0% unsolved & 0 & 100% & 3 & 100% & 0 & 100%    in our following experiment , whose results are shown in figure  [ fig : exp_windmillcliques ] , we compare the performance of the douglas  rachford algorithm with and without maximal clique information when it is applied for finding a solution of the windmill graph @xmath223 .",
    "observe that , even having increased the number of variables in the feasibility problem , both the rate of success and the rate of convergence ( in terms of iterations , but also computing time ) are improved .     for 10,000 random starting points .",
    "complete maximal clique information was used in the right columns .",
    "each solution was found , on average , in 0.1673 seconds without clique information , and 0.08484 seconds with maximal clique information .",
    "instances were labeled as `` unsolved '' after 10,000 iterations . ]     cumul .",
    "0 - 499 & 6,338 & 63.38% & 9,887 & 98.87% 500 - 999 & 1,449 & 77.87% & 101 & 99.88% 1,000 - 1,499 & 375 & 81.62% & 1 & 99.89% 1,500 - 1,999 & 134 & 82.96% & 0 & 99.89% 2,000 - 2,499 & 42 & 83.38% & 0 & 99.89% 2,500 - 2,999 & 18 & 83.56% & 0 & 99.89% 3,000 - 3,499 & 11 & 83.67% & 0 & 99.89% 3,500 - 3,999 & 2 & 83.69% & 0 & 99.89% 4,000 - 4,499 & 1 & 83.7% & 0 & 99.89% 4,500 - 9,999 & 0 & 83.7% & 0 & 99.89% unsolved & 1,630 & 100% & 11 & 100%    if @xmath224 increases as @xmath66 increases , the douglas  rachford algorithm may serve to detect infeasibility of the corresponding coloring problem , see figure  [ fig : infeasible](a)-(b ) . this is not always the case , as shown in figure  [ fig : infeasible](c)-(d ) .",
    "interestingly , when we removed the extra constraints   and  , which is something that does not change the feasibility of the problems , the algorithm was not able to detect any infeasible problem .",
    "next , we tested the performance of dr for the 4-nodes and the 5-nodes formulations for the first 50 3-sat problems with 20 variables and 91 clauses in ` satlib ` . for each of the formulations , we run the douglas  rachford algorithm with and without maximal clique information for 10 random starting points",
    "the results are shown in table  [ tbl:3-sat ] .",
    "clearly , the addition of the maximal clique information turns out to be crucial for the success of the douglas  rachford algorithm , specially for the 5-nodes formulation .",
    "cumul . & inst . & cumul . & inst",
    "0 - 49 & 246 & 49% & 341 & 68% & 0 & 0% & 295 & 59% 50 - 99 & 76 & 64% & 69 & 82% & 0 & 0% & 77 & 74% 100 - 149 & 38 & 72% & 20 & 86% & 0 & 0% & 22 & 78% 150 - 199 & 14 & 74% & 19 & 89% & 0 & 0% & 9 & 80% 200 - 249 & 13 & 77% & 7 & 91% & 0 & 0% & 5 & 81% 250 - 299 & 7 & 78% & 7 & 92% & 0 & 0% & 4 & 82% unsolved & 106 & 100% & 37 & 100% & 500 & 100% & 88 & 100%    for an appropriate visualization of the results and comparison of the formulations , we turn to performance profiles ( see  @xcite ) .",
    "we use the modification proposed in  @xcite , since it suits better our experiment , where we have multiple runs for every formulation and problem .",
    "let @xmath225 denote the ( finite ) set of all formulations .",
    "for each formulation @xmath226 , let @xmath227 be the average time required by dr to solve problem @xmath21 among all the successful runs , and let us denote by @xmath228 the portion of successful runs for problem @xmath21 .",
    "compute @xmath229 for all @xmath230 , where @xmath231 is the number of problems in the experiment . then , for any @xmath232 , define @xmath233 ; that is , @xmath234 is the set of problems for which formulation @xmath235 is at most @xmath236 times slower than the best one .",
    "the _ performance profile _ function of formulation @xmath235 is given by @xmath237\\\\ & \\tau &   \\mapsto & \\pi_f(\\tau):=\\frac{1}{n_p}\\sum_{p\\in r_f(\\tau ) } s_{f , p}. \\end{array}\\ ] ]    the value @xmath238 indicates the portion of runs for which @xmath235 was the fastest formulation .",
    "when @xmath239 , then @xmath240 shows the portion of successful runs for formulation @xmath235 .",
    "performance profiles for the @xmath120-sat experiment from table  [ tbl:3-sat ] are displayed in figure  [ fig:3sat_pprofile ] .",
    "it clearly shows that the 4-nodes formulation with clique information is the best one .",
    "-sat experiment . ]    in our next numerical experiment , for solving sudoku puzzles , we compared the performance of dr applied to the elser s binary feasibility problem formulation  @xcite ( see also  ( * ? ? ?",
    "* section  6.2 ) ) , with the reformulations as a graph coloring ( @xmath159 ) and as a graph precoloring ( @xmath164 ) explained in section  [ sec : precoloring ] .",
    "we considered the 95  hard puzzles from the library ` top95 ` , which was the one among the libraries tested in  ( * ? ? ?",
    "* table  2 ) where dr was most unsuccessful . for each formulation and each puzzle , douglas ",
    "rachford was run for 20 random starting points .",
    "results and performance profiles are displayed in figure  [ fig : sudoku ] .",
    "as it was expected , the binary formulation was much faster , since this formulation is specifically designed for solving these puzzles . on average , the binary formulation solved a sudoku in 5.76 seconds , while the graph coloring formulation needed 33.78 seconds .",
    "the worst method was the reformulation as a graph coloring problem , which needed 112.25 seconds on average to solve a sudoku .",
    "even so , it was surprising to see that the rate of success for these three formulations was very similar , around 90% .         inst . & cumul . 0 - 49 & 1,688 & 88.8% & 1,451 & 76.4% & 261 & 13.7% 50 - 99 & 19 & 89.8% & 173 & 85.5% & 534 & 41.8% 100 - 149 & 15 & 90.6% & 40 & 87.6% & 451 & 65.6% 150 - 199 & 6 & 90.9% & 22 & 88.7% & 267 & 79.6% 200 - 249 & 4 & 91.2% & 12 & 89.4% & 118 & 85.8% 250 - 299 & 2 & 91.3% & 5 & 89.6% & 45 & 88.2% unsolved & 166 & 100% & 197 & 100% & 224 & 100%    in table  [ tbl : sudoku_fails ] we list the sudokus for which either the binary or the graph precoloring formulation failed to find a solution for some starting point .",
    "it is apparent that the three methods tend to fail on the same sudokus .",
    "the reformulation as graph coloring was clearly the most successful method for sudoku  19 .",
    "the graph precoloring formulation had a very bad performance on sudoku  22 , compared to the other two methods . on the other hand ,",
    "it is remarkable that the binary formulation was significantly less successful than the graph precoloring for sudoku  90 , and that it failed to find any solution at all for sudoku  25 .",
    "both the graph precoloring formulation and the reformulation as graph coloring also had troubles with this sudoku , and were only able to find a solution for 3 and 2 out of the 20 starting points , respectively .",
    "this sudoku is the one shown in figure  [ fig : sudoku_colored ] .",
    ".number of failed runs in either the binary or the graph precoloring formulation .",
    "sudokus not listed here where successfully solved by these two formulations for every starting point ( not all the sudokus where the graph coloring reformulation failed are listed ) .",
    "[ cols=\"^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     finally , in our last experiment , we explored the behavior of dr for solving the knight s tour problem when the size of the chessboard is increased .",
    "results are displayed in figure  [ fig : exp_kntour ] , where we analyze both paths and cycles with the two formulations @xmath241 ( red crosses ) and @xmath201 ( blue dots ) . clearly , the formulation including the redundant constraint @xmath242 is much faster . for this reason ,",
    "no knight s paths of size @xmath243 or @xmath244 are shown for the formulation without @xmath245 , as the algorithm was stopped before it had enough time to converge .",
    "the rate of success of both formulations for paths and cycles was very similar , around 95% .",
    "it can be observed an exponential dependence between time and size , which makes dr to be inappropriate for big puzzles .",
    "it is remarkable that the line  @xmath246 obtained by linear regression predicts an average time of @xmath247 1,439  seconds for finding a knight s cycle in a @xmath213 chessboard , and this totally fits with the average time of 1,397  seconds obtained in the experiment shown in figure  [ fig : knights_tour ] .",
    "we showed that the douglas  rachford method can be used as a successful heuristic for solving graph coloring problems .",
    "a wide collection of examples and variants of these problems were considered along the paper : precoloring and list coloring problems ( including sudoku puzzles ) , 3-sat problems , 8-queens puzzles and generalizations , and hamiltonian path problems ( as the knight s tour problem ) .",
    "a key aspect for the success of the method was to formulate the problems as suitable combinatorial feasibility problems . in this framework , the douglas  rachford method had already been proved to be an effective heuristic  @xcite , despite the shortfall of theoretical results that justify its good performance .",
    "we tested the performance of douglas ",
    "rachford for solving a representative sample of graph coloring problems .",
    "it is important to point out that the douglas  rachford algorithm is conceptually simple and easy to implement . for simple graphs ,",
    "the method was able to find a solution for almost every random starting point . for more complex problems",
    ", we showed the importance of adding maximal clique information for the success of the method .",
    "it is worth mentioning the results in the 3-sat experiment , where we observed that the use of maximal clique information was decisive .",
    "as expected , in problems where it was possible to successfully apply douglas  rachford to the original problem , the method became slower when it was applied to the reduction of the problem to a graph coloring problem .",
    "this is the case for sudoku puzzles , which were solved in our experiments much faster when the method was applied to the formulation of the problem as a binary feasibility problem ( on average , 6 and 20 times faster than the graph precoloring formulation and the reformulation as graph coloring , respectively ) .",
    "nevertheless , it was interesting to observe that the rate of success in finding the solution was high and very similar for the three formulations .    for the knight",
    "s tour problem , we showed a clear exponential dependence of the time needed to find a solution with respect to the size of the chessboard .",
    "after all , this is not that surprising , due to the np - completeness of the problem .",
    "this shows that the douglas  rachford method is probably inadequate for tackling big complex graphs .    in the convex",
    "setting , for infeasible problems , the sequence generated by douglas ",
    "rachford provably tends to infinity ( in norm ) . in our experiments",
    ", we obtained some similar results for some particular graphs ( see figure  [ fig : infeasible ] ) , a behavior that seems to be strongly influenced by the formulation of the feasibility problem .",
    "all the above motivates us to further study in future research why the douglas  rachford algorithm can successfully solve this type of nonconvex problems , as well as analyze the detection of infeasibility in nonconvex settings with this algorithm .",
    "this paper is dedicated to the memory of jon borwein , for his enthusiastic comments and suggestions on a very preliminary version of the manuscript .",
    "jon was planning to collaborate with us on this paper after getting back from canada .",
    "unfortunately , he stayed there forever .",
    "we greatly missed his valuable input in the elaboration of this work , and we will surely miss him in the future .",
    "aragn and r. campoy were partially supported by mineco of spain and erdf of eu , grant mtm2014 - 59179-c2 - 1-p .",
    "aragn was supported by the ramn y cajal program by mineco of spain and erdf of eu ( ryc-2013 - 13327 ) and r. campoy was supported by mineco of spain and esf of eu ( bes-2015 - 073360 ) under the program `` ayudas para contratos predoctorales para la formacin de doctores 2015 '' .",
    "aragn artacho , j.m .",
    "borwein : global convergence of a non - convex douglas  rachford iteration . j. glob",
    "57(3 ) ( 2013 ) , 753769 .",
    "aragn artacho , j.m .",
    "borwein , v. martn - mrquez , l. yao : applications of convex analysis within mathematics .",
    "math . program .",
    "148 ( 2014 ) , 4988 .",
    "aragn artacho , j.m .",
    "borwein , m.k .",
    "tam : recent results on douglas  rachford methods for combinatorial optimization problem .",
    "j. optim . theory .",
    "163(1 ) ( 2014 ) , 130 .",
    "aragn artacho , j.m .",
    "borwein , m.k .",
    "tam : global behavior of the douglas  rachford method for a nonconvex feasibility problem .",
    "65(2 ) ( 2016 ) , 309327 .",
    "bauschke , v.r .",
    "koch : projection methods : swiss army knives for solving feasibility and best approximation problems with halfspaces .",
    "( 2015 ) , 140 .",
    "bauschke , d. noll : on the local convergence of the douglas  rachford algorithm .",
    "102(6 ) ( 2014 ) , 589600 .",
    "j. benoist : the douglas  rachford algorithm for the case of the sphere and the line . j. global optim .",
    "63(2 ) ( 2015 ) , 363380 . j.m .",
    "borwein , b. sims : the douglas  rachford algorithm in the absence of convexity . in : bauschke , h.h . ,",
    "burachik , r. , combettes , p.l . , elser , v. , luke , d.r . , wolkowicz , h. ( eds . ) fixed - point algorithms for inverse problems in science and engineering ,",
    ".  93109 .",
    "springer - verlag new york , 2011 .",
    "chaitin , m.a .",
    "auslander , a.k .",
    "chandra , j. cocke , m.e .",
    "hopkins , p.w .",
    "markstein : register allocation via coloring .",
    "computer languages , 6(1 ) ( 1981 ) , 4757 .",
    "r. hesse , d.r .",
    "luke : nonconvex notions of regularity and convergence of fundamental algorithms for feasibility problems .",
    "siam j. optim .",
    "23(4 ) ( 2013 ) , 23972419 .",
    "izmailov , m.v .",
    "solodov , e.t .",
    "uskov : globalizing stabilized sequential quadratic programming method by smooth primal - dual exact penalty function .",
    "169(1 ) ( 2016 ) , 131 .            h.m .",
    "phan : linear convergence of the douglas  rachford method for two closed sets .",
    "65(2 ) ( 2016 ) , 369385",
    ". g. pierra : decomposition through formalization in a product space .",
    "program . 28",
    "( 1984 ) , 96115 ."
  ],
  "abstract_text": [
    "<S> we present the douglas  rachford algorithm as a successful heuristic for solving graph coloring problems . given a set of colors , these type of problems consist in assigning a color to each node of a graph , in such a way that every pair of adjacent nodes are assigned with different colors . </S>",
    "<S> we formulate the graph coloring problem as an appropriate feasibility problem that can be effectively solved by the douglas  rachford algorithm , despite the nonconvexity arising from the combinatorial nature of the problem . </S>",
    "<S> different modifications of the graph coloring problem and applications are also presented . </S>",
    "<S> the good performance of the method is shown in various computational experiments .    </S>",
    "<S> [ [ keywords ] ] keywords : + + + + + + + + +    douglas  rachford algorithm , graph coloring , feasibility problem , non - convex    [ [ msc2010 ] ] msc2010 : + + + + + + + +    47j25 , 90c27 , 47n10 </S>"
  ]
}