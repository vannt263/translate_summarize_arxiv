{
  "article_text": [
    "semijoins are very important in the field of database query processing . while computing project - join queries in general is np - complete in the size of the query and the database , this can be done in polynomial time when the database schema is acyclic  @xcite , a property known to be equivalent to the existence of a semijoin program  @xcite .",
    "semijoins are often used as part of a query pre - processing phase where dangling tuples are eliminated .",
    "another interesting property is that the size of a relation resulting from a semijoin is always linear in the size of the input .",
    "therefore , a query processor will try to use semijoins as often as possible when generating a query plan for a given query ( a technique known as `` pushing projections ''  @xcite ) .",
    "also in distributed query processing , semijoins have great importance , because when a database is distributed across several sites , they can help avoid the shipment of many unneeded tuples .    because of its practical importance , we would like to have a clear knowledge of the capabilities and the limitations of semijoins .",
    "for example , bernstein , chiu and goodman  @xcite have characterized the conjunctive queries computable by semijoin programs . in this paper , we consider the much larger class of queries computable in the variant of the relational algebra obtained by replacing the join operator by the semijoin operator .",
    "we call this the semijoin algebra ( sa )",
    ". a join of two relations combines all tuples satisfying a given condition , called the join condition .",
    "a semijoin differs from a join in the sense that it selects only those tuples in the first relation that participate in the join .",
    "the semijoin algebra is a fragment of the relational algebra , which is known to be equivalent to first - order logic ( called relational calculus in database theory  @xcite ) .",
    "interestingly , there is a fragment of first - order logic very similar to the semijoin algebra : it is the so called `` guarded fragment '' ( gf )  @xcite , which has been studied in the field of modal logic .",
    "this is interesting because the motivations to study this fragment came purely from the field of logic and had nothing to do with database query processing .",
    "indeed , the purpose was to extend propositional modal logic to the predicate level , retaining the good properties of modal logic , such as the finite model property .",
    "an important tool in the study of the expressive power of the gf is the notion of `` guarded bisimulation '' , which provides a characterization of the discerning power of the gf .",
    "we will show that when we allow only equalities to appear in the semijoin conditions , the semijoin algebra has essentially the same expressive power as the guarded fragment .",
    "when also nonequalities or other predicates are allowed , the semijoin algebra becomes more powerful .",
    "we will define a generalization of guarded bisimulation , in the form of an ehrenfeucht - frass game , that characterizes the discerning power of the semijoin algebra .",
    "we will use this tool to show that certain queries are not expressible in sa .",
    "in this section , we give formal definitions of the semijoin algebra and the guarded fragment .    from the outset , we assume a universe @xmath0 of basic data values , over which a number of predicates are defined . these predicates can be combined into quantifier - free first - order formulas , which are used in selection and semijoin conditions .",
    "the names of these predicates and their arities are collected in the vocabulary @xmath1 .",
    "the equality predicate ( @xmath2 ) is always in @xmath1 .",
    "a database schema is a finite set @xmath3 of relation names , each associated with its arity .",
    "@xmath3 is disjoint from @xmath4 a database @xmath5 over @xmath3 is an assignment of a finite relation @xmath6 to each @xmath7 , where @xmath8 is the arity of @xmath9 .",
    "* proviso .",
    "* when @xmath10 stands for a first - order formula , then @xmath11 indicates that all free variables of @xmath10 are among @xmath12 .",
    "first , we define the semijoin algebra .",
    "let @xmath3 be a database schema .",
    "syntax and semantics of the semijoin algebra is inductively defined as follows :    1 .",
    "each relation @xmath7 is a semijoin algebra expression .",
    "2 .   if @xmath13 sa have arity @xmath8 , then also @xmath14 , @xmath15 belong to sa and are of arity @xmath8 .",
    "if @xmath16 sa has arity @xmath8 and @xmath17 , then @xmath18 belongs to sa and is of arity @xmath19 .",
    "4 .   if @xmath20 sa have arities @xmath8 and @xmath21 , respectively , and @xmath22 and @xmath23 are quantifier - free formulas over @xmath1 , then also @xmath24 and @xmath25 belong to sa and are of arity @xmath26    the semantics of the projection , the selection and the semijoin operator are as follows : @xmath27 , @xmath28 holds@xmath29 , @xmath30 , @xmath31 holds@xmath29 .",
    "the semantics of the other operators are well known .",
    "now , we recall the definition of the guarded fragment .",
    "let @xmath3 be a database schema .    1 .",
    "all quantifier - free first - order formulas over @xmath3 are formulas of gf .",
    "if @xmath10 and @xmath32 are formulas of gf , then so are @xmath33 , @xmath34 , @xmath35 , @xmath36 and @xmath37 .",
    "if @xmath38 is a formula of gf and @xmath39 is an atomic formula such that all free variables of @xmath10 do actually occur in @xmath40 then @xmath41 is a formula of gf .",
    "as the guarded fragment is a fragment of first - order logic , the semantics of gf is that of first - order logic , interpreted over the active domain of the database  @xcite .",
    "in this section , @xmath42 consists only of the equality predicate .",
    "suppose furthermore that we only allow conjunctions of equalities to be used in the semijoin conditions ; selection conditions can be arbitrary quantifier - free formulas over @xmath1 .",
    "we will denote the semijoin algebra with this restriction on the semijoin conditions by sa@xmath43 .",
    "before we prove that sa@xmath43 is subsumed by gf , we need a lemma .",
    "[ lem : satuple ] for every sa@xmath43 expression @xmath44 of arity @xmath45 , for every database @xmath46 and for every tuple @xmath47 in @xmath48 , there exists @xmath9 in @xmath49 , an injective function @xmath50 , and a tuple @xmath51 in @xmath52 such that @xmath53 .    by structural induction on expression @xmath44 .",
    "[ sasubsumesgf ] for every sa@xmath43 expression @xmath44 of arity @xmath45 , there exists a gf formula @xmath54 such that for every database @xmath5 , @xmath55 .",
    "the proof is by structural induction on @xmath44 .    * if @xmath44 is @xmath9 , then @xmath56 . * if @xmath44 is @xmath57 , then @xmath58 . * if @xmath44 is @xmath15 , then @xmath59 . * if @xmath44 is @xmath60 , then @xmath61 . *",
    "if @xmath44 is @xmath62 with @xmath63 of arity @xmath8 , then , by induction , @xmath64 defines all tuples in @xmath65 . by lemma  [ lem : satuple ]",
    ", @xmath66 is equivalent to the formula obtained by replacing in @xmath67 @xmath68 each @xmath69 by @xmath70 , @xmath71 . in this formula , @xmath72 is a shorthand for the set @xmath73 .",
    "formula @xmath54 should now only select components @xmath74 out of this formula .",
    "to this end , we modify @xmath32 such that in each disjunct it quantifies over @xmath75 with @xmath76 and in each disjunct @xmath77 is replaced by @xmath78 , @xmath79 . now @xmath80 is obtained . *",
    "if @xmath44 is @xmath81 with @xmath82 and @xmath83 of arity @xmath8 , then , by induction , @xmath84 and @xmath85 define all tuples in @xmath65 and @xmath86 respectively . by lemma  [ lem : satuple ] , @xmath80 is obtained by replacing in formula @xmath87 @xmath88 each @xmath89 by @xmath90 , @xmath91 .",
    "note that condition @xmath92 is enforced by repetition of variables @xmath90 . in this formula ,",
    "@xmath93 .    by the decidability of gf ,",
    "we obtain :    satisfiability of sa@xmath43 expressions is decidable .    with decidability of sa expressions , we always mean finite satisfiability , because a database is finite by definition .",
    "the literal converse statement of theorem  [ sasubsumesgf ] is not true , because the guarded fragment contains all quantifier - free first - order formulas , so that one can express arbitrary cartesian products in it , such as @xmath94 .",
    "cartesian products , of course , can not be expressed in the semijoin algebra .",
    "nevertheless , the result of any gf query restricted to a single relation by a semijoin is always expressible in sa@xmath43 :    for every gf formula @xmath11 , for every relation @xmath9 ( with arity @xmath8 ) , for every injective function @xmath95 , the query @xmath96 in which @xmath92 is @xmath97 , is expressible in sa@xmath43 .    by structural induction on @xmath10 , we construct the desired semijoin expression @xmath98 .    *",
    "if @xmath11 is @xmath99 then @xmath100 , where @xmath92 is @xmath101 ; * if @xmath11 is @xmath102 then @xmath103 ; * if @xmath11 is @xmath104 then @xmath105 ; * if @xmath11 is @xmath106 then @xmath107 ; * suppose @xmath11 is @xmath108 , where @xmath40 is atomic with relation name @xmath109 .",
    "let @xmath110 be the different occurrences of variables among @xmath12 in @xmath40 .",
    "now , @xmath111 where @xmath92 is @xmath112 and @xmath113 is the function that maps @xmath114 to the position of @xmath115 in @xmath40 and that maps @xmath116 to the position of @xmath117 in @xmath40 .",
    "taking @xmath118 and @xmath9 equal to any nonempty relation in the above theorem , we obtain :    over the class of nonempty databases gf sentences and 0-ary sa@xmath43 expressions have equal expressive power .    here",
    ", a database is said to be empty if all its relations are empty .",
    "let us now allow arbitrary semijoin conditions ( still over equality only ) .",
    "specifically , nonequalities are now allowed .",
    "we will denote the semijoin algebra over @xmath42 by sa@xmath119 .",
    "then , gf no longer subsumes sa@xmath119 .",
    "a counterexample is the query that asks whether there are at least two distinct elements in a single unary relation @xmath120 .",
    "this is expressible in sa@xmath119 as @xmath121 , but is not expressible in gf .",
    "indeed , a set with a single element is guarded bisimilar to a set with two elements  @xcite .    unfortunately , these nonequalities in semijoin conditions make sa undecidable .",
    "satisfiability of sa@xmath119 expressions is undecidable .",
    "grdel  ( * ? ? ?",
    "* theorem 5.8 ) shows that gf with functionality statements in the form of functional[@xmath5 ] , saying that the binary relation @xmath5 is the graph of a partial function , is a conservative reduction class . since functional[@xmath5 ]",
    "is expressible in sa@xmath119 as @xmath123 , it follows that sa@xmath119 is undecidable .    in the next section",
    ", we will generalize guarded bisimulation to the semijoin algebra , with arbitrary quantifier - free formulas over @xmath1 as semijoin conditions .",
    "in this section , we describe an ehrenfeucht - frass game that characterizes the discerning power of the semijoin algebra .",
    "let @xmath46 and @xmath124 be two databases over the same schema @xmath3 .",
    "the _ semijoin game _ on these databases is played by two players , called the spoiler and the duplicator .",
    "they , in turn , choose tuples from the tuple spaces @xmath125 and @xmath126 , which are defined as follows : @xmath127 , and @xmath126 is defined analogously .",
    "so , the players can pick tuples from the databases and projections of these .    at each stage in the game , there is a tuple @xmath128 and a tuple @xmath129 .",
    "we will denote such a configuration by @xmath130 .",
    "the conditions for the duplicator to win the game with 0 rounds are :    1 .",
    "@xmath131 2 .   for every atomic formula ( equivalently , for every quantifier - free formula )",
    "@xmath92 over @xmath1 , @xmath132 holds iff @xmath133 holds .    in the game with @xmath134 rounds",
    ", the spoiler will be the first one to make a move .",
    "therefore , he first chooses a database ( @xmath46 or @xmath124 ) .",
    "then he picks a tuple in @xmath125 or in @xmath126 respectively .",
    "the duplicator then has to make an `` analogous '' move in the other tuple space .",
    "when the duplicator can hold this for @xmath21 times , no matter what moves the spoiler takes , we say that the duplicator wins the @xmath21-round semijoin game on @xmath46 and @xmath124 .",
    "the `` analogous '' moves for the duplicator are formally defined as legal answers in the next definition .",
    "suppose that at a certain moment in the semijoin game , the configuration is @xmath130 .",
    "if the spoiler takes a tuple @xmath135 in his next move , then the tuples @xmath136 , for which the following conditions hold , are legal answers for the duplicator :    1 .",
    "@xmath137 2 .   for every atomic formula @xmath92 over @xmath1",
    ", @xmath138 holds iff @xmath139 holds .    if the spoiler takes a tuple @xmath136 , the legal answers @xmath140 are defined identically .    in the following ,",
    "we denote the semijoin game with initial configuration @xmath130 and that consists of @xmath21 rounds , by @xmath141 .    we first state and prove    [ lem : s_m ] if the duplicator wins @xmath141 , then for each semijoin expression @xmath44 with @xmath142 nested semijoins and projections , we have @xmath143",
    ".    we prove this by induction on @xmath21 .",
    "the base case @xmath144 is clear . now consider the case @xmath145 .",
    "suppose that @xmath146 but @xmath147",
    ". then @xmath148 and @xmath149 , and either ( * )  @xmath150 or ( * * )  @xmath151 . in situation (",
    "* ) , @xmath152 and @xmath153 are distinguished by an expression with @xmath154 semijoins or projections , so the spoiler has a winning strategy ; in situation ( * * ) , the spoiler has a winning strategy by choosing this @xmath155 with @xmath138 , because each legal answer of the duplicator @xmath156 has @xmath139 and therefore @xmath157 .",
    "so , the spoiler now has a winning strategy in the game @xmath158 . in case",
    "a projection distinguishes @xmath152 and @xmath153 , a similar winning strategy for the spoiler exists . in case @xmath152 and @xmath153",
    "are distinguished by an expression that is neither a semijoin , nor a projection , there is a simpler expression that distinguishes them , so the result follows by structural induction .",
    "we now come to the main theorem of this section .",
    "this theorem concerns the game @xmath159 , which we also abbreviate as @xmath160 .",
    "we say that the duplicator wins @xmath160 if the spoiler has no winning strategy .",
    "this means that the duplicator can keep on playing forever , choosing legal answers for every move of the spoiler .",
    "the duplicator wins @xmath160 if and only if for each semijoin expression @xmath44 , we have @xmath161 .    the ` only if ' direction of the proof follows directly from proposition  [ lem : s_m ] , because if the duplicator wins @xmath160 , he wins @xmath141 for every @xmath162 .",
    "so , @xmath152 and @xmath153 are indistinguishable through all semijoin expressions . for the `",
    "if ' direction , it is sufficient to prove that if the duplicator loses , @xmath152 and @xmath153 are distinguishable .",
    "we therefore construct , by induction , a semijoin expression @xmath163 such that ( i ) @xmath164 , and ( ii ) @xmath165 iff the duplicator wins @xmath166 .",
    "we define @xmath167 as @xmath168 in this expression , @xmath169 is a shorthand for @xmath170 and @xmath171 is the _ atomic type _ of @xmath152 over @xmath1 , i.e. , the conjunction of all atomic and negated atomic formulas over @xmath1 that are true of @xmath152 .",
    "we now construct @xmath163 in terms of @xmath172 : @xmath173 in this expression , @xmath174 is the atomic type of @xmath152 and @xmath175 over @xmath1 ; @xmath176 is the maximal arity of a relation in @xmath3 ; @xmath92 ranges over all atomic @xmath1-types of two tuples , one with the arity of @xmath152 , and one with arity @xmath177 .",
    "the notation @xmath178 , for an expression of arity @xmath45 , is a shorthand for @xmath179",
    "grdel  @xcite already showed that transitivity is not expressible in the guarded fragment .",
    "we will now show that transitivity is still inexpressible in the more powerful semijoin algebra .",
    "transitivity is inexpressible in the semijoin algebra .",
    "we will give two databases @xmath46 and @xmath124 over the schema @xmath3 containing a single relation @xmath9 , that are indistinguishable by semijoin expressions , and with the property that @xmath9 is transitive in @xmath46 and not in @xmath124 .",
    "these databases are shown graphically in figure  [ fig : transitivity ] .    in this figure",
    "the edges represent the relation @xmath9 .",
    "a moment s inspection reveals that the duplicator has a winning strategy in the semijoin game @xmath180 . for the sake of completeness we give here the formal strategy .",
    "we do this by using the following bijections from tuple space @xmath125 to @xmath126 .",
    "@xmath181{c|c }      \\multicolumn{2}{c}{f : t_a \\rightarrow t_b}\\\\      \\hline      a \\mapsto g\\    &   \\ ab \\mapsto gh\\\\      b \\mapsto h\\    &   \\ bc \\mapsto hi\\\\      c \\mapsto i\\    &   \\ de \\mapsto jk\\\\        d \\mapsto j\\    &   \\ ef \\mapsto kl\\\\      e \\mapsto k\\    &   \\ ac \\mapsto gl\\\\        f \\mapsto l\\    &   \\ df \\mapsto ji     \\end{array }      \\hspace{1.0 cm }    \\begin{array}[t]{c|c }      \\multicolumn{2}{c}{g : t_a \\rightarrow t_b}\\\\      \\hline      a \\mapsto j\\    &   \\ ab \\mapsto jk\\\\      b \\mapsto k\\    &   \\ bc \\mapsto kl\\\\      c \\mapsto l\\    &   \\ de \\mapsto gh\\\\      d",
    "\\mapsto g\\    &   \\ ef \\mapsto hi\\\\      e \\mapsto h\\    &   \\ ac \\mapsto ji\\\\      f \\mapsto i\\    &   \\ df \\mapsto gl    \\end{array}\\ ] ]    when the spoiler makes his first move , the duplicator has a legal answer by taking the image or pre - image of the spoiler s chosen tuple under bijection @xmath182 .",
    "the duplicator now continues answering each spoiler move by applying @xmath182 or @xmath183 to the chosen tuple , until :    * in configuration @xmath184 the spoiler chooses @xmath185 or @xmath186 , or * in configuration @xmath187 the spoiler chooses @xmath188 or @xmath189 , or * in configuration @xmath190 the spoiler chooses @xmath191 or @xmath192 , or * in configuration @xmath193 the spoiler chooses @xmath194 or @xmath195 .    in either case , the duplicator answers with the tuple obtained from applying @xmath113 or @xmath196 to the chosen tuple , and from then , he follows strategy function @xmath113 .",
    "following @xmath113 , he switches back to strategy function @xmath182 whenever :    * in configuration @xmath197 the spoiler chooses @xmath185 or @xmath192 , or * in configuration @xmath198 the spoiler chooses @xmath188 or @xmath195 , or * in configuration @xmath199 the spoiler chooses @xmath191 or @xmath186 , or * in configuration @xmath200 the spoiler chooses @xmath194 or @xmath189 .",
    "another example of a query inexpressible in the semijoin algebra is the following :    [ thm : cart ] the query @xmath201 ?",
    "about a binary relation @xmath9 is inexpressible in the semijoin algebra .    in figure",
    "[ fig : cartesian ] , two databases @xmath46 and @xmath124 are shown where @xmath46 satisfies the query and @xmath124 does not .",
    "the duplicator has a winning strategy in the semijoin game @xmath180 .",
    "in this section , we investigate the impact of order . on ordered databases ( where @xmath1 now also contains a total order on the domain ) ,",
    "the query that asks if there are at least @xmath45 elements in a unary relation @xmath120 becomes expressible as @xmath202 , which is inductively defined as follows : @xmath203 note that this query is independent of the chosen order .",
    "this parallels the situation in first - order logic , where there also exists an order - invariant query that is expressible with but inexpressible without order ( ( * ? ? ?",
    "* exercise 17.27 ) and ( * ? ? ? * proposition 2.5.6 ) ) .",
    "transitivity remains inexpressible in the semijoin algebra even on ordered databases .",
    "consider the following databases @xmath46 and @xmath124 over a single binary relation @xmath9 : @xmath52 is the union of @xmath204 , @xmath205 and @xmath169 , where @xmath206 , @xmath207 , and @xmath208 ; @xmath209 .",
    "clearly , @xmath9 is transitive in @xmath46 , but not in @xmath124 .",
    "we have shown elsewhere  @xcite that when @xmath210 , the duplicator has a winning strategy in the @xmath8-round semijoin game @xmath211 . by proposition  [ lem : s_m ] , transitivity is not expressible in sa with order ."
  ],
  "abstract_text": [
    "<S> the semijoin algebra is the variant of the relational algebra obtained by replacing the join operator by the semijoin operator . </S>",
    "<S> we discuss some interesting connections between the semijoin algebra and the guarded fragment of first - order logic . </S>",
    "<S> we also provide an ehrenfeucht - frass game , characterizing the discerning power of the semijoin algebra . </S>",
    "<S> this game gives a method for showing that certain queries are not expressible in the semijoin algebra . </S>"
  ]
}