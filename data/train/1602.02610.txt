{
  "article_text": [
    "a vertex @xmath2 of a connected graph @xmath3 _ resolves _ two distinct vertices @xmath0 and @xmath1 of @xmath3 if @xmath4 , where @xmath5 denotes the length of a shortest path between @xmath6 and @xmath2 in the graph @xmath3 .",
    "a set of vertices @xmath7 is a _ resolving _ ( or _ locating _ ) set for @xmath3 if for any two distinct @xmath8 , there is @xmath9 that resolves @xmath0 and @xmath1 .",
    "the _ metric dimension _",
    "@xmath10 is the minimum cardinality of a resolving set for @xmath3 .",
    "this notion was introduced independently by slater  @xcite and harary and melter  @xcite .",
    "the task of the minimum metric dimension problem is to find the metric dimension of a graph @xmath3 . respectively ,    is the decision version of the problem .",
    "the problem was first mentioned in the literature by garey and johnson @xcite and the same authors later proved it to be np - complete in general .",
    "khuller et al .",
    "@xcite have also shown that this problem is np - complete on general graphs while more recently diaz et al .",
    "@xcite showed that the problem is np - complete even when restricted to planar graphs . in this work ,",
    "diaz et al . also showed that this problem is solvable in polynomial time on the class of outer - planar graphs . prior to this ,",
    "not much was known about the computational complexity of this problem except that it is polynomial - time solvable on trees ( see @xcite ) , although there are also results proving combinatorial bounds on the metric dimension of various graph classes @xcite .",
    "subsequently , epstein et al .",
    "@xcite showed that this problem is np - complete on split graphs , bipartite and co - bipartite graphs .",
    "they also showed that the _ weighted version _ of metric dimension can be solved in polynomial time on paths , trees , cycles , co - graphs and trees augmented with @xmath11-edges for fixed @xmath11 .",
    "hoffmann and wanke @xcite extended the tractability results to a subclass of unit disk graphs and most recently , foucaud et al .",
    "@xcite showed that this problem is np - complete on interval graphs .",
    "the np - hardness of the problem in general as well as on several special graph classes raises the natural question of resolving its parameterized complexity .",
    "parameterized complexity is a two dimensional framework for studying the computational complexity of a problem .",
    "one dimension is the input size @xmath12 and another one is a parameter @xmath11 .",
    "it is said that a problem is _ fixed parameter tractable _ ( or @xmath13 ) , if it can be solved in time @xmath14 for some function @xmath15 .",
    "we refer to the books of cygan et al .",
    "@xcite and downey and fellows  @xcite for detailed introductions to parameterized complexity .",
    "the parameterized complexity of metric dimension under the standard parameterization ",
    "the metric dimension of the input graph , on general graphs was open until 2012 , when hartung and nichterlein @xcite proved that it is w[2]-hard .",
    "the next natural step in understanding the parameterized complexity of this problem is the identification of special graph classes which permit fixed - parameter tractable algorithms ( fpt ) .",
    "recently , foucaud et al .",
    "@xcite showed that when the input is restricted to the class of interval graphs , there is an fpt algorithm for this problem parameterized by the metric dimension of the graph .",
    "as foucaud et al . note , it is far from obvious how the crucial lemmas used in their algorithm for interval graphs might extend to natural superclasses like chordal graphs and charting the actual boundaries of tractability of this problem remains an interesting open problem .    in this paper , we identify two width - measures of graphs , namely _ tree - length _ and _ modular - width _ as two parameters under which we can obtain fpt algorithms for metric dimension .",
    "the notion of tree - length was introduced by dourisboure and gavoille  @xcite in order to deal with tree - decompositions whose quality is measured not by the size of the bags but the _ diameter _ of the bags .",
    "essentially , the _ length _ of a tree - decomposition is the maximum diameter of the bags in this tree - decomposition and the tree - length of a graph is the minimum length over all tree - decompositions .",
    "the class of bounded tree - length graphs is an extremely rich graph class as it contains several well - studied graph classes like interval graphs , chordal graphs , at - free graphs , permutation graphs and so on .",
    "as mentioned earlier , out of these , only interval graphs were known to permit fpt algorithms for metric dimension .",
    "this provides a strong motivation for studying the role played by the tree - length of a graph in the computation of its metric dimension .",
    "due to the obvious generality of this class , our results for metric dimension on this graph class significantly expand the known boundaries of tractability of this problem ( see figure [ fig : classes ] ) .",
    "[ fig : classes ]    modular - width was introduced by gallai  @xcite in the context of comparability graphs and transitive orientations .",
    "a module in a graph is a set @xmath16 of vertices such that each vertex in @xmath17 adjacent all or none of @xmath16 .",
    "a partition of the vertex set into modules defines a _ quotient graph _ with the set of modules as the vertex set . roughly speaking",
    ", the modular decomposition tree is a rooted tree that represents the graph by recursively combining modules and quotient graphs .",
    "the modular - width of the decomposition is the size of the largest _",
    "node in this decomposition , that is , a node which can not be partitioned into a set of non - trivial modules .",
    "modular - width is a larger parameter than the more general clique - width and has been used in the past as a parameterization for problems where choosing clique - width as a parameter leads to w - hardness @xcite .",
    "our main result is an fpt algorithm for metric dimension parameterized by the _",
    "maximum degree _ and the tree - length of the input graph .",
    "[ thm : tl ] metric dimension is @xmath13 when parameterized by @xmath18 , where @xmath19 is the max - degree and @xmath20 is the tree - length of the input graph .",
    "it follows from ( theorem 3.6 , @xcite ) that for any graph @xmath3 , @xmath21 .",
    "therefore , one of the main consequences of this theorem is the following .",
    "metric dimension is @xmath13 when parameterized by @xmath22 , where @xmath11 is the metric dimension of the input graph .",
    "further , it is known that chordal graphs and permutation graphs have tree - length at most 1 and 2 respectively .",
    "this follows from the definition in the case of chordal graphs . in the case of permutation graphs",
    "it is known that their chordality is bounded by 4 ( see for example @xcite ) and by using the result of gavoille et al .",
    "@xcite for any @xmath23-chordal graph @xmath3 , @xmath24 and a tree decomposition of length at most @xmath25 can be constructed in polynomial time .",
    "therefore , we obtain fpt algorithms for metric dimension parameterized by the solution size on chordal graphs and permutation graphs .",
    "this answers a problem posed by foucaud et al .",
    "@xcite who proved a similar result for the case of interval graphs .",
    "the algorithm behind theorem [ thm : tl ] is a dynamic programming algorithm on a bounded _ width _ tree - decomposition .",
    "however , it is not sufficient to have bounded tree - width ( indeed it is open whether metric dimension is polynomial time solvable on graphs of treewidth 2 ) .",
    "this is mainly due to the fact that pairs of vertices can be resolved by a vertex ` far away ' from them hence making the problem extremely non - local .",
    "however , we use delicate distance based arguments using the tree - length and degree bound on the graph to show that most pairs are trivially resolved by any vertex that is sufficiently far away from the vertices in the pair and furthermore , the pairs that are not resolved in this way must be resolved ` locally ' .",
    "we then design a dynamic programming algorithm incorporating these structural lemmas and show that it is in fact an fpt algorithm for metric dimension parameterized by max - degree and tree - length .",
    "our second result is an fpt algorithm for metric dimension parameterized by the modular - width of the input graph .",
    "[ thm : mw ] metric dimension is @xmath13 when parameterized by the modular - width of the input graph .",
    "* graphs . *",
    "we consider finite undirected graphs without loops or multiple edges .",
    "the vertex set of a graph @xmath3 is denoted by @xmath26 , the edge set by @xmath27 .",
    "we typically use @xmath12 and @xmath28 to denote the number of vertices and edges respectively . for a set of vertices",
    "@xmath29 , @xmath30 $ ] denotes the subgraph of @xmath3 induced by @xmath31 . and",
    "by @xmath32 we denote the graph obtained form @xmath3 by the removal of all the vertices of @xmath31 , i.e. , the subgraph of @xmath3 induced by @xmath33 .",
    "a set of vertices @xmath34 is a _ separator _ of a connected graph @xmath3 if @xmath32 is disconnected .",
    "let @xmath3 be a graph .",
    "for a vertex @xmath2 , we denote by @xmath35 its _ ( open ) neighborhood _ , that is , the set of vertices which are adjacent to @xmath2 .",
    "the _ distance _ @xmath5 between two vertices @xmath6 and @xmath2 in a connected graph @xmath3 is the number of edges in a shortest @xmath36-path . for a positive integer @xmath37 , @xmath38=\\{u\\in v(g)\\mid { \\textrm{dist}}_g(u , v)\\leq r\\}$ ] . for a vertex @xmath9 and a set @xmath29 , @xmath39 . for a set of vertices @xmath29 ,",
    "its _ diameter _ @xmath40 .",
    "diameter of a graph _",
    "@xmath3 is @xmath41 .",
    "a vertex @xmath9 is _ universal _ if @xmath42 . for two graphs @xmath43 and @xmath44 with @xmath45 , the _ disjoint union _ of @xmath43 and @xmath44 is the graph with the vertex set @xmath46 and the edge set @xmath47 , and the _ join _ of @xmath43 and @xmath44 is the graph the vertex set @xmath46 and the edge set @xmath48 . for a positive integer @xmath11 , a graph @xmath3 is _ @xmath11-chordal _ if the length of the longest induced cycle in @xmath3 is at most @xmath11 . the _ chordality _ of @xmath3 is the smallest integer @xmath11 such that @xmath3 is @xmath11-chordal .",
    "it is usually assumed that forests have chordality 2 ; _ chordal _ graphs are 3-chordal graphs .",
    "we say that a set of vertices @xmath7 _ resolves _ a set of vertices @xmath29 if for any two distinct vertices @xmath49 , there is a vertex @xmath50 that resolves them . clearly , @xmath51 is a resolving set for @xmath3 if @xmath51 resolves @xmath26 .    *",
    "modular - width .",
    "* a set @xmath52 is a _ module _ of graph @xmath3 if for any @xmath53 , either @xmath54 or @xmath55 . the _ modular - width _ of a graph @xmath3 introduced by gallai in  @xcite is is the maximum size of a prime node in the modular decomposition tree . for us , it is more convenient to use the following recursive definition .",
    "the modular - width of a graph @xmath3 is at most @xmath56 if one of the following holds :    * @xmath3 has one vertex , * @xmath3 is disjoint union of two graphs of modular - width at most @xmath56 , * @xmath3 is a join of two graphs of modular - width at most @xmath56 , * @xmath26 can be partitioned into @xmath57 modules @xmath58 such that @xmath59)\\leq t$ ] for @xmath60 .    the modular - width of a graph can be computed in linear time by the algorithm of tedder et al .",
    "@xcite ( see also  @xcite ) .",
    "moreover , this algorithm outputs the algebraic expression of @xmath3 corresponding to the described procedure of its construction .    * tree decompositions . * a _ tree decomposition _ of a graph @xmath3 is a pair @xmath61 where @xmath62 is a tree and",
    "@xmath63 is a collection of subsets ( called _ bags _ ) of @xmath26 such that :    1 .",
    "@xmath64 , 2 .",
    "for each edge @xmath65 , @xmath66 for some @xmath67 , and 3 .   for each @xmath68 the set @xmath69 induces a connected subtree of @xmath62 .",
    "the _ width _ of a tree decomposition @xmath70 is @xmath71 .",
    "the _ length _ of a tree decomposition @xmath70 is @xmath72 .",
    "the _ tree - length _ if a graph @xmath3 denoted as @xmath73 is the minimum length over all tree decompositions of @xmath3 .",
    "the notion of tree - length was introduced by dourisboure and gavoille  @xcite .",
    "lokshtanov proved in  @xcite that it is @xmath74-complete to decide whether @xmath75 for a given @xmath3 for any fixed @xmath76 , but it was shown by dourisboure and gavoille in  @xcite that the tree - length can be approximated in polynomial time within a factor of 3 .",
    "we say that a tree decomposition @xmath61 of a graph @xmath3 with @xmath63 is _ nice _ if @xmath62 is a rooted binary tree such that the nodes of @xmath62 are of four types :    1 .",
    "a _ leaf node _",
    "@xmath77 is a leaf of @xmath62 and @xmath78 ; 2 .",
    "an _ introduce node _",
    "@xmath77 has one child @xmath79 with @xmath80 for some vertex @xmath81 ; 3 .",
    "a _ forget node _",
    "@xmath77 has one child @xmath79 with @xmath82 for some vertex @xmath83 ; and 4 .",
    "a _ join node _",
    "@xmath77 has two children @xmath79 and @xmath84 with @xmath85 such that the subtrees of @xmath62 rooted in @xmath79 and @xmath84 have at least one forget vertex each .    by the same arguments",
    "as were used by kloks in  @xcite , it can be proved that every tree decomposition of a graph can be converted in linear time to a nice tree decomposition of the same length and the same width @xmath86 such that the size of the obtained tree is @xmath87 . moreover , for an arbitrary vertex @xmath9",
    ", it is possible to obtain such a nice tree decomposition with the property that @xmath2 is the unique vertex of the root bag .",
    "in this section we prove that metric dimension is @xmath13 when parameterized by the max - degree and tree - length of the input graph . throughout the section we use the following notation .",
    "let @xmath61 , where @xmath88 , be a nice tree decomposition of a graph @xmath3 .",
    "then for @xmath67 , @xmath89 is the subtree of @xmath62 rooted in @xmath77 and @xmath90 is the subgraph of @xmath3 induced by @xmath91 .",
    "we first begin with a subsection where we prove the required structural properties of graphs of bounded tree - length and max - degree .",
    "we need the following lemma from @xcite , bounding the treewidth of graphs of bounded tree - length and degree .",
    "@xcite[lem : width ] let @xmath3 be a connected graph with @xmath92 and let @xmath61 be a tree decomposition of @xmath3 with the length at most @xmath93",
    ". then the width of @xmath61 , is at most @xmath94 .",
    "we also need the next lemma which essentially bounds the number of bags of @xmath61 a particular vertex of the graph appears in .",
    "we then use this lemma to prove lemma [ lem : tree - dist ] , which states that the ` distance between a pair of vertices in the tree - decomposition ' in fact approximates the distance between these vertices in the graph by a factor depending only on @xmath19 and @xmath93 .",
    "[ lem : path ] let @xmath3 be a connected graph with @xmath92 , and let @xmath61 , where @xmath88 , be a nice tree decomposition of @xmath3 of length at most @xmath93 .",
    "furthermore , let @xmath95 be a path in @xmath62 such that for some vertex @xmath96 , @xmath97 for every @xmath98 .",
    "then @xmath99 .",
    "let @xmath100 be a path in @xmath62 such that @xmath97 for @xmath101 . furthermore ,",
    "suppose that one of the endpoints of @xmath100 is an ancestor of the other endpoint in @xmath62 .",
    "we will argue that @xmath102 , which will in turn imply the lemma because for any path @xmath95 in @xmath62 such that @xmath97 for @xmath98 , there is a subpath @xmath100 of length at least half that of @xmath95 where one of the endpoints is an ancestor of the other .",
    "now , denote by @xmath103 the number of join , introduce , forget and leaf nodes of @xmath100 .",
    "* denote by @xmath104 the set of introduce nodes of @xmath100 .",
    "let @xmath105 .",
    "observe that @xmath106 .",
    "therefore , @xmath107 . *",
    "denote by @xmath108 the set of forget nodes of @xmath100 , and let @xmath109 .",
    "notice that @xmath110 and @xmath106 .",
    "therefore , @xmath111 . *",
    "denote by @xmath112 the set of children of the join nodes of @xmath100 that are outside @xmath100 .",
    "notice that @xmath113 .",
    "observe that for @xmath114 , @xmath115 has at least one forget node .",
    "therefore , for each @xmath114 , there is a vertex @xmath116 adjacent to a vertex of @xmath117 .",
    "notice that the vertices @xmath118 for @xmath114 are pairwise distinct and @xmath119 .",
    "consider @xmath120 .",
    "we have that @xmath121 and @xmath122",
    ". therefore , @xmath123 .    as @xmath124",
    ", we obtain that @xmath125 .    using lemma  [ lem : path ] , we obtain the following .    [",
    "lem : tree - dist ] let @xmath3 be a connected graph with max - degree @xmath92 , and let @xmath61 , where @xmath88 , be a nice tree decomposition of @xmath3 with the length at most @xmath93 . then for @xmath126 and any @xmath127 and @xmath128 , @xmath129    consider @xmath127 and @xmath128 for @xmath126 .",
    "let @xmath130 be a shortest @xmath131-path in @xmath3 , and let @xmath95 be the unique @xmath132-path in @xmath62 .",
    "observe that for any @xmath133 , @xmath134 contains at least one vertex of @xmath130 . since any vertex @xmath135 of @xmath130 is included in at most @xmath136 bags @xmath134 for @xmath133 ( lemma [ lem : path ] ) , @xmath137 and , therefore , @xmath138 .",
    "the following lemma is the main structural lemma based on which we design our algorithm .",
    "[ lem : resolv ] let @xmath61 , where @xmath88 , be a nice tree decomposition of length at most @xmath93 of a connected graph @xmath3 such that @xmath62 is rooted in @xmath37 , @xmath139 .",
    "let @xmath140 be the max - degree of @xmath3 and let @xmath141 .",
    "then the following holds :    * if @xmath142 is an introduce node with the child @xmath79 and @xmath2 is the unique vertex of @xmath143 , then for any @xmath144 for a node @xmath145 such that @xmath146 , @xmath6 resolves @xmath2 and @xmath0 . *",
    "if @xmath142 is a join node with the children @xmath147 and @xmath148 for @xmath149 such that @xmath150 and @xmath151 , then @xmath6 or an arbitrary vertex @xmath152 resolves @xmath0 and @xmath1 .    to show i ) ,",
    "consider @xmath144 for some @xmath153 such that @xmath154 .",
    "as either @xmath155 or @xmath156 separates @xmath6 and @xmath0 , @xmath157 let @xmath158 and @xmath159 be vertices such that @xmath160 .",
    "then by lemma  [ lem : tree - dist ] , @xmath161 because @xmath162 and @xmath163 , @xmath164 because @xmath141 , we obtain that @xmath165 , completing the proof of the first statement .    to prove ii ) , let @xmath166 for @xmath167 such that @xmath168 , and let @xmath151 .",
    "assume also that @xmath169 .",
    "suppose that @xmath6 does not resolve @xmath0 and @xmath1 .",
    "it means that @xmath170 . because either @xmath155 or @xmath156 separates @xmath6 and @xmath171 , there are @xmath172 such that @xmath173 and @xmath174 . as @xmath170 and @xmath163 , @xmath175 notice that @xmath176 and @xmath177 , because @xmath163 .",
    "hence , @xmath178 . there are @xmath179 such that @xmath180 and @xmath181 . because @xmath182 , @xmath183 and @xmath184",
    "hence , @xmath185 since @xmath156 separates @xmath2 and @xmath1 , @xmath186 clearly , @xmath187 .",
    "hence , @xmath188 it remains to observe that @xmath189 , and we obtain that @xmath190 , i.e. , @xmath2 resolve @xmath0 and @xmath1 .",
    "having proved the necessary structural properties of graphs with bounded tree - length and max - degree , we proceed to set up some notation which will help us formally present our algorithm for metric dimension on such graphs .",
    "however , before we do so , we will give an informal description of the way we use the above lemma to design our algorithm .",
    "let @xmath77 be a node in the tree - decomposition ( see figure [ fig : tree - length ] ) and suppose that it is an introduce node where the vertex @xmath2 is introduced .",
    "the case when @xmath77 is a join node can be argued analogously by appropriate applications of the statements of lemma [ lem : resolv ] . since any vertex outside @xmath90 has at most @xmath191 possible distances to the vertices of @xmath156 , the resolution of any pair in @xmath90 by a vertex outside can be expressed in a ` bounded ' way .",
    "the same holds for a vertex in @xmath192 which resolves a pair in @xmath193 .",
    "the tricky part is when a vertex in @xmath90 resolves a pair with at least one vertex in @xmath90 .",
    "now , consider pairs of vertices in @xmath3 which are necessarily resolved by a vertex of the solution in @xmath90 .",
    "let @xmath194 be such a pair .",
    "now , for those pairs @xmath194 such that both are contained in @xmath195 , either @xmath2 resolves them or we may inductively assume that these resolutions have been handled during the computation for node @xmath79 .",
    "we now consider other possible pairs . now ,",
    "if @xmath196 is @xmath2 , then by lemma [ lem : resolv ] , if @xmath197 is in @xmath198 for any @xmath199 which is at a distance at least @xmath200 from @xmath77 , then this pair is trivially resolved by @xmath6 .",
    "therefore , any ` interesting pair ' containing @xmath2 is contained within a distance of @xmath200 from @xmath156 in the tree - decomposition induced on @xmath90 .",
    "however , due to lemma [ lem : path ] and the fact that @xmath3 has bounded degree , the number of such vertices which form an interesting pair with @xmath2 is bounded by a function of @xmath19 and @xmath93 . now , suppose that @xmath196 is in @xmath201 and @xmath197 is a vertex in @xmath202 and there is an introduce node on the path from @xmath77 to the root which introduces @xmath197 .",
    "then , if @xmath203 where @xmath199 is at a distance at least @xmath200 from @xmath77 , then this pair is trivially resolved by @xmath6 . by the same reasoning ,",
    "if the bag containing @xmath196 is within a distance of @xmath200 from @xmath77 then the node where @xmath197 is introduced must be within a distance of @xmath200 from @xmath77 .",
    "otherwise this pair is again trivially resolved by @xmath6 .",
    "again , there are only a bounded number of such pairs .",
    "finally , suppose that @xmath204 and @xmath197 is not introduced on a bag on the path from @xmath77 to the root .",
    "in this case , there is a join node , call it @xmath205 , on the path from @xmath77 to the root with children @xmath206 and @xmath207 such that @xmath206 lies on the path from @xmath77 to the root and @xmath197 is contained in @xmath208 . in this case , we can use statement @xmath209 of lemma [ lem : resolv ] to argue that if @xmath196 lies in @xmath198 where @xmath199 is at a distance at least @xmath200 from @xmath77 then it lies at a distance at least @xmath200 from @xmath205 and hence either @xmath6 or a vertex in @xmath210 resolves this and in the latter case , _ any _ arbitrary vertex achieves this .",
    "therefore , we simply compute solutions corresponding to both cases .",
    "otherwise , the bag containing @xmath196 lies at a distance at most @xmath200 from @xmath77 . in this case , if @xmath205 is at a distance greater than @xmath200 from @xmath77 then the previous argument based on statement @xmath209 still holds .",
    "therefore , it only remains to consider the case when @xmath205 is at a distance at most @xmath200 from @xmath77 .",
    "however , in this case , due to lemma [ lem : tree - dist ] , if @xmath6 does not resolve this pair , it must be the case that even @xmath197 lies in a bag which is at a distance at most @xmath200 from @xmath205 .",
    "hence , the number of such pairs is also bounded and we conclude that at any node @xmath77 of the dynamic program , the number of interesting pairs we need to consider is bounded by a function of @xmath19 and @xmath93 and hence we can perform a bottom up parse of the tree - decomposition and compute the appropriate solution values at each node .    . here",
    ", @xmath156 is an introduce node while @xmath211 is a join node . in this example , @xmath212 for statement @xmath209 of the lemma.,title=\"fig:\",width=200,height=300 ] [ fig : tree - length ]      let @xmath52 , and let @xmath213 be a positive integer such that @xmath214 . for a vertex @xmath9 , we say that @xmath215 , where @xmath216 is the _ projection _ of @xmath2 on @xmath16 .",
    "notice that @xmath217 form an ordered partition of @xmath16 ( some sets could be empty ) , because @xmath214 . for a set @xmath29 , the set @xmath218 ; notice that it can happen that @xmath219 for @xmath220 , but as @xmath221 is a set , it contains only one copy of @xmath222 .",
    "our algorithm uses the following properties of separators of bounded diameter . for the next two lemmas ,",
    "let @xmath16 be a separator of a connected graph @xmath3 such that @xmath214 , and let @xmath223 be a partition of the vertex set of @xmath224 such that no edge of @xmath3 joins a vertex of @xmath225 with a vertex of @xmath226 .",
    "[ lem : sep ] if for @xmath227 , @xmath228 , then @xmath6 resolves vertices @xmath229 if and only if @xmath2 resolves @xmath230 .",
    "moreover , for a given ordered partition @xmath217 of @xmath16 , it can be decided in polynomial time whether a vertex @xmath231 with @xmath215 resolves @xmath0 and @xmath1 .",
    "consider @xmath231 and @xmath232 . because @xmath16 separates @xmath2 and @xmath0 , @xmath233 therefore",
    ", @xmath231 resolves @xmath229 if and only if @xmath234 it immediately implies that if for @xmath227 , @xmath228 , then @xmath6 resolves vertices @xmath229 if and only if @xmath2 resolves @xmath230 . because for any @xmath232 , @xmath235 can be computed in polynomial time by making use of the dijkstra s algorithm if @xmath217 is given , we obtain the second part of the statement .",
    "this completes the proof of the lemma .",
    "let @xmath236 with @xmath214 .",
    "let @xmath217 be an ordered partition of @xmath16 .",
    "we define the ordered partition @xmath237 of @xmath238 as : @xmath239    @xmath240 for @xmath241 .",
    "we say that @xmath217 is a * @xmath213-cover * of @xmath237 _ with respect to @xmath225 _ , and we say that @xmath237 is * @xmath213-covered by * @xmath217 _ with respect to @xmath225_. we also say that a set @xmath242 of ordered partitions @xmath217 of @xmath16 is a * @xmath213-cover * of a set @xmath243 of ordered partition @xmath237 of @xmath238 _ with respect to @xmath225 _ , if @xmath243 is the set of all ordered partitions of @xmath238 that are @xmath213-covered by the partitions of @xmath242 .    clearly , for a given @xmath217 , @xmath237 can be constructed in polynomial time using , e.g. , the dijkstra s algorithm .",
    "[ lem : cover ] let @xmath236 with @xmath214 .",
    "let also @xmath217 and @xmath237 be ordered partitions of @xmath16 and @xmath238 respectively such that @xmath217 is a @xmath213-cover of @xmath237 with respect to @xmath225 .",
    "if @xmath215 for some @xmath231 , then @xmath244 .",
    "let @xmath231 and @xmath245 .",
    "suppose that @xmath215 .",
    "because @xmath16 separates @xmath2 and @xmath0 , @xmath246 hence , @xmath247 let @xmath248 let @xmath244 .",
    "we immediately obtain that @xmath249 for @xmath241 , i.e. , @xmath217 is a @xmath213-cover of @xmath237 with respect to @xmath225 .",
    "now we are ready to prove the main result of the section .",
    "[ thm : tl ] metric dimension is @xmath13 when parameterized by @xmath18 , where @xmath19 is the max - degree and @xmath20 is the tree - length of the input graph .",
    "let @xmath250 be an instance of metric dimension .",
    "recall that the tree - length of @xmath3 can be approximated in polynomial time within a factor of 3 by the results of dourisboure and gavoille  @xcite .",
    "hence , we assume that a tree - decomposition @xmath61 of length at most @xmath251 is given . by lemma  [ lem :",
    "width ] , the width of @xmath61 is at most @xmath252 .",
    "we consider at most @xmath12 choices of a vertex @xmath253 , and for each @xmath6 , we check the existence of a resolving set @xmath51 of size at most @xmath11 that includes @xmath6 .    from now on , we assume that @xmath253 is given .",
    "we use the techniques of kloks from  @xcite and construct from @xmath61 a nice tree decomposition of the same width and the length at most @xmath93 such that the root bag is @xmath254 . to simplify notations , we assume that @xmath61 is such a decomposition and @xmath62 is rooted in @xmath37 . by lemma  [ lem : path ] , for any path @xmath95 in @xmath62 , any @xmath96 occurs in at most @xmath136 bags @xmath156 for @xmath98 .",
    "we now design a dynamic programming algorithm over the tree decomposition that checks the existence of a resolving set of size at most @xmath11 that includes @xmath6 . for simplicity , we only solve the decision problem .",
    "however , the algorithm can be modified to find such a resolving set ( if exists ) .",
    "let @xmath141 . for @xmath67 , we define @xmath255}x_j$ ] and @xmath256 .",
    "let also @xmath257 . for each @xmath67 ,",
    "the algorithm constructs the table of values of the function @xmath258 , where    notice that @xmath3 has a resolving set @xmath51 of size at most @xmath11 if and only if the table for the root node @xmath37 has an entry @xmath259 .",
    "now we explain how we construct the table for each node @xmath67 .",
    "let @xmath67 .",
    "we define @xmath260 . for @xmath261 and @xmath262",
    "satisfying i ) and iii ) , @xmath263 where @xmath264 is a set of ordered partitions @xmath265 ( some sets could be empty ) of @xmath117 , is constructed as follows .",
    "let @xmath266 .",
    "* if @xmath199 is a leaf node of @xmath62 , then @xmath267 .",
    "* if @xmath199 is an introduce node of @xmath62 with the unique child @xmath268 , then @xmath264 is the set of ordered partitions @xmath269 of @xmath117 such that @xmath270 is an @xmath93-cover of @xmath264 with respect to @xmath271 . *",
    "if @xmath199 is a forget node of @xmath62 with the unique child @xmath268 and @xmath272 , then we first construct @xmath264 as the set of ordered partitions @xmath269 of @xmath117 such that @xmath270 is an @xmath93-cover of @xmath264 with respect to @xmath271 , and then we set @xmath273 if @xmath274 . * if @xmath199 is a join node of @xmath62 with the two children @xmath268 and @xmath275 , set @xmath276 .",
    "observe that given @xmath261 and @xmath262 , @xmath277 can be constructed in polynomial time .",
    "* construction for a leaf node .",
    "* let @xmath278 .",
    "then it is straightforward to verify that for any @xmath279 satisfying ii ) ( notice that @xmath280 ) , @xmath281 and @xmath282 .    to describe the construction for introduce ,",
    "forget and join nodes , assume that the tables are already constructed for the descendants of @xmath77 in @xmath56 .",
    "we also initiate the construction by setting @xmath283 for all @xmath261 and @xmath279 satisfying i)iii ) .    * construction for an introduce node .",
    "* let @xmath79 be the child of @xmath77 and @xmath284 .",
    "consider every @xmath261 and @xmath285 satisfying i)iii ) for the node @xmath79 such that @xmath286 .",
    "notice that @xmath287 .",
    "we construct @xmath288 and for @xmath289 , set @xmath290 .",
    "we consider two cases .    * case 1 . * set @xmath291 if @xmath292 .",
    "we consider every set @xmath293 of ordered partitions @xmath294 of @xmath156 that satisfies ii ) for the node @xmath77 such that @xmath293 is an @xmath93-cover of @xmath295 with respect to @xmath202 .",
    "we verify the following condition :    * condition ( @xmath296 ) .",
    "* for every @xmath297    * there is @xmath298 that resolves @xmath0 and @xmath2 , or * there is an ordered partition @xmath299 of @xmath156 such that a vertex @xmath300 with @xmath301 resolves @xmath0 and @xmath2 , or * there is an ordered partition @xmath302 of @xmath134 for @xmath303 such that a vertex @xmath304 with @xmath305 resolves @xmath0 and @xmath2 .",
    "notice , that by lemma  [ lem : sep ] , ( @xmath296 ) can be verified in polynomial time .",
    "if ( @xmath296 ) holds and @xmath306 , we set @xmath307 .    * case 2 . * set @xmath308 if @xmath309 .",
    "we consider every set @xmath293 of ordered partitions @xmath294 of @xmath156 that satisfies ii ) for the node @xmath77 such that @xmath293 is an @xmath93-cover of @xmath295 or @xmath310 with respect to @xmath202 .",
    "if @xmath311 , we set @xmath312 .",
    "having described the way the algorithm computes the table at an introduce node , we now argue the correctness .    [ [ proof - of - correctness - for - an - introduce - node . ] ] * proof of correctness for an introduce node . *",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to show correctness , assume that @xmath313 is the value of @xmath314 obtained by the algorithm and denote by @xmath315 the value of the function by the definition , i.e. , the the minimum cardinality of a set @xmath316 satisfying iv)vi ) .",
    "we also assume inductively that the values of @xmath317 are computed correctly .",
    "we prove first that @xmath318 for @xmath319 and and @xmath320 satisfying i)iii ) for the node @xmath77 .",
    "if @xmath321 , then the inequality holds trivially . let @xmath322 .",
    "then the value @xmath313 is obtained as described above for some @xmath261 , @xmath285 satisfying i)iii ) for the node @xmath79 , and @xmath293 satisfying ii ) for the node @xmath77 . clearly , @xmath323 . by induction , @xmath324 is the minimum cardinality of a set @xmath325 satisfying iv)vi ) for the node @xmath79 .",
    "let @xmath326 .    to show that iv ) holds for @xmath327 , consider distinct @xmath328 .    if @xmath329 , then there is a vertex @xmath330 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath265 of @xmath331 such that a vertex @xmath332 with @xmath333 resolves @xmath0 and @xmath1 . by lemmas  [ lem : sep ] and [ lem :",
    "cover ] , if there is an ordered partition @xmath265 of @xmath331 such that a vertex @xmath334 with @xmath333 resolves @xmath0 and @xmath1 , then there is an ordered partition @xmath294 of @xmath335 that @xmath93-covers @xmath265 with respect to @xmath202 and we have that a vertex @xmath336 with @xmath337 resolves @xmath0 and @xmath1 , or @xmath274 resolves @xmath0 and @xmath1 if @xmath338 .",
    "assume that @xmath339 and @xmath340 .",
    "if @xmath341 , then @xmath2 resolves @xmath0 and @xmath1 .",
    "suppose that @xmath342 , i.e , the value of @xmath313 was obtained in case  1 .",
    "if @xmath343 for @xmath344 , then @xmath0 and @xmath1 are resolved by @xmath6 by lemma  [ lem : resolv ] .",
    "let @xmath345 . by ( @xmath296 ) , there is @xmath298 that resolves @xmath1 and @xmath2 , or there is an ordered partition @xmath299 of @xmath156 such that a vertex @xmath300 with @xmath301 resolves @xmath1 and @xmath2 , or there is an ordered partition @xmath346 of @xmath134 for @xmath347 such that a vertex @xmath304 with @xmath305 resolves @xmath1 and @xmath2 .",
    "it remains to observe that in the last case there is @xmath304 with @xmath305 such that @xmath348 , because v ) holds for @xmath51 .",
    "clearly , @xmath349 by the definition , i.e. , v ) is fulfilled .    by the definition of @xmath350 and lemma  [",
    "lem : cover ] , we obtain that for @xmath289 , @xmath351 and vi ) is satisfied .    hence , @xmath327 satisfies iv)vi ) for the node @xmath77 and , therefore , @xmath352 .",
    "now we prove that @xmath353 .    if @xmath354 , then the inequality holds .",
    "assume that for @xmath319 , @xmath355 satisfying i)iii ) for the node @xmath77 , @xmath356 . then there is @xmath357 satisfying iv)vi ) for the node @xmath77 and @xmath358 .",
    "let @xmath359 and @xmath360 .",
    "we construct @xmath295 as the set of ordered partitions of @xmath331 such that @xmath295 is @xmath93-covered by @xmath293 and add @xmath361 to this set if @xmath362 . for @xmath363 , @xmath364 .",
    "it is straightforward to see that @xmath261 and @xmath285 satisfy i)iii ) for the node @xmath79 . by the construction and lemma  [ lem :",
    "cover ] , @xmath51 satisfies iv)vi ) for the node @xmath79 and the constructed @xmath261 and @xmath285 .",
    "hence , @xmath365 .",
    "we claim that if @xmath342 , then ( @xmath296 ) is fulfilled .",
    "because iv ) is fulfilled for @xmath327 , for any @xmath297 , there is a vertex @xmath330 that resolves @xmath2 and @xmath0 or there is an ordered partition @xmath366 of @xmath156 such that a vertex @xmath367 with @xmath368 resolves @xmath2 and @xmath135 .",
    "it is sufficient to notice that if @xmath330 that resolves @xmath2 and @xmath0 and @xmath369 , then @xmath370 for @xmath371 and , therefore , @xmath372 .",
    "it remains to observe that the value of @xmath313 constructed by the algorithm for @xmath261 , @xmath285 and @xmath293 is at most @xmath373 .    * construction for a forget node .",
    "* let @xmath79 be the child of @xmath77 and @xmath374 . consider every @xmath261 and @xmath285 satisfying i)iii ) for the node @xmath79 such that @xmath286 .",
    "recall that @xmath287 .",
    "we construct @xmath288 and for @xmath289 , set @xmath290 .",
    "we set @xmath291 .",
    "we consider every set @xmath293 of ordered partitions @xmath294 of @xmath156 that satisfies ii ) for the node @xmath77 such that @xmath293 is an @xmath93-cover of @xmath295 with respect to @xmath202 .",
    "if @xmath306 , we set @xmath307 .",
    "correctness is proved in the same way as for the construction for an introduce node .",
    "notice that the arguments , in fact , become simpler , because @xmath375 .    * construction for a join node . *",
    "let @xmath79 and @xmath84 be the children of @xmath77 .",
    "recall that @xmath85 .",
    "consider every @xmath376 and @xmath377 satisfying i)iii ) for the node @xmath79 such that @xmath378 and every @xmath379 and @xmath380 satisfying i)iii ) for the node @xmath84 such that @xmath381 with the property that @xmath382 .",
    "we set @xmath383 .    for every @xmath363",
    ", we construct the set @xmath384 of ordered partitions @xmath265 of @xmath156 such that @xmath385 is an @xmath93-cover of @xmath384 , and set @xmath386 similarly , for every @xmath387 , we construct the set @xmath384 of ordered partitions @xmath265 of @xmath156 such that @xmath388 is an @xmath93-cover of @xmath389 , and set @xmath390 we consider every set @xmath295 of the ordered partitions @xmath265 of @xmath156 that satisfy ii ) for the node @xmath77 such that @xmath391 and @xmath392 .    notice that @xmath393 .",
    "we construct @xmath394 and @xmath395 .",
    "we define @xmath279 by setting @xmath396 for @xmath397 .",
    "we verify the following conditions :    * condition ( @xmath398 ) .",
    "* for every @xmath399 and @xmath400 ,    * there is @xmath274 that resolves @xmath0 and @xmath1 , or * there is an ordered partition @xmath366 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 , or * there is an ordered partition @xmath401 of @xmath117 for @xmath344 such that @xmath402 and a vertex @xmath403 with @xmath404 resolves @xmath0 and @xmath1 , or * @xmath405 for @xmath344 and @xmath406 , or * @xmath343 for @xmath344 and @xmath406 .",
    "notice , that by lemma  [ lem : sep ] , ( @xmath398 ) can be verified in polynomial time .",
    "if ( @xmath398 ) holds and @xmath407 , we set @xmath408 .    [ [ correctness - for - join - nodes . ] ] * correctness for join nodes . * + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to show correctness , assume that @xmath409 is the value of @xmath314 obtained by the algorithm and denote by @xmath410 the value of the function by the definition , i.e. , the the minimum cardinality of a set @xmath316 satisfying iv)vi ) .",
    "we also assume inductively that the values of @xmath317 and @xmath411 are computed correctly .",
    "we show first that @xmath412 for @xmath261 and and @xmath413 satisfying i)iii ) for the node @xmath77 .    if @xmath414 , then the inequality trivially holds .",
    "let @xmath415 .",
    "then the value @xmath409 is obtained as described above for some @xmath376 , @xmath377 satisfying i)iii ) for the node @xmath79 , @xmath379 , @xmath380 satisfying i)iii ) for the node @xmath84 and @xmath295 satisfying ii ) for the node @xmath77 . by induction , @xmath416 is the minimum cardinality of a set @xmath417 satisfying iv)vi ) for the node @xmath79 and @xmath418 is the minimum cardinality of a set @xmath419 satisfying iv)vi ) for the node @xmath84 .",
    "let @xmath420 .    to show that iv ) holds for @xmath51 , consider distinct @xmath328 .",
    "suppose that @xmath329 . because iv ) holds for @xmath421 and the node @xmath79",
    ", there is a vertex @xmath422 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath423 of @xmath331 such that a vertex @xmath334 with @xmath368 resolves @xmath0 and @xmath1 . if there is a vertex @xmath422 that resolves @xmath0 and @xmath1 , then @xmath50 resolve @xmath0 and @xmath1 .",
    "suppose that there is an ordered partition @xmath423 of @xmath331 such that a vertex @xmath334 with @xmath368 resolves @xmath0 and @xmath1 .",
    "recall that @xmath391 . if @xmath366 , then iv ) holds .",
    "let @xmath424 .",
    "then there is @xmath425 such that @xmath426 and @xmath2 resolves @xmath0 and @xmath1 , or there is @xmath427 for @xmath387 such that @xmath428 . in the last case , there is a vertex @xmath429 that resolves @xmath0 and @xmath1 by lemmas  [ lem : sep ] and [ lem : cover ] .    clearly , the case @xmath430 is symmetric .",
    "assume that @xmath431 and @xmath151 .",
    "recall that ( @xmath398 ) is fulfilled .",
    "if there is @xmath274 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath366 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 , then @xmath0 and @xmath1 are resolved by @xmath432 .",
    "if there is an ordered partition @xmath401 of @xmath117 for @xmath344 such that @xmath402 and a vertex @xmath403 with @xmath404 resolves @xmath0 and @xmath1 , then there is such @xmath50 and we again obtain that @xmath0 and @xmath1 are resolved by a vertex of @xmath51 .",
    "suppose that the first three conditions of ( @xmath398 ) are not fulfilled for @xmath0 and @xmath1 .",
    "then @xmath405 for @xmath344 and @xmath406 or @xmath343 for @xmath344 and @xmath406 .",
    "if @xmath405 for @xmath344 and @xmath406 , then there is @xmath50 such that @xmath403 . by lemma  [ lem : resolv ] @xmath6 or @xmath2 resolve @xmath0 and @xmath1 .",
    "then case @xmath343 for @xmath344 and @xmath406 is symmetric .",
    "we have that @xmath433 by the definition , i.e. , v ) is fulfilled .    by the definition of @xmath350 , @xmath350 and lemma  [ lem : cover ] ,",
    "we obtain that for @xmath289 , @xmath434 and vi ) is satisfied .",
    "hence , @xmath51 satisfies iv)vi ) for the node @xmath77 and , therefore , @xmath435 .",
    "now we prove that @xmath436 .    if @xmath437 , then the inequality holds .",
    "assume that for @xmath261 , @xmath285 satisfying i)iii ) for the node @xmath77 , @xmath438 . then there is @xmath316 satisfying iv)vi ) for the node @xmath77 and @xmath439 .",
    "let @xmath440 and @xmath441 .",
    "we define @xmath442 and @xmath443 . for @xmath363 , @xmath444 , and for @xmath387 , @xmath445 .",
    "it is straightforward to see that @xmath376 , @xmath377 and @xmath379 , @xmath380 satisfy i)iii ) for the nodes @xmath79 and @xmath84 respectively .    to prove that @xmath421 satisfies iv)vi ) for the node @xmath79 and the constructed @xmath376 @xmath377",
    ", it is sufficient to verify iv ) , as v ) and vi ) are straightforward .",
    "let @xmath446 . there is a vertex @xmath50 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath366 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 . if there is @xmath422 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath447 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 , then we obtain iv ) for @xmath0 and @xmath1 .",
    "assume that there is @xmath448 that resolves @xmath0 and @xmath1 .",
    "then @xmath449 and we have that there is an ordered partition @xmath423 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 .    we obtain that @xmath421 satisfies iv)vi ) for the node @xmath79 and the constructed @xmath376 @xmath377 and , by the same arguments , @xmath450 satisfies iv)vi ) for the node @xmath84 and the constructed @xmath379 @xmath380 .",
    "hence , @xmath451 and @xmath452 .",
    "now we show that ( @xmath398 ) is fulfilled .",
    "let @xmath399 and @xmath400 .",
    "then there is @xmath50 that resolves @xmath0 and @xmath1 or there is an ordered partition @xmath366 of @xmath156 such that a vertex @xmath336 with @xmath368 resolves @xmath0 and @xmath1 . in the last case ( @xmath398 )",
    "holds for @xmath0 and @xmath1 .",
    "also we have the condition if @xmath274 .",
    "assume that @xmath453 .",
    "then @xmath403 for some @xmath289 .",
    "if @xmath454 , then we have the property that a vertex @xmath403 with @xmath404 resolves @xmath0 and @xmath1 .",
    "assume that @xmath455 or @xmath343 .",
    "then we have that @xmath406 or @xmath406 respectively .",
    "therefore , ( @xmath398 ) holds .    it remains to observe that the value of @xmath409 constructed by the algorithm for @xmath376 , @xmath377 , satisfying i)iii ) for the node @xmath79 , @xmath379 , @xmath380 and @xmath295 is at most @xmath456 .",
    "it completes the correction proof for a join node and , therefore , we have that the algorithm correctly constructs the tables of values of @xmath409 .    [ [ running - time - analysis . ] ] * running time analysis . * + + + + + + + + + + + + + + + + + + + + + + + +    we now analyze the running time of the dynamic programming algorithm . for this , we give the following upper bound on the size of each table .",
    "let @xmath67 .",
    "we have that @xmath457 .",
    "we also have that @xmath458 .",
    "hence , @xmath459 , and there is at most @xmath460 possibilities to choose @xmath261 .",
    "we have that @xmath461 .",
    "the number of all ordered partitions @xmath265 of any @xmath117 is at most @xmath462 .",
    "hence , the table for the node @xmath77 contains at most @xmath463 values of the function @xmath409 .    as the number of ordered partitions @xmath265 of @xmath156 is at most @xmath464",
    ", we obtain that each table can be constructed in time @xmath465 then the total running time of the dynamic programming algorithm is @xmath466 .    since preliminary steps of our algorithm for metric dimension can be executed in polynomial time and we run the dynamic programming algorithm for at most @xmath12 choices of @xmath6 , the total running time is @xmath466 .",
    "in this section we prove that the metric dimension can be computed in linear time for graphs of bounded modular - width .",
    "let @xmath16 be a module of a graph @xmath3 and @xmath53 .",
    "then the distances in @xmath3 between @xmath2 and the vertices of @xmath16 are the same .",
    "this observation immediately implies the following lemma .",
    "[ lem : mw ] let @xmath467 be a module of a connected graph @xmath3 and @xmath468 .",
    "let also @xmath469 be a graph obtained from @xmath470 $ ] by the addition of a universal vertex .",
    "then any @xmath9 resolving @xmath471 is a vertex of @xmath16 , and if @xmath7 is a resolving set of @xmath3 , then @xmath472 resolves @xmath16 in @xmath469 .",
    "[ thm : mw ] the metric dimension of a connected graph @xmath3 of modular - width at most @xmath56 can be computed in time @xmath473 .    to compute @xmath10 , we consider auxiliary values @xmath474 defined for a ( not necessarily connected ) graph @xmath469 of modular - width at most @xmath56 with at least two vertices and boolean variables @xmath475 and @xmath476 as follows .",
    "let @xmath477 be the graph obtained from @xmath469 by the addition of a universal vertex @xmath6 .",
    "notice that @xmath478 .",
    "then @xmath474 the minimum size of a set @xmath479 such that    * @xmath51 resolves @xmath480 in @xmath477 , * @xmath469 has a vertex @xmath0 such that @xmath481 for every @xmath50 if and only if @xmath482 , and * @xmath469 has a vertex @xmath0 such that @xmath483 for every @xmath50 if and only if @xmath484 .",
    "we assume that @xmath485 if such a set does not exists .",
    "the intuition behind the definition of the function @xmath486 is as follows .",
    "let @xmath16 be a module in the graph @xmath3 , @xmath487 $ ] and let @xmath488 be the partition of @xmath469 into modules , of which @xmath489 are trivial .",
    "let @xmath261 be a hypothetical optimal resolving set and let @xmath490 .",
    "by lemma [ lem : mw ] , we know that every pair of vertices in @xmath469 must be resolved by a vertex in @xmath491 . therefore , we need to compute a set which , amongst satisfying other properties must be a resolving set for the vertices in @xmath16 .",
    "however , since these vertices are all in the same module and @xmath3 is connected , any pair of vertices are either adjacent or at a distance exactly 2 in @xmath3 .",
    "hence , we ask for @xmath51 ( condition ( i ) ) to be a resolving set of @xmath480 in @xmath477 , the graph obtained by adding a universal vertex to @xmath469 .",
    "further , it could be the case that a vertex @xmath135 in @xmath491 is required to resolve a pair of vertices , one contained in @xmath16 say @xmath0 and the other disjoint from @xmath16 , say @xmath1 . now , if @xmath0 is at a distance 1 in @xmath3 ( and hence @xmath477 ) from every vertex in @xmath491 then for any vertex @xmath492 which is also at a distance exactly 1 from every vertex of @xmath491 , @xmath135 is also required to resolve @xmath493 and @xmath1 .",
    "the same argument holds for vertices at distance exactly 2 from every vertex of @xmath491 .",
    "therefore , in order to keep track of such resolutions , it suffices to know _ whether _ exists a vertex in @xmath16 which is at a distance exactly 1 ( respectively 2 ) from every vertex of @xmath491 .",
    "this is precisely what is captured by the boolean variables @xmath475 and @xmath476 .",
    "recall that since @xmath469 has modular - width at most @xmath56 , it can be constructed from single vertex graphs by the disjoint union and join operation and decomposing @xmath469 into at most @xmath56 modules and @xmath469 has at least two vertices . in the rest of the proof , we we formally describe our algorithm to compute @xmath474 given the modular decomposition of @xmath469 and the values computed for the ` child ' nodes .",
    "as the base case corresponds to graphs of size at most @xmath56 we may compute the values for the leaf nodes by brute force and execute a bottom up dynamic program .",
    "[ [ description - of - the - algorithm . ] ] * description of the algorithm . * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    we begin the description of the algorithm by first considering the cases when @xmath469 is the disjoint union or join of a pair of graphs . following that , we consider the case when @xmath469 can be partitioned into at most @xmath56 graphs , each of modular - width at most @xmath56 .",
    "although the third case subsumes the first 2 , we address these 2 cases explicitly for a clearer understanding of the algorithm .    * case  1 .",
    "* @xmath469 is a disjoint union of @xmath494 and @xmath495 .",
    "assume without loss of generality that @xmath496 .    if @xmath497 , then it is straightforward to verify that @xmath498 , @xmath499 and @xmath500 .",
    "suppose that @xmath501 , @xmath502 and the values of @xmath503 are already computed for @xmath504 .",
    "clearly , the single vertex of @xmath494 is at distance 2 from any vertex of @xmath495 in @xmath477 . observe that we have two possibilities of the vertex of @xmath494 : it is either in a resolving set or not .",
    "then by lemma  [ lem : mw ] ,    * @xmath505 , * @xmath506 , * @xmath507 , * @xmath508 .",
    "suppose that @xmath509 and the values of @xmath510 are already computed for @xmath511 and @xmath504 .",
    "notice that for @xmath512 and @xmath513 , @xmath514 .",
    "observe also that any resolving set has at least one vertex in @xmath494 and at least one vertex in @xmath495 .",
    "then by lemma  [ lem : mw ] ,    * @xmath515 , * @xmath516 , * @xmath507 , * @xmath517 .    * case  2 . *",
    "@xmath469 is a join of @xmath494 and @xmath495 .",
    "assume without loss of generality that @xmath496 .    if @xmath497 , then it is straightforward to verify that @xmath518 , @xmath499 and @xmath519 .",
    "suppose that @xmath501 , @xmath502 and the values of @xmath503 are already computed for @xmath504 . clearly , the single vertex of @xmath494 is at distance 1 from any vertex of @xmath495 in @xmath477 , and this single vertex is in a resolving set or not .",
    "then by lemma  [ lem : mw ] ,    * @xmath520 , * @xmath521 , * @xmath522 , * @xmath523 .",
    "suppose that @xmath509 and the values of @xmath510 are already computed for @xmath511 and @xmath504 . notice that for @xmath512 and @xmath513 , @xmath524 , and any resolving set has at least one vertex in @xmath494 and at least one vertex in @xmath495 .",
    "then by lemma  [ lem : mw ] ,    * @xmath515 , * @xmath521 , * @xmath525 , * @xmath526 .",
    "of width 5 . here , @xmath469 is partitioned into 4 modules @xmath527 where each module is a prime graph.,title=\"fig:\",width=360,height=144 ] [ fig : modular - width ]    * case  3 .",
    "* @xmath480 is partitioned into @xmath57 non - empty modules @xmath58 , @xmath528 ( see for example figure [ fig : modular - width ] ) .",
    "again we point out that , cases  1 and 2 can be seen as special cases of case  3 , but we keep cases  1 and 2 to make the algorithm for computing @xmath474 more clear .",
    "we assume that @xmath529 are _ trivial _ , i.e , @xmath78 for @xmath530 ; it can happen that @xmath531 . clearly , for distinct @xmath532 , either",
    "every vertex of @xmath156 is adjacent to every vertex of @xmath117 or the vertices of @xmath156 and @xmath117 are not adjacent .",
    "consider the _",
    "graph @xmath108 with a vertex set @xmath533 such that @xmath534 is adjacent to @xmath535 if and only if the vertices of @xmath156 are adjacent to the vertices of @xmath117 for distinct @xmath532 .",
    "let @xmath536 be the graph obtained from @xmath108 by the addition of a universal vertex .",
    "observe that if @xmath127 and @xmath128 for distinct @xmath532 , then @xmath537 .    for boolean variables @xmath538 , a set of indices @xmath539 and boolean variables @xmath540 , where @xmath541 , we define @xmath542,p_i , q_i)\\ ] ] if the following holds :    * the set @xmath543 resolves @xmath544 in @xmath536 , * if @xmath545 for some @xmath541 , then for each @xmath546 , @xmath547 or there is @xmath548 such that @xmath549 and @xmath550 , * if @xmath551 for some @xmath541 , then for each @xmath546 , @xmath552 or there is @xmath548 such that @xmath549 and @xmath550 , * if @xmath553 for some distinct @xmath554 , then @xmath547 or there is @xmath548 such that @xmath549 and @xmath550 , * if @xmath555 for some distinct @xmath554 , then @xmath552 or there is @xmath548 such that @xmath549 and @xmath550 , * @xmath482 if and only if there is @xmath556 such that @xmath552 for @xmath557 or there is @xmath541 such that @xmath545 and @xmath552 for @xmath558 , * @xmath484 if and only if there is @xmath556 such that @xmath547 for @xmath557 or there is @xmath541 such that @xmath551 and @xmath547 for @xmath558 ;    and @xmath559 in all other cases .",
    "we claim that @xmath560 where the minimum is taken over all @xmath539 and @xmath561 for @xmath541 .",
    "first , we show that @xmath562 . if @xmath485 , then the inequality trivially holds .",
    "let @xmath563 .",
    "then there is a set",
    "@xmath479 om minimum size such that    * @xmath51 resolves @xmath480 in @xmath477 , * @xmath469 has a vertex @xmath0 such that @xmath481 for every @xmath50 if and only if @xmath482 , and * @xmath469 has a vertex @xmath0 such that @xmath483 for every @xmath50 if and only if @xmath484 .    by the definition , @xmath564 .",
    "let @xmath565 for @xmath60 .",
    "let @xmath566 . notice that @xmath567 for @xmath541 by lemma  [ lem : mw ] .",
    "for @xmath541 , let @xmath545 if there is a vertex @xmath127 such that @xmath568 for @xmath569 , and let @xmath551 if there is a vertex @xmath127 such that @xmath570 for @xmath569 .    by lemma  [ lem : mw ] , @xmath571 resolves @xmath156 in the graph obtained from @xmath572 $ ] by the addition of a universal vertex for @xmath541 .",
    "hence , @xmath573,p_i , q_i)$ ] for @xmath541 and , therefore , @xmath574,p_i , q_i)$ ] .",
    "we show that a)g ) are fulfilled for @xmath104 and the defined values of @xmath540 .    to show a ) , consider distinct vertices @xmath575 of @xmath108 . if @xmath576 or @xmath557 , then it is straightforward to see that @xmath261 resolves @xmath534 and @xmath535 .",
    "suppose that @xmath577 .",
    "then @xmath578 are trivial modules with the unique vertices @xmath0 and @xmath1 respectively . because @xmath51 resolves @xmath480 , there is @xmath579 such that @xmath580 .",
    "consider the set @xmath581 containing @xmath6 .",
    "it remains to observe that @xmath582 resolves @xmath534 and @xmath535 , because @xmath583 .    to prove b ) , assume that @xmath545 for some @xmath541 and consider @xmath546 .",
    "suppose that @xmath584 , i.e. , @xmath552 .",
    "then @xmath156 has a vertex @xmath0 adjacent to all the vertices of @xmath571 .",
    "let @xmath1 be the unique vertex of @xmath117 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath585 .",
    "if @xmath155 , then we have that @xmath586 ; a contradiction .",
    "hence , @xmath587 . let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath589 .",
    "similarly , to obtain c ) , assume that @xmath551 for some @xmath541 and consider @xmath546 .",
    "suppose that @xmath590 , i.e. , @xmath547 . then @xmath156 has a vertex @xmath0 at distance 2 from all the vertices of @xmath571 .",
    "let @xmath1 be the unique vertex of @xmath117 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath585 .",
    "if @xmath155 , then we have that @xmath591 ; a contradiction . hence , @xmath587 . let @xmath588 be the module containing @xmath6",
    ". then we have that @xmath589 .    to show d ) , suppose that @xmath553 for some distinct @xmath554 and assume that @xmath584 , i.e. , @xmath552 .",
    "then @xmath156 has a vertex @xmath0 adjacent to all the vertices of @xmath571 and @xmath117 has a vertex @xmath1 adjacent to all the vertices of @xmath592 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath585 .",
    "if @xmath155 , then we have that @xmath593 ; a contradiction .",
    "hence , @xmath587 . by the same arguments , @xmath594 .",
    "let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath589 .    to prove e ) , suppose that @xmath555 for some distinct @xmath554 and assume that @xmath590 , i.e. , @xmath547 .",
    "then @xmath156 has a vertex @xmath0 at distance 2 to all the vertices of @xmath571 and @xmath117 has a vertex @xmath1 at distance 2 to all the vertices of @xmath592 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath585 .",
    "if @xmath155 , then we have that @xmath593 ; a contradiction . hence , @xmath587 . by the same arguments , @xmath594 .",
    "let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath589 .    to see f ) , recall that @xmath482 if and only if @xmath480 has a vertex @xmath0 that is adjacent to all the vertices of @xmath51 .",
    "suppose that @xmath480 has a vertex @xmath0 that is adjacent to all the vertices of @xmath51 . if @xmath127 for @xmath556 , then @xmath552 for @xmath557 .",
    "if @xmath127 for @xmath541 , then @xmath545 and @xmath552 for @xmath558 .",
    "suppose that there is @xmath556 such that @xmath552 for @xmath557 or there is @xmath541 such that @xmath545 and @xmath552 for @xmath558 .",
    "if there is @xmath556 such that @xmath552 for @xmath557 , then the unique vertex @xmath0 of @xmath156 is at distance 1 from all the vertices of @xmath51 and @xmath482 . if there is @xmath541 such that @xmath545 , then there is @xmath127 at distance 1 from each vertex of @xmath571 . if @xmath552 for @xmath558 , then @xmath0 at distance 1 from the vertices @xmath595 and , therefore , @xmath482 .",
    "similarly , to prove g ) , recall that @xmath484 if and only if @xmath480 has a vertex @xmath0 that is at distance 2 from every vertex of @xmath51 .",
    "suppose that @xmath480 has a vertex @xmath0 that is at distance 2 from all the vertices of @xmath51 . if @xmath127 for @xmath556 , then @xmath547 for @xmath557 .",
    "if @xmath127 for @xmath541 , then @xmath551 and @xmath547 for @xmath558 .",
    "suppose that there is @xmath556 such that @xmath547 for @xmath557 or there is @xmath541 such that @xmath551 and @xmath547 for @xmath558 .",
    "if there is @xmath556 such that @xmath547 for @xmath557 , then the unique vertex @xmath0 of @xmath156 is at distance 2 from all the vertices of @xmath51 and @xmath484 . if there is @xmath541 such that @xmath551 , then there is @xmath127 at distance 2 from each vertex of @xmath571 . if @xmath547 for @xmath558 , then @xmath0 at distance 2 from the vertices @xmath595 and , therefore , @xmath484 .",
    "because a)g ) are fulfilled , @xmath596,p_i , q_i)=\\omega(p , q , i , p_{h+1},q_{h+2},\\ldots , p_s , q_s)$ ] and the claim follows .",
    "now we show that @xmath597 .",
    "assume that @xmath104 and the values of @xmath598 are chosen in such a way that @xmath599 has the minimum possible value .",
    "if @xmath600 , then , trivially , we have that @xmath601 .",
    "suppose that @xmath602 .",
    "then @xmath603,p_i , q_i)$ ] and a)g ) are fulfilled for @xmath538 , @xmath104 and the values of @xmath598 .",
    "notice that @xmath604,p_i , q_i)<+\\infty$ ] for @xmath541 . for @xmath541 ,",
    "let @xmath605 be a set om minimum size such that    * @xmath571 resolves @xmath156 in the graph @xmath606 obtained from @xmath572 $ ] by the addition of a universal vertex , * @xmath156 has a vertex @xmath0 such that @xmath607 for every @xmath608 if and only if @xmath545 , and * @xmath156 has a vertex @xmath0 such that @xmath609 for every @xmath608 if and only if @xmath551 .    by the definition , @xmath604,p_i , q_i)=|w_i|$ ] for @xmath541 .",
    "let @xmath610 we have that @xmath611 .",
    "we claim @xmath51 is a resolving set for @xmath480 in @xmath477 .",
    "let @xmath230 be distinct vertices of @xmath469 .",
    "we show that there is a vertex @xmath6 in @xmath51 that resolves @xmath0 and @xmath1 in @xmath477 . clearly , it is sufficient to prove it for @xmath612 .",
    "let @xmath156 and @xmath117 be the modules that contain @xmath0 and @xmath1 respectively .",
    "if @xmath613 , then a vertex @xmath569 resolves @xmath0 and @xmath1 in @xmath614 and , therefore , @xmath6 resolves @xmath0 and @xmath1 in @xmath477 .",
    "suppose that @xmath615 .",
    "assume first that @xmath616 .",
    "then @xmath577 , because @xmath529 are trivial . by a )",
    ", @xmath261 resolves @xmath544 in @xmath536 .",
    "hence , there is @xmath548 such that @xmath550 .",
    "notice that @xmath617 by the definition of @xmath581 and @xmath261 .",
    "let @xmath618 .",
    "we have that @xmath619 .",
    "let now @xmath541 and @xmath620 .",
    "if there are @xmath621 such that @xmath622 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath625 .",
    "assume that all the vertices of @xmath571 are at the same distance from @xmath0 in @xmath614 .",
    "let @xmath569 .",
    "if @xmath626 , then @xmath545 and , by b ) , @xmath547 or there is @xmath548 such that @xmath549 and @xmath550 .",
    "if @xmath547 , then @xmath6 resolves @xmath0 and @xmath1 , as @xmath627 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .",
    "similarly , if @xmath629 , then @xmath551 and , by c ) , @xmath552 or there is @xmath548 such that @xmath549 and @xmath550 .",
    "if @xmath552 , then @xmath6 resolves @xmath0 and @xmath1 , as @xmath630 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .",
    "finally , let @xmath631 .",
    "if there are @xmath621 such that @xmath622 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath625 . by the same arguments , if there are @xmath632 such that @xmath633 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 .",
    "assume that all the vertices of @xmath571 are at the same distance from @xmath0 in @xmath614 and all the vertices of @xmath592 are at the same distance from @xmath1 in @xmath634 .",
    "let @xmath635 and @xmath636 . if @xmath637 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath638 .",
    "suppose that @xmath639 .",
    "then @xmath553 and , by d ) , @xmath547 or there is @xmath548 such that @xmath549 and @xmath550 .",
    "if @xmath547 , then @xmath623 resolves @xmath0 and @xmath1 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 . if @xmath640 , then @xmath555 and , by d ) , @xmath552 or there is @xmath548 such that @xmath549 and @xmath550 . if @xmath552 , then @xmath623 resolves @xmath0 and @xmath1",
    "otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .    by f ) , @xmath482 if and only if there is @xmath556 such that @xmath552 for @xmath557 or there is @xmath541 such that @xmath545 and @xmath552 for @xmath558 . if there is @xmath556 such that @xmath552 , then the unique vertex @xmath127 is at distance 1 from any vertex of @xmath51 .",
    "if there is @xmath541 such that @xmath545 and @xmath552 for @xmath558 , then there is a vertex @xmath127 at distance 1 from each vertex of @xmath571 , because @xmath545 , and as @xmath552 for @xmath558 , @xmath0 is at distance 1 from any vertex of @xmath595 .",
    "suppose that there is a vertex @xmath641 at distance 1 from each vertex of @xmath51 .",
    "let @xmath156 be the module containing @xmath0 .",
    "if @xmath530 , then @xmath556 and @xmath552 for @xmath557 . hence ,",
    "@xmath482 . if @xmath541 , then @xmath545 , because @xmath0 is at distance 1 from the vertices of @xmath571 . because @xmath0 is at distance 1 from the vertices of @xmath595 , @xmath552 for @xmath558 . therefore , @xmath482 .    similarly , by g ) , @xmath484 if and only if there is @xmath556 such that @xmath547 for @xmath557 or there is @xmath541 such that @xmath551 and @xmath547 for @xmath558 .",
    "if there is @xmath556 such that @xmath547 , then the unique vertex @xmath127 is at distance 2 from any vertex of @xmath51 . if there is @xmath541 such that @xmath551 and @xmath547 for @xmath558 , then there is a vertex @xmath127 at distance 2 from each vertex of @xmath571 , because @xmath551 , and as @xmath547 for @xmath558 , @xmath0 is at distance 2 from any vertex of @xmath595 .",
    "suppose that there is a vertex @xmath641 at distance 2 from each vertex of @xmath51 .",
    "let @xmath156 be the module containing @xmath0 .",
    "if @xmath530 , then @xmath556 and @xmath547 for @xmath557 .",
    "hence , @xmath484 .",
    "if @xmath541 , then @xmath551 , because @xmath0 is at distance 2 from the vertices of @xmath571 . because @xmath0 is at distance 2 from the vertices of @xmath595 , @xmath547 for @xmath558",
    "therefore , @xmath484 .",
    "we conclude that    * @xmath51 resolves @xmath480 in @xmath477 , * @xmath469 has a vertex @xmath0 such that @xmath481 for every @xmath50 if and only if @xmath482 , and * @xmath469 has a vertex @xmath0 such that @xmath483 for every",
    "@xmath50 if and only if @xmath484 .    therefore , @xmath642 .",
    "this concludes case  3 .",
    "our next aim is to explain how to compute @xmath10 .",
    "recall that @xmath3 is a connected graph of modular - width at most @xmath56 .",
    "hence , @xmath3 is either a single - vertex graph , or is a join of two graphs @xmath494 and @xmath495 of modular - width at most @xmath56 , or @xmath26 can be partitioned into @xmath57 modules @xmath58 such that @xmath59)\\leq t$ ] for @xmath60 .",
    "* case  1 .",
    "* @xmath643 .",
    "it is straightforward to see that @xmath644 .    * case  2 .",
    "* @xmath3 is a join of @xmath494 and @xmath495 .",
    "assume without loss of generality that @xmath496 .",
    "if @xmath497 , then @xmath644 .",
    "suppose that @xmath501 , @xmath502 and the values of @xmath503 are already computed for @xmath504 . clearly , the single vertex of @xmath494 is at distance 1 from any vertex of @xmath495 in @xmath3 , and this single vertex is in a resolving set or not . then by lemma  [ lem : mw ] , @xmath645 .",
    "suppose that @xmath509 and the values of @xmath510 are already computed for @xmath511 and @xmath504 .",
    "notice that for @xmath512 and @xmath513 , @xmath646 , and any resolving set has at least one vertex in @xmath494 and at least one vertex in @xmath495 . then by lemma  [ lem : mw ] , @xmath647 .    * case  3 .",
    "* @xmath26 is partitioned into @xmath57 non - empty modules @xmath58 , @xmath528 .",
    "again , case  2 can be seen as a special case of case  3 , but we keep case  2 to make the description of computing @xmath10 more clear .",
    "we assume that @xmath529 are _ trivial _ ,",
    "i.e , @xmath78 for @xmath530 ; it can happen that @xmath531 .",
    "consider the _",
    "graph @xmath108 with a vertex set @xmath533 such that @xmath534 is adjacent to @xmath535 if and only if the vertices of @xmath156 are adjacent to the vertices of @xmath117 for distinct @xmath532 .",
    "observe that if @xmath127 and @xmath128 for distinct @xmath532 , then @xmath648 .",
    "for a set of indices @xmath539 and boolean variables @xmath540 , where @xmath541 , we define @xmath649,p_i , q_i)\\ ] ] if the following holds :    * the set @xmath543 is a resolving set for @xmath108 , * if @xmath545 for some @xmath541 , then for each @xmath546 , @xmath650 or there is @xmath548 such that @xmath549 and @xmath651 , * if @xmath551 for some @xmath541 , then for each @xmath546 , @xmath652 or there is @xmath548 such that @xmath549 and @xmath651 , * if @xmath553 for some distinct @xmath554 , then @xmath653 or there is @xmath548 such that @xmath549 and @xmath654 , * if @xmath555 for some distinct @xmath554 , then @xmath652 or there is @xmath548 such that @xmath549 and @xmath654 ,    and @xmath655 in all other cases .",
    "we claim that @xmath656 where the minimum is taken over all @xmath539 and @xmath561 for @xmath541 .",
    "first , we show that @xmath657 .",
    "let @xmath7 be a resolving set om minimum size . clearly , @xmath658 .",
    "let @xmath565 for @xmath60 .",
    "let @xmath566 . notice that @xmath567 for @xmath541 by lemma  [ lem : mw ] .",
    "for @xmath541 , let @xmath545 if there is a vertex @xmath127 such that @xmath659 for @xmath569 , and let @xmath551 if there is a vertex @xmath127 such that @xmath660 for @xmath569 .    by lemma  [ lem : mw ] , @xmath571 resolves @xmath156 in the graph obtained from @xmath661 $ ] by the addition of a universal vertex for @xmath541 .",
    "hence , @xmath662,p_i , q_i)$ ] for @xmath541 and , therefore , @xmath663,p_i , q_i)$ ] .",
    "we show that a)e ) are fulfilled for @xmath104 and the defined values of @xmath540 .    to show a ) , consider distinct vertices @xmath575 of @xmath108 . if @xmath576 or @xmath557 , then it is straightforward to see that @xmath261 resolves @xmath534 and @xmath535 .",
    "suppose that @xmath577 .",
    "then @xmath578 are trivial modules with the unique vertices @xmath0 and @xmath1 respectively . because @xmath51 is a resolving set for @xmath3 ,",
    "there is @xmath579 such that @xmath664 .",
    "consider the set @xmath581 containing @xmath6 .",
    "it remains to observe that @xmath582 resolves @xmath534 and @xmath535 , because @xmath665 .    to prove b ) , assume that @xmath545 for some @xmath541 and consider @xmath546 .",
    "suppose that @xmath666 .",
    "then @xmath156 has a vertex @xmath0 adjacent to all the vertices of @xmath571 .",
    "let @xmath1 be the unique vertex of @xmath117 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath667 .",
    "if @xmath155 , then we have that @xmath668 ; a contradiction . hence",
    ", @xmath587 . let @xmath588 be the module containing @xmath6",
    ". then we have that @xmath669 .    similarly , to obtain c ) , assume that @xmath551 for some @xmath541 and consider @xmath546 .",
    "suppose that @xmath670 .",
    "then @xmath156 has a vertex @xmath0 at distance 2 from all the vertices of @xmath571 .",
    " let @xmath1 be the unique vertex of @xmath117 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath667 . if @xmath155 , then we have that @xmath671 ; a contradiction .",
    "hence , @xmath587 . let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath672 .    to show d )",
    ", suppose that @xmath553 for some distinct @xmath554 and assume that @xmath666 .",
    "then @xmath156 has a vertex @xmath0 adjacent to all the vertices of @xmath571 and @xmath117 has a vertex @xmath1 adjacent to all the vertices of @xmath592 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath667 .",
    "if @xmath155 , then we have that @xmath673 ; a contradiction . hence , @xmath587 . by the same arguments , @xmath594",
    "let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath672 .    to prove e )",
    ", suppose that @xmath555 for some distinct @xmath554 and assume that @xmath547 .",
    "then @xmath156 has a vertex @xmath0 at distance 2 from all the vertices of @xmath571 and @xmath117 has a vertex @xmath1 at distance 2 from all the vertices of @xmath592 .",
    "the set @xmath51 resolves @xmath230 and , therefore , there is @xmath579 such that @xmath667 .",
    "if @xmath155 , then we have that @xmath673 ; a contradiction . hence , @xmath587 . by the same arguments , @xmath594",
    "let @xmath588 be the module containing @xmath6 .",
    "then we have that @xmath672 .",
    "because a)e ) are fulfilled , @xmath674,p_i , q_i)=\\omega(i , p_{h+1},q_{h+2},\\ldots , p_s , q_s)$ ] and the claim follows .",
    "now we show that @xmath675 .",
    "assume that @xmath104 and the values of @xmath598 are chosen in such a way that @xmath676 has the minimum possible value .",
    "if @xmath677 , then , trivially , we have that @xmath678 .",
    "suppose that @xmath679 .",
    "then @xmath680,p_i , q_i)$ ] and a)e ) are fulfilled for @xmath104 and the values of @xmath598 .",
    "notice that @xmath681,p_i , q_i)<+\\infty$ ] for @xmath541 . for @xmath541 ,",
    "let @xmath605 be a set om minimum size such that    * @xmath571 resolves @xmath156 in the graph @xmath606 obtained from @xmath661 $ ] by the addition of a universal vertex , * @xmath156 has a vertex @xmath0 such that @xmath607 for every @xmath608 if and only if @xmath545 , and * @xmath156 has a vertex @xmath0 such that @xmath609 for every @xmath608 if and only if @xmath551 .    by the definition , @xmath681,p_i , q_i)=|w_i|$ ] for @xmath541 .",
    "let @xmath610 we have that @xmath611 .",
    "we claim @xmath51 is a resolving set for @xmath3 .",
    "let @xmath230 be distinct vertices of @xmath3 . we show that there is a vertex @xmath6 in @xmath51 that resolves @xmath0 and @xmath1 in @xmath3 .",
    "clearly , it is sufficient to prove it for @xmath682 .",
    "let @xmath156 and @xmath117 be the modules that contain @xmath0 and @xmath1 respectively .",
    "if @xmath613 , then a vertex @xmath569 resolves @xmath0 and @xmath1 in @xmath614 and , therefore , @xmath6 resolves @xmath0 and @xmath1 in @xmath3 .",
    "suppose that @xmath615 .",
    "assume first that @xmath616 .",
    "then @xmath577 , because @xmath529 are trivial . by a )",
    ", @xmath261 is a resolving set for @xmath108 .",
    "hence , there is @xmath548 such that @xmath683 .",
    "notice that @xmath617 by the definition of @xmath581 and @xmath261 .",
    "let @xmath618 .",
    "we have that @xmath684 .",
    "let now @xmath541 and @xmath620 .",
    "if there are @xmath621 such that @xmath622 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath685 .",
    "assume that all the vertices of @xmath571 are at the same distance from @xmath0 in @xmath614 .",
    "let @xmath569 .",
    "if @xmath626 , then @xmath545 and , by b ) , @xmath653 or there is @xmath548 such that @xmath549 and @xmath686 .",
    "if @xmath687 , then @xmath6 resolves @xmath0 and @xmath1 , as @xmath688 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .",
    "similarly , if @xmath629 , then @xmath551 and , by c ) , @xmath652 or there is @xmath548 such that @xmath549 and @xmath683 .",
    "if @xmath584 , then @xmath6 resolves @xmath0 and @xmath1 , as @xmath689 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .",
    "finally , let @xmath631 .",
    "if there are @xmath621 such that @xmath622 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath690 . by the same arguments , if there are @xmath632 such that @xmath633 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 .",
    "assume that all the vertices of @xmath571 are at the same distance from @xmath0 in @xmath614 and all the vertices of @xmath592 are at the same distance from @xmath1 in @xmath634 .",
    "let @xmath635 and @xmath636 . if @xmath637 , then @xmath623 or @xmath624 resolves @xmath0 and @xmath1 , because @xmath691 .",
    "suppose that @xmath639",
    ". then @xmath553 and , by d ) , @xmath692 or there is @xmath548 such that @xmath549 and @xmath683 .",
    "if @xmath653 , then @xmath623 resolves @xmath0 and @xmath1 . otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 . if @xmath640 , then @xmath555 and , by d ) , @xmath652 or there is @xmath548 such that @xmath549 and @xmath683 .",
    "if @xmath693 , then @xmath623 resolves @xmath0 and @xmath1 .",
    "otherwise , any vertex @xmath628 resolves @xmath0 and @xmath1 .",
    "we have that @xmath51 is a resolving set for @xmath3 and , therefore , @xmath694 .",
    "recall that the modular - width of a graph can be computed in linear time by the algorithm of tedder et al .",
    "@xcite , and this algorithm outputs the algebraic expression of @xmath3 corresponding to the procedure of its construction from isolated vertices by the disjoint union and join operation and decomposing @xmath469 into at most @xmath56 modules .",
    "we construct such a decomposition and consider the rooted tree corresponding to the algebraic expression .",
    "we compute the values of @xmath474 for the graphs @xmath469 corresponding to the internal nodes of the tree and then compute @xmath10 for the root corresponding to @xmath3 .    to evaluate the running time , observe that computing @xmath474 for the disjoint union or join of two graphs demands @xmath695 operations . to compute @xmath474 in the case when @xmath480 is partitioned into @xmath57 modules , we consider at most @xmath696 possibilities to choose @xmath104 and @xmath540 for @xmath541 .",
    "then the conditions a)g ) can be verified in time @xmath697 .",
    "hence , the total time is @xmath698 .",
    "similarly , the final computation of @xmath10 can be performed in time @xmath698 .",
    "we conclude that the running time is @xmath699 for a given decomposition . since the algorithm of tedder et al .",
    "@xcite is linear , we solve minimum metric dimension in time @xmath700 .",
    "we have essentially shown that metric dimension can be solved in polynomial time on graphs of constant degree and tree - length .",
    "for this , amongst other things , we used the fact that such graphs have constant treewidth . therefore , the most natural step forward would be to attempt to extend these results to graphs of constant treewidth which do not necessarily have bounded degree or tree - length .",
    "in fact , we point out that it is not known whether metric dimension is polynomial - time solvable even on graphs of treewidth at most 2 .                                    , _ on the parameterized and approximation hardness of metric dimension _ , in proceedings of the 28th conference on computational complexity , ccc 2013 , k.lo alto , california , usa , 5 - 7 june , 2013 , 2013 , pp .",
    "266276 .            ,",
    "_ leaves of trees _ , in proceedings of the sixth southeastern conference on combinatorics , graph theory , and computing ( florida atlantic univ . , boca raton , fla . , 1975 ) , utilitas math . ,",
    "winnipeg , man .",
    ", 1975 , pp .",
    "congressus numerantium , no . xiv ."
  ],
  "abstract_text": [
    "<S> the notion of _ resolving sets _ in a graph was introduced by slater ( 1975 ) and harary and melter ( 1976 ) as a way of uniquely identifying every vertex in a graph . </S>",
    "<S> a set of vertices in a graph is a resolving set if for any pair of vertices @xmath0 and @xmath1 there is a vertex in the set which has distinct distances to @xmath0 and @xmath1 . </S>",
    "<S> a smallest resolving set in a graph is called a _ metric basis _ and its size , the _ metric dimension _ of the graph . </S>",
    "<S> the problem of computing the metric dimension of a graph is a well - known np - hard problem and while it was known to be polynomial time solvable on trees , it is only recently that efforts have been made to understand its computational complexity on various restricted graph classes . in recent work , </S>",
    "<S> foucaud et al . ( </S>",
    "<S> 2015 ) showed that this problem is np - complete even on interval graphs . </S>",
    "<S> they complemented this result by also showing that it is _ fixed - parameter tractable ( fpt ) _ </S>",
    "<S> parameterized by the metric dimension of the graph . in this work , </S>",
    "<S> we show that this fpt result can in fact be extended to all graphs of bounded tree - length . </S>",
    "<S> this includes well - known classes like chordal graphs , at - free graphs and permutation graphs . </S>",
    "<S> we also show that this problem is fpt parameterized by the modular - width of the input graph . </S>"
  ]
}