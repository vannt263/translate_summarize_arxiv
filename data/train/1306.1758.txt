{
  "article_text": [
    "there exists a large family of combinatorial optimization problems having relevant practical importance , besides its theoretical interest .",
    "one of the most representative problem of this family is the _ graph coloring problem _ ( gcp ) , which arises in many applications such as scheduling , timetabling , electronic bandwidth allocation and sequencing problems .    given a simple graph @xmath0 , where @xmath1 is the set of vertices and @xmath2 is the set of edges , a _ coloring of @xmath3 _ is an assignment of colors to vertices such that the endpoints of any edge have different colors .",
    "a _ @xmath4-coloring of @xmath3 _ is a coloring that uses @xmath4 colors .",
    "the gcp consists of finding the minimum number @xmath4 such that @xmath3 admits a @xmath4-coloring .",
    "this minimum number of colors is called the _ chromatic number _ of @xmath3 and is denoted by @xmath5 . + it is well known that gcp models some scheduling problems .",
    "the simplest version considers assignments of workers to a given set of tasks .",
    "pairs of tasks may conflict each other , meaning that they should not be assigned to the same worker .",
    "the problem is modeled by building a graph containing a vertex for every task and an edge for every conflicting pair of tasks .",
    "a coloring of this graph represents a conflict - free assignment and the chromatic number of the graph is exactly the minimum number of workers needed to perform all tasks .",
    "however , an extra constraint could be required to ensure the uniformity of the distribution of workload employees .",
    "the addition of this extra _ equity _ constraint gives rise to the _ equitable coloring problem _",
    "( ecp ) , introduced in @xcite and motivated by an application concerning _ garbage collection _ @xcite .",
    "other applications of the ecp concern _",
    "load balancing problems _ in multiprocessor machines @xcite and results in _ probability theory _ @xcite .",
    "an introduction to ecp and some basic results are provided in @xcite .    formally , an _ equitable @xmath4-coloring _ ( or just @xmath4-eqcol ) of a graph @xmath3 is a @xmath4-coloring satisfying the _ equity constraint _ , the size of two color classes can not differ by more than one unit . the _ equitable chromatic number _ of @xmath3 , @xmath6 , is the minimum @xmath4 for which @xmath3 admits a @xmath4-eqcol .",
    "the ecp consists of finding @xmath6 .",
    "computing @xmath6 for arbitrary graphs is proved to be np - hard and just a few families of graphs are known to be easy such as complete @xmath7-partite , complete split , wheel and tree graphs @xcite .    there exist some differences between gcp and ecp that make the latter harder to solve .",
    "it is known that the chromatic number of an unconnected graph @xmath3 is the maximum among the chromatic numbers of its components .",
    "algorithms that solve gcp can take advantages of the property mentioned above ( e.g. @xcite ) by solving gcp on each component , which is less cpu intensive than address the problem on the whole graph .",
    "moreover , one can preprocess the graph in order to reduce its size and , consequently , the time of optimization .",
    "for example , choosing two non - adjacent vertices with the same neighborhood , known as twin vertices , and deleting one of them .",
    "the chromatic number of the graph remains the same after deletion , since the deleted vertex can inherit the color of the other one .",
    "none of these recipes can be applied when solving ecp .",
    "for instance , let @xmath3 be the graph of figure @xmath8 and @xmath9 be the graph compounded of two disjoint copies of @xmath3 .",
    "then , @xmath10 but @xmath11 .",
    "also , let @xmath12 be the graph of figure @xmath13 .",
    "clearly , @xmath14 and @xmath15 are twin vertices .",
    "let @xmath12 be @xmath16 after @xmath14 is deleted .",
    "we have @xmath17 but @xmath18 .",
    "+        there are very few tools in the literature related to ecp resolution .",
    "two constructive algorithms called naive and subgraph were given in @xcite to generate greedily an equitable coloring of a graph and , as far as we know , two integer linear programming approaches are available . the first one is a branch - and - cut algorithm , called b&c-@xmath19 @xcite , which is based on the asymmetric representatives formulation for gcp described in @xcite .",
    "the other one @xcite adapts to ecp the formulation and techniques used by mndez - daz and zabala for gcp in @xcite , studies its polyhedral structure and derives families of valid inequalities .",
    "some of them have shown to be very effective as cutting planes in preliminary computational experiments .",
    "regarding gcp , we can find good exact algorithms which are not based on ip techniques .",
    "one of the most well known example is dsatur , proposed by brlaz in @xcite .",
    "this branch - and - bound algorithm has been referred in the literature several times and is still used by its simplicity , its efficiency in medium - sized graphs and the possibility of applying it at some stage in metaheuristics or in more complex exact algorithms like branch - and - cut ones @xcite .",
    "recently , it was shown that a modification of dsatur performs relatively well compared with many state - of - the - art algorithms based on ip techniques , showing superiority in random instances @xcite .",
    "this fact encourages us to research how to modify a dsatur - based solver in order to address the ecp , which is the goal of this paper .",
    "our approach exploits arithmetical properties inherent in equitable colorings and combines them with the techniques originally developed by brown @xcite and brlaz @xcite for dsatur , and improved by sewell @xcite and san segundo @xcite .",
    "we call it eqdsatur",
    ". a preliminary version of this algorithm with weaker pruning rules than the one analyzed in this work was already presented in @xcite .",
    "the paper is organized as follows .",
    "section [ sdsatur ] gives a brief summary of known dsatur - based algorithms for gcp .",
    "section [ snewprun ] shows the background math for our pruning rule .",
    "section [ seqimpl ] describes an implementation of eqdsatur .",
    "section [ sbounds ] discusses methods for obtaining lower and upper bounds of the equitable chromatic number .",
    "section [ scompu ] reports computational experiments carried out to tune up the behaviour of eqdsatur , and compares our algorithm against other ones from the literature .",
    "finally , section [ sconclu ] gives final conclusions .",
    "+ we now introduce some notations and definitions employed throughout the paper . for any positive integer @xmath4 ,",
    "@xmath20 $ ] denotes the set @xmath21 .",
    "given a graph @xmath22 , we assume the set of vertices is @xmath23 $ ] . a graph for which every vertex is adjacent to each other is called a _",
    "complete graph_. given @xmath24 , we denote by @xmath25 $ ] the subgraph of @xmath3 _ induced by _ @xmath26 .",
    "a set @xmath27 is a _ clique _ of @xmath3 if @xmath28 $ ] is a complete graph .",
    "given @xmath29 , the _ neighborhood _ of @xmath30 is the set of vertices adjacent to @xmath30 and is denoted by @xmath31 .",
    "the _ closed neighborhood _ of @xmath30 , @xmath32 $ ] , is the set @xmath33 .",
    "the _ degree of @xmath30 _",
    ", @xmath34 , is the cardinality of @xmath31 .",
    "the maximum degree of vertices in @xmath3 is denoted by @xmath35 .",
    "a _ stable set _ is a set of vertices of @xmath3 no two of which are adjacent .",
    "we denote by @xmath36 the _ stability number _ of @xmath3 , the maximum cardinality of a stable set of @xmath3 . given @xmath24 , we also denote by @xmath37 the stability number of @xmath25 $ ] .    a _ partial @xmath4-partition _ of @xmath3 , denoted by @xmath38 , is a collection of disjoint sets such that @xmath39 and @xmath40 if and only if @xmath41 .",
    "we write @xmath42 to refer the number of non - empty sets in @xmath43 .",
    "we denote by @xmath44 the set of vertices not covered by the sets of @xmath43 , @xmath45 .",
    "if @xmath46 we say that @xmath43 is a _",
    "@xmath4-partition_. given @xmath47 , we denote by @xmath48 the number of the set to which @xmath14 belongs , @xmath49 .",
    "a _ partial @xmath4-coloring _ of @xmath3 is a partial @xmath4-partition @xmath38 of @xmath3 such that each @xmath50 is a stable set of @xmath3 . in this context",
    ", @xmath44 is called the _ set of uncolored vertices _ of a partial @xmath4-coloring @xmath43 .",
    "if @xmath46 we say that @xmath43 is a _",
    "@xmath4-coloring_.    given @xmath51 and a partial @xmath4-coloring @xmath43 , let @xmath52 be the set of different colors assigned to the adjacent vertices of @xmath14 , @xmath53 .",
    "the _ saturation degree _ of @xmath14 in @xmath43 , @xmath54 , is the cardinality of @xmath52 and the _ set of available colors _ of @xmath14 , @xmath55 , is the set of unused colors in the neighborhood of @xmath14 , @xmath56 \\backslash d_{\\pi}(v)$ ] .    given a partial @xmath4-partition @xmath43 , @xmath57 and @xmath58 $ ] we denote by @xmath59 to the partial partition obtained by adding @xmath30 to @xmath50 .",
    "we say that a partial @xmath4-partition ( or partial @xmath4-coloring ) @xmath60 , @xmath61 , @xmath62 , @xmath63 _ can be extended _ to a @xmath64-partition ( or @xmath64-coloring ) if there exists a @xmath64-partition ( or @xmath64-coloring ) @xmath65 which can be obtained from @xmath43 by succesive applications of the operator `` + '' .",
    "a direct consequence is that @xmath66 and @xmath67 for all @xmath68 $ ] .",
    "we say that a @xmath4-partition or @xmath4-coloring @xmath69 of @xmath3 is _ equitable _ if it satisfies the equity constraint , @xmath70.\\ ] ]    an equitable @xmath4-coloring is also called @xmath4-eqcol for the sake of simplicity .",
    "the idea behind an enumerative algorithm such as dsatur is to determine early whether it is possible to extend a partial coloring to a proper coloring so that uncolored vertices are painted with available colors . in this way",
    ", the enumerative procedure avoids to explore partial colorings that will not lead to an optimal coloring , and therefore would be needlessly enumerated .",
    "dsatur is based on a generic enumerative scheme proposed by brown @xcite , outlined as follows : +    : @xmath3 a graph , @xmath71 an initial partial coloring of @xmath3 and @xmath72 an initial coloring of @xmath3 .",
    "+   + : @xmath72 an optimal coloring of @xmath3 , @xmath73 the chromatic number of @xmath3 .",
    "+   + : set @xmath74 . then , execute @xmath75 .",
    "+   + : + _ step 1_. if @xmath46 , set @xmath76 , @xmath77 and return .",
    "+ _ step 2_. select a vertex @xmath57 .",
    "+ _ step 3_. for each color @xmath78 $ ] such that @xmath79 : set @xmath80 .",
    "+ if @xmath81 \\neq \\varnothing$ ] for all @xmath82 , execute node@xmath83 .",
    "+    the previous scheme only works when the initial partial coloring @xmath71 can be extended to an optimal coloring .",
    "a suitable @xmath71 can be computed as follows : if @xmath84 is a maximal clique of @xmath3 , it is known that a @xmath85-partial coloring @xmath71 such that @xmath86 for all @xmath87 $ ] can be extended to a @xmath5-coloring .    indeed",
    ", we must know a maximal clique @xmath88 and an initial coloring @xmath72 in advance .",
    "moreover , we must state the rule for choosing vertex @xmath30 in step 2 and the order in which colors from @xmath89 have to be evaluated . from now on ,",
    "we call to these criteria _ vertex selection strategy _ ( vss ) and _ color selection strategy _ ( css ) .",
    "+ brlaz proposed the algorithm dsatur @xcite by obtaining a maximal clique @xmath88 and an initial coloring @xmath72 with greedy heuristics ( one is sli given in @xcite and the other is contributed by himself ) .",
    "the vertex selection strategy , which we call dsatur - vss , selects the uncolored vertex with the largest saturation degree . in case of a tie ,",
    "select the vertex with the largest degree . more specifically , let @xmath90 be the maximum saturation degree of @xmath43 and @xmath91 be the so called _ set of candidate vertices _ :",
    "@xmath92 dsatur - vss chooses @xmath93 that maximizes @xmath34 . in the case",
    "that more than one vertex in @xmath91 has the maximum degree , untie them according to some predetermined order , e.g. its number in @xmath1 .",
    "sewell @xcite suggested a modified tie breaking rule for choosing @xmath30 from the set @xmath91 , called celim ( celim - vss ) .",
    "it consists of selecting from the set of vertices tied at maximum saturation degree , the one with the maximum number of common available colors in the neighborhood of uncolored vertices .",
    "that is , choose @xmath93 such that the value @xmath94 is the highest .",
    "let us note that , while dsatur - vss attempts to estimate future color availability through the degree of vertices , celim - vss also contemplates the impact of coloring a vertex over the uncolored vertices yet .",
    "although celim - vss is more cpu intensive than dsatur - vss , fewer nodes are evaluated and , in the case of medium and high density instances , less time is required to reach the optimality . +",
    "a further improvement in the vertex selection strategy was recently proposed by san segundo @xcite .",
    "the criterion chooses the vertex @xmath93 that maximizes the value @xmath95 by comparing it with sewell s criterion we may observe that celim - vss minimizes the number of subproblems by systematically reducing available color at deeper levels of the search tree . by constrast",
    ", san segundo s criterion restricts this computation to the neighbors in the set of tied vertices , reducing color domains of vertices which are already known to have the least number of available colors , and so therefore more likely to require a new color at deeper levels of the search tree .    at an early stage of enumeration",
    ", the set @xmath91 has many vertices and the computation of @xmath96 induces an overload in the strategy that , in some cases , worsens the overall performance . in order to prevent this overload , a threshold called @xmath97",
    "is introduced by the author .",
    "if @xmath98 , he chooses from the set @xmath91 , the vertex @xmath30 whose value of @xmath96 is the highest . otherwise , he chooses the vertex @xmath30 whose degree is the highest just like dsatur - vss .",
    "this strategy is called pass ( pass - vss ) .",
    "several values of this threshold were tested in @xcite and @xmath99 was settled as the best option .",
    "this approach proved to be quite competitive with other exact algorithms for gcp from the literature .",
    "+ regarding the color selection strategy , as far as we know , all dsatur - based implementations merely consider the set of available colors in ascending order : first evaluate color 1 , then color 2 , and so on .",
    "we call it dsatur - css .",
    "+ considering the good performance of dsatur - based algorithms for gcp , it is natural to derive an algorithm for ecp consisting of the previous brown s scheme by changing the initial coloring in the initialization by an equitable coloring , and checking whether @xmath43 is an equitable coloring in step 1 . in summary , this simple algorithm , which we call trivialeqdsatur , only applies the equity constraint at the leafs of the search tree in the hope that the resulting coloring is equitable .",
    "this may cause trivialeqdsatur to explore vast regions of the search tree that will not lead to equitable colorings .",
    "nevertheless , the exploration of useless nodes could be avoided by checking , at each node , whether a partial coloring can be extended to an equitable coloring . in the next section ,",
    "we study necessary and sufficient conditions for a partial coloring to be extended to an equitable coloring and how to implement it as part of a dsatur - based algorithm .",
    "we now study arithmetical properties of the sizes of color classes in equitable colorings and how to combine them in order to propose a pruning rule for our algorithm .    from now on , for a partial @xmath4-partition @xmath100 , let @xmath101 be the largest color class in @xmath43 , @xmath102 be the index of color classes in @xmath43 with size @xmath101 , and @xmath103 be the cardinality of @xmath102 , @xmath104\\}$ ] , @xmath105 : |c_j| = m(\\pi ) \\}$ ] and @xmath106 .",
    "the following result fully characterizes when a partial partition can be extended to an equitable partition .",
    "let @xmath43 be a partial @xmath4-partition , @xmath107 and @xmath108 .",
    "then , @xmath43 can be extended to an equitable partition if and only if @xmath109    clearly , if @xmath43 can be extended to an equitable partition @xmath110 , then the classes from @xmath102 in @xmath110 must have at least @xmath111 vertices .",
    "consequently , the classes from @xmath20 \\backslash t(\\pi)$ ] in @xmath110 must have at least @xmath112 vertices . then , @xmath113 which is equivalent to ( [ supermraw ] ) .    on the other hand ,",
    "if ( [ supermraw ] ) holds then @xmath44 has enough vertices for the following procedure to get an equitable @xmath4-partition : add one by one the remaining uncolored vertices to the smallest non - empty class at each step .",
    "formula ( [ supermraw ] ) allows us to obtain another way of characterizing equitable colorings besides the traditional definition :    let @xmath43 be a @xmath4-coloring of @xmath3 , @xmath107 and @xmath108 .",
    "then , @xmath43 is a @xmath4-eqcol if and only if ( [ supermraw ] ) holds .    by theorem 1 ,",
    "if ( [ supermraw ] ) holds then @xmath43 is extended to the equitable @xmath4-partition @xmath43 itself . since @xmath43 is already a coloring",
    ", @xmath43 is a @xmath4-eqcol .",
    "the converse is analogous .",
    "if we wonder when a partial coloring can be extended to an equitable coloring , it is clearly that condition ( [ supermraw ] ) is necessary .",
    "however , if we know a lower bound of @xmath114 , the condition can be tightened :    let @xmath43 be a partial @xmath4-coloring , @xmath107 , @xmath108 and @xmath115 be a lower bound of @xmath6 . if @xmath43 can be extended to an equitable coloring , then @xmath116    in the case that @xmath117 , ( [ superm ] ) holds by theorem 1 .",
    "hence , we assume @xmath118 . if @xmath43 can be extended to an equitable @xmath64-coloring @xmath110 , we have that @xmath119 and classes from @xmath102 in @xmath110 must have at least @xmath111 vertices .",
    "consequently , classes from @xmath120 \\backslash t(\\pi)$ ] in @xmath110 must have at least @xmath112 vertices .",
    "therefore , @xmath121 and ( [ superm ] ) holds .",
    "we include the condition given in the previous result as a pruning rule in the brown s scheme .",
    "below , we sketch our approach called eqdsatur : +    : @xmath3 a graph , @xmath71 an initial partial coloring of @xmath3 , @xmath72 an initial equitable coloring of @xmath3 and @xmath115 a lower bound of @xmath6 .",
    "+   + : @xmath72 an optimal equitable coloring of @xmath3 , @xmath122 .",
    "+   + : set @xmath74 . then , execute @xmath75 .",
    "+   + : + _ step 1_. if @xmath46 , set @xmath76 , @xmath77 and return .",
    "+ _ step 2_. select a vertex @xmath57 .",
    "step 3_. for each color @xmath78 $ ] such that @xmath79 : set @xmath80 .",
    "+ if @xmath123 and + @xmath81 \\neq \\varnothing$ ] for all @xmath82 , execute node@xmath83",
    ". +    the following theorem shows that eqdsatur works :    if @xmath71 can be extended to a @xmath6-eqcol then eqdsatur gives the value of @xmath6 into the variable @xmath73 and an optimal equitable coloring into @xmath72 after its execution .    in the case",
    "that ( [ superm ] ) does not hold , the node corresponding to @xmath110 is not called since @xmath110 can not be extended to an equitable coloring according to corollary 3 .",
    "therefore , the algorithm does not prune nodes that could reach an optimal equitable coloring .    also , each coloring reached at step 1 is indeed an equitable coloring , due to corollary 2 and the fact that the current coloring satisfies ( [ superm ] ) .",
    "it is clear that the scheme proposed previously is barely helpful if we do not know how to implement it in a efficient way .",
    "below , we propose a detailed fast implementation of eqdsatur .",
    "indentations are meaningful and mark the scope of the operations involved .",
    "all sets listed in the implementation are represented by global binary - valued arrays .",
    "global variable @xmath4 is the number of colors of the current partial partition .",
    "+    : @xmath3 a graph , @xmath72 an initial eqcol of @xmath3 and @xmath115 a lower bound of @xmath6 .",
    "+   + : @xmath72 an optimal eqcol of @xmath3 , @xmath122 . +   + : + set @xmath74 .",
    "+ create a partial coloring @xmath43 such that @xmath124 for all @xmath87 $ ] , where + @xmath84 is a maximal clique of @xmath3 .",
    "+ set @xmath125 and @xmath126 .",
    "+ execute @xmath127 .",
    "+   + : + _ step 1_. if @xmath46 , set @xmath128 , @xmath77 and return . + _ step 2_. select a vertex @xmath57 .",
    "+ _ step 3_. for each @xmath129 $ ] such that @xmath79 : + set @xmath130 .",
    "+ if @xmath131 , do : + if @xmath132 , set @xmath133 and @xmath134 .",
    "+ if @xmath135 , set @xmath136 and @xmath137 .",
    "+ if @xmath138 set @xmath139 and @xmath137 .",
    "+ if @xmath140 , do : + if @xmath141 , set @xmath136 and @xmath137 .",
    "+ if @xmath142 , set @xmath139 and @xmath137 .",
    "+ set @xmath143 .",
    "+ set @xmath144 .",
    "+ if @xmath145 , do : + set @xmath146 .",
    "+ set @xmath147 .",
    "+ execute node@xmath148 .",
    "+ set @xmath149 .",
    "+ set @xmath150 .",
    "+ set @xmath151 .",
    "+    we do not describe implemetation details of how to update @xmath55 for the sake of readability , but it can be found in @xcite . on the other hand ,",
    "details of how to compute the clique @xmath88 and the initial equitable coloring is discussed in section [ sbounds ] .",
    "it is not hard to see that variables @xmath111 and @xmath152 are indeed the cardinality of the largest class and the number of color classes with size @xmath111 in the current partial coloring .",
    "the update of these variables as well as @xmath44 , @xmath50 and @xmath4 is performed in constant time .    updating @xmath111 and @xmath152 , and checking ( [ superm ] ) is cheap but not free .",
    "so , it becames important to analyze if the usage of this pruning rule pays off in terms of cpu time .",
    "this task is performed in section [ scompu ] through empirical experimentation .",
    "in order to initialize eqdsatur , it is necessary to compute bounds of the equitable chromatic number . in this section ,",
    "we discuss how to obtain such values and we report some computational experiments related to them .",
    "we remark that , in particular , the lower bound @xmath115 remains constant during the enumeration , so it is essential that the value of @xmath115 be as best as possible .",
    "clearly , every equitable coloring of @xmath3 is also a classic coloring of @xmath3 so every lower bound of @xmath5 can be used as a lower bound of @xmath6 . in particular , the size of any maximal clique of @xmath3 is a known lower bound of @xmath5 and @xmath6 .",
    "there are several ways suggested in the literature to obtain such cliques .",
    "the easiest method is , for a given graph @xmath3 and a given vertex @xmath14 , a greedy algorithm that includes @xmath14 as the first vertex of the clique and then selects the vertex adjacent to the clique with highest degree in each step until no more vertices can be added to the clique .",
    "furthermore , one may apply this method to different initial vertices @xmath14 and choose the largest clique . in the case that two cliques of the same size are found , it is advisable to follow a suggestion made by sewell @xcite : retain the clique @xmath88 that maximizes @xmath153 .",
    "the clique found with this criterion will lead to smaller initial sets @xmath154 since those colors used by the clique will not be available for vertices @xmath14 adjacent to some vertex in the clique .",
    "let us call findclique(@xmath3 ) to this algorithm .",
    "+ let us notice that the distance between @xmath5 and @xmath6 can be as far as we want .",
    "such is the case with star graphs @xmath155 @xcite ( a graph @xmath155 is composed of a vertex @xmath14 and a stable set @xmath26 of size @xmath156 such that @xmath14 is adjacent to every vertex in @xmath26 ) : @xmath157 therefore , it becomes essential to find other lower bounds for @xmath6 besides a maximal clique of @xmath3 .",
    "lih and chen @xcite proved that @xmath158 ) + 2 } \\biggr\\rceil\\ ] ] for any @xmath51 .",
    "however , it requires to know the stability number of @xmath159 $ ] , an np - hard problem @xcite .",
    "nevertheless , a relaxation of this value can be used instead .",
    "it is known that the cardinality of a partition in cliques of a graph is an upper bound for the stability number of that graph .",
    "let @xmath160 be the cardinality of a partition in cliques of @xmath159 $ ] .",
    "the lower the size of the partition is , the tighter the bound becomes .",
    "let us call eqlowbound(@xmath3 ) to the algorithm that computes the number @xmath161 where @xmath160 is obtained by the following greedy heuristic .",
    "initially , let @xmath162 be the graph @xmath159 $ ] . we compute a maximal clique of @xmath162 and",
    "then we delete those vertices from @xmath162 that belong to the clique found .",
    "this simple procedure is repeated until @xmath162 becomes empty , and @xmath160 is the number of cliques found .",
    "we want to emphasize that both procedures ( findclique and eqlowbound ) could be improved , thus obtaining better bounds of @xmath114 but at the expense of spending more cpu time .",
    "a known upper bound for @xmath6 is @xmath163 @xcite , but a slightly better one can be derived from a result stated in @xcite : `` every graph satisfying @xmath164 for every edge @xmath165 , has a @xmath166-eqcol '' . from this result",
    ", it is straightforward to obtain the following relationship : @xmath167    another way for finding an initial upper bound is via heuristics . in our implementation",
    ", we adopt naive @xcite which is a heuristic that works well and produces good solutions .",
    "basically , naive generates a classic coloring with the algorithm @xmath168 @xcite and then re - color vertices from the biggest color class to the smallest color class .",
    "when it is not possible , a new color is assigned to some vertex from the biggest class .",
    "the re - coloring procedure is repeated until an equitable coloring is reached .      as we said above , it is important to bear in mind the cpu time assigned to the procedures that yield the bounds and how much they will impact in the enumerative algorithm . since these procedures are fast heuristics , we are not sure whether they yield quality bounds .",
    "next , we analize them through experimentation .",
    "this experiment and all the further ones shown in this paper were carried out on an intel i5 cpu 750@2.67ghz with ubuntu linux o.s .",
    "and intel c++ compiler .",
    "we denote by @xmath169 to the size of the maximal clique returned by findclique , @xmath170 to the lower bound computed by eqlowbound , @xmath171 to the upper bound given by ( [ orebound ] ) and @xmath172 to the number of colors of the equitable coloring returned by naive .",
    "random instances are generated from two parameters : the number of vertices @xmath7 and the probability @xmath173 that an edge is included in the graph .",
    "let us note that @xmath173 is approximately equal to the density of the random graph , @xmath174    table [ boundtable ] summarizes the average of the bounds over 450 ramdomly generated instances of different sizes ( each row of the table corresponds to 30 instances ) .",
    "columns 1 - 2 show the number of vertices @xmath7 and probability @xmath173 of the evaluated instances .",
    "columns 3 - 6 display the average of @xmath169 , @xmath170 , @xmath171 and @xmath172 , and column 7 is the average of percentage of relative gap , @xmath175    .comparison of bounds [ cols=\"^,^,^,^,^,^,^ \" , ]     table [ instanciasfinales ] reports the final results .",
    "columns 1 - 2 display the name of the instance and its equitable chromatic number .",
    "columns 3 - 5 and 6 - 10 show the bounds given by the initial heuristics and the bounds obtained by each algorithm after its execution .",
    "finally , columns 11 - 14 show the time needed to solve the instance , or `` @xmath176 '' if the algorithm is not able to solve it within the limit of two hours .",
    "columns called `` eqds '' and `` eqds@xmath177 '' correspond to eqdsatur with dsatur - css and order1-css respectively .",
    "results for b&c-@xmath19 are taken from @xcite .",
    "we leave blank when the instance is not mentioned in that paper .",
    "we also recall that these results had been obtained with a slightly different platform : an 1.8 ghz amd - atlon machine with linux and xpress 2005-a as the linear programming solver .    from the 58 evaluated instances ,",
    "cplex has solved 38 , eqdsatur with dsatur - css has solved 29 and with order1-css has solved 31 .",
    "however , some of the instances not solved by both versions of eqdsatur ( more precisely , ` 3-fullins_3 ` , ` 4-fullins_3 ` and ` 5-fullins_3 ` ) are indeed hard to solve by enumerative schemes , as reported in @xcite , so in our opinion eqdsatur presents the expected behaviour . on the other hand ,",
    "both versions of eqdsatur outperform cplex and b&c-@xmath19 in ` queen8_8 ` , and cplex in ` myciel5 ` and ` queen9_9 ` . in particular",
    ", the version with order1-css outperforms b&c-@xmath19 in ` miles750 ` and ` miles1000 ` .",
    "let us note that dsatur - css delivers a faster algorithm than order1-css for the set of instances solved by both .",
    "also , it is able to solve ` queen8_12 ` and ` kneser11_5 ` in more than half an hour . nevertheless , by using order1-css , ` miles750 ` , ` miles1000 ` , ` ash331gpia ` and ` will199gpia ` can be solved without difficulty .",
    "in this paper , we present and analyze an exact dsatur - based algorithm for ecp .",
    "we propose a pruning rule based on arithmetical properties related to equitable partitions , which has shown to be very effective .",
    "we also discuss several color and vertex selection strategies and how to obtain lower and upper bounds of the equitable chromatic number for initializing the algorithm .",
    "finally , several experiments were carried out to conclude that our approach can tackle the resolution of random graphs better than other algorithms found in the literature so far .",
    "pemmaraju sv .",
    "equitable colorings extend chernoff - hoeffding bounds .",
    "approximation , randomization , and combinatorial optimization : algorithms and techniques , lecture notes in comput .",
    "2001;2129:28596 .",
    "sewell ec .",
    "an improved algorithm for exact graph coloring . in : trick",
    "ma , johnson ds , editors .",
    "cliques , coloring and satisfiability .",
    "proceedings of the second dimacs implementation challenge , vol . 26 .",
    "american mathematical society ; 1996 , p. 35973 ."
  ],
  "abstract_text": [
    "<S> this paper describes a new exact algorithm for the equitable coloring problem , a coloring problem where the sizes of two arbitrary color classes differ in at most one unit . </S>",
    "<S> based on the well known dsatur algorithm for the classic coloring problem , a pruning criterion arising from equity constraints is proposed and analyzed . the good performance of the algorithm is shown through computational experiments over random and benchmark instances .    </S>",
    "<S> equitable coloring , dsatur , exact algorithm 05c15 , 05a15 </S>"
  ]
}