{
  "article_text": [
    "of computation models for a boolean function @xmath1 is a boolean circuit or formula  @xcite .",
    "a _ circuit _ is a directed acyclic graph in which nodes of in - degree zero are either the boolean constants or variables , nodes of in - degree @xmath2 are logical gates , computing boolean functions of @xmath3 arguments , and nodes of out - degree zero correspond to the circuit outputs . if a circuit has only a single output and the output of each gate is used as an input to at most one gate then this circuit is called a _",
    "formula_. in circuits , as in any other model of computation , the computational complexity and effects of noise are important questions  @xcite .    the circuit complexity of a boolean function is the minimum number of gates ( circuit _ size _ ) or the minimum _ _ depth _ _ of a circuit , constructed from a particular set of gates , which computes this function .",
    "however , to find a circuit representation of a boolean function with a bounded size or depth is a difficult problem  @xcite .",
    "one approach to this problem is to study complexity of _ typical _ boolean functions computed by random formulas  @xcite .",
    "the two most studied methods of generating random formulas use random tree generation and a growth process as their core procedures . in the first method",
    ", a rooted @xmath3-ary tree is sampled from the uniform distribution of all rooted @xmath3-ary trees ; the leaves of this random tree are then labelled by reference to the boolean variables and internal nodes are labelled by the boolean gates .",
    "this method was used to investigate the complexity of typical functions computed by random and/or formulas  @xcite and allowed to obtain a close relation between the probability @xmath4 $ ] of a random formula to compute a boolean function @xmath5 and its size ( complexity ) .",
    "however , it seems that this probability distribution is biased towards very low complexity functions  @xcite .",
    "the second method uses the following growth process : firstly , one defines the initial probability distribution @xmath6 $ ] over the set @xmath7 of simple boolean functions of @xmath8 variables . secondly , and in further steps",
    ", the functions chosen from the distributions @xmath9 $ ] defined in previous steps are combined by boolean gates : @xmath10 .",
    "this process can be seen as a growth of @xmath3-ary balanced trees and was first used by valiant to obtain an upper bound on the size of monotone formulas computing the majority function  @xcite .",
    "savick recently showed for one of these processes , for @xmath6 $ ] that is uniform on some set of boolean functions @xmath7 and under very broad conditions on @xmath11 , the probability @xmath9 $ ] tends to the uniform distribution over all boolean functions of @xmath8 variables when @xmath12  @xcite .",
    "the convergence rates of the savick s process and its variants with different gates and initial conditions were studied in  @xcite .",
    "another important question in the circuit theory is a reliable computations of boolean functions in the presence of noise .",
    "one of the first to study the effect of noise in computing systems was von neumann who attempted to explain the robustness of biologically - inspired computing circuits  @xcite .",
    "his model represented neural activities by a circuit ( or formula ) composed of @xmath0-noisy boolean gates .",
    "the @xmath0-noisy gate is designed to compute a boolean function @xmath13 , but for each input @xmath14 there is an error probability @xmath0 such that @xmath15 . to simplify the analysis , error - probability",
    "is taken to be independent for each gate in the circuit .",
    "clearly , a noisy circuit ( @xmath16 ) can not perform any given computation in a deterministic manner : for any circuit - input there is a non - vanishing probability that the circuit will produces the wrong output .",
    "the maximum of this error probability @xmath17 over all circuit - inputs determines the _ reliability _ of the circuit . in his paper",
    ", von neumann showed that reliable computation ( @xmath18 ) is possible for a sufficiently small @xmath0  @xcite and demonstrated how reliability of a boolean noisy circuit can be improved by using constructions based only on @xmath0-noisy gates .",
    "there had been little development in the analysis of noisy computing systems until the seminal work of pippenger  @xcite who addressed the problem from an information theory point of view .",
    "he showed that if a noisy @xmath3-ary formula is used to compute a boolean function @xmath5 with the error probability @xmath18 , then ( i ) there is an upper bound for the gate - error @xmath19 which is strictly less than @xmath20 and ( ii ) there is a lower bound for the formula - depth @xmath21 , where @xmath22 is the depth of a noiseless formula computing @xmath5 . in comparison to its noiseless counterpart ,",
    "a noisy formula that computes reliably has greater depth due to the presence of restitution - gates , implying longer computation times  @xcite .",
    "a number of papers have followed and extended pippenger s results . for instance , similar results were derived for circuits by feder  @xcite , who also improved the bounds obtained by pippenger for formulas .",
    "the exact noise thresholds for @xmath3-ary boolean formulae were later determined for odd @xmath3  @xcite and for formulas constructed from @xmath23-input nand gates  @xcite ; the latter was recently suggested as the exact noise threshold for general @xmath23-input gate formulas  @xcite .",
    "results derived for noisy boolean formulas in  @xcite rely on a specific construction which uses @xmath0-noisy _ majority _ gates .",
    "the noiseless variant of this gate performs the majority - vote function\\!=\\!1 $ ] for @xmath24 , @xmath25\\!=\\!-1 $ ] for @xmath26 and @xmath27\\!=\\!0 $ ] throughout this paper . ]",
    "@xmath28 $ ] on the binary inputs @xmath29 and naturally the number of these inputs @xmath3 is _",
    "odd_. in contrast to previous work , in this paper we concentrate on the possibility of reliable computation in _ randomly generated _ boolean formulas .",
    "as a first step towards this goal , we study the effects of @xmath0-noise on the formulas generated in the savick s growth process .",
    "( 50,30 )    ( -2,12 )    [ cols=\"<,^,^,^ , > \" , ]     ( 37 , 19.5)(1 , -2)4 ( 37 , 13.5)(1 , -1)4 ( 37 , 0)(1 , 2)4    ( 43 , 9.5)(1 , 0)7    ( 37 , 26)(1 , 0)8 ( 45 , 26)(0 , -1)16.5    ( 43.6 ,",
    "8.5)@xmath30    let us introduce noise into the formulas generated by savick s growth process .",
    "in order to do this we note that the noiseless case , as described in the introduction , can be also seen as a computation , performed by gate @xmath11 , of a new boolean function @xmath31 from @xmath3 boolean functions @xmath32 .",
    "these functions , represented by binary @xmath33 strings ( or vectors ) of length @xmath34 , are drawn randomly and independently from the same distribution  @xcite . however , each computation at the gate @xmath11 may be corrupted by noise that inverts the result of this computation with probability @xmath0 ( see figure [ fig:1 ] ) .",
    "averaging the process over many realizations of noise leads us to the equation @xmath35&=&\\sum_{\\{{\\mathrm{f}}_j\\}}\\prod_{j=1}^k \\big\\{{\\mathrm{p}}_t[\\;{\\mathrm{f}}_j\\;]\\big\\}\\label{eq : proboff}\\\\ & & \\times\\prod_{i=1}^{2^n}\\frac{{\\mathrm{e}}^{\\beta { \\mathrm{f}}^i\\alpha({\\mathrm{f}}_1^i,\\ldots,{\\mathrm{f}}_k^i)}}{2\\cosh\\beta   \\alpha({\\mathrm{f}}_1^i,\\ldots,{\\mathrm{f}}_k^i)}\\nonumber\\ ] ] which gives us the probability of a boolean function @xmath31 being computed by the noisy formulas of depth @xmath36 . here for convenience we have introduced the inverse `` temperature '' parameter @xmath37 which is related to the noise parameter @xmath0 via the equality @xmath38 .",
    "the limits @xmath39 correspond to completely random / deterministic cases .    without noise ( @xmath40 )",
    "the equation ( [ eq : proboff ] ) reduces to @xmath35&=&\\sum_{\\{{\\mathrm{f}}_j\\}}\\prod_{j=1}^k \\big\\{{\\mathrm{p}}_t[\\;{\\mathrm{f}}_j\\;]\\big\\}\\label{eq : proboffnonoise}\\\\ & & \\times\\prod_{i=1}^{2^n } \\delta\\left[{\\mathrm{f}}^i;\\alpha({\\mathrm{f}}_1^i,\\ldots,{\\mathrm{f}}_k^i)\\right],\\nonumber\\end{aligned}\\ ] ] where we use @xmath41 $ ] to denote kronecker delta .",
    "equation  ( [ eq : proboffnonoise ] ) was studied in the original savick s work  @xcite and subsequent studies  @xcite where the stationary distribution @xmath42=\\lim_{t\\rightarrow\\infty}{\\mathrm{p}}_t[\\!\\;{\\mathrm{f}}\\!\\;]$ ] of the noiseless process ( [ eq : proboffnonoise ] ) was studied with the initial conditions @xmath43\\;\\;\\;=\\frac{1}{\\vert{\\mathrm{f}}^0\\vert}\\sum_{{\\mathrm{g}}\\in{\\mathrm{f}}^0}\\prod_{i=1}^{2^n}\\delta[{\\mathrm{f}}^i;{\\mathrm{g}}^i ] $ ] for different initial sets @xmath7 of simple boolean functions ( constants , identities , etc . ) and different gates @xmath11 .",
    "depending on these parameters the stationary distribution is either concentrated on a single function , i.e. @xmath42=\\prod_{i=1}^{2^n}\\delta\\left[\\;{\\mathrm{f}}^i;{\\mathrm{g}}^i\\right]$ ] or on some set of functions @xmath44 , i.e. @xmath42=   \\frac{1}{\\vert{\\mathrm{f}}\\vert}\\sum_{{\\mathrm{g}}\\in{\\mathrm{f}}}\\prod_{i=1}^{2^n}\\delta[{\\mathrm{f}}^i;{\\mathrm{g}}^i]$ ] .",
    "there are also cases when for @xmath12 the distributions @xmath45 $ ] and @xmath46 $ ] are distinct .",
    "our main contribution to these studies is the following result for the noisy process ( [ eq : proboff ] ) .",
    "[ theorem:1 ] for a _ balanced _",
    "gate s and @xmath47 s in its output . ]",
    "@xmath11 the stationary distribution @xmath48=\\frac{1}{2^{2^n}}$ ] is a stable and unique solution of the process ( [ eq : proboff ] ) when @xmath49 , where @xmath50 , with @xmath51 , for @xmath3 odd and even respectively .    in order to show this",
    ", we first use the result , derived in appendix [ section : m ] , that the distribution @xmath52 $ ] can be represented via its moments @xmath53\\prod_{i\\in s}\\hat{\\mathrm{f}}^i$ ] , where @xmath54 is a subset of the set @xmath55=\\{1,\\ldots,2^n\\}$ ] , and @xmath52 $ ] is given by @xmath56=\\frac{1}{2^{2^n}}\\left(1+\\sum_{s\\subseteq[2^n]}{\\mathrm{m}}^s(t+1)\\prod_{i\\in s}{\\mathrm{f}}^i\\right),\\end{aligned}\\ ] ] where the @xmath57-th moment is governed by the equation @xmath58\\bigg\\}\\nonumber\\\\ & & \\times\\prod_{i\\in { \\textbf{i}}}\\alpha({\\mathrm{f}}_1^{i},\\ldots,{\\mathrm{f}}_k^{i})\\nonumber\\end{aligned}\\ ] ] with @xmath59 .",
    "thus the @xmath57-th moment at @xmath36 is a function of only the @xmath57-th and lower order moments at @xmath60 .",
    "let us assume now that @xmath61 then by the lemma [ lemma:2 ] , with @xmath62 , the first moments of the distribution @xmath52 $ ] are vanishing as @xmath12 .",
    "but then , by applying the same lemma to the order @xmath63 moments , we conclude that all moments are vanishing as @xmath12 .",
    "( 50,50 ) ( 0,0)=50 ( 1,35)@xmath19(39,-3)@xmath3    in addition to its direct interpretation that above @xmath19 ( see figure [ fig:2 ] ) the noisy process ( [ eq : proboff ] ) is _ ergodic _ and has only one stationary solution , the result of theorem [ theorem:1 ] also has consequences for computation in noisy random formulas .",
    "a feature of noisy formulas , which is essential for reliable computation , is their greater depth due to the presence of correcting @xmath0-noisy gates  @xcite .",
    "this correction operation can be seen as a procedure which reduces the entropy , but in our case of very deep ( @xmath12 ) random formulas the entropy is at its maximum when @xmath64 .",
    "thus any computation , even as simple as computing identity function , can not be performed reliably in this regime .    for odd",
    "@xmath3 our result for the bound @xmath19 is exactly equal to the _ exact _ threshold for reliable computation by general @xmath3-ary formulas  @xcite .",
    "it is not clear however if this threshold is also exact , i.e. any boolean function can be computed for @xmath65 with the error @xmath18 , for randomly generated formulas . for even @xmath66 this threshold",
    "is not known , but our result suggests that for balanced gates @xmath11 it can not exceed the bound @xmath19 of theorem [ theorem:1 ] .",
    "furthermore as @xmath67 the @xmath19 approaches @xmath20 as @xmath68 , this is follows from the stirling s approximation of @xmath69 , which is in agreement with the bound computed in  @xcite for general formulas .",
    "the results of lemma [ lemma:1 ] , which are used in the proof of theorem [ theorem:1 ] , can be also exploited to show that reliable computation in randomly generated formulas is possible .",
    "this can be shown as follows .",
    "suppose that gate @xmath11 in the process ( [ eq : proboff ] ) is the same as the one studied in lemma [ lemma:1 ] .",
    "assume that the initial distribution @xmath6 $ ] is such that the stationary distribution @xmath48 $ ] of the noiseless process ( [ eq : proboffnonoise ] ) is concentrated on only one boolean function , i.e. all formulas compute the same function .",
    "this implies that for any input @xmath70 all formulas simultaneously provide an output of @xmath71 or @xmath47 .",
    "then in the presence of noise the average formula errors in its output with the probability @xmath72 , where @xmath73 is the stationary solution of equation ( [ eq : m ] ) corresponding to this input . from the analysis in lemma [ lemma:1 ] follows that the maximum of this error over all inputs is @xmath74 and is bounded away from @xmath20 when @xmath75 .",
    "furthermore , the output error can be reduced by decreasing @xmath0 or by increasing @xmath3 . thus in this regime",
    "any boolean function can be computed with any desired accuracy .",
    "in this section we compute the values of lower bounds appearing in theorem [ theorem:1 ] . in order to do this",
    "we choose a balanced gate @xmath76 from the set of gates @xmath77+{\\mathbf{1}}\\left[\\sum_{j=1}^k \\sigma_j=0\\right]\\gamma(\\sigma)$ ] , where @xmath78 is such that @xmath79\\gamma(\\sigma)\\!=\\!0 $ ] , and consider the first moments @xmath80\\;{\\mathrm{f}}^i$ ] .",
    "these are governed by the equations @xmath81\\nonumber \\\\ & & \\times\\left[\\frac{1+{\\mathrm{m}}(t)}{2}\\right]^{\\ell}\\left[\\frac{1-{\\mathrm{m}}(t)}{2}\\right]^{k-\\ell}\\nonumber\\end{aligned}\\ ] ]    [ lemma:1 ] for @xmath51 the function @xmath82 , defined in the equation ( [ eq : m ] ) , has the following properties : i ) if @xmath83 then @xmath84 for @xmath85 $ ] and @xmath86 for @xmath87 ; ii ) if @xmath88 then @xmath89 such that @xmath90 , where @xmath69 is defined in the theorem [ theorem:1 ] .",
    "this lemma follows from the equalities @xmath91 ( this can be shown by direct substitution ) and the fact that @xmath82 is a strictly increasing function , which is also convex and concave on the intervals @xmath92 and @xmath93 , respectively ( to show this we study properties of @xmath82 in the appendix  [ section : f ] ) .",
    "then i ) is true because @xmath94 when @xmath95 and ii ) is true because of @xmath96 when @xmath97 .",
    "let us consider equation ( [ eq : p - m ] ) for an @xmath57-th moment @xmath99 .",
    "assuming that all lower order moments vanish allows us to write this equation in a very simple form @xmath100\\bigg\\}\\nonumber\\\\ & & \\times\\prod_{i=1}^n\\alpha(\\sigma_1^{i},\\ldots,\\sigma_k^{i}).\\nonumber\\end{aligned}\\ ] ] for a balanced gate @xmath11 the point @xmath101 is a stationary solution of the above equation and has the following property .    [ lemma:2 ] the point @xmath101 is a stable and unique solution of ( [ eq : p - m - reduced ] ) when @xmath102 .    in order to prove this",
    "we first show that @xmath103\\nonumber\\\\ & & \\times\\operatorname*{sgn}\\left[\\sum_{j=1}^k\\prod_{i=1}^n\\sigma^i_j\\right],\\nonumber\\end{aligned}\\ ] ] where @xmath104 is defined in ( [ eq : m ] ) .",
    "this can be shown by a direct calculation as follows @xmath105\\\\ & & \\times\\operatorname*{sgn}\\left[\\sum_{j=1}^k\\prod_{i=1}^n\\sigma^i_j\\right]\\nonumber\\\\ & & = \\tanh^n(\\beta)\\frac{1}{2^{n-1}}\\sum_{\\{\\sigma_j^i\\}}\\prod_{j=1}^k \\left[\\frac{1+{\\mathrm{m}}\\sigma^1_j}{2}\\right]\\nonumber\\\\ & & \\times\\operatorname*{sgn}\\left[\\sum_{j=1}^k\\sigma^1_j\\right]=\\tanh(\\beta)^{n-1}{\\mathrm{f}}_\\chi(m).\\nonumber\\end{aligned}\\ ] ] in the above the first equality was obtained by applying transformation @xmath106 and the last equality followed from comparing this result with the right hand side of equation ( [ eq : m ] ) .",
    "next , for a balanced gate @xmath11 we compute the difference @xmath107 in appendix  [ section : deltam ] .",
    "the result of this computation is that @xmath108 and @xmath109 on the intervals @xmath110 and @xmath111 $ ] , respectively , from which the bounds @xmath112 and @xmath113 on the same intervals follow .",
    "the behaviour of @xmath114 with respect to the inverse temperature @xmath115 is the same as of @xmath116 , which we described in lemma [ lemma:1 ] , but with the @xmath117 being replaced by the @xmath118 .",
    "the paper extends previous work  @xcite on the reliability of computation in boolean formulas and generation of random boolean functions  @xcite , by investigating the properties of formulas constructed by a random growth process whereby computing elements , primarily @xmath3-ary balanced gates , are subject to @xmath0-noise .",
    "we show that the noisy growth process is ergodic above the noise bound @xmath19 and hence the formulas generated by it are unreliable .",
    "we also show that formulas constructed from majority - like gates , which saturate this bound , can be used for computing any boolean function when @xmath75",
    ". our earlier work , which uses methods of non - equilibrium statistical physics , suggests that the same noise bound also applies to the noisy feed - forward  @xcite and recurrent boolean networks  @xcite .",
    "the current analysis is restricted to reliable computation in a growth process that uses only _ balanced _ gates and produces ( without noise ) only _ one _ boolean function ; but we envisage that it can be extended to study more general scenarios of non - balanced gates and a richer distributions of boolean functions  @xcite .",
    "the probability distribution @xmath98 $ ] can be represented via its moments . in order to find this representation we can use the identity @xmath119=1 $ ] to write @xmath120=\\sum_{\\hat{\\mathrm{f}}}\\delta[\\hat{\\mathrm{f}};{\\mathrm{f}}]{\\mathrm{p}}_t[\\hat{\\mathrm{f}}]$ ] .",
    "then , because @xmath41=\\frac{1}{2}(1+xy)$ ] for @xmath121 , we obtain @xmath122&=&\\sum_{\\hat{\\mathrm{f}}}{\\mathrm{p}}_t[\\hat{\\mathrm{f}}]\\prod_{i=1}^{2^n}\\frac{1}{2}\\left(1+\\hat{\\mathrm{f}}^i{\\mathrm{f}}^i\\right)\\label{def : proboffviam}\\\\ & = & \\frac{1}{2^{2^n}}\\left(1+\\sum_{\\hat{\\mathrm{f}}}{\\mathrm{p}}_t[\\hat{\\mathrm{f}}]\\sum_{s\\subseteq[2^n]}\\prod_{i\\in s}\\hat{\\mathrm{f}}^i{\\mathrm{f}}^i\\right)\\nonumber\\\\ & = & \\frac{1}{2^{2^n}}\\left(1+\\sum_{s\\subseteq[2^n]}{\\mathrm{m}}^s(t)\\prod_{i\\in s}{\\mathrm{f}}^i\\right),\\nonumber\\end{aligned}\\ ] ] where @xmath123\\prod_{i\\in s}\\hat{\\mathrm{f}}^i$ ] are the moments of @xmath120 $ ] .",
    "let us now derive equation governing evolution of the @xmath57-th moment @xmath124 .",
    "this can be obtained by multiplying both sides of equation  ( [ eq : proboff ] ) by the monomial @xmath125 , where @xmath59 , and taking the sums over @xmath31 as follows @xmath126\\prod_{i\\in { \\textbf{i}}}{\\mathrm{f}}^i\\label{def : m}\\\\ & & = \\sum_{\\mathrm{f}}\\sum_{\\{{\\mathrm{f}}_j\\}}\\prod_{j=1}^k \\big\\{{\\mathrm{p}}_t[\\;{\\mathrm{f}}_j\\;]\\big\\}\\nonumber\\\\ & & \\times\\prod_{i=1}^{2^n}\\frac{{\\mathrm{e}}^{\\beta { \\mathrm{f}}^i\\;\\!\\alpha({\\mathrm{f}}_1^i,\\ldots,{\\mathrm{f}}_k^i)}}{2\\cosh\\beta   \\alpha({\\mathrm{f}}_1^i,\\ldots,{\\mathrm{f}}_k^i)}\\prod_{\\ell\\in { \\textbf{i}}}{\\mathrm{f}}^\\ell\\nonumber\\\\ & & = \\tanh^n(\\beta)\\sum_{\\{{\\mathrm{f}}_j^i\\}}\\prod_{j=1}^k \\big\\{{\\mathrm{p}}_t[\\;{\\mathrm{f}}_j^{i_1},\\ldots,{\\mathrm{f}}_j^{i_n}\\;]\\big\\}\\nonumber\\\\ & & \\times\\prod_{i\\in { \\textbf{i}}}\\alpha({\\mathrm{f}}_1^{i},\\ldots,{\\mathrm{f}}_k^{i})\\nonumber\\\\ & & = { \\mathrm{m}}^{i_1,\\ldots , i_n}(t+1),\\nonumber\\end{aligned}\\ ] ] where in the above we have used the property @xmath127 .",
    "finally , using the moment representation ( [ def : proboffviam ] ) in the above , we obtain @xmath128\\bigg\\}\\nonumber\\\\ & & \\times\\prod_{i\\in { \\textbf{i}}}\\alpha({\\mathrm{f}}_1^{i},\\ldots,{\\mathrm{f}}_k^{i}).\\nonumber\\end{aligned}\\ ] ]",
    "here we first derive the function @xmath82 then we study its properties .",
    "let us first compute the sum @xmath130\\bigg\\{\\operatorname*{sgn}\\left[\\sum_{j=1}^k { \\mathrm{f}}_j\\right]\\\\ & & + { \\mathbf{1}}\\left[\\sum_{j=1}^k { \\mathrm{f}}_j=0\\right]\\gamma({\\mathrm{f}}_1,\\ldots,{\\mathrm{f}}_k)\\bigg\\}\\nonumber\\\\ & = & \\sum_{\\{{\\mathrm{f}}_j\\ } } \\left[\\frac{1+{\\mathrm{m}}}{2}\\right]^{(\\sum_{j=1}^k{\\mathrm{f}}_j+k)/2 } \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]^{(k-\\sum_{j=1}^k{\\mathrm{f}}_j)/2}\\nonumber\\\\ & & \\times\\bigg\\{\\operatorname*{sgn}\\left[\\sum_{j=1}^k { \\mathrm{f}}_j\\right]+{\\mathbf{1}}\\left[\\sum_{j=1}^k { \\mathrm{f}}_j=0\\right]\\gamma({\\mathrm{f}}_1,\\ldots,{\\mathrm{f}}_k)\\bigg\\}\\nonumber\\\\ & = & \\sum_{\\ell=0}^k \\binom{k}{\\ell}\\left[\\frac{1+{\\mathrm{m}}}{2}\\right]^{\\ell } \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]^{k-\\ell}\\operatorname*{sgn}[2\\ell - k]~,\\nonumber\\end{aligned}\\ ] ] in the definition ( [ def : m ] ) for the specific choice of @xmath131 .",
    "this result leads to the function @xmath82 used in equation ( [ eq : m ] ) .",
    "now we use the above representation of @xmath138 to compute @xmath139^{\\ell } \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]^{k-\\ell-1}\\nonumber\\\\ & & -\\ell\\left[\\frac{1+{\\mathrm{m}}}{2}\\right]^{\\ell-1 } \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]^{k-\\ell}\\bigg)\\nonumber\\\\ & & + \\tanh(\\beta)\\frac{k}{4}{\\mathbf{1}}[k\\equiv0\\!\\!\\!\\!\\pmod{2}]\\binom{k}{k/2}\\nonumber\\\\ & & \\times{\\mathrm{m}}\\left(\\left[\\frac{1+{\\mathrm{m}}}{2}\\right]\\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{k/2 - 1}\\nonumber\\\\ & & = \\tanh(\\beta ) \\binom{k}{\\tilde{k}+1}(\\tilde{k}+1)\\nonumber\\\\ & & \\times\\left[\\frac{1+{\\mathrm{m}}}{2}\\right]^{\\tilde{k } } \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]^{k-\\tilde{k}-1}\\nonumber\\\\ & & + \\tanh(\\beta)\\frac{k}{4}{\\mathbf{1}}[k\\equiv0\\!\\!\\!\\!\\pmod{2}]\\binom{k}{k/2}\\nonumber\\\\ & & \\times{\\mathrm{m}}\\left(\\left[\\frac{1+{\\mathrm{m}}}{2}\\right]\\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{k/2 - 1}\\nonumber\\end{aligned}\\ ] ] so , using definition of @xmath140 , we obtain @xmath141 \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{(k-1)/2}\\nonumber\\end{aligned}\\ ] ] for @xmath3 odd and @xmath142 \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{k/2 - 1}\\nonumber\\end{aligned}\\ ] ] for @xmath3 even .    thus @xmath143 on for all @xmath144 and hence @xmath82 is a strictly increasing function .",
    "furthermore , the function @xmath82 at the point @xmath101 changes its slope from @xmath145 to @xmath146 at @xmath147 for @xmath3 odd and @xmath148 for @xmath3 even .",
    "let us now compute the second derivative of @xmath82 .",
    "differentiating equations  ( [ eq : df1 ] ) and ( [ eq : df2 ] ) with respect to @xmath99 gives us @xmath149 \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{(k-1)/2 - 1}\\nonumber\\end{aligned}\\ ] ] for @xmath3 odd and @xmath150 \\left[\\frac{1-{\\mathrm{m}}}{2}\\right]\\right)^{k/2 - 2}\\nonumber\\end{aligned}\\ ] ] for @xmath3 even .",
    "we note that both are of the form @xmath151 , where @xmath152 for all @xmath144 .",
    "thus the function @xmath82 is strictly convex and concave on the intervals @xmath92 and @xmath93 respectively .",
    "this work is supported by the eu fet project stamina ( fp7 - 265496 ) and the leverhulme trust grant f/00 250/h .",
    "j.  von  neumann , _ probabilistic logics and the synthesis of reliable organisms from unreliable components _ , ser .",
    "automata studies.1em plus 0.5em minus 0.4emprinceton , nj : princeton university press , 1956 , p. 4398 ."
  ],
  "abstract_text": [
    "<S> we study noisy computation in randomly generated k - ary boolean formulas . </S>",
    "<S> we establish bounds on the noise level above which the results of computation by random formulas are not reliable . </S>",
    "<S> this bound is saturated by formulas constructed from a single majority - like gates . </S>",
    "<S> we show that these gates can be used to compute any boolean function reliably below the noise bound .    </S>",
    "<S> random boolean formulas , @xmath0-noise , reliable computation . </S>"
  ]
}