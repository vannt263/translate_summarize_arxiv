{
  "article_text": [
    "generating rankings is a well known methodology to order a set of elements to allow users or tools to immediately investigate the best performing elements , according to the applied ranking criterion .",
    "this is frequently done , in portals such as ranker.com that aim at crowdsourcing ( subjective ) entity rankings , in data warehousing environments that rank business objects on objective / measurable criteria , or given in form of tables on the web .",
    "rankings can serve ad - hoc information demands or give access to deeper analytical insights .",
    "consider for instance mining semantically similar google - style keyword queries based on the query - result lists , or dating portals that let users create favorite lists that are later - on used for match making .",
    "such rankings are usually rather short instead of exhaustively ranking the global domain or rank - able items .",
    "this work emphasizes on kendall s tau as the distance measure for retrieving rankings in nearest neighbor ( nn ) search  for a user - given distance threshold and a ranking that serves as the query .",
    "although the kendall s tau distance is originally defined over pairs of rankings that capture the same ( full ) domain of elements , a definition of the generalized kendall s tau distance for top - k list is given by fagin et al .",
    "in  @xcite . the authors in the same work also show that the generalized kendall s tau distance violates the triangle equality , hence , is not a metric , so , using metric space index structures , like the m - tree  @xcite , is discarded immediately .",
    "using the fact that at least one element should be contained in both rankings in order to have a reasonable , minimum similarity , one classical solution of nn search is to use inverted indices .",
    "such indices are very efficient in answering set - containment queries  @xcite . on the other hand",
    ", locality sensitive hashing ( lsh ) performs efficiently in approximate nn search for high - dimensional data . in literature , there exist various hash function families for different metric distances such as @xmath0 , euclidean , or hamming distance  @xcite .",
    "although the kendall s tau distance is a non - metric distance function , we observe a similarity between kendall s tau and the hamming distance and also the jaccard distance which encouraged us to work on lsh hash function families for the kendall s tau distance .",
    "we consider a set of rankings @xmath1 , where each @xmath2 has a domain @xmath3 of fixed size @xmath4 .",
    "the global domain of items is then @xmath5 .",
    "we investigate the impact of various choices of @xmath4 on the query performance in the experiments .",
    "for instance , we have the following input given :     * i d * & * ranking content * + @xmath6 & @xmath7 $ ] + @xmath8 & @xmath9 $ ] + @xmath10 & @xmath11 $ ] +    rankings are represented as arrays or lists of items ; where the left - most position , denotes the top ranked item .",
    "the rank of an item @xmath12 in a ranking @xmath13 is given as @xmath14 .    at query time , we are provided with a query ranking @xmath15 , where @xmath16 and @xmath17 , a distance threshold @xmath18 , and distance function @xmath19 . our objective is to find all rankings which belong to @xmath1 and has distance less than or equals to @xmath18 , i.e , @xmath20    as mentioned above , rankings can be interpreted as short sets and we can build an inverted index over them , to look up at query time those rankings that have at least one item overlap with the query s items .    considering the above example , for a query ranking @xmath21 $ ] , ranking @xmath6 does not overlap at all with the query items , while @xmath8 and @xmath10 do overlap .",
    "the retrieval of overlapping candidates using an inverted index is very efficient  @xcite . for the found candidates ,",
    "the distance function is applied with respect to the query and the true results are returned .",
    "note that , we assume that the distance threshold @xmath18 is strictly smaller than the maximum possible distance ( normalized , 1 ) , thus , in fact the inverted index can find all result rankings .    however , kendall s tau is defined as the pairwise disagreement between two permutation of a set , which suggests building an inverted index that is labeled ( as keys ) by pairs of items .",
    "this , however , calls for investigating if looking up at query time only a few pairs is sufficient .      here",
    ", we have summed up the main contributions of this work .    * we propose two different hash families for kendall s tau distance that facilitate lsh for nn search .",
    "* we compare the performance of those lsh schemes and traditional inverted indices by an experimental study using real - world rankings .",
    "the paper is organized as follows .",
    "section  [ sec : background ] gives a brief overview on the main principles of kendall s tau , locality sensitive hashing , and inverted indices .",
    "section  [ sec : workingmodel ] presents the use of a plain inverted index for query processing and derives a distance bound for improved efficiency .",
    "section  [ sec : pairs ] shows the consequences of interpreting rankings as sets of pairs and motivates the derivation of lsh schemes presented in section  [ sec : hashingscheme ] .",
    "section  [ sec : experiments ] reports on the details of a conducted experimental evaluation using two real - world datasets .",
    "section  [ sec : relatedwork ] discusses related work .",
    "section  [ sec : conclusion ] concludes the paper .",
    "complete rankings are considered to be permutations over a fixed domain @xmath22 .",
    "we follow the notation by fagin et al .",
    "@xcite and references within .",
    "a permutation @xmath23 is a bijection from the domain @xmath24 onto the set @xmath25=\\{1 , \\ldots , n\\}$ ] . for a permutation @xmath23 , the value @xmath26 is interpreted as the rank of element @xmath12 .",
    "an element @xmath12 is said to be ahead of an element @xmath27 in @xmath23 if @xmath28 . the kendall s tau distance @xmath29 measures how both rankings differ in terms of concordant and discordant pairs : for a pair @xmath30 with @xmath31 we let @xmath32 if @xmath12 and @xmath27 are in the same order in @xmath33 and @xmath34 and @xmath35 if they are in opposite order . then kendall s tau is given as @xmath36 .",
    "kendall s tau is a metric , that is , it has the symmetry property , i.e. , @xmath37 , is regular , i.e. , @xmath38 iff @xmath39 , and suffices the triangle inequality @xmath40 , for all @xmath41 in the domain .    in this work , we consider incomplete rankings , called top - k lists in  @xcite . formally , a top - k list @xmath13 is a bijection from @xmath42 onto @xmath43 $ ] .",
    "the key point is that individual top - k lists , say @xmath6 and @xmath8 do not necessarily share the same domain , i.e. , @xmath44 .",
    "fagin et al .",
    "@xcite discuss how the above two measures can be computed over top - k lists .",
    "none of the discussed ways to compute kendall s tau over top - k lists is a metric .",
    "this work considers incomplete rankings ( lists ) and applies the generalized kendall s tau distance function defined by fagin  @xcite .",
    "given two top - k lists @xmath6 and @xmath8 that correspond to two permutations @xmath33 and @xmath34 on @xmath45 , the generalized kendall s tau distance with penalty zero , denoted as @xmath46 is defined as follows :    * if @xmath47 and their order is the same in both list then @xmath48 otherwise @xmath49 . *",
    "if @xmath50 and @xmath12 or @xmath51 , let @xmath52 and @xmath53 then @xmath48 otherwise @xmath49 . * if @xmath54 and @xmath55 or vice versa then @xmath56 . *",
    "if @xmath50 and @xmath57 or vice versa @xmath48 .",
    "locality sensitive hashing addresses the problem of efficient approximate nearest neighbor ( nn ) search .",
    "the key idea is to map objects into buckets via hashing with the property that similar objects have a higher chance to collide ( in the same bucket ) than dissimilar ones .",
    "a large amount of research has been conducted on lsh in order to find fast and robust families of hash functions for different distance functions .",
    "let us consider family @xmath58 of hash functions that map a point @xmath59 to some universe @xmath60 . for threshold @xmath61 and approximation factor @xmath62 , @xmath58",
    "is called @xmath63-sensitive if for any two point @xmath64    * if @xmath65 then @xmath66 * if @xmath67 then @xmath68    @xmath69 represents a ball that is centered at @xmath15 and has radius @xmath61 , i.e. , if a point @xmath70 is in @xmath71 then its distance to @xmath15 is at most @xmath61 . in order for lsh to be useful for dissimilarity measure ( where @xmath72 ) we should have @xmath73 and @xmath74 .    instead of employing only one hash function to determine the bucket to put an object in , several @xmath75 out of @xmath58",
    "are used to create a label @xmath76 .",
    "two objects @xmath77 and @xmath78 are put into the same bucket if , obviously , @xmath79 , hence , the more @xmath75 are used in @xmath80 , the fewer objects a bucket will contain . on the other hand , if two objects are placed in the same bucket , the chance that they are really similar is increased .    to counter the problem of suffering from low recall ( i.e. , the fraction of results found ) @xmath81 different hash tables are created using @xmath81 different @xmath82 functions .",
    "then , for a query point @xmath15 , if points @xmath70 and @xmath15 are both hashed to the same bucket in _ any _ of the @xmath81 hash tables , @xmath70 is considered a potential candidate . finally , if @xmath83 then it is consider as near neighbor of @xmath15 , otherwise not .",
    "rankings can be interpreted as plain sets , ignoring the order among items .",
    "one way to index sets of items is to create a mapping of items to the rankings in that the items are contained in .",
    "this resembles the basic inverted index known from information retrieval and also used for querying set - valued attributes  @xcite .",
    "an inverted index consists of two components  a _ dictionary _ @xmath22 of _ objects _ and the corresponding _ posting lists _ ( aka .",
    "index list ) that record for each object information about its occurrences in the relation ( cf .",
    ", @xcite for an overview and implementation details ) .    for a given item ,",
    "the inverted index is accessed and returns all rankings that contain the item .",
    "in this section , we discuss how inverted indices can be used for computing kendall s tau and derive distance bounds for improved performance .",
    "we use a basic inverted index on rankings , shown in table  [ table1 ] , as a baseline in the experimental evaluation .    [",
    "cols=\"^ \" , ]     @xmath84 +    * entity rankings * : this dataset contains 25,000 top - k rankings which has been mined from the knowledge base , as described in  @xcite .    * :* this dataset contains 1 million keyword query that are randomly selected out from a published query log of a large us internet provider , against the new york times archive  @xcite using a standard scoring model from the information retrieval literature .",
    "the dataset holds real world entities where each entity occur in few rankings while the nyt dataset holds many popular documents that appear in many query result rankings .",
    "the following approaches are compared to each other :    * the filter and validate technique on the simple inverted index denoted as * invin*. * the invin technique on the simple inverted index combined with dropping some posting lists from consideration using the distance bound given in section  [ sec : workingmodel ] , denoted as * invin+drop*. * the presented lsh scheme 1 , i.e. , the unsorted pairwise index , denoted as * scheme 1*. * the presented lsh scheme 2 , i.e. , the sorted pairwise index , denoted as * scheme 2*.    for both lsh schemes , unless @xmath81 is explicitly stated , @xmath81 is tuned such that 100% recall are reached .",
    "runtime performance is measured in terms of average runtime for @xmath85 queries for varying the _ normalized _ distance threshold @xmath86 ( given by @xmath87 ) .",
    "we see in figure  [ fig : yago ] for the dataset that using the pairwise indices much less candidates are retrieved than for simple inverted indices .",
    "since recall is tuned to 100% this means that much fewer false positives are evaluated .",
    "this happens as , according to the lsh technique , true positive candidates are more likely to be hashed into the same bucket .",
    "this is consistent through datasets and parameters except for @xmath88 ( larger difference ) and @xmath89 ( almost exactly the same performance ) for @xmath90 for the dataset ( cf .",
    ", figure  [ fig : nyt ] ) where invin+drop performs best . for the plots showing the number of retrieved candidates",
    ", we put the actual number of results to mark the lower bound .",
    "these characteristics are also reflected in the runtime performance for the dataset , but varies for the dataset .",
    "for the latter , in some cases ( particularly for @xmath88 ) both lsh schemes show inferior performance compared to the invin+drop .",
    "we also see that the sorted pairwise index ( scheme 2 ) consistently retrieves fewer candidates than the unsorted pairwise index ( scheme 1 ) .",
    "this property reflects that for different @xmath81 values , probability of retrieving candidates that belong to @xmath91 in scheme 2 is higher than scheme 1 , which has been theoretically shown in section  [ sec : hashingscheme ] for @xmath92 .",
    "thus , in other way , scheme 2 is less likely to find a true positive result than scheme 1 for same @xmath81 , which also reflects in table  [ table5 ] and table  [ table6 ] .",
    "in addition , comparing the columns of the table , we see that the recall increases as @xmath81 increases ; which is in line with the lsh theory .",
    "we also understand the characteristics of the datasets by analyzing the recall . for both schemes , with the same threshold @xmath13 and value of @xmath81 ,",
    "the recall for the dataset is always larger or equal to the recall for the dataset .",
    "this reflects that elements of the dataset are featured more skewed than in the dataset .",
    "there is an ample work on computing relatedness between ranked lists of items , such as to mine correlations or anti - correlations between lists ranked by different attributes .",
    "arguably , the two most prominent similarity measures are kendall s tau and spearman s footrule .",
    "fagin et al .",
    "@xcite study comparing incomplete top-@xmath4 lists , that is , lists capturing a subset of a global set of items , rendering the lists incomplete in nature . in the scenarios motivating our work , like similarity search favorite / preference rankings , lists are naturally incomplete , capturing , e.g. , only the top-10 movies of all times . in this work ,",
    "we focus on the computation of kendall s tau distance .",
    "helmer and moerkotte @xcite present a study on indexing set - valued attributes as they appear for instance in object - oriented databases .",
    "retrieval is done based on the query s items ; the result is a set of candidate rankings , for which the distance function can be computed . for metric spaces , data - agnostic structures for indexing objects",
    "are known , like the m - tree by ciaccia et al .",
    "@xcite ; but kendall s tau over incomplete list is not a metric .",
    "wang et al .",
    "@xcite propose an adaptive framework for similarity joins and search over set - valued attributes , based on prefix filtering .",
    "this framework can be applied in the filter and validate technique on the inverted index discussed in this work .",
    "the proposed lsh schemes are related to the concept of prefix filtering with parameter 2 ; a detailed investigation of this is part of our future work .",
    "the key idea behind locality sensitive hashing ( lsh )  @xcite is the usage of locality preserving hash functions that map , with high probability , close objects to the same hash value ( i.e. , hash bucket ) .",
    "different parameters of locality preserving functions together with the number of hash function used , render lsh a parametric approach . studies concerning lsh parameter tuning @xcite have been performed providing an insight into lsh parameter tuning for optimal performance .",
    "lsh can be extended for non - metric distance using reference object has explained in  @xcite .",
    "diaz et al .",
    "@xcite consider matchmaking between users in a dating portal .",
    "the attributes considered are scalar ( e.g. , age , weight , and height ) or categorical ( e.g. , married , smoking , and education ) and focus is put on feature selection and learning for effective match making .",
    "work on rank aggregation  @xcite aims at synthesizing a representative ranking that minimizes the distances to the given rankings , for a given input set of rankings .",
    "in this paper , we proposed two different hash function families for querying for similar top - k lists with respect to the generalized kendall s tau distance . from the experimental results ,",
    "we have concluded that the performance of query processing using lsh scheme outperforms the original inverted index for datasets where the entities of a domain are `` uniformly '' distributed in rankings , whereas the performance of the lsh schemes is similar or sometimes inferior on datasets where some popular entities appear in large amount of rankings .",
    "we also studied the differences between the two proposed hashing schemes both theoretical and experimentally .",
    "further , we would like to investigate indexing beyond pairs ( i.e. , using triplets and more ) of ranked items and to harness the derived distance bounds and learned influences of @xmath81 on pruning the index size ."
  ],
  "abstract_text": [
    "<S> we consider the problem of similarity search within a set of top - k lists under the kendall s tau distance function . </S>",
    "<S> this distance describes how related two rankings are in terms of concordantly and discordantly ordered items . as top - k lists are usually very short compared to the global domain of possible items to be ranked , creating an inverted index to look up overlapping lists is possible but does not capture tight enough the similarity measure . in this work , </S>",
    "<S> we investigate locality sensitive hashing schemes for the kendall s tau distance and evaluate the proposed methods using two real - world datasets . </S>"
  ]
}