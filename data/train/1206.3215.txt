{
  "article_text": [
    "graphics processing units ( gpus ) can have better performance for mathematical operations on large arrays when compared to traditional central processing units ( cpus ) .",
    "the fast fourier transform ( fft ) is one application for which gpus have a significant performance advantage over cpus",
    ". the performance advantage can be significant for simulations which fit within the memory constraints of a single gpu .",
    "gpu acceleration has largely been accomplished in variants of c with variants of fortran being a recent addition .",
    "a comparison of performance of the lesser known openacc and cuda fortran on gpus is of interest because a large number of legacy codes use fortran , @xcite @xcite and because ( * ? ? ?",
    "* chp .  6 ) indicates that on cpus , fortran compilers typically generate more efficient scientific computing codes than c compilers .",
    "previous works which have examined speedup offered by single gpus in solving differential equations using fourier transforms are @xcite , @xcite and @xcite .    in this paper , extensions of fortran for gpus",
    "when solving nonlinear pdes with pseudospectral methods are compared.the user friendliness of these different gpu programming models is described .",
    "a benchmark suite of algorithms for three different nonlinear pdes with fourier pseudospectral methods is also provided .",
    "at present it is unclear what programming model will be widely adopted for accelerators .",
    "some current options include opencl , openacc , openhmpp , f2c - acc , cuda , and cuda fortran",
    ". this note will compare cuda c , cuda fortran , and openacc gpu programs to serial and openmp@xcite fortran cpu programs .",
    "openacc is a standard currently under development to allow for parallel programming of cpus and gpus@xcite .",
    "it primarily uses directives to move data between a host cpu and a gpu and parallelize operations on the gpu .",
    "fortran , c , and c++ are supported and there is a hope that it will be merged with openmp in the future to allow for a unified interface to gpus and other accelerators .",
    "cuda c is a set of extensions to c that allow special functions , called kernels , to be executed on supported nvidia gpus@xcite .",
    "cuda c provides a lower level interface than many of the other application interfaces discussed here .",
    "cuda fortran , is a set of extensions to fortran that allows kernels to execute on nvidia gpus@xcite .",
    "the main constructs are similar to cuda c ; however , cuda fortran has several directives that can automatically generate kernels for common cases .",
    "cuda fortran provides both a high level interface similar to openacc and a low level interface like cuda c.",
    "the three choosen equations , which are of mathematical and physical interest , can be solved entirely using fourier pseudospectral methods and simple representative timestepping schemes .",
    "the resulting programs are short , can be understood in their entirety by a single person and only require an fft routine .",
    "the focusing two dimensional cubic nonlinear schrdinger equation is @xmath0 where @xmath1 is a complex valued function of time , @xmath2 , and two spatial variables , @xmath3 and @xmath4 .",
    "this equation arises in a variety of contexts including quantum mechanics , in simplified models for lasers , and water waves .",
    "when @xmath5 has periodic boundary conditions , the cubic schrdinger equation has two conserved quantities , @xmath6 known as the mass and energy respectively ; they can be used to assess the accuracy of a numerical solution . for more background on this equation ,",
    "see @xcite and @xcite .      the @xmath7 sine - gordon equation",
    ", @xmath8 arises in many different applications , including propagation of magnetic flux on josephson junctions , sound propagation in a crystal lattice , and several others discussed in @xcite .",
    "it has a conserved hamiltonian @xmath9 which is useful in evaluating the accuracy of numerical solutions .",
    "the 2d incompressible navier - stokes equations in stream function ( @xmath5)-vorticity ( @xmath10 ) form are @xmath11 these equations model fluid flow , and further background on them can be found in @xcite among other references .",
    "the taylor - green vortex solution of these equations is @xmath12",
    "fourier pseudospectral methods are a class of numerical methods to solve partial differential equations that utilize the fourier transform .",
    "these methods became popular after the publication of @xcite ; other expositions are in @xcite , @xcite , @xcite , @xcite , @xcite , @xcite and @xcite .",
    "these methods utilize the fact that differentiation of a function is a simple and fast multiplication by the wave number in fourier space .",
    "the nonlinear terms in are computed in real space .",
    "this section gives a brief description of the second order in time algorithms used .",
    "the programs are available at http://arxiv.org/abs/1206.3215 .",
    "the nonlinear schrdinger equation is approximated by splitting it into two equations which can be solved exactly , @xcite and @xcite .",
    "the fourier transform of @xmath5 will be denoted by @xmath13 . in fourier space",
    "one first solves @xmath14 for half a time step , @xmath15 . letting @xmath16 and @xmath17",
    "denote the wave numbers in the @xmath3 and @xmath4 directions , eq .",
    "is solved by @xmath18\\hat{\\psi}(t=0)$ ] .",
    "the solution of @xmath19 for a full time step is @xmath20 , since @xmath21 is conserved .",
    "finally eq .   is solved for another half time step to get the solution a full time step later .",
    "following @xcite , the second derivative in time is approximated by a central difference .",
    "the resulting numerical method is @xmath22      time is discretized using the crank - nicolson method , where the nonlinear terms are solved for using fixed point iteration @xmath23 the superscript @xmath24 denotes the time step and the superscript @xmath25 denotes the iterate .",
    "the fixed point iterations stop when @xmath26",
    ".a list of the compiler options used to build the codes .",
    "codes in parentheses use all flags in row .",
    "pgi 12.4 requires the flag -mlarge_arrays when more than 2 gb are allocated . [ cols=\"^,^,^,^\",options=\"header \" , ]     all three equations are solved using different numerical methods so actual computation time comparisons between methods are of less interest than common scaling trends . for this comparison",
    "all of the codes were compiled with the compilers and flags shown in table [ table : info ] .",
    "+     ( bigger is better).,width=336 ]    the cpu simulations were run on amd opteron magny - cours 6136 2.4 ghz dual - socket eight - core processors with 48 gb of memory and the gpu simulations on nvidia fermi m2070 with 6 gb of memory per gpu .",
    "double precision floating point arithmetic was used .",
    "computation times are only measured for advancing the numerical solution forward in time , they do not include setup time for creating fft plans , allocations , calculating exact solutions , etc .",
    "because in production simulations where many time steps are taken , these will be negligible .",
    "performance differences between fortran compilers on cpus do not change the conclusions .",
    "the programs used 4 double complex arrays , 2 arrays for the actual computation and 2 further arrays , to calculate the mass and energy . in all tests",
    ", the mass was conserved up to machine precision and the energy was constant to within 6 significant figures .",
    "table [ table : nls ] shows that the gpu gives a speed up of up to a factor of 40 compared to a multicore openmp cpu implementation .",
    "an initial naive cuda fortran implementation for which kernel parallelization options are left to the compiler was typically a factor of 2 slower than the cuda c implementation for which block sizes were specified .",
    "gpus had speed ups of order 100 times compared to a single cpu core .",
    "figure [ fig : chart ] shows that for this code , cuda fortran had the best performance .      the programs used real - to - complex fourier transforms .",
    "they required 2 double precision arrays of size @xmath27 and 3 double complex arrays of size @xmath28 . in all tests ,",
    "the final hamiltonian was within 6 significant figures .",
    "table [ table : sg ] shows that cuda c performs the best , followed closely by cuda fortran and openacc .",
    "the differences between the gpu implementations were relatively small compared to the difference between gpu and cpu implementations .",
    "the gpu implementations performed on the order of 50 times better than a single core cpu .",
    "figure [ fig : chart ] shows that for this code , cuda c had the best performance .",
    "the programs use the same real - to - complex fourier transforms as the sine - gordon equation , where the real - valued input array has a size of @xmath29 and the complex - valued output array is of size @xmath30 .",
    "10 arrays are used for the gpu codes and 11 arrays are used for cpu codes , where the extra array is required because fftw does not preserve its input .",
    "five complex - real transforms and 1 real - complex transform are used in the timestepping loop .",
    "table [ table : ns ] shows that the gpu gives a speed up of up to a factor of 30 compared to a single cpu core .",
    "figure [ fig : chart ] shows that for this code , openacc does better than cuda c , and cuda fortran has the best performance .",
    "porting existing fortran codes to cuda fortran was simple and intuitive ; the combination of fortran and open acc was a little less intuitive , but still relatively straightforward .",
    "the differences between cpu and gpu versions with cuda fortran or openacc are small , so it is feasible to maintain cpu and gpu versions of the same code .",
    "in contrast , porting a fortran code to cuda c is error prone , requires significant reprogramming and a good understanding of the gpu architecture .",
    "finally , @xcite observed that the f2c - acc directive based fortran to cuda compiler results in a runtime code with better performance than regular cuda fortran .",
    "the performance of cuda fortran codes may experience very different speedups with minor changes to the parallelization or compiler options .",
    "choosing these options optimally requires some knowledge of the underlying architecture  autotuning compilers would be useful for doing this .",
    "this work used the computers forge and kollman within the extreme science and engineering discovery environment , which is supported by national science foundation grant number oci-1053575 .",
    "b. cloutier and p. rigge were supported by the university of michigan undergraduate research opportunity program and blue waters undergraduate petascale education program respectively .",
    "the authors acknowledge support from a faculty grant for innovations in teaching with technology from the university of michigan and a blue waters undergraduate petascale module development grant from the shodor foundation .",
    "they thank bennet fauber , robert krasny , carl ponder , sarah tariq , divakar viswanath , jared whitehead and brian wylie for help and suggestions , and the reviewers for a careful reading .",
    "1 h.  bauke , c.  h.  keitel , _ accelerating the fourier split operator method via graphics processing units _ ,",
    "computer physics communications 182 , 2454 - 2463 , 2011 . j.  p.  boyd , _ chebyshev and fourier spectral methods _ , dover , 2001 c.  canuto , m.  y.  hussaini , a.  quarteroni and t.  a.  zang , _ spectral methods : fundamentals in single domains _ , springer , 2006 .",
    "f.  chen , _ efficient spectral methods for coupled elliptic systems with applications in phase - field modeling _ , midwest pde seminar , notre dame , may 2012",
    ". g.  chen , b.  cloutier , n.  li , b.k .",
    "muite , p.  rigge and s.  balakrishnan , a.  souza , j.  west , _ parallel spectral numerical methods _ , submitted , 2012 .",
    "r.  donninger and w.  schlag , _ numerical study of the blowup / global existence dichotomy for the focusing cubic nonlinear klein - gordon equation _ , nonlinearity 24 , 2547 - 2562 , 2011 .",
    "d.  gottlieb and s.  a.  orszag , _ numerical analysis of spectral methods : theory and applications _",
    ", siam , 1999 . t.  henderson , j.  middlecoff , j.  rosinski , m.  govett , p.  madden , _ experience applying fortran gpu compilers to numerical weather prediction _",
    "34 - 41 , proc .",
    "symposium on application accelerators in high performance computing ( saahpc ) , 2011 .",
    "j.  s.  hesthaven , s.  gottlieb , d.  gottlieb , _ spectral methods for time - dependent problems _ , cambridge university press , 2007 .",
    "j.  levesque and g.  wagenbreth , _ high performance computing : programming and applications _ , crc press , 2011 .",
    "_ nvidia cuda c programming guide , version 4.2 . _ nvidia , april 2012 .",
    "openacc-standard.org , _ the openacc@xmath31 application programming interface _ , 2011 openmp architecture review board , _ openmp application program interface , version 3.1 _ , openmp architecture review board , 2011 .",
    "the portland group .",
    "_ cuda fortran programming guide and reference . _ the portland group , 2012 .",
    "a.  scott , f.  chu , and d.  mclaughlin , _ the soliton : a new concept in applied science _ , proceedings of the ieee , vol .",
    "61 , no . 10 , 1973 . j.  shen , t.  tang and l.  -l .",
    "wang , _ spectral methods : algorithms , analysis and applications _ , springer , 2011 .",
    "l.  n.  trefethen , _ spectral methods in matlab _ , siam , 2000 .",
    "d.  j.  tritton , _ physical fluid dynamics _ , clarendon press , 1988 .",
    "j.  yang , _ nonlinear waves in integrable and nonintegrable systems _ , siam , 2010 .",
    "f.  zafar , d.  ghosh , l.  sebald and s.  zhou , _ accelerating a climate physics model with opencl _ , pp .",
    "24 - 33 , proc .",
    "symposium on application accelerators in high performance computing ( saahpc ) , 2011 .",
    "zhang , s .- q .",
    "wang , z .- x .",
    "yao , _ accelerating 3d fourier migration with graphics processing units _ , geophysics vol .",
    "6 , 129 - 139 , 2009 ."
  ],
  "abstract_text": [
    "<S> a comparison of pgi openacc , fortran cuda , and nvidia cuda pseudospectral methods on a single gpu and gcc fortran on single and multiple cpu cores is reported . </S>",
    "<S> the gpu implementations use cufft and the cpu implementations use fftw . </S>",
    "<S> porting pre - existing fortran codes to utilize a gpus is efficient and easy to implement with openacc and cuda fortran . </S>",
    "<S> example programs are provided . </S>"
  ]
}