{
  "article_text": [
    "the _ feedback arc set _",
    "problem , shortened fasp , is to delete as less as possible arcs of a graph such that the resulting subgraph is acyclic , i.e. , it contains no directed cycle .",
    "another equivalent formulation is to find a linear ordering of the vertices of the graph such that the number of back arcs is minimized .",
    "therefore the problem is also known as _",
    "maximum acyclic subgraph _ problem or _ linear ordering problem_. for directed graphs this problem is one of the classic np - complete problems @xcite . the problem of deleting a smallest subset of vertices to result in an acyclic subgraph is known as _ feedback vertex set problem _ ( fvsp ) .",
    "the fasp and fvsp are linear time reducible among each other , by keeping the relevant parameters fix as we will assert in section [ ssec : notation ] , alternatively see @xcite",
    ". therefore algorithmic properties of the two problems are transferable .",
    "in particular , the fvsp is also np - complete .",
    "analogous problems for undirected graphs can be defined . as shown in @xcite",
    "the feedback vertex set problem remains np - complete , while the feedback arc set problem can be solved efficiently by solving a maximum spanning tree problem .",
    "an excellent overview on feedback sets can be found in @xcite .",
    "the problem of finding minimal transversals of directed cuts is closely related to the fasp , see @xcite .",
    "the fasp stays np - complete for graphs where every node has an in - degree and out - degree of at most three or line digraphs even when every clique has at most size three @xcite .",
    "it is also np - complete for tournament graphs @xcite .",
    "however , there also exist graph classes possessing polynomial time algorithms , e.g. , planar directed graphs or more general weakly acyclic digraphs @xcite , and reducible flow graphs @xcite .",
    "the fasp or fvsp has a multitude of applications , e.g. , retiming synchronous circuitry @xcite , circuit testing @xcite , computational biology and neuroscience @xcite , network analysis and operating systems @xcite .      in section [ prel ]",
    "we provide the graph theoretical concepts , which are fundamental for this article . in section",
    "[ main ] we present our main results .",
    "the fact that the fasp / fvsp on multi - digraphs can be reduced to simple graphs is asserted in section [ sec : essential ] and the first a priori problem size reduction is deduced . in section",
    "[ sec : elecyc ] we construct an algorithm determing the induced subgraph of all cycles with one arc in common efficently .",
    "this knowledge is used in section [ sec : iso ] to introduce the concept of _ isolated cycles _ and _ resolvable graphs _ and providing an efficent solution of the fasp / fvsp on resolvable graphs .",
    "moreover , the second a priori problem size reduction is given .",
    "afterwards we concentrate on the main result of the article .",
    "namely , that the fasp / fvsp possesses a bellmann decomposition and present exact solutions using this fact to apply a dynamic programming technique in section [ bell ] . in section [ greedy ] ,",
    "we discuss how greedy approaches behave with respect to the problems and develope a strategy for a general fasp / fvsp - solver .",
    "finally , we discuss our results and other alternatives in section [ algo ] .",
    "before we can introduce the fasp ( fvsp ) formally , some basic concepts of graphs and cycles need to be mentioned .      a _ multi - directed graph _ , or _",
    "multi - digraph _",
    ", @xmath0 consists of a set of vertices @xmath14 and a multi - set of arcs @xmath15 containing elements from @xmath16 . a _ directed graph _ or _ digraph _ is a multi - digraph with a simple arc set @xmath15 , i.e. , @xmath17 and therefore every @xmath3 occurs exactly once .",
    "a digraph is called _ simple _ if there are no loops , i.e. , @xmath18 , where @xmath19 denotes the diagonal .",
    "if not stated otherwise throughout the article @xmath20 denotes a finite , connected , directed and loop - free multi - digraph and @xmath21 , @xmath22 denote the graphs which occur by deleting the arc @xmath23 and possibly occurring isolated vertices or the vertex @xmath24 and all its adjacent arcs . for @xmath25 and @xmath26",
    "the graphs @xmath27 , @xmath28 are analogously defined .",
    "moreover , @xmath29 , @xmath30 , @xmath31 denote the induced graph , the set of all arcs , the set of all vertices which are inherited by a set or set system of graphs , arcs or vertices . with @xmath32",
    "we denote the power set of a given set @xmath33 .    for an arc @xmath34",
    "we denote @xmath35 as the _ tail _ and @xmath36 as the _ head _ of the arc .",
    "two arcs @xmath23 and @xmath37 are called _ consecutive _ if @xmath38 and are called _ connected _ if @xmath39 . a _ directed path _ from a vertex @xmath40 to a vertex @xmath24 is a sequence of consecutive arcs where @xmath40 is the tail of the first arc and @xmath24 is the head of the last . a",
    "_ connected path _ from a vertex @xmath40 to a vertex @xmath24 is a sequence of connected arcs containing @xmath40 and @xmath24 as vertices .",
    "a digraph is _ connected _ if there is a connected path between every pair of its vertices .",
    "a _ weighted digraph _ @xmath41 or @xmath42 , is a digraph with an additional weight function @xmath43 , which assigns a ( usually positive ) weight to each arc . for a given vertex @xmath44 the sets @xmath45",
    ", @xmath46 shall denote the set of all outgoing or incoming vertices or arcs of @xmath24 respectively .",
    "the _ indegree _",
    "( respectively _ out degree _ ) of a vertex @xmath40 is given by @xmath47 and the degree of a vertex is @xmath48 .",
    "@xmath49 shall denote the maximal ( in / out ) degree , respectively .    a directed ( connected )",
    "_ cycle _ of a digraph is a multiset of arcs @xmath50 such that there is a permutation @xmath51 with @xmath52 and @xmath53 are consecutive ( connected ) , for @xmath54 .",
    "a _ loop _ is a cycle containing only a single arc .",
    "a cycle is _ simple _ if the set of contained arcs @xmath55 is a simple set , i.e. , it visits every arc , it contains , exactly once .",
    "a cycle is _ elementary _ if each vertex it contains is visited exactly once .",
    "we denote with @xmath56 the set of all directed cycles and with @xmath57 , @xmath58 the set of all elementary or simple cycles , respectively .",
    "analogously , @xmath59 and @xmath60 shall denote the set of all _ connected _ ( and not necessarily directed ) _ elementary _ and _ simple cycles _ respectively . if not stated otherwise in the whole article a cycle is assumed to be directed and elementary .",
    "feedback vertex set _",
    "( fvs ) of @xmath61 is a set @xmath62 such that @xmath28 is _ acyclic _ , i.e. , @xmath63 contains no directed cycle .",
    "feedback arc set _",
    "( fas ) of @xmath61 is a set @xmath64 such that @xmath27 is acyclic .",
    "the directed _ line graph _ @xmath65 of a digraph @xmath61 is a digraph where each vertex represents one of the arcs of @xmath61 and two vertices are connected by an arc if and only if the corresponding arcs are consecutive .",
    "in contrast the _ natural hypergraph _",
    "@xmath66 of @xmath61 is constructed by identifying the arcs of @xmath61 with the vertices of @xmath67 , i.e. , @xmath68 is a simple set of vertices such that @xmath69 , where @xmath70 is counted with multiplicities . by fixing the identification @xmath71",
    "we introduce a directed hyperarc @xmath72 for every vertex @xmath44 by requiring that head and tail coincide with all outgoing and ingoing arcs respectively , i.e. , @xmath73 .",
    "consequently , @xmath74 and therefore every hyperarc can be labeled by its corresponding vertex .",
    "see figure [ fig : hyp ] for an example .",
    "the directed , elementary cycles of the line graph @xmath75 of @xmath61 are in 1 to 1 correspondence to the directed , simple cycles of @xmath61 while the directed simple cycles of @xmath67 , i.e. , directed cycles which run through every hyper arc exactly once are called _ berge cycles _ , @xcite .",
    "note that if @xmath61 is a simple digraph , i.e. , there are no multi arcs , then the set of all berge cycles of @xmath67 are in 1 to 1 correspondence to the set of all elementary cycles of @xmath61 .",
    "for a set of hyperarcs @xmath76 of @xmath67 we denote with @xmath77 the corresponding vertices in @xmath61 .",
    "we summarize some facts in this regard .",
    "let @xmath0 be a graph .    1 .",
    "the line graph @xmath65 can be constructed in @xmath78 .",
    "2 .   the natural hypergraph @xmath66 can be constructed in @xmath79 .",
    "@xmath80 is a fvs of @xmath75 if and only if @xmath81 is a fas of @xmath61 .",
    "4 .   @xmath76 is a fas of @xmath67 , with respect to the notion of berge cycles , if and only if @xmath82 is a fvs of @xmath61 .",
    "[ berge ]    storing @xmath61 as a adjacency list and following the definitions immediately implies @xmath83 and @xmath84 . since any two vertices @xmath85 of the line graph @xmath75 are adjacent if and only if the corresponding arcs are consecutive in @xmath61 and any two arcs @xmath86 of @xmath67 are consecutive , i.e. , @xmath87 , if and only if the corresponding vertices @xmath40 and @xmath24 are adjacent in @xmath61 , @xmath84 and @xmath88 follow .",
    "[ bip ] note that by introducing an additional arc @xmath89 between head and tail of every hyperarc @xmath90 of @xmath67 , the natural hypergraph becomes a directed graph @xmath91 with @xmath92 , @xmath93 .",
    "the directed cycles of @xmath94 are in 1 to 1 correspondence to the berge cycles of @xmath67 and a fas @xmath82 of @xmath94 is in 1 to 1 correspondence to a fas @xmath95 of @xmath67 by identifying @xmath95 with the additional introduced arcs belonging to the hyperarcs in @xmath95 and identifying @xmath82 with the hyperarcs corresponding to the bipartite graphs cutted by @xmath82 .",
    "if @xmath96 is an arc weight on @xmath67 then setting @xmath97 for all @xmath98 yields the translated weight .    to give a more algebraic notion of cycles we consider @xmath99 the free @xmath100-module generated by @xmath15 .",
    "if we choose coordinates , i.e. , a numbering for @xmath15 and @xmath14 then we can identify @xmath15 with @xmath101 , @xmath14 with @xmath102 and @xmath103 with @xmath104 . in this case",
    "an element @xmath105 is a tuple @xmath106 , which can be interpreted as a set of paths through @xmath61 where @xmath107 indicates how often we pass the arc @xmath108 and the sign of @xmath109 determines in which direction this is done .",
    "we denote with @xmath110 the incidence matrix of @xmath61 with respect to these identifications , i.e. , @xmath111 with @xmath112 it is a well known fact , see for instance @xcite , that @xmath105 is a cycle of @xmath61 if and only if @xmath113 , i.e. , the submodule of all cycles of @xmath61 coincides with the set of homogeneous solutions @xmath114 .",
    "in particular , this implies that @xmath115 is a free @xmath100-module with @xmath116 where @xmath117 denotes the number of connected components of @xmath61 and therefore equals @xmath118 by our assumption on @xmath61 . note that the vector space @xmath119 can be understood as the cycle space of connected cycles , given by the kernel of the incidence matrix @xmath120 defined with respect to @xmath121 coefficients . in this case",
    "@xmath122 still holds , see again @xcite .",
    "[ rem : og ] if @xmath123 then @xmath118 is the only non vanishing entry of @xmath124 , i.e. , @xmath125 .",
    "moreover , no elementary cycle is subset of another elementary cycle .",
    "indeed assume the opposite and consider two elementary cycles @xmath126 with @xmath127 , then @xmath128 .",
    "thus , @xmath129 is also a positive oriented cycle and therefore we have @xmath130 . a contradiction !    not that every simple cycle is given by the union of arc disjoint elementary cycles .",
    "the following example illustrates this fact .",
    "[ exa : elementary ] consider the graph @xmath61 in figure  [ fig : elementary ] .",
    "then one observes that the cycle @xmath131 is a simple , non - elementary cycle while the cycles @xmath132 , @xmath133 and @xmath134 are elementary cycles .",
    "now we have all ingredients to give a formal definition of the fasp .",
    "[ def : fasp ]",
    "let @xmath20 be a finite , connected , directed , and loop - free graph , @xmath135 be a weight function .",
    "then the _ weighted fasp _ is to find a set of arcs @xmath136 such that @xmath137 is acyclic , i.e. , @xmath138 and @xmath139 is minimized .",
    "we denote the set of solutions of this problem with @xmath140 and denote with @xmath141 , @xmath142 the optimal weight or _",
    "feedback length_. if @xmath143 is constant , e.g. , equal to @xmath118 , then the problem coincides with the _ unweighted minimal fasp_.    the condition on @xmath61 to be loop - free is not an essential restriction .",
    "this is because every loop is contained in any solution of the minimal fasp .",
    "note that , every cycle @xmath144 can be generated by elementary cycles @xmath145 using only non - negative coefficients .",
    "thus , if @xmath82 is a solution of problem [ def : fasp ] then certainly @xmath146 , which implies that our notion of acyclic graphs is consistent for the problem .",
    "note that for given graph @xmath0 the smallest subgraph @xmath147 , which contains all cycles of @xmath61 , i.e. , @xmath148 whenever @xmath149 and @xmath150 can be constructed in @xmath151 .",
    "indeed the arc set of @xmath152 is constructed from @xmath15 by removing arcs @xmath153 if there is no directed path from @xmath24 to @xmath40 . for every arc",
    "this can be done by depth - first search in linear time if @xmath61 is stored in an adjacency list .",
    "since removing arcs does not generate new cycles it suffices to check every arc once yielding the estimated runtime performance . certainly , a solution for @xmath152 is a solution for @xmath61 .",
    "we shortly denote with @xmath154 and with @xmath155 the analogous graph appearing by considering connected cycles instead of directed ones . in particular , by the argumentation above , an elementary or directed cycle @xmath123 , @xmath156 can be found in @xmath151 or no cycle exist .",
    "[ go ]    [ half ] if @xmath0 is a simple graph then denoting with @xmath157 the gauss bracket we observe that at most @xmath158 arcs have to be deleted to obtain a graph where no connected path of length @xmath159 exists anymore .",
    "in particular , the graph is acyclic in this case and therefore @xmath160 see also @xcite .",
    "let @xmath0 be given and @xmath161 be a vertex weight .",
    "the feedback vertex set problem ( fvsp ) on @xmath162 is obtained by replacing the role of arcs by vertices in problem  [ def : fasp ] . in regard of proposition [ berge ] , by introducing the hyperarc weight @xmath163 , we realize that the fvsp is equivalent to the the fasp on the natural hypergraph @xmath67 of @xmath61 , with respect to the notion of berge cycles . already in remark [ bip ]",
    "we mentioned how to treat this case .",
    "vice versa the fasp on an arc weighted graph @xmath41 is equivalent to the fvsp on the line graph @xmath75 of @xmath61 by introducing the vertex weight @xmath164 , @xmath165 . since the described transformations can be done efficently , see proposition [ berge ] , an efficent solution of the fasp or fvsp for an arc and vertex weighted instance @xmath166 yields an efficent solution of the fvsp or fasp for the transformed instances and vice versa . in particular , by summarizing some already known results we obtain :    the unweighted fasp and fvsp are apx complete .",
    "since there is an @xmath167-reduction of the minimum vertex cover problem , which is apx complete due to @xcite , to the fvsp , see @xcite , the fvsp is apx complete .",
    "proposition [ berge ] shows that the unweighted fasp on @xmath61 is equivalent to the unweighted fvsp on @xmath75 .",
    "thus , the feedback length of any solution remains unchanged yielding an @xmath167-reduction of the fasp to the fvsp implying the claim .",
    "we expect that the theorem above still holds for the weighted versions .",
    "however , due to the observations made so far , we will focus our studies on the fasp to increase the understanding of the localisation of feedback sets .",
    "though the fasp and fvsp are equivalent problems in graph theory and computer sciences the only exact solutions of the fvsp known to us is are the algorithms of @xcite with complexity @xmath168 and @xcite requiring @xmath169 , where @xmath170 denotes the feedback length .",
    "a detailed comparison to our approach is given in section [ algo ] .",
    "for now we just mention our results :    [ aa ] let @xmath171 be a graph .",
    "then there is an algorithm testing whether @xmath41 is resolvable and determing a solution of the weighted fasp on @xmath61 in case of resolvability in @xmath172 .    though there are infinitely many resolvable graphs not all graphs are resolvable .",
    "however , if the graph @xmath171 is not resolvable , we still can find an exact solution :    [ b ] let @xmath41 be a graph then there is a parameter @xmath173 , @xmath174 , which can be determined in @xmath175 and an algorithm _ cut _ with run time @xmath176 solving the weighted fasp .",
    "due to proposition [ berge ] the analogous results with respect to the fvsp hold .",
    "in particular , we call a vertex weighted graph @xmath177 resolvable iff its natural hypergraph is resolvable , see section [ fvsp ] again . if we replace every hyperarc of @xmath66 with its corresponding bipartite graph then by following remark [ bip ] we have @xmath92 , @xmath178 for the resulting graph @xmath91 .",
    "the translated results therefore become :    let @xmath179 , @xmath180 be a vertex weighted graph .",
    "then there is an algorithm testing whether @xmath177 is resolvable and determing a solution of the weighted fvsp on @xmath61 in case of resolvability in @xmath181 .    in case of non - resolvability",
    "we have :    let @xmath177 be a graph then there is a parameter @xmath173 , @xmath182 , which can be determined in @xmath183 and an algorithm _ cut _ with run time @xmath184 solving the weighted fvsp .",
    "note that there are infinitely many instances where @xmath185 and @xmath186 on homogenous graphs , i.e. , if @xmath187 .",
    "thus , by computing the bound or directly @xmath188 we can decide whether the algorithm of @xcite or our approach will be faster for a given instance and choose the better alternative .",
    "moreover , the feedback length @xmath170 can not assumed to be constantly bounded .",
    "thus , the algorithm of @xcite actually possesses a complexity of @xmath189 , which is much slower than our approach .",
    "finally , we want to mention that all theorems are based on the following crucial fact :    let @xmath0 be a graph and @xmath3",
    ". then there exist algorithms which compute :    1 .",
    "the subgraph @xmath190 induced by all elementary cycles @xmath123 with @xmath191 in @xmath151 .",
    "the subgraph @xmath192 induced by all simple cycles @xmath193 with @xmath191 in @xmath194 .    a proof and a more precise version of the statement is given in theorem [ tcycle ] .",
    "in this section we introduce the notion of the essential minor @xmath195 of given graph @xmath41 , which is a simple , weighted digraph that decodes the topological structure of @xmath61 in a compact way and is therefore very helpful . even though there are some crucial differences we want to mention that similar concepts were already introduced in @xcite .",
    "we recall that for a given set @xmath33 and an equivalence relation @xmath198 on @xmath199 the quotient @xmath200 is given by the set of all equivalence classes @xmath201_\\sim= { \\left}\\{x \\in a { \\,\\,\\big|\\,\\,}x \\sim a { \\right}\\}$ ] .",
    "[ def : collapse ] let @xmath20 be a graph and @xmath202 .",
    "an equivalence relation @xmath203 on @xmath14 is defined by @xmath204 the equivalence class of @xmath205 is denoted by @xmath206_{\\sim{u , v}}$ ] and @xmath207 gives the quotient of @xmath14 with respect to @xmath203 .",
    "a multiset @xmath208 is defined by @xmath209_{\\sim{u , v}}=p \\ , , [ y]_{\\sim{u , v}}=q \\big\\}\\ , .",
    "\\end{aligned}\\ ] ] the _ contracted graph _ of @xmath61 with respect to @xmath210 is defined as the topological minor @xmath211 if @xmath212 then one can check easily that by identifying @xmath85 with their images in @xmath213 , @xmath214 respectively we have @xmath215 .",
    "thus , the definition does not depend on the order of the contracted edges .",
    "hence , if @xmath216 is a subgraph then @xmath217 can be defined by contracting @xmath218 in arbitrary order .",
    "[ def : ecg ] let @xmath219 be a positively weighted graph .",
    "the equivalence relation @xmath220 on @xmath15 is defined by @xmath221 if and only if @xmath222 or there exists a directed , branch - point - free path @xmath223 with @xmath224 and @xmath225 , i.e. , for @xmath226 it holds that @xmath227 .",
    "we represent an equivalence class @xmath228_{\\sim\\gamma}$ ] by an arc @xmath153 , where @xmath40 and @xmath24 coincide with the start and endpoint of the longest directed , branch - point - free path running through @xmath23 .",
    "the positively weighted graph @xmath229 is defined by            [ exa : essential ] in figure  [ f1 ] the construction of the essential minor is illustrated .",
    "furthermore , for a graph @xmath61 with @xmath248 diamonds connected in a cycle as in the example we obtain @xmath249 and @xmath250 .",
    "in contrast the essential minor @xmath251 of such a graph satisfies @xmath252 .",
    "hence , even though the number of cycles in @xmath61 increases exponentially in @xmath70 and @xmath253 by adding further diamonds , the number of cycles in @xmath251 remains constant equal to 1 while the weight @xmath254 decodes the number of cycles of the original graph @xmath61 .",
    "[ cor : ecg_equiv ] let @xmath255 be a positively weighted graph with essential minor @xmath256 and let @xmath64 and @xmath257 be the image of @xmath82 in @xmath195",
    ". then @xmath258 in particular @xmath259 .",
    "proposition [ cor : ecg_equiv ] states that solving the fasp for the essential minor is equivalent to solving the fasp on the original graph . even though it is possible",
    "that @xmath260 the construction might yields an a  priori problem size reduction in many cases as in example [ exa : essential ] .",
    "[ pro : construct_essential ] let @xmath261 be a finite , connected , directed , weighted multigraph then we can construct @xmath195 in time @xmath151 .",
    "furthermore , there is an algorithm with run time @xmath151 which constructs a solution @xmath262 given a solution @xmath263 .",
    "since for given @xmath263 the construction of some @xmath264 is easy to compute ( proposition [ pro : construct_essential ] ) proposition [ cor : ecg_equiv ] states that it suffices to solve a the weighted fasp for the essential minor instead of the original graph . as a consequence multigraphs do not need to be considered and the number of elementary cycles of the essential minor can be drastically reduced , see for instance example [ exa : essential ] .",
    "[ lem : ecg_paths ] let @xmath61 be a graph , @xmath770 be an arc weight , @xmath771 , and @xmath210 .",
    "then either @xmath772_{\\sim_\\gamma } = \\emptyset\\quad\\text{or}\\quad |{\\varepsilon}\\cap [ e]_{\\sim_\\gamma}|=1 \\,.\\ ] ] if in particular , @xmath773_{\\sim_\\gamma } \\not = \\emptyset$ ] then @xmath773_{\\sim_\\gamma}$ ] minimizes @xmath143 on @xmath228_{\\sim_\\gamma}$ ] .",
    "let @xmath142 and @xmath610 .",
    "since every arc @xmath774 with with @xmath775 is connected by a branch point free path with @xmath23 we have that @xmath776 .",
    "thus , at most one arc in @xmath228_{\\sim_\\gamma}$ ] will be cutted and this arc has to minimize @xmath143 on @xmath228_{\\sim_\\gamma}$ ] .",
    "[ lem : ecg_simple ] let @xmath61 be a positively weighted graph , @xmath142 , and @xmath210 .",
    "then either @xmath777_{\\sim_\\phi}= \\emptyset\\quad \\text{or}\\quad { \\varepsilon}\\cap [ e]_{\\sim_\\phi}= [ e]_{\\sim_\\phi}\\,.\\ ] ]    let @xmath142 and @xmath778 .",
    "assume there is @xmath779 then certainly @xmath780 otherwise there would be a two - cycle that is not cutted .",
    "now , let @xmath781 , @xmath382 , be such that @xmath782 and @xmath783 . since the cycles in @xmath784 and @xmath785 differ only in a single arc",
    ", i.e. , @xmath23 and @xmath37 , it suffices to cut the arcs @xmath786 to cut all cycles in @xmath784 , i.e. , @xmath787 since @xmath786 is therefore a cheaper possibility than @xmath82 cutting @xmath788 , this contradicts that @xmath142 and yields the claim",
    ".        let @xmath64 and @xmath789 be the image of @xmath82 in @xmath790 .",
    "we recall that @xmath791 was defined in definition [ def : ecg ] and show that @xmath792 assume that @xmath142 then by lemmas [ lem : ecg_paths ] , [ lem : ecg_simple ] and the construction of @xmath793 we obtain @xmath794 .",
    "thus , if @xmath795 then we choose @xmath796 and a fas @xmath797 of @xmath61 such that the equations [ gamma],[ffi ] hold and @xmath798 .",
    "consequently @xmath799 and therefore due to the construction of @xmath793 we get @xmath800 which contradicts that @xmath142 . thus , @xmath801 .",
    "vice versa assume that @xmath25 is such that @xmath802 .",
    "we claim that equations [ gamma],[ffi ] are satisfied by @xmath82 .",
    "assume the opposite then due to lemmas [ lem : ecg_simple ] and [ lem : ecg_paths ] we can delete an arc @xmath778 or replace an arc @xmath778 by an arc @xmath803_{\\sim_\\gamma}$ ] with @xmath804 .",
    "if this is not the case then we can delete all arcs @xmath805 whenever @xmath23 is such that @xmath806 .",
    "if @xmath807 denotes this modified set , then @xmath808 is fas of @xmath61 and in all cases @xmath809 a contradiction !",
    "hence , the equations [ gamma],[ffi ] hold for @xmath82 and therefore the construction of @xmath793 yields @xmath810 thus , if @xmath811 then we choose @xmath812 and obtain that @xmath813 is a fas of @xmath814 with @xmath815 , which is impossible . hence @xmath142 and the claim follows by iteration of these arguments .",
    "let @xmath261 be a finite , connected , directed , weighted multigraph then we can construct @xmath195 in time @xmath394 .",
    "furthermore , there is an algorithm with run time @xmath151 which constructs a solution @xmath262 given a solution @xmath263 .",
    "the graph @xmath818 can be computed in a single iteration over @xmath14 , see algorithm [ alg : gamma ] , where @xmath817 is explained later .",
    "each non branching node @xmath24 is removed and its two incident arcs @xmath819 and @xmath820 are replaced by an arc @xmath821 with weight @xmath822 .",
    "this is possible in time @xmath823 if the graph is represented as adjacency list where the targets of the outgoing arcs and the origins of the ingoing arcs are stored separately .",
    "thus , the iteration over @xmath14 yields a runtime of @xmath824 .    to construct @xmath825",
    "we iterate over @xmath826 yielding @xmath827 , see algorithm [ alg : phi ] . for each arc",
    "@xmath23 the weight is updated to @xmath828 and the parallel arcs @xmath829 are purged from the graph .",
    "this can be realized in time @xmath830 with a counting sort prepossessing step if the target nodes in the adjacency list are stored such that equal targets are stored consecutively . because the construction of @xmath195 requires at most @xmath253 iteration steps , i.e. , if @xmath831 then @xmath832 , the essential minor @xmath195 can be computed in time @xmath833 .",
    "a simple extension of the algorithms allows to compute the information that is necessary to compute a solution @xmath834 once @xmath835 is given . during the application of @xmath836 and @xmath837 we store the set of arcs of @xmath61 that are part of a solution if the corresponding arc from @xmath818 and @xmath838 , respectively , are in a fas",
    "that is , an arc that gave the minimum weight of the two arcs in a non branching path or all parallel arcs , respectively , see lemma [ lem : ecg_paths ] and lemma [ lem : ecg_simple ] . in algorithms [ alg :",
    "gamma],[alg : phi ] this is realized by @xmath817 which can be considered as @xmath839 .",
    "the mapping is initialized as @xmath840 . storing the arcs",
    "as linked list allows to update @xmath817 in linear time , i.e. , the asymptotic run time of algorithms [ alg : phi],[alg : gamma ] remains unchanged .",
    "note that , @xmath841 returns only one arc in the case of equality .",
    "now , replacing each arc @xmath842 by @xmath843 yields @xmath82 , which due to proposition [ cor : ecg_equiv ] is a solution for the fasp on @xmath41 .",
    "thus , the replacement can be realized in time @xmath151 .",
    "algorithm [ alg : gamma ] may be extended to generate all solutions of the fasp for @xmath61 given all solutions for the fasp on @xmath251 .",
    "therefore the equal weight alternatives in a non branching path need to be stored .",
    "the generation of the combinations of the alternatives of different paths yields all solutions .",
    "certainly , then the run time depends exponentially on the number of possible combinations of alternatives .",
    "i want to thank matthias bernt for many fruitful discussions and his support for formalizing some algorithms .",
    "moreover , a heartful thank you goes to peter f. stadler for the nice time at his bioinformatics institute in leipzig .",
    "razgon , i. ( 2007 ) .",
    "computing minimum directed feedback vertex set in o(1.9977@xmath844 ) . in _ theoretical computer science , 10th italian conference , ictcs 2007 , rome , italy , october 3 - 5 , 2007 , proceedings _ , pages 7081 .",
    "there are several approaches for generating the set @xmath57 of all elementary cycles of a graph , see @xcite for an overview . since there can be an exponential number of cycles in a graph , generating algorithms have an exponential worst case run time . the best algorithms available today",
    "are the ones of @xcite and @xcite solving the problem in @xmath265 .",
    "of course counting all cycles might be less expansive than generating them .",
    "however , by reducing to the hamiltonian cycle problem , see for instance @xcite , counting all cycles is a np - hard problem . for our concerns , and supposedly in many other situations , the generation of all cycles is not necessary , but the knowledge of the arc set of all cycles including a common arc suffices . in the following an algorithm for determing the smallest subgraph @xmath266 which contains all elementary cycles that include the arc @xmath23 is given .",
    "[ theta ] let @xmath0 be a graph and @xmath267 we denote with with @xmath268 , @xmath269 the set of all directed , elementary or simple paths from @xmath40 to @xmath24 respectively . for an arc @xmath3",
    "we let @xmath270 be the set of all elementary and simple cycles running through @xmath23 .",
    "if @xmath64 then we set @xmath271 , @xmath272 .",
    "moreover , we denote with @xmath273 , @xmath274 the by the corresponding paths induced graphs and with @xmath275 , @xmath276 , @xmath277 by the corresponding cycles induced graphs .",
    "moreover , @xmath278 , @xmath279 , @xmath280 , @xmath281 , @xmath282 , @xmath283 , @xmath284 , @xmath285 shall denote the connected ( and not necessarily directed ) analagons of the introduced sets and graphs .",
    "note that @xmath286 and therefore @xmath287 .",
    "moreover , the graphs @xmath288 can be determined in @xmath151 by applying a depht first search technique similar to remark [ go ] . in the other cases we observe :",
    "let @xmath293 then no vertex @xmath294 is passed twice of @xmath295 .",
    "thus , for every @xmath296 there is a path @xmath297 with respect to @xmath298 .",
    "vice versa if @xmath299 is such that @xmath300 then has to be a vertex @xmath294 , which is passed at least twice by @xmath295 implying that there is @xmath296 such that @xmath301 thus , by setting @xmath302 , every path @xmath299 with @xmath303 is interrupted in @xmath304 .",
    "hence , @xmath305 with respect to @xmath304 coincides with @xmath289 .",
    "algorithm [ gel ] formalizes this procedure and runs in @xmath151 if @xmath61 is stored in an adjacency list , enabling us to test whether @xmath306 in @xmath307 .",
    "the other cases of @xmath83 can now be solved by replacing @xmath308 with @xmath23 and directed paths or cycles with connected ones .    to show @xmath84 we add two arcs @xmath309 , @xmath310 , @xmath311 denote with @xmath94 the resulting graph and consider the line graph @xmath312 .",
    "we recall that @xmath313 , @xmath314 and apply the fact that the elementary paths of @xmath75 are in @xmath118 to @xmath118 correspondence to the simple paths of @xmath61 and therefore @xmath315 .",
    "hence @xmath84 follows analogue to @xmath83 .      note that if @xmath195 is the essential minor of @xmath41 .",
    "then the treatment of `` parallel '' paths is avoided by the essential minor construction .",
    "thus , we expect that if @xmath251 is significant smaller than @xmath61 the run time performance will increase drastically .",
    "of course the question arises whether a solution of the fasp on @xmath1 can be determined independently of the rest of the graph .",
    "the notion of _ isolated cycles _ is our starting point of investigations in this manner and as it will turn out it is a very helpful concept of answering this question .",
    "[ cycle ] let @xmath41 be a weighted graph and @xmath3 . then there is an algorithm , which determines a solution @xmath325 of the fasp on @xmath326 in @xmath327 , where we slightly abused notion by still denoting @xmath143 for the the restriction of @xmath143 to @xmath1 .",
    "observe that by interpreting @xmath143 as a capacity function on @xmath1 a solution of the fasp on @xmath82 is given by @xmath328 or a min-@xmath320-cut @xmath82 with source @xmath329 and sink @xmath330 .",
    "the option with the smaller weight is chosen . due to the famous min - cut - max - flow theorem",
    "a min-@xmath320-cut can be determined by solving a max - flow problem with respect to @xmath143 and @xmath329 , @xmath330 .",
    "the algorithm of @xcite solves the max - flow problem for arbitrary weights in time @xmath331 and can be speedend up to @xmath327 , @xcite by using the data structure of dynamic trees .",
    "thus the statement is proven .",
    "note that if @xmath195 is the essential minor of @xmath41 then the absence of `` parallel '' paths might speeds up the time required to determine a min-@xmath320-cut drastically .",
    "moreover , the max - flow - problem is very well understood , yielding many alternatives to the algorithm of @xcite and providing faster solutions in special cases , see @xcite and @xcite for an overview .",
    "[ def : iso ] let @xmath61 be a graph and @xmath123 then we denote with @xmath332 the set of _ isolating arcs _ of @xmath124 , i.e. , if @xmath333 then @xmath124 has empty intersection with every cycle @xmath334 that does not contain @xmath23 or an parallel arc of @xmath23 . for an arc @xmath210 or set of arcs @xmath25 we set @xmath335 and @xmath336 .",
    "[ hierarchy ] note , that the sets of isolated cycles possess a _ flat hierarchy _ in the following sense . if @xmath337 , @xmath338 , with @xmath339 then @xmath340 . if vice versa @xmath341 then by definition we obtain @xmath342 .",
    "let @xmath343 be an isolated cycle and @xmath344 the set of all isolating arcs of @xmath124 .",
    "if we contract @xmath344 then the resulting graph @xmath345 fulfills @xmath346 where @xmath347 denotes the standard scalar product on @xmath348 , @xmath349 .",
    "thus , by detecting isolated cycles we obtain an orthogonal splitting @xmath350 such a splitting is certainly helpful whenever one wants to find a basis of @xmath115 , e.g. , a minimal cycle basis of @xmath351 can be extended to a minimal basis of @xmath115 .",
    "consider an isolating arc @xmath23 of a graph @xmath41 or its essential minor @xmath195 .",
    "the isolated cycles @xmath352 running through @xmath23 can be cut either by removing the arc set @xmath353 or another feedback set @xmath354 of @xmath355 . by definition the arc set @xmath356 cuts at least the cycles in @xmath357 . by remark",
    "[ hierarchy ] the feedback set @xmath354 cuts only the isolated cycles @xmath357 or is given by @xmath358 of another isolating arc @xmath359 with @xmath360 .",
    "thus , if the weight of @xmath356 equals the weight of a solution of the fasp on @xmath355 then there is a solution @xmath82 of the fasp on @xmath61 with @xmath361 .",
    "the following definition reflects this idea more formally .",
    "[ def : resolve ] let @xmath41 be a graph . we define a maximal list of graphs @xmath366 with @xmath367 , @xmath368 $ ] as follows",
    "let @xmath369 , with @xmath370 , be the essential minor of @xmath371 and @xmath372 be a maximal subset of pairwise different isolating arcs of @xmath373 such that @xmath374 @xmath375 then the weighted graph @xmath376 is given by @xmath377 where @xmath378 denotes the restriction of @xmath379 to @xmath380 .",
    "if @xmath381 for some @xmath382 then @xmath383 , @xmath382 is called the _ resolved graph _ of @xmath61 , which we shortly denote with @xmath384 . a graph @xmath41",
    "is called _ resolvable _ if and only if @xmath385 .",
    "due to proposition [ pro : construct_essential ] the construction of the essential minor @xmath387 can be achieved in @xmath151 for every @xmath388 . since checking whether @xmath389 can be done in @xmath390 by storing @xmath61 in an adjacency list and using depht first search to figure out whether @xmath391 the algorithm [ alg : iso ] computes the set @xmath355 in @xmath151 and therefore computing @xmath355 for all arcs requires at most @xmath175 computation steps .",
    "furthermore , a solution of the fasp on @xmath355 can be computed due to lemma [ cycle ] in @xmath78 . due to the fact that during the construction of @xmath392 no parallel arcs appear , we have to recompute the isolated cycles at most @xmath253 times .",
    "thus , @xmath392 can be determined in @xmath393 .",
    "furthermore , we can use the backtracking procedure of proposition [ pro : construct_essential ] to compute a solution of the fasp in @xmath394 once @xmath392 is known .    observe that theorem [ res ]",
    "was already stated in section [ main ] as theorem [ aa ] .",
    "however , the result leads to the question : what are fast ( linear , quadratic time ) checkable conditions a graph @xmath41 has to satisfy to be resolvable .",
    "though , we can easily construct resolvable graphs as @xmath195 in figure [ f0 ] or modified versions of @xmath195 by adding additional isolated cycles a characterization of resolvable graphs is still open .",
    "a better understanding of the non - resolvable graphs might help to solve that problem . in order to investigate these graphs the class of graphs without isolated cycles at all ,",
    "seems to be interesting .",
    "therefore , the next result might be a good starting point for further studies .",
    "if @xmath402 is a graph with @xmath399 , @xmath403 then @xmath402 possesses at least three vertices and @xmath404 has to hold .",
    "we claim that there are at least three linear independent cycles . indeed if @xmath405 with @xmath406 , @xmath407 then due to remark [ rem : og ] we know that @xmath408 and no elementary cycle is subset of another .",
    "so w.l.o.g . we can assume that @xmath409 , which contradicts that all cycles are elementary .",
    "thus , @xmath410 .",
    "this observation implies that @xmath411 whenever @xmath412 . since @xmath413 is an directed clique we can identify any smaller graph @xmath402 with a subgraph of @xmath413 .",
    "it is easy to see that deletion of any arc @xmath3 produces an isolated cycle in @xmath413 .",
    "for instance if we delete @xmath414 then @xmath415 will be isolated , if we delete @xmath416 then @xmath417 will be isolated and so on . hence @xmath418 .",
    "in this section we formulate an solution of the fasp based on a dynamic programming technique .",
    "such an approach can be applied to optimization problems whenever there is a decomposition of the problem into subproblems which satisfy the bellman principle , i.e. , every optimal solution consists only of optimal subsolutions . to motivate the following definitions we first consider an example .",
    "consider the graph @xmath41 in figure  [ dp ] . if we want to know , which arc of @xmath415 we have to cut for an optimal solution",
    "then this depends on the cycles @xmath419 .",
    "the benefit of cutting @xmath420 instead of @xmath421 or @xmath422 is that we do not have to cut @xmath423 anymore which costs at least @xmath159 .",
    "thus we introduce a new weight @xmath424 , which equals @xmath143 on @xmath425 and is set to @xmath426 on @xmath420 .",
    "since no other cycles than @xmath415 are cut by @xmath427 the weight of @xmath427 remains unchanged .",
    "now we consider @xmath428 and @xmath429 and compute @xmath430 the best solution , which contains @xmath422 is @xmath431 and the best solution containing @xmath427 is @xmath432 and we observe that @xmath433 thus , the difference of the solutions coincides with the difference of the subproblems in with respect to the new weight @xmath424 .",
    "let @xmath41 be a graph and @xmath212 , @xmath434 and @xmath435 be given .",
    "then we say that @xmath37 is _ arc sensitive _ to @xmath23 with respect to the fasp , denoted by @xmath436 , if and only if @xmath437 we denote with @xmath438 the set of all arcs , which are sensitive to @xmath23 .",
    "note that the arcs @xmath37 of an isolated cycle @xmath439 can not be sensitive to @xmath23 .",
    "thus , arc sensitivity detects arcs , which might prevent us from solving the fasp on @xmath1 independently from the rest of the graph .",
    "an understanding of these dependencies can be reached by understanding the _ meta graph _ of @xmath61 defined in the following .",
    "let @xmath41 be a graph and @xmath123 .",
    "we set @xmath440 , @xmath441 and for @xmath442 we define recursively @xmath443 with @xmath444",
    "\\in u_k\\times u_k { \\,\\,\\big|\\,\\,}f \\twoheadrightarrow h \\,\\,\\text{w.r.t.}\\,\\ , \\big(g\\setminus(w_{k-1 } \\setminus \\{h\\}),\\omega\\big){\\right}\\}\\,,\\end{aligned}\\ ] ] stopping the recursion if @xmath445 is such that @xmath446 we introduce the simple , undirected graph @xmath447 as the _ meta graph _ of @xmath61 with respect to @xmath124 .",
    "furthermore , we introduce @xmath448 as the subgraph of all _ arc sensitive cycles _ containing @xmath124 .",
    "storing @xmath61 in an adjacency list enables us to test whether @xmath451 in @xmath307 by depht first search . due to theorem [ tcycle ]",
    "the graph @xmath1 can be determined in @xmath151 .",
    "thus , testing sensitivity requires @xmath151 . due to the fact that @xmath452 , @xmath453 the construction of @xmath454 tests for sensitivity at most @xmath455 times , which yields the claimed complexity .",
    "next we define the relative weight @xmath456 with respect to some @xmath123 and @xmath457 .",
    "as it will turn out @xmath456 decodes which arcs of @xmath124 can be cutted to obtain a minimal feedback set . for a better clarity",
    "we firstly restrict ourselves to the case where the meta graph @xmath458 is a tree . in this case , @xmath23 is chosen as the root and @xmath456 is given by solving the fasp for every leaf @xmath459 on @xmath460 and subtracting this value from the weight @xmath461 of the predecessor of @xmath459 .",
    "afterwards , we delete all leafs of @xmath462 and iterate this procedure till @xmath23 becomes a leaf . more precisely :      let @xmath41 be a weighted graph @xmath449 , @xmath467 .",
    "let @xmath454 be the meta graph of @xmath61 with respect to @xmath124 and assume that the connected subgraph @xmath468 of @xmath458 , which contains @xmath23 is a tree .",
    "then we define the _ relative weight _ of @xmath61 with respect to @xmath469 @xmath470 as the output of algorithm [ sigma : tree ] with input @xmath471 .",
    "[ treem ]    to define the relative weight in general , we have to consider all spanning trees of @xmath468 generated by deleting edges , which cut cycles for the first time , seen from @xmath23 . in example [ sigex ] we assert the definition for a special meta graph .",
    "the precise definition can be found below , using the following notions : +      for any tree @xmath476 and any vertices @xmath477 we denote with @xmath478 the predecessor of @xmath459 with respect to root @xmath23 .",
    "if @xmath476 is an arbitrary simple , undirected graph and @xmath479 then we consider the set @xmath480 of all vertices possessing shortest path distance @xmath481 with respect to @xmath482 in @xmath483 .",
    "furthermore , we consider @xmath484 @xmath485 and @xmath486 .",
    "in other words : @xmath487 denotes the set of vertices @xmath488 which cut cycles for the fist time , seen from starting point @xmath482 .",
    "we set @xmath489 \\in e_m   { \\,\\,\\big|\\,\\,}k \\in u(m , q)\\setminus\\{h\\}{\\right}\\}\\ ] ] and denote with @xmath490 the connected component of @xmath491 containing @xmath459 .",
    "recursively for @xmath492 and an ordered set @xmath493 with @xmath494 we define @xmath495 . for @xmath496",
    "we consider @xmath497 \\in e_m { \\,\\,\\big|\\,\\,}k \\in u(m , q)\\ , , d(q ,",
    "k ) \\geq d(q , h ) { \\right}\\}\\ ] ] and set @xmath498 to be the connected component of @xmath499 containing @xmath482 , which is therefore a tree .",
    "let @xmath41 be a graph , @xmath500 and @xmath501 be the meta graph of @xmath61 with respect to @xmath124 .",
    "let @xmath502 be the output of algorithm [ sigma : gen ] with input @xmath503 , @xmath504 .",
    "then , we define @xmath505 as the _ relative weight _ of @xmath61 with respect to @xmath469 .",
    "[ relweight ]    let @xmath41 be a graph , @xmath506 and assume that @xmath507 coincides with @xmath483 from example [ exw ] .",
    "we follow algorithm [ sigma : gen ] to compute @xmath508 .",
    "observe that @xmath509 and @xmath510 .",
    "the graph @xmath511 is sketched in the next picture and turns out to be a tree .",
    "now we delete all vertices which are closer to @xmath512 as @xmath513 and obtain the graph @xmath514 .",
    "next we compute the relative weight @xmath515 of @xmath516 with respect to @xmath517 .",
    "analogously , we compute @xmath518 and consider the graph @xmath519 , which is sketched in the last picture . now @xmath520 is a tree and the predecessor of @xmath521 is @xmath512 .",
    "thus , we can compute @xmath522 which finishes the computation of @xmath508 by replacing @xmath523 with these weights , respectively .",
    "[ sigex ]    [ siggi ] let @xmath0 be a graph @xmath123 , @xmath467 and let the meta graph @xmath501 of @xmath61 with respect to @xmath124 be given",
    ". denote with @xmath524 the @xmath121-dimension of the cycle space @xmath525 of @xmath468 . then      assume that @xmath468 is a tree .",
    "as already mentioned , due to @xcite and @xcite the feedback length @xmath528 can be determined in @xmath327 , and has to be computed at most @xmath529 times .",
    "if @xmath468 is not a tree then we observe that the most expansive computation step in algorithm [ sigma : gen ] is again the computation of the relative weight with respect to a certain subtree of @xmath468 ( lines 8 and 19 in algorithm [ sigma : gen ] ) .",
    "this computation step has to be computed for every pair @xmath530 twice , for some @xmath531 . in worst case",
    "the combination of the pairs is independent , i.e. , every other pair still appears once @xmath532 and @xmath490 are considered . in this case",
    "the set of remaining cycles running through the remaining pairs @xmath533 do not contain the edges @xmath459 and @xmath37 and can therefore not be generated by the cycles running through @xmath534 with respect to @xmath121-coefficients . consequently , there are at most @xmath535 iterations",
    ". together with the argumentation above this yields @xmath83 .    to show @xmath84 we write @xmath536 as a list of connected meta vertices .",
    "now we choose connected paths @xmath537 , @xmath538 connecting @xmath539 with @xmath540 .",
    "then @xmath541 is a connected cycle in @xmath61 . if @xmath542 is a set of @xmath121-linear independent meta cycles then regardless of choices for the paths @xmath543 representing an meta edge the corresponding cycles @xmath544 are @xmath121-linear independent in @xmath545 .",
    "thus , @xmath546 is bounded by the @xmath121-dimension of @xmath545 , proving @xmath84 .",
    "note that a graph @xmath0 with @xmath123 such that @xmath454 coincides with @xmath483 in figure [ relweight ] can be easily constructed by choosing a starting cycle @xmath124 and additional cycles @xmath419 intersecting with @xmath124 in @xmath547 , respectively",
    ". then we continue this process by follwing @xmath483 for the ramining cycles .",
    "hence , the set of graphs @xmath61 with cycle @xmath124 and meta graphs @xmath454 such that @xmath548 is small , is actually a huge set .",
    "[ msmall ]      [ bellmann ] let @xmath41 be a weighted graph @xmath123 , @xmath457 and @xmath550 then @xmath551 where we shorten @xmath552 and slightly abuse notation by still denoting @xmath553 for the restriction of the arc weights to the corresponding subgraphs , respectively .",
    "note that is a quite comfortable way of formulating the bellman principle , i.e. , though we do not know the values of @xmath554 and @xmath555 we know that if @xmath23 maximizes @xmath556 for all on @xmath557 . then @xmath558 .",
    "thus , @xmath328 can be extended to a global optimal solution .",
    "maybe this relative formulation can be applied also to other problems for which one wants to use a dynamic programming technique .",
    "the described observation is also used in the proof of theorem [ bellmann ] .",
    "if @xmath564 with respect to @xmath61 then @xmath565 and @xmath566 and therefore the claim follows .",
    "now we argue by induction on @xmath567 . if @xmath568 then there is only one totally isolated cycle and therefore @xmath569 .",
    "thus , we are in a special case of the situation above and obtain the claim .",
    "now assume that @xmath570 and @xmath571 .",
    "we consider @xmath572 and observe that @xmath573 .",
    "we choose @xmath574 with @xmath575 and choose @xmath560 such that @xmath576 is maximized on @xmath577 , where @xmath578 , @xmath563 are understood with respect to @xmath304 .",
    "thus , following remark [ bel ] there holds @xmath579 we set @xmath580 then by induction and we compute @xmath581 on the other side we consider @xmath582 with the arc weight @xmath583 now observe that @xmath584 with respect to @xmath585 and by lemma [ ce ] @xmath83 we have @xmath586 for all @xmath587 , where @xmath588 is understood with respect to @xmath585 .",
    "moreover , @xmath589 and therefore @xmath590 due to lemma [ ce ] @xmath84 we have that @xmath591 , @xmath592 .",
    "inserting this fact in gives @xmath593 on the other , by we have that is maximized on @xmath577 .",
    "thus , again by induction @xmath594 thus , by combining with and again with we obtain @xmath595 if @xmath596 then @xmath597 and @xmath598 .",
    "thus , by this yields the claim . if @xmath599 then the analogous of with respect to @xmath37 yields @xmath600 since @xmath601 this finishes the proof .",
    "let @xmath41 be a graph then the algorithm _ cut _ is exact and complete with respect to the fasp , i.e , @xmath603 while the algorithm _ cut & resolve _ is exact , i.e. , @xmath604 moreover , there is @xmath173 such that _ cut _ and _ cut & resolve _ possess run times @xmath176 , where the parameter @xmath605 can be determined in @xmath606 .",
    "if @xmath142 and @xmath610 then @xmath611 solves the minimal fasp on @xmath612 . thus , the exactness and completeness statements follow directly from theorems [ bellmann],[res ] .",
    "for @xmath123 we set @xmath613 .",
    "then @xmath614 for all @xmath615 with @xmath616 and proposition [ siggi ] implies that @xmath617 holds .",
    "let @xmath618 with @xmath619 , be any cycle in the component of all arc connected cycles containing @xmath124 , introduced in definition [ meta ] .",
    "then @xmath620 on @xmath21 for every @xmath621 .",
    "thus , as long as at least one arc @xmath191 was deleted the maximal number of appearing @xmath121-linear independent meta cycles appearing for the computation of @xmath622 , @xmath623 are bounded by @xmath624 .",
    "thus , by setting @xmath625 , choosing a cycle @xmath626 , determing @xmath627 and considering @xmath628 , @xmath629 , @xmath630 we obtain cycles @xmath631 , @xmath632 with @xmath633 and @xmath634 .",
    "since @xmath635 the parameter @xmath636 can be determined in @xmath637 due to lemma [ mg ] .",
    "since the algorithm _ cut _ computes @xmath638 for fixed @xmath621 and all @xmath639 and @xmath640 , cuts the right arc and repeats the computation at most @xmath70 times by observing that @xmath641 the run time of the algorithm _ cut _ can be estimated as claimed .",
    "recall , that due to theorem [ res ] the resolved graph can be computed in @xmath393 .",
    "therefore , the analogous argumentation yields the claimed run time for the algorithm _ cut & resolve_.    due to the fact that the fasp is np complete , as expected our approach depends exponentially on some parameter , which in our approach is the number @xmath188 of liner independent meta cycles . in cases where @xmath188 is",
    "large we have to use another method to solve the fasp or use a heuristic .",
    "as for instance shown in @xcite a greedy solution for the fasp needs not to be optimal . we give a criterium on solutions which guarantees optimility .",
    "moreover , we can estimate the failure of every sub optimal solution . finally , we suggest a heuristic given by a hybrid technique of the already presented approaches .    for given graph @xmath41",
    "we consider the functions @xmath642 recall , that due to @xcite determing @xmath643 is a np - hard problem and the results of @xcite and @xcite solving the problem in @xmath644 , where @xmath643 can depend exponentially on @xmath61 .",
    "however , @xcite could establish efficent and close estimations of the number of @xmath645 paths .",
    "since @xmath646 the result enables us to determine @xmath643 efficently , with small failure .",
    "in contrast , @xmath647 can be determined in @xmath151 due to theorem [ tcycle ] .",
    "let @xmath171 be a given weighted graph with @xmath648 .",
    "we introduce the efficent weights @xmath649 and set @xmath650 , @xmath651 , @xmath652 , @xmath653 , @xmath654 , and @xmath655 , @xmath656 , where @xmath657 denotes the gauss - bracket .",
    "let @xmath661 be an arbitrarily ordered solution of the weighted fasp .",
    "we set @xmath662 and @xmath663 , for @xmath664 and denote with @xmath665 the corresponding restriction of @xmath666 to @xmath667 .",
    "now due to the fact that @xmath668 for all @xmath669 we obtain @xmath670 since @xmath671 this proves .",
    "now let @xmath41 be a graph with @xmath672 and @xmath673 , which are arranged path like , i.e. , @xmath674 and @xmath675 if @xmath676 .",
    "then one verifies easily that @xmath659 . by replacing @xmath677 with @xmath647 and @xmath678 with @xmath679 the exact same argumentaion yields the remaining claim .",
    "note , that of course there are many more graphs with @xmath659 or @xmath660 then those used in the proof above . nevertheless , it is hard to give a good condition on a graph such that @xmath659 or @xmath660 holds .",
    "for instance in @xcite an example of a planar graph is given , where this is not the case .",
    "certainly , the lower bounds can be used to improve the performance of a variety of algorithms solving the fasp or to control the quality of a heuristic as the algorithms [ gr],[grr ] .",
    "certainly , it suffices to prove the first estimate in .",
    "we show the claim for a solution @xmath683 of _ greedy - cut_. assume that @xmath82 is ordered with respect to appearing arcs , set @xmath684 and @xmath663 , for @xmath685 and denote with @xmath665 , @xmath686 and @xmath687 the corresponding restrictions of @xmath666 , @xmath677 , @xmath688 to @xmath667 .",
    "then we compute @xmath689 since @xmath690 we use theorem [ e ] to compute @xmath691 and the claim follows .",
    "a proof of the statement for _ greedy - cut & resolve _ can be given by an easy adaption of the argument above and is left to the reader .",
    "now let @xmath692 then we argue by induction on @xmath693 to show that @xmath682 for both algorithms . if @xmath694 then due to the fact that @xmath61 possesses no loops the claim follows .",
    "now let @xmath695 we order @xmath683 with respect to appearance and consider @xmath696 , @xmath697 and @xmath698 , @xmath699 .",
    "by induction we have @xmath700 .",
    "consider @xmath701 , delete all appearing loops and denote the resulting graph with @xmath702 .",
    "if @xmath703 then all cycles of @xmath57 are totally isolated and the claim follows by triviality . if @xmath704 then @xmath705 . since @xmath706 this implies that @xmath707 as claimed .",
    "let @xmath41with @xmath648 and @xmath82 be a solution of _ greedy - cut _ or _ greedy - cut & resolve _ with respect to the effective weigth @xmath710 .",
    "then @xmath711 if in particular @xmath681 then @xmath682 .",
    "consider the directed clique @xmath413 from figure  [ 6 ] with constant weight @xmath712 .",
    "then @xmath413 coincides with its resolved graph and regardless of possible choices every candidate @xmath82 the algorithm _ greedy - cut _ or _ greedy - cut & resolve _ proposes , satisfies @xmath713 . since @xmath714 every candidate is optimal .    summarizing our results so far the heuristics _ greedy - cut _ or _ greedy - cut & resolve _ solve the fasp with controlled variance in @xmath194 , due to theorem [ tcycle ] , in case of effective weight @xmath710 and in @xmath715 in case of effective weight @xmath254 , where @xmath716 shall control the computation steps of @xmath643 , @xmath717 .",
    "even if we approximate @xmath718 by the method of @xcite the resulting algorithm remains an efficient heuristic .",
    "however , possibly there is a more accurate method available , given by a hybrid algorithm of the methods introduced in this article .",
    "we expect that an implementation of this strategy yields a fast and precise general fasp - solver , which due to section [ prel ] is therfore also a fvsp - solver .      1 .",
    "compute the resolved graph @xmath392 .",
    "2 .   choose a cycle @xmath719 and compute the meta graph @xmath501 .",
    "3 .   if the number of meta cycles @xmath624 is large determine a `` good '' feedback vertex set @xmath720 of @xmath501 , with respect to the vertex weight @xmath721 using one of the known or presented methods .",
    "4 .   alternatively ,",
    "compute a maximal spanning tree @xmath722 with respect to the arc weight weight @xmath723 where @xmath724 $ ] , @xmath725 and set @xmath726 .",
    "5 .   set @xmath727 and use cut or cut & resolve to solve the fasp on on the component @xmath728 of arc connected cycles containing @xmath729 .",
    "choose a new cycle @xmath577 of the resulting graph and repeat 1.-4 .",
    "until no such cycle exists . 7",
    "use the backtracking procedure of proposition [ pro : construct_essential ] to compute a feedback arc set @xmath25 of @xmath61 .",
    "the union @xmath730 of the meta feedback vertex sets of the meta graphs can be interpreted as arcs , which are forbidden to cut in @xmath61 .",
    "the resulting feedback arc set @xmath82 will be optimal up to this obstruction , i.e. , we have @xmath731 where @xmath732 denotes the meta graph of @xmath94 with respect to @xmath733 . hence , the quality of this heuristic can be evaluated by measuring how good @xmath94 approximates @xmath61 .",
    "thus , if @xmath734 and the weight of the forbidden arcs is very high , i.e. , @xmath735 the arcs of @xmath730 will probably not be contained in any optimal solution , yielding the correctness of strategy [ s ] .",
    "additionally , the lower bounds @xmath678 , @xmath679 from section [ greedy ] can be used to validate correctness .",
    "analogous controls can be thought of , if we choose the alternative 3b .",
    "an implementation of the described algorithms is planned to be realized .",
    "certainly , a comparison of real run times with other approaches would be of great interest .",
    "so far we compare our results with other theoretical approaches . due to the immense amount of results during the last decades",
    "we restrict our discussion to publications , which do not restrict themselves to very tight graph classes as _ tournaments _ @xcite or _ reducible flow graphs _",
    "@xcite . finally , we suggest how the approaches of this article might be adapted to related problems .",
    "note that for given graph @xmath166 with arc weight @xmath143 and vertex weight @xmath736 a _ brute force _ method of solving the fasp / fvsp is given by considering every subset @xmath25 or @xmath26 and check whether the graphs @xmath27 , @xmath28 are acyclic , respectively . since due to remark [ go ] , checking for acyclicity requires @xmath151 operations , we can generate a list of all fas s or fvs s possessing length @xmath737 , @xmath738 . choosing the cheapest fas or fvs yields therefore a brute force algorithm solving the fasp / fvsp in @xmath739 , @xmath740 , respectively .",
    "the algorithm of @xcite solves the unweighted fvsp on simple graphs in @xmath741 .",
    "compared to the brute force algorithm this yields almost no improvement .",
    "therefore , the question occured whether the parametrised version of the fvsp could be solved by an _",
    "fixed parameter tractable algorithm_. every np - complete problem can be solved by a fixed parameter tractable algorithm , i.e. , by choosing @xmath295 as the problem size there is an algorithm with complexity @xmath742 , where @xmath37 is an on the parameter @xmath295 exponentially depending function .",
    "thus , the term fixed parameter tractable could be misleading .",
    "the precise question is whether there exists an algorithm with run time @xmath743 computing a fvs of length less than @xmath481 or determing that no such set exists .",
    "since the fvsp is np - complete the function @xmath37 will be exponentially dependent on @xmath481 unless @xmath744 .",
    "indeed , the algorithm of @xcite solves the parametrised version of the fvsp in @xmath745 .",
    "thus , @xmath746 , increases even worse than exponentially in @xmath481 .",
    "since a small feedback length almost always correlates to small graphs or very special graphs , e.g. tree - like graphs , even improvements of the algorithm wo nt be usefull in many applications .",
    "therefore , the article might be seen as an purely theoretical approach answering this question .",
    "indeed , to the best of our knowledge none of the algorithms were used for an implementation of a general fvsp / fasp - solver .",
    "in contrast , the algorithms _ cut _ and _ cut & resolve _ solve the fasp or fvsp on weighted multi - digraphs in @xmath176 and @xmath747 . the parameters @xmath188 and @xmath748 fulfill @xmath9 , @xmath10 and can be computed in @xmath175 , @xmath183 , respectively .",
    "thus , in both cases we can efficently control the run time of the exact solutions , which enables us to a priori decide whether the given instance shall be solved exactly or by an heuristic , e.g. , strategy [ s ] .",
    "this crucial difference to the other approaches and the fact that strategy [ s ] is an heuristic on the meta level and not on the instance itsself , makes us confident that an implementation generates a fast and accurate fasp / fvsp - solver yielding a deep impact on computational an applied sciences .      in @xcite and",
    "@xcite a polytope of arc sets is assigned to a given graph .",
    "the fasp translates to solve a certain linear optimization over this polytope . in the case of _ planar _ or more general _ weakly acyclic graphs _ the polytope is integral , i.e. , it possesses integral corners .",
    "since the optimum will be obtained in at least one of the corners , one can apply the so called _ ellipsoid method for submodular functions _",
    "@xcite to find the right corner in polynomial time , see also @xcite for further details .",
    "the approach is certainly remarkable though it contains some weaknesses .",
    "the first problem is that though the algorithm runs in polynomial time the degree of the polynomial depends on a variety of parameters and can not be estimated by hand a priori .",
    "therefore , there are planar or weakly acyclic graphs , which can be solved efficently from a theoretical view point but actually a computer based implementation of the approach can not ensure to meet a performance behavior applications require .    secondly , the class of weakly acyclic graphs is not well classified yet .",
    "thus , if we leave the class of planar graphs it is hard to say whether a given graph is weakly acyclic or not .",
    "for instance , consider the directed version of @xmath749 in figure [ ex ] , which is known to be a weakly acyclic graph .",
    "then it is not hard to see that the meta graph @xmath501 contains only one cycle .",
    "thus , though @xmath61 is not resolvable we can efficently solve the fasp on @xmath61 by applying the algorithm _",
    "cut_. in fact all examples of weakly acyclic graphs given in @xcite turn out to be efficently solvable by _",
    "cut_. since the techniques of this article are not sensitive to topological obstructions as planarity we expect that there are instances of the fasp , which are neither planar nor weakly acyclic and even though can be solved efficently by _ cut _ or _ cut & resolve_. on the other hand , by arranging cycles along several meta cycles it is quite easy to construct a planar graph @xmath61 with a number @xmath750 of linear independent meta cycles .",
    "thus , so far none of the approaches can state to solve the `` larger '' instance class efficently .    however , a deeper understanding of the meta graphs and their topology seem to be the most relevant tasks for further research , which might enable us to classify weakly acyclic graphs and yield a completely new perspective to other questions in graph theory .      in @xcite",
    "a summarization of heuristic approaches is given and several new ones are introduced .",
    "the weak point in all these approaches is that they do not provide an non - empirical control of the variance of the heuristical solution from the optimum .",
    "therefore , it is impossible to guarantee whether a solution is tight to the optimum . in",
    "@xcite a good lower bound of the feedback length for eulerian graphs is given and therefore it would be interesting how our bound behaves on this graph class . in general ,",
    "if @xmath82 denotes a feedback set the heuristic _ greedy - cut _ or _ greedy - cut & resolve _ proposes , then by proposition [ apx ] we have shown that if @xmath386 then @xmath751 yielding a controlled variance , as long as @xmath752 can be determined or estimated from below , see @xcite .",
    "we conjecture that improves the known estimates given by @xcite .",
    "furthermore , other heuristics can be improved by the results of this article .",
    "for instance , the counter example for the greedy approach introduced in @xcite is resolvable and therefore _ resolve & cut _ closes this gap . a comparison of strategy [ s ] , with the approximation of @xcite , where an approximation ratio in @xmath753 was established",
    ", might be usefull as well .",
    "the np - complete _ directed subgraph homeomorphism problem _ studied by @xcite is to consider two given graphs @xmath754 and @xmath755 together with an injective mapping @xmath756 of vertices of @xmath757 into the vertices of @xmath61 .",
    "now the problem is given by deciding whether there exists a injective mapping from arcs of @xmath757 into pairwise node disjoint elementary paths of @xmath61 such that an arc @xmath37 with head @xmath459 and tail @xmath758 is mapped on an elementary path from @xmath759 to @xmath760 . for a given graph @xmath91 , @xmath761 , @xmath762 with @xmath763 we consider a special instance of the directed subgraph homeomorphism problem by setting @xmath764 , @xmath755 with @xmath765 , @xmath766 and @xmath767 .",
    "thus , solving the subgraph homeomorphism problem with respect to these special instances is equivalent to decide whether @xmath37 is an arc of @xmath768 . hence , in addition to the polynomial time solvable instance classes known from @xcite , e.g. stars , also problem instances as defined above are polynomial time solvable due to theorem [ tcycle ] .",
    "potentially , our observations can be generalized in regard of this problem ."
  ],
  "abstract_text": [
    "<S> the _ feedback arc ( vertex ) set problem _ , shortened fasp ( fvsp ) , is to transform a given multi digraph @xmath0 into an acyclic graph by deleting as few arcs ( vertices ) as possible . due to the results of richard m. karp in 1972 </S>",
    "<S> it is one of the classic np - complete problems . </S>",
    "<S> an important contribution of this paper is that the subgraphs @xmath1 , @xmath2 of all _ elementary cycles _ or _ simple cycles _ running through some arc @xmath3 , can be computed in @xmath4 and @xmath5 , respectively . </S>",
    "<S> we use this fact and introduce the notion of the _ essential minor _ and _ isolated cycles _ , which yield a priori problem size reductions and in the special case of so called _ resolvable graphs _ an exact solution in @xmath6 . </S>",
    "<S> we show that weighted versions of the fasp and fvsp possess a bellman decomposition , which yields exact solutions using a dynamic programming technique in times @xmath7 and @xmath8 , where @xmath9 , @xmath10 , respectively . </S>",
    "<S> the parameters @xmath11 can be computed in @xmath12 , @xmath13 , respectively and denote the maximal dimension of the cycle space of all appearing _ meta graphs _ , decoding the intersection behavior of the cycles . </S>",
    "<S> consequently , @xmath11 equal zero if all meta graphs are trees . </S>",
    "<S> moreover , we deliver several heuristics and discuss how to control their variation from the optimum . summarizing , the presented results allow us to suggest a strategy for an implementation of a fast and accurate fasp / fvsp - solver . </S>"
  ]
}