{
  "article_text": [
    "a _ k - regular _ graph is one in which every vertex has degree @xmath1 .",
    "the _ girth _ of a graph is the length of a shortest cycle .",
    "@xmath0-graph _ is a regular graph of degree @xmath1 and girth @xmath2 , and a _ @xmath0-cage _ is a @xmath0-graph of minimum possible order .    the problem of determining this order and identifying the corresponding cages has been extensively studied .",
    "see  @xcite for a current survey .",
    "the cases where the order of the cage was known precisely before this work can be summarized as follows .",
    "1 .   regular graphs of degree 3 for girths up to 12 ; 2 .",
    "girth 5 graphs for degrees up to 7 ; 3 .",
    "girth 6 , 8 and 12 graphs for degree one more than a prime power ; 4 .",
    "the case of degree 7 and girth 6 .    in this note",
    ", we add the case of degree 4 and girth 7 to the list , and also show that the ( 3,11)-cage is unique .",
    "the order , but not the uniqueness , of the @xmath3-cage was previously announced in  @xcite .",
    "the uniqueness of the ( 3,11)-cage , and the lower bound of 67 for the ( 4,7)-cage , was proved using the program mentioned in  @xcite but not described in detail there .",
    "we will provide that description here using the ( 4,7)-cage as an example .    consider the construction of 4-regular graphs of girth at least  7 and order @xmath4 .",
    "the vertices at distance at most  3 from some fixed vertex form a tree @xmath5 with 53 vertices as in  figure  [ tree47 ] .",
    "( in the case of even girth we would root the tree at an edge rather than a vertex . )    , width=377 ]    let @xmath6 be the set of @xmath7 vertices consisting of the 36 leaves of @xmath5 and the @xmath8 vertices not in  @xmath5 .",
    "the task is thus to add additional edges within @xmath6 so that the resulting graph is quartic and girth at least  @xmath9 .",
    "we can do this in standard depth - first manner , starting with the tree and adding one edge at a time .",
    "for addition of a new edge @xmath10 to be valid , @xmath11 and @xmath12 must have degree less than  4 and be at distance at least  6 ; these properties are easily monitored .    at each stage in the search , we choose one vertex of degree less than  4 and try all the possibilities for joining it to other vertices .",
    "we choose the vertex whose options are the most restricted , as experiments showed this heuristic to be a good one .    without additional improvements , this search is far too expensive due to multiple equivalent subcases . the most obvious source of equivalence is the automorphism group of the tree .",
    "thus , the two choices @xmath13 in figure  [ tree47ab ] are clearly equivalent and there is no need to try @xmath14 as the first choice once @xmath15 has been tried .",
    "the simple structure of the tree allows examples of this type of equivalence to be monitored efficiently without explicit computation of automorphism groups .",
    "however , when a moderate number of edges have been added , discovery of automorphisms is considerably more difficult .",
    "more importantly , there are equivalent subcases in the search that do not derive directly from automorphisms of any of the graphs that are constructed",
    ". consider figure  [ prune47c ] .",
    "suppose we have completed the part of the search that begins with the three edges @xmath16 in the upper diagram of the figure .",
    "this means that , up to isomorphism , we have already found all the quartic graphs that contain the upper diagram as a subgraph .",
    "now suppose that at a later point in the search we have added the edges @xmath17 shown in the lower diagram of figure  [ prune47c ] , and are about to consider further edges .",
    "if we add edge @xmath2 , then we will not find any new quartic graphs , since @xmath18 is isomorphic to @xmath19 .",
    "therefore , we can mark @xmath2 as ineligible .",
    "this applies whether we consider @xmath2 as the very next edge to add or we consider adding it to some non - trivial extension of @xmath17 . for efficiency reasons we separate these two cases .",
    "we now define the pruning process formally .",
    "each node of the search tree corresponds to a graph @xmath20 , where @xmath21 is a set of edges within  @xmath6 .",
    "the _ subsearch rooted at @xmath20 _ is the subtree of the search tree rooted at @xmath20 , and @xmath20 is _ completed _ when we have finished the scan of that subtree .",
    "pruning rule .",
    ": :    suppose that @xmath20 is a search node and @xmath10    is an available edge ( that is , @xmath11 and @xmath12    have degree less than  4 and are at distance at least  6 from each    other ) .",
    "suppose further that there is a subset    @xmath22 such that @xmath23 is    isomorphic to a node which is already completed .",
    "then the subsearch    rooted at @xmath20 can avoid adding the    edge  @xmath10 .",
    "the pruning rule is applied using the ` nauty ` graph isomorphism software  @xcite . since subgraph isomorphism testing",
    "is required , the rule is very expensive compared to the time otherwise required to process one node of the search . in practice we limit it to only certain @xmath21 and certain @xmath24 .",
    "specifically , we define two levels @xmath25 . for search nodes @xmath20 such that @xmath26",
    ", we apply the rule for all  @xmath24 . for @xmath27 , we apply it only to those @xmath24 such that @xmath10 is a candidate for the very next edge to add .    for larger @xmath28 ,",
    "the number of nodes in the search tree is reduced but the time expended in pruning the tree is increased .",
    "so there is some optimal compromise .",
    "a further technique is needed in very difficult cases ( such as @xmath29 ) , for which it is desirable to divide the computation across multiple processes ( perhaps on different computers ) .",
    "the division is accomplished in the usual fashion : for some level @xmath30 , treat the subsearchs rooted at @xmath20 for @xmath31 as independent .",
    "subsearch @xmath32 is assigned to process @xmath33 if @xmath34 , where @xmath35 is the number of processes .",
    "each process involved in the search computes the whole search tree to level @xmath30 and only its own subsearches at higher levels .",
    "since the application of the pruning rule is hard to achieve across multiple processes , we use @xmath36 .",
    "higher @xmath30 also tends to share the load more evenly between processes .",
    "these considerations , however , imply that a large part of the tree , including all the rule applications , are repeated in every process , which would seem to prevent use of large @xmath28 due to the expensive nature of the pruning rule .",
    "the solution is to conduct the computation in two phases . in the first phase ,",
    "executed on a single processor , the search tree is computed up to level @xmath37 while applying the pruning rule . during this phase ,",
    "the results of all the rule applications are recorded in an audit file .",
    "then , in the second phase where the full search tree is computed , the pruning rule is applied at almost no cost by following the audit file . if @xmath30 is not too high , the cost of the division of the second phase into parts is negligible .    for @xmath29",
    ", we used @xmath38 , @xmath39 and @xmath40 .",
    "the total number of nodes in the search tree was 318,904,129,273,923 . using a large mix of computers ranging from 650mhz to 3ghz , the total time was 96  years ( 105,000 nodes per second ) .",
    "this cost was about 5 times the cost for @xmath41 .",
    "improvements to the program after the computation finished resulted in a 4-fold speedup .",
    "nevertheless , the computation of all the cages of order  67 will not be feasible in the near future .",
    "exhaustive computation of the @xmath3-cages , showing that the graph found by balaban  @xcite is the only one , required 17 years on computers averaging about 300 mhz .    with lesser expenditure of cpu time",
    ", we also showed that a @xmath42-cage has at least 202 vertices ( improved from 196 ) , and that a @xmath43-cage has at least 260 vertices ( improved from 256 ) .",
    "the first result , and the bound 258 for the second , were previously announced in  @xcite .    to emphasise the efficiency of this method , we compared it against the previously best code for cubic graphs  @xcite . for girth 9 and 58",
    "vertices , our approach was 52 times faster , while for girth 11 and 104 vertices our approach was 856 times faster .",
    "all of the results we highlight in this paper were previously infeasible .",
    "as noted in the previous section , we showed exhaustively that there are no @xmath44-graphs with 66 or fewer vertices . to complete the proof",
    "that @xmath44-cages have 67 vertices , we present an example .",
    "our example on 67 vertices is given below as an adjacency list .",
    "the graph has an automorphism group of order four , isomorphic to @xmath45 . in the action of this group on the vertices , there are 11 orbits of length 4 , 11 orbits of length 2 , and one fixed point .",
    "the graph was constructed using a hill - climbing algorithm that begins with an empty graph on 67 vertices and adds edges , one at a time , while not violating the degree and girth conditions .",
    "an outline of the algorithm follows .    while = there are vertices with degree < 4 : + while = there are edges that can be added : + for = each edge that can be added + compute the degree sum of its vertices + pick the edge with the largest sum + choose randomly in case of ties + add the winning edge + if all vertices have degree 4 : + save graph + exit + delete 1 , 2 or 3 random edges      1 .",
    "edges are added between vertices with maximum possible degree sum . doing this in the early stages of",
    "the algorithm appears to be essential to finding a cage .",
    "we ran our program many times with this condition removed , without success .",
    "when edges are added , a record is made of when they were added .",
    "time is measured in trips through the outer loop .",
    "when edges are chosen for deletion , it is done in one of two ways . either the probability that an edge is chosen is proportional to its age , or it is inversely proportional to its age .",
    "these two modes are alternated , each being used for a few thousand time periods .",
    "very recently deleted edges are not chosen for reinsertion .",
    "mckay , practical graph isomorphism , _",
    "manitoba conference on numerical mathematics and computing _",
    "( winnipeg , 1980 ) , _ congr . numer .",
    "_ , * 30 * ( 1981 ) 4587 .",
    "software at + http://cs.anu.edu.au/@xmath46bdm / nauty/."
  ],
  "abstract_text": [
    "<S> a _ @xmath0-graph _ is a @xmath1-regular graph of girth  @xmath2 , and a _ </S>",
    "<S> @xmath0-cage _ is a @xmath0-graph of minimum order . </S>",
    "<S> we show that a ( 3,11)-graph of order 112 found by balaban in 1973 is minimal and unique . </S>",
    "<S> we also show that the order of a ( 4,7)-cage is  67 and find one example . finally , we improve the lower bounds on the orders of ( 3,13)-cages and ( 3,14)-cages to 202 and 260 , respectively . </S>",
    "<S> the methods used were a combination of heuristic hill - climbing and an innovative backtrack search .    </S>",
    "<S> ams subject classifications : 05c25 , 05c35 + keywords : cage , regular graph , girth </S>"
  ]
}