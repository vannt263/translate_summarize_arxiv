{
  "article_text": [
    "extensible markup language ( xml ) has reached a great success in the internet era .",
    "xml documents are similar to html documents , but do not restrict users to a single vocabulary , which offers a great deal of flexibility to represent information . to define the structure of documents within a certain vocabulary , schema languages such as _ document type definition _",
    "( dtd ) or _ xml schema _ are used .",
    "xml has been adopted as the most common form of encoding information exchanged by web services @xcite . @xcite",
    "attribute this success to two reasons .",
    "the first one is that the xml specification is accessible to everyone and it is reasonably simple to read and understand .",
    "the second one is that several tools for processing xml are readily available .",
    "we add to these reasons that as xml is _ vocabulary - agnostic _ , it can be used to represent data in basically any domain .",
    "for example , we can find the _",
    "universal business language _ ( ubl ) in the business domain , or the standards defined by the _",
    "open geospatial consortium _",
    "( ogc ) in the geospatial domain .",
    "ubl defines a standard way to represent business documents such as electronic invoices or electronic purchase orders .",
    "ogc standards define _ web service interfaces _ and _ data encodings _ to exchange geospatial information .",
    "all of these standards ( ubl and ogc s ) have two things in common .",
    "the first one is that they use xml schema to define the structure of xml documents .",
    "the second one is that the size and complexity of the standards is very high , making very difficult its manipulation or implementation in certain scenarios @xcite .",
    "the use of such large schemas can be a problem when xml processing code based on the schemas is produced for a resource - constrained device , such as a mobile phone .",
    "this code can be produced using a manual approach , which will require the low - level manipulation of xml data , often producing code that is hard to modify and maintain .",
    "another option is to use an xml data binding code generator that maps xml data into application - specific concepts .",
    "this way developers can focus on the semantics of the data they are manipulating @xcite .",
    "the problem with generators is that they usually make a straightforward mapping of schema components to programming languages constructs that may result in a binary code with a very large size that can not be easily accommodated in a mobile device @xcite .",
    "although schemas in a certain domain can be very large this does not imply that all of the information contained on them is necessary for all of the applications in the domain .",
    "for example , in @xcite a study of the use of xml in a group of 56 servers implementing the _ _ ogc s sensor observation service ( sos ) specification _ _ revealed that only 29.2% of the sos schemas were used in a large collection of xml documents gathered from those servers . based on this information we proposed in @xcite an algorithm to simplify large xml schema sets in an application - specific manner by using a set of xml documents conforming to these schemas .",
    "the algorithm allowed a 90% reduction of the size of the schemas for a real case study .",
    "this reduction was translated in a reduction of binary code ranging between 37 to 84% when using code generators such as jaxb , xmlbeans and xbinder .    in this paper",
    "we extend the schema simplification algorithm presented in @xcite to a more complete _ instance - based xml data binding _ approach .",
    "this approach allows to produce very compact application - specific xml processing code for mobile devices . in order to make the code as small as possible",
    "the approach will use , similarly to @xcite , a set of xml documents conforming to the application schemas . from these documents , in addition to extract the subset of the schemas that is needed , we extract other relevant information about the use of schemas that can be utilised to reduce the size of the final code . a prototype implementation targeted to android and the java programming language has been developed .",
    "the remainder of this paper is structured as follows .",
    "section 2 presents an introduction to xml schema and xml data binding . in section 3 ,",
    "related work is presented .",
    "the _ instance - based data binding approach _ is presented in section 4 .",
    "section 5 overviews some implementation details and limitations found during the development of the prototype .",
    "section 6 presents experiments to measure size an execution times of the code generated by the tool in a real scenario .",
    "last , conclusions and future work are presented .",
    "in this section we present a brief introduction to the topics of xml schema and xml data binding .",
    "xml schema files are used to assess the validity of well - formed element and attribute information items contained in xml instance files @xcite@xcite .",
    "the term xml data binding refers to the idea of taking the information in an xml document and convert it to instances of application objects @xcite .",
    "an xml schema document contains components in the form of complex and simple type definitions , element declarations , attribute declarations , group definitions , and attribute group definitions .",
    "this language allows users to define their own types , in addition to a set of predefined types defined by the language .",
    "elements are used to define the content of types and when global , to define which of them are valid as top - level element of an xml document .",
    "xml schema provides a derivation mechanism to express subtyping relationships .",
    "this mechanism allows types to be defined as subtypes of existing types , either by extending or restricting the content model of base types .",
    "apart from type derivation , a second subtyping mechanism is provided through substitution groups .",
    "this feature allows global elements to be substituted by other elements in instance files .",
    "a global element e , referred to as _ head element _ , can be substituted by any other global element that is defined to belong to the e s substitution group .      with _ xml data binding _",
    ", an abstraction layer is added over the raw xml processing code , where xml information is mapped to data structures in an application data model .",
    "xml data binding code is often produced by using code generators that use a description of the structure of xml documents using some schema language .",
    "the use of generators potentially gives benefits such as increased productivity , consistent quality throughout all the generated code , higher levels of abstraction as we usually work with an abstract model of the system ; and the potential to support different programming languages , frameworks and platforms @xcite .",
    "although most of the generators available nowadays are targeted to desktop or server applications , several tools have been develop for mobile devices such as xbinder and codesysnthesis xsd / e , or for building complete web services communication end - points for resource constrained environments , such as gsoap @xcite .",
    "all of the tools mentioned before map xml schema structures to programming languages construct in a straightforward way , which is not adequate when large schemas sets are used .",
    "problems related with having large and complex schemas have been presented in several articles @xcite .",
    "for example , @xcite deal with problems of large schemas in schema matching in the business domain . in the context of schema and ontology mapping ,",
    "@xcite states that current match systems still struggle to deal with large - scale match tasks to achieve both good effectiveness and good efficiency .",
    "@xcite , the work extended here , expose the problems related to using xml data binding tools to generate xml processing code for mobile geospatial applications .",
    "last , @xcite present an algorithm to extract fragments of large conceptual schemas arguing that the largeness of these schemas makes difficult the process of getting the knowledge of interest to users .",
    "when considering xml processing in the context of mobile devices , literature is focused in two main competing requirements : _ compactness _ ( of information ) and _ processing efficiency _ @xcite . to achieve compactness compression techniques",
    "are used to reduce the size of xml - encoded information @xcite . about processing efficiency",
    ", not much work has been done in the mobile devices field .",
    "a prominent exception in this topic is the work presented in @xcite , @xcite and @xcite .",
    "these articles are all related to the implementation of a middleware platform for mobile devices : the _ fuego mobility middleware _ @xcite , where xml processing has a large impact . the proposed _",
    "xml stack _ provides a general - purpose xml processing api called _ xas _",
    "@xcite , an xml binary format called _ xebu _ @xcite , and others apis such as _ trees - with - references _ ( reftrees ) and _ random access xml store _",
    "( raxs)@xcite .    regarding the use of instance files to drive the manipulation of schemas",
    ", @xcite presents a review of different methods that use instance files for ontology matching . in the field of schema inference ,",
    "instance files are used as well to generated adequate schema files that can be used to assess their validity ( e.g. @xcite ) .",
    "_ instance - based xml data binding _ , is a two - step process .",
    "the first step , _ instance - based schema simplification _ , extracts the information about how schema components are used by a specific application , based on the assumption that a representative subset of xml documents that must be manipulated by the application is available .",
    "the second step , _ code generation _",
    ", consists of using all of the information extracted in the previous step to generate xml processing code as optimised as possible for a target platform .",
    "the whole process is shown in figure [ fig : flow - xmldatabinding ] , the inputs to the first step are a set of schemas and a set of xml documents conforming to them .",
    "the outputs will be the subset of the schemas used by the xml documents and other information about the use of certain features of the schemas that can be used to optimise the code in the following step .",
    "the outputs of the first step are the inputs of the code generation step .",
    "the two steps of the process are detailed in the following subsections .",
    "+      the _ instance - based schema simplification _",
    "step extracts the subset of the schemas used on a set of xml documents .",
    "the algorithm used to perform this simplification was first presented in @xcite and has been extended here to extracts other information that can be used to produce more compact xml processing code .",
    "the idea behind this algorithm , is depicted graphically in figure [ fig : simplificationalg ] .",
    "the figure shows to the left the graph of relationships between schemas components .",
    "the different planes represent different namespaces .",
    "links between schema components represent dependencies between them . to the right",
    "we have the tree of information items ( xml nodes ) contained in xml documents . for the sake of simplicity",
    "we show in the figure only the tree of nodes corresponding to a single document .",
    "an edge between an xml node and a schema component represents that the component describes the structure of the node . to simplify the figure we have shown only a few edges ,",
    "although an edge for every xml node must exist .",
    "starting from a set of xml documents and the schema files defining their structure , it is possible to calculate which schema components are used and which are not . in doing so , the following information is also recorded :    * _ types that are instanced in xml documents _ : for each xml node exists a schema type describing its structure .",
    "while xml documents are processed the type of each xml node is recorded .",
    "this way we can know which types are instanced and which are not . * _ types and elements substitutions _ : the subtyping mechanisms mentioned in section 2.1 allow the _ real _ or _ dynamic type _ of an element to be different from its _ declared type_. elements declared as having type a , may have any type derived from a in an xml document . in this case",
    "the real type must be specified with the attribute _ xsi : type_. something similar happens with substitution groups , although in this case the attribute _ xsi : type _ is not necessary .",
    "the information about xml nodes whose dynamic type is different from its declared type is recorded . * _ wildcards substitutions _ : the elements used to substitute wildcards are recorded . *",
    "_ elements occurrence constraints information _ : for all of the elements it is checked that if they allow multiple occurrences there is at least one document where several occurrences of the element are present . *",
    "_ elements with a single child _ : all of the elements that contain a single child are also recorded .",
    "+      a more detailed view of the code generation process is shown in figure [ fig : flow_gen ] .",
    "the outputs of the schema simplification step are used as inputs to the _ schema processor _ , the component of the generator in charge of creating the data model that will be used later by the _ template engine_. the _ template engine _ combines pre - existing _ class templates _ with the data model to generate the final source code .",
    "the use of a template engine allows the generation of code for other platforms and programming languages by just defining new class templates .",
    "+    a summary of the features of the code generation process that contribute to the generation of optimised code is listed next :    * _ use of information extracted from xml documents _ : the use of information about schema use allows to apply the following optimisations : * * _ remove unused schema components _ : the schema components that are not used are not considered for code generation . by removing the unused components we can substantially reduce the size of the generated code .",
    "the amount of the reduction will depend on how specific applications make use of the original schemas .",
    "* * _ efficient handling of subtyping and wildcards _ : the number of possible substitutions of a type by its subtypes , and a head element of a substitution group by the members of the group can be bounded with the information gathered from the instances files . in the general case , where no instance - based information is available , generic code to face any possible type or element substitution must be written .",
    "limiting the number of possible substitutions to only a few allows the production of simpler and faster code .",
    "the same reasoning is applied to wildcards .",
    "* * _ inheritance flattening _ : by flattening subtyping hierarchies for a given type , i.e. , including explicitly in its type definition all of the fields inherited from base types and eliminating the subtype relationship with its parents , we can reduce the number of classes in the generated code .",
    "the application of this technique will not necessarily result in smaller generated code , as the fields defined in base types must be replicated in all of their child types , but it will have a positive impact in the work of the class loader because a lower number of classes have to be loaded while the application is executed .",
    "let us consider the case of the geospatial schemas introduced in section 1 .",
    "these schemas typically present deep subtyping hierarchies with six or more levels , as a consequence when an xml node of a type in the lowest levels of the hierarchy must be processed , all of its parent types must be loaded first .",
    "the technique of inheritance flattening has been widely explored and used in different computer science and engineering fields as is proven by the abundant literature found in the topic @xcite . * * _ adjust occurrence constraints _ : if an element is declared to have multiple occurrences it must be mapped to a data structure in the target programming language that allows the storage of the multiple instances of the elements , e.g. an array or a linked list . in practice",
    "if the element has at most one occurrence in the xml documents that must be processed by the application it can be mapped to a single object instance .",
    "using this optimisation the final code will make a better use of memory because instead of creating a collection ( array , linked list , etc . )",
    "that will only contain a single object , it creates a single object instance . *",
    "_ collapse elements containing single child elements _",
    ": information items that will always contain single elements can be replaced directly by its content . by applying this optimisation we can reduce the number of classes in the generated code , which will have a positive impact in the size of the final code , the amount of work that has to be done by the class loader , and the use of memory during execution .",
    "this optimization is used by mainstream xml data binding tools such as jibx and the xml schema definition tool . * _ disabling parsing / serialization operations as needed _ : some code generators always includes code for parsing and serialization even when only one of these functions is needed . for example , in the context of geospatial web services , most of the time spent in xml processing by client - side applications is dedicated to parsing , as messages received from the servers are potentially large . on the other hand , most of these services allows request to be sent to the server encoded in an http get request , therefore xml serialisation is not needed at all . * _ ignoring sections of xml documents _ : frequently , we are not interested in all of the information contained in xml files , ignoring the unneeded portions of the file will improve the speed of the parsing process and it may have a significant impact in the amount of memory used by the application .",
    "in addition , the following features not related directly with code optimisation are also supported :    * _ source code based on simple code patterns _ : the generated source code is straightforward to understand and modify in case it is necessary . * _ tolerate common validation errors : _ occasionally , xml documents that are not valid against their respective schemas must be processed by our applications . in many cases ,",
    "the validation errors can be ignored following simple coding rules .",
    "a detailed explanation of each of the features presented in this section can be found in @xcite .",
    "as mentioned before , the approach presented in this paper is based on the assumption that a representative set of xml documents exists . by _ representative",
    "we mean that these documents contain instances of all of the possible xml schema elements and types that will be processed by the application in the future . nevertheless , this subset might not always be available . in this case",
    ", we can still take advantage of the approach by building _",
    "synthetic _ xml documents containing relevant information .",
    "whether xml processing code is produced manually or automatically developers typically have some knowledge of the structure of the documents that must be processed by the applications .",
    "therefore , we can use this knowledge to build sample xml documents that can be used as input to the algorithm . in case",
    "it were necessary , the final code can be manually modified later , or the sample files changed and used to regenerate the code .    if we were using synthetic documents instead of actual documents some of the optimisations related to the information extracted from them should not be applied .",
    "the reason for this is that we do not have enough information about how the related schema features are used .",
    "for example , we can not apply optimisations such as the efficient handling of subtyping and wildcards , as we might not know all of the possible type substitutions .",
    "something similar happens with the adjustment of occurrence constraints .",
    "nevertheless , other optimisations such as inheritance flattening or removing unused schema components can be still safely applied .",
    "_ dbmobilegen _ ( dbmg for short ) is the current implementation of the _ instance - based xml data binding _",
    "approach @xcite .",
    "it includes components implementing both the simplification algorithm and code generation process .",
    "it is implemented in java and relies on existing libraries such as _ _ eclipse xsd _ _ for processing xml schemas , _ _ freemarker _ _ as template engine library , and as well as the generated code , _ _ kxml _ _ for low - level xml processing .",
    "this tool produces code targeted to android mobile devices and the java programming language .",
    "the current implementation has some limitations . because of the complexity of the xml schema language itself",
    ", support for certain features and operations have been only included if it is considered necessary for the case study or applications where the tool has been used @xcite .",
    "some of these limitations are listed next :    * _ serialization is not supported yet _ : the role of parsing for our sample applications and case studies is far more important than serialization .",
    "this is mainly because we have preferred to use http get to issue server requests wherever possible . *",
    "_ dynamic typing using xsi : type not fully supported _ : the mechanism of dynamic type substitution by using the _ xsi : type _ attribute has not been fully implemented yet , as the xml documents processed in the applications developed so far do not use this feature .",
    "in this section we present two experiments .",
    "the first one tries to test how much the size of the generated code can be reduced by using dbmg .",
    "the second one measures the execution times of generated code in a mobile phone .      in this experiment",
    "we borrow the test case presented in @xcite that implements the communication layer for an sos client .",
    "sos is a standard web service interface defined to enhance interoperability between sensor data producers and consumers @xcite .",
    "the sos schemas are among the most complex geospatial web service schemas as they are comprised of more than 80 files and they contain more than 700 complex types and global elements @xcite .",
    "the client must process data retrieved from a server that contains information about air quality for the valencian community .",
    "this information is gathered by 57 control stations located in that area .",
    "the stations measure the level of different contaminants in the atmosphere .",
    "a set of 2492 xml documents was gathered from the server to be used as input , along with the sos schemas , to the instance - based data binding process .",
    "the source code generated by dbmg is compiled to the _ compressed jar _ format and compared with the final code generated by other generators : xbinder , jaxb and xmlbeans .",
    "the last two are not targeted to mobile devices but are used here as reference to compare the size of similar code for other types of applications .",
    "table [ generatedcode2 ] shows the size of the code produced with the different generators from the full sos schemas ( full ) and from the subset of the schemas used in the input instance files ( reduced ) .",
    "the reduced schemas are calculated applying the schema simplification algorithm to the full sos schemas .",
    "the last row of the table ( libs ) includes the size of the supporting libraries needed to execute the generated code in each case .",
    "|p1.5cm| p1.1cm| p1cm| p1.6cm| p1cm|    ' '' ''    ' '' ''    & xbinder & jaxb & xmlbeans & dbmg + full & 3,626 & 754 & 2,822 & 88 + reduced & 567 & 90 & 972 & 88 + libs & 100 & 1,056 & 2,684 & 30 +    figure [ fig : codegen_full ] shows the total size of xml processing code when using the full and reduced schemas . in both cases",
    ", we can see the enormous difference that exists between the code generated by dbmg and the code generated by other tools .",
    "+    the size for dbmg is the same in both cases because it implicitly performs the simplification of the schemas before generating source code .",
    "it must be noted that serialisation is not still implemented in dbmg .",
    "we roughly estimate that including serialisation code will increase the final size in about 30% . in any case , the code generated by this tool is about 6 times smaller than the code generated by xbinder from the reduced schemas and about 30 times smaller than the code generated from the full schemas .",
    "one of the reasons for this difference in size is the lack of serialisation support in dbmg .",
    "another reason is that xbinder generates code to ensure all of the restrictions related to user - defined simple types .",
    "this is an advantage if we parse data obtained for a non - trusted source and the application requires the data to be carefully validated , but it is a disadvantage in the opposite case , as unneeded verification increase processor usage and memory footprint . in the case of dbmg , as it aggressively tries to lower final code size , these simple type restrictions are ignored and these types do not even have a counterpart in the generated code .",
    "when compared to jaxb , using the reduced schemas , the main difference in size is in the supporting libraries , as the code generated by jaxb is very simple .",
    "still , the code generated by dbmg is slightly smaller because the step of removing elements with single child elements and inheritance flattening eliminates a large number of classes . in all of the cases ,",
    "xmlbeans has the largest size .",
    "this tool is mostly optimised for speed at the expense of generating a more sophisticated and complex code and the use of bigger supporting libraries .      to test the performance of the generated code",
    "we will parse a set of 38 capabilities files obtained from different sos servers .",
    "the code needed to parse these files is generated and deployed to a htc desire android smartphone with a 1 ghz qualcomm quaddragon cpu and 576 mb of ram .",
    "the 38 files have sizes ranging from less than 4 kb to 3.5 mb , with a mean size of 315 kb and a standard deviation of 26.7 kb . as",
    "the size range is large and with the purpose of simplifying presentation we divide the files in two groups , those with a size below 100 kb , caps - s ( 30 files ) , and those with size equal to or higher than 100 kb , caps - l ( 8 files ) .    to obtain accurate measures of the execution time for the code we selected the methodology presented in @xcite .",
    "this methodology provides a statistically rigorous approach to deal with all of the non - deterministic factors that may affect the measurement process ( multi - threading , background processes , etc . ) .",
    "as our goal is only to measure the execution times of xml processing code , we stored the files to be parsed locally to avoid interferences related to network delays . besides , to minimise the interference of data transfer delays from the storage medium all of the files below 500 kb were read into memory before being parsed .",
    "it was impossible to do the same for files with sizes above 500 kb because of the device memory restrictions .",
    "figures [ mobile_execution_small ] and [ fig : mobile_execution ] shows the execution times of code generated by dbmg .",
    "the figures also include the execution times needed by _ kxml _ , the underlying parser used by dbmg , to process the same group of files .",
    "the execution times for _ kxml _ were calculated by creating a simple test case where files are processed using this parser , but no action is taken when receiving the events generated by it .",
    "+     +    when files below 100 kb are processed it can be observed that the overhead added by the generated code is not high ( figure [ mobile_execution_small ] ) .",
    "nevertheless , we can see in figure [ fig : mobile_execution ] that when file size is above 1 mb , the overhead starts to be important ( > 1s ) .",
    "this happens because the large amount of memory that is required to store the information that is being processed forces the execution of the garbage collector with a high frequency",
    ". we have to keep in mind that code produced manually can have similar problems if it were necessary to retain most of the information read from the xml files in memory .    the experiment described above",
    "was extended in @xcite to compare the code generated by dbmg with other data binding tools and to measure also the performance of this code when executed in a windows pc .",
    "the experiments showed that the execution times for the mobile devices were around 30 to 90 times slower than those for the personal computer .",
    "the experiments also showed that the code generated by dbmg was as fast as code generated by other data binding tools for the android platform .",
    "in this paper we have presented an approach to generate compact xml processing code based on large schemas for mobile devices .",
    "it utilises information about how xml documents make use of its associated schemas to reduce the size of the generated code as much as possible .",
    "the solution proposed here is based on the observation that applications that makes use of xml data based on large schemas do not use all of the information included in these schemas .    a code generator implementing the approach that produces code targeted to android mobile devices and the java programming language has been developed .",
    "this tool has been tested in a real case study showing a large reduction in the size of the final xml processing code when compared with other similar tools generating code for mobile , desktop and server environments .",
    "nevertheless , this result must be looked at with caution as the magnitude of the reduction will depend directly from the use that specific applications make of their schemas .",
    "this work has been partially supported by the `` espaa virtual '' project ( ref .",
    "cenit 2008 - 1030 ) through the instituto geogrfico nacional ( ign ) ; and project geocloud , spanish ministry of science and innovation ipt-430000 - 2010 - 11 .",
    "d.  beyer , c.  lewerentz , and f.  simon .",
    "impact of inheritance on metrics for size , coupling , and cohesion in object - oriented systems . in _ proceedings of the 10th international workshop on new approaches in software measurement _ ,",
    "iwsm 00 , pages 117 , london , uk , 2000 .",
    "springer - verlag .",
    "c.  bogdan chirila , m.  ruzsilla , p.  crescenzo , d.  pescaru , and e.  tundrea . towards a reengineering tool for java based on reverse inheritance .",
    "in _ in proceedings of the 3rd romanian - hungarian joint symposium on applied computational intelligence ( saci 2006 ) _ , pages 9637154 , 2006 .",
    "bungartz , w.  eckhardt , m.  mehl , and t.  weinzierl . .",
    "in _ proceedings of the 8th international conference on computational science , part iii _ , iccs 08 , pages 213222 , berlin , heidelberg , 2008 .",
    "springer - verlag .",
    "a.  cicchetti , d.  d. ruscio , r.  eramo , and a.  pierantonio .",
    "automating co - evolution in model - driven engineering . in _ proceedings of the 2008 12th international ieee enterprise distributed object computing conference _ , pages 222231 , washington , dc , usa , 2008 .",
    "ieee computer society .",
    "a.  georges , d.  buytaert , and l.  eeckhout .",
    "statistically rigorous java performance evaluation . in _ proceedings of the 22nd annual acm sigplan conference on object - oriented programming systems and applications _ , oopsla 07 , pages 5776 , new york , ny , usa , 2007 .",
    "acm .",
    "s.  kbisch , d.  peintner , j.  heuer , and h.  kosch . .",
    "in _ proceedings of the 24th international conference on advanced information networking and applications workshops , waina 10 _ , volume  0 , pages 508513 , los alamitos , ca , usa , 2010 .",
    "ieee computer society .",
    "j.  kangasharju , s.  tarkoma , and t.  lindholm .",
    "xebu : a binary format with schema - based optimizations for xml data . in a.",
    "ngu , m.  kitsuregawa , e.  neuhold , j .- y .",
    "chung , and q.  sheng , editors , _ web information systems engineering - wise 2005 _ , volume 3806 of _ lecture notes in computer science _ , pages 528535 .",
    "springer berlin / heidelberg , 2005 .",
    "e.  rahm . towards large - scale schema and ontology matching . in z.",
    "bellahsene , a.  bonifati , and e.  rahm , editors , _ schema matching and mapping _ , data - centric systems and applications , pages 327 .",
    "springer berlin heidelberg , 2011 .",
    "a.  tamayo , c.  granell , and j.  huerta . .",
    "in _ proceedings of the 2nd international conference and exhibition on computing for geospatial research and application ( com.geo 2011 ) _ , pages 17:117:9 , new york , ny , usa , 2011 .",
    "a.  tamayo , c.  granell , and j.  huerta . .",
    "in _ proceedings of the 2nd international conference and exhibition on computing for geospatial research and application ( com.geo 2011 ) _ , pages 16:116:9 , new york , ny , usa , 2011 .",
    "a.  tamayo , p.  viciano , c.  granell , and j.  huerta . . in s.  geertman , w.  reinhardt , and f.  toppen , editors ,",
    "_ advancing geoinformation science for a changing world _ , volume  1 of _ lecture notes in geoinformation and cartography _ , pages 185209 .",
    "springer berlin heidelberg , 2011 .",
    "r.  a. van  engelen and k.  a. gallivan . .",
    "in _ proceedings of the 2nd ieee / acm international symposium on cluster computing and the grid , ccgrid 02 _ , pages 128 , washington , dc , usa , 2002 .",
    "ieee computer society .",
    "a.  villegas and a.  oliv . a method for filtering large conceptual schemas . in _ proceedings of the 29th international conference on conceptual modeling _ ,",
    "er10 , pages 247260 , berlin , heidelberg , 2010 .",
    "springer - verlag ."
  ],
  "abstract_text": [
    "<S> xml and xml schema are widely used in different domains for the definition of standards that enhance the interoperability between parts exchanging information through the internet . the size and complexity of some standards , and their associated schemas , </S>",
    "<S> have been growing with time as new use case scenarios and data models are added to them . the common approach to deal with the complexity of producing xml processing code based on these schemas </S>",
    "<S> is the use of xml data binding generators . </S>",
    "<S> unfortunately , these tools do not always produce code that fits the limitations of resource - constrained devices , such as mobile phones , in the presence of large schemas . </S>",
    "<S> in this paper we present _ instance - based xml data binding _ , an approach to produce compact application - specific xml processing code for mobile devices . </S>",
    "<S> the approach utilises information extracted from a set of xml documents about how the application make use of the schemas .    </S>",
    "<S> [ languages and system , standards ] </S>"
  ]
}