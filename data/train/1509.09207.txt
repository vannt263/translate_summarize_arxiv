{
  "article_text": [
    "distributed control of a system consisting of autonomous mobile computing entities in the three dimensional euclidean space ( 3d - space ) is one of the most challenging problems in distributed computing theory and robotics .",
    "one of the most important properties that is expected to such systems is _ self - organization ability _ that enables the system to obtain the coordination by itself .",
    "for example , drones are becoming widely available and their applications in sensing , monitoring , and rescuing in harsh environment such as disaster area and active volcanoes , where they are required to coordinate themselves without human intervention , are attracting much attention .",
    "as one of the most fundamental tasks in 3d - space , this paper considers the _ pattern formation problem _ that requires a swarm of robots to form a given 3d target pattern .",
    "a robot is a point in 3d - space that autonomously moves according to a given rule .",
    "we adopt the conventional computation model  @xcite , i.e. , each robot repeats a look - compute - move cycle , where it observes the positions of other robots ( look phase ) , computes its next position with a given algorithm ( compute phase ) , and moves to the next position ( move phase ) .",
    "each robot is _ anonymous _ in the sense that they have no identifiers and the robots are _ uniform _ in the sense that all robots execute a common algorithm .",
    "each robot has no access to the global @xmath7-@xmath8-@xmath9 coordinate system ( like gps ) and its observation and movement are done in terms of its _",
    "local @xmath7-@xmath8-@xmath9 coordinate system_. the origin of the local coordinate system of a robot is its current position and the local coordinate system has arbitrary directions and unit distance .",
    "however we assume that all local coordinate systems are right - handed .",
    "thus each local coordinate system is either a uniform scaling , transformation , rotation , or their combination of the global coordinate system .",
    "a robots is _ oblivious _ if its local memory is refreshed at the end of each cycle , otherwise _ non - oblivious_. hence the input to the algorithm at an oblivious robot is the observation obtained in the current cycle .",
    "suzuki and yamashita pointed out that oblivious mobile robot system is self - stabilizing  @xcite , that guarantees self - organization and fault tolerance against finite number of transient faults  @xcite . in a move phase",
    ", each robot reaches the next position and in this paper we do not care for the track of movement . in a move phase . if the track to the next position is shorter than @xmath10 , non - rigid movement makes a robot stop at the next position . ]",
    "we consider the _ fully - synchronous ( fsync ) _ model where the robots execute the @xmath11-th look - compute - move cycle at the same time with each of the look , compute , and move phases completely synchronized . here",
    "a _ configuration _ of the robots is the positions of the robots observed in the global coordinate system .",
    "these assumptions mean that the robots do not have explicit communication medium and they have to tolerate inconsistency among local coordinate systems so that they coordinate themselves by building some agreement by using inconsistent observations .",
    "the pattern formation problem was first introduced by suzuki and yamashita for the robots moving in the two - dimensional euclidean space ( 2d - space )  @xcite .",
    "they characterized the class of formable patterns by using the notion of _ symmetricity _ of an initial configuration .",
    "the symmetricity of a configuration is essentially the order of the cyclic group that acts on it .",
    "let @xmath1 be an initial configuration of robots without any multiplicity .",
    "we consider the decomposition of @xmath1 into regular @xmath12-gons centered at the center of the smallest enclosing circle of @xmath1 .",
    "the symmetricity @xmath0 of @xmath1 is the maximum value of such @xmath12 with an exception that when a single point of @xmath1 is at the center of the smallest enclosing circle of @xmath1 , @xmath2 .",
    "we consider a point as a regular @xmath13-gon with an arbitrary center and a set of two points as a regular @xmath14-gon with the center at the midpoint of the two points .",
    "this exception is derived from an easy symmetry breaking algorithm , i.e. , the robot on the center leaves its current position",
    ". then they showed that fsync robots can form a target pattern @xmath3 from a given initial configuration @xmath1 if and only if @xmath0 divides @xmath4 regardless of obliviousness .",
    "this impossibility is by the fact that since @xmath0 divides the robots into regular @xmath0-gons , these symmetric @xmath0 robots can not break their symmetry .",
    "thus robots in 2d - space can not break rotational symmetry of an initial configuration .",
    "yamauchi et al . first showed that rotational symmetry of robots in 3d - space causes the same impossibility  @xcite .",
    "they considered the _ plane formation problem _ that requires the robots to land on a common plane without making any multiplicity . in 3d - space , there are five - kinds of rotation groups with finite order , i.e. , _ the cyclic groups _ , _ the dihedral groups _",
    ", _ the tetrahedral group _ , _ the octahedral group _ , and _ the icosahedral group _",
    "given a configuration @xmath1 in 3d - space , its _ rotation group _",
    "@xmath15 is the rotation group that acts on @xmath1 and none of its supergroup in these five kinds of rotation groups acts on @xmath1 .",
    "they called the cyclic groups and the dihedral groups _ two - dimensional ( 2d ) _ , while the remaining three rotation groups _ three - dimensional ( 3d ) _ , because 3d rotation groups do not act on points on a plane .",
    "then they showed that the robots can not form a plane from an initial configuration @xmath1 if and only if @xmath15 is a 3d rotation group and all robots are not on the rotation axes of @xmath15 .",
    "the results showed that even when the robots form a regular polyhedron ( except an regular icosahedron ) in an initial configuration , they can break their 3d rotation group and form a plane .    in this paper , we define the _ symmetricity _ @xmath5 of a configuration @xmath1 in 3d - space as a set of rotation groups that acts on the positions of robots and that consists of rotation axes containing no robot .",
    "we will give the following necessary and sufficient condition for the pattern formation problem in 3d - space .",
    "[ theorem : main ] regardless of obliviousness , fsync robots can form a target pattern @xmath3 from an initial configuration @xmath1 if and only if @xmath6 .",
    "the impossibility is derived from symmetry among robots in the same way as 2d - space . for the solvable instances , we present a pattern formation algorithm for oblivious fsync robots that non - oblivious robots can execute correctly by just ignoring its memory contents .",
    "theorem  [ theorem : main ] guarantees , for example , that the robots can form a square anti - prism or a regular octagon from an initial configuration where they form a cube , because their symmetricity is identical while the rotation groups of the target patterns are dihedral and that of the initial configuration is the octahedral group .",
    "thus the rotation group of the robots decreases during the formation .",
    "( see figure  [ fig : exrho ] . )",
    "we will show that the robots can translate a given initial configuration @xmath1 into another configuration @xmath16 with @xmath17 . from the definition , @xmath18 .",
    "the symmetry breaking algorithm is based on the `` go - to - center '' algorithm proposed in @xcite .",
    "theorem  [ theorem : main ] guarantees that such @xmath19 is an element of @xmath20 which means that @xmath19 is a subgroup of @xmath21 .",
    "we will show that the robots can easily form @xmath3 from such @xmath16 by embedding an image of @xmath3 into @xmath16 and building an agreement on a perfect matching between @xmath3 and @xmath16 .",
    "the main contribution of this paper is the fact that the symmetry of moving points is different from symmetry of their positions and robots can show their symmetry by their movement .",
    "we finally note that our result is a generalization of existing results for fsync robots in 2d - space  @xcite",
    ".    * related work .  * the only existing paper on autonomous mobile robot systems in 3d - space  @xcite considers the plane formation problem motivated by the fact that autonomous mobile robot systems in 2d - space has been extensively investigated .",
    "we mainly survey the results on formation problems in 2d - space .",
    "the main research interest has been the computational power of robot systems and minimum requirements for the robots to accomplish a given task .",
    "many fundamental distributed tasks have been introduced , for example , _ gathering _",
    "@xcite , _ pattern formation _",
    "@xcite , _ partitioning _",
    "@xcite , _ covering _  @xcite , and so on .",
    "the book by flocchini et al .",
    "@xcite contains almost all results on autonomous mobile robot systems up to year 2012 .",
    "asynchrony among robots is classified into three models ; the fully synchronous ( fsync ) model , the _ semi - synchronous _ ( ssync ) model , and the _ asynchronous _ ( async ) model .",
    "the robots are ssync if some robots do not start the @xmath22-th look - compute - move cycle for some @xmath22 , but all robots that have started the cycle synchronously execute their look , compute , and move phases  @xcite .",
    "the robots are async if no assumptions are made on the execution of look - compute - move cycles  @xcite .",
    "yamashita et al .",
    "characterized the pattern formation problem for each of the fsync , ssync , and async models  @xcite , that are summarized as follows : ( 1 ) for non - oblivious fsync robots , pattern @xmath3 is formable from an initial configuration @xmath1 if and only if @xmath0 divides @xmath4 .",
    "( 2 ) pattern @xmath3 is formable from @xmath1 by oblivious async ( thus ssync ) robots if @xmath3 is formable from @xmath1 by non - oblivious fsync robots , except for @xmath3 being a point of multiplicity 2 .",
    "this exceptional case is called the rendezvous problem .",
    "indeed , it is trivial for two fsync robots , but it is unsolvable for two oblivious ssync ( and hence async ) robots while oblivious ssync ( and async ) robots can converge to a point  @xcite .",
    "however , more than two robots can form a point in the ssync model  @xcite and in the async model  @xcite . in terms of symmetricity ,",
    "the point formation problem is one of the easiest problems ( except the rendezvous problem ) , since @xmath23 when @xmath3 is a point of multiplicity @xmath24 and @xmath0 is always a divisor of @xmath24 by the definition of the symmetricity , where @xmath24 is the number of robots .",
    "the other easiest case is a regular @xmath24-gon , which is also called the circle formation problem , since @xmath25 .",
    "recently the circle formation problem for @xmath24 oblivious async robots ( @xmath26 ) is solved without agreement of clockwise direction , i.e. , chirality  @xcite .",
    "yamauchi et al . showed a randomized pattern formation algorithm for oblivious async robots that breaks the symmetricity of the initial configuration and forms any target pattern with probability @xmath13  @xcite .",
    "the notion of _ compass _ was first introduced in  @xcite that assumes agreement of the direction and/or the orientation ( i.e. , the positive direction ) of @xmath7-@xmath8 local coordinate systems .",
    "flocchini et al",
    ". showed that if oblivious async robots agree on the directions and orientations of @xmath7-@xmath8 axes , they can form any arbitrary target pattern  @xcite .",
    "das et al . characterized the formation of a sequence of patterns by oblivious ssync robots in terms of symmetricity  @xcite .",
    "they showed that symmetricity of each pattern of a formable sequence should be identical and a multiple of the symmetricity of an initial configuration .",
    "such sequence of patterns is a geometric global memory formed by oblivious robots .",
    "all above results are based on unlimited visibility of robots .",
    "a robot has _",
    "limited visibility _ if it can observe other robots within the unknown fixed visibility range  @xcite .",
    "yamauchi et al . showed that oblivious fsync ( thus ssync and async ) robots with limited visibility have substantially weaker formation power than fsync robots with unlimited visibility  @xcite .",
    "ando et al . proposed a convergence algorithm for oblivious ssync robots with limited visibility  @xcite while flocchini et al . assumed consistent compass for convergence of oblivious async robots with limited visibility  @xcite .",
    "peleg et al .",
    "first introduced the _ luminous robot model _ where each robot is equipped with externally and/or internally visible lights  @xcite .",
    "das et al .",
    "provided an algorithms for oblivious luminous robots to simulate robots without lights in stronger synchronization model and showed that two async ( thus ssync ) luminous robots can form a point  @xcite .",
    "* organization .",
    "* we define the mobile robot model in section  [ sec : prel ] and we introduce the rotation groups and symmetricity of a configuration in section  [ sec:3dsym ] .",
    "then we show that the robots can reduce their rotation group to some element of the symmetricity of an initial configuration by the `` go - to - center '' algorithm in section  [ sec : show - sym ] .",
    "we prove the necessity of theorem  [ theorem : main ] in section  [ sec : nec ] and sufficiency of theorem  [ theorem : main ] in section  [ sec : suf ] by showing a pattern formation algorithm for oblivious fsync robots . finally section  [ sec : concl ] concludes this paper .",
    "let @xmath27 be a set of @xmath28 robots each of which is represented by a point in 3d - space .",
    "each robot is anonymous and there is no way to distinguish them .",
    "we use the indexes just for description .    by @xmath29 we denote the global @xmath7-@xmath8-@xmath9",
    "coordinate system .",
    "let @xmath30 be the position of @xmath31 at time @xmath11 in @xmath29 , where @xmath32 is the set of real numbers .",
    "a _ configuration _ of @xmath33 at time @xmath11 is denoted by a multiset @xmath34 .",
    "let @xmath35 be the set of all configurations .",
    "we assume that the robots initially occupy distinct positions , i.e. , @xmath36 for all @xmath37 .",
    "the robots have no access to @xmath29 .",
    "instead , each robot @xmath31 observes the positions of other robots in its local @xmath7-@xmath8-@xmath9 coordinate system @xmath38 , where the origin is always its current position , while the direction of each positive axis and the magnitude of the unit distance are arbitrary but never change .",
    "changes whenever @xmath31 moves , notation @xmath39 is more rigid , but we omit parameter @xmath11 to simplify its notation .",
    "] we assume that @xmath29 and all @xmath38 are right - handed .",
    "thus @xmath38 is either a uniform scaling , transformation , rotation , or their combinations of @xmath29 . by @xmath40",
    "we denote the coordinates of a point @xmath41 in @xmath38 .",
    "we consider discrete time @xmath42 and at each time step the robots execute a look - compute - move cycle with each of look , compute , and move phases completely synchronized , i.e. , we consider the _ fully - synchronous ( fsync ) _ robots in this paper .",
    "we specifically assume without loss of generality that the @xmath43-th look - compute - move cycle starts at time @xmath11 and finishes before time @xmath44 . at time @xmath11",
    ", each @xmath45 obtains a multiset @xmath46 in the look phase .",
    "we call @xmath47 the _ local observation _ of @xmath31 at @xmath11",
    ". then @xmath31 computes its next position using an algorithm @xmath48 , which is common to all robots .",
    "if @xmath48 uses only @xmath47 , we say that @xmath31 is _",
    "oblivious_. otherwise , we say @xmath31 is _ non - oblivious _ , i.e. , @xmath31 can use past local observations and past outputs of @xmath48 . finally",
    ", @xmath31 moves to @xmath49 in @xmath38 before time @xmath44 .",
    "thus the movement of robots is _",
    "rigid_. in this paper , we do not care for the track of the movement of robots , rather each robot jumps to its next position . an infinite sequence of configurations @xmath50 is called an _ execution _ from an _ initial configuration _ @xmath51 .",
    "observe that the execution @xmath52 is uniquely determined , once initial configuration @xmath51 , local coordinate systems of robots at time @xmath53 , initial local memory contents ( if any ) , and algorithm @xmath48 are fixed .",
    "* pattern formation problem .  *",
    "the _ pattern formation problem _ is to make the robots form a given target pattern @xmath3 from an initial configuration @xmath1 . the target pattern @xmath3 is given to each robot as a set of coordinates of @xmath24 points in @xmath29 .",
    "we assume that @xmath3 does not contain any multiplicity , but as we will discuss in section  [ sec : concl ] , we can easily extend the results to target patterns with multiplicities . because robots do not have access to the global coordinate system , it is impossible to form @xmath3 itself .",
    "let @xmath54 be the set of all rotations , translations , uniform scalings , and their combinations .",
    "we say @xmath55 is _ similar _ to @xmath3 if there exists @xmath56 such that @xmath57 , which we denote by @xmath58 .",
    "we say that the robots form a target pattern @xmath3 from an initial configuration @xmath1 , if , regardless of the choice of local coordinate systems and memory contents ( if any ) of robots in the initial configuration , any execution @xmath59 reaches a configuration @xmath60 that is similar to @xmath3 in finite time .    for any ( multi-)set of points @xmath1 , by @xmath61 and @xmath62",
    ", we denote the _ smallest enclosing ball _ of @xmath1 and its center , respectively . a point on the sphere of a ball",
    "is said to be _ on _ the ball and we assume that the _ interior _ or the _ exterior _ of a ball does not include its sphere . the _ innermost empty ball _ @xmath63 of @xmath1 is the ball centered at @xmath62 and contains no point of @xmath1 in its interior , but contains at least one point of @xmath1 on it . when all points are on @xmath61 , we say that @xmath1 is _ spherical_. given a ball @xmath64 , @xmath65 denotes the radius of @xmath64 .",
    "we denote a ball centered at an arbitrary point @xmath66 and with radius @xmath67 by @xmath68 .",
    "in this section , we define the _ rotation group _ and the _ symmetricity _ of a set of points and investigate the relation between the two notions . we start with an arbitrary set of points because any initial configuration and any target pattern contain no multiplicity , and then extend these notions to multiset of points since we should consider an arbitrary algorithm that may produce multiplicity when we discuss impossibility .    in 2d - space",
    ", the symmetricity @xmath0 of a configuration @xmath1 considers the worst - case arrangement of local coordinate system of @xmath1 , that is caused by the rotations around the center of the smallest enclosing circle of @xmath1 , denoted by @xmath69 , i.e. , the _ cyclic group _ of order @xmath0 .",
    "hence @xmath0 is redefined as follows : for an initial configuration @xmath1 identified as a set of points , @xmath0 is the maximum order of the cyclic group that acts on @xmath1 with the exception such that when @xmath70 , @xmath71 .",
    "this exceptional case means that whenever @xmath70 , the robot on @xmath69 can translate @xmath1 into another asymmetric configuration @xmath16 with @xmath72 by leaving @xmath69 which is on the rotation axes of the cyclic group .    .",
    "eight robots and their local coordinate systems are symmetric with respect to the center of their smallest enclosing circle .",
    "there are two groups consisting of @xmath73 symmetric robots and the robots in each group can not break their symmetry .",
    ", width=113 ]    in 3d - space , we consider rotation groups so that we check all possible symmetric arrangement of local coordinate systems .",
    "there are only five kinds of finite - order rotation groups in 3d - space ; the cyclic groups , the dihedral groups , the tetrahedral group , the octahedral group , and the icosahedral group . , which is defined by rotations of a unit ball and its order is infinite ] symmetry operations in 3d - space consist of rotation around an axis , reflection for a mirror plane ( bilateral symmetry ) , reflections for a point ( central inversion ) , and rotation - reflections  .",
    "however , we consider symmetry among robots , specifically , whether the robots have identical local observation or not . because all local coordinate systems are right - handed , it is sufficient to consider transformations that preserve the center of the smallest enclosing ball of robots and keep euclidean distance and handedness , in other words , direct congruent transformations",
    ". such symmetry operations consist of rotations around some axes and we consider above five kinds of rotation groups .",
    "( see , for example , @xcite for more detail . )    in the following , we first define the rotation group @xmath15 of a set of points @xmath1 , which is the symmetry that the robots can agree by just observing @xmath1 in their local coordinate systems .",
    "then we define the rotation group @xmath74 of the arrangement of local coordinate systems of @xmath1 , which is the symmetry that the robots can never break .",
    "however , the robots do not agree on @xmath74 by just observing the set of points @xmath1 in their local coordinate systems .",
    "we define the symmetricity @xmath5 of @xmath1 that consists of all possible rotation groups of the arrangement of local coordinate systems of @xmath1 .",
    "intuitively the maximal elements in @xmath5 are the worst - case symmetry of the robots .",
    "the maximality of @xmath75 means that there is no proper supergroup of @xmath76 in @xmath5 and @xmath5 actually has multiple such maximal elements",
    ". based on these notions , we present the first impossibility result that shows that fsync robots can never reduce @xmath74 of an initial configuration @xmath1 by any arbitrary algorithm .",
    "we formally define the five kinds of rotation groups .",
    "the rotation group @xmath77 has five kinds of subgroups of finite order  @xcite ; the cyclic groups @xmath78 ( @xmath79 ) , the dihedral groups @xmath80 ( @xmath81 ) , the tetrahedral group @xmath82 , the octahedral group @xmath83 , and the icosahedral group @xmath84 .",
    "each of these groups is identified by the rotations of a regular pyramid with a regular @xmath85-gon base , a regular prism with regular @xmath86-gon bases , a regular tetrahedron , a regular octahedron , and a regular icosahedron , respectively .",
    "( see figure  [ fig : csym ] . ) for example , consider a regular pyramid that has a regular @xmath85-gon as its base .",
    "the rotation operations for this regular pyramid are rotations by @xmath87 for @xmath88 around an axis containing the apex and the center of the base .",
    "we call such an axis _",
    "@xmath85-fold axis_. let @xmath89 be the rotation by @xmath87 around this @xmath85-fold axis with @xmath90 where @xmath91 is the identity element .",
    "then , @xmath92 form the _ cyclic group _ @xmath78 .    a regular prism ( except a cube ) has two parallel regular @xmath86-gons as its top and bottom bases and has two types of rotation axes , one is the @xmath86-fold axis containing the centers of its top and bottom bases , and the others are @xmath86 @xmath14-fold axes that exchange the top and the bottom .",
    "we call this @xmath86-fold axis _ principal axis _ and the remaining @xmath86 @xmath14-fold axes _ secondary axes_. these rotation operations on a regular prism form the _ dihedral group _ @xmath80 .",
    "when @xmath93 , we can define @xmath94 in the same way but in the group theory we do not distinguish the principal axis .",
    "the remaining three rotation groups @xmath82 , @xmath83 , and @xmath84 are called the polyhedral groups .",
    "table  [ table : elements ] shows the number of rotation axes and the number of elements around each type of rotation axes for each of the polyhedral groups .",
    ".three polyhedral groups . the number of elements around @xmath85-fold axes excluding the identity element is shown .",
    "the number in the brackets is the number of rotation axes . [",
    "cols=\"^,^,^,^,^,^\",options=\"header \" , ]     we consider the positions of points of @xmath1 in the first octant , which defines the positions of points of @xmath1 in the third , sixth , and the eighth octant by the rotations of @xmath94 .",
    "the discussion also holds symmetrically in the second octant , that determines the positions of points in the fourth , fifth , and seventh octant .",
    "* @xmath41 is on the @xmath7-axis ( thus , the discussion follows for @xmath8-axis and @xmath9-axis , respectively ) .",
    "* @xmath41 is on the @xmath7-@xmath8 plane ( thus , the discussion follows for @xmath8-@xmath9 plane and @xmath9-@xmath7 plane , respectively ) .",
    "* @xmath41 is on the line @xmath96 .",
    "* other cases .",
    "* case a :  * when @xmath95 is on the @xmath7-axis . because @xmath101 , we have a corresponding point on the negative @xmath7-axis ( figure  [ fig : rot3 - 1 ] ) .",
    "this allows us to recognize the @xmath7-axis from the @xmath8-axis and @xmath9-axis , hence @xmath1 should have corresponding points on @xmath8-axis and @xmath9-axis . in this case , we can rotate the corresponding six points around the four @xmath97-fold axes .",
    "* case b :  * when @xmath95 is on the @xmath7-@xmath8 plane .",
    "first consider the case where a point @xmath95 is on the line @xmath102 . because @xmath101 , we have four corresponding points on the @xmath7-@xmath8 plane that forms a square ( figure  [ fig : rot3 - 2 ] ) .",
    "this allows us to recognize the @xmath9-axis from the other two axes , hence @xmath8-@xmath9 plane and @xmath9-@xmath7 plane also have the corresponding squares .",
    "hence , the twelve points form a cuboctahedron , and we can rotate them around the four @xmath97-fold axes .    when @xmath41 is not on the line @xmath102 , because @xmath101 , we have four corresponding points on the @xmath7-@xmath8 plane that forms a rectangle ( figure  [ fig : rot3 - 3 ] ) .",
    "this allows us to recognize the principal axis . in the same way as the above case",
    ", there are two rectangles on the @xmath8-@xmath9 plane and @xmath9-@xmath7 plane .",
    "the obtained polyhedron consists of @xmath103 vertices and we can rotate it around the four @xmath97-fold axes .      because @xmath101 , we have four corresponding points in the third , sixth , and the eighth octant , that forms a regular tetrahedron ( figure  [ fig : rot3 - 4 ] ) . in this case , we can rotate the corresponding four points around the four @xmath97-fold axes .",
    "for a point @xmath95 in the first octant , because @xmath101 , we have corresponding four points in the third , sixth , and the eighth octant , that forms a sphenoid ( figure  [ fig : rot3 - 5 ] ) .",
    "this allows us to recognize the @xmath9-axis from the others , hence @xmath8-axis and @xmath7-axis also have the corresponding sphenoids .",
    "the obtained polyhedron consists of @xmath103 vertices and we can rotate it around the four @xmath97-fold axes ."
  ],
  "abstract_text": [
    "<S> self - organization of a swarm of mobile computing entities in the three - dimensional euclidean space ( 3d - space ) such as drones and satellites attracts much attention as such systems are required to accomplish more complicated tasks . </S>",
    "<S> we consider a swarm of autonomous mobile robots each of which is an anonymous point in 3d - space and synchronously executes a common distributed algorithm . </S>",
    "<S> we investigate the _ pattern formation problem _ that requires the robots to form a given target pattern from an initial configuration and characterize the problem by showing a necessary and sufficient condition for the robots to form a given target pattern .    </S>",
    "<S> the pattern formation problem in the two dimensional euclidean space ( 2d - space ) has been investigated by suzuki and yamashita ( sicomp 1999 , tcs 2010 ) , and fujinaga et al . </S>",
    "<S> ( sicomp 2015 ) . </S>",
    "<S> the symmetricity @xmath0 of a configuration ( i.e. , the positions of robots ) @xmath1 is the order of the cyclic group that acts on @xmath1 with the exception that when a robot is on the center of the smallest enclosing circle of @xmath1 , @xmath2 . </S>",
    "<S> it has been shown that fully - synchronous ( fsync ) robots can form a target pattern @xmath3 from an initial configuration @xmath1 if and only if @xmath0 divides @xmath4 .    </S>",
    "<S> we extend the notion of symmetricity to 3d - space by using the _ rotation groups _ each of which is defined by a set of rotation axes and their arrangement . </S>",
    "<S> we define the symmetricity @xmath5 of configuration @xmath1 in 3d - space as the set of rotation groups that acts on @xmath1 and whose rotation axes do not contain any robot . </S>",
    "<S> we show the following necessary and sufficient condition for the pattern formation problem which is a natural extension of the existing results of the pattern formation problem in 2d - space : fsync robots in 3d - space can form a target pattern @xmath3 from an initial configuration @xmath1 if and only if @xmath6 . </S>",
    "<S> this result guarantees that , for example , from an initial configuration where the robots form a cube ( i.e. , the robots occupy the vertices of a cube ) , they can form a regular octagon that consists of points on a plane or a square anti - prism that has a vertical axis . </S>",
    "<S> in other words , these target patterns have lower symmetry than the initial configuration . </S>",
    "<S> for solvable instances , we present a pattern formation algorithm for oblivious fsync robots . </S>",
    "<S> the insight of this paper is that symmetry of mobile robots in 3d - space is sometimes lower than the symmetry of their positions and the robots can show their symmetry by their movement .    </S>",
    "<S> * keywords . * mobile robots in the three dimensional euclidean space , </S>",
    "<S> pattern formation , rotation group , symmetry breaking . </S>"
  ]
}