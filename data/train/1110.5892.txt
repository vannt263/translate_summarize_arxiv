{
  "article_text": [
    "we consider here spin - half nuclei , quantum bits ( qubits ) , whose computation - basis states align in a magnetic field either in the direction of the field ( @xmath0 ) , or in the opposite direction ( @xmath1 ) . several such bits ( of a single molecule ) represent a binary string , or a register . a macroscopic number of such registers / molecules can be manipulated in parallel , as done , for instance , in _ nuclear magnetic resonance ( nmr)_. from the perspective of _ nmr quantum computation ( nmrqc ) _  @xcite ( for a recent review see  @xcite ) , the spectrometer that monitors and manipulates these qubits / spins can be considered a simple `` quantum computing '' device ( see for instance refs .",
    "@xcite and  @xcite and references therein ) .",
    "the operations ( gates , measurements ) are performed in parallel on many registers .",
    "the probabilities of a spin to be up or down are @xmath2 and @xmath3 , where @xmath4 is called the _ polarization bias_. , where @xmath5 is the boltzmann constant , @xmath6 is the gyromagnetic coefficient , @xmath7 is the intensity of the magnetic field and @xmath8 is the temperature of the heat bath . for small values ,",
    "@xmath9 at equilibrium at room temperature , nuclear - spin polarization biases are very small ; in common nmr spectrometers @xmath4 is at most @xmath10 .",
    "while the polarization bias may be increased by physical cooling of the environment , this approach is very limited for liquid - state nmr , especially for in - vivo spectroscopy . to improve polarization , including selective enhancement , various `` effective cooling '' methods increase the polarization of one or more spins in a transient manner ; the cooled spins re - heat to their equilibrium polarization as a result of thermalization with the environment , a process which has a characteristic time of @xmath11 .",
    "an interesting effective cooling method is the reversible ( or unitary ) entropy manipulation of srensen and schulman - vazirani  @xcite , in which data compression tools and algorithms are used to compress entropy onto some spins in order to cool others .",
    "such methods are limited by shannon s entropy bound , stating that the total entropy of a closed system can not decrease .",
    "the reversible cooling of schulman - vazirani was suggested as a new method to present scalable nmrqc devices .",
    "the same is true for the algorithmic cooling approach  @xcite that is considered here .",
    "_ algorithmic cooling ( ac ) _ combines the reversible effective - cooling described above with thermalization of spins at different rates ( @xmath11values )  @xcite .",
    "ac employs slow - thermalizing spins ( _ computation spins _ ) and rapidly thermalizing spins ( _ reset spins _ ) .",
    "alternation of data compression steps that put high entropy ( heat ) on reset spins , with thermalization of hot reset spins ( to remove their excess entropy ) can reduce the total entropy of suitable spin systems far beyond shannon s bound .",
    "let us describe in detail the three basic operations of ac . in some algorithms ,",
    "the reset spins can be used directly in the compression step  @xcite .",
    "these algorithms have already led to some experimental suggestions and implementations  @xcite .    an efficient and experimentally feasible ac technique , termed",
    "_ `` practicable algorithmic cooling ( pac ) '' _",
    "@xcite , combines _ polarization transfer ( pt ) _ , reset , and rpc among three spins called _ 3-bit - compression ( 3b - comp)_. the subroutine _ 3b - comp _ may be implemented in several ways .",
    "one implementation is as follows  @xcite : + _ exchange the states @xmath12 .",
    "+ leave the other six states ( @xmath13 , @xmath14 , etc . ) unchanged . _",
    "+ if 3b - comp is applied to three spins \\{c , b , a } with biases @xmath15 , then spin @xmath16 will acquire the bias  @xcite : @xmath17 pac1 and pac2 consider _ purification levels _ , where spins are cooled by a factor of @xmath18 at each successive level ; at the @xmath19 purification level , @xmath20  ) with biases that are @xmath21 , therefore calculations are usually done to leading order in @xmath22 . ] .",
    "the practicable algorithm pac2  @xcite uses any odd number of spins , @xmath23 : one reset spin and @xmath24 computation spins ( see appendix  [ app : alg - pac ] for a formal description of pac2 ) .",
    "pac2 cools the spins such that the coldest spin can , ideally  , attain a bias of @xmath25 .",
    "when all spins are cooled , the following biases are reached : @xmath26 this proves an exponential advantage over the best possible reversible cooling techniques ( e.g. , of refs .",
    "@xcite and  @xcite ) , which are limited to a cooling factor of @xmath27 . as pac2 can be applied to as few as 3 spins ( @xmath28 ) to 9 spins ( @xmath29 ) , using nmrqc tools , it is potentially suitable for near future applications  @xcite .",
    "pac is simple , as all compressions are applied to three spins and use the same subroutine , _",
    "3b - comp_.    pac2 always applies compression steps ( _ 3b - comp _ ) to three identical biases . in general , for three spins with biases , @xmath30 , where all biases @xmath31 , 3-bit compression would attribute spin @xmath16 with the bias  @xcite : @xmath32 using eq .",
    "[ eq:3b - comp ] , several algorithms were designed , including pac3 , which always applies 3b - comp to bias configurations of the form @xmath33 ( see formal description in appendix  [ app : alg - pac ] ) .",
    "when all spins are cooled , the following biases are obtained : @xmath34    the framework of pac was extended to include multiple cycles at each recursive level .",
    "consider the simplest case , whereby a three - spin system @xmath35 with equal bias @xmath4 , is cooled by repeating the following procedure @xmath36 times :    1 .   _",
    "3b - comp _ on @xmath35 increasing the bias of @xmath16 .",
    "2 .   reset the biases of @xmath37 and @xmath38 back to @xmath4 .",
    "the bias of spin c increases to @xmath39 .",
    "thus the biases @xmath40 are asymptotically obtained for the three spins , as noted first by fernandez  @xcite .",
    "this variant , where @xmath41 , is the first exhaustive spin - cooling algorithm . by generalizing this `` fernandez algorithm '' to more spins",
    ", we obtained  @xcite a bias configuration that asymptotically approaches the fibonacci series ; when all spins are cooled , the following biases are reached : @xmath42 algorithms based on the 3b - comp were recently reviewed  @xcite .    following the fibonacci algorithm ,",
    "a related algorithm was described , which involves compression on four adjacent spins  @xcite ; the tribonacci algorithm reaches biases in accord with the tribonacci series ( also called 3-step fibonacci series ) @xmath43 , where each term is the sum of the three previous terms .",
    "similarly , one can obtain general @xmath44-step fibonacci series , where each term is the sum of the previous @xmath44 elements , respectively .",
    "summing over all previous terms produces the geometric sequence with powers of two : @xmath45 the ac that reaches this series was termed  @xcite , `` all - bonacci ac '' .",
    "we conclude that , with the same number of spins , exhaustive ac reaches a greater degree of cooling than pac algorithms . for example , the cooling factor achieved by fibonacci with 9 spins is @xmath46 .",
    "the corresponding enhancement for pac2 is @xmath47 , and for pac3 it is about @xmath48 .    the _ partner pairing algorithm ( ppa ) _ was shown to achieve a superior bias than all previous cooling algorithms , and was proven to be optimal  @xcite .",
    "the all - bonacci algorithm appears to produce the same cooling as the ppa : @xmath49 ( this was verified numerically for small biases  @xcite ) . in all - bonacci , with @xmath50 spins , the coldest spin approaches a bias of @xmath51 ( as long as @xmath52 ) . for the ppa",
    ", a calculation of the cooling that yields @xmath53 was not performed , yet it was proven that @xmath54 .",
    "see  @xcite for a proof and see  @xcite for calculations in the case of @xmath52 .",
    "the focus of this paper is on simple algorithms that are semi - optimal and also practicable , owing to their exclusive reliance on simple logic gates .",
    "such algorithms could be implemented in the lab if proper physical conditions ( e.g. , @xmath11  ratios ) are achieved , and thus they could have practical implications in the near future .",
    "in contrast , the optimal algorithms mentioned above , the ppa and the all - bonacci , do not belong to this category .",
    "the all - bonacci requires an unreasonable number of reset steps  , and the permutations required in the sorting step of the ppa were not yet translated into simple 2-spin and 3-spin gates  .",
    "the next section describes @xmath55pac , a new semi - optimal algorithm based on pac , and its special variant , mpac , which cool @xmath23 spins such that the coldest spin is asymptotically cooled by a factor of @xmath56 .",
    "the optimal algorithms , the ppa and all - bonacci , need about half the spins ( more precisely , @xmath57 spins ) in order to cool ( asymptotically ) the coldest spin to @xmath58 ; we thus see that mpac is semi - optimal in the sense that it needs twice as much spins to reach nearly the same optimal bias .",
    "section  [ sec : fib - variants ] discusses simple variants of the fibonacci algorithm : @xmath59-fibonacci  @xcite , and mfib , which fixes the number of cycles at each recursive level .",
    "section  [ sec : comparison ] compares the new algorithms , mpac and mfib , to previous cooling algorithms , including the ppa , fibonacci , all - bonacci , and pac algorithms .",
    "we show that practicable versions of mpac and mfib ( with small @xmath36 ) reach significant cooling levels for 5 - 11 spin systems ; moreover , in the case of a 5-spin system , semi - optimal cooling levels ( half the optimal cooling ) are attained with reasonable run - time .",
    "section  [ sec : pure - qubits ] provides some analysis of sopac in case one would like to purify qubits as much as needed in order to obtain scalable nmrqc .",
    "we examine the resources required to obtain a highly polarized spin .",
    "[ sec : mpac - variants ] the fernandez and fibonacci algorithms described above illustrate the improved level of cooling attainable ( asymptotically ) by repeated compressions that involve the target spin .",
    "practicable cooling algorithms that perform a small number of such cycles ( at each recursive level ) offer reasonable cooling at a reasonable run - time . in this section",
    "we describe mpac , a new pac - based algorithm , which approaches nearly half the optimal cooling level with only a small number of cycles .",
    "the mpac algorithm that we now present is a generalization of pac2   ( see appendix  [ app : alg - pac ] for details on pac2 ) .",
    "@xmath60 is the purification level , @xmath61 is the bit index , @xmath62 stands for 3b - comp on spins @xmath63 which increases the bias of @xmath44 , @xmath64 denotes a polarization transfer from bit @xmath37 to bit @xmath38 ( or for simplicity , just a swap between their states ) , and @xmath65 is a reset , setting the bias of the reset spin ,  @xmath66 , to  @xmath4 .",
    "the algorithm only uses elementary gates : a single gate operates either on a single spin or on a pair of spins ( e.g. , pt between adjacent spins ) , or on three spins ( 3b - comp and pt between next - to - nearest neighbors ) .",
    "@xmath67 takes @xmath61 spins at equilibrium and attributes bit @xmath44 with a bias of @xmath68 .",
    "_ mpac : _ + @xmath69^{m } pt(k-2\\rightarrow k)\\ ; m_{j-1}(k-2 ) .",
    "\\nonumber\\end{aligned}\\ ] ] with three spins @xmath70^{m}pt(1\\rightarrow 3)m_0(1).\\end{aligned}\\ ] ] with five spins @xmath71^{m}pt(3\\rightarrow 5)m_1(3).\\ ] ] the recursive formulas above are written from right to left , such that the first step of @xmath67 is reset of the reset spin , @xmath65 , followed by pt from spin 1 to spin 3 , and @xmath36 repetitions of the 4-step sequence in square brackets that ends with _ 3b - comp_.    notice that the number of spins required by mpac to achieve a purification level @xmath72 is the same as for pac2 : @xmath73 but @xmath68 now depends on the number of cycles , @xmath36 : @xmath74 .",
    "for @xmath75 we get back the algorithm pac2 , where @xmath76 , thus 1pac @xmath77 pac2 ; we often retain here the original name , pac2 .",
    "asymptotically , for @xmath78 we get @xmath79 . for three spins , @xmath80 and @xmath81",
    "this is the fernandez algorithm described above , and for sufficiently large @xmath36 , spin @xmath16 will acquire a final bias of @xmath82  @xcite .",
    "this is calculated via @xmath83 .",
    "similarly , for five spins and sufficiently large @xmath36 , the final bias of the @xmath84 spin is @xmath85 .",
    "the choice of @xmath36 has a strong influence on the run - time , but fortunately , the polarization enhancement also increases rapidly with @xmath36 . for small spin - systems ( up to about 10 spins ) , very small values of @xmath36 ( 26 )",
    "are sufficient .",
    "figure  [ fig : mpac - analysis - for - j<7 ] compares the cooling factors obtained by such mpac variants up to 13 spins .",
    "notably , 6pac cools to a similar extent as @xmath86-pac .",
    "it is also evident that 2pac cools significantly better than the single - cycle variant ( 1pac @xmath77 pac2 ) .",
    ", where @xmath87 ) for small spin - systems after mpac with various @xmath36 ( see eq .",
    "[ eq : mpac - definition ] ) . ]    the run - time of mpac ( neglecting @xmath88 and _ 3b - comp _ steps ) is @xmath89 in reset - time units   with @xmath90 . the run - time is therefore reduced by a factor of @xmath91 . ] . if @xmath75 ( mpac is pac2 ) the run - time  @xcite is @xmath92 . in general , for any integer  @xmath93 @xmath94 for instance , for 21 spins , @xmath95 , @xmath96 , we get @xmath97 ( as long as the final bias is still much smaller than 1 ) , and for the same @xmath98 , but @xmath99 , @xmath100 . for 11 spins , @xmath101 , and @xmath99 yields @xmath102    in general , for @xmath103 and sufficiently large @xmath36 , spin @xmath61 is attributed a bias of @xmath104 .",
    "we denote the asymptotic case ( @xmath78 ) by @xmath105pac .",
    "we now generalize mpac by replacing the constant @xmath36 by a vector @xmath106 .",
    "this added flexibility , in which a different value of @xmath36 is associated with each cooling level , was found to be beneficial in the analysis of the fibonacci algorithm  @xcite , as we explain in section  [ sec : fib - variants ] .",
    "we call this new algorithm @xmath55pac ; it is defined as follows : + _ @xmath106pac : _",
    "+ @xmath107^{m_j } pt(k-2\\rightarrow k)\\ ; m_{j-1}(k-2),\\nonumber\\end{aligned}\\ ] ] where ( as before ) @xmath98 is the purification level .",
    "@xmath108 denotes resetting the bias of spin @xmath44 to @xmath4 .",
    "+ with three spins @xmath109^{m_1 } pt(1\\rightarrow 3)m_0(1).\\end{aligned}\\ ] ] with five spins @xmath110^{m_2}pt(3\\rightarrow 5)m_1(3).\\end{aligned}\\ ] ] in general , @xmath67 cools spin @xmath44 to a bias of @xmath111 , as @xmath112 is equivalent to performing the fernandez algorithm on bits @xmath113 , where bits @xmath114 and @xmath115 have equal initial biases @xmath116 .",
    "therefore ( see details in appendix  [ app : vmpac ] ) @xmath117 it is important to mention that @xmath118 could be chosen according to various criteria ; for instance , it could depend on the total number of spins @xmath50 ( or on @xmath72 ) , in addition to its dependence on @xmath98 .",
    "the algorithm requires @xmath119 reset steps : @xmath120 hence , the order in which the @xmath118 appear is irrelevant .",
    "[ sec : fib - variants ] the fibonacci algorithm is exhaustive , in the sense that a very large number of 3b - comp steps are performed at each recursive level .",
    "practicable variants may be obtained by limiting the number of compressions , as we describe here .",
    "an algorithm that reaches a distance of @xmath121 from the fibonacci series was defined as follows : + _ @xmath59-fibonacci@xcite : run @xmath122 _ @xmath123^{m_{n , k}}\\ff(n , k-1),\\ ] ] where @xmath124 is a reset step on bits  1 and  2 ( described by @xmath125 in section  [ sec : mpac - variants ] ) , @xmath126 are chosen such that the bias of bit @xmath44 is at least @xmath127 , and @xmath128 is the @xmath129 fibonacci number . here",
    "we choose @xmath130 , such that @xmath131 .",
    "this condition sets @xmath132 ( see appendix  [ app : fib - run ] ) .    for three spins fibonacci",
    "is @xmath133^{m_{3,3}}\\ff(3,2)\\\\\\ \\ff(3,2 ) & = & m_0(1)\\ ; pt(1\\rightarrow 2)\\ ; m_0(1).\\end{aligned}\\ ] ] this attributes spin number three with a bias of at least @xmath134 for four spins @xmath135^{m_{4,4}}\\ff(4,3)\\\\\\ \\ff(4,3 ) & = & [ \\ff(4,2)\\ ; \\bb(3)]^{m_{4,3}}\\ff(4,2)\\\\\\ \\ff(4,2 ) & = & m_0(1)\\ ; pt(1\\rightarrow 2)\\ ; m_0(1),\\end{aligned}\\ ] ] which attributes spins three and four with biases of at least @xmath136 and @xmath137 respectively .",
    "the term @xmath59-fib hereinafter always refers to @xmath138 , such that @xmath132 . for large spin systems , say @xmath139 or so , @xmath59-fib is not practicable , as it requires many cycles in the lower recursion levels . to circumvent this problem",
    ", we fix the number of compression steps , such that @xmath140 and denote this variant of fibonacci by mfib :    _ mfib : run @xmath122 _ + @xmath141^{m}\\ff(n , k-1).\\ ] ] where @xmath124 is a reset step on bits  1 and  2 as before , and @xmath36 is any integer @xmath93 . with three spins @xmath142^{m}\\ff(3,2),\\end{aligned}\\ ] ] and spin three is attributed a bias of @xmath143 with four spins @xmath144^{m}\\ff(4,3)\\\\\\ \\ff(4,3 ) & = & \\left[\\ff(4,2)\\ ; \\bb(3)\\right]^{m}\\ff(4,2),\\end{aligned}\\ ] ] @xmath145 is the same as for three spins , @xmath146 and spin four is attributed a bias of : @xmath147 in general , for @xmath50 spins , the bias of the msb is given by the recursive formula : @xmath148 where @xmath149 specifically , we focus on cases where @xmath36 is a small constant ( @xmath150 ) . for @xmath151 , it can be shown that mfib is outperformed by pac3  @xcite .",
    "the run - time of mfib is @xmath152",
    "it is interesting to compare sopac to other algorithms .",
    "we first consider the cooling levels attained by each algorithm . @xmath105pac attributes to spin @xmath23 a bias of @xmath153 . in comparison , with @xmath50 spins , the ppa and all - bonacci reach @xmath53 , and @xmath154 ;",
    "numerical analysis suggests that the lower bound of @xmath53 is the asymptotic bias  @xcite . ] and fibonacci asymptotically approaches @xmath155 where @xmath156 is the @xmath157 element of the fibonacci series .",
    "while the ppa and the fibonacci algorithm cool the entire spin - system , mpac is defined so that it only polarizes the _ most significant bit ( msb)_. for a fair comparison of run - time we need to cool the entire string in mpac as well . to accomplish this , successive applications of mpac cool the less significant bits .",
    "namely , the process @xmath158 yields the asymptotic biases @xmath159",
    "@xmath160 @xmath161 consider the application of cooling algorithms to cool all spins ( with initial biases of 0 ) , until the biases are sufficiently close to the asymptotic biases ; the resulting biases of the first seven spins ( as long as @xmath162 of the coldest spin is still much smaller than 1 ) are given here for @xmath86pac and other exhaustive algorithms , as well as for practicable and sopac algorithms :    * @xmath86pac @xmath163 * ppa and all - bonacci @xmath164 * fibonacci @xmath165 * pac2 @xmath77 1pac @xmath166 * pac3 @xmath167 * 2pac @xmath168 * 4pac @xmath169 * 6pac @xmath170 * 3fib @xmath171 * 4fib @xmath172    the bias configurations are given in units of the initial bias , @xmath4 .",
    "@xmath59-fib is not included , as for each total number of spins it produces different bias series . for @xmath173-fib yields the biases @xmath174 .",
    "we consider a small spin - system comprising five spins .",
    "table  [ tab : bias-5-spins ] compares the biases ( for the msb ) obtained by previous algorithms ( top ) , mpac ( middle section ) , and mfib ( bottom ) , as well as the number of resets required to create the entire bias series  -bit gate is performed in a single computing step , and that the total number of such computing steps is negligible with respect to the duration of the reset steps . in reality this is not the case , and practicable algorithms such as pac and sopac are important . ] .",
    "note that the ppa cools better when more resets are allowed , approaching the limit of @xmath175 for ac with 5 spins . with only 28 resets ,",
    "the ppa attains a semi - optimal cooling level of @xmath176 ; for a similar cooling level , 4pac and 6pac require 101 and 197 resets , respectively .",
    "after 99 resets , the ppa obtains a near - optimal cooling level of @xmath177 .",
    "table  [ tab : bias-7-spins ] presents a similar comparison for 7 spins .",
    "table  [ tab : bias-9-spins ] and table  [ tab : bias-11-spins ] present similar comparisons for 9 and 11 spins , respectively ; a spin - system of comparable size was recently used for benchmarking quantum control methods  @xcite .",
    "appendix  [ app : cool - factors ] compares the number of spins and run - time required by each algorithm to achieve several small cooling factors .",
    "the run - time analysis of the pac algorithms is conveniently expressed as a function of the purification level , @xmath72 ( see appendix  [ app : alg - pac ] ) .",
    "the entire spin - system is cooled by @xmath178 successive applications of each algorithm , as shown above for mpac .",
    "in contrast , the fibonacci algorithm and the ppa were designed to generate the entire series of biases .",
    "the run - time of @xmath59-fib is given by @xmath179 ( see calculation in appendix  [ app : fib - run ] ) , and the run - time of the ppa was obtained by a computer simulation that iterates between the two steps of the algorithm .    . cooling a 5-spin system by various algorithms .",
    "the optimal cooling level is @xmath175 . [",
    "cols=\"<,^,^\",options=\"header \" , ]      +",
    ") for 4pac , 6pac and @xmath86pac as a function of the purification level @xmath180 starting from an initial bias of @xmath181 . for more details",
    "see figure  [ fig : mpac - analysis - for-0.01 ] . ]"
  ],
  "abstract_text": [
    "<S> _ algorithmic cooling ( ac ) of spins _ applies entropy manipulation algorithms in open spin - systems in order to cool spins far beyond shannon s entropy bound . </S>",
    "<S> ac of nuclear spins was demonstrated experimentally , and may contribute to nuclear magnetic resonance ( nmr ) spectroscopy . </S>",
    "<S> several cooling algorithms were suggested in recent years , including practicable algorithmic cooling ( pac ) and exhaustive ac . </S>",
    "<S> _ practicable _ algorithms have simple implementations , yet their level of cooling is far from optimal ; _ exhaustive _ algorithms , on the other hand , cool much better , and some even reach ( asymptotically ) an optimal level of cooling , but they are not practicable .    </S>",
    "<S> we introduce here _ semi - optimal _ practicable ac ( sopac ) , wherein few cycles ( typically 26 ) are performed at each recursive level . </S>",
    "<S> two classes of sopac algorithms are proposed and analyzed . </S>",
    "<S> both attain cooling levels significantly better than pac , and are much more efficient than the exhaustive algorithms . </S>",
    "<S> the new algorithms are shown to bridge the gap between pac and exhaustive ac . </S>",
    "<S> in addition , we calculated the number of spins required by sopac in order to purify qubits for quantum computation . </S>",
    "<S> as few as 12 and 7 spins are required ( in an ideal scenario ) to yield a mildly pure spin ( 60% polarized ) from initial polarizations of 1% and 10% , respectively . in the latter case , </S>",
    "<S> about five more spins are sufficient to produce a highly pure spin ( 99.99% polarized ) , which could be relevant for fault - tolerant quantum computing . </S>"
  ]
}