{
  "article_text": [
    "string problems related to dna and/or protein sequences are abundant in bioinformatics .",
    "well - known examples include the longest common subsequence problem and its variants  @xcite , the shortest common supersequence problem  @xcite , and string consensus problems such as the _ far from most string _ problem and the _ close to most string _ problem  @xcite .",
    "many of these problems are strongly _",
    "np_-hard  @xcite and also computationally very challenging .    this work deals with a string problem which is known as the _ minimum common string partition _ ( mcsp ) problem .",
    "the mcsp problem can technically be described as follows .",
    "given are two _ related _ input strings @xmath0 and @xmath1 which are both of length @xmath2 over a finite alphabet @xmath3 .",
    "the term _ related _ refers to the fact that each letter appears the same number of times in each of the two input strings .",
    "note that being related implies that @xmath0 and @xmath1 have the same length .",
    "a valid solution to the mcsp problem is obtained by partitioning @xmath0 ( resp .",
    "@xmath1 ) into a set @xmath4 ( resp .",
    "@xmath5 ) of non - overlapping substrings such that @xmath6 .",
    "the optimization goal consists in finding a valid solution such that @xmath7 is minimal .",
    "consider the following example .",
    "given are sequences @xmath8 and @xmath9 .",
    "obviously , @xmath0 and @xmath1 are related because * a * and @xmath10 appear twice in both input strings , while * c * and * t * appear once .",
    "a trivial valid solution can be obtained by partitioning both strings into substrings of length one , that is , @xmath11 .",
    "the objective value of this solution is six .",
    "however , the optimal solution , with objective value three , is @xmath12 .",
    "the mcsp problem has applications , for example , in the bioinformatics field .",
    "chen et al .",
    "@xcite point out that the mcsp problem is closely related to the problem of sorting by reversals with duplicates , a key problem in genome rearrangement .",
    "the original definition of the mcsp problem by chen et al .",
    "@xcite was inspired by computational problems arising in the context of genome rearrangement such as : may a given dna string possibly be obtained by reordering subsequences of another dna string ? in the meanwhile , the general version of the problem was shown to be _",
    "np_-hard  @xcite .",
    "other papers concerning problem hardness consider problem variants such as , for example , the @xmath13-mcsp problem in which each letter occurs at most @xmath13 times in each input string .",
    "the 2-mcsp problem was shown to be apx - hard in  @xcite .",
    "jiang et al .",
    "@xcite proved that the decision version of the mcsp@xmath14 problem  where @xmath15 indicates the size of the alphabet  is _",
    "np_-complete when @xmath16 .",
    "a lot of research has been done concerning the approximability of the problem .",
    "cormode and muthukrishnan  @xcite , for example , proposed an @xmath17-approximation for the _ edit distance with moves _ problem , which is a more general case of the mcsp problem .",
    "other approximation approaches were proposed in  @xcite .",
    "chrobak et al .",
    "@xcite studied a simple greedy approach for the mcsp problem , showing that the approximation ratio concerning the 2-mcsp problem is 3 , and for the 4-mcsp problem the approximation ratio is in @xmath18 . in the case of the general mcsp problem",
    ", the approximation ratio lies between @xmath19 and @xmath20 , assuming that the input strings use an alphabet of size @xmath21 .",
    "later kaplan and shafir  @xcite improved the lower bound to  @xmath22 .",
    "kolman proposed a modified version of the simple greedy algorithm with an approximation ratio of @xmath23 for the @xmath13-mcsp  @xcite .",
    "recently , goldstein and lewenstein  @xcite proposed a greedy algorithm for the mcsp problem that runs in @xmath24 time .",
    "he  @xcite introduced another a greedy algorithm with the aim of obtaining better average results .",
    "damaschke  @xcite was the first one to study the fixed - parameter tractability ( fpt ) of the problem .",
    "later , jiang et al .",
    "@xcite showed that both the @xmath13-mcsp and mcsp@xmath14 problems admit fpt algorithms when @xmath13 and @xmath15 are constant parameters .",
    "fu et al .",
    "@xcite proposed an @xmath25 time algorithm for the general case and an @xmath26 time algorithm applicable under certain constraints .",
    "finally , in recent years researchers have also focused on algorithms for deriving high quality solutions in practical settings .",
    "ferdous and sohel rahman  @xcite , for example , developed a @xmath27-@xmath28 ant system metaheuristic .",
    "blum et al .",
    "@xcite proposed a probabilistic tree search approach .",
    "both works applied their algorithm to a range of artificial and real dna instances from  @xcite .",
    "the first integer linear programming ( ilp ) model , as well as a heuristic approach on the basis of the proposed ilp model , was presented in  @xcite .",
    "the heuristic is a 2-phase approach which  in the first phase",
    " aims at covering most of the input strings with few but long substrings , while  in the second phase ",
    "the so - far uncovered parts of the input strings are covered in the best way possible .",
    "experimental results showed that for smaller problem instances with @xmath29 applying a solver such as cplex to the proposed ilp is currently state - of - the - art . for larger problem instances ,",
    "runtimes are typically too high and best results are usually obtained by the heuristic from  @xcite .      in this paper",
    "we introduce an alternative ilp model for solving the mcsp problem .",
    "we show that the lp - relaxations of both models are equally strong from a theoretical point of view . an extensive experimental comparison with the model from  @xcite shows , however , that cplex is able to derive feasible integer solutions much faster with the new model .",
    "moreover , the results when given the same computation time as for solving the existing ilp model are significantly better .",
    "the remainder is organized as follows . in section  [ sec : mip ] , the ilp model from  @xcite as well as the newly proposed ilp model are described .",
    "a polyhedral comparison of the two models is performed in section  [ sec : comparison ] .",
    "the experimental evaluation on problem instances from the related literature as well as on newly generated problem instances is provided in section  [ sec : experiments ] .",
    "finally , in section  [ sec : conclusions ] we draw conclusions and give an outlook on future work .",
    "in the following we first review the existing ilp model for solving the mcsp as proposed in  @xcite .",
    "subsequently , the new alternative model is presented .",
    "the existing ilp model from  @xcite is based on the notion of _ common blocks_. therefore we will henceforth refer to this model as the _ common blocks model_. a common block @xmath30 of input strings @xmath0 and @xmath1 is a triple @xmath31 where @xmath32 is a string which appears as substring in @xmath0 at position @xmath33 and in @xmath1 at position @xmath34 , with @xmath35 . let the length of a common block @xmath30 be its string s length , i.e. , @xmath36 .",
    "let us now consider the set @xmath37 of all existing common blocks of @xmath0 and @xmath1 .",
    "any valid solution @xmath38 to the mcsp problem can then be expressed as a subset of @xmath39 , i.e. , @xmath40 , such that :    1 .",
    "@xmath41 , that is , the sum of the lengths of the common blocks in @xmath38 is equal to the length of the input strings . 2 .   for any two common blocks @xmath42 it holds that their corresponding strings neither overlap in @xmath0 nor in @xmath1 .",
    "the ilp uses for each common block @xmath43 a binary variable @xmath44 indicating its selection in the solution .",
    "in other words , if @xmath45 , the corresponding common block @xmath30 is selected for the solution . on the other side , if @xmath46 , common block @xmath30 is not selected .    align ( ilp _ ) & _",
    "x_i & [ eqn : objorig ] + & _ i\\{1,  ,m k^1_i j < k^1_i+|t_i| } x_i = 1 & & j=1,  ,n [ eqn : const2 ] + & _ i\\{1,  ,m k^2_i j < k^2_i+|t_i| } x_i = 1 & & j=1,  ,n [ eqn : const3 ] + & x_i \\{0 , 1 } & & i=1,  ,m    the objective function   minimizes the number of selected common blocks .",
    "equations  ( [ eqn : const2 ] ) ensure that each position @xmath47 of string @xmath0 is covered by exactly one selected common block and selected common blocks also do not overlap .",
    "equations  ( [ eqn : const3 ] ) ensure the same with respect to @xmath1 . note that equations ( [ eqn : const2 ] ) ( and also ( [ eqn : const3 ] ) ) implicitly guarantee that the sum of the lengths of the selected blocks is @xmath2 as @xmath48 finally , note that the number of variables in model @xmath49 is of order @xmath50 .",
    "an aspect which the above model does not effectively exploit is the fact that , frequently , some string appears multiple times at different positions as substring in @xmath0 and/or @xmath1 . for example , assume that string * ac * appears five times in @xmath0 and four times in @xmath1 .",
    "model @xmath49 will then consider @xmath51 different common blocks , one for each pairing of an occurrence in @xmath0 and in @xmath1 .",
    "especially when the cardinality of the alphabet is low and @xmath2 large , it is likely that some smaller strings appear very often and induce a huge set of possible common blocks @xmath39 . to overcome this disadvantage",
    ", we propose the following alternative modeling approach .",
    "let @xmath52 denote the set of all ( unique ) strings that appear as substrings at least once in both @xmath0 and @xmath1 .",
    "for each @xmath53 , let @xmath54 and @xmath55 denote the set of all positions between @xmath56 and @xmath2 at which @xmath57 starts in input strings @xmath0 and @xmath1 , respectively .",
    "we now use binary variables @xmath58 for each @xmath53 , @xmath59 , and @xmath60 for each @xmath53 , @xmath61 . in case @xmath62 ,",
    "the occurance of string @xmath53 at position @xmath63 in input string @xmath64 is selected for the solution ( where @xmath65 ) .",
    "on the other side , if @xmath66 , the occurance of string @xmath53 at position @xmath63 in input string @xmath64 is not selected .",
    "the new alternative model , henceforth also referred to as the _ common substrings model _ , can then be expressed as follows .",
    "align ( ilp _ ) & _ t t _ k q^1_t y_t , k^1 [ eqn : obj ] + & _ t t   _ k q^1_t kj < k+|t| y_t , k^1 = 1 & & j=1,  ,n [ eqn : const4 ] + & _ t t   _ k q^2_t kj",
    "< k+|t| y_t , k^2 = 1 & & j=1,  ,n [ eqn : const5 ] + & _ k q^1_t y_t , k^1 = _ k q^2_t y_t , k^2 & & t t [ eqn : const6 ] + & y_t , k^1 \\{0 , 1 } & & t t ,  k q^1_t + & y_t , k^2 \\{0 , 1 } & & t t ,  k q^2_t    the objective function counts the number of chosen substrings ; note that @xmath67 would yield the same value .",
    "equations  ( [ eqn : const4 ] ) and ( [ eqn : const5 ] ) ensure that for each position @xmath47 of input string @xmath0 ( respectively , @xmath1 ) exactly one covering substring is chosen .",
    "these equations consider for each position @xmath68 all substrings @xmath69 for which the starting position @xmath13 is at most @xmath68 and less than @xmath70 .",
    "equations  ( [ eqn : const6 ] ) ensure that each string @xmath69 is chosen the same number of times within @xmath0 and @xmath1 .",
    "similarly as in @xmath49 , the requirement that the sum of the lengths of the selected substrings has to sum up to @xmath2 follows implicitly from and .    concerning the number of variables involved in model @xmath71 , the following can be observed .",
    "a string of length @xmath2 has exactly @xmath72 substrings of size greater than zero . in the worst case ,",
    "input strings @xmath0 and",
    "@xmath1 are equal , which means that @xmath73 variables are generated . therefore , in the general case , the new model has @xmath74 variables .",
    "we compare the two ilp models by projecting solutions of @xmath49 expressed in terms of variables @xmath44 , @xmath75 , into the space of variables @xmath76 , @xmath77 , and @xmath78 , @xmath79 , from @xmath71 .",
    "a corresponding solution is obtained  by @xmath80 let @xmath81 and @xmath82 be the linear programming relaxations of models @xmath49 and @xmath71 , respectively , obtained by relaxing the integrality conditions . in the following",
    "we show that both models describe the same polyhedron in the space of @xmath83-variables and are thus equally strong from a theoretical point .",
    "the polyhedron defined by @xmath81 is contained in @xmath82 .",
    "we show that for any feasible solution to @xmath81 , the solution in terms of the @xmath83-variables obtained by is also feasible in @xmath82 . for equations   replacing @xmath76 yields @xmath84 which corresponds to the left side of and is thus always equal to one .",
    "equations   are correspondingly fulfilled . for constraints",
    "we obtain for each @xmath69 @xmath85 and they are therefore also always fulfilled .",
    "last but not least , also @xmath86 and @xmath87 trivially hold due to and .    the polyhedron defined by @xmath82 is contained in @xmath81 .",
    "due to the correspondence  , equations   can be written in terms of the @xmath83-variables and therefore also hold for any feasible solution of @xmath82 .",
    "correspondingly , equations   are always fulfilled for any solution of @xmath82 .",
    "if one is interested in a specific solution in terms of the @xmath88-variables for a feasible solution expressed by @xmath83-variables , it can be easily derived by considering each @xmath69 and assigning values to variables @xmath44 with @xmath89 in an iterative , greedy fashion so that relations   are fulfilled for any @xmath33 and @xmath34 .",
    "a feasible assignment of such values must always exist as an individual @xmath44 variable exists for each possible pair of positions @xmath90 in @xmath0 and positions @xmath55 in @xmath1 , due to constraints  , and the variable domains .    from the above results",
    ", we can directly conclude the following .",
    "@xmath81 corresponds to @xmath82 when projected into the domain of @xmath83-variables , and therefore @xmath49 and @xmath71 yield the same lp - values and are equally strong .",
    "both @xmath49 and @xmath71 were implemented using gcc  4.7.3 and ibm ilog cplex  v12.1 .",
    "the experimental results were obtained on a cluster of pcs with 2933  mhz intel(r )  xeon(r )  5670 cpus having 12 nuclei and 32 gb  ram . moreover ,",
    "cplex was configured for single - threaded execution .",
    "two different benchmark sets were used for the experimental evaluation .",
    "the first one was introduced by ferdous and sohel rahman in  @xcite for the evaluation of their ant colony optimization approach .",
    "this set contains in total 30 artificial instances and 15 real - life instances consisting of dna sequences , that is , @xmath91 .",
    "remember , in this context , that each problem instance consists of two related input strings .",
    "moreover , the benchmark set consists of four subsets of instances .",
    "the first subset ( henceforth labelled group1 ) consists of 10 artificial instances in which the input strings have lengths up to 200 .",
    "the second subset ( group2 ) consists of 10 artificial instances with input string lengths in @xmath92 $ ] . in the third subset ( group3 )",
    "the input strings of the 10 artificial instances have lengths in @xmath93 $ ] . finally , the fourth subset ( real ) consists of 15 real - life instances of various lengths in @xmath94 $ ] .",
    "the second benchmark set that we used is new .",
    "it consists of 10 uniformly randomly generated instances for each combination of @xmath95 and alphabet size @xmath96 . in total , this set thus consists of 300 benchmark instances .",
    "the results for the four subsets of instances from the benchmark set by ferdous and sohel rahman  @xcite are shown in tables  [ tab : results : group1]-[tab : results : real ] , in terms of one table per instance subset .",
    "the structure of these tables is as follows .",
    "the first and second columns provide the instance identifiers and the input string length , respectively",
    ". then the results of @xmath49 and @xmath71 are shown by means of five columns each .",
    "the first column provides the objective values of the best solutions found within a limit of 3600  cpu seconds . in case optimality of the corresponding solution",
    "was proven by cplex , the value is marked by an asterisk .",
    "the second column provides computation times in the form x / y , where x is the time at which cplex was able to find the first valid integer solution , and y the time at which cplex found the best ( possibly optimal ) solution within the 3600s limit .",
    "the third column shows optimality gaps , which are the relative differences in percent between the values of the best feasible solutions and the lower bounds at the times of stopping the runs .",
    "the fourth column provides lp gaps , i.e. , the relative differences between the lp relaxation values and the best ( possibly optimal ) integer solution values .",
    "and @xmath71 were equal .",
    "] finally , the last column lists the numbers of variables of the ilp models .",
    "the best result for each problem instance is marked by a grey background , and the last row of each table provides averages over the whole table .",
    "the following observations can be made .",
    "first , apart from the instances of group1 which are all solved with both models to optimality , the results for subsets group2 , group3 and real are clearly in favor of model @xmath71 . only in one out of 35 cases ( leaving group1 aside ) a better result",
    "is obtained with @xmath49 , and in further four cases the results obtained with @xmath71 are matched . in all remaining cases",
    "the solutions obtained with @xmath71 are better than those obtained with @xmath49 .",
    "this observation is confirmed by a study of the optimality gaps .",
    "they are significantly smaller for @xmath71 than for @xmath49 .",
    "one of the main reasons for the superiority of model @xmath71 over @xmath49 is certainly the difference in the number of the variables .",
    "for the instance of group1 , @xmath49 needs , on average , @xmath97 times more variables than @xmath71 .",
    "this factor seems to grow with growing instance size .",
    "concerning instances of group2 , @xmath49 requires , on average , @xmath98 times more variables .",
    "the corresponding number for group3 is @xmath99 .",
    "another reason for the advantage of @xmath71 over @xmath49 is that symmetries are avoided .",
    "finally , a last observation concerns the computation times : the first feasible integer solution is found for @xmath71 , on average , in about @xmath100 of the time that is needed in the case of @xmath49 .",
    "the results for the new set of problem instances are presented in table  [ tab : results : new ] .",
    "each line provides the results of both @xmath49 and @xmath71 averaged over the 10 instances for a combination between @xmath2 and @xmath101 .",
    "the results are presented for each ilp model by means of six table columns .",
    "the first five represent the same information as was provided in the case of the first benchmark set .",
    "an additional sixth column ( with heading * # opt * ) indicates for each row how many ( out of 10 ) instances were solved to optimality . the additional last table column ( with heading * impr .  in @xmath102 * ) indicates the average improvement in solution quality of @xmath71 over @xmath49 .",
    "the results permit , basically , to draw the same conclusions as in the case of the results for the instance set treated in the previous subsection .",
    "the application of cplex to @xmath71 outperforms the application of cplex to @xmath49 both in final solution quality and in the computation time needed to find the first feasible integer solution .",
    "these differences in results become more pronounced with increasing input string length and with decreasing alphabet size . in the case of @xmath91 ,",
    "for example , the solutions provided by @xmath71 are on average @xmath103 better than those provided by @xmath49 .",
    "the superiority of @xmath71 over @xmath49 is also indicated by the number of instances that were solved to optimality : 160 out of 300 in the case of @xmath49 , and 183 out of 300 in the case of @xmath71 .    in order to facilitate the study of the computation times at which the first integer solutions were found ,",
    "these times are graphically shown for different values of @xmath101 in three different barplots in figure  [ fig : firstsoltime ] .",
    "the charts clearly show that the advantages of @xmath71 over @xmath49 are considerable .",
    "in fact , the numbers concerning @xmath71 are so small ( in comparison to the ones concerning @xmath49 ) that the bars are not visible in these plots .",
    "moreover , these advantages seem to grow with increasing alphabet size .",
    "this means that , even though the differences in solution quality are negligible when @xmath104 , the first integer solutions are found much faster in the case of @xmath71 .",
    "the average gap sizes concerning the quality of the best solutions found and the best lower bounds at the time of termination are plotted in the same way in the three charts of figure  [ fig : gapsize ] .",
    "these charts clearly show that , for all combinations of @xmath2 and @xmath101 , the average gap is smaller in the case of @xmath71 .",
    "finally , figure  [ fig : variables ] shows evolution of the number of variables needed by the two models for instances of different sizes .",
    "while ( meta-)heuristic approaches are the state - of - the - art for approximately solving large instances of the mcsp , instances with string lengths of less than about 1000 letters can be well solved with an ilp model in conjunction with a state - of - the - art solver like cplex . in this work",
    "we have proposed the model based on _ common substrings _ that reduces symmetries appearing in the formerly suggested _ common blocks _ model . while our polyhedral analysis indicated that both models are equally strong w.r.t .",
    "their linear programming relaxations , there are significant differences in the computational difficulties to solve these models .",
    "the new formulation allows for finding feasible solutions of already reasonable quality in substantially less time and also yields better final solutions in most cases where proven optimal solutions could not be identified within the time limit .",
    "an important reason for this is to be found in the number of variables needed by the two models .",
    "while the existing model from the literature requires @xmath50 variables ( where @xmath2 is the length of the input strings ) , the new model only requires @xmath74 variables .    in future work",
    "it would be interesting to consider extended variants of the mcsp , in particular such where the input strings need not to be related . in biological applications this would give a greater flexibility as sequences that were also affected by other kinds of mutations can be compared in terms of their reordering of subsequences .",
    "another interesting generalization would be to consider more than two input strings .",
    "the newly proposed ilp model appears to be a promising basis also for these variants .",
    "c.  blum acknowledges support by grant tin2012 - 37930 - 02 of the spanish government .",
    "in addition , support is acknowledged from ikerbasque ( basque foundation for science ) .",
    "our experiments have been executed in the high performance computing environment managed by rdlab ( http://rdlab.lsi.upc.edu ) and we would like to thank them for their support .      c.  blum , j.  a. lozano , and p.  pinacho davidson .",
    "iterative probabilistic tree search for the minimum common string partition problem . in m.",
    "j. blesa , c.  blum , and s.  voss , editors , _ proceedings of hm 20104 9th international workshop on hybrid metaheuristics _ , volume 8457 of _ lecture notes in computer science _ , pages 154154 .",
    "springer verlag , berlin , germany , 2014 .",
    "m.  chrobak , p.  kolman , and j.  sgall .",
    "the greedy algorithm for the minimum common string partition problem . in k.",
    "jansen , s.  khanna , j.  d.  p. rolim , and d  ron , editors , _ proceedings of approx 2004  7th international workshop on approximation algorithms for combinatorial optimization problems _ , volume 3122 of _ lecture notes in computer science _ , pages 8495 .",
    "springer berlin heidelberg , 2004 .",
    "p.  damaschke",
    ". minimum common string partition parameterized . in k.",
    "a. crandall and j.  lagergren , editors , _ proceedings of wabi 2008  8th international workshop on algorithms in bioinformatics _",
    ", volume 5251 of _ lecture notes in computer science _ , pages 8798 .",
    "springer berlin heidelberg , 2008 .",
    "s.  m. ferdous and m.  s. rahman . solving the minimum common string partition problem with the help of ants . in y.  tan , y.  shi , and h.  mo , editors , _ proceedings of icsi 2013",
    " 4th international conference on advances in swarm intelligence _ ,",
    "volume 7928 of _ lecture notes in computer science _ , pages 306313 .",
    "springer berlin heidelberg , 2013 .",
    "b.  fu , h.  jiang , b.  yang , and b.  zhu .",
    "exponential and polynomial time algorithms for the minimum common string partition problem . in w.",
    "wang , x.  zhu , and d .- z .",
    "du , editors , _ proceedings of cocoa 2011  5th international conference on combinatorial optimization and applications _ , volume 6831 of _ lecture notes in computer science _ , pages 299310 .",
    "springer berlin heidelberg , 2011 .",
    "a.  goldstein , p.  kolman , and j.  zheng .",
    "minimum common string partition problem : hardness and approximations . in r.",
    "fleischer and g.  trippen , editors , _ proceedings of isaac 2004  15th international symposium on algorithms and computation _ , volume 3341 of _ lecture notes in computer science _ , pages 484495 .",
    "springer berlin heidelberg , 2005 .",
    "i.  goldstein and m.  lewenstein .",
    "quick greedy computation for minimum common string partitions . in r.",
    "giancarlo and g.  manzini , editors , _ proceedings of cpm 2011  22nd annual symposium on combinatorial pattern matching _ , volume 6661 of _ lecture notes in computer science _ , pages 273284 .",
    "springer berlin heidelberg , 2011 .",
    "a novel greedy algorithm for the minimum common string partition problem . in i.",
    "mandoiu and a.  zelikovsky , editors , _ proceedings of isbra 2007  third international symposium on bioinformatics research and applications _ ,",
    "volume 4463 of _ lecture notes in computer science _ ,",
    "pages 441452 .",
    "springer berlin heidelberg , 2007 .",
    "p.  kolman .",
    "approximating reversal distance for strings with bounded number of duplicates . in j.",
    "jedrzejowicz and a.  szepietowski , editors , _ proceedings of mfcs 2005  30th international symposium on mathematical foundations of computer science _ ,",
    "volume 3618 of _ lecture notes in computer science _ ,",
    "pages 580590 .",
    "springer berlin heidelberg , 2005 .",
    "p.  kolman and t.  wale .",
    "reversal distance for strings with duplicates : linear time approximation using hitting set . in t.",
    "erlebach and c.  kaklamanis , editors , _ proceedings of waoa 2007  4th international workshop on approximation and online algorithms _ , volume 4368 of _ lecture notes in computer science _ , pages 279289 .",
    "springer berlin heidelberg , 2007 .",
    "d.  shapira and j.  a. storer .",
    "edit distance with move operations . in a.",
    "apostolico and m.  takeda , editors , _ proceedings of cpm 2002  13th annual symposium on combinatorial pattern matching _",
    ", volume 2373 of _ lecture notes in computer science _ , pages 8598 . springer berlin heidelberg , 2002 ."
  ],
  "abstract_text": [
    "<S> in the minimum common string partition ( mcsp ) problem two related input strings are given . </S>",
    "<S> `` related '' refers to the property that both strings consist of the same set of letters appearing the same number of times in each of the two strings . </S>",
    "<S> the mcsp seeks a minimum cardinality partitioning of one string into non - overlapping substrings that is also a valid partitioning for the second string . </S>",
    "<S> this problem has applications in bioinformatics e.g.  in analyzing related dna or protein sequences . for strings with lengths less than about 1000 letters , a previously published integer linear programming ( ilp ) formulation yields , when solved with a state - of - the - art solver such as cplex , satisfactory results . </S>",
    "<S> in this work , we propose a new , alternative ilp model that is compared to the former one . </S>",
    "<S> while a polyhedral study shows the linear programming relaxations of the two models to be equally strong , a comprehensive experimental comparison using real - world as well as artificially created benchmark instances indicates substantial computational advantages of the new formulation . </S>"
  ]
}