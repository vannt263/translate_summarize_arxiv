{
  "article_text": [
    "efficient buffer management at a network router is a critical issue that motivates the online packet scheduling problem .",
    "kesselman et al .",
    "@xcite introduce a buffer management delay model and give algorithms to minimize end - to - end delay .",
    "we adopt a similar model to analyze the empirical behavior of the modified greedy ( mg ) algorithm introduced in  @xcite , and propose new algorithms that do not have as strong worst - case guarantees , yet perform better in our simulated settings .",
    "[ [ model . ] ] model .",
    "+ + + + + +    for simplicity , we investigate a network router with two nodes . studying",
    "a two node router is a first step towards understanding more complicated and realistic models . in  [ sec :",
    "md ] we briefly discuss possible model modifications . at each integer time step , packets are buffered upon arrival at the source node , then at most one packet is chosen from the buffer to be sent to the target node .",
    "a packet ( @xmath0,@xmath2,@xmath1 ) arrives at a release date @xmath0 , has a non - negative weight @xmath1 , and needs to be sent by an integer deadline @xmath2 .",
    "a packet not sent by @xmath2 expires , and is dropped from the buffer .",
    "the objective of a packet - scheduling algorithm @xmath3 is to maximize its weighted throughput , @xmath4 , defined as the total weight of packets sent by @xmath3 .",
    "it is easy to relate our model to an online version of the classical offline unit - job scheduling problem where the input is a set of @xmath5 unit - length jobs , each specified by a similar triple ( @xmath0,@xmath2,@xmath1 ) and the objective is to maximize weighted througput , that is the total weight of jobs that are processed before their deadlines .",
    "[ [ parameters . ] ] parameters .",
    "+ + + + + + + + + + +    we will typically be generating our input according to some type of distribution .",
    "let @xmath6 denote the number of time steps during which the system can generate arriving packets , and let @xmath7 denote an arrival rate .",
    "we choose values for @xmath6 and @xmath7 .",
    "then at each integer time step @xmath8 , we first generate the number of arriving packets according to a poisson distribution with rate @xmath7 . for each arriving packet",
    ", we set @xmath9 and generate @xmath1 from a uniform ( integer ) distribution @xmath10 .",
    "to find @xmath2 , we first generate @xmath11 , a time to expire , from a uniform ( integer ) distribution @xmath12 , and set @xmath13 .",
    "we call this model 1 .",
    "we also consider a bimodal distribution for @xmath11 with weights @xmath14 and @xmath15 , respectively , for two distinct distributions centered on different means and call this model 2 .",
    "although a network may induce correlations between packets , we use i.i.d .",
    "distributions as a first step in modeling the behavior of our algorithms .    in order to evaluate the performance of an online scheduling algorithm ( a )",
    ", we use an offline algorithm ( off ) for comparison , which given all future arrivals and packet characteristics , is able to statically find the optimal solution ( e.g. using maximum - weight bipartite matching ) .",
    "its solution gives the highest possible throughput the system can achieve .",
    "the online algorithm is k - competitive if @xmath16 on any instance is at least 1/k of @xmath17 on this instance .",
    "the smallest k for which an algorithm is k - competitive is called the competitive ratio  @xcite . according to  @xcite , @xmath18 will be at most 2 for any algorithm that uses a static priority policy . in this paper",
    ", we will simulate the online algorithm and evaluate the ratio @xmath16/@xmath17 .",
    "the average of these ratios across each batch of simulations will be denoted by @xmath19 , where @xmath3 is the corresponding online algorithm .",
    "[ [ related - work . ] ] related work .",
    "+ + + + + + + + + + + + +    the literature is rich with works that acknowledge the importance of buffer management and present algorithms aiming at better router performance .",
    "motivated by  @xcite ,  @xcite gives a randomized algorithm , rmix , while  @xcite proves that it remains @xmath20-competitive against an adaptive - online adversary .",
    "many researchers attempt to design algorithms with improved competitive ratios .",
    "the best lower bound on the competitive ratio of deterministic algorithms is the golden ratio @xmath21  @xcite . a simple greedy algorithm that schedules a maximum - weight pending packet for an arbitrary deadline instance is 2-competitive  @xcite .",
    "chrobak et al .",
    "@xcite introduce the first deterministic algorithm to have a competitive ratio strictly less than 2 , namely 1.939 .",
    "li et al .",
    "@xcite use the idea of dummy packets in order to design the dp algorithm with competitive ratio at most 1.854 . independently",
    ",  @xcite gives a 1.828-competitive algorithm .",
    "further research considers natural restrictions on packet deadlines with hopes of improving the competitive ratio .",
    "one type of restriction is the agreeable deadline model considered in  @xcite , i.e. deadlines are ( weakly ) increasing in their release times .",
    "motivated by a more general greedy algorithm , @xmath22  @xcite , that schedules the earliest - deadline pending packet with weight at least @xmath23 of the maximum - weight pending packet ,  @xcite develop the mg algorithm which will be described in  [ sec : mg ] .",
    "in other models , researchers enforce the fifo discipline using a model where packets have no deadlines and the buffer is finite .",
    "one of the earliest such algorithms is the fifo preemptive model studied by  @xcite .",
    "works such as  @xcite adopt similar ideas .",
    "we do not consider the fifo discipline in this paper .",
    "[ [ our - contribution . ] ] our contribution .",
    "+ + + + + + + + + + + + + + + + +    we observe that while mg is @xmath21-competitive for the case of agreeable deadlines , it may not be the best option to apply in practice .",
    "we demonstrate the undesirable performance of mg under certain scenarios , e.g. frequently preferring maximum weight ( late deadline ) packets over early deadline ones .",
    "our proposed mlp algorithm remedies this drawback , as it outperforms mg on most simulated instances .",
    "however , we are able to develop hard instances to prove that mlp does not provide better worst - case guarantees , whereas on those instances mg would produce the same results as an offline solution .",
    "contrasting the advantages of mg and mlp motivates us to explore further algorithmic adjustments which may improve performance , at least in practice , as supported by our preliminary analysis .",
    "finally , we justify that a two - node model with an infinite buffer is a sufficient model for our analysis . moreover , extending the model to multiple nodes or imposing a threshold on the capacity of the buffer does not significantly alter the performance of the online algorithms .",
    "mg is a @xmath21-competitive deterministic online algorithm for the agreeable deadline model  @xcite .",
    "it focuses on two packets at each time step : the earliest deadline non - dominated packet @xmath24 ( i.e. maximum weight among all earliest - deadline packets ) and the maximum weight non - dominated packet @xmath25 ( i.e. earliest deadline among all maximum - weight packets in the buffer ) .",
    "packet @xmath24 is chosen if @xmath26 ( @xmath27 ) and @xmath25 is chosen otherwise .",
    "while  @xcite consider an agreeable deadline model , we relax this assumption and explore mg in a more general setting .",
    "[ [ mg - analysis . ] ]   mg analysis .",
    "+ + + + + + + + + + + + +    although mg has the best competitive ratio among deterministic online algorithms , we believe that by better understanding mg , we can improve on it in practice .",
    "intuitively , if mg , at early stages , chooses packets with longer deadlines ( due to higher weights ) over those with early deadlines , then as time passes , many early packets expire while most of the heavy later - deadline packets will have already been sent .",
    "therefore , the algorithm may resort to choosing packets with even smaller weights , thereby wasting an opportunity to send a higher weight packet that has already expired .",
    "we , hence , explore the decisions made by mg by observing its relative frequency of choosing @xmath25 over @xmath24 .    in order to consider a diverse set of instances , we set @xmath6 to 200 and define ranges [ 0.7,20 ] , [ 1,20 ] and [ 1,40 ] for @xmath7 , @xmath28 and @xmath29 , respectively . under the assumptions of model 1",
    ", we run a batch of 200 simulations each for 8000 sampled parameter combinations . given each parameter combination , we calculate the relative frequency of choosing @xmath25 over @xmath24 and average the frequencies over @xmath7 to obtain the empirical probability of @xmath30 , denoted by @xmath31 .",
    "r0.45     we suspect that when @xmath31 is high , especially if @xmath25 expires at later deadlines , mg will be at a major disadvantage .",
    "figure  [ fig : mgdisadv ] plots @xmath31 vs. @xmath28 , where each curve corresponds to a fixed level for @xmath29 . in general , @xmath31 increases with @xmath28 and @xmath29 .",
    "the decreasing curve slope implies that @xmath31 is more sensitive to lower values of @xmath28 .",
    "further analysis shows that at any level of @xmath28 , mg will choose h over e at most 66% of the time .",
    "we also observe that regardless the average number of packets in the buffer , if @xmath28 is small ( less than 3 ) , the event of interest occurs at most 40% of the time .",
    ".48     .48     from this probability analysis , we conclude that unless @xmath28 or @xmath7 are small , mg tends to choose packet @xmath25 too frequently . to show that this property may `` fire back '' , we construct scenario 1 , forcing mg to favor later deadlines .",
    "we reuse the data of the generated packets above and adjust the weight of each packet by multiplying it by its deadline .",
    "we let mg run on the new data and plot @xmath32 against different parameters .",
    "figure  [ fig : mgtrap ] depicts lower ratios for the new dataset . while @xmath32 originally increased with @xmath7",
    ", it now decreases with @xmath7 and @xmath29 .",
    "@xmath28 does not affect the performance much .",
    "a gradient boosted tree predictive model ( i.e. a sequence of decision tree models where the next model is built upon the residuals of the previous one ) shows that @xmath29 is the most important factor under scenario 1 , as it accounts for 30% of the variability in the model .",
    "[ [ description . ] ] description .",
    "+ + + + + + + + + + + +    in light of the previous analysis , we develop a new online algorithm that is more likely to send early deadline packets . the mini lp algorithm ( mlp ) runs a `` mini '' assignment lp at each time step in order to find the optimal schedule for the current content of the buffer , assuming no more arrivals . assuming @xmath33 is the number of packets in the buffer at current time @xmath34 , we search for the packet with the latest deadline ( @xmath35 ) and set a timeline from @xmath36= 0 to @xmath37 .",
    "we then solve the following optimization problem , where @xmath38 is the weight of packet @xmath39 and @xmath40 is 1 if packet @xmath39 is sent at time @xmath36 and 0 otherwise : @xmath41 mlp then uses the optimal solution to send the packet that receives the first assignment , i.e. the packet @xmath39 for which @xmath42=1 , while the rest of the schedule is ignored and recomputed in subsequent time steps .",
    "similar to the mg analysis , we compute @xmath43 and are interested in its behavior as the load varies .",
    "a way to measure load is to define the average number of packets in the buffer as @xmath44 , which is a byproduct of @xmath7 .",
    "we expect higher @xmath43 at low @xmath44 , since the online algorithm would not have many packets to choose from and hence , is more likely to choose the same packet as the offline algorithm at each time step .",
    "however , we expect @xmath43 to decrease as @xmath44 increases , since the discrepancy between online and offline solutions increases . to test this , we sample parameter combinations from @xmath45 $ ] , @xmath46 $ ] and @xmath28 , @xmath47 $ ] and run a batch of 1000 simulations per combination .",
    "r0.48     figure  [ fig : mlp1 ] plots @xmath43 vs. @xmath44 and interestingly shows a dip - shaped graph : @xmath43 starts at a very high value ( @xmath48 ) , decreases as expected with increasing @xmath44 until eventually it increases again , thereby forming a dip , and finally converges to 1 .",
    "our claim is true at first , when @xmath7 is relatively low , as the first range for @xmath7 is quite sensitive ( @xmath49 vs. 2.8 makes a difference ) .",
    "however , when @xmath7 increases , the problem loses its sensitivity .",
    "an explanation for such behavior may be that as @xmath44 increases ( with increasing @xmath7 ) , we are more likely to have multiple packets achieving maximum weight , in which case both the online and offline algorithms are likely to choose those packets and have less discrepancy between their choices , especially if the weight or deadline ranges are not wide enough .",
    "we conclude that when the system is heavily or lightly loaded , both algorithms perform well .",
    "the dip happens in the interesting area .",
    "consequently , we will investigate how the dip moves and what the effect of parameter choices will have on such graph .",
    "changing the parameters to generate different graphs did not change the structure of the dip - shaped graph that we have seen in figure  [ fig : mlp1 ] .",
    "nonetheless , the dip gets narrower / wider and shifts to the left / right , as parameters change . in this section",
    ", we will only focus on a restricted range for the values of @xmath7 , namely 0.7 to 10 . however , we believe that the restriction does not mask any interesting results , since mlp converges at higher values of @xmath7 , as we have seen before . therefore , a heavily loaded system is not significant for our analysis .",
    "[ [ arrival - rates . ] ] arrival rates .",
    "+ + + + + + + + + + + + + +    the graph inevitably depends on @xmath7 , as it directly affects @xmath44 , i.e. the x - axis .",
    "however , @xmath7 does not have a direct effect on the shape of the graph . by tuning the range for @xmath7 , we are able to `` zoom in '' onto the dip area and monitor the behavior more accurately where the system is neither lightly nor heavily loaded .",
    "the range for such sensitive values is on average between 1.3 and 4.2 .",
    "figure  [ fig : mlp2 ] ( in the appendix ) zooms in on the dip where @xmath7 is most sensitive .",
    "[ [ weight - ranges . ] ] weight ranges .",
    "+ + + + + + + + + + + + + +    the range of the weights moves the dip to the right ( left ) , as it gets narrower ( wider ) .",
    "very narrow ranges ( i.e. low values for @xmath28 ) are the most influential .",
    "as @xmath28 increases , its impact decreases .",
    "in fact , this result seems intuitive and one can see an example in figure  [ fig : mlp3 ] where the weight range is designed to be very narrow ( @xmath28 is set at 2 ) .",
    "some experimentation led us to the explanation of this phenomenon : when there are few options for weights , both algorithms converge together .",
    "let s say weights are only 1 and 2 , then the higher the @xmath44 , the more likely we will have packets of weight 2 .",
    "in this case both algorithms find the optimal choice to be the packet with higher weight ( we do nt have much choice here so it must be 2 ) .",
    "hence , both behave alike .",
    "we note that it is not in particular the range of weights that has this effect but rather the number of distinct weights available , i.e. choosing between weights 1 and 2 vs. 100 and 200 , would depict the same behavior .    [ [ time - period - and - deadline - range . ] ] time period and deadline range .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    @xmath6 and @xmath29 have a combined effect .",
    "figures  [ fig : mlp4 ] and  [ fig : mlp5 ] give two examples : allowing a longer timeline @xmath6 results in a second but higher dip and slows down convergence , such that suddenly higher values of @xmath7 become slightly more interesting .",
    "meanwhile lower @xmath29 values ( combined with shorter @xmath6 s ) result in a graph with one sharp dip as well as much faster convergence to 1 .",
    "the motivation of mlp was mainly to remedy the drawback we observed for mg when later deadline packets are preferred .",
    "therefore , it is essential to verify that mlp outperforms mg under scenario 1 .",
    "in fact , one - sided 99% confidence intervals ( ci ) imply that @xmath32 is at most 91.98% while @xmath43 is at most 96.28% .",
    "the difference in performance between both algorithms increases with @xmath7 .",
    "figure  [ fig : scenario3 ] shows the behavior of @xmath50 against @xmath44 for both algorithms . while mlp is not influenced by @xmath44 under this scenario , the performance of mg gets worse as @xmath44 increases .",
    "a 99% two - sided ci for @xmath51 , denoted by @xmath52 , is ( 1.0443,1.0552 ) , implying that mlp produces a total weight at least 4.43% more than that of mg under this scenario .",
    "better performance is observed with higher @xmath6 or lower @xmath29 , but @xmath28 does not seem to influence the algorithms performances .",
    ".47 ( red ) and @xmath32(green),title=\"fig : \" ]    .47 ( red ) and @xmath32(green),title=\"fig : \" ]",
    "in this section , we contrast the behavior of mg and mlp under a spectrum of parameter settings .",
    "we are interested in the behavior of the ratios against our parameters and expect mlp to perform better in our simulations .",
    "the general procedure for our simulations is based on sampling parameter combinations from a predefined parameter space .",
    "we impose the following parameter range restrictions : @xmath53 , @xmath54 , @xmath55 and @xmath56 ( scenario 2 ) . for each combination ,",
    "we run mg , mlp ( 5 times each ) and the offline algorithm in order to obtain values for @xmath32 , @xmath43 , as well as @xmath57 . detailed steps for simulations are given in  [ app : ca ] .",
    "comparing @xmath43 and @xmath32 against values of @xmath7 implies that on average mlp outperforms mg ( figure  [ fig : compl ] ) . as @xmath7 increases",
    ", both algorithms perform better .",
    "a 99% one - sided ci for @xmath32 is ( 0,0.9734 ) , implying that we are 99% confident that @xmath58 is at most 97.34% of @xmath17 , while the one - sided ci for @xmath43 is ( 0,0.9926 ) . in figure",
    "[ fig : comp ] , it is evident that mg produces a wider spread of the ratios .",
    "all else constant , the performance of each algorithm improves with higher @xmath6 , lower @xmath29 or higher @xmath44 , whereas it is not influenced by the values of @xmath28 .",
    ".48   vs. @xmath7 and colored by t , title=\"fig : \" ]    .48   vs. @xmath7 and colored by t , title=\"fig : \" ]    figure  [ fig : mlptomg ] plots @xmath52 vs. @xmath7 , colored by @xmath6 .",
    "for very small @xmath7 s , there is the possibility that mlp and mg perform similarly ; in some cases , mg outperforms mlp , regardless of the value of @xmath6 .",
    "however , for large @xmath7 , mlp tends to outperform mg .",
    "a 99% two - sided ci for @xmath52 is @xmath59 , implying that we are 99% confident that @xmath60 is at least 1.88% more than @xmath58 .",
    "however , both algorithms have similar performance as the upper bound of the ci shows that @xmath60 is at most 2.16% more . whether this is beneficial depends on the use case as well as time constraints ( see  [ sec : hi ] ) .",
    "[ app : predm ] presents a brief analysis where we construct gradient booted tree predictive models on the ratios for inference purposes .",
    "so far , we have only considered uniform distributions , however , real inputs are more complicated .",
    "here we make one step towards modeling more realistic inputs and consider a @xmath11 that follows a bimodal distribution of two distinct peaks ( recall model 2 ) ; with probability @xmath14 , @xmath11 is @xmath61 and with probability @xmath15 , @xmath11 is @xmath62 .",
    "we restrict our parameters to the following ranges : @xmath63 ,    ( red ) and @xmath32(green ) vs. @xmath7 under scenario 3 ]    @xmath64 , @xmath65 and @xmath66 ( scenario 3 ) .",
    "we choose a bimodal distribution because these distributions are often hard for scheduling algorithms .",
    "indeed , we see that the results for scenario 3 are slightly different .",
    "while mg performs worse with increasing @xmath7 , @xmath43 improves with @xmath7 and still outperforms @xmath32 ( figure  [ fig : changetau]).the graph for @xmath43 resembles a dip - shaped graph , yet we find this dip to be entirely above the confidence interval of @xmath32 .",
    "all else constant , neither algorithm is influenced greatly by any of the parameters @xmath6 , @xmath29 or @xmath14 .",
    "figure  [ fig : mlptomgtau ] plots @xmath52 vs. @xmath7 , where lighter points correspond to longer @xmath6 s . for very small @xmath7 , mlp and mg perform similarly . in some cases",
    ", mg outperforms mlp , regardless of the value of @xmath6 .",
    "however , for large @xmath7 , a 95% ci shows that mlp outperforms mg by at least 2.80% and at most 3.30% .",
    "r0.47     the previous analysis presents evidence that mlp gives better competitive ratios than mg .",
    "an index plot ( figure  [ fig : index ] ) of @xmath32 and @xmath43 shows that , for the same instances , mlp not only outperforms mg , but also gives a ratio of 1 for most of the instances that are hard for mg .",
    "however , it would be incorrect to conclude that mlp always has a better competitive ratio than mg .",
    "in fact , we are able to create hard instances for mlp where it performs worse than mg . a small example is given in table  [ hi - example ] .",
    ".hard instance for mlp [ cols= \" > , > , > , > \" , ]     figure  [ fig : comp2tl ] plots both model parameters for each of the algorithms , and colors them by @xmath50 .",
    "this allows us to view the behavior of the ratio in a multivariate manner : we see here that there is a point where the ratios tend to level off , approximately ( as can be seen by the constancy of the colors ) around @xmath67 and @xmath68 .",
    "we looked to see if this was perhaps a result of the average number of packets in the buffer but saw slight correlation , as is evident in figure  [ fig : comp3tl ] .",
    ".45     .45     .45   vs. @xmath6 and @xmath7,title=\"fig : \" ]    .45   vs. @xmath6 and @xmath7,title=\"fig : \" ]    .45   vs. @xmath6 and @xmath7,title=\"fig : \" ]    .45   vs. @xmath6 and @xmath7,title=\"fig : \" ]    next , we perform predictions from the model for a much larger range of @xmath6 and @xmath7 ( risking extrapolation issues ) . in figure",
    "[ fig : predratio3dmlp ] , @xmath43 is well behaved for large values of @xmath6 and @xmath7 : there seems to be a dip but that may be due to randomness .",
    "furthermore , the ratios do not dip as sharply as for mg in figure  [ fig : predratio3dmg ] .",
    "this leads us to investigate more the behavior of @xmath32 for larger values of @xmath7 , which leads us to scenario 4 where values for @xmath7 are extended to @xmath69 and the same analysis is run for mg .",
    "the results for the behavior of @xmath32 vs. @xmath7 shows an increasing performance under scenario 4 .",
    "we are 99% confident that @xmath58 is at most 98.69% of @xmath17",
    ". plots against other parameters show that the performance of mg , all else constant , would get better with larger @xmath6 or lower @xmath29 and only slightly better for larger @xmath28 .",
    "a gradient boosted tree predictive model again shows that @xmath7 and @xmath6 are the two most important variables .",
    "as @xmath7 and @xmath6 get larger , @xmath32 gets better ."
  ],
  "abstract_text": [
    "<S> this work studies online scheduling algorithms for buffer management , develops new algorithms , and analyzes their performances . </S>",
    "<S> packets arrive at a release time @xmath0 , with a non - negative weight @xmath1 and an integer deadline @xmath2 . at each time step , at most one packet is scheduled . </S>",
    "<S> the modified greedy ( mg ) algorithm is 1.618-competitive for the objective of maximizing the sum of weights of packets sent , assuming agreeable deadlines . </S>",
    "<S> we analyze the empirical behavior of mg in a situation with arbitrary deadlines and demonstrate that it is at a disadvantage when frequently preferring maximum weight packets over early deadline ones . </S>",
    "<S> we develop the mlp algorithm , which remedies this problem whilst mimicking the behavior of the offline algorithm . </S>",
    "<S> our comparative analysis shows that , although the competitive ratio of mlp is not as good as that of mg , it performs better in practice . </S>",
    "<S> we validate this by simulating the behavior of both algorithms under a spectrum of simulated parameter settings . </S>",
    "<S> finally , we propose the design of three additional algorithms , which may help in improving performance in practice . </S>"
  ]
}