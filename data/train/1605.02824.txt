{
  "article_text": [
    "the web ontology language @xcite ( owl ) is a semantic web language designed to represent rich and complex knowledge about things , groups of things , and relations between things .",
    "there are mainly two modeling paradigms for the semantic web .",
    "the first paradigm is based on the notion of the classical logics , such as the description logics algorithms @xcite on which the owl is based .",
    "the other paradigm is based on the datalog paradigm .",
    "a subset of the owl semantics is transformed into rules that are used by a rule engine in order to infer implicit knowledge .",
    "this paper focuses on the second paradigm , that is , a rule - based owl reasoning using owl - horst @xcite rules .",
    "owing to the explosion of the semantic data , the number of rdf triples in large public knowledge bases , e.g. , dbpedia has increased to billions @xcite .",
    "therefore , to improve the performance of owl reasoning becomes a core problem .",
    "the traditional single - node approaches are no longer viable for such large scale data .",
    "some existing ontology reasoning systems are based on mapreduce framework @xcite .",
    "the owl reasoning in @xcite and @xcite perform reasoning over mapreduce with rule execution mechanism . however , the mapreduce - based approaches are not very efficient due to the data communication between memory and disk . to further improve the performance of reasoning ,",
    "some researchers have implemented the owl reasoning on spark , which is an in - memory and distributed cluster computing framework @xcite .",
    "recently , cichlid@xcite has greatly improved the performance of owl reasoning on spark as compared to the state - of - the - art distributed reasoning systems , but it only considers parts of owl rules and doest analyze the interdependence of rules .",
    "reasoning based on owl - horst rules can infer many more implicit information . and different rule execution strategy will influence the reasoning performance .",
    "for instance , let s be the set of triples of an ontology , where @xmath0=\\{@xmath1 _ subclassof _ @xmath2 , @xmath3 _ subclassof _ @xmath4}. r1 and o11 are the two rules of owl - horst , where @xmath5=\\{@xmath6 _ rdfs : subclassof _ @xmath7 , @xmath8 _ rdfs : subclassof _",
    "@xmath9  @xmath10 @xmath6 _ rdfs : subclassof _ @xmath9 } and @xmath11=\\{@xmath12 _ owl : equivalentclass _ @xmath13 @xmath10 @xmath12 _ rdfs : subclassof _ @xmath13 } . by implementing the r1 entailment rule for subclass closure",
    ", we will get that @xmath0=\\{@xmath1 _ subclassof _ @xmath2 , @xmath3 _ subclassof _ @xmath4 , @xmath1 _ subclassof _ @xmath4}.",
    "if the o12 entailment rule for equivalent class is executed before the r1 , s will contain more new triples and reduce the iterative operation .",
    "therefore , it is desired to optimize reasoning by adjust the rule order .",
    "although kim & park @xcite has also implemented parallel reasoning algorithms with an executable rule order , but lacked the evidence to prove that the strategy is optimal .    to find the optimal executable strategy , we use the depth - first algorithm to get all possible executable strategies , which are based on the dependency of rules .",
    "there are 259367372 possible strategies among the 27 rules in table [ tab : rules ] . due to",
    "the very large number of strategies , it is challenge to find the optimal strategy by test every strategy .    in this paper",
    ", we present an approach to enhancing the performance of the rule - based owl reasoning based on a locally optimal executable strategy and implement the new rule execution strategy on spark in a prototype called rors .",
    "the major contributions and novelties of our work are summarized as follows :    we analyze the characteristic of dataset and divide the dataset into three classes : spo triples , sameas triples and type triples with analysing the proportion of the three classes respectively in the dataset . according to the data partition",
    ", we divide the owl - horst rules into four classes .",
    "we respectively analyze the rule interdependence of each class , and find the optimal executable strategies .",
    "based on the locally optimal strategies , we pick out an optimal rule execution order of each class and then combine them into a new rule execution strategy of all rules and implement the new rule execution strategy on spark .",
    "the rest of this paper is organized as follows .",
    "section [ sec : pre ] gives an brief introduce to preliminary knowledge about owl and spark .",
    "section [ sec : rda ] presents our locally optimal strategies .",
    "section [ sec : rea ] implements our proposed strategy on spark and section [ sec : eva ] evaluates the experiment on the lubm dataset . in section",
    "[ sec : dis ] , we discuss related works and summarize this paper .",
    "in this section , we briefly recall the ontology language owl and the framework spark , largely following the excellent expositions @xcite .    [ [ owl ] ] * owl * + + + + +    an ontology is a formal naming and definition of the types , properties , and interrelationships of the entities that really or fundamentally exist for a particular domain of discourse .",
    "ontology is part of the w3c standards stacks for the semantic web .",
    "the language owl @xcite is a family of knowledge representation languages for authoring ontologies .",
    "there are three variants of owl , with different levels of expressiveness .",
    "these are owl lite , owl dl and owl full ( ordered by increasing expressiveness ) .",
    "each of these sublanguages is a syntactic extension of its simpler predecessor .",
    "owl dl is designed to preserve some compatibility with rdf schema ( or rdfs ) .",
    "however , owl full is undecidable , so no reasoning software is able to perform complete reasoning for it .",
    "owl dl designed to provide the maximum expressiveness possible while retaining computational completeness , decidability , and the availability of practical reasoning algorithms .",
    "owl lite was originally intended to support those users primarily needing a classification hierarchy and simple constraints .",
    "the three languages are one subset of the other .",
    "[ [ spark - distributed - computing - framework ] ] * spark : distributed computing framework * + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    spark @xcite is an open source cluster computing framework , which is developed at the university of california , berkeley s amplab .",
    "one of the main features is the in - memory parallel computing model which all data will be loaded into the memory .",
    "spark provides programmers with an application programming interface centered on a data structure called the resilient distributed dataset @xcite ( rdd ) , a read - only multiset of data items distributed over a cluster of machines , that is maintained in a fault - tolerant way .",
    "each rdd will be divided into multiple partitions that exist on different computing nodes . and",
    "it provides a variety of operations to transform one rdd into another rdd .",
    "there are two kinds of operations .",
    "transformations are lazy operations that define a new rdd ( e.g. , _ map _ , _ filter _ , and _ join _ ) , while actions launch a computation to return a value to the program or write data to external storage , such as _ collect _ , _ count _ , _ saveastextfile _ , etc .",
    "rdd achieves fault tolerance through a notion of lineage based on logging the transformations , if a partition of an rdd is lost , the rdd has enough information about how it was derived from other rdds to recompute just that partition .",
    "more details about spark please see the official web site http://spark.apache.org/.",
    "in this section , we propose a locally optimal strategy based on the dependency among the rules .",
    ".owl - horst rules [ cols=\"^,^,^\",options=\"header \" , ]      we evaluate the performance of our method with kp and cichlid , where kp adopts the executable strategy in @xcite .",
    "all experiments run three times and the average value is listed as follow .    plot coordinates ( 10 , 460)(50 , 1413)(100 , 2460)(150 , 4224)(200 , 7080 ) ; plot coordinates(10 , 480)(50 , 1910)(100 , 3250)(150 , 5460)(200 , 8850 ) ;    coordinates ( 10 , 38425.335 ) ( 50 , 67471.298 ) ( 100 , 83201.436 ) ( 150 , 86510.952 ) ( 200 , 72749.017 ) ; coordinates ( 10 , 41840.289 ) ( 50 , 60950.250 ) ( 100 , 69645.680 ) ( 150 , 75657.241 ) ( 200 , 59880.319 ) ;    figure [ fig : time ] displays the reasoning time of our approach and kp with different scale of data sets .",
    "the reasoning time includes the time of dividing input data and eliminating duplicated triples .",
    "we can see that the reasoning time of rors and kp increase almost linearly with the growth of data size .",
    "the result shows that our approach is better than the kp under the same environment .",
    "the performance of reasoning is improved by 30% approximately .",
    "figure [ fig : expres ] shows the number of inferred triples per second .",
    "our method can infer more implicit triples than cichlid and the performance is improved by 26% approximately .",
    "in this paper , we present an approach to enhancing the performance of the rule - based owl reasoning on spark based on a locally optimal executable strategy . our method performs better than kp in reasoning strategy . although the approach doest find the optimal executable strategy for global rules , our method can be used as the valuable foundation for future research in the rule - based owl reasoning",
    "therefore , in the future work , we plan to design some algorithms to find the optimal strategy for global rules .",
    "there are many works to develop owl reasoning systems , including early works , such as pellet @xcite , jena @xcite , and sesame @xcite , etc .",
    "these reasoners use a composition tree model for ontology to infer implicit information and exhibit both large time and space complexity . due to the limitation of computing resource and running speed",
    ", these systems can hardly achieve excellent performance .",
    "therefore , many distributed reasoning system emerged . in @xcite and @xcite , they proposed a parallel reasoning method that the reasoning rules are executed repeatedly until no extra data is generated .",
    "but there exists much more data communication cost . in @xcite , weaver and handler proposed a data partitioning model based on mpi , but this method do not filter duplicate data .",
    "@xcite presented a distributed reasoning system which based on mapreduce .",
    "it analyzed the dependency between rules and builded a dependence graph .",
    "but it generated large amount of useless middle data and huge data communication cost .",
    "then urbani proposed a mapreduce - based parallel reasoning system with owl - horst rules called webpie @xcite .",
    "it can deal with large scale ontology on a distributed computing cluster .",
    "however , webpie exhibits poor reasoning time .",
    "@xcite are rule - based owl reasoner .",
    "although they can infer large scale triples , it costs too much reasoning time .",
    "@xcite proposed a rule - based reasoner that used massively parallel hardware to derive new facts based on a given set of rules , but that implementation was limited by the size of processable input data as well as on the number of used parallel hardware devices .",
    "seitz @xcite presented an owl reasoner for embedded devices based on clips .",
    "urbani @xcite proposed a hybrid rule - based reasoning method that combined forward and backward chaining , and implemented a prototype named querypie .",
    "terminological triples are pre - computed before query , which is used to speed up backward - chaining at query time . in @xcite , although the author has improved the reasoning time using spark , it ignores the analysis of interdependence among the rules and does not give the optimal executable strategy .",
    "besides , mppie @xcite recently implemented the rdfs reasoning on giraph .",
    "this work is supported by the program of the national natural science foundation of china ( nsfc ) under 61502336 , 61373035 and the national high - tech r&d program of china ( 863 program ) under 2013aa013204 .                                                  zaharia m. , chowdhury m. , das t. , dave a. , ma j. , mccauley m. , j. franklin m. , shenker s. , & stoica i. ( 2012 ) resilient distributed datasets : a fault - tolerant abstraction for in - memory cluster computing . in : _ proc . of nsdi 2012 at usenix _ , pp .  1528 ."
  ],
  "abstract_text": [
    "<S> the rule - based owl reasoning is to compute the deductive closure of an ontology by applying rdf / rdfs and owl entailment rules . </S>",
    "<S> the performance of the rule - based owl reasoning is often sensitive to the rule execution order . in this paper </S>",
    "<S> , we present an approach to enhancing the performance of the rule - based owl reasoning on spark based on a locally optimal executable strategy . </S>",
    "<S> firstly , we divide all rules ( 27 in total ) into four main classes , namely , _ spo rules _ ( 5 rules ) , _ type rules _ ( 7 rules ) , _ sameas rules _ ( 7 rules ) , and _ schema rules _ ( 8 rules ) since , as we investigated , those triples corresponding to the first three classes of rules are overwhelming ( e.g. , over 99% in the lubm dataset ) in our practical world . secondly , based on the interdependence among those entailment rules in each class , we pick out an optimal rule executable order of each class and then combine them into a new rule execution order of all rules . finally , we implement the new rule execution order on spark in a prototype called rors . </S>",
    "<S> the experimental results show that the running time of rors is improved by about 30% as compared to kim & park s algorithm ( 2015 ) using the lubm200 ( 27.6 million triples ) . </S>"
  ]
}