{
  "article_text": [
    "in logic programming certain fragments of first - order logic are given a computational meaning .",
    "the first and best known example of such a fragment is that of the _ horn clauses _ , quantifier - free formulas of the form @xmath1 or @xmath2 , where the @xmath3 and @xmath1 are atomic formulas , the basis for the programming language prolog  @xcite .",
    "a logic program is a finite set of such formulas ( called _ rules _ ) .",
    "a logic program @xmath4 in the language @xmath5 can be interpreted in first - order logic as a set of sentences in @xmath5 , by taking the universal closure @xmath6 of each of the rules @xmath7 in @xmath4 .",
    "an alternative method of eliminating the free variables in the rules , is the substitution of _ ground terms _ , i.e.terms built from the constants and functions in @xmath5 .",
    "the set of ground terms of @xmath5 , the _ herbrand universe _ of @xmath5 , may be used as the domain for models of theories in @xmath5 , the _ herbrand models_. replacing each @xmath7 by the set of all possible substitutions with ground terms , @xmath4 is now replaced by a set of quantifier - free sentences in @xmath8 in @xmath5 .",
    "the rationale behind this is given by the following well - known fact ( for a proof see for example  @xcite ) .",
    "let @xmath4 be a set of universal sentences .",
    "the following are equivalent :    1 .",
    "@xmath4 has a model 2 .",
    "@xmath4 has a herbrand model 3 .",
    "@xmath8 is satisfiable in propositional logic    in this paper we are interested in logic programs as ( possibly infinite ) sets of propositional formulas . in general , our program rules may include negations and disjunctions and hence the results in this paper extend to disjunctive logic programming as well .",
    "we will denote a fragment of the language of propositional logic by enumerating between square brackets the connectives and constants that are allowed in formulas of the fragment .",
    "so @xmath9 $ ] will denote the set of formulas built from atomic formulas , using only conjunction and negation . and @xmath10 $ ] will be the fragment of formulas built with conjunction and disjunction from atomic formulas and the constants @xmath11 and @xmath12 .    as long as we remain in classical propositional logic , a model @xmath13 for a program @xmath4",
    "can be identified by the set of atoms @xmath14 valid in @xmath13 , in our notation @xmath15 .    in logic programming one",
    "is interested in constructing a most general model for a program @xmath4 ( in the language @xmath5 based on the herbrand universe of @xmath5 ) .",
    "such a most general model should not identify terms , for example , unless such an identity is implied by @xmath4 .",
    "for the propositional analogue of programs with horn clauses as rules , the _ minimal herbrand model _ is such a most general model .    in propositional logic",
    "an obvious candidate for the most general model of @xmath4 is the intersection of all sets of atoms @xmath14 such that @xmath16 ( i.e. , @xmath4 is true in the valuation that makes exactly the atoms in @xmath14 true ) . for programs with horn clauses as rules",
    "this works fine as can be seen from the following fact .",
    "let @xmath17\\}$ ] and @xmath18",
    ". then @xmath19 .",
    "although the above fact introduces a fragment slightly richer than the language of horn clauses , it is still easy to prove .",
    "a simple example , like @xmath20 , shows that there may not be a unique minimal model for @xmath4 if disjunctions are allowed in the rules of @xmath4 . and",
    "even more serious problems arise for the notion of _ most general model _",
    ", when negations in the head or body of rules of @xmath4 are allowed .",
    "several solutions have been proposed for the semantics of logic programs with disjunctions and negations .",
    "the answer set ( or stable model ) semantics we use in this paper was introduced by gelfond and lifschitz in  .",
    "the main idea is that @xmath14 is an _ answer set _ of @xmath4 if @xmath21 where @xmath22 is the program that arises if we replace all negations @xmath23 in @xmath4 by either @xmath11 or @xmath12 according to whether @xmath24 or not , and that @xmath14 is minimal in this respect .",
    "the behavior of negation in this semantics resembles that of the _ negation as failure _ ( or _ negation by default _ ) in many prolog implementations .",
    "we define a logic * l * to be _",
    "sound for stable models _ or _",
    "sound for stable inference _ if , whenever @xmath25 , then the answer sets for @xmath26 are the same as for @xmath4 . classical propositional logic , * cpl * , turns out to be too strong to have this property .",
    "for example , the program @xmath27 does not have answer sets at all , whereas @xmath28 and @xmath29 has @xmath30 as its answer set .",
    "logics weaker than classical logic * cpl * can give a solution to this problem , in particular _ intermediate logics",
    "_ , i.e.  logics derived from intuitionistic propositional logic * ipl * by adding axioms that are valid in * cpl * , do provide a sound basis for stable inference .",
    "david pearce used in  @xcite 3-valued gdel logic * g3 * to prove logic programs strongly equivalent .",
    "the notion of _ strong equivalence _ of logic programs was introduced in @xcite .",
    "logic programs @xmath31 and @xmath32 are said to be _ strongly equivalent _ in the sense of stable model semantics if for every logic program @xmath4 , @xmath33 and @xmath34 have the same answer sets . for programs in the language @xmath35\\}$ ]",
    "it was shown in  @xcite that @xmath31 and @xmath32 are strongly equivalent precisely if they are equivalent in * g3*.    as pointed out in @xcite , the notion of strong equivalence may be of interest in showing that a part of a program can be replaced by a simpler equivalent part , without affecting the behavior of the whole program or its extensions . replacing nonclassical , nonmonotonic stable inference by a well - understood monotonic intermediate logic like * g3",
    "* , will simplify the verification of such strong equivalence between logic programs .",
    "the logic * g3 * , also known as the smetanich logic of _ here - and - there _ , is the intermediate logic whose models are based on the partially ordered frame @xmath36 with @xmath37 ( @xcite , @xcite , and see section  [ prel ] ) .    in this paper we will consider the problem of the weakest intermediate logic * l * for which provable equivalence is the same as strong equivalence in the sense of stable models . in other words , which",
    "* l * has the property that logic programs @xmath33 and @xmath34 have the same answer sets for all @xmath4 iff @xmath31 and @xmath32 are equivalent in * l * , but this property does not hold for any strictly weaker logic . note that this will depend on the language one allows for the programs .",
    "our main result is that for programs in the language @xmath38\\}$ ] the weakest intermediate logic for which equivalence of programs equals strong equivalence on stable models is the logic * kc * , axiomatized by adding axiom @xmath0 to * ipl*. this logic ( also known as _",
    "jankov s logic _ or the _ logic of the weak law of excluded middle _ ) was introduced in @xcite .",
    "our main result remains true if we restrict the language of programs to @xmath39\\}$ ] or @xmath40\\}$ ] .",
    "but in the language @xmath41\\}$ ] strong equivalence of programs coincides with equivalence in * ipl * itself .",
    "let us note that * g3 * is easier to implement than * kc*. this is witnessed by the fact that satisfiability in * g3 * is @xmath42 and satisfiability in * kc * is @xmath43 .",
    "however , in many particular cases it is easy to see that certain formulas are not derivable in * kc * whereas this is a complex matter for * g3*. this point also shows up when one wants to prove that the disjunctive rule @xmath20 is not strongly equivalent to any nondisjunctive rule .",
    "it is not clear how this could be done using the characterization of strong equivalence as provable equivalence in * g3 * since @xmath44 is definable from the other connectives in * g3*. but with our characterization of strong equivalence as provable equivalence in * kc * it is a rather simple corollary which we will prove at the end of the paper .",
    "we would like to thank david pearce who challenged us to find the weakest intermediate logic for which equivalent programs are strongly equivalent .",
    "we are also obliged to him and v. lifschitz for diligently explaining some of the subtleties in answer set semantics .",
    "finally the anonymous referees should be acknowledged for their corrections and valuable suggestions for improving the presentation .",
    "in the language of propositional logic formulas are built from atoms ( plus possibly constants @xmath12 and @xmath11 ) using @xmath45 , @xmath46 .",
    "fragments of propositional logic are obtained by restricting the use of atoms , constants and/or the use of the connectives .",
    "the kripke semantics in this paper is fairly standard .",
    "a _ kripke frame _",
    "@xmath47 is a set of worlds ( or nodes ) @xmath48 with a partial ordering @xmath49 .",
    "a _ model _",
    "@xmath50 will be such a frame together with a function @xmath51 mapping each world @xmath52 to a set of atomic formulas , such that if @xmath53 then @xmath54 .",
    "note that kripke models are not necessarily rooted .",
    "maximal world _",
    "@xmath52 ( i.e.  such that for all @xmath55 , @xmath53 implies @xmath56 ) will be called a _ terminal node _ of @xmath48 ( or @xmath50 ) .    for the language of propositional logic the interpretation in a world @xmath13 of a model @xmath50 ( by which we mean @xmath52 if @xmath57 ) is given by the usual rules .",
    "@xmath58 ( @xmath59 is true in @xmath50 at @xmath13 ) is defined by recursion on the length of @xmath59 .",
    "1 .   @xmath60 , 2 .",
    "@xmath61 and @xmath62 , 3 .",
    "@xmath63 or @xmath62 , 4 .",
    "@xmath64 or @xmath65 .",
    "@xmath66 , 6 .",
    "@xmath67 ,    if it is clear from the context which model is meant in @xmath68 , we will omit the subscript ( and simply write @xmath69 ) . if @xmath70 is a set of formulas and @xmath13 a world in a kripke model @xmath50 , then @xmath71 iff @xmath69 for all @xmath72 .",
    "we will write @xmath73 ( or @xmath74 ) if for all @xmath13 in @xmath50 it is true that @xmath69 ( or @xmath71 ) . a well - known fact about kripke models",
    "is that if @xmath69 and @xmath53 then @xmath75 , which is true for atomic formulas @xmath59 by the monotonicity of the function @xmath76 but extends to all formulas @xmath59 .",
    "intuitionistic propositional logic ( * ipl * ) is sound and complete for the set of finite kripke models .",
    "thus , @xmath77 iff @xmath73 for each finite @xmath50 .    classical propositional logic ( * cpl * ) is sound and complete for the set of kripke models where the partial ordering is identity .",
    "hence , a classical model consists of a world @xmath13 that may be identified with @xmath78 , the set of atomic formulas valid in @xmath13 .",
    "if @xmath79 we will denote @xmath69 by @xmath80 . in the case where @xmath13 is a node in a kripke model @xmath50 , @xmath81 will denote the classical world with the same set of atoms as the node @xmath13 ( so @xmath82 ) .    an _ intermediate logic _ is a logic obtained by adding formulas valid in * cpl * , to * ipl * as schemes",
    ".    3-valued gdel logic * g3 * can be defined as the logic sound and complete for models based on the frame @xmath83 with @xmath37 ( in a short notation : @xmath36 ) .",
    "we will call these models _ here - and - there models_. * g3 * traditionally is introduced by giving the ( 3-valued ) truth tables for the connectives .",
    "the three values correspond in the context of kripke models of course to the three sets of nodes that a formula can be true in : @xmath84 .",
    "alternatively * g3 * may be obtained by adding e.g.  one of the following axioms to * ipl * :    1 .",
    "[ luk ] @xmath85 2 .",
    "@xmath86 3 .",
    "[ hos ] @xmath87 4 .",
    "@xmath88    ukasiewicz  @xcite seems to have been the first to axiomatize * g3 * , using axiom  [ luk ] .",
    "the second axiom is gdel s  @xcite formula expressing that there are only three truth values .",
    "the third is a simplified version of hosoi s axiom @xmath89  @xcite .",
    "the last axiom is a combination of the iterated peirce formula ( the substitution of the peirce formula @xmath90 for @xmath1 in @xmath91 ) and the axiom for * kc * ( see below ) , together expressing that the logic will be complete with respect to frames of maximal depth 2 and a single terminal node .",
    "clearly @xmath0 can also easily be derived from  [ hos ] ( take @xmath92 and use that @xmath93 and @xmath23 are equivalent and @xmath94 is equivalent to @xmath95 ) or the other axioms . for more details",
    "see  @xcite .",
    "we will use the notation @xmath96 for the kripke model @xmath36 , with @xmath97 and @xmath98 .    the intermediate logic * kc * is given by the rules and axioms of intuitionistic propositional logic * ipl * plus the axiom @xmath99 . *",
    "kc * is sound and complete with respect to the finite ( rooted ) kripke models with a single terminal node ( @xcite , see  @xcite ) .",
    "the kripke models of * g3 * are a special kind of * kc*-kripke models , hence by the soundness and completeness theorems for * g3 * and * kc * , provability ( from a set of formulas @xmath70 ) in * kc * implies provability ( from @xmath70 ) in * g3 * : @xmath100 implies @xmath101 .",
    "in this section we recall some of the definitions and results from   and  @xcite for programs in the language @xmath35\\}$ ] . as in  @xcite",
    "our language allows more complex rules than the usual @xmath102 ( conjunctions , disjunctions and negations can be nested ) . we will try to state and prove the results for as large a class of formulas as possible",
    ".    we will start with some results for programs in the language @xmath103\\}$ ] .",
    "examples of rules in this language are : @xmath104 ( i.e.  @xmath105 ) , @xmath106 and @xmath107 .",
    "note that also negations of formulas @xmath59 in @xmath108 $ ] are allowed , as rules , if @xmath23 is written as @xmath109 .",
    "[ as1 ] let @xmath4 be a program in @xmath110\\}$ ] .",
    "a set of atoms @xmath14 is an _ answer set _ of @xmath4 if for all @xmath111 it is true that @xmath112 .",
    "a program in @xmath113\\}$ ] may have several answer sets ( like for example the program @xmath20 ) and ( logically ) different programs may have the same answer sets ( for example @xmath114 and @xmath115 both have the empty set as their only answer set ) .",
    "programs @xmath31 and @xmath32 in @xmath5 are called _ strongly equivalent _ ( in @xmath5 ) if for every program @xmath4 in @xmath5 the programs @xmath33 and @xmath34 have the same answer sets .",
    "logic programs in @xmath113\\}$ ] are strongly equivalent if and only if ( viewed as sets of propositional formulas ) they are equivalent in classical propositional logic .",
    "[ t1 ] let @xmath116\\}$ ] and let @xmath31 and @xmath32 be programs in @xmath5 .",
    "@xmath31 and @xmath32 are strongly equivalent if they are equivalent in * cpl * , i.e.  @xmath117 .",
    "first assume @xmath117 and let @xmath14 be an answer set for @xmath33 .",
    "then for @xmath111 with @xmath118 we may infer that @xmath119 and hence @xmath120 . which proves @xmath14 is also an answer set for @xmath34 .",
    "likewise , every answer set for @xmath34 can be proven to be an answer set for @xmath33 and hence @xmath31 and @xmath32 are strongly equivalent .    for the other direction ,",
    "let @xmath121 and let @xmath122 .",
    "observe that @xmath14 is an answer set for @xmath33 and , as @xmath32 is strongly equivalent to @xmath31 , @xmath14 is also an answer set for @xmath34 . which proves @xmath123 .",
    "likewise , every model of @xmath32 will be a model of @xmath31 , which proves @xmath124 .    for a more general treatment of negations in logic programs the following _ reduction _ of a program was introduced in  , @xcite .    [ ax ] let @xmath14 be a set of atomic formulas and @xmath59 a formula .",
    "@xmath125 is defined recursively as :    @xmath126    for a program @xmath127\\}$ ] the reduction @xmath22 will be a program in @xmath128\\}$ ] .",
    "[ as2 ] let @xmath129\\}$ ] .",
    "a set @xmath14 of atomic formulas is called an _",
    "answer set _ for @xmath4 if for all @xmath111 we have @xmath130 .",
    "if we restrict the language to @xmath131\\}$ ] , we have @xmath132 and definition  [ as2 ] coincides with definition  [ as1 ] .    to find a theorem similar to theorem  [ t1 ] for strong equivalence in @xmath133\\}$ ]",
    ", we will use the characterization of answer sets in  @xcite , based on kripke models for the intermediate logic * g3*.    the following lemma is not only useful in this case but also will have applications in the next section .",
    "recall that for a world @xmath13 in a kripke model @xmath50 , @xmath134 denotes the classical model @xmath135 .    [ wv ]",
    "let @xmath13 be a node in a kripke model @xmath50 . for @xmath136 $ ] , @xmath69 iff @xmath137 and , if @xmath138 then @xmath139 .",
    "first we prove for @xmath140 $ ] that @xmath69 iff @xmath141 .",
    "if @xmath59 is atomic , @xmath11 or @xmath12 , this is obvious . by induction on the complexity of @xmath59 ,",
    "the proof for the cases of conjunction and disjunction is straightforward .    for the second part of the proof , let both @xmath59 and @xmath1 be in @xmath142",
    "$ ] . if @xmath143 then @xmath141 and @xmath144 . by the first part of the lemma then @xmath145 .    as an immediate consequence of lemma  [ wv ] we have the following lemma for models of * g3*.    [ 01 ] for @xmath136 $ ] , @xmath146 iff @xmath147 and @xmath148    assume @xmath146 . by lemma  [ wv ] we may conclude that @xmath147 and @xmath148 .",
    "for the other direction , assume @xmath147 and @xmath149 .",
    "if @xmath150 , then @xmath151 and hence @xmath152 , which implies @xmath153 , so @xmath146 . on the other hand",
    "if @xmath154 then @xmath147 immediately implies @xmath155 .",
    "the next lemma is true for all propositional formulas .",
    "[ x3 ] for all sets of atoms @xmath14 and @xmath156 such that @xmath111 it is true that @xmath157 .",
    "observe that @xmath158 . as a consequence we have @xmath159 .",
    "hence for all @xmath59 it is true that @xmath160 .",
    "this implies , using the definition  [ ax ] , that for all @xmath161 $ ] it is true that @xmath162 , from which the lemma immediately follows .",
    "theorem  [ p1 ] , theorem  [ sim ] and corollary  [ lpv ] restate the main result of  @xcite .",
    "[ p1 ] let @xmath129\\}$ ] and @xmath14 a set of atomic formulas .",
    "@xmath14 is an an answer set of @xmath4 if and only if for all @xmath111 it is true that @xmath163 .",
    "[ sim ] let @xmath31 and @xmath32 be programs in @xmath35\\}$ ] .",
    "@xmath31 and @xmath32 are strongly equivalent if and only if they are equivalent in * g3 * , i.e.  @xmath164 .    [ lpv ]",
    "let @xmath31 and @xmath32 be programs in @xmath35\\}$ ] .",
    "@xmath31 and @xmath32 are strongly equivalent if and only if for all @xmath165 , @xmath33 and @xmath34 have the same answer sets .    according to the corollary above ,",
    "the notion of strong equivalence of logic programs may depend on the language for the programs @xmath31 and @xmath32 , but in all sublanguages @xmath5 of @xmath166\\}$ ] , we may use theorem  [ sim ] , as long as rules of the form @xmath114 ( with @xmath104 and @xmath167 atomic ) are in @xmath5 .",
    "the previous section linked strong equivalence of logic programs in stable inference with equivalence in * cpl * ( for programs without negations in the head or the body of the rules ) or in * g3*. in this section we will determine for several fragments of propositional logic the weakest intermediate logic for which equivalence of programs is implied by strong equivalence in stable inference .",
    "the direction from * ipl * to * cpl * is trivial .",
    "so let us assume @xmath172 .",
    "let @xmath50 be a kripke model and @xmath13 a node in @xmath50 such that @xmath71 .",
    "using lemma  [ wv ] we may conclude @xmath173 and hence @xmath174 .",
    "again , use lemma  [ wv ] to prove @xmath175 .",
    "this proves that @xmath70 implies @xmath176 in kripke models in general and hence @xmath177 .",
    "strong equivalence between programs in the language @xmath38\\}$ ] will not be the same as equivalence in * ipl * , as for example @xmath180 is strongly equivalent to @xmath12 ( it is a derivable formula in * g3 * ) and is not derivable in * ipl*. the intermediate logic * kc * , which has @xmath0 as its axiom , will , in the following , turn out to be the weakest intermediate logic for which equivalence of programs is implied by strong equivalence in answer set semantics .",
    "again the direction from * kc * to * g3 * is trivial . for the other direction ,",
    "let @xmath183 ( where @xmath184 $ ] ) .",
    "then for some kripke model @xmath50 with a single terminal ( i.e.  maximal ) node @xmath185 , there is a @xmath186 such that @xmath187 and @xmath188 .",
    "we will prove that for the * g3 * -model @xmath189 we have for all formulas @xmath190 $ ] that @xmath191 and for @xmath192 $ ] that @xmath193 . as a consequence , @xmath194 and @xmath195 , which proves @xmath196 .",
    "the proof that for @xmath190 $ ] we have @xmath191 is by structural induction . for atomic formulas",
    "it is obvious and the cases for conjunctions and disjunctions are trivial . for the case of negation , observe that @xmath197 , and @xmath198 .",
    "now let @xmath192 $ ] and @xmath199 . since @xmath200 , @xmath201",
    "so , if @xmath202 , we have ( by the above part of the proof ) @xmath203 and hence @xmath204 . on the other hand , if @xmath175 , then also @xmath205 and by the above part of the proof , also @xmath206 . which proves that @xmath199 implies @xmath206 .",
    "that * kc * is the weakest intermediate logic for strong equivalence in almost any language with negation ( where negation is taken to be a _ negation by default _ and strong equivalence defined according to the answer set semantics ) can be seen from the following corollary .",
    "* kc * can alternatively be axiomatized as * ipl * plus @xmath212 . in one direction",
    "this is clear from the fact that this axiom immediately follows from @xmath0 , for the other direction substitute @xmath0 for @xmath1 in the axiom , and @xmath0 follows .",
    "so , the programs @xmath213 and @xmath214 are strongly equivalent and any logic making such programs equivalent will be as strong as * kc*.      even if we restrict the language further , allowing in the body only atoms or negated atoms and in the head only atoms ( apart from simple statements of atoms and negation of atoms ) , * kc * is still the weakest intermediate logic * l * such that equivalence of programs in * l * corresponds with strong equivalence .    in logic programming the programs in this restricted language are known as _",
    "normal _ programs and have historically been most important .",
    "most prolog implementations of _ negation by default _ are restricted to this kind of programs , often called _ general programs _ in this context ( see  @xcite ) .          of course , this can be automatically checked in a tableau system as in  @xcite , but let us do it from scratch . by * kc * we have @xmath23 or @xmath95 . if @xmath23 , @xmath1 and hence @xmath220 , is immediate from @xmath221 .",
    "so , we can assume @xmath95 .",
    "similarly , we can assume @xmath222 . by * ipl",
    "* , @xmath223 follows .",
    "again by * ipl * , @xmath224 now implies @xmath225 , from which again @xmath220 .",
    "let @xmath5 be the set of formulas coding normal logic programs .",
    "as derivability in * kc * implies derivability in * g3 * , we can use lemma  [ qlem ] to prove that @xmath226 and @xmath227 are strongly equivalent programs in @xmath5 .    on the other hand",
    "it is easily seen that for each intermediate logic",
    "* l * that proves @xmath31 and @xmath32 equivalent , we have @xmath228 .",
    "the following lemma shows that such an * l * has to contain * kc*.      that @xmath230 implies @xmath231 is a simple consequence of lemma  [ qlem ] . for the other direction ,",
    "let @xmath232 , @xmath233 , @xmath234 and @xmath235 in @xmath229 .",
    "all the antecedents as well as @xmath236 are then derivable , so @xmath180 follows .",
    "let @xmath31 and @xmath32 be normal logical programs",
    ". then @xmath31 and @xmath32 are strongly equivalent iff @xmath207 .",
    "moreover , * kc * is the weakest intermediate logic for which provable equivalence in the logic and strong equivalence of normal logic programs coincide .",
    "observe that the type of model we need for the proof above is not a * g3 * model ( not of the form @xmath256 ) .",
    "in fact , in the full language of * g3 * we can define disjunction using @xmath257 . the simple proof that this is not possible ( in * g3 * )",
    "if one restricts the language of the programs to @xmath237\\}$ ] indicates that the proof of certain properties of answer set programs may benefit from a detour in the logic * kc*.    99 avellone ,  a. , ferrari ,  m. and miglioli ,  p. ( 1999 ) duplication - free tableau calculi and related cut - free sequent calculi for the interpolable propositional intermediate logics .",
    "_ logic journal of the igpl _ , 7(4 ) : pp .",
    "chagrov ,  a. and zakharyaschev ,  a.  m. ( 1997 ) modal logic .",
    "clarendon press .",
    "doets ,  k. ( 1994 ) from logic to logic programming . mit press .",
    "gelfond ,  m. and lifschitz ,  v. ( 1988 ) the stable model semantics for logic programs .",
    "in r.a .  kowalski and k.a .",
    "bowen ( editors ) , _ proceedings of the fifth international conference and symposium on logic programming 2 _ , pp .",
    "mit press .",
    "gdel ,  k. ( 1932 ) zum intuitionistischen aussagenkalkl , _ anzeiger der akademie der wissenschaften in wien _ , 69 : pp .  6566 .",
    "hendriks ,  a. ( 1996 ) computations in propositional logic , phd thesis university of amsterdam .",
    "hosoi ,  t. ( 1966 ) the axiomatization of the intermediate propositional systems @xmath258 of gdel , _ journal of the faculty of science of the university of tokio _ , 13 : pp .",
    "jankov ,  v.  a. ( 1968 ) the calculus of the weak `` law of excluded middle '' .",
    "_ mathematics of the ussr , izv .",
    "_ , 2 : pp .  9971004 .",
    "kowalski ,  r.  a. ( 1974 ) predicate logic as a programming language .",
    "_ proceedings ifip74 _ , pp .  569574 .",
    "north - holland .",
    "lifschitz ,  v. , pearce ,  d. and valverde ,  a. ( 2001 ) strongly equivalent logic programs .",
    "_ acm transactions on computational logic _ , 2(4 ) : pp .  526541 .",
    "lifschitz ,  v. , tang ,  l.  r. and turner ,  h. ( 1999 ) nested expressions in logic programs .",
    "_ annals of mathematics and artificial intelligence _ , 25 : pp .  369389 .",
    "ukasiewicz ,  j. ( 1938 ) die logik und das grundlagenproblem .",
    "_ les entretiens de zrich sur les fondaments et la mthode des sciences mathmatiques 69 _ , 12 : pp",
    ".  82100 .",
    "pearce ,  d. ( 1997 ) a new logical characterization of stable models and answer sets . in j.  dix , l.  pereira , t.  przymusinski ( editors ) ,",
    "_ non - monotonic extensions of logic programming , lecture notes in artificial intelligence , 1216 _ , pp",
    ".  5770 .",
    "springer - verlag ."
  ],
  "abstract_text": [
    "<S> the non - classical , nonmonotonic inference relation associated with the answer set semantics for logic programs gives rise to a relationship of _ strong equivalence _ between logical programs that can be verified in 3-valued gdel logic , * g3 * , the strongest non - classical intermediate propositional logic  @xcite . in this paper </S>",
    "<S> we will show that * kc * ( the logic obtained by adding axiom @xmath0 to intuitionistic logic ) , is the weakest intermediate logic for which strongly equivalent logic programs , in a language allowing negations , are logically equivalent .    </S>",
    "<S> key words : answer set semantics , strongly equivalent programs , propositional intermediate logics .    </S>",
    "<S> [ theorem]corollary [ theorem]definition [ theorem]fact [ theorem]lemma    = .25em </S>"
  ]
}