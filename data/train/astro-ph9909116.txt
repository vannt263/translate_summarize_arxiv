{
  "article_text": [
    "in this paper , we describe the hardware architecture and performance of grape-5 , the newest addition to grape series of special - purpose computers .",
    "grape ( for `` gravity pipe '' ; see sugimoto _ et al . _ 1990 ,",
    "makino and taiji 1998 ) is a special - purpose computer to accelerate the gravitational many - body simulation .",
    "it has pipelines specialized for the force calculation , which is the most expensive part of the gravitational many - body simulation .",
    "all other calculations , such as time integration of orbits , are performed on a host computer connected to grape .",
    "figure [ fig : grape ] illustrates the basic structure of a grape system . in the simplest case , the host computer sends positions and masses of all particles to grape .",
    "then grape calculates the forces between particles , and sends them back to the host computer .",
    "the grape system achieved high performance on the gravitational many - body simulation through pipelined and highly parallelized architecture specialized for the force calculation .",
    "grape-3 ( okumura _ et al .",
    "_ 1993 ) is the first grape system with multiple force calculation pipelines .",
    "figure [ fig : g3b ] shows the architecture of grape-3a board with 8 pipelines .",
    "one pipeline is integrated into the grape chip .",
    "the peak performance of the grape chip is 0.6 gflops at a clock cycle of 20 mhz , and that of a system which contains 8 grape chips is 4.8 gflops .",
    "like grape-1 ( ito _ et al .",
    "_ 1990 ) and grape-1a ( fukushige _ et al .",
    "_ 1991 ) , grape-3 uses the number format with short mantissa , in order to reduce the chip size .",
    "the r.m.s .",
    "relative error of the pairwise force is about 2% , which is low enough for most of collisionless simulations ( makino 1990 , hernquist _",
    "_ 1993 , athanassoula _ et al .",
    "copies of grape-3 are used in many institute inside and outside japan ( _ e.g. _ brieu _ et al .",
    "_ 1995 , padmanabhan _ et al .",
    "_ 1996 , steinmetz 1996 , nakasato _ et al .",
    "_ 1997 , klessen _ et al .",
    "_ 1998 , mori _ et al .",
    "_ 1999 , theis and spurzem 1999 , koda _ et al .",
    "_ 1999 ) .",
    "grape-5 is the successor of grape-3 .",
    "grape-5 embodies the improvement of a factor of 10 in calculation speed , communication speed , and accuracy , over grape-3 .",
    "in addition , it can be applied to ewald or p@xmath1 m algorithms , since it can evaluate the force and potential with arbitrary cutoff .",
    "the structure of this paper is as follows : in section [ sec : algorithms ] we briefly describe force calculation algorithms used with grape-5 . in section [ sec : hardware ]",
    "we describe the hardware of the grape-5 system . in section [ sec : accuracy ]",
    "we discuss the calculation accuracy of grape-5 . in section",
    "[ sec : timing ] we present the timing results . in section [ sec : future ] we discuss future prospects .",
    "in this section we briefly discuss force calculation algorithms used on grape-5 .",
    "the @xmath4 direct summation is the simplest algorithm . to obtain the force on a particle",
    ", grape-5 simply calculates and adds up forces from all particles in the system . though the direct summation is simple and efficient for small-@xmath5 ( say @xmath610@xmath7 ) systems , for large-@xmath5 systems force calculation becomes expensive , even with grape hardware . in the following ,",
    "we describe two algorithms to reduce the calculation cost .",
    "first we describe the barnes - hut tree algorithm ( barnes and hut 1986 ) , and then p@xmath1 m ( particle - particle particle - mesh ) method ( hockney and eastwood 1981 ) .",
    "the barnes - hut tree algorithm ( barnes and hut 1986 ) reduces the calculation cost from @xmath4 to @xmath8 , by replacing forces from distant particles by that from a particle at their center of mass ( or multipole expansion ) .",
    "vectorization of tree algorithm is discussed in barnes ( 1990 ) , hernquist ( 1990 ) and makino ( 1990 ) .",
    "parallelization has been discussed in numerous articles ( salmon and warren 1992 , salmon _ et al .",
    "_ 1994 , dubinski 1996 , warren _",
    "_ 1997 , yahagi _ et al .",
    "_ 1999 ) .",
    "the application of grape hardwares to the tree algorithm are discussed in makino ( 1991 ) and athanassoula _",
    "et al._(1998 ) .",
    "vectorized versions of tree algorithms based on barnes modified algorithm ( 1990 ) are used in these articles . with this algorithm",
    ", we can use grape more efficiently than with the original algorithm . in the original algorithm ,",
    "tree traversal is performed for each particle . in the modified algorithm ,",
    "tree traversal is performed for a group of neighboring particles and an _ interaction list _ is created .",
    "grape calculates the force from particles and nodes in this interaction list to particles in the group .",
    "the modified tree algorithm reduces the calculation cost of the host computer by roughly a factor of @xmath9 , where @xmath9 is the average number of particles in groups . on the other hand , the amount of work on grape increases as we increase @xmath9 , since the interaction list becomes longer .",
    "there is , therefore , an optimal value of @xmath9 at which the total computing time is minimum ( makino 1991 ) .",
    "the optimal value of @xmath9 depends on various factors , such as the relative speed of grape and its host computer , the opening parameter and number of particles . for present grape-5",
    ", @xmath10 is close to optimal .",
    "when we need high accuracy for the force calculation , we can use p@xmath11m@xmath11 ( pseudo - particle multipole method ; makino 1998 ) . in the algorithm",
    "described above , we can not handle higher - order terms of the multipole expansion on grape , since grape can calculate @xmath12 force only .",
    "thus , the amount of the calculation grows quickly when high accuracy is required . in p@xmath11m@xmath11 ,",
    "high - order expansion terms are expressed by forces from a small number of pseudo - particles , and thus we can evaluate these terms on grape . using p@xmath11m@xmath11 ,",
    "kawai and makino ( 1999 ) implemented arbitrary - order tree algorithm on grape-4 .",
    "the timing results show that the calculation with p@xmath11m@xmath11 is faster than that without p@xmath11m@xmath11 , when the total force error smaller than @xmath13 10@xmath14 is required .",
    "the p@xmath1 m method ( hockney and eastwood 1981 ) calculates gravitational interaction under periodic boundary condition . the total force is divided into long - range and short - range forces .",
    "the long - range ( pm ) force is computed in wave number space using fast fourier transform ( fft ) .",
    "the short - range ( pp ) force is calculated directly .",
    "brieu _ et al . _",
    "( 1995 ) implemented the p@xmath1 m method on grape-3 .",
    "since grape-3 can calculate force with plummer softening only , they expressed the pp force as a combination of three forces with different plummer softening radius .",
    "therefore they used grape-3 three times to evaluate one pp force .",
    "this procedure is rather complex , and yet the accuracy is rather low .",
    "grape-5 evaluates this interaction with cutoff in single call , and in high accuracy .",
    "in this section we describe the function and the architecture of grape-5 system . in section",
    "[ sec : g5arch ] we show the overall architecture of the grape-5 system and overview the function of the grape-5 processor board . in section [ sec : g5chip ] we give a detailed description of the g5 chip , a custom chip for force calculation .",
    "sections [ sec : mu][sec : iu ] are devoted to description of components of the processor board other than the g5 chip .",
    "peak performance and other miscellaneous aspects of the board are described in section [ sec : misc ] .",
    "figure [ fig : g5sys ] shows the basic structure of the grape-5 system .",
    "it consists of three components : a grape-5 processor board , a pci host interface board ( kawai _ et al .",
    "_ 1997 ) , and the host computer .",
    "the processor board is connected to pci host interface board ( hereafter we call phib ) via hlink ( makino _ et al . _ 1997 ) .",
    "phib is attached to pci i / o bus of the host computer .",
    "pci bus is an i / o bus standard widely used from desktop pcs to supercomputers .",
    "figure [ fig : g5b ] shows the block diagram of the grape-5 processor board .",
    "it consists of five units : the g5 chips , the memory unit , the particle index unit , the neighbor list unit , and the interface unit .",
    "the g5 chip is a custom vlsi chip which integrates two pipeline processors to calculate gravitational interactions .",
    "the memory unit supplies particle data to the g5 chips . the particle index unit supplies indices of particles to the memory unit during force calculation .",
    "this unit can supply indices in a special manner optimized to the cell - index method to calculate a short - range force , such as the pp force in p@xmath1 m method .",
    "the neighbor list unit constructs the list of the nearest neighbor particles .",
    "the interface unit handles the communication with the host computer . in the following subsections",
    "we describe these units .",
    "the g5 chip calculates the force exerted on particle @xmath23 at position @xmath24 .",
    "the force @xmath25 is expressed as @xmath26 where @xmath5 is the number of particles and @xmath27 here @xmath28 is the force ( per unit mass ) from particle @xmath29 to particle @xmath23 .",
    "note that @xmath30 and @xmath31 are the position and the mass of particle @xmath29 , and that @xmath32 is the softened distance between particle @xmath23 and @xmath29 defined as @xmath33 , where @xmath34 is the softening parameter for particle @xmath23 . here and hereafter , we use index @xmath23 for the particle on which the force is evaluated and index @xmath29 for particles that exert forces on particle @xmath23 .",
    "the function @xmath35 is an arbitrary cutoff function , @xmath22 is a scale length for the cutoff function , and @xmath36 is the cutoff length . the g5 chip also calculates potential @xmath37 associated with force @xmath25 , using cutoff function different from that for force calculation . during force calculation , the g5 chip asserts the neighbor flag if the distance of particles @xmath32 is less than a given neighbor radius , @xmath38 .",
    "the g5 chip consists of two pipeline units and one i / o unit , as shown in figure [ fig : g5pipe1 ] .",
    "the pipeline unit calculates the gravitational interaction .",
    "the i / o unit handles data transfer between the pipeline unit and the external i / o port .",
    "figure [ fig : g5pipe2 ] shows the block diagram of the pipeline unit .",
    "the number attached to each line is the number of bits used .",
    "the number format will be discussed later . the position vector @xmath30 and the mass data @xmath31",
    "are supplied from the memory unit .",
    "the position vector @xmath24 , the softening parameter @xmath34 , and the neighbor radius @xmath39 are stored in the on - chip register before the pipeline starts calculation .",
    "the pipeline unit calculates one interaction per clock cycle , and accumulate it to on - chip registers .",
    "the pipeline unit outputs the neighbor flag when @xmath40 .",
    "the function generator calculates @xmath41 and @xmath42 from @xmath43 and @xmath44 .",
    "figure [ fig : fev ] shows the block diagram of the function generator .",
    "the cutoff functions @xmath35 and @xmath45 are evaluated by table lookup .",
    "the tables are implemented as on - chip ram blocks .",
    "g5 chip has the _ virtual multiple pipeline _ architecture ( makino _ et al .",
    "_ 1993 ) to reduce the necessary bandwidth of data transfer during force calculation . in this architecture ,",
    "one pipeline acts as multiple pipelines operating at a slower speed .",
    "the g5 chip has six virtual pipelines per real pipeline unit and 12 virtual pipelines in total .",
    "each real pipeline unit calculates the forces exerted on 6 different particles .",
    "data for particle @xmath29 is used for 6 clock cycles .",
    "the memory unit operates at a clock frequency 1/6 of that of the g5 chip .",
    "this architecture simplifies the board design .",
    "figure [ fig : g5io ] shows the i / o specification of the g5 chip .",
    "it has four input ports for particle data ( xj[31:0 ] , yj[31:0 ] , zj[31:0 ] , and mj[16:0 ] ) , one input and one output port to the host computer ( datai[31:0 ] and datao[31:0 ] ) , one address bus ( adr[10:0 ] ) , six control input pins ( clk , sysclk , run , cs , oe and we ) , and 13 output pins ( nb[11:0 ] and busy ) . the clk supplies clock signal for chip internal operations .",
    "the sysclk supplies clock signal for i / o operations .",
    "the frequency of sysclk is 1/6 of that of clk .",
    "following the design of grape-1 ( ito _ et al .",
    "_ 1990 ) and grape-3 , we adopted word length shorter than those used on conventional computers for the g5 chip .",
    "the word length directly determines the number of transistors . in order to achieve high performance at low cost",
    ", it is crucial to use the minimum word length that ensures the validity of the calculation .",
    "the word length used in the g5 chip are shown in figure [ fig : g5pipe2 ] and figure [ fig : fev ] .",
    "the number of bits is attached to each data line .",
    "we adopted the logarithmic format for most of the operations in the pipeline unit except for the subtraction of the position vectors , lookup of the cutoff table , and the final accumulation of the force .",
    "we prefer the logarithmic format over the fixed - point format because it has larger dynamic range for the same word length .",
    "of course , the usual floating - point format also can achieve a wider dynamic range .",
    "we chose the logarithmic format because operations such as multiplication and square root are easier to implement in the logarithmic format than in the floating - point format .",
    "although the addition becomes complex , the logarithmic format is more efficient for the word length we used for grape-5 .    in the logarithmic format , a positive",
    ", non - zero real number @xmath46 is represented by its base-2 logarithm @xmath47 as @xmath48 in g5 chip , we use 15 bits to express @xmath47 in unsigned fixed - point format , with 8 bits below binary point .",
    "the 16th bit indicates whether @xmath46 is 0 or not ( non - zero bit ) , and the 17th bit indicates the sign . thus the total number of bits per word is 17 .",
    "this format can express real number in the range of @xmath49 , and its resolution is @xmath50 .",
    "we use 32-bit fixed - point 2s - complement format for each component of the position vector @xmath24 and @xmath30 , in order to guarantee uniform resolution and to simplify implementation of the periodic boundary condition .",
    "the selection of the minimum image is performed automatically , by setting the size of the box length to the maximum expressible number ( @xmath51 ) .",
    "this format gives a spatial resolution of @xmath52 .",
    "we use 64-bit and 50-bit fixed - point format for accumulation of the force and potential , respectively .",
    "we adopt the fixed - point format because the adder ( accumulator ) is simpler and its cost is lower in this format than that in logarithmic or floating - point format .    for conversion between the fixed - point format and the logarithmic format , we use format converters described in section [ sec : f2l ] and [ sec : l2f ] .",
    "for addition in the logarithmic format , we use logarithmic adder described in section [ sec : add ] .      here",
    "we describe the hardware to convert the fixed - point format to the logarithmic format .",
    "output number has @xmath53 bits , where @xmath54 and @xmath55 are the number of bits above and below the binary point , respectively . in the case of the g5 chip , @xmath56 , @xmath57 and @xmath58 .",
    "figure [ fig : f2l ] shows the block diagram of the format converter .",
    "first we convert the 2 s complement format to the sign+magnitude format .",
    "then we calculate the `` integer '' part of logarithm ( upper @xmath54 bits ) using a priority encoder .",
    "the fractional part of logarithm is calculated as follows .",
    "we first normalize the magnitude of @xmath46 by removing leading zeros .",
    "this is done by a logical shifter with control input from the priority encoder .",
    "the output of the shifter is then supplied to a table which convert a normalized number to the base-2 logarithm . in case of g5 chip , the table has 512 ( @xmath59 ) entries to ensure that the round - off error generated at conversion is small .",
    "the ( unsigned-)logarithmic adder performs addition of two positive number @xmath60 and @xmath61 in logarithmic format .",
    "the design of logarithmic adder of g5 chip is basically the same as that of grape chip .",
    "we designed it using the following relation @xmath62 for @xmath63 , or , @xmath64 for general @xmath60 and @xmath61 ( kingsbury and rayner 1971 , swartzlander and alexopoulos 1975 ) .",
    "figure [ fig : add ] shows the block diagram of the logarithmic adder .",
    "first we calculate @xmath65 and @xmath66 , and choose the positive one using a multiplexer .",
    "then we use table lookup to obtain @xmath67 from @xmath68 .",
    "finally we obtain @xmath69 by adding the output of the table to the larger one of @xmath60 and @xmath61 .    in practice , we do not need to prepare table for all possible values of @xmath68 . if @xmath70 , the result of addition @xmath69 is equal to @xmath60 ( assuming @xmath71 ) , after we properly rounded the result .",
    "thus , in the case of the g5 chip with @xmath72 , we need table only for @xmath73 \\simeq 9.1 $ ] ( see makino and taiji 1998 , section 4.6 for detailed discussion ) .",
    "figure [ fig : fev ] shows the block diagram of the cutoff function generator .",
    "the cutoff function @xmath74 and @xmath75 are calculated from @xmath43 and @xmath44 .",
    "first we divide @xmath43 by @xmath44 using subtracter and input the result to the entry generator .",
    "then we supply the output of the entry generator to the cutoff function tables , and obtain @xmath76 and @xmath77 as output of those tables .",
    "the contents of the cutoff function tables are set by the user before the force calculation starts .",
    "the cutoff function table is realized by an on - chip ram .",
    "the ram table consumes significantly larger number of transistors per bit than rom tables used in the format converter and the logarithmic adder . in order to achieve a good cost performance ,",
    "it is important to keep the size of the table as small as possible .",
    "we reduce the size of the table by taking advantage of the nature of the cutoff function .",
    "the cutoff function @xmath35 converges to 1 when @xmath78 approaches to 0 , and converges to 0 when @xmath79 ( see figure [ fig : funcg ] ) .",
    "therefore we need high resolution only when @xmath80 . using these characteristics",
    ", we can reduce the number of entries to the cutoff table for small @xmath78 ( @xmath81 ) and large @xmath78 ( @xmath82 ) .",
    "the entry generator reduces the number of entries to the cutoff function table in the following two steps . at the first step ,",
    "the input @xmath83 expressed in 15-bit logarithmic format ( without sign and non - zero bit ) is converted to a 9-bit integer number .",
    "the conversion is expressed as @xmath84 where @xmath85 is the logarithmic part of the input number interpreted as unsigned integer , and @xmath86 is the output .",
    "this conversion reduces the number of entries at small @xmath78 . at the second step ,",
    "we reduce the entries at large @xmath87 using the conversion given in table [ tab : funcg ] .",
    "an 8-bit integer number is obtained as the conversion result .",
    "the maximum @xmath78 that is expressible in the final format is @xmath88 .",
    "this value is large enough for typical cutoffs such as @xmath19 given by equation ( [ eq : gp3 m ] ) and a gaussian cutoff , since the value of cutoff at @xmath89 is smaller than the force calculation error . in the actual implementation",
    ", the entry generator directly converts the input to the final format by single table lookup .",
    ".entry reduction procedure for cutoff function @xmath35 [ cols= \" < ,",
    "< , < \" , ]     in figure [ fig : perftree ] , we can see that the calculation with grape-5 is about 6 times faster than that with grape-3 , and that the tree algorithm is faster than the direct summation algorithm for @xmath90 .",
    "table [ tab : fractree ] indicates that we can use up to two or three processor boards to increase the calculation speed further . in order to use more than four boards effectively",
    ", we need a host computer which has faster computing speed and multiple communication buses , so that the calculation on the host computer and the data transfer do not limit the total performance .",
    "the calculation time with single processor board for a million particle simulation is 16 seconds per timestep . to put this number into perspective",
    ", parallel treecode by dubinski ( 1996 ) would took around 60 seconds for one million particles on 64 processor t3d , with @xmath91 .",
    "taking into account the difference in @xmath92 , it is perhaps fair to say our treecode on grape-5 is about 6 times faster than dubinski s parallel code on 64 processor t3d ( his code does not scale well for more than 128 processors ) .",
    "( 1999 ) described an implementation of treecode on fujitsu vpp300/16r , which took @xmath93 seconds for one million particles , with the opening criterion roughly corresponding to @xmath94 .",
    "again taking into account the difference in @xmath92 , the effective speed of our code is @xmath95 of vpp300/16r .",
    "the total calculation time per timestep is expressed as @xmath96 where @xmath97 , @xmath98 , and @xmath99 are the time spent on the host computer , the time spent on grape-5 , and the time spent for data transfer between the host computer and grape-5 , respectively . in the following",
    "we present the estimate for the case of homogeneous distribution of particles .    the time spent on the host computer",
    "is expressed as @xmath100 the first term represents the time for fft and the second term represents the time for @xmath101 miscellaneous calculations . here",
    "@xmath102 is the number of meshes in one - dimension used in pm force calculation , and @xmath103 represents time for miscellaneous calculation per particle .",
    "the time spent on grape-5 is expressed as @xmath104 where @xmath105 is the number of meshes for pp force .",
    "we set the ratio @xmath106 to 2.9 , following brieu _",
    "( 1995 ) and fukushige _ et al . _",
    "we set @xmath102 so as to minimize the total calculation time .",
    "the optimal value of @xmath102 is given approximately by @xmath107    the time spent for data transfer is expressed as @xmath108 figure [ fig : perfp3 m ] shows the calculation time per one timestep .",
    "theoretical estimate for grape-5 is plotted . as the timing constants for the host computer , @xmath109 and @xmath103 , we used values scaled from the ones given in fukushige _",
    "_ 1996 , according to the specfp95 values of the hosts .",
    "the estimated calculation speed is 40 and 25 times faster than that with grape-3 ( brieu _ et al .",
    "_ 1995 ) and md - grape ( fukushige _ et al .",
    "_ 1996 ) , respectively .",
    "the calculation time with single processor board for 16 million particles simulation is 150 seconds per timestep . as discussed by brieu _",
    "( 1995 ) , this calculation time depends only weakly on the degree of the clustering .",
    "this is simply because the calculation cost of @xmath101 part of the code ( mass assignment , particle update , etc . )",
    "dominates the total cost . even at a highly clustered stage ,",
    "the increase in the calculation cost would be a factor of two or so .",
    "on the other hand , cpu time of parallel p@xmath1 m implementation is very sensitive to clustering .",
    "for example , macfarland _ et al . _",
    "( 1998 ) reported the cpu time per timestep increased from @xmath110 seconds to @xmath111 seconds for their 16 million particle simulation on 128 processor t3e-600 .",
    "thus , depending on the degree of clustering , p@xmath1 m on grape-5 runs at the speed of 5 - 50 % of a 128 processor t3e-600 .",
    "we plan to build a massively - parallel grape-5 system with peak performance of about 1 tflops .",
    "this system will consist of about 20 processor boards and a host computer .",
    "each processor board is connected to a phib which is inserted into one pci slot .",
    "the host computer has multiple processors and multiple pci slots .    in order for 1 tflops - peak grape-5 system to operate efficiently with the tree algorithm",
    ", a host computer should have the effective computing speed and communication speed of about 5 gflops and a few hundreds mb / s , respectively .",
    "currently , these performance figures are offered only by machines with multiple processors .",
    "the advantage of the smp over the workstation cluster is that the implementation of the code is relatively easy .",
    "the disadvantages are that the price is relatively high and the number of processors is limited to 10 or smaller .",
    "this limit is due to bottleneck in the memory access from multiple processors .",
    "the advantage of the workstation cluster is that they are inexpensive and that it is possible to connect @xmath13 100 processors .",
    "for example , warren _",
    "et al._(1998 ) performed cosmological @xmath5-body simulation with tree algorithm on avalon , a cluster of 70 dec alpha processors ( dec alpha 21164a , 533 mhz ) .",
    "the disadvantage is that the implementation of the code is more difficult .",
    "we plan to build a system based on a cluster of 4 - 8 workstations .",
    "a preliminary analysis indicates that 100bt ethernet connection offers sufficient communication bandwidth . on this system , one timestep of 10@xmath112-body simulation with tree algorithm",
    "would take about 10 seconds . using this system , for example",
    ", we can perform cosmological 10@xmath113-body simulation for 10@xmath1 steps in one day .",
    "we plan to construct a heterogeneous computing system , grape-5/progrape system .",
    "progrape ( programmable grape ; hamada _",
    "et al . _ 1999 ) is a multi - purpose computer for many - body simulation .",
    "it consists of reconfigurable processor implemented on fpga ( field programmable gate array ) chips and memory which stores particle data .",
    "progrape has a very similar architecture to grape except that it uses fpga chips as pipeline processor instead of custom lsi chips such as g5 chip .",
    "progrape can calculate any interaction which is expressed as @xmath114 where @xmath23 and @xmath29 are the indices to the two sets of particles , @xmath115 is the data of particle @xmath23 ( for example position and mass , but can include quantities such as radius , pressure , temperature , etc . ) , and @xmath116 is an arbitrary function of these particle data .",
    "( 1999 ) have developed the first prototype of progrape , progrape-1 .",
    "it houses two fpga devices ( epf10k100 , altera corp . ) , each of which has 100k logical gates .",
    "they have implemented gravitational pipelines same as that in grape chip , which are used for grape-3 .",
    "the pipelines operates at a clock cycle of 16 mhz and the peak performance is 0.96 gflops .",
    "one application example of the grape-5/progrape system is smoothed particle hydrodynamics ( sph ; lucy 1977 , monaghan 1985 ) .",
    "sph is widely used in gas dynamical simulations in astrophysics .",
    "grape-5 calculates the gravitational interactions and progrape calculates hydrodynamical interactions , which includes calculations of density , pressure gradient , and artificial viscosity . for the more detail about progrape system ,",
    "see hamada _",
    "( 1999 ) .",
    "another example is a simulation with ewald method ( ewald 1921 ) .",
    "the ewald method is a method to calculate gravitational force under periodic boundary condition . in the ewald method ,",
    "the force is divided into two interactions in real space and in wave number space .",
    "grape-5 calculates the interaction in real space and progrape calculates the interaction in wave - number space .",
    "it is difficult to estimate the exact performance of grape-5/progrape system , since the performance of progrape varies depending on applications .",
    "but we can expect that the above mentioned simulations on grape-5/progrape system would be faster than that on grape-5 system without progrape by at least a factor of 10 .",
    "we would like to thank daiichiro sugimoto , who have started the grape project .",
    "this work was partially supported by the research for the future program of japan society for the promotion of science , jsps - rftp 97p01102 ."
  ],
  "abstract_text": [
    "<S> we have developed a special - purpose computer for gravitational many - body simulations , grape-5 . </S>",
    "<S> grape-5 is the successor of grape-3 . </S>",
    "<S> both consist of eight custom pipeline chips ( g5 chip and grape chip ) . </S>",
    "<S> the difference between grape-5 and grape-3 are : ( 1 ) the g5 chip contains two pipelines operating at 80 mhz , while the grape chip had one at 20 mhz . </S>",
    "<S> thus , the calculation speed of the g5 chip and that of grape-5 board are 8 times faster than that of grape chip and grape-3 board . </S>",
    "<S> ( 2 ) the grape-5 board adopted pci bus as the interface to the host computer instead of vme of grape-3 , resulting in the communication speed one order of magnitude faster . ( 3 ) in addition to the pure @xmath0 potential , the g5 chip can calculate forces with arbitrary cutoff functions , so that it can be applied to ewald or p@xmath1 m methods . </S>",
    "<S> ( 4)the pairwise force calculated on grape-5 is about 10 times more accurate than that on grape-3 . on one grape-5 board </S>",
    "<S> , one timestep of 128k - body simulation with direct summation algorithm takes 14 seconds . with barnes - hut tree algorithm ( @xmath2 ) , </S>",
    "<S> one timestep of 10@xmath3-body simulation can be done in 16 seconds . </S>"
  ]
}