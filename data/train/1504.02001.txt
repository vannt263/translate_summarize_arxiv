{
  "article_text": [
    "among programming frameworks intended to be used by third party developers , we see a trend towards including mechanisms restricting access to certain features , or otherwise constraining behaviour of the application  @xcite . in the case of platforms like android  @xcite ,",
    "the aim is usually to protect the user s sensitive data ( _ e.g.,_contact list , physical location ) from undesired use , while still giving applications access to the resources , whether hardware or data , needed to function correctly . for example , an email application legitimately requires access to the internet , but for a calculator application this should raise suspicion . in the case of android ,",
    "these restrictions are enforced via run - time checks against a permissions file called the manifest , which the user accepts at install - time .",
    "other frameworks are also adopting such declarations , in various forms  @xcite .",
    "generally speaking , we identify a class of programming frameworks in widespread use , which we call _ declaration - driven frameworks_. these frameworks are different to traditional static programming frameworks in that they have some form of declarations as input .",
    "examples abound , including the android sdk with its manifest file , or the facebook plugin sdk , both of which require permissions to be granted _ a priori_. the declarations vary greatly in expressiveness , on a spectrum from simple resource permissions , _",
    "e.g.,_access to list of friends and the camera , to very expressive , _",
    "e.g.,_rules for the control flow of the application , a list of components to be implemented , _",
    "etc._an example of the latter is diasuite  @xcite , where the individual components of the application , as well as their subscription relations , are laid out in the declarations .",
    "access to resources is also granted on a component level .",
    "these rich declarations encourage separation of components , and provide relative clarity for the user regarding potential information flow , when compared to a simpler list of permissions .",
    "diagrams with potential information flow can be extracted from the specifications , and presented in graphical format , for example .",
    "we identify a number of shortcomings with the systems mentioned above .",
    "most frequently , the declarations are no more than a list of permissions checked at run - time , leaving the user guessing about the actual behaviour of the application  @xcite .",
    "the fact that these checks are dynamic also leads to the application halting on android if a developer tries to access a forbidden resource .",
    "existing static approaches that exist , on the other hand , generally try to solve different problems than resource access control , for example just checking that all required components are implemented  @xcite .",
    "these shortcomings are addressed by diasuite s approach allowing static checks on resource access , which is based on an external dsl . however , the current implementation of diasuite generates java boilerplate code from the declarations , tailored to the specific application . with this generative approach ,",
    "extending the declaration language would involve modifying the standalone compiler , and in general , generated code tends to be difficult to debug and inconvenient to work with .",
    "on the other hand , the language building platform provided by racket allows simple implementation of an embedded dsl , with all the features of racket potentially available to the application developer .",
    "providing expressive constructs for specification and implementation of an application raises the level of abstraction , and allows us to implement static guarantees of resource access equivalent to diasuite .",
    "furthermore , we need not maintain parser and compiler machinery in parallel with the framework infrastructure .    in this report",
    "we demonstrate the use of racket s language extension system  @xcite allowing us to easily derive tailored programming environments from application declarations .",
    "this decreases effort for the application developer and gives more control to platform owners . to the best of our knowledge",
    "this is the first implementation of an edsl which itself gives rise to a tailored edsl in racket .",
    "the code presented in this report is available from http://people.bordeaux.inria.fr/pwalt .",
    "[ [ outline ] ] outline + + + + + + +    after giving a brief overview of related work in sec .",
    "[ sec : related - work-1 ] , we introduce the platform we have chosen as the basis of our prototype , as well as the example application to be implemented in sec .  [",
    "sec : case - study ] . in sec .",
    "[ sec : implementation ] we show how a developer using our system would write the example application .",
    "[ sec : framework ] goes into detail about how the declarations unfold into a language extension , and finally in sec .",
    "[ sec : discussion ] we discuss strengths and weaknesses of the approach using racket .",
    "our conclusions are presented in sec .",
    "[ sec : conclusion ] .",
    "the work most closely resembling ours is diasuite  @xcite , since it is the inspiration for our approach .",
    "the relative advantages and disadvantages are thoroughly dealt with in sec .",
    "[ sec : case - study ] .",
    "other than that , it seems there is not much literature on the generation of frameworks , although to varying degrees frameworks which depend on declarations are becoming ever more widely adopted  @xcite .",
    "these generally address demonstrated threats to user safety  @xcite .",
    "many approaches have been proposed to address these leaks , such as parallel remote execution on a remote vm where a dynamic taint analysis is running  @xcite .",
    "this naturally incurs its own privacy concerns , as well as dependence on a connection to the vm .",
    "another approach which bears similarity to our aim , is the work by xiao _",
    "et al . _",
    "@xcite , which restrains developers of mobile applications to a limited external dsl based on touchdevelop  @xcite , from which they extract information flow via static analysis .",
    "this information is then presented to the user , to decide if the resource usage seems reasonable .",
    "this is a powerful and promising approach , but we believe that it is preferable to declare information flow paths _ a priori _ and constrain the developer , than having to do a heavy static analysis to extract that same information  especially since it means a developer can not use a general - purpose language they are already familiar with , but must learn a dsl which is used for every aspect of the implementation .    compared to these alternatives , providing a `` tower of languages''-style solution  @xcite seems be a good trade - off between restrictions on the developer and versatility of the implementation .",
    "diasuite , the model for our prototype , is a declaration - driven framework which is dedicated to the _ sense / compute / control _ architectural style described by taylor _ et al._@xcite .",
    "this pattern ideally fits applications that interact with an external environment .",
    "scc applications are typical of domains such as building automation , robotics , avionics and automotive applications , but this model also fits mobile computing .          as depicted in fig .",
    "[ fig : sccpattern ] , this architectural pattern consists of three types of components : ( 1 )  _ entities _ correspond to managed resources , whether hardware or virtual , supplying data ; ( 2 )  _ context components _ process ( filter , aggregate and interpret ) data ; ( 3 )  _ controller components _ use this information to control the environment by triggering actions on entities .",
    "furthermore , all components are reactive .",
    "this decomposition of applications into processing blocks and data flow makes data reachability explicit , and isolation more natural .",
    "it is therefore well - suited to the domain of mobile computing , where users are entrusting their sensitive data to applications of dubious trustworthiness .",
    ".... declaration - > resource | context | controller type         - > bool | int | string | ! \\ldots !",
    "resource - > ( source srcname | action actname ) as type context   - > context ctxname as type ctxtinteract ctxtinteract - > when ( required getdata ?",
    "| provided ( srcname | ctxname )                           getdata ?",
    "publishspec ) getdata        - > get ( srcname | ctxname ) publishspec    - > ( always | maybe ) publish controller     - > controller ctrname contrinteract contrinteract - > when provided ctxname do actname ....      the minimal declaration language associated with diasuite is presented in fig .",
    "[ fig : diacoregrammar ] .",
    "it is adapted from @xcite , keeping only essential constructs .",
    "an application specification is a list of ` declaration`s .",
    "resources ( such as camera , gps , _ etc .",
    "_ ) are defined and implemented by the platform : they are inherent to the application domain .",
    "context and controller declarations include interaction contracts  @xcite , which prescribe how they interact .",
    "a context can be activated by either another component requesting its value ( ` when required ` ) or a publication of a value by another component ( _ i.e.,_`when provided component ` ) . when activated , a context component may be allowed to pull data ( denoted by the optional ` get ` ) .",
    "note that contexts which may be pulled from must have a ` when required ` contract .",
    "finally , a context might be required to publish when triggered ( defined by ` publishspec ` ) .",
    "note that ` when required ` contexts have no publish specification , since they are only activated by pulling , and hence return their values directly to the component which polled them .",
    "when activated , controller components can send orders , using the actuating interfaces of components they have access to ( _ i.e.,_`do actname ` ) , for example printing text to the screen or sending an email .",
    "diasuite compiles the declarations , written in an external dsl , into a set of java abstract classes , one for each declared component , plus an execution environment to be used with the classes which extend them .",
    "the abstract classes contain method headers which are derived from the interaction contracts , and constrain the input and output of the developer s implementation of each component .",
    "additionally , access to resources is passed in as arguments to these methods , so that the only way a developer may use a resource is via the capability passing method from the framework .",
    "this approach allows advantages such as static checks by the java compiler that the application conforms to the declarations . from these declarations it directly follows",
    "which sensitive resources components should have access to , giving the application developer a much more concise api to work with .",
    "for example , if a component only has access to the network , it need not have the api for dealing with the camera in scope .",
    "this is in contrast to android , where all system api calls are always available , increasing the amount of information the developer must keep in mind .",
    "the disadvantage is that this is an external dsl , and thus requires a separate compiler to be maintained .",
    "it also implies less versatility , having to re - invent the wheel , and a symbolic barrier , as argued by fowler  @xcite .",
    "as our running example , we use a prototype mobile application .",
    "we pretend that it is distributed for free , supported by advertisements .",
    "it allows the user to capture pictures and then view them with a colourful filter ( see fig .",
    "[ fig : schematic - application ] ) .",
    "an advertisement will be downloaded from the internet , but we would like to prevent the developer from being able to leak the picture ( which is private ) to the outside world , whether intentionally or by using a malicious advertisement provider .",
    "it has been shown that this is in fact a threat : frequently , included third party advertisement libraries try to exfiltrate any private data to which they are able to get access  @xcite .    from the specification it follows that it should be impossible for the picture to leak to the web , since the bitmap processing component is separate from the advertisement component .",
    "inspired by the diasuite approach , where a framework is generated from the specifications , the first step in our implementation is to provide an embedded dsl for writing specifications .",
    "it should include constructs for defining contexts and controllers , according to the grammar in sec .",
    "[ sec : case - study ] . as illustrated in fig .",
    "[ fig : racket - global ] , when the specifications are evaluated , they in turn form a language extension which should be used to implement the application .",
    "the programming environment that is thus created provides the developer with tailored constructs for the application that is to be built , including an api precisely matched to what each component may do . in our prototype , we consider the advert developer and application developer as potentially the same , since we expect the advertisement library to provided in the form of a snippet of code that will be included along with the rest of the implementation code .",
    "this way , the advertisement code does need to be specially analysed , but is subject to the same constraints as any other code provided by the developer .",
    "that is , it can only access entities specified in the declarations .",
    "the specifications as rendered in racket , for our example application , are shown in fig .",
    "[ fig : racket - spec ] .",
    "the syntax closely matches the diasuite declaration language previously introduced , and reflects the graphical representation of the application in fig .",
    "[ fig : schematic - application ] .    .... ; ; ; specifications file , webcamspec.rkt # lang s - exp \" diaspec.rkt \" ( define - context makead string [ when - required get ip ] ) ( define - context processpicture picture    [ when - provided camera always_publish ] ) ( define - context composedisplay picture      !",
    "\\label{code : compose - display - spec } !    [ when - provided processpicture get makead       maybe_publish ] ) ( define - controller display    [ when - provided composedisplay do screen ] ) ....      in this section , we explain the semantics of each term , from the point of view of the application developer .",
    "the keywords ` define - context ` and ` define - controller ` are available for specifying the application , and upon evaluation , will result in a macro ` implement ` , for binding the implementations of components to their identifiers . for the developer",
    "this is convenient , since they only need to provide implementation terms while the framework takes care of inter - component communication as specified in the declarations . from the point of view of the framework , it provides more control over the implementation : before execution static checks can be done to determine if the terms provided by the application developer conform to the specifications .    declaring a component @xmath0 adds a case to the ` implement ` macro .",
    "now , a developer can use the form ` ( implement c f ) ` to bind a lambda function @xmath1 as the implementation of @xmath0 .",
    "however , not just any @xmath1 may be provided , as the arguments to ` implement ` are subject to a racket function contract  @xcite .",
    "unfortunately there is a name conflict between interaction contracts for components ( as in diasuite ) and function contracts in racket , which are not the same thing .",
    "function contracts in racket are flexible annotations on definitions and module exports , which perform arbitrary tests at run - time on the input and output of functions . for example , a function can be annotated with a contract ensuring it maps integers to integers .",
    "if the function receives or produces a non - integer , the contract will trigger an error .",
    "the contract on @xmath1 is derived from the interaction contracts of fig .",
    "[ fig : racket - spec ] as follows .",
    "[ [ activation - conditions ] ] activation conditions + + + + + + + + + + + + + + + + + + + + +    these define the first argument to the function @xmath1 .",
    "* ` when - provided x`*. first argument gets type of @xmath2 . for ` composedisplay ` , the contract starts with ` ( - > bitmap% ?  ) ` , since it is activated by ` processpicture ` publishing a bitmap image .    * ` when - required`*. no argument added  the context was activated by pull .",
    "[ [ data - sources - and - actions ] ] data sources and actions + + + + + + + + + + + + + + + + + + + + + + + +    these determine the ( optional ) next argument to the developer s function .",
    "this is a closure providing proxied ( that is , surrounded by a run - time guard ) access to the resource .",
    "this makes it convenient for a developer to query a resource , and allows the framework to enforce permissions .",
    "actions for controllers are provided using the same mechanism .",
    "* ` get x`*. the contract of the closure becomes ` ( - > t ? ) ` where @xmath3 is the output type of @xmath2 .",
    "note that there is no parameter , just a return value .",
    "this means that a component requesting a value from another can not exfiltrate data this way .",
    "the full contract so far is therefore ` ( - >   ( - > t ? )  ) ` .",
    "* ` do x`*. the contract of the closure becomes ` ( - > t ? void ? ) ` where @xmath3 is the input type of @xmath2 .",
    "the full contract is therefore ` ( - >   ( - > t ? void ? ) void ? ) ` .",
    "the final ` void ? ` reflects that controllers do not return values .",
    "[ [ publication - requirements ] ] publication requirements + + + + + + + + + + + + + + + + + + + + + + + +    these determine the last arguments to the function contract of a context , corresponding to the output type of the context .",
    "publishing is handled using continuations , to give us flexibility in the number of `` return '' statements provided .    * ` always_publish`*. one continuation function corresponding to publication : the final contract becomes ` ( - >   ( - > t ? void ? )",
    "none / c ) ` , with @xmath3 the expected return type .    * ` maybe_publish`*. two continuations to @xmath1 , for publish and no - publish .",
    "the first has the contract ` ( - > t ? void ? ) ` with @xmath3 the output type .",
    "the second continuation simply returns control to the framework .",
    "if the developer chooses not to publish , they use the second , no - publish continuation .",
    "the contract is therefore ` ( - >   ( - > t ? void ? ) ( - > void ? )",
    "none / c ) ` .",
    "the ` none / c ` contract accepts no values : this causes a run - time error if the developer does not use one of the provided continuations .",
    ".... ; ; ; implementation file , webcamimpl.rkt # lang s - exp \" webcamspec.rkt \" ( implement composedisplay    ( lambda ( pic getadtxt publish nopublish )      ( let * ( [ canvas   ( make - bitmap pic .. ) ]             [ adtxt    ( getadtxt ) ] )        ( cond [ ( string= ? \" \" adtxt ) ( nopublish ) ] ) ! \\label{code : nopub } !        ; ... do magic , overlay adtxt on pic        ( publish canvas ) ) ) ) !",
    "\\label{code : publish - composite } ! !",
    "\\ldots ! ; the remaining implement - terms ....    in fig .",
    "[ fig : racket - impl ] , we show a developer s possible implementation of the context ` composedisplay ` , which composes the modified image with the advertisement text .",
    "essentially , a developer uses ` implement ` to bind their implementation to the identifier introduced in the specifications , _ c.f._fig .",
    "[ fig : racket - spec ] .",
    "their implementation should be a lambda term which obeys the contract resulting from the specification .",
    "for example , the ` composedisplay ` context has the contract ` ( - > bitmap% ? ( - > string ? ) ( - > bitmap% ?",
    "void ? ) ( - > void ? ) none / c ) ` .",
    "this is because it is activated by ` processpicture ` publishing an image , it has ` get`-access to the ` makead ` component which returns a string , and it may optionally publish an image on account of its ` maybe_publish ` specification .",
    "the last two arguments correspond to publishing ` ( - > bitmap% ?",
    "void ? ) ` and not publishing ` ( - > void ? ) ` continuations .",
    "the lambda function provided by the developer in fig .",
    "[ fig : racket - impl ] conforms to this contract .",
    "we see that if the advertisement component returns an empty string ( line  [ code : nopub ] ) the developer decides not to publish , but otherwise the string is overlaid on the picture and the developer publishes the composite image ( line  [ code : publish - composite ] ) .    to prevent implementations of different components communicating outside of the condoned pathways ,",
    "the ` implement ` macro wraps each @xmath1 in its own submodule . as illustrated in fig .",
    "[ fig : racket - submodules ] , due to lexical scoping these do not have access to surrounding terms , but merely export the implementation for use in the top - level module .",
    "the result of this wrapping is shown in fig .",
    "[ fig : racket - impl - extended ] .",
    "the code in grey is precisely the term provided in fig .",
    "[ fig : racket - impl ] , but it is now isolated from the implementations of the other components , preventing the developer from accessing them , which would constitute a leak .    .... ( module webcamimpl \" webcamspec.rkt \"    ( module composedisplay - module racket / gui !",
    "\\label{code : lang - spec } !",
    "( define / contract composedisplay - impl        ( - > bitmap% ?",
    "( - > string ? ) ( - > bitmap% ?",
    "void ? )   !",
    "\\label{code : contract } !",
    "( - > void ? )",
    "none / c)<<@ < <        ( lambda ( pic getadtxt publish nopublish )          ( let * ( [ canvas   ( make - bitmap pic .. ) ]                 [ adtxt    ( getadtxt ) ] )   !",
    "\\label{code : useproxy } !            ( cond [ ( string= ? \" \" adtxt ) ( nopublish ) ] )            ; .. do magic , overlay adtxt on pic            ( publish canvas)))>>@ > > )      ( provide composedisplay - impl ) )    ! \\ldots ! ) ....    note that alongside this snippet , the rest of the implementations of the declared components must be provided in one module .",
    "this module must be implemented using the new ` webcamspec.rkt ` language  the one arising from the specifications we have written .",
    "the implementation module is checked before run - time to contain exactly one ` ( implement c  ) ` term for each declared @xmath0 .",
    "however , we focus on this single context implementation to illustrate what transformations are done on the developer s code .",
    "when the developer has provided implementations for each of the declared components , they can use the ` ( run ) ` convenience function which is also exported by the module resulting from the specifications . in the next section ,",
    "we illustrate how these macros function .",
    "now that we have seen the user interface ( _ i.e.,_that which the application developer deals with ) for our framework , we elucidate how the framework is implemented .",
    "this is broken down into a number of main parts : ( 1 )  the operation of the ` define - context ` and ` define - controller ` macros , ( 2 )  the expansion of the ` implement ` macro , and ( 3 )  how the run - time support libraries tie the implementations together to provide a coherent system . these mechanisms",
    "are explained globally here , though certain implementation details are elided .",
    "notably , getting all the needed identifiers we had introduced to be available in the right transformer phases and module scopes was complicated .",
    "we invite the reader to experiment with the prototype code ",
    "the functionality for ( 1 ) and ( 2 ) is in the ` diaspec.rkt ` module , the run - time library can be found in the ` fwexec.rkt ` module .      ....",
    "( module webcamspec \" diaspec.rkt \" !",
    "\\label{code : module - line } !",
    "( define composedisplay !",
    "\\label{code : compdisp - binding } !     ( context ' composedisplay       ( interactioncontract processpicture makead         ' maybepublish ) ' pic ) )   ( provide composedisplay )   ( module+ contracts !",
    "\\label{code : contract - submodule } !     ( define composedisplay - contract         ( - > bitmap% ?",
    "( - > string ? )   !",
    "\\label{code : contract - in - mod } !",
    "( - > bitmap% ?",
    "void ? ) ( - > void ? ) none / c ) )     ( provide composedisplay - contract ) )   ( define - struct / contract composedisplay - struct ! \\label{code : special - struct } !     ( [ spec    ( or / c context ?",
    "controller ? ) ]      [ implem ( - > ! $ \\ldots$ ! ) ] ) ) ; contract from line!~\\textit{\\color{olivegreen}{\\ref{code : contract - in - mod } } } !   ( provide composedisplay - struct            implement - composedisplay )   ( define - syntax ( implement - composedisplay stx ) !",
    "\\label{code : implement - macro } !    ( syntax - case stx ( implement - composedisplay )     [ ( _ f ) !",
    "\\label{code : bind - f } !       # ' ( begin         ( module composedisplay - submodule racket / gui           ( require ( submod \" webcamspec.rkt \" contracts ) ) ! \\label{code : import - contracts } !           ( provide composedisplay - impl )           ( define / contract composedisplay - impl                            composedisplay - contract f ) )         ( require ( submod \" . \" composedisplay - submodule ) ) !",
    "\\label{code : req - submodule } !         ( set - impl ' composedisplay ; add to hashmap !",
    "\\label{code : add - hashmap } !",
    "( composedisplay - struct composedisplay              composedisplay - impl ) ) ) ] ) )       ( provide run ( rename - out                  ( module - begin - inner # % module - begin ) ) )   ( define - syntax ( module - begin - inner stx2 )      ! $ \\ldots$ ! ) ) ; ; omitted ....    previously we saw that the first step for a developer is to declare the components of their application using the ` define - context ` and ` define - controller ` keywords .",
    "the specification should be provided in a file which starts with a ` # lang s - exp diaspec.rkt ` stanza , which causes the entire syntax tree of the specification to be passed to the function exported from ` diaspec.rkt ` as @xmath4",
    ". this function does pattern matching on the specifications , and passes all occurrences of ` define- ` keywords to two handlers : ( 1 )  to compute and store the associated contracts , and ( 2 )  to instantiate a struct which will later store the implementation .",
    "the introduced identifiers are also stored as a list in the syntax transformer environment , _",
    "c.f._the `` persistent effects '' system presented in  @xcite .",
    "this compile - time storage will later be used to check implementation modules : have all components been implemented , and are all the identifiers used in the implementation declared in the specification ?    to illustrate , fig .",
    "[ fig : expansion - of - specs ] shows the expansion of the ` composedisplay ` declaration , from line  [ code : compose - display - spec ] of fig .",
    "[ fig : racket - spec ] .",
    "simplifications have been made , and module imports _ etc._have been omitted for brevity .",
    "some elements which are not specific to this declaration term have been elided , namely a helper macro which transforms ` ( implement x .. ) ` terms into ` ( implement - x .. ) ` , to correspond with the generated macro in line  [ code : implement - macro ] , and a function which checks that all declared components have a corresponding ` implement ` term .",
    "finally , we also omit the generated syntax for @xmath5 from the specifications , since it is not particularly instructive .",
    "note that it is this definition which allows the implementation module to use the specification module as its language , with the @xmath6 ` s - exp webcamspec.rkt ` directive .",
    "line  [ code : module - line ] marks the start of the implementation module , called ` webcamspec ` .",
    "it still references @xmath7 , which is the language the specification was written in , _",
    "c.f._fig .",
    "[ fig : racket - spec ] .",
    "this leaves us with the code resulting from the ` composedisplay ` context . in line  [ code",
    ": compdisp - binding ] , we see that a binding is introduced , using the name the developer chose for the component .",
    "its value is a representation of the declaration , and is used to derive the contract . in line  [ code : contract - submodule ] , a submodule is appended with the racket contract the implementation is expected to adhere to .",
    "the @xmath8 keyword adds terms to a named submodule , creating the submodule if necessary  @xcite .",
    "line  [ code : special - struct ] defines a tailored struct : it will hold the implementation of ` composedisplay ` , in the field tagged with the corresponding contract .",
    "it becomes more interesting in line  [ code : implement - macro ] , where we see that the ` implement ` keyword wraps the developer s implementation in an independent submodule , as explained previously . this submodule will not have access to the surrounding scope , hence the need for the ` contracts ` submodule , which we import in line  [ code : import - contracts ] .",
    "as an aside , the @xmath9 form is shorthand for @xmath10 , which is similar to @xmath11 , but produces a syntax object decorated with lexical information and source - location information that was attached to its argument at expansion time .",
    "crucially , it also substitutes ` f ` , the pattern variable bound by @xmath12 in line  [ code : bind - f ] , with the pattern variable s match result , in this case the developer s implementation term .",
    "next , in line  [ code : req - submodule ] , we have left the scope of the submodule .",
    "we @xmath13 the submodule , bringing ` composedisplay - impl ` into scope , which we add to a hash map ( line  [ code : add - hashmap ] ) .",
    "this hash map associates names of components to their implementations .",
    "note how we are using the previously - defined struct , which forces the implementation term to adhere to its contract .",
    "as a side - effect , ` run ` is only available to the developer if they manage to evaluate the implementation module without compile errors , which implies that only valid specifications and implementations allow the developer to execute the framework .",
    "since the implementation of the framework run - time library is mundane , we do not discuss it here . to run this code ,",
    "` racket - mode ` or drracket  @xcite can be used . simply load the ` webcamimpl.rkt ` file , and when it is loaded , evaluate ` ( run ) ` in the repl .",
    "in the end , the application developer is presented with a reasonably polished and coherent system for implementing an application in two stages , which allows the platform to give the user more insight into what mischief an application could potentially get up to .",
    "this assumes that the specifications are distributed with the application , and presented to the user ( optionally formatted like fig .",
    "[ fig : schematic - application ] ) , and that the software is compiled locally , or on a server that the user trusts .",
    "this would ensure that the implementation does indeed conform to the specifications .",
    "we observe that going beyond racket the functional programming language , and using it as a language - building platform , is where it really shines .",
    "we can mix , match and create languages as best fits the niche , then glue modules together via the common run - time library provided by racket .",
    "this allows great flexibility and control , since with racket s @xmath6 mechanism , we can precisely dictate the syntax and semantics of our new languages .",
    "these two aspects therefore give racket a lot of potential in the emerging domain of declaration - driven frameworks .",
    "unfortunately , there are issues that would need to be resolved before the proposed approach would be feasible in the real world .",
    "one of the trickiest parts of ensuring no communication between components is that consequently we can not allow a developer to use any external modules in their code .",
    "this is because if a developer could ` require ` any module , they could in effect execute arbitrary code .",
    "it could also be used as a communication channel , since modules have mutable state .",
    "therefore , in the prototype , we chose not to allow any importing of modules , but for a realistic application this would probably not be acceptable  we could imagine needing to use a library for parsing json , or processing images , or any number of benign tasks . perhaps this would be a decision for the platform provider to make : is a particular library `` safe '' and could it be white - listed ?",
    "another potential leak could be the ` eval ` form . using it",
    ", a developer could easily obfuscate any behaviour desired .",
    "in fact , arbitrary imports and calls would be possible that way .",
    "we therefore inspect a developer s implementation for such things as the use of ` eval ` , and reject them syntactically , but since the binding might be hidden or renamed , this approach is not necessarily robust .",
    "this highlights a need in racket : allowing components or functions to be pure would solve this vulnerability .",
    "perhaps typed racket  @xcite will offer a solution in the future  purity analysis is on the project to - do list .",
    "it was also rather finicky to implement all the macros as described above .",
    "although conceptually simple , it turns out to be pretty difficult in practice to get all the identifiers to be available in the right syntax transformer phases .",
    "the macro debugger in drracket is quite powerful , but unfortunately still leaves a lot to be desired .",
    "for example , we failed to get it to show the completely expanded implementation module as it is presented in fig .",
    "[ fig : expansion - of - specs ]  that code is largely worked out by hand .",
    "finer control over the macro unfolding would therefore be beneficial .",
    "the end result is not at all pessimistic , in spite of these shortcomings and difficulties .",
    "the prototype does demonstrate the power of a language such as racket , which gives a programmer the capability to easily modify syntax and provide custom interpretations .",
    "this prototype also demonstrates that it is possible to cleanly separate concerns and enforce a certain structure on the final implementation .",
    "there are a number of clear avenues for improving this work .",
    "firstly , we note that the chosen platform and model are merely examples , it should be easy to build similar `` active '' specification dsls for other domains .",
    "this modular approach is also very flexible : we could choose to use any racket extension as the implementation language for the developer to use , whether it be frtime or typed racket or any other of the many libraries .",
    "we could even decide to provide different languages for different modules  the changes would be minor .",
    "if for example typed racket were to support purity analysis in the future , this would be a very attractive option , allowing us to be confident that no unwanted communication between components is possible .",
    "as stated , though , before this approach could be introduced into the wild , a safe module importing mechanism should be devised .",
    "another aspect to be dealt with is a very practical one : how to integrate this approach into an application store , where users could download applications for use on their local platforms .",
    "as it stands , the developer would have to submit their specification and implementation modules as source code , and the application store would need to compile them together , to ensure that the contracts and modules have not been tampered with . the application store  which the user would have to trust ",
    "could then distribute compiled versions of the application which would be compatible with the run - time library locally available on users devices . clearly , this is not be desirable in all situations : most commercial application developers submit compiled versions of their software , which in our case could allow them to _",
    "e.g.,_modify the contracts , rendering the applications unsafe .",
    "in conclusion , we have tried to address the problem of resource access control to protect privacy of end users sensitive data .",
    "taking inspiration from the diasuite approach , we demonstrate an embedded dsl for specifying applications , which itself unfolds to a programming environment , placing restrictions on the application developer . while the prototype is not a perfect solution to the problem , it does demonstrate a novel approach to resource control which is very versatile , by nature of being entirely composed of embedded dsls .",
    "it also offers users more insight into what sensitive resources are used for , compared to currently widespread mobile platforms .    in the future",
    ", it would be interesting to explore the use of other racket libraries , particularly typed racket , in the hope that we can achieve more reliable restrictions than currently possible .",
    "this might be an avenue to pursue in response to the vulnerability that the current prototype has , arising from evaluation of dynamically constructed expressions or allowing module importing .",
    "special thanks go to ludovic courts , camille maano , andreas enge , and hamish ivey - law , who proofread early drafts of this work and provided invaluable comments .",
    "the constructive criticism provided by the anonymous reviewers is equally appreciated .",
    "d.  cassou , e.  balland , c.  consel , and j.  lawall .",
    "leveraging software architectures to guide and verify the development of sense / compute / control applications . in _ proceedings of the 33rd international conference on software engineering _ , icse 11 , pages 431440 , new york , ny , usa , 2011 .",
    "acm .",
    "m.  flatt .",
    "submodules in racket : you want it when , again ? in _ proceedings of the 12th international conference on generative programming : concepts & experiences _ , gpce 13 , pages 1322 , new york , ny , usa , 2013 .",
    "acm .",
    "x.  xiao , n.  tillmann , m.  fhndrich , j.  de  halleux , and m.  moskal .",
    "user - aware privacy control via extended static information - flow analysis . in m.",
    "goedicke , t.  menzies , and m.  saeki , editors , _ ase _ , pages 8089 .",
    "acm , 2012 ."
  ],
  "abstract_text": [
    "<S> writing a platform for reactive applications which enforces operational constraints is difficult , and has been approached in various ways . in this experience report , we detail an approach using an embedded dsl which can be used to specify the structure and permissions of a program in a given application domain . </S>",
    "<S> once the developer has specified which components an application will consist of , and which permissions each one needs , the specification itself evaluates to a new , tailored , language . </S>",
    "<S> the final implementation of the application is then written in this specialised environment where precisely the api calls associated with the permissions which have been granted , are made available .    </S>",
    "<S> our prototype platform targets the domain of mobile computing , and is implemented using racket . </S>",
    "<S> it demonstrates resource access control ( _ e.g.,_camera , address book , _ etc . _ ) and tries to prevent leaking of private data . </S>",
    "<S> racket is shown to be an extremely effective platform for designing new programming languages and their run - time libraries . </S>",
    "<S> we demonstrate that this approach allows reuse of an inter - component communication layer , is convenient for the application developer because it provides high - level building blocks to structure the application , and provides increased control to the platform owner , preventing certain classes of errors by the developer .    </S>",
    "<S> [ domain - specific architectures , languages , patterns ] </S>"
  ]
}