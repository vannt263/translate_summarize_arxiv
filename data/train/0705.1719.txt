{
  "article_text": [
    "to analyze experimental data at high energy colliders , one needs precise theoretical predictions to compare measurements against . for such comparisons , monte",
    "carlo event generators that simulate fully exclusive events are indispensable tools  @xcite .",
    "while it is possible to calculate simple observable distributions analytically , in most cases a direct comparison of such calculations with the data is very difficult , because the experimental analyses have to impose a variety of cuts , and detector efficiencies are , in general , not uniform over the measured distribution .",
    "event generators typically simulate events in three separate steps : first , a matrix element generator generates an event with few final - state partons , based on full matrix element calculations , which include all interference effects of the quantum field theory .",
    "second , a parton shower adds additional partons using classical splitting probabilities .",
    "finally , all partons are turned into hadrons according to some qcd model of hadronization .    in this paper",
    "we are concerned with the second step in an event generator , the parton shower . in practice",
    "it is impossible to generate all possible partonic final states using matrix element calculations , because the number of partons in the final state quickly becomes too large .",
    "in contrast , parton showers are based on splitting functions which describe the classical probability that a given mother parton splits into two daughter partons .",
    "thus , with a certain probability described by the splitting functions , the parton shower turns a final state containing @xmath0 partons into one with @xmath1 partons .",
    "the advantage of using splitting functions over full matrix elements is that this procedure can be iterated to take a simple final state with a small number of partons and produce many additional partons using a markov chain .",
    "the splitting functions describe the splitting in the collinear limit , where the mother and two daughters have large energy and small invariant mass .",
    "the parton shower also resums the leading sudakov double logarithms .",
    "recently it was shown  @xcite that the parton shower is formally reproduced as the leading order in an effective field theory expansion using soft - collinear effective theory  @xcite , which provides , in principle , a framework for systematic improvements .",
    "for example , one could attempt to sum large logarithms beyond the leading order or study power corrections . however",
    ", almost all theoretical improvements will necessarily go beyond the level of classical splitting probabilities .",
    "it is thus very unlikely that they can be incorporated into a markov chain algorithm .",
    "a typical example are matrix element calculations , for which it is hard to directly distribute events according to , and which must be explicitly matched with parton showers to avoid double counting  @xcite .",
    "other important aspects are theoretical uncertainties in the generated distribution  @xcite .",
    "they arise from input parameters , like @xmath2 and quark masses , as well as from higher - order power and perturbative corrections . having",
    "a reliable estimate of these uncertainties becomes crucial at the lhc in searches for new physics signals where the standard model background can only be estimated using monte carlo generators .",
    "related to these issues , important practical considerations must be taken into account as well .",
    "the three steps described above produce a theoretical distribution of events .",
    "however , the obtained events still have to be run through a detector simulation in order to compare them directly with experimental data .",
    "it is this additional step which consumes by far the most computing time in practice . generating a typical event at the lhc before the detector simulation takes only a fraction of a second per cpu , whereas propagating an event through the detector simulation takes several minutes .",
    "in addition , it takes of the order of a megabyte to store a fully simulated event .",
    "the available amount of processing power and disk space thus leads to considerable practical limitations .",
    "for example , it is extremely impractical to resimulate the full event set each time the theory makes progress , or to simulate separate event sets using different parameter values in order to estimate theoretical uncertainties .",
    "all of these problems can be solved if the exact distribution of the generated events is known .",
    "if this is the case , one can reweight the generated events according to a different theoretical distribution , even after the time - consuming detector simulation .",
    "this makes it possible to reuse existing simulated events , and thus allows one with small effort to study theoretical uncertainties and to include theoretical improvements whenever they become available .    for this reweighting approach to be possible",
    ", one has to have control of the precise functional form of the probability distribution underlying the event generator . for the matrix element generator",
    ", this is always the case by construction .",
    "however , it also requires one to have analytic control of the parton shower , which is generally not the case for the currently used parton showers .",
    "the reason is that a realistic parton shower needs to enforce four - momentum conservation at each vertex . while this is strictly speaking a subleading effect , it typically generates cross correlations between different splittings .",
    "hence , although the basic probability distribution governing a single splitting can be obtained analytically , the analytic control over the full distribution is lost in the standard parton shower algorithms because of the way four - momentum conservation is enforced .",
    "the main purpose of this paper is to show how the analytic control over the full probability distribution can be regained , and that in this way the reweighting approach becomes feasible . in the next section we review the basic parton shower and set up our notation . in sec .",
    "[ sec : standardps ] we take the parton shower of ` sherpa `  @xcite , which has the same algorithm as ` pythia ` s virtuality - ordered parton shower  @xcite , as an example to investigate a real parton shower algorithm in detail .",
    "we then show in sec .",
    "[ sec : analyticps ] how it can be modified to satisfy four - momentum conservation at each vertex , while at the same time retaining the analytic control of the probability distribution . in sec .",
    "[ sec : reweighting ] we discuss how these results can be applied in the different contexts described above , and sec .",
    "[ sec : conclusions ] contains our conclusions .",
    "the purpose of this section is to review some of the basics of parton showers  @xcite needed in our discussion and , in the process , introduce our notation . to be specific",
    ", we consider a final - state parton shower with the invariant mass as evolution variable . for simplicity , we assume all particles to be massless , although particle masses can be included in a straightforward way .",
    "the branching of a mother parton with some energy @xmath3 into two daughter partons is determined by two independent kinematic variables , which are chosen to be the invariant mass of the mother @xmath4 ( or equivalently the total invariant mass of the daughters ) and the energy splitting @xmath5 , which determines how the mother s energy is distributed between the daughters . before the mother is branched , it is still on shell with @xmath6 . during the branching step the mother",
    "is put off shell and given an invariant mass @xmath7 . at the same time the energy splitting @xmath5 is obtained .    the single branch probability @xmath8 , defined as the differential probability for a branching to occur with certain values @xmath4 and @xmath5 , is given by @xmath9 where @xmath10 is the usual altarelli - parisi splitting function  @xcite and @xmath11 is the well - known sudakov factor  @xcite , which resums the leading sudakov double logarithms . the exact form of @xmath12 and @xmath13 in eq .   depends on the details of the parton shower implementation and will be discussed later .    the algorithm to determine the value of @xmath4 at which the branching occurs is thought of as evolving @xmath4 from some high start value @xmath12 down to some lower value .",
    "the sudakov factor @xmath11 then corresponds to the no - branching probability , i.e. , the probability that no branching between @xmath12 and @xmath4 occurs . to see this ,",
    "one integrates @xmath14 , @xmath15 the left - hand side is the probability for the mother to branch somewhere between @xmath16 and @xmath12 . since the total probability is unity , @xmath17 is the probability that the mother does not branch between @xmath16 and @xmath12 .    when the mother is branched , the daughters are still on shell with zero invariant mass . in the next step the daughters themselves are branched and given non zero invariant masses , and after that , their daughters , and so on , resulting in a treelike structure as shown in fig .",
    "[ fig : tree ] .",
    "as the invariant mass of each daughter must be less than that of its mother , @xmath4 is always decreasing for consecutive branchings .",
    "when a branching with @xmath18 is obtained , the corresponding mother is left unbranched .",
    "the parton shower terminates once no more branchings with @xmath19 are found . the value of the cutoff @xmath20 is typically chosen to be a low scale of order a few @xmath21 .",
    "each event produced by the parton shower consists of a tree of @xmath0 branches characterized by the set of variables @xmath22 , which can later be turned into momentum four - vectors .",
    "as discussed in the introduction , we would like to be able to explicitly compute the probability for a given event with certain values @xmath23 to be generated .",
    "ideally , this probability is simply given as the product of individual single branch probabilities , schematically , @xmath24 if the parton shower satisfies eq .",
    ", the problem of finding a closed form for @xmath25 reduces to working out the exact form of the single branch probability @xmath8 .",
    "it is important to point out that , even though the parton shower itself is only valid in the limit where the invariant mass of each daughter is much smaller than that of its mother , we still need to know the exact form of @xmath25 for all values of @xmath26 . in other words , it is not sufficient for our purposes to only know @xmath25 expanded in the limit where the parton shower is valid .",
    ".   would be trivially satisfied if all branchings were independent of each other .",
    "in general , this is not the case for two reasons .",
    "first , the branching of each daughter depends on the initial conditions set by its mother , which implies that @xmath25 depends on the specific structure of the tree .",
    "however , as long as each branching only depends on previous branchings , the total probability can still be written as a product of single branch probabilities as in eq .  .",
    "the second reason eq .   can be violated is more involved and related to the basic issue of the parton shower we wish to address . at the time",
    "each branch is generated , the corresponding daughters have not yet been branched and are still on shell . however , the phase - space limits for the branch following from four - momentum conservation depend on the daughters final invariant masses .",
    "hence , only after both daughters have been branched themselves , one can come back and enforce the correct phase - space limits on the branch .",
    "usually this step involves some kinematic reshuffling , which ends up introducing a complicated correlation between the daughters branches and thereby violating eq .  .",
    "we begin by working out the phase space for a single @xmath27 branch .",
    "we denote all kinematic quantities ( see fig .  [",
    "fig : tree ] ) related to the mother particle with a subscript @xmath28 and those of the left and right daughters with a subscript @xmath29 and @xmath30 , respectively .",
    "we regard the mother s invariant mass @xmath31 and energy @xmath32 as fixed and take the daughters to have invariant masses @xmath33 and @xmath34 . the energy splitting @xmath35 is regarded as a property of the mother ( or rather of the whole branch ) linking the daughters energies to @xmath32 , @xmath36 thus",
    ", energy conservation is automatically satisfied , and @xmath37 and @xmath38 are not free variables .    in the rest frame of the mother ,",
    "the value of @xmath35 is fixed in terms of @xmath33 and @xmath34 , @xmath39 using eqs .   and",
    ", the magnitude of the daughters three - momenta is @xmath40 with the usual phase - space factor @xmath41 to enforce timelike daughters one needs @xmath42 which , using eqs .   and",
    ", is equivalent to the usual phase - space limit @xmath43 the kinematics in a general frame is obtained by boosting the above results .",
    "the magnitude of the boost @xmath44 is fixed by @xmath32 and @xmath31 , while its direction can be described by the angle @xmath45 between the boost axis and the daughters three - momenta in the mother s rest frame .",
    "since @xmath46 encodes the information how the energies of the daughters are boosted relative to the mother s rest frame , it effectively determines @xmath35 , @xmath47 , \\end{aligned}\\ ] ] and vice versa , @xmath48 the phase - space limits in a general frame are a simple generalization of the limits in the rest frame , @xmath49 using eq .  , the limit on @xmath50 is equivalent to the @xmath35 limit @xmath51 commonly found in parton shower algorithms .    finally , we look at a double branch @xmath52 where each daughter further branches into two on - shell particles . in this case , the daughters energy splittings @xmath53 , or equivalently @xmath54 , are additional free variables .",
    "the complete phase space now is just an extension of eq .",
    ", @xmath55 the limits on @xmath53 equivalent to @xmath56 are analogous to eq .   with the daughters invariant masses set to zero .",
    "hence , the complete phase space in terms of @xmath57 and @xmath58 reads @xmath59 with @xmath60 and @xmath61 as in eq .  .",
    ".   explicitly shows the problem mentioned at the end of the previous section .",
    "initially , @xmath35 is generated assuming @xmath62 , but since the limit on @xmath35 depends on @xmath33 and @xmath34 , the generated value of @xmath35 has to be adjusted after @xmath63 and @xmath64 have been determined .",
    "changing @xmath35 , however , changes @xmath61 and @xmath65 .",
    "this in turn changes the limits on @xmath66 and @xmath67 , which can render their values invalid .",
    "in addition , @xmath33 and @xmath34 are determined independently from one another , so the constraint @xmath68 can be violated as well .",
    "to study a concrete example of a standard parton shower , we consider the final - state parton shower of ` sherpa `  @xcite , which employs the same algorithm as the ` pythia `  virtuality - ordered parton shower  @xcite .",
    "other algorithms which employ different ordering variables can be found in refs .",
    "@xcite .          to be able to enforce four - momentum conservation",
    ", the parton shower algorithm always branches two sisters in pairs . that is , in each iteration it takes an existing @xmath27 branch , consisting of a mother and two unbranched daughters , and converts it into a @xmath69 double branch by branching both daughters .",
    "to do so , the algorithm proceeds in three steps as depicted in fig .",
    "[ fig : alg1 ] :    1 .",
    "branch both daughters , each according to @xmath8 .",
    "2 .   shuffle @xmath70 .",
    "check kinematics in terms of new @xmath71 : 1 .",
    "if successful , accept daughter branches .",
    "if failed , evolve daughter with larger @xmath4 further down and return to step 2 .    in step 1 , each daughter is branched separately , with values for @xmath72 and @xmath73 distributed according to the single branch probability @xmath8 . in step 2 ,",
    "@xmath35 is changed to a new value @xmath74 , which is derived from its old value and takes into account the now nonzero values of @xmath57 . in the mother s",
    "restframe this shuffling simply sets @xmath35 to the correct value @xmath75 in eq .  .",
    "in a general frame the form of @xmath74 is not dictated by kinematics anymore , but is usually chosen to satisfy eq .  .",
    "in step 3 , the kinematics are checked , using the new value @xmath71 .",
    "if they are satisfied , the daughter branches are accepted . otherwise , the algorithm takes the daughter with the larger @xmath4 , evolves it further down , and goes back to step 2 .    in the remainder of this section",
    "we discuss the details of this algorithm .",
    "we first work out the precise form of the single branch probability @xmath8 employed by the algorithm .",
    "we then move to discuss in detail steps 2 and 3 , which implement four - momentum conservation , but as one can already see from fig .",
    "[ fig : alg1 ] and the above discussion , introduce a complicated correlation between @xmath33 and @xmath34 , which clearly violates eq .  .",
    "in this section we are only interested in a single @xmath76 branching of a mother into two daughters .",
    "this means that each of the daughters in the algorithm described above acts as the mother now , and similarly , the mother and the other daughter in the algorithm now act as grandmother and sister , respectively .    in the first step ,",
    "the algorithm independently generates two sets of values @xmath63 and @xmath64 according to the single branch probability @xmath8 , introduced in eq .  .",
    "the precise form of @xmath8 that is actually used in the algorithm can be written as @xmath77 \\,,\\end{aligned}\\ ] ] with the sudakov factor @xmath78 in eq .",
    "we explicitly included all kinematic @xmath79 functions restricting the allowed ranges of @xmath4 and @xmath5 .",
    "all information on the precise form of @xmath14 is encoded in the integration limits @xmath12 and @xmath80 , and the splitting function @xmath81 .",
    "note that @xmath8 is not normalized to unity , because it describes the differential distribution in @xmath82 for an entire @xmath27 branch .",
    "it does not include the probability that the mother parton does not branch , in which case @xmath5 is undefined .",
    "however , we can still define the differential distribution in @xmath4 for a single parton , @xmath83 where the first term is the no - branching probability , and @xmath84 is now properly normalized to unity , @xmath85 = 1 \\,.\\ ] ] the precise form of the splitting function @xmath81 depends on the specific type of splitting ( @xmath86 , @xmath87 , or @xmath88 ) , e.g. @xmath89 the scale at which @xmath2 is evaluated is , in general , a function of @xmath4 and @xmath5 .",
    "for simplicity we use @xmath90 .",
    "another typical choice is @xmath91 .",
    "we stress that the kinematics relevant to eq .",
    "assumes that both daughters and the mother s sister are on - shell , massless particles .",
    "the expressions for @xmath12 and @xmath80 arising from the phase space limits are then @xmath92 where @xmath93 is the initial energy of the mother is given in terms of the grandmother s @xmath35 and @xmath32 .",
    "one exception is the case when the mother is the final parton coming from a hard interaction in the grandmother s rest frame . in this case , @xmath93 is chosen to be @xmath94 , which is the exact result for an on - shell , massless sister . ] , and @xmath95 in this subsection .",
    "in addition to the pure phase space limits , the algorithm includes several restrictions which modify the form of @xmath12 and @xmath80 .",
    "first , since the parton showers is ordered in the evolution variable , @xmath4 is always smaller than the initial value @xmath96 where the evolution starts , which is usually chosen to be the invariant mass of the grandmother , @xmath97 .",
    "second , the cutoff on the algorithm , @xmath19 , is realized as a cut on @xmath98 , where @xmath99 is the daughters transverse momentum with respect to the mother s flight direction . in terms of @xmath4 and @xmath5",
    "we have @xmath100 hence , @xmath101 implies @xmath19 , but with the additional restriction @xmath102 furthermore , parton showers require the opening angle between the daughters of subsequent emissions to always decrease .",
    "this angular ordering ensures that the branching is correctly described not only in the collinear limit , where the splitting functions are derived , but also in the soft limit , where the branching is coherent  @xcite .",
    "the opening angle @xmath103 is given by @xmath104 which allows us to translate the angular ordering cut @xmath105 , where @xmath106 is the opening angle of the previous branch , into limits on @xmath4 and @xmath5 , @xmath107 putting everything together , the single branch probability @xmath14 depends on several additional parameters restricting the allowed range of @xmath4 and @xmath5 , @xmath108 where the limits on @xmath4 and @xmath5 are determined by @xmath109 note that these limits automatically include the phase - space limits , eq .",
    ", which are reproduced for @xmath110 and @xmath111 . also , for @xmath112 , corresponding to the mother s rest frame , @xmath113 , forcing @xmath114 , as required",
    ".      in each iteration",
    "the algorithm in fig .",
    "[ fig : alg1 ] starts with a value for @xmath35 which , as discussed above , was determined in a previous iteration assuming @xmath62 and satisfying @xmath115 .",
    "in particular , in the mother s rest frame it starts with @xmath116 , whereas after step 1 , @xmath33 and @xmath34 have become nonzero and so the correct value is now @xmath117 given in eq .  .",
    "thus , the value of @xmath35 has to be changed ( shuffled ) , or otherwise the kinematics can never be satisfied .",
    "this shuffling happens in step 2 of the algorithm .",
    "there are various ways to do this , and ` sherpa `  uses @xmath118 \\,,\\end{aligned}\\ ] ] with @xmath119 given in eq .  .",
    "for @xmath116 , eq .   reduces to eq .  , as required .",
    "since the original value of @xmath35 satisfies @xmath120 , the shuffling in eq .",
    "ensures that @xmath35 always satisfies the correct phase - space limit , eq .  , for @xmath121",
    "nevertheless , four - momentum conservation can still be violated in two ways .",
    "first , it may not be possible at all to find a new physical value @xmath71 .",
    "namely , @xmath57 may not satisfy the constraint @xmath122 in eq .  , which ensures timelike daughters and that @xmath123 in eq .",
    "is well defined .",
    "this can happen , because the values of @xmath33 and @xmath34 were determined independently from one another , only subject to the constraint @xmath124 [ see eq .  ] .",
    "second , changing @xmath125 also changes the energies of the two daughters , @xmath126 and accordingly [ see eq .",
    "] , @xmath127 now assume , for instance , that @xmath128",
    ". then @xmath129 , which increases @xmath37 ( decreases @xmath38 ) and decreases @xmath130 ( increases @xmath131 ) .",
    "using eq .  , it follows that the available phases space for @xmath66 shrinks , and hence the value of @xmath66 may not be allowed anymore .",
    "the same is true for the right branch in case @xmath132 .",
    "for this reason , the algorithm has to explicitly check the kinematics , which is done in step 3 . in ` sherpa `  this is implemented by checking various different kinematical constraints arising from four - momentum conservation , all of which can be reduced to the constraints in eq .  .",
    "if all constraints are satisfied , the daughter branches are accepted and the algorithm proceeds with the next iteration . otherwise , if any phase - space limit is violated , the algorithm picks the daughter with the larger @xmath4 , generates new values @xmath82 according to @xmath8 with the previous @xmath4 as @xmath96 , and goes back to step 2 .",
    "it should be clear from this discussion that steps 2 and 3 in the algorithm introduce a complicated cross correlation between the probabilities to get certain values @xmath63 and @xmath64 , which breaks the factorization in eq .",
    ", and makes it virtually impossible to find a closed - form expression for the double branch probability @xmath133 .    to end this section , we note that the shuffling of @xmath35 is proportional to @xmath134 .",
    "as the parton shower is formally only valid for @xmath135 , this is formally a power suppressed effect .",
    "four - momentum conservation , however , is an important power correction that must be taken into account in order to obtain realistic events , also because in the end the parton shower is used for any values @xmath136 .",
    "it is the final step in the parton shower , where a generated set @xmath63 or @xmath64 can be rejected , which leads to the complicated correlation in the double branch probability .",
    "as explained above , there are two reasons the kinematics can fail in step 3 .",
    "first , it is possible that the original values of @xmath57 violate @xmath122 , and second , the required momentum shuffling in step 2 can render the values of @xmath53 invalid .",
    "we now show how both of these problems can be dealt with without introducing complicated correlations .",
    "we start by looking at the second problem , for which it is instructive to understand in more detail the physical picture behind the shuffling in eq .  .",
    "looking back at eq .  , one can think of @xmath35 in a general frame as given in terms of @xmath137 and @xmath138 .",
    "vice versa , for given @xmath137 , @xmath35 determines the boost factor @xmath138 . when @xmath35 was generated , @xmath62 , and eq .",
    "implies @xmath139 thus , selecting a value for @xmath35 is equivalent to choosing the boost factor @xmath138 . with this in mind , it is easy to understand what the shuffling in eq",
    ".   is doing physically .",
    "it simply holds @xmath138 fixed at its generated value , and recomputes @xmath35 using eq .",
    "after the daughters acquire nonzero invariant masses .",
    "in other words , the algorithm treats the boost factor @xmath138 as the fundamental and @xmath35 as the derived quantity .",
    "is shuffled more than once , because in the algorithm the value of @xmath35 used on the right - hand side of eq .",
    "is always the originally generated value , never one which was already obtained from shuffling . ]    in the same way , generating values for @xmath53 in step 1 in fig .",
    "[ fig : alg1 ] can be regarded as generating and fixing values for the boost factors @xmath140 however , @xmath65 are not free quantities , but change with @xmath35 as functions of @xmath57 [ see eqs .   and ] .",
    "the only way to keep @xmath141 fixed when @xmath35 is shuffled is to balance the change in @xmath65 by a corresponding change in @xmath142 . in this picture , we now immediately see what can go wrong . when shuffling @xmath35 , either @xmath130 or @xmath131 might decrease too much , resulting in an unphysical value @xmath143 for either @xmath144 or @xmath145 .",
    "this picture also leads to a simple and general solution to the problem : instead of @xmath146 , we can just as well use the boost angle @xmath79 itself as the fundamental quantity .",
    "when a value for @xmath5 is generated , it is translated into a value for @xmath147 , @xmath148 which is held fixed at any later stage in the algorithm .",
    "the advantage is that the phase - space limits @xmath149 are completely independent of any other kinematic variables and are always satisfied . holding @xmath147 fixed in eq",
    ".   corresponds to an additional shuffle @xmath150 \\,,\\ ] ] to be applied to @xmath53 whenever @xmath65 change as a result of shuffling @xmath35 .",
    "similarly to eq .  , eq .   ensures that @xmath53 always satisfy their phase - space constraints .",
    "note that eqs .   and",
    "can be realized as two special cases of a generalized shuffle , which follows from eqs .   and , @xmath151 \\,,\\end{aligned}\\ ] ] where @xmath152 is the value used when @xmath153 was generated , and @xmath154 is the new value .",
    "this makes the practical implementation into the current algorithms straightforward , because all one has to do is to store @xmath152 and change the shuffling function .",
    "since all eq .   does is to hold @xmath147 fixed , we can also go one step further and directly use @xmath155 to describe the individual branches , with the daughters energies @xmath61 always given as functions of @xmath32 , @xmath45 and @xmath137 . in this way ,",
    "any necessity to keep track of @xmath156 and how and when they are shuffled is removed , which makes the entire algorithm very transparent .    at this point , the only kinematical check that would be left in step 3 is the simple constraint @xmath68 , which can not be eliminated by a change of variables .",
    "however , we can recast the correlation it introduces into a calculable form by branching the daughters in two separate steps , as shown in fig .",
    "[ fig : alg2 ] . in the first step",
    "the left daughter is branched , starting the evolution at @xmath97 . in the second step",
    "the right daughter is branched , starting the evolution at @xmath157 , which automatically takes care of the remaining constraint . in this way",
    ", the double branch probability for the left and right branches can be written as the product of two single branch probabilities @xmath158 \\,.\\end{aligned}\\ ] ] since the iteration steps in the generation of an entire event are already independent , eq .   allows us to write the total probability to generate a given event as a product of single branch probabilities as in eq .  , which is what we set out to do .      in practice ,",
    "one has several choices in implementing this new analytic algorithm in a real parton shower . to eliminate the asymmetry between @xmath33 and @xmath34 in eq .",
    ", one can randomly choose which daughter of a given branch acts as the left daughter and is branched first .",
    "alternatively , one can always branch the daughter with the larger ( or smaller ) initial energy first .",
    "a third choice is to generate a test value of @xmath4 for each daughter , call the larger one @xmath33 , and then branch the other daughter starting the evolution at the smaller of @xmath33 and @xmath159 . for this choice , the double branch probability still factorizes and involves an additional factor of the no - branching probability @xmath160",
    ". this last choice may be the most natural one from the point of view of a global evolution  @xcite .",
    "once the left daughter has been branched , one also has the choice which energy to use as the initial energy @xmath93 for branching the right daughter .",
    "one could either keep the original energy computed from @xmath45 with @xmath161 or recompute it from @xmath45 with the new value of @xmath33 , where again the latter choice seems to be the more natural one .",
    "we have implemented the changes to the algorithm described above in ` sherpa ` s parton shower . for simplicity",
    ", we always branch the left daughter first and keep the original energy for @xmath93 when branching the right daughter .",
    "the only things we had to change then were to separate the branching of the two daughters and to change the function returning a new value of @xmath5 to use eq .  .",
    "as a cross check , we did not remove the kinematic checks done in step 3 of the original algorithm and tested that with our modifications they indeed never fail ( apart from extremely rare occasions where the failure is due to numerical inaccuracies ) .",
    "we now discuss the impact the change in the algorithm has on the generated events .",
    "the original algorithm rejects branches in the third step if the kinematics is not satisfied , which leads to a lowering of at least one of the invariant masses of the daughters that are branched .",
    "hence , compared to the analytic algorithm , where this third step is absent , the original algorithm suppresses large values of @xmath4 and enhances low values of @xmath4 . since the effect on the kinematics from having nonzero",
    "@xmath4 is more pronounced for larger @xmath4 , this relative suppression is expected to increase with increasing @xmath4 .    to estimate the expected size of this effect",
    ", we note that shuffling @xmath5 is a power suppressed effect , of order @xmath162 , which one can think of as changing the @xmath5 limits of integration .",
    "thus , upon integration over @xmath5 , the difference in the two algorithms corresponds to a power correction to the splitting function @xmath163 , schematically @xmath164 furthermore , the single branch probability generated by the algorithm always has the form @xmath165 $ ] .",
    "the integral of a difference in @xmath166 in the exponent gives rise to an additional finite perturbative difference .",
    "thus , eq .   translates into a change in the single branch probability @xmath167 \\,.\\ ] ] the appearance of perturbative corrections can also be understood in another way .",
    "since the total probability @xmath168 is normalized to unity [ see eq .",
    "] , and power corrections must vanish for @xmath169 , an increase of @xmath168 at large @xmath4 via power corrections can only be compensated at small @xmath4 by a decrease of @xmath168 via perturbative corrections .        to illustrate the difference between the algorithms at the level of a single branching",
    ", we generated one million double branches starting from @xmath170 in the mother s rest frame , and look at the average of the double branch probability @xmath171 the results are shown on the left of fig .",
    "[ fig : pbar_thrust ] for the original ` sherpa `  algorithm [ dark ( blue ) triangles ] and the analytic algorithm [ medium ( orange ) dots ] .",
    "the solid ( orange ) line shows the analytic result for @xmath172 obtained from eq .  .",
    "as expected , it matches the distribution generated with the analytic algorithm .",
    "one can also see the suppression of the original algorithm at large @xmath4 .",
    "the difference between the two algorithms for large @xmath4 is well within the expected size of power corrections eq .  , indicated by the gray shading .    to show the effect on fully showered events",
    ", we generated one million events with ` sherpa `  using the original and the analytic algorithm .",
    "a typical physical observable is the thrust distribution , @xmath173 , which measures the jettiness of a given event , with @xmath174 for two narrow jets and @xmath175 for spherical events . on the right of fig .",
    "[ fig : pbar_thrust ] we show the integrated thrust distribution @xmath176 obtained with the original algorithm [ dark ( blue ) triangles ] and the analytic algorithm [ medium ( orange ) dots ] . here",
    ", the gray shading gives an estimate of the size of perturbative corrections .",
    "as expected , compared to the original algorithm , the analytic algorithm suppresses small values of @xmath177 , corresponding to branchings at small @xmath4 , but within the estimated size of perturbative corrections .",
    "defined in eq .  .",
    "see text for further explanation . ]    as a further check that the analytic algorithm distributes according to the known probability eq .",
    ", we keep the left and right branches separate and consider the double branch probability integrated over @xmath53 @xmath178 the result of the analytic algorithm agrees well within the statistical uncertainties with the analytic expectation from eq .  .",
    "this is illustrated in fig .",
    "[ fig : ptlrpull ] , where we show the pull distribution for @xmath179 , i.e. the difference between the generated and analytic distributions divided by the statistical uncertainty of the generated distribution .",
    "we have shown how to construct an analytic parton shower algorithm which distributes events according to a known probability distribution @xmath180 .",
    "this result opens up the possibility to obtain events that are distributed according to some other distribution @xmath181 by proceeding in three steps :    1 .",
    "generate events using the analytic algorithm described in this work .",
    "2 .   assign the weight @xmath182 to each event .",
    "3 .   if desired , unweight the event sample by vetoing events according to their relative weights .",
    "the third step is optional and only needed if one desires final events with unit weight .",
    "similarly , the allowable size of the weights will depend on the specific application .",
    "the power of this approach is twofold .",
    "first , it can provide a very efficient way to distribute according to some distribution @xmath183 , which may not be possible otherwise .",
    "second , since the reweighting does not change the event kinematics , it can be applied at any later stage in the event generation , in particular , after the detector simulation .",
    "we like to stress again that , for this reweighting approach to be possible , it is essential to know the exact form of @xmath184 , i.e. , it would be insufficient to only know the leading terms in the power expansion of @xmath184 .",
    "we now discuss two immediate applications .",
    "we first consider the case where @xmath185 is given by the differential distribution obtained from full matrix element calculations .",
    "even though it is possible to obtain the squared amplitude , and thus @xmath186 , for a moderate number of partons in the final state , it is still quite difficult to distribute events according to @xmath186 .",
    "the reason is that @xmath186 has large peaks arising from poles in the amplitudes due to on - shell intermediate particles .",
    "this makes it impossible to employ a simple hit - or - miss algorithm with random numbers drawn from a flat distribution .",
    "instead one has to rely on numerically inverting the integral of @xmath186 over phase space .",
    "since the dimensionality of phase space increases with each additional parton , the required numerical integrations quickly become very time - consuming .",
    "the parton shower describes the same ir physics as the full qcd amplitude .",
    "it thus contains the same poles from on - shell intermediate particles , and the resulting weights @xmath187 in step 2 are expected to be moderate . generating events with a parton shower is several orders of magnitude faster than the numerical phase - space integrations required otherwise .",
    "hence , it should be possible to accommodate relative weights even of @xmath188 to @xmath189 and still achieve a reasonably high efficiency .",
    "as the events will later be run through a detector simulation , step 3 has to be included such that the final events have unit weight .",
    "one way to think of this is that the parton shower acts as a phase - space generator that automatically contains the correct pole structure of the matrix elements .    from this viewpoint , one could consider a much simpler version of the markov chain algorithm that only attempts to capture the underlying pole structure , without trying to address other important effects ( e.g. getting the correct soft limit via the angular ordering ) that are already included in the matrix elements",
    "this would provide an alternative and efficient algorithm to distribute events according to known matrix element expressions .    nevertheless , to obtain realistic , fully exclusive events one still has to attach a parton shower to the matrix element calculations , which is usually nontrivial due to double counting issues .",
    "there are a few dedicated algorithms  @xcite with several implementations  @xcite available to consistently match tree - level matrix elements for many partons with parton showers .",
    "in addition , several approaches are pursued by now to incorporate matrix elements for the first hard emission at next - to - leading order  @xcite . to combine these two separate classes of matrix element corrections ,",
    "some work has been carried out in ref .",
    "@xcite . in this respect ,",
    "the scet - based approach of ref .",
    "@xcite seems quite promising .    using the analytic parton shower",
    ", one can generate fully showered events with many partons in the final state and then reweight the @xmath0 hardest emissions to the matrix element result for @xmath0 final - state partons .",
    "this idea is similar to the older merging method used by ` pythia `  to correct the first shower emission  @xcite . in our case",
    ", one assigns to each event the weight @xmath190 in step 2 , where @xmath191 numbers the @xmath0 partons with the largest @xmath4 .",
    "it follows that any observable sensitive to the distribution in the @xmath0 hardest partons and inclusive in all other partons will be determined by the full matrix element result , while any further emission is determined by the parton shower . in this way",
    "the analytic parton shower not only allows one to efficiently distribute matrix elements , but in addition provides a simple and powerful tool to match matrix elements and parton showers .",
    "an implementation of this result will be given elsewhere .",
    "note that the matching is completely determined at the analytic level by the form of @xmath186 . in principle",
    ", it could be carried out for any @xmath0 and at any order in perturbation theory .",
    "the reweighting can also be performed after the events have been run through a detector simulation , which is the most time - consuming part of the event generation .",
    "hence , one can obtain sets of events with different underlying distributions , performing only a single run of the detector simulation .",
    "of course , to make maximal use of the simulated events , one would now like to have @xmath192 weights and also skip step 3 .",
    "therefore , to generate events one would still use the best available matrix element calculations matched with the analytic parton shower , as described above .",
    "one advantage of using the analytic parton shower is that one can update already simulated events at any later time to the newest theory or parameters .",
    "furthermore , having analytic control over all parameters in the parton shower allows one to estimate uncertainties arising from input parameters like @xmath193 or quark masses , and from higher - order power and perturbative corrections . in all cases @xmath183",
    "is simply given by @xmath184 computed with a different set of parameters .",
    "moreover , one could study different scheme choices in the parton shower , provided of course one has analytic control over @xmath184 corresponding to the new scheme .",
    "for example , one could study the scale at which @xmath2 is evaluated or even the choice of the evolution variable .    as a specific application",
    ", we look at power corrections and the tuning of the parton shower .",
    "tuning a parton shower is crucial to get a good description of the experimental data , and one is , in effect , adjusting unknown power corrections to fit the data .",
    "the analytic control over the parton shower gives access to a simple and systematic way to tune it to data .",
    "we can introduce power corrections by adding nonsingular terms to the splitting function @xmath81 entering eq .  .",
    "for example , for @xmath194 as in eq .  , @xmath195 \\,,\\ ] ] where @xmath196 is a nonsingular function of @xmath4 ( in general , @xmath197 could also depend on @xmath5 ) .",
    "this change will affect the branching probability for large @xmath4 , but will leave branches with small @xmath4 nearly unaffected .",
    "hence , adjusting @xmath196 changes the power corrections included in the parton shower , which can be used to tune the parton shower .",
    ", as defined in eq .  , for the analytic parton shower [ medium ( orange ) dots ] , after reweighting [ light ( green ) diamonds ] , and for ` sherpa ` s parton shower [ dashed ( blue ) line ] .",
    "error bars indicate statistical uncertainties .",
    "see text for further explanation . ]    to illustrate this , we would like to adjust the analytic algorithm such that the average of its double branch probability , @xmath172 [ see eq .",
    "] , roughly agrees with the original algorithm .",
    "we use the simplest possible power correction , @xmath198 . as discussed in sec .",
    "[ subsec : comparison ] , the analytic algorithm enhances large @xmath4 compared to the original algorithm , so we need @xmath199 . in fig .",
    "[ fig : pbar_reweighted ] we show the result for @xmath200 from running the analytic algorithm [ medium ( orange ) dots ] and then reweighting each event to a new splitting function with @xmath201 [ light ( green ) diamonds ] , together with the result from running the original ` sherpa `  algorithm [ dashed ( blue ) line ] .",
    "the reweighted result agrees remarkably well with the original algorithm , given the simple form of the power correction .    while this example only serves as an illustration , the analytic control over the tuning parameters is extremely useful . after the detector simulation , tuning the parton shower to data amounts to parametrizing the power corrections @xmath196 in terms of a few parameters and fitting them to data .",
    "the uncertainties from power corrections can then be estimated by varying the tuning parameters in some range .",
    "event generators are indispensable tools to compare theory and experiment at collider experiments . while distributions with relatively few final - state partons can be computed directly from the matrix elements of the underlying theory , parton showers have to be employed to generate final states with a large number of partons .",
    "they rely on splitting functions , which are derived in the collinear or soft limit of the underlying theory .",
    "the conservation of four - momentum in each step of the algorithm , although technically a subleading effect , is an important ingredient to obtain realistic predictions from parton showers to compare to data .    in standard parton shower algorithms ,",
    "the implementation of four - momentum conservation introduces a cross correlation between different branches , such that the final probability to produce a given event is not equal to the product of individual branching probabilities . in this work",
    "we have shown that a few simple modifications of an existing algorithm yield an analytic parton shower algorithm that conserves four - momentum at each vertex , but distributes according to a known analytic distribution .",
    "this makes it possible to generate events with exact knowledge of the probability with which each event was generated , and to reweight the events to a different distribution at any later stage in the event generation .",
    "we have studied the specific case of a virtuality - ordered final - state parton shower . considering the type of modifications",
    ", we expect the extension to a corresponding initial - state parton shower to be straightforward",
    ". it should also be possible to apply the same ideas to parton showers using different ordering variables .",
    "the analytic parton shower proposed here in conjunction with the reweighting approach provides a powerful tool for experiment and theory , and in the last section we have given two examples of this .",
    "first , it facilitates the distribution of events according to full matrix elements , which is otherwise hindered by the need for time - consuming phase - space integrations , and at the same time provides a very generic way to match matrix elements with the parton shower .",
    "second , generated events can be reweighted even after they have been run through a detector simulation .",
    "this allows one to update simulated events at any later time .",
    "it also greatly simplifies the study of higher - order corrections and parameter dependences in the parton shower as well as the estimation of uncertainties arising from these sources .",
    "for example , it provides a convenient way to tune the parton shower to data by simply fitting parameters characterizing power corrections to the data .",
    "we are grateful to johan alwall , peter skands , and kerstin tackmann for helpful conversations .",
    "this work was supported in part by the director , office of science , office of high energy physics of the u.s .",
    "department of energy under the contract de - ac02 - 05ch11231 .",
    "cwb would also like to acknowledge support from the doe oji program , and an ldrd from lbnl .    for a short review see : p.  z.  skands , aip conf .",
    "proc .   * 792 * , 73 ( 2005 ) [ arxiv : hep - ph/0507129 ] . c.  w.  bauer and m.  d.  schwartz , phys .",
    "lett .   *",
    "97 * , 142001 ( 2006 ) [ arxiv : hep - ph/0604065 ] ; arxiv : hep - ph/0607296 ; c.  w.  bauer , s.  fleming and m.  e.  luke , phys .",
    "d * 63 * , 014006 ( 2000 ) [ arxiv : hep - ph/0005275 ] ; c.  w.  bauer , s.  fleming , d.  pirjol and i.  w.  stewart , phys .",
    "d * 63 * , 114020 ( 2001 ) [ arxiv : hep - ph/0011336 ] ; c.  w.  bauer and i.  w.  stewart , phys .",
    "b * 516 * , 134 ( 2001 ) [ arxiv : hep - ph/0107001 ] ; c.  w.  bauer , d.  pirjol and i.  w.  stewart , phys .",
    "d * 65 * , 054022 ( 2002 ) [ arxiv : hep - ph/0109045 ] .",
    "m.  l.  mangano , m.  moretti and r.  pittau , nucl .",
    "* b632 * , 343 ( 2002 ) [ arxiv : hep - ph/0108069 ] ; m.  l.  mangano , talk at the `` fermilab me / mc tuning workshop '' , oct . 4 , 2002 , http://home.fnal.gov/  mrenna / tuning / nov2002/mlm.pdf    s.  catani , f.  krauss , r.  kuhn and b.  r.  webber , jhep * 0111 * , 063 ( 2001 ) [ arxiv : hep - ph/0109231 ] ; f.  krauss , jhep * 0208 * , 015 ( 2002 ) [ arxiv : hep - ph/0205283 ] .",
    "l.  lnnblad , jhep * 0205 * , 046 ( 2002 ) [ arxiv : hep - ph/0112284 ] .",
    "for other recent work on estimating uncertainties in parton showers see : p.  stephens and a.  van hameren , arxiv : hep - ph/0703240 .",
    "r.  kuhn , f.  krauss , b.  ivanyi and g.  soff , comput .  phys .",
    "commun .   * 134 * , 223 ( 2001 ) [ arxiv : hep - ph/0004270 ] ; f.  krauss , a.  schlicke and g.  soff , comput .",
    "commun .   * 174 * , 876 ( 2006 ) [ arxiv : hep - ph/0503087 ] .",
    "m.  bengtsson and t.  sjstrand , phys .",
    "b * 185 * , 435 ( 1987 ) ; m.  bengtsson and t.  sjstrand , nucl .  phys .",
    "* b289 * , 810 ( 1987 ) .",
    "e.  norrbin and t.  sjstrand , nucl .",
    "* b603 * , 297 ( 2001 ) [ arxiv : hep - ph/0010012 ] . t.  sjstrand _ et al .",
    "_ , comput .",
    "commun .   * 135 * , 238 ( 2001 ) [ arxiv : hep - ph/0010017 ] ; t.  sjstrand , s.  mrenna and p.  skands , jhep * 0605 * , 026 ( 2006 ) [ arxiv : hep - ph/0603175 ] . for a pedagogical introduction",
    "see : t.  sjstrand , arxiv : hep - ph/0611247 ; and for a more detailed review the ` pythia `  manual  @xcite .",
    "g.  altarelli and g.  parisi , nucl .",
    "* b126 * , 298 ( 1977 ) . v.  v.  sudakov , sov .",
    "jetp * 3 * , 65 ( 1956 ) [ zh .  eksp .  teor .",
    "* 30 * , 87 ( 1956 ) ] .",
    "g.  marchesini and b.  r.  webber , nucl .",
    "* b238 * , 1 ( 1984 ) ; g.  corcella _ et al .",
    "_ , jhep * 0101 * , 010 ( 2001 ) [ arxiv : hep - ph/0011363 ]",
    ". g.  gustafson and u.  pettersson , nucl .",
    "* b306 * , 746 ( 1988 ) ; l.  lnnblad , comput .",
    "phys .  commun .",
    "* 71 * , 15 ( 1992 ) .",
    "s.  gieseke , p.  stephens and b.  r.  webber , jhep * 0312 * , 045 ( 2003 ) [ arxiv : hep - ph/0310083 ] ; s.  gieseke _ et al .",
    "_ , jhep * 0402 * , 005 ( 2004 ) [ arxiv : hep - ph/0311208 ] ; s.  gieseke _ et al .",
    "_ , arxiv : hep - ph/0609306 . t.  sjstrand and p.  z.  skands , eur .  phys .",
    "j.   c * 39 * , 129 ( 2005 ) [ arxiv : hep - ph/0408302 ] .",
    "a.  h.  mueller , phys .",
    "b * 104 * , 161 ( 1981 ) .",
    "we thank peter skands for discussions on this point .",
    "t.  gleisberg _ et al .",
    "_ , jhep * 0402 * , 056 ( 2004 ) [ arxiv : hep - ph/0311263 ] ; a.  schlicke and f.  krauss , jhep * 0507 * , 018 ( 2005 ) [ arxiv : hep - ph/0503281 ] . s.  mrenna and p.  richardson , jhep * 0405 * , 040 ( 2004 ) [ arxiv : hep - ph/0312274 ]",
    ". n.  lavesson and l.  lnnblad , jhep * 0507 * , 054 ( 2005 ) [ arxiv : hep - ph/0503293 ] .",
    "s.  frixione and b.  r.  webber , jhep * 0206 * , 029 ( 2002 ) [ arxiv : hep - ph/0204244 ] ; s.  frixione , p.  nason and b.  r.  webber , jhep * 0308 * , 007 ( 2003 ) [ arxiv : hep - ph/0305252 ] ; s.  frixione and b.  r.  webber , arxiv : hep - ph/0612272 . m.  krmer and d.  e.  soper , phys .",
    "d * 69 * , 054019 ( 2004 ) [ arxiv : hep - ph/0306222 ] ; d.  e.  soper , phys .",
    "d * 69 * , 054020 ( 2004 ) [ arxiv : hep - ph/0306268 ] ; m.  krmer , s.  mrenna and d.  e.  soper , phys .",
    "d * 73 * , 014022 ( 2006 ) [ arxiv : hep - ph/0509127 ] .",
    "p.  nason , jhep * 0411 * , 040 ( 2004 ) [ arxiv : hep - ph/0409146 ] ; p.  nason and g.  ridolfi , jhep * 0608 * , 077 ( 2006 ) [ arxiv : hep - ph/0606275 ] .",
    "o.  latunde - dada , s.  gieseke and b.  r.  webber , jhep * 0702 * , 051 ( 2007 ) [ arxiv : hep - ph/0612281 ] .",
    "z.  nagy and d.  e.  soper , jhep * 0510 * , 024 ( 2005 ) [ arxiv : hep - ph/0503053 ] .",
    "g.  miu , arxiv : hep - ph/9804317 ; g.  miu and t.  sjstrand , phys .",
    "b * 449 * , 313 ( 1999 ) [ arxiv : hep - ph/9812455 ] ."
  ],
  "abstract_text": [
    "<S> parton showers are widely used to generate fully exclusive final states needed to compare theoretical models to experimental observations . while , in general , parton showers give a good description of the experimental data , the precise functional form of the probability distribution underlying the event generation is generally not known . </S>",
    "<S> the reason is that realistic parton showers are required to conserve four - momentum at each vertex . in this paper </S>",
    "<S> we investigate in detail how four - momentum conservation is enforced in a standard parton shower and why this destroys the analytic control of the probability distribution . </S>",
    "<S> we show how to modify a parton shower algorithm such that it conserves four - momentum at each vertex , but for which the full analytic form of the probability distribution is known . </S>",
    "<S> we then comment how this analytic control can be used to match matrix element calculations with parton showers , and to estimate effects of power corrections and other uncertainties in parton showers . </S>"
  ]
}