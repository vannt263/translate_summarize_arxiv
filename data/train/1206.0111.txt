{
  "article_text": [
    "graphical models have become a standard tool in machine learning , and inference ( marginal and map estimation ) is the central problem , cf .  @xcite .    these models can be defined rigorously as models of functions that factorize w.r.t .",
    "an associative and commutative operation , cf .",
    "the c++ library opengm is based on this general definition that allows for a unified treatment of accumulative operations on such functions , including optimization , summation ( marginalization ) , conjunction and disjunction .",
    "it provides a variety of inference algorithms beyond message passing ( fig .",
    "[ figure : algorithms ] ) .",
    "it can deal efficiently with large scale problems , since ( i ) functions that occur repeatedly need to be stored only once and ( ii ) when functions require different parametric or non - parametric encodings , multiple encodings can be used alongside each other , in the same model .",
    "no restrictions are imposed on the factor graph and the operations of the model , and the file format handles user extensions automatically .",
    "furthermore , opengm is a template library in which elementary data types can be chosen to maximize efficiency .",
    "existing libraries do not have all of these properties .",
    "mrf - lib @xcite is restricted to the min - sum semi - ring and second - order grid graphs . while it is highly efficient on these models , it is also specialized to these and not easily extendible .",
    "in contrast , libdai  @xcite supports max - product and sum - product semi - rings which are hard - coded .",
    "the main drawback of libdai is that it supports only dense value tables to encode functions which becomes prohibitive for models with many labels and higher - order factors .",
    "similar to libdai , fastinf @xcite focuses on message passing and does not impose any restrictions on the factor graph .",
    "in contrast to libdai , it supports shared functions and different function types in a so - called relational model that is similar in spirit to the design of opengm .",
    "however , fastinf supports only sum - product semi - rings and , unlike opengm , has no generic template abstraction of semi - rings .",
    "the recently published library grante @xcite provides shared functions and different function types .",
    "furthermore , it comes with a set of learning methods . unlike opengm , it is not template based , limited in its inference methods and published under a proprietary license .",
    "the generality of opengm comes at the cost of performance . and",
    "yet , opengm is only slightly slower than libdai when running loopy belief propagation on a grid graph .",
    "the highly optimized code of mrf - lib is twice as fast for general second - order factors and 20 times as fast for standard metrics .",
    "opengm is modular and extendible .",
    "the graphical model data structure , inference algorithms and different encodings of functions interoperate through well - defined interfaces .",
    "= [ rectangle , rounded corners , minimum width=19ex , minimum height=4ex , draw = green , fill = green!10 ]    at ( 0 , 0.1 ) message passing ; at ( 0 , 1 ) loopy bp ; at ( 0 , 2 ) trbp ; at ( 0 , 3 ) trw - s ;    at ( 1 , 0.1 ) graph cut ; at ( 1 , 1 ) @xmath0-expansion ; at ( 1 , 2 ) @xmath1-swap ; at ( 1 , 3 ) qpbo ;    at ( 2 , 0.1 ) search ; at ( 2 , 1 ) icm ; at ( 2 , 2 ) lazyflipper ; at ( 2 , 3 ) loc ;    at ( 3 , 0.1 ) sampling ; at ( 3 , 1 ) gibbs ; at ( 3 , 2 ) swendsen - wang ;    at ( 4 , 0.1 ) lp / ilp ; at ( 4 , 1 ) dual decomposition ; at ( 4 , 2 ) branch & cut ; at ( 4 , 3 ) a@xmath2 ;    opengm is built on a rigorous definition of the syntax and semantics of a graphical model .",
    "the syntax determines a class of functions that factorize w.r.t .  an associative and commutative operation . in a probabilistic model",
    ", it determines the conditional independence assumptions .",
    "the semantics specify the operation and one function out of the class of all function that are consistent with the syntax .    the _ syntax _ ( fig .",
    "[ figure : syntax - semantics]a ) consists of a factor graph , i.e.  a bipartite graph @xmath3 , a linear order @xmath4 in @xmath5 , a set @xmath6 whose elements are called _ function identifiers _ , and a mapping @xmath7 that assigns one function identifier to each factor such that only factors that are connected to the same number of variables can be mapped to the same function identifier . for any @xmath8 and @xmath9 , the _ factor _",
    "@xmath10 is said to _ depend _ on the _ variable _ @xmath11 iff @xmath12 .",
    "@xmath13 denotes the set of all variables on which @xmath10 depends and @xmath14 the sequence of these variables in ascending order .",
    "similarly , @xmath15 denotes the sequence of _ all _ variables in ascending order .    _",
    "semantics _ ( fig .",
    "[ figure : syntax - semantics]b ) w.r.t .  a given syntax consist of one finite set @xmath16 for each @xmath8 , a commutative monoid @xmath17 and for any @xmath18 for which there exists an @xmath9 with @xmath19 , one function implies @xmath20 . ] @xmath21 .",
    "the function from @xmath22 to @xmath23 _ induced _ by syntax and semantics is the function @xmath24 such that @xmath25 : @xmath26    w.l.o.g .",
    ", opengm simplifies the syntax and semantics by substituting @xmath27 , equipped with the natural order , @xmath28 , @xmath29 and for each @xmath8 , @xmath30 .",
    "a graphical model is thus completely defined by the number of variables @xmath31 , the number of labels @xmath32 of each variable @xmath8 , the edges @xmath33 of the factor graph , the number of functions @xmath34 , the assignment of functions to factors @xmath35 , the commutative monoid @xmath17 and one function @xmath36 for each function identifier @xmath18 .    given a graphical model and , instead of just the commutative monoid @xmath17 , a commutative semi - ring @xmath37 , the problem of computing @xmath38 is a central problem in machine learning with instances in optimization @xmath39 , marginalization @xmath40 and constrained satisfaction @xmath41 .",
    "= [ circle , draw = black , thick ] = [ scale=1.2,fill = black ] = [ circle , scale=0.5,fill = black ] = [ draw , thick ] = [ draw , thick ,- latex ] //in",
    "( 0,0)/v1/@xmath42 , ( 3,0)/v2/@xmath43 , ( 6,0)/v3/@xmath44 ( ) [ label = right : ] at ; //in ( 0,1.5)/f1/@xmath45 , ( 1.5,1.5)/f4/@xmath46 , ( 3.0,1.5)/f2/@xmath47 , ( 4.5,1.5)/f5/@xmath48 , ( 6,1.5)/f3/@xmath49 ( ) [ label = right : ] at ; //in ( 0,3)/g1/@xmath50 , ( 1.5,3)/g4/@xmath51 , ( 3,3)/g2/@xmath52 , ( 6,3)/g3/@xmath53 ( ) [ label = below : ] at ; ( v1 )  ( f1 ) ; ( v1 )  ( f4 ) ; ( v2 )  ( f2 ) ; ( v2 )  ( f4 ) ; ( v2 )  ( f5 ) ; ( v3 )  ( f3 ) ; ( v3 )  ( f5 ) ; ( f1 )  ( g1 ) ; ( f2 )  ( g2 ) ; ( f3 )  ( g3 ) ; ( f4 )  ( g4 ) ; ( f5 )  ( g4 ) ; ( v ) [ label = right:@xmath5 ] at ( -1.75,0 ) ; ( e ) [ label = right:@xmath33 ] at ( -1.75,0.75 ) ; ( f ) [ label = right:@xmath56 at ( -1.75,1.5 ) ; ( gamma ) [ label = right:@xmath35 ] at ( -1.75,2.25 ) ; ( i ) [ label = right:@xmath6 ] at ( -1.75,3 ) ;    a.  syntax    @xmath59 + @xmath60 + @xmath61 such that @xmath62 :    [ cols= \" < , < , < \" , ]     b.  semantics",
    "the first step when using opengm is to construct a _ label space _ that determines the number of variables and the number of labels of each variable .",
    "the next step is to fix the data type of the domain @xmath23 , the operation @xmath63 and the way functions are encoded , by choosing the parameters of the _ graphical model _",
    "class template as in the example below .    to define a _ function _ such as @xmath64 , one needs to indicate how many labels @xmath65 and @xmath66 have and set the parameters of the function or fill its value table .",
    "once a function has been added to the model , it can be connected to several _",
    "factors _ and thus assigned to different sets of variables .",
    "this procedure is always the same , regardless of the number and type of classes used to encode functions .",
    "details are described in the users section of the manual .",
    "algorithms for optimization and inference are classes in opengm .",
    "to run an algorithm , one instantiates an object of the class , providing a model and optional control parameters , and calls the member function _ infer _ , either without parameters or with one parameter indicating a _ visitor _",
    "( see example ) .",
    "visitors are a powerful tool for monitoring and controlling algorithms by code injection .",
    "once an algorithm has terminated , results such as optima and bounds can be obtained via member functions .",
    "detailed instructions can be found in the users section of the manual .",
    "opengm provides interfaces for custom algorithms , custom parametric functions , custom discrete spaces and custom semi - rings .",
    "these interfaces are described in the developers section of the manual .    .... typedef simplediscretespace < size_t , size_t > space ; space space(numberofvariables , numberoflabels);^\\\\[-1.5ex]^ typedef opengm_typelist_2(explicitfunction < float > , pottsfunction < float > ) functions ; typedef graphicalmodel < float , adder , functions , space > model ; model gm(space);^\\\\[-1.5ex]^ explicitfunction < float > f1(&numberoflabels , & numberoflabels + 1 ) ; f1(0 ) = ... ; f1(1 ) = ... ; ... model::functionidentifier fid1 = gm.addfunction(f1 ) ; const size_t variableindex = 0 ; gm.addfactor(fid1 , & variableindex , & variableindex + 1);^\\\\[-1.5ex]^ pottsfunction < float > f2(numberoflabels , numberoflabels , 0.0f , 0.3f ) ; model::functionidentifier fid2 = gm.addfunction(f2 ) ; size_t variableindices [ ] = { variableindex , variableindex + 1 } ; gm.addfactor(fid2 , variableindices , variableindices + 2);^\\\\[-1.5ex]^ typedef bpupdaterules < model , minimizer > updaterules ; typedef messagepassing < model , minimizer , updaterules , maxdistance > beliefpropagation ; beliefpropagation::parameter parameter(maxnumberofiterations , convergencebound , damping ) ; beliefpropagation bp(gm , parameter ) ; messagepassingverbosevisitor < beliefpropagation > visitor ; bp.infer(visitor ) ; vector < size_t >",
    "labeling(numberofvariables ) ; bp.arg(labeling ) ; ....",
    "opengm is a c++ library for finite graphical models that provides state - of - the - art inference algorithms .",
    "it widens the range of models representable in software by allowing for arbitrary factor graphs and semi - rings and by handling models with repetitive structure efficiently .",
    "it is fast enough for prototype development even in settings where performance is paramount . the modularity and extendibility of opengm , its command line tools and file format have the potential to stimulate an exchange of models and algorithms ."
  ],
  "abstract_text": [
    "<S> opengm is a c++ template library for defining discrete graphical models and performing inference on these models , using a wide range of state - of - the - art algorithms . </S>",
    "<S> no restrictions are imposed on the factor graph to allow for higher - order factors and arbitrary neighborhood structures . </S>",
    "<S> large models with repetitive structure are handled efficiently because ( i ) functions that occur repeatedly need to be stored only once , and ( ii ) distinct functions can be implemented differently , using different encodings alongside each other in the same model . several parametric functions ( e.g.  metrics ) , sparse and dense value tables are provided and so is an interface for custom c++ code . </S>",
    "<S> algorithms are separated by design from the representation of graphical models and are easily exchangeable . </S>",
    "<S> opengm , its algorithms , hdf5 file format and command line tools are modular and extendible .    </S>",
    "<S> graphical model , combinatorial optimization , inference , c++ </S>"
  ]
}