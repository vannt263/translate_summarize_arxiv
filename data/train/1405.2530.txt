{
  "article_text": [
    "in the problem of scheduling on unrelated parallel machines , we are given a set @xmath14 of jobs to be processed without interruption on a set @xmath15 of unrelated machines , where the time a machine @xmath16 needs to process a job @xmath17 is specified by a machine and job dependent processing time @xmath18 .",
    "when considering a scheduling problem , the most common and perhaps most natural objective function is makespan minimization .",
    "this is the problem of finding a schedule ( or , an assignment ) , @xmath19 , so as to minimize the time @xmath20 required to process all jobs .",
    "a classic result in scheduling theory is the lenstra - shmoys - tardos @xmath5-approximation algorithm for this fundamental problem @xcite .",
    "their approach is based on several nice structural properties of the extreme point solutions of a natural linear program and has become a textbook example of such techniques ( see , e.g. , @xcite ) . complementing their positive result , they also proved that the problem is np - hard to approximate within a factor less than @xmath21 , even in the restricted case ( also known as the _ restricted assignment problem _ ) , where @xmath22 . despite being a prominent open problem in scheduling theory , there has been very little progress on either the upper or lower bound since the publication of @xcite over two decades ago , with the exception being the recent beautiful result of svensson @xcite , showing for the restricted case an upper bound of @xmath23 , for an arbitrarily small constant @xmath13 .    in this paper",
    "we show that these best known bounds can be tightened for a wide subclass of instances , which can be identified efficiently .",
    "specifically , we define the _ feasibility factor _ of a given instance as the minimum fraction of machines on which each job can be processed .",
    "we show that there is a polynomial - time algorithm that , given values @xmath6 and @xmath7 , and an instance having a _ sufficiently large",
    "_ feasibility factor @xmath8 $ ] , either proves that no schedule of mean machine completion time @xmath6 and makespan @xmath7 exists , or else finds a schedule of makespan at most @xmath24 . for the restricted assignment problem ,",
    "we show that a simpler algorithm yields a better bound , thus enabling to improve for highly feasible instances the best known ratio of @xmath12 of @xcite .",
    "we note that the feasibility factor @xmath25 of a given instance has been used before , both for improving upper bounds ( see , e.g. , @xcite ) and for showing the hardness of certain subclasses of instances @xcite . however , these previous studies focus on specific values of @xmath25 ( see below ) .",
    "our study takes a different approach in exploring the decrease in the makespan that can be achieved , by identifying instances in which @xmath25 is sufficiently large ( see section [ sec : results ] ) .      minimizing",
    "the makespan on unrelated parallel machines has been extensively studied for almost four decades .",
    "lenstra et al .",
    "@xcite introduced an lp - based polynomial time @xmath5-approximation algorithm for the problem",
    ". they also proved that unless @xmath26 , there is no polynomial time approximation algorithm with approximation factor better than @xmath27 .",
    "gairing et al .",
    "@xcite presented a combinatorial @xmath5-approximation algorithm for the problem .",
    "shchepin and vakhania @xcite showed that the rounding technique used in @xcite can be modified to derive an improved ratio a factor of @xmath28 .",
    "shmoys and tardos @xcite further developed the technique of @xcite to obtain an approximation ratio of @xmath5 for the _ generalized assignment problem ( gap ) _ , defined as follows .",
    "we are given a set of jobs , @xmath14 , and a set of unrelated machines , @xmath15 .",
    "each job is to be processed by exactly one machine ; processing job @xmath2 on machine @xmath4 requires time @xmath29 and incurs a cost of @xmath30 .",
    "each machine @xmath4 is available for @xmath31 time units , and the objective is to minimize the total cost incurred .",
    "the paper @xcite presents a polynomial time algorithm that , given values @xmath32 and @xmath7 , finds a schedule of cost at most @xmath32 and makespan at most @xmath10 , if a schedule of cost @xmath32 and makespan @xmath7 exists .",
    "this is the best known result to date for gap .    for the restricted assignment problem , gairing et al .",
    "@xcite presented a combinatorial @xmath33-approximation algorithm based on flow techniques , where @xmath34 is the maximum processing time of any job in the given instance .",
    "the best known approximation ratio is @xmath35 , due to svensson @xcite .",
    "interestingly , the feasibly factor of a given instance served as a key component in deriving two fundamental results for the restricted assignment problem .",
    "ebenlendr et al .",
    "@xcite showed that the subclass of instances for which @xmath36 admits an approximation factor of @xmath37 , thus improving for this subclass the general bound of @xmath5 .",
    "the same problem , also called _ unrelated graph balancing _ , was studied by verschae and wiese @xcite .",
    "they showed that , in fact , this surprisingly simple subclass of instances constitutes the core difficulty for the _ linear programming _ formulation of the problem , often used as a first step in obtaining approximate solutions .",
    "specifically , they showed that already for this basic setting , the strongest known lp - formulation , namely , the configuration - lp , has an integrality gap of @xmath5 .",
    "in this paper we improve the best known bounds for makespan minimization on unrelated parallel machine , for a wide subclass of instances possessing high feasibility factor .",
    "in particular , in section [ sec : general ] , we show that there is a polynomial - time algorithm that , given values @xmath38 , and an instance @xmath39 having a feasibility factor @xmath40 , either proves that no schedule of mean machine completion time @xmath6 and makespan @xmath7 exists , or else finds a schedule of makespan at most @xmath24 .    for the restricted assignment problem ,",
    "let @xmath41 be the mean machine completion time of _ any _ schedule .",
    "then we show that there is an @xmath42 time algorithm that , given an instance @xmath39 whose feasibility factor satisfies @xmath43 , finds a schedule of makespan at most @xmath44 , where @xmath45 is the makespan of an optimal schedule .",
    "thus , for @xmath46 , this improves the bound of @xmath12 of @xcite .    *",
    "techniques :  *    our algorithms rely heavily on the fact that the given instances are highly feasible , and thus , the schedules can be better balanced to decrease the latest completion time of any job .",
    "our algorithm for general instances first uses as a subroutine an algorithm of @xcite , thus also identifying highly feasible instances .",
    "it then applies on the resulting schedule a _ balancing _ phase .",
    "using some nice properties of this schedule , the algorithm moves long jobs from overloaded to underloaded machines , while decreasing the makespan of the schedule .",
    "our bound for the restricted assignment problem builds on a result of gairing at al .",
    "@xcite , who gave an algorithm based on flow techniques for general instances of the problem .",
    "their algorithm starts with a schedule satisfying certain properties and gradually improves the makespan until it is guaranteed to yield a ratio of @xmath5 to the optimal .",
    "the main idea is to use some parameters for partitioning the machines into three sets : overloaded , underloaded , and all the remaining machines .",
    "the makespan is improved by moving jobs from overloaded to underloaded machines on augmenting path in the corresponding flow network .",
    "we adopt this approach and show that by a _",
    "good _ selection of the parameters defining the three machine sets , we can obtain the desired makespan .",
    "consequently , our algorithm is simpler and has better running time than the algorithm of @xcite ( see section [ sec : restricted ] ) .",
    "an _ assignment _ of jobs to machines is given by a function @xmath19 .",
    "thus , @xmath47 if job @xmath2 is assigned to machine @xmath4 . for any assignment @xmath48 ,",
    "the _ load _ @xmath49 on machine @xmath4 , given a matrix of processing times @xmath50 , is the sum of processing times for the jobs that were assigned to machine @xmath4 , thus @xmath51 .",
    "the _ makespan _ of an assignment @xmath48 is the maximum load on any machine .",
    "also , the _ average machine load _ ( or , mean machine completion time ) is given by @xmath52 .",
    "given the matrix @xmath50 and the value @xmath53 , we say that a machine @xmath4 is _ legal _ for job @xmath2 if @xmath54 .",
    "thus , any job @xmath17 can be assigned to at least @xmath55 machines in @xmath15 .",
    "the _ feasibility factor _ of @xmath50 is @xmath56 .",
    "given an assignment @xmath48 for a matrix @xmath50 , and a constant @xmath57 , we denote by @xmath58 the set of machines that complete processing after time @xmath59 , by @xmath60 the set of machines that complete by time @xmath61 , and by @xmath62 the set of machines from @xmath60 that are legal for job @xmath2 . also we denote by @xmath63 the largest job on machine @xmath64 .",
    "we denote by @xmath65 the bipartite graph @xmath66 where @xmath67 consists of all edges @xmath68 where @xmath69 is a legal machine for @xmath70 .",
    "we say that machine @xmath4 is _ good _ if @xmath71 .",
    "we say that machine @xmath4 is _ bad _ if @xmath64 .",
    "machine @xmath4 is _ good for job @xmath2 _ if @xmath72 .",
    "we omit @xmath50 in the notation if it is clear from the context .",
    "the problem of scheduling on unrelated machines can be viewed as a special case of the _ generalized assignment problem _ in which @xmath73 for all @xmath74 and @xmath75 .",
    "the best known result for the generalized assignment problem is due to @xcite .",
    "they presented a polynomial time algorithm that , given values @xmath32 and @xmath7 , finds a schedule of cost at most @xmath32 and makespan at most @xmath10 , if a schedule of cost @xmath32 and makespan @xmath7 exists .",
    "this implies also the best result for scheduling on unrelated machines - a schedule of makespan at most twice the optimum . in our result",
    "we use the rounding technique of @xcite with the costs being the processing times .",
    "this allows us to bound the average machine s completion time of the resulting assignment .",
    "a bound that is essential for our result . in the next section",
    "we give an overview of the rounding technique of @xcite .",
    "we describe below the technique used in @xcite for solving the generalized assignment problem .",
    "let @xmath50 and @xmath76 denote the matrix of processing times and the matrix of costs , and let @xmath7 and @xmath32 be fixed positive integers .",
    "let the indicator variables @xmath77 , @xmath78 , @xmath79 denote whether job @xmath2 is assigned to machine @xmath4 .",
    "then the linear programming relaxation of the problem is as follows :    @xmath80    let @xmath77 , @xmath78 , @xmath79 be the fractional solution , and let @xmath81 .",
    "each machine is partitioned into @xmath82 sub - machines @xmath83 , @xmath84 $ ] .",
    "the rounding is done by finding a minimum - cost perfect matching between all jobs and all sub - machines .",
    "formally , a bipartite graph @xmath85 is constructed , with @xmath86 the job nodes , @xmath87 the sub - machines nodes .",
    "each node @xmath88 can be viewed as a bin of volume 1 , and we add an edge @xmath89 with cost @xmath90 iff a positive fraction of @xmath77 is packed in the bin @xmath88 . for every machine @xmath91",
    "the jobs are sorted in non - increasing order of their processing time on @xmath4 .",
    "then , the bins @xmath92 are packed one by one , with the values @xmath93 by the order of the jobs . while @xmath88 is not totally packed , we continue packing the @xmath94s such that if @xmath77 fits @xmath88 it is packed to @xmath88 , else , only a fraction @xmath95 of @xmath77 is packed to @xmath88 , consuming all the remaining volume of @xmath96 ; the remaining part of @xmath97 is packed in @xmath98",
    ". then the rounding is done by taking a minimum - cost integer matching @xmath99 , that matches all job nodes , and for each edge @xmath100 , set @xmath101 i.e. , schedule job @xmath2 on machine @xmath4 .",
    "the resulting schedule has the following nice property , that is used below for deriving our result .",
    "@xcite [ lemma : small - jobs_sum ]",
    "let @xmath48 be the assignment obtained by the algorithm and let @xmath102 the longest jobs that was assigned to @xmath4 .",
    "then , for all @xmath74 , @xmath103",
    ".      consider the special case of the generalized assignment problem in which the costs satisfy @xmath104 , for all @xmath105 and @xmath106 .",
    "for any instance @xmath50 and the constants @xmath7 and @xmath107 , integral solutions to the linear program , @xmath108 , are in one - to - one correspondence with schedules of makespan at most @xmath7 , and average machine load @xmath6 .",
    "thus , the result of @xcite guarantees that if @xmath108 has a feasible solution , then there exists a schedule that has makespan at most @xmath10 and average machine load @xmath6 .",
    "our main result is the following .",
    "[ thm : approx_ratio ] let @xmath7 and @xmath107 be some fixed positive values for a given instance @xmath50 of the scheduling problem , let @xmath109 $ ] be the feasibility factor of @xmath50.if @xmath110 has a feasible solution , then there is an algorithm that achieves a makespan of @xmath111 .",
    "we prove the theorem by describing an algorithm that converts a feasible solution for @xmath108 to the desired schedule .",
    "the first step of the algorithm is to apply the rounding technique of @xcite to obtain an assignment @xmath48 that admits makespan at most @xmath10 and average machine load at most @xmath6 .",
    "next , the algorithm fixes the assignment to achieve a makespan of at most @xmath112 .",
    "this is done by transferring the largest job from each machine @xmath113 to a machine @xmath114 . to prove that all transfers are possible ,",
    "we show that there exists a perfect matching between the bad machines and the good machines .",
    "formally , we prove that there exists a perfect matching in @xmath115 .",
    "we first prove the following lemmas .    [ enough_good_machines ]",
    "let @xmath48 be an assignment that admits a makespan of at most @xmath10 and average machine load _ @xmath107 .",
    "_ let @xmath57 and assume @xmath116",
    ". then    1",
    ".   @xmath117 .",
    "2 .   @xmath118 .",
    "each machine @xmath119 has load greater than @xmath59 , therefore @xmath120 .    1 .",
    "assume that @xmath121 , then + @xmath122 + the last inequality follows from the fact that @xmath123 .",
    "hence , the average machine load is greater than @xmath6 , a contradiction .",
    "it follows that @xmath117 .",
    "2 .   let @xmath124 . then , there are @xmath125 machines having loads greater than @xmath126 .",
    "assume that @xmath127 , then + @xmath128 + hence , the average machine load is greater than @xmath6 , a contradiction .",
    "it follows that @xmath129 .",
    "let @xmath50 be an instance of the scheduling problem .",
    "let @xmath48 be an assignment for @xmath50 that admits a makespan of at most @xmath10 and average machine load _",
    "@xmath107_. if @xmath130 then for every subset @xmath131 , @xmath132 , where @xmath133 is the set of neighbors of @xmath134 in @xmath135 .",
    "let @xmath136 .",
    "since the number of illegal machines for any job @xmath2 is at most @xmath137 , the number of good machines for job @xmath2 is at least the number of good machines minus its illegal machines ( the worst case where all illegal machines for job @xmath2 form a subset of @xmath138 ) .",
    "together with lemma [ enough_good_machines ] we have    @xmath139    the last inequality follows from the fact that @xmath140 .",
    "now , let @xmath131 . then @xmath141 .",
    "recall that the set of neighbors of @xmath134 is the set of machines that are good for all the jobs @xmath142 , @xmath143 , i.e. , @xmath144 .",
    "obviously @xmath145 for some @xmath143 .",
    "it follows from the above that @xmath146 .    since @xmath147 we have that @xmath132 .",
    "by hall s theorem @xcite , there exist a perfect matching in @xmath148 _ iff _ for every @xmath131 , @xmath149 thus , we have    [ lemma : hall ] there exists a perfect matching in @xmath148 .    by the above discussion , we can modify the assignment @xmath48 , output by the algorithm of @xcite , by finding a perfect matching in @xmath148 and then transferring jobs from bad machines to their matching good machines .",
    "we describe this formally in algorithm @xmath150 .    1 .",
    "solve the linear relaxation @xmath110 .",
    "2 .   round the solution to obtain an integral assignment @xmath48 using a rounding technique as given in @xcite .",
    "[ alg : step2 ] 3 .",
    "if the feasibility factor @xmath25 of @xmath50 satisfies @xmath151 , then return the assignment @xmath48 .",
    "[ alg : step3 ] 4 .   otherwise , construct the bipartite graph @xmath148 and find a perfect matching of size @xmath152 .",
    "5 .   obtain a resulting assignment @xmath95 out of @xmath48 by transferring the longest job , @xmath142 from each machine @xmath153 , to its matching machine @xmath154 .",
    "return the new assignment @xmath95 .",
    "* proof of theorem [ thm : approx_ratio ] .",
    "* we show that the assignment output by algorithm @xmath155 satisfies the statement of the theorem .",
    "consider an instance @xmath50 .",
    "by @xcite , if @xmath108 has a feasible solution for @xmath156 then step [ alg : step2 ] .",
    "is guaranteed to generate a schedule of makespan at most @xmath10 and average machine load @xmath6 .",
    "let @xmath48 be the resulting assignment .",
    "let @xmath25 be the feasibility factor of @xmath50 .",
    "if @xmath157 then we output @xmath48 at step [ alg : step3 ] , and indeed , we can not guarantee a makespan lower than @xmath10 in this case .",
    "otherwise , by corollary [ lemma : hall ] , there exists a perfect matching in @xmath148 .",
    "let @xmath158 and let @xmath159 be a perfect matching in @xmath160    by lemma [ lemma : small - jobs_sum ] , for any machine @xmath105 the sum of processing times of all the jobs @xmath2 such that @xmath161 is at most @xmath7 .",
    "therefore , transferring the largest job @xmath142 to another machine guarantees that the new load of @xmath4 is at most @xmath7 .",
    "as for the good machines , if @xmath4 is a good machine for job @xmath2 then @xmath54 , then transferring @xmath2 to @xmath4 will increase the load of @xmath4 at most by @xmath7 . since the load of a good machine is at most @xmath162 , we have that after such job transfer the load is at most @xmath112 .",
    "we note that each pair @xmath163 is a matching between @xmath164 and @xmath165 and therefore transferring the largest job @xmath166 from @xmath167 to @xmath168 guarantees that the resulting load on @xmath167 is at most @xmath7 , and the load on @xmath168 is at most @xmath112 .",
    "thus , by performing the large - jobs transfers for all pairs @xmath163 , @xmath169 , we guarantee that each machine has load at most @xmath112 .",
    "in this section we consider the restricted version of our problem , where @xmath171 , for each job @xmath106 , and each machine @xmath91 .",
    "for this variant , we show that improved approximation ratio can be achieved by a combinatorial algorithm . in particular , applying a technique of gairing et al .",
    "@xcite , we show that , by identifying highly feasible instances , we obtain an algorithm which improves the @xmath5-approximation ratio guaranteed in @xcite , and also has better running time . in the next section",
    "we give an overview of the algorithm of @xcite .",
    "we describe below an algorithm , called unsplittable - blocking - flow , introduced in @xcite .",
    "let @xmath39 be an instance for the restricted assignment problem .",
    "also , let @xmath172 be a fixed positive integer and @xmath173 a parameter ( to be determined ) .",
    "a @xmath172-feasible assignment @xmath48 is an assignment with the property that each job @xmath2 is assigned to a machine @xmath4 where @xmath174 .",
    "let @xmath48 be a @xmath172-feasible assignment .",
    "@xmath175 is a directed bipartite graph where @xmath176 consists of the job nodes , and @xmath177 consists of machine nodes . for any job node @xmath2 and any machine node @xmath4 ,",
    "if @xmath47 there is an arc in @xmath178 from @xmath4 to @xmath2 ; if @xmath179 and @xmath2 is feasible on machine @xmath4 , i.e. , @xmath180 , then there is an arc from @xmath2 to @xmath4 .    given a @xmath172-feasible assignment @xmath48 , the algorithm of @xcite partitions the set of machines to three subsets : @xmath181 ( overloaded ) , @xmath182 ( underloaded ) , and @xmath183 ( all the remaining machines ) .",
    "thus , @xmath184 .",
    "given an assignment @xmath48 , a machine @xmath185 is overloaded if the load on @xmath4 is at least @xmath186 .",
    "a machine @xmath187 is underloaded if the load on @xmath4 is at most @xmath188 .",
    "the remaining machines , which are neither overloaded nor underloaded , form the set @xmath189 .",
    "the algorithm unsplittable - blocking - flow@xmath190 starts with an initial @xmath172-feasible assignment of jobs to machines and iteratively improves the makespan until it obtains an assignment with makespan of @xmath191 , or declares that an assignment of makespan @xmath173 does not exist . in each iteration",
    ", the algorithm finds an augmenting path from an overloaded to an underloaded machine , and pushes jobs along this path , by performing a series of job reassignments between machines on that path .",
    "this results in balancing the load over the machines , i.e. , reducing the load of the source that is an overloaded machine , and increasing the load of the destination that is an underloaded machine , while preserving the load of all other machines .",
    "unsplittable - blocking - flow terminates after @xmath192 steps , where @xmath193 . for short ,",
    "we call this algorithm below @xmath194 .    algorithm @xmath194 ( with @xmath195 ) , combined with a binary search over the possible range of values for @xmath173 , can be used to obtain the approximation ratio of @xmath33 .",
    "the running time of the approximation algorithm is then factored by a value that is logarithmic in the size of the range in which we search for @xmath173 .",
    "thus , the algorithm of @xcite computes an assignment having makespan within a factor of @xmath33 from the optimal in time @xmath196 , where @xmath197 .                  throughout the execution of @xmath194 , augmenting paths from machines in @xmath206 to @xmath205 are found iteratively . along each of these paths ,",
    "the algorithm reassigns jobs between machines . applying the algorithm results in reducing the makespan and balancing the loads .",
    "the algorithm continues as long as there exists a path from @xmath206 to @xmath205 .",
    "[ thm : approx_ratio_restricted ] let @xmath198 be an instance of the restricted scheduling problem , with feasibility factor @xmath209 $ ] .",
    "if there exists @xmath210 such that @xmath211 then there exists a @xmath212-approximation algorithm for the makespan , whose running time is @xmath42 .",
    "[ lemma : ubf ] let @xmath198 be an instance of the restricted scheduling problem , with feasibility factor @xmath209 $ ] .",
    "then algorithm @xmath194 takes time @xmath192 , where @xmath213 .",
    "furthermore , for an initial assignment @xmath214 , @xmath194@xmath215 for @xmath216 and @xmath217 terminates with @xmath218 .",
    "let @xmath216 .",
    "we show that @xmath194@xmath215 terminates with @xmath219 .",
    "let @xmath95 be the assignment computed by @xmath194@xmath215 . by the observation ,",
    "the average machine load of @xmath220 is @xmath6 .",
    "assume that @xmath221 .",
    "then there exists a machine @xmath222 with load @xmath223 . since @xmath194 terminated , we know that there is no path from a machine in @xmath206 to a machine in @xmath205 in the graph @xmath224 .",
    "denote by @xmath225 the set of machines reachable from @xmath222 , @xmath226 .",
    "obviously , there is at least one job @xmath227 which is assigned to @xmath222 in @xmath95 .",
    "thus , there is an edge of @xmath228 in @xmath224 .",
    "if @xmath25 is the feasibility factor of @xmath198 , then there exists at least @xmath55 machines that are good for @xmath227 , which means that there exists an edge from @xmath227 to each of them . by appending each of these edges to @xmath228",
    "we get a directed path from @xmath222 to at least @xmath55 machines ( including @xmath222 )",
    ". therefore we can conclude that @xmath229 .",
    "we compute now a lower bound of the average machine load for @xmath95 .",
    "we sum the loads of all the machines @xmath230 . we know",
    "that @xmath231 , thus @xmath223 .",
    "we also know that there is no path from @xmath222 to machines in @xmath205 , and therefore @xmath232 .",
    "thus , for all @xmath233 @xmath234 holds .      we have shown that the sum of loads of the assignment @xmath95 is greater than @xmath236 .",
    "hence , the average load for @xmath95 is greater then @xmath6 in contradiction to the average load of the resulting assignment @xmath95 being exactly @xmath6 . for the analysis of the running time ,",
    "see @xcite .",
    "* proof of theorem [ thm : approx_ratio_restricted ] .",
    "* let @xmath198 be an instance of the restricted scheduling problem with feasibility factor @xmath25 .",
    "let @xmath195 and let @xmath48 be some initial @xmath172-feasible assignment .",
    "the average machine load of @xmath214 is @xmath217 . by lemma [ lemma : ubf ] ,",
    "when @xmath194@xmath215 terminates , we have that @xmath237 , i.e. , all machines are in @xmath183 or in @xmath205",
    ". therefore , the maximum load of the resulting assignment is at most @xmath238 .",
    "since the optimal makespan satisfies @xmath239 , and @xmath240 , we have an approximation ratio of @xmath241 . by lemma [ lemma : ubf ] ,",
    "the running time of our algorithm is @xmath242 .",
    "note that our algorithm has better running time than the algorithm of @xcite , which uses binary search to find the best value for @xmath173 yielding a @xmath5-approximation ratio to the minimum makespan .",
    "this results in an overall running time of @xmath196 , where @xmath243 is the sum of processing times of all jobs .",
    "t. ebenlendr , m. kral , and j. sgall .",
    "graph balancing : a special case of scheduling unrelated parallel machines . in _ proc .",
    "of the nineteenth annual acm - siam symposium on discrete algorithms _ , 483 - 490 , 2008 .",
    "m. gairing , t. lucking , m. mavronicolas , and b. monien . computing nash equilibria for scheduling on restricted parallel links .",
    "_ proceedings of the 36th annual acm symposium on the thoery of computing , stoc04 _ , 613 - 622 , 2004 ."
  ],
  "abstract_text": [
    "<S> we consider the problem of scheduling @xmath0 jobs to minimize the makespan on @xmath1 unrelated machines , where job @xmath2 requires time @xmath3 if processed on machine @xmath4 . a classic algorithm of lenstra et al . </S>",
    "<S> @xcite yields the best known approximation ratio of @xmath5 for the problem . improving </S>",
    "<S> this bound has been a prominent open problem for over two decades .    in this paper </S>",
    "<S> we obtain a tighter bound for a wide subclass of instances which can be identified efficiently . </S>",
    "<S> specifically , we define the _ feasibility factor _ of a given instance as the minimum fraction of machines on which each job can be processed . </S>",
    "<S> we show that there is a polynomial - time algorithm that , given values @xmath6 and @xmath7 , and an instance having a _ sufficiently large _ </S>",
    "<S> feasibility factor @xmath8 $ ] , either proves that no schedule of mean machine completion time @xmath6 and makespan @xmath7 exists , or else finds a schedule of makespan at most @xmath9 which is smaller than @xmath10 for a wide class of instances .    for the restricted version of the problem , where for each job </S>",
    "<S> @xmath2 and machine @xmath4 , @xmath11 , we show that a simpler algorithm yields a better bound , thus improving for highly feasible instances the best known ratio of @xmath12 , for any fixed @xmath13 , due to svensson @xcite . </S>"
  ]
}