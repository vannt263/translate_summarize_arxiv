{
  "article_text": [
    "_ probabilistic programs .",
    "_ classic imperative programs extended with _ random - value generators _ gives rise to probabilistic programs .",
    "probabilistic programs provide the appropriate framework to model applications ranging from randomized algorithms  @xcite , to stochastic network protocols  @xcite , to robot planning  @xcite , etc .",
    "nondeterminism plays a crucial role in modeling , such as , to model behaviors over which there is no control , or for abstraction .",
    "thus nondeterministic probabilistic programs are crucial in a huge range of problems , and hence their formal analysis has been studied across disciplines , such as probability theory and statistics  @xcite , formal methods  @xcite , artificial intelligence  @xcite , and programming languages  @xcite .    _",
    "basic termination questions .",
    "_ besides safety properties , the most basic property for analysis of programs is the liveness property .",
    "the most basic and widely used notion of liveness for programs is _ termination_. in absence of probability ( i.e. , for nonprobabilistic programs ) , the synthesis of _ ranking functions _ and proof of termination are equivalent  @xcite , and numerous approaches exist for synthesis of ranking functions for nonprobabilistic programs  @xcite .",
    "the most basic extension of the termination question for probabilistic programs is the _ almost - sure termination _ question which asks whether a program terminates with probability  1 .",
    "another fundamental question is about _ finite termination _",
    "( aka positive almost - sure termination  @xcite ) which asks whether the expected termination time is finite .",
    "the next interesting question is the _ concentration _ bound computation problem that asks to compute a bound @xmath0 such that the probability that the termination time is below @xmath0 is concentrated , or in other words , the probability that the termination time exceeds the bound @xmath0 decreases exponentially .",
    "_ previous results .",
    "_ we discuss the relevant previous results for termination analysis of probabilistic programs .",
    "_ probabilistic programs . _",
    "first , quantitative invariants was introduced to establish termination of discrete probabilistic programs with demonic nondeterminism  @xcite , this was extended in  @xcite to _ ranking supermartingales _ resulting in a sound ( but not complete ) approach to prove almost - sure termination of probabilistic programs without nondeterminism but with integer- and real - valued random variables from distributions like uniform , gaussian , and poison , etc . for probabilistic programs with countable state - space and without nondeterminism ,",
    "the lyapunov ranking functions provide a sound and complete method for proving finite termination  @xcite .",
    "another sound method is to explore bounded - termination with exponential decrease of probabilities  @xcite through abstract interpretation  @xcite . for probabilistic programs with nondeterminism , a sound and complete characterization for finite termination through ranking - supermartingale",
    "is obtained in  @xcite .",
    "ranking supermartingales thus provide a very powerful approach for termination analysis of probabilistic programs .",
    "_ ranking functions / supermartingales synthesis .",
    "_ synthesis of linear ranking - functions / ranking - supermartingales has been studied extensively in  @xcite . in context of probabilistic programs , the algorithmic study of synthesis of linear ranking supermartingales for probabilistic programs ( cf .",
    "@xcite ) and probabilistic programs with nondeterminism ( cf .",
    "our previous result  @xcite ) has been studied .",
    "the major technique adopted in these results is farkas lemma  @xcite which serves as a complete reasoning method for linear inequalities . beyond linear ranking functions ,",
    "polynomial ranking functions have also been considered .",
    "heuristic synthesis method of polynomial ranking - functions is studied in  @xcite : cook  _ et al . _",
    "@xcite checked termination of deterministic polynomial programs by detecting divergence on program variables and bradley  _ et al . _",
    "@xcite extended to nondeterministic programs through an analysis on finite differences over transitions .",
    "more general methods for deterministic polynomial programs are given by  @xcite where cousot  @xcite uses lagrangian relaxation , and shen  _ et al . _",
    "@xcite use putinar s positivstellensatz  @xcite .",
    "complete methods of synthesizing polynomial ranking - functions for nondeterministic programs are studied by yang  _ et al . _",
    "@xcite , where a complete method through root classification / real root isolation of semi - algbebraic systems and quantifier elimination is proposed .",
    "to summarize , while many different approaches has been studied , the algorithmic study of synthesis of ranking supermartingales for probabilistic programs has only been limited to linear ranking supermartingales .",
    "for example ,  @xcite presents a method of synthesis of linear ranking supermartingales for probabilistic programs without nondeterminism , and identifies synthesis of more general nonlinear supermartingales , or extension to probabilistic programs with nondeterminism as important challenges .",
    "while the approach of  @xcite has been extended to probabilistic programs with nondeterminism in our previous result  @xcite , it is restricted to linear ranking supermartingales .",
    "hence there is no algorithmic approach to handle nonlinear ranking supermartingales even for probabilistic programs without nondeterminism .    _ our contributions .",
    "_ our contributions are as follows :    _ polynomial ranking supermartingales .",
    "_ first , we extend the notion of linear ranking supermartingales ( lrsm ) to polynomial ranking supermartingales ( prsm ) .",
    "we show ( by a straightforward extension of lrsm ) that prsm implies both almost - sure as well as finite termination .",
    "_ positivstellensatz s . _",
    "second , we conduct a detailed investigation on the application of positivstellensatz s ( german for `` positive - locus - theorem '' which is related to polynomials over semialgebraic sets ) ( cf . sect .",
    "[ sect : positivstellensatz ] ) to synthesis of prsms over nondeterministic probabilistic programs . to the best of our knowledge ,",
    "this is the first result which demonstrates the synthesis of a polynomial subclass of ranking supermartingales through positivstellensatz s .",
    "_ new approach for non - probabilistic programs .",
    "_ our results also extend existing results for nonprobabilistic programs .",
    "we present the first result that uses schmdgen s positivstellensatz  @xcite and handelman s theorem  @xcite to synthesize polynomial ranking - functions for nonprobabilistic programs .",
    "_ efficient approach . _",
    "the previous complete method  @xcite suffers from high computational complexity due to the use of quantifier elimination .",
    "in contrast , our approach ( sound but not complete ) is efficient since the synthesis can be accomplished through linear or semi - definite programming , which can mostly be solved in polynomial time in the problem size  @xcite . in particular",
    ", our approach does not require quantifier elimination , and works for nondeterministic probabilistic programs .",
    "_ experimental results .",
    "_ we demonstrate the effectiveness of our approach on several classical examples .",
    "we show that on classical examples , such as gambler s ruin , and random walk , our approach can synthesize a prsm efficiently .",
    "for these examples , lrsms do not exist , and many of them can not be analysed efficiently by previous approaches .",
    "_ technical contributions and novelty .",
    "_ the main technical contributions and novelty are :    while farkas lemma and motzkin s transposition theorem are standard techniques to linear ranking functions or linear ranking supermartingales , they are not sufficient for prsms . instead ,",
    "our technical contributions is to use various positivstellensatz s to synthesize prsms .    even for nonprobabilistic programs ,",
    "only a limited number of positivstellensatz s have been used , e.g. ,  @xcite ; some of the positivstellensatz s we use ( such as schmdgen s positivstellensatz  @xcite and handelman s theorem  @xcite ) have not even been used in the context of nonprobabilistic programs .    in summary , we study the use of positivstellensatz s for the first time for probabilistic programs , and for some of them , even for the first time for nonprobabilistic programs , and show that how they can be used for efficient algorithms for program analysis .",
    "_ organization of the paper .",
    "_ in sect .",
    "[ sect : probprog ] , we present the syntax and semantics of probabilistic programs . in sect .",
    "[ sect : terminationquestion ] , we define the problems to be studied . in sect .  [ sect : prsm ] , we develop the notion of polynomial ranking supermartingale . then in sect .",
    "[ sect : synthesisalgorithm ] , we present positivstellensatz and our algorithm to synthesize polynomial ranking supermartingales . in sect .",
    "[ sect : experimental ] , we present our experimental results .",
    "finally , sect .",
    "[ sect : conclusion ] concludes the paper .",
    "for a set @xmath1 , we denote by @xmath2 the cardinality of @xmath1 . we denote by @xmath3 , @xmath4 , @xmath5 , and @xmath6 the sets of all positive integers , non - negative integers , integers , and real numbers , respectively .",
    "we use boldface notation for vectors , e.g. @xmath7 , @xmath8 , etc , and we denote an @xmath9-th component of a vector @xmath7 by @xmath10 $ ] .    _ polynomial predicates .",
    "_ let @xmath11 be a finite set of variables endowed with a fixed linear order under which we have @xmath12 .",
    "we denote the set of real - coefficient polynomials by @xmath13}}$ ] or @xmath14}}$ ] .",
    "polynomial constraint _ over @xmath11 is a logical formula of the form @xmath15 , where @xmath16 are polynomials over @xmath11 and @xmath17 .",
    "a _ propositional polynomial predicate _ over @xmath11 is a propositional formula whose all atomic propositional literals are either @xmath18 or polynomial constraints over @xmath11 .",
    "the validity of the satisfaction assertion @xmath19 between a vector @xmath20 ( interpreted in the way that the value for @xmath21 @xmath22 is @xmath23 $ ] ) and a propositional polynomial predicate @xmath24 is defined in the standard way w.r.t polynomial evaluation and normal semantics for logical connectives ( cf .",
    "appendix  [ sect : predicate ] ) .",
    "the satisfaction set of a propositional polynomial predicate @xmath24 is defined as @xmath25 . for",
    "more on polynomials ( e.g. , polynomial evaluation and arithmetic over polynomials ) , we refer to the textbook  ( * ? ? ?",
    "* chapter 3 ) .    _ probability space . _",
    "a _ probability space _ is a triple @xmath26 , where @xmath27 is a non - empty set ( so - called _ sample space _ ) , @xmath28 is a _",
    "@xmath29-algebra _ over @xmath27 ( i.e. , a collection of subsets of @xmath27 that contains the empty set @xmath30 and is closed under complementation and countable union ) , and @xmath31 is a _ probability measure _ on @xmath28 , i.e. , a function @xmath32 $ ] such that ( i ) @xmath33 and ( ii ) for all set - sequences @xmath34 that are pairwise - disjoint ( i.e. , @xmath35 whenever @xmath36 ) it holds that @xmath37  .    _ random variables and filtrations . _ a _ random variable _",
    "@xmath11 in a probability space @xmath26 is an @xmath28-measurable function @xmath38 , i.e. , a function satisfying the condition that for all @xmath39 , the set @xmath40 belongs to @xmath28 .",
    "the _ expected value _ of a random variable @xmath11 , denote by @xmath41 , is defined as the lebesgue integral of @xmath11 with respect to @xmath31 , i.e. , @xmath42  ; the precise definition of lebesgue integral is somewhat technical and is omitted here ( cf .  ( * ? ? ?",
    "* chapter 5 ) for a formal definition ) .",
    "a _ filtration _ of a probability space @xmath26 is an infinite sequence @xmath43 of @xmath29-algebras over @xmath27 such that @xmath44 for all @xmath45 .      * the syntax . *",
    "the class of probabilistic programs we consider encompasses basic programming mechanisms such as assignment statement ( indicated by ` : = ' ) , while - loop , if - branch , basic probabilistic mechanisms such as probabilistic branch ( indicated by ` prob ' ) and random sampling , and demonic nondeterminism indicated by ` @xmath46 ' .",
    "variables ( or identifiers ) of a probabilistic program are of _ real _ type , i.e. , values of the variables are real numbers ; moreover , variables are classified into _",
    "program _ and _ sampling _ variables , where program variables receive their values through assignment statements and sampling variables do through random samplings .",
    "we consider that each sampling variable @xmath47 is _ bounded _ , i.e. , associated with a one - dimensional cumulative distribution function @xmath48 and a non - empty bounded interval @xmath49 such that any random variable @xmath50 which respects @xmath48 satisfies that @xmath50 lies in the bounded interval with probability  1 .",
    "due to space limit , we put details ( e.g. , grammar ) in appendix  [ app : syntax ] .",
    "an example probabilistic program is illustrated in example  [ ex : runningexample ] .    ....    1",
    ": while $ 1\\le x\\wedge x\\le 10 $ do 2 :    if $ \\star$ then   3 :       $ x:=x+r$         else   4 :      if prob($0.51 $ ) then   5 :         $ x:=x-1 $          else   6 :         $ x:=x+1 $          fi       fi     od 7 : ....    [ ex : runningexample ] consider the running example depicted in fig .",
    "[ fig : runningexample ] , where @xmath47 is a sampling variable with the two - point distribution @xmath51 where the probability to take values @xmath52 and @xmath53 are both @xmath54 .",
    "the probabilistic program models a scenario of gambler s ruin where the gambler has initial money @xmath55 and repeats gambling until he wins more than @xmath56 or lose all his money .",
    "the result of a gamble is nondeterministic : either win @xmath52 with probability @xmath54 ( nondeterministic branch ) ; or lose with probability @xmath57 ( the probabilistic branch ) .",
    "the numbers @xmath58 on the left are the program counters for the program , where @xmath52 is the initial program counter and @xmath59 the terminal program counter .    ( while ) at ( 1.5,-1.5 ) @xmath52 ; ( demon ) at ( 3,-1.5 ) @xmath60 ; ( proba ) at ( 2.5,0 ) @xmath61 ; ( probb ) at ( 2.5,-3.5 ) @xmath62 ; ( assc ) at ( 1.8,-3.5 ) @xmath63 ; ( assd ) at ( 2.5,-2 ) @xmath64 ; ( fin ) at ( 1.2,0 ) @xmath59 ;    ( while ) to node[auto , font= ] @xmath65 ( fin ) ; ( while ) to node[auto , font= ] @xmath66 ( demon ) ;    ( proba ) ",
    "node[auto , swap , pos=0.7 ] @xmath67 ( proba-|while )  ( while ) ; ( probb ) ",
    "node[auto , font= ] @xmath57 ( assc ) ; ( probb ) ",
    "node[auto , font= ] @xmath68 ( assd ) ;    ( demon ) ",
    "node[auto , font= ] @xmath46 ( demon|-proba ) ",
    "( proba ) ; ( demon ) ",
    "node[auto , font= ] @xmath46 ( demon|-probb ) ",
    "( probb ) ; ( assc )  ( assc-|while ) ",
    "node[auto , pos=0.2 ] @xmath69 ( while ) ; ( assd ) ",
    "node[auto ] @xmath70 ( assd-|while.305 )  ( while.-55 ) ;    * the semantics .",
    "* we use control flow graphs to capture the semantics of probabilistic programs , which we define below .",
    "[ def : cfg ] a _ control flow graph _ ( cfg ) is a tuple @xmath71 with the following components :    @xmath72 is a finite set of _ labels _ partitioned into four pairwise - disjoint subsets @xmath73 , @xmath74 and @xmath75 of demonic , probabilistic , conditional - branching ( branching for short ) and assignment labels , resp . ; and @xmath76 is a special label not in @xmath77 called the _ terminal label _ ;    @xmath78 and @xmath79 are disjoint finite sets of real - valued _ program _ and _ sampling variables _ respectively ;    @xmath80 is a _ transition relation _ in which every member ( called _ transition _ ) is a tuple of the form @xmath81 for which @xmath82 ( resp .",
    "@xmath83 ) is the _ source label _",
    "( resp . _ target label _ ) in @xmath72 and @xmath84 is either a real number in @xmath85 if @xmath86 , or @xmath46 if @xmath87 , or a propositional polynomial predicate if @xmath88 , or an _ update function _",
    "@xmath89 if @xmath90 .",
    "w.l.o.g , we assume that @xmath91 . intuitively",
    ", labels in @xmath73 correspond to demonic statements indicated by ` @xmath46 ' ; labels in @xmath92 correspond to probabilistic - branching statements indicated by ` * * prob * * ' ; labels in @xmath93 correspond to conditional - branching statements indicated by some propositional polynomial predicate ; labels in @xmath75 correspond to assignments indicated by ` @xmath94 ' and the terminal label @xmath76 denotes the termination of a program . the transition relation @xmath80 specifies the transitions between labels together with the additional information specific to different types of labels .",
    "the update functions are interpreted as follows : we first fix two linear orders on @xmath78 and @xmath79 so that @xmath95 and @xmath96 , interpreting each vector @xmath20 ( resp .",
    "@xmath97 ) as a _ valuation _ of program ( resp . sampling ) variables in the sense that the value of @xmath21 ( resp .",
    "@xmath98 ) is @xmath23 $ ] ( resp .",
    "$ ] ) ; then each update function @xmath100 is interpreted as a function which transforms a valuation @xmath20 before the execution of an assignment statement into @xmath101 after the execution of the assignment statement , where @xmath102 is the valuation on @xmath79 obtained from a sampling before the execution of the assignment statement .",
    "it is intuitively clear that any probabilistic program can be naturally transformed into a cfg .",
    "informally , each label represents a program location in an execution of a probabilistic program for which the statement of the program location is the next to be executed .",
    "a detailed construction is provided in appendix  [ app : cfg ] .",
    "[ ex : runningcfg ] the control flow graph of the running example ( example  [ ex : runningexample ] ) is depicted in fig .",
    "[ fig : runningcfg ] , where vertices correspond to labels specified in fig .",
    "[ fig : runningexample ] .",
    "now we present the semantics of probabilistic programs . in the rest of the section , we fix a probabilistic program @xmath103 with the set @xmath95 of program variables and the set @xmath96 of sampling variables , and let @xmath71 be its associated cfg .",
    "we also fix @xmath104 and resp .",
    "@xmath105 to be the label corresponding to the first statement to be executed in @xmath103 and resp .",
    "the initial valuation of program variables .",
    "[ [ the - semantics . ] ] the semantics .",
    "+ + + + + + + + + + + + + +    a _ configuration _ ( for @xmath103 ) is a tuple @xmath106 where @xmath107 and @xmath20 .",
    "a _ finite path _",
    "( of @xmath103 ) is a finite sequence of configurations @xmath108 such that for all @xmath109 , either ( i ) @xmath110 and @xmath111 ( i.e. , the program terminates ) ; or ( ii )  there exist @xmath112 and @xmath113 such that one of the following conditions hold : ( a )  @xmath114 and @xmath111 ( probabilistic or demonic transitions ) , ( b )  @xmath115 , @xmath111 and @xmath116 ( conditional - branch transitions ) , ( c )  @xmath117 and @xmath118 ( assignment transitions ) .",
    "a _ run _ ( of @xmath103 ) is an infinite sequence of configurations whose all finite prefixes are finite paths over @xmath103 .",
    "a configuration @xmath106 is _ reachable _ from the initial configuration @xmath119 if there exists a finite path @xmath108 such that @xmath120 .",
    "the probabilistic feature of @xmath103 can be captured by constructing a suitable probability measure over the set of all its runs . however , before this can be done , nondeterminism in @xmath103 needs to be resolved by some _",
    "scheduler_.    [ def : scheduler ] a _ scheduler _",
    "( for @xmath103 ) is a function which assigns to every finite path @xmath121 with @xmath122 a transition in @xmath80 with source label @xmath123 .",
    "the behaviour of @xmath103 under a scheduler @xmath29 is standard : at each step , @xmath103 first samples a real number for each sampling variable and then evolves to the next step according to its cfg or the scheduler choice ( the details are in appendix  [ app : semanticsdetails ] ) . in this way",
    ", the scheduler and random choices / samplings produce a run over @xmath103 .",
    "moreover , each scheduler @xmath29 induces a unique probability measure @xmath124 over the runs of @xmath103 . in the rest of the paper",
    ", we will use @xmath125 to denote the expected values of random variables under @xmath124 .    _ random variables and filtrations over runs .",
    "_ we define the following ( vectors of ) random variables on the set of runs of @xmath103 : @xmath126 and @xmath127  : each @xmath128 is the random variable representing the ( integer - valued ) label at the @xmath129-th step ; each @xmath130 is the vector of random variables such that each @xmath131 $ ] is the random variable representing the value of the program variable @xmath132 at the @xmath129-th step ; and each @xmath133 $ ] is the random variable representing the sampled value of the sampling variable @xmath134 at the @xmath129-th step .",
    "the filtration @xmath135 is defined such that each @xmath29-algebra @xmath136 is the smallest @xmath29-algebra that makes all random variables in @xmath137 and @xmath138 measurable .",
    "we will omit the superscript @xmath103 in all the notations above if it is clear from the context .    under the condition that each sampling variable is bounded , using an inductive argument it follows that each @xmath139 is a vector of bounded random variables .",
    "thus @xmath140}{|})$ ] exists for each random variable @xmath141 $ ] .",
    "below we define the notion of _ polynomial invariants _ which logically captures all reachable configurations .",
    "a polynomial invariant may be obtained through abstract interpretation  @xcite .    a _ polynomial invariant _ ( for @xmath103 )",
    "is a function @xmath142 assigning a propositional polynomial predicate over @xmath78 to every label in @xmath143 such that for all configurations @xmath106 reachable from @xmath119 in @xmath143 , it holds that @xmath144 .",
    "in this section , we first define the notions of almost - sure / finite termination and concentration bounds over probabilistic programs , and then describe the computational problems studied in this paper .",
    "below we fix a probabilistic program @xmath103 with its associated cfg @xmath71 and an initial configuration @xmath119 for @xmath103 .    a run @xmath145 over @xmath103",
    "is _ terminating _ if @xmath146 for some @xmath45 . the _ termination time _",
    "of @xmath103 is a random variable @xmath147 such that for each run @xmath145 , @xmath148 is the least number @xmath129 such that @xmath146 if such @xmath129 exists , and @xmath149 otherwise . the program @xmath103 is said to be _ almost - sure terminating _ ( resp . _",
    "finitely terminating _ ) if @xmath150 ( resp .",
    "@xmath151 ) for all schedulers @xmath29 ( for @xmath103 ) .    note that @xmath151 implies that @xmath150 , but the converse does not necessarily hold ( see  ( * ? ? ?",
    "* example  5 ) for an example ) .",
    "i.e. , finite - termination implies almost - sure termination , but not vice - versa . to measure the expected values of the termination time under all ( demonic ) schedulers ,",
    "we further define the quantity @xmath152  .",
    "a _ concentration bound _ for @xmath103 is a non - negative integer @xmath0 such that there exist real constants @xmath153 and @xmath154 , and for all @xmath155 we have @xmath156 .",
    "informally , a concentration bound characterizes exponential decrease of probability values of non - termination beyond the bound . on one hand ,",
    "it can be used to give an upper bound on probability of non - termination beyond a large step ; and on the other hand , it leads to an algorithm that approximates @xmath157 ( cf .",
    "* theorem 5 ) ) .    in this paper",
    ", we consider the algorithmic analysis of the following problems :    * input : * a probabilistic program @xmath103 , a polynomial invariant @xmath142 for @xmath103 and an initial configuration @xmath119 for @xmath103 ;    * output : ( almost - sure / finite termination ) * `` @xmath158 '' if the algorithm finds that @xmath103 is almost - sure / finite terminating and `` @xmath159 '' otherwise ;    * output : ( concentration on termination ) * a concentration bound if the algorithm finds one and `` @xmath159 '' otherwise .",
    "in this section , we develop the notion of polynomial ranking - supermartingale which is an extension of linear ranking - supermartingale  @xcite .",
    "we fix a probabilistic program @xmath103 , a polynomial invariant @xmath160 for @xmath103 and an initial configuration @xmath119 for @xmath103 .",
    "let @xmath71 be the associated cfg of @xmath103 , with @xmath95 and @xmath96 .",
    "we first present the general notion of _ ranking supermartingale _ , and then define that of _ polynomial ranking supermartingale_.    [ def : rsm ] a discrete - time stochastic process @xmath161 w.r.t a filtration @xmath162 is a _ ranking supermartingale _ ( rsm ) if there exist @xmath163 and @xmath164 such that for all @xmath165 , we have @xmath166 and it holds almost surely ( with probability  @xmath52 ) that @xmath167@xmath168 , where @xmath169 is the conditional expectation of @xmath170 given @xmath171 ( cf .",
    "* chapter  9 ) ) .",
    "informally , a polynomial ranking - supermartingale over @xmath103 is a polynomial instantiation of an rsm through certain function @xmath172 which satisfies that each @xmath173 ( for all @xmath107 ) is essentially a polynomial function over @xmath78 .",
    "given such a function @xmath174 , the intuition is to have conditions that make the stochastic process @xmath175 an rsm . to ensure this",
    ", we consider the conditional expectation @xmath176 ; this is captured by an extension of _ pre - expectation _",
    "@xcite from the linear to the polynomial case .",
    "below we define @xmath177 . for a function @xmath178 , we let @xmath179 be the function such that each @xmath180 is the expected value @xmath181 , where @xmath182 is any vector of independent random variables such that each @xmath183 $ ] is a random variable that respects the cumulative distribution function @xmath184 .    [",
    "def : preexpectation ] let @xmath185 be a function such that each @xmath173 ( for all @xmath186 ) is a polynomial function over @xmath78 .",
    "the function @xmath187 is defined by :    @xmath188 if @xmath86 ( probabilistic transitions ) ;    @xmath189 if @xmath87 ( nondeterministic transitions ) ;    @xmath190 if @xmath88 and @xmath191 is the only transition in @xmath80 such that @xmath19 ( conditional transitions ) ;    @xmath192 if @xmath193 , where @xmath194 is the function such that @xmath195 and @xmath196 is the only transition in @xmath80 ( assignment transitions ) ; and    @xmath197 if @xmath198 ( terminal location ) .    the following lemma establishes the relationship between pre - expectation and conditional expectation whose proof is in appendix  [ sect : prsmproof ] .",
    "[ lemma : condexp ] let @xmath185 be a function such that each @xmath173 ( for all @xmath186 ) is a polynomial function over @xmath78 , and @xmath29 be any scheduler . let the stochastic process @xmath199 be defined by : @xmath200 . then for all @xmath165 , we have @xmath201 .",
    "[ ex : preexpectation ] consider the running example in example  [ ex : runningexample ] with cfg in fig .",
    "[ fig : runningcfg ] .",
    "let @xmath174 be the function specified in the second and fifth column of table  [ tab : runningexample ] , where @xmath202 .",
    "then @xmath203 is given in the third and sixth column of table  [ tab : runningexample ] .",
    "note that the case for @xmath204 is obtained from @xmath205 , and the case for @xmath206 is from @xmath207 , where @xmath208 is the function @xmath209 .    .@xmath174 and @xmath203 for example  [ ex : runningexample ] and fig .",
    "[ fig : runningcfg ] [ cols=\"^,^,^,^,^,^\",options=\"header \" , ]     for all the examples we consider except logistic map , their almost - sure termination can not be answered by previous approaches . for the logistic - map example ,",
    "our reduction is to linear programming whereas existing approaches  @xcite reduce to semidefinite programming .",
    "in this paper , we extended linear ranking supermartingale ( lrsm ) for probabilistic programs proposed in  @xcite to polynomial ranking supermartingales ( prsm ) for nondeterministic probabilistic programs .",
    "we developed the notion of ( difference bounded ) prsm and proved that it is sound for almost - sure and finite termination , as well as for concentration bound ( theorem  [ thm : supermartingale - correctness ] and theorem  [ thm : concentration ] ) .",
    "then we developed an efficient ( sound but not complete ) algorithm for synthesizing prsms through positivstellensatz s ( cf .",
    "[ sect : positivstellensatz ] ) , proved its soundness ( theorem  [ thm : synthesissoundness ] ) and argued its semi - completeness ( remark  [ rmk : semicompleteness ] ) over an important class of programs . finally , our experiments demonstrate the effectiveness of our synthesis approach over various classical probabilistic of programs , where lrsms do not exist ( cf . example  [ ex : runningexample ] and remark  [ rmk : linearnotsuffice ] ) .",
    "directions of future work are to explore ( a )  more elegant methods for numerical problems related to semi - definite programming , and ( b )  other forms of rsms for more general class of probabilistic programs .",
    "we thank anonymous referees for valuable comments .",
    "we also thank hui kong for his help on sostools .",
    "the research was partly supported by austrian science fund ( fwf ) nfn grant no s11407-n23 ( rise / shine ) , erc start grant ( 279307 : graph games ) , erc advanced grant ( 267989 : quarem ) , and natural science foundation of china ( nsfc ) under grant no .",
    "61532019 .    10 [ 1]`#1 `    .",
    "http://sedumi.ie.lehigh.edu/ ( 2008 )    .",
    "http://www-01.ibm.com/software/integration/optimization/cplex-optimizer/ ( 2010 )    .",
    "http://www.cds.caltech.edu/sostools/ ( 2013 )    babic , d. , cook , b. , hu , a.j . ,",
    "rakamaric , z. : proving termination of nonlinear command sequences .",
    "formal asp .",
    "25(3 ) , 389403 ( 2013 )    baier , c. , katoen , j.p . :",
    "principles of model checking . mit press ( 2008 )",
    "basu , s. , pollack , r. , roy , m. : algorithms in real algebraic geometry .",
    "springer , 2nd edn .",
    "( 2006 )    billingsley , p. : probability and measure .",
    "wiley , 3rd edn .",
    "( 1995 )    bournez , o. , garnier , f. : proving positive almost - sure termination . in : giesl , j. ( ed . ) term rewriting and applications , 16th international conference , rta 2005 , nara , japan , april 19 - 21 , 2005 , proceedings .",
    "lecture notes in computer science , vol . 3467 , pp .",
    "323337 . springer ( 2005 ) , http://dx.doi.org/10.1007/978-3-540-32033-3_24    bradley , a.r . , manna , z. , sipma , h.b . : linear ranking with reachability . in : etessami , k. , rajamani ,",
    "computer aided verification , 17th international conference , cav 2005 , edinburgh , scotland , uk , july 6 - 10 , 2005 , proceedings .",
    "lecture notes in computer science , vol . 3576 , pp .",
    "491504 . springer ( 2005 )    bradley , a.r . ,",
    "manna , z. , sipma , h.b .",
    ": termination of polynomial programs . in : cousot",
    "@xcite , pp .",
    "113129    chakarov , a. , sankaranarayanan , s. : probabilistic program analysis with martingales . in : sharygina ,",
    "n. , veith , h. ( eds . ) computer aided verification - 25th international conference , cav 2013 , saint petersburg , russia , july 13 - 19 , 2013 . proceedings .",
    "lecture notes in computer science , vol",
    ". 8044 , pp .",
    "511526 . springer ( 2013 )    chatterjee , k. , fu , h. , goharshady , a.k .",
    ": termination analysis of probabilistic programs through positivstellensatz s . in : cav ( 2016 )",
    "chatterjee , k. , fu , h. , novotn , p. , hasheminezhad , r. : algorithmic analysis of qualitative and quantitative termination problems for affine probabilistic programs . in : bodk , r. , majumdar , r. ( eds . ) proceedings of the 43rd annual acm sigplan - sigact symposium on principles of programming languages , popl 2016 , st .",
    "petersburg , fl , usa , january 20 - 22 , 2016 .",
    "327342 . acm ( 2016 ) , http://doi.acm.org/10.1145/2837614.2837639    coln , m. , sipma , h. : synthesis of linear ranking functions . in : margaria , t. , yi , w. ( eds . ) tools and algorithms for the construction and analysis of systems , 7th international conference , tacas 2001 held as part of the joint european conferences on theory and practice of software , etaps 2001 genova , italy , april 2 - 6 , 2001 , proceedings .",
    "lecture notes in computer science , vol . 2031 , pp .",
    "springer ( 2001 )    cousot , p. : proving program invariance and termination by parametric abstraction , lagrangian relaxation and semidefinite programming . in : cousot @xcite , pp .",
    "124    cousot , p. , cousot , r. : abstract interpretation : a unified lattice model for static analysis of programs by construction or approximation of fixpoints . in : graham , r.m . ,",
    "harrison , m.a . ,",
    "sethi , r. ( eds . ) conference record of the fourth acm symposium on principles of programming languages , los angeles , california , usa , january 1977 .",
    "acm ( 1977 )    cousot , r. ( ed . ) : verification , model checking , and abstract interpretation , 6th international conference , vmcai 2005 , paris , france , january 17 - 19 , 2005 , proceedings , lecture notes in computer science , vol .",
    "springer ( 2005 )    dubhashi , d. , panconesi , a. : concentration of measure for the analysis of randomized algorithms .",
    "cambridge university press , new york , ny , usa , 1st edn .",
    "( 2009 )    durrett , r. : probability : theory and examples ( second edition ) .",
    "duxbury press ( 1996 )    esparza , j. , gaiser , a. , kiefer , s. : proving termination of probabilistic programs using patterns . in : madhusudan ,",
    "p. , seshia , s.a .",
    "computer aided verification - 24th international conference , cav 2012 , berkeley , ca , usa , july 7 - 13 , 2012 proceedings .",
    "lecture notes in computer science , vol . 7358 , pp .",
    "springer ( 2012 )    farkas , j. : a fourier - fle mechanikai elv alkalmazsai ( hungarian ) .",
    "mathematikais termszettudomnyi rtesit 12 , 457472 ( 1894 )    fioriti , l.m.f . ,",
    "hermanns , h. : probabilistic termination : soundness , completeness , and compositionality . in : rajamani ,",
    "s.k . , walker , d. ( eds . ) proceedings of the 42nd annual acm sigplan - sigact symposium on principles of programming languages , popl 2015 , mumbai , india , january 15 - 17 , 2015 .",
    "489501 . acm ( 2015 )    floyd , r.w . : assigning meanings to programs .",
    "mathematical aspects of computer science 19 , 1933 ( 1967 )    foster , f.g . : on the stochastic matrices associated with certain queuing processes .",
    "the annals of mathematical statistics 24(3 ) , pp .",
    "355360 ( 1953 )    grtschel , m. , lovasz , l. , schrijver , a. : geometric algorithms and combinatorial optimization .",
    "springer - verlag berlin heidelberg ( 1993 )    handelman , d. : representing polynomials by positive linear functions on compact convex polyhedra .",
    "pacific j. math .",
    "132 , 3562 ( 1988 )    hoeffding , w. : probability inequalities for sums of bounded random variables .",
    "journal of the american statistical association 58(301 ) , 1330 ( 1963 )    horn , r.a . ,",
    "johnson , c.r . :",
    "matrix analysis .",
    "cambridge university press , 2nd edn .",
    "( 2013 )    howard , h. : dynamic programming and markov processes .",
    "mit press ( 1960 )    hungerford , t.w . :",
    "springer ( 1974 )    kaelbling , l.p . ,",
    "littman , m.l .",
    ", cassandra , a.r . : planning and acting in partially observable stochastic domains . artificial intelligence 101(1 ) , 99134 ( 1998 )    kaelbling , l.p . , littman , m.l .",
    ", moore , a.w . : reinforcement learning : a survey .",
    "journal of artificial intelligence research 4 , 237285 ( 1996 )    kemeny , j. , snell , j. , knapp , a. : denumerable markov chains .",
    "d. van nostrand company ( 1966 )    kress - gazit , h. , fainekos , g.e . ,",
    "pappas , g.j .",
    ": temporal - logic - based reactive mission and motion planning .",
    "ieee transactions on robotics 25(6 ) , 13701381 ( 2009 )    kwiatkowska , m.z . , norman , g. , parker , d. : prism 4.0 : verification of probabilistic real - time systems . in : gopalakrishnan , g. , qadeer , s. ( eds . ) computer aided verification - 23rd international conference , cav 2011 , snowbird , ut , usa , july 14 - 20 , 2011",
    ". proceedings .",
    "lecture notes in computer science , vol .",
    "6806 , pp .",
    "585591 . springer ( 2011 )    mciver , a. , morgan , c. : developing and reasoning about probabilistic programs in _ pgcl_. in : cavalcanti , a. , sampaio , a. , woodcock , j. ( eds . )",
    "refinement techniques in software engineering , first pernambuco summer school on software engineering , psse 2004 , recife , brazil ,",
    "november 23-december 5 , 2004 , revised lectures .",
    "lecture notes in computer science , vol .",
    "3167 , pp .",
    "springer ( 2004 ) , http://dx.doi.org/10.1007/11889229_4    mciver , a. , morgan , c. : abstraction , refinement and proof for probabilistic systems .",
    "monographs in computer science , springer ( 2005 )    monniaux , d. : an abstract analysis of the probabilistic termination of programs . in : cousot , p.",
    "static analysis , 8th international symposium , sas 2001 , paris , france , july 16 - 18 , 2001 , proceedings .",
    "lecture notes in computer science , vol . 2126 , pp .",
    "springer ( 2001 ) , http://dx.doi.org/10.1007/3-540-47764-0_7    motwani , r. , raghavan , p. : randomized algorithms .",
    "cambridge university press , new york , ny , usa ( 1995 )    paz , a. : introduction to probabilistic automata ( computer science and applied mathematics ) . academic press ( 1971 )",
    "podelski , a. , rybalchenko , a. : a complete method for the synthesis of linear ranking functions . in : steffen , b. , levi , g. ( eds . ) verification , model checking , and abstract interpretation , 5th international conference , vmcai 2004 , venice , january 11 - 13 , 2004 , proceedings .",
    "lecture notes in computer science , vol . 2937 , pp .",
    "springer ( 2004 )    putinar , m. : positive polynomials on compact semi - algebraic sets .",
    "indiana univ .",
    "j. 42 , 969984 ( 1993 )    rabin , m. : probabilistic automata .",
    "information and control 6 , 230245 ( 1963 )    sankaranarayanan , s. , chakarov , a. , gulwani , s. : static analysis for probabilistic programs : inferring whole program properties from finitely many paths . in : pldi .",
    "447458 ( 2013 )    scheiderer , c. : positivity and sums of squares : a guide to recent results .",
    "the i m a volumes in mathematics and its applications 149 , 271324 ( 2008 )    schmdgen , k. : the @xmath210-moment problem for compact semi - algebraic sets .",
    "289 , 203206 ( 1991 )    schrijver , a. : theory of linear and integer programming .",
    "wiley - interscience series in discrete mathematics and optimization , wiley ( 1999 )    shen , l. , wu , m. , yang , z. , zeng , z. : generating exact nonlinear ranking functions by symbolic - numeric hybrid method .",
    "j. systems science & complexity 26(2 ) , 291301 ( 2013 )    sohn , k. , gelder , a.v . :",
    "termination detection in logic programs using argument sizes . in : rosenkrantz ,",
    "proceedings of the tenth acm sigact - sigmod - sigart symposium on principles of database systems , may 29 - 31 , 1991 , denver , colorado , usa . pp . 216226 .",
    "acm press ( 1991 )    tarski , a. : a decision method for elementary algebra and geometry . in : quantifier",
    "elimination and cylindrical algebraic decomposition , pp .",
    "texts and monographs in symbolic computation , springer vienna ( 1951 )    williams , d. : probability with martingales . cambridge university press ( 1991 )",
    "yang , l. , zhou , c. , zhan , n. , xia , b. : recent advances in program verification through computer algebra .",
    "frontiers of computer science in china 4(1 ) , 116 ( 2010 ) , http://dx.doi.org/10.1007/s11704-009-0074-7",
    "formally , the set of propositional polynomial predicates over @xmath11 is defined as the smallest set satisfying the following conditions :    each polynomial constraint over @xmath11 is a propositional polynomial predicate ;    both @xmath211 and @xmath212 are propositional polynomial predicates ;    if @xmath24 is a propositional polynomial predicate , then so is @xmath213 ;    if @xmath214 are propositional polynomial predicates , then so are @xmath215 and @xmath216 .",
    "the satisfaction relation @xmath217 between real vectors @xmath7 and propositional polynomial predicates @xmath24 is defined by :    @xmath218 and @xmath219 for all vectors @xmath7 ;    @xmath220 iff @xmath221  ;    @xmath222 iff @xmath223  ;    @xmath224 iff @xmath225 and @xmath226  ;    @xmath227 iff @xmath225 or @xmath226  .",
    "let @xmath228 and @xmath229 be the disjoint countable collections of _ program _ and _ sampling _ variables , respectively .",
    "we assume that each sampling variable @xmath47 be associated with a one - dimensional cumulative distribution function @xmath48 and a non - empty bounded interval @xmath49 in @xmath6 such that @xmath230 and @xmath231 , and the sampled values for @xmath47 fall in @xmath49 with probability  1 ( this is the rigorous condition of the boundedness of the sampling variables ) .    [",
    "[ the - syntax . ] ] the syntax .",
    "+ + + + + + + + + + +    the syntax of probabilistic programs is given by the grammar in figure  [ fig : syntax ] .",
    "the expressions @xmath232 and @xmath233 range over @xmath234 and finite sequences of program variables , respectively . the expressions @xmath235 and @xmath236 may be evaluated to any polynomial with variables in @xmath228 , any polynomial with variables in @xmath237 and any finite list of polynomials with variables in @xmath237 , respectively .",
    "the assignment statement @xmath238 specifies simultaneous update of program variables in @xmath239 by polynomial @xmath236 in sequel ; we thus assume that each instance of @xmath239 will contain distinct program variables and the length of each instance of @xmath239 will always be equal to the corresponding instance of @xmath236 . from the assignment statement one",
    "observes that sampling variables can only be used in the rhs of an assignment .",
    "sequential composition , if - branch and while - loop are indicated by semicolon , the keyword * if * and the keyword * while * , respectively .",
    "moreover , @xmath240 may be evaluated to any propositional polynomial predicate .",
    "[ [ the - if - then - else - statement . ] ] the `` if - then - else '' statement .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    the guard @xmath241 of each if - then - else statement is either a keyword @xmath46 representing demonic resolution of non - determinism , or a keyword @xmath242 ( @xmath243 being a number given in decimal representation ) representing the probabilistic choice that the if - branch is executed with probability @xmath244 and the then - branch with probability @xmath245 , or a propositional polynomial predicate , in which case the statement represents a standard deterministic conditional branching .",
    "below we fix a set @xmath78 of program variables and a set @xmath79 of sampling variables .",
    "we also fix two linear orders on @xmath78 and @xmath79 under which @xmath95 and @xmath247 .",
    "we recall that a _ valuation _ of program variables is a vector @xmath20 interpreted in the way that the actual value held by a program variable @xmath132 ( @xmath248 ) is @xmath10 $ ] ; similarly , a _ valuation _ of sampling variables is a vector @xmath97 such that the sampled value held by @xmath134 is @xmath249 $ ] .",
    "every update function @xmath100 in a cfg can then be viewed as a tuple @xmath250 , where each @xmath251 is of type @xmath252 .",
    "we use the following succinct notation for special update functions : by @xmath253 we denote the function which does not change the program variables at all , i.e. for every @xmath254 we have @xmath255 $ ] . for any @xmath256 functions @xmath257 and any sequence @xmath258 of @xmath256 distinct numbers in @xmath259 , we denote by @xmath260}$ ] the update function @xmath100 such that @xmath261 for @xmath262 and @xmath263 $ ] whenever @xmath264 .",
    "[ [ from - probabilistic - programs - to - cfgs . ] ] from probabilistic programs to cfgs .",
    "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +    to every probabilistic program @xmath103 with programs variables from @xmath78 and sampling variables from @xmath79 , we construct a cfg @xmath265 inductively on the structure of @xmath103",
    ". the cfg @xmath265 has @xmath78 and resp . @xmath79 as its set of program and resp .",
    "sampling variables . for each program @xmath103 ,",
    "the cfg @xmath265 involves two distinguished labels , namely @xmath266 and @xmath267 , that intuitively represent the label assigned to the first statement to be executed in @xmath103 and the terminal label of @xmath103 , respectively .",
    "the inductive construction is as follows .",
    "_ asssignments and skips .",
    "_ for @xmath268 or resp .",
    "@xmath269 , the cfg @xmath265 consists of a new assignment labels @xmath266 and a new terminal label @xmath267 , and a transition @xmath270},{\\ell}^{{\\mathit{out}}}_p)$ ] or resp .",
    "@xmath271 , where we treat each @xmath272 as a function through direct evaluation of variables .",
    "_ sequential statements . _ for @xmath273 , we take the disjoint union of the cfgs @xmath274 , @xmath275 , while redefining @xmath276 to be @xmath277 and putting @xmath278 and @xmath279 .    _ while statements . _ for @xmath280",
    ", we add a new terminal label @xmath267 , change @xmath281 to a branching label , add transitions @xmath282 and @xmath283 , and define @xmath284 .",
    "_ if statements .",
    "_ for @xmath285 , we consider different cases on @xmath286 : if @xmath286 is some @xmath287 , then we add a new probabilistic label @xmath266 together with two transitions @xmath288 and @xmath289 ; if @xmath286 is some propositional polynomial predicate @xmath24 then we add a new branching label @xmath266 together with transitions @xmath290 and @xmath291 ; otherwise , @xmath292 and we add a new demonic label @xmath266 together with transitions @xmath293 and @xmath294 . in any of the cases",
    "above , we also add a new terminal label @xmath267 and identify both @xmath276 and @xmath295 with @xmath267 .",
    "the behaviour of a probabilistic program @xmath103 accompanied with its cfg @xmath71 under a scheduler @xmath29 is described as follows .",
    "the program starts in the initial configuration @xmath119 .",
    "then in each _ step _ @xmath9 ( @xmath296 ) , given the current configuration @xmath297 , the next configuration @xmath298 is determined by the following procedure :    a valuation @xmath299 of the sampling variables is sampled according to the joint distribution of the cumulative distributions @xmath300 and independent of all previously - traversed configurations ( including @xmath301 ) , all previous samplings on @xmath302 and previous executions of probabilistic branches ;    if @xmath303 and @xmath304 is the finite path traversed so far ( i.e. , @xmath305 and @xmath306 ) with @xmath307 , then @xmath298 is set to be @xmath308 ;    if @xmath309 and @xmath310 are namely the two transitions in @xmath80 with source label @xmath311 , then with a bernoulli experiment independent of all previous samplings , probabilistic branches and traversed configurations , @xmath298 is set to be ( i ) @xmath312 with probability @xmath244 and ( ii ) @xmath313 with probability @xmath245 ;    if @xmath314 and @xmath315 are namely the two transitions in @xmath80 with source label @xmath311 , then @xmath298 is set to be ( i ) @xmath312 when @xmath316 and ( ii ) @xmath313 when @xmath317 ;    if @xmath318 and @xmath319 is the only transition in @xmath80 with source location @xmath311 , then @xmath298 is set to be @xmath320 ;    if @xmath321 then @xmath322 is set to be @xmath323 .",
    "* lemma  [ lemma : condexp ] . *",
    "let @xmath185 be a function such that each @xmath173 ( for all @xmath186 ) is a polynomial function over @xmath78 , and @xmath29 be any scheduler .",
    "let the stochastic process @xmath199 be defined by : @xmath200 .",
    "then for all @xmath165 , we have @xmath201 .    for all @xmath165 , from the syntax and semantics of probabilistic program",
    "we have @xmath324 where the terms are described below .",
    "@xmath325\\ ] ] where each random variable @xmath326 is the bernoulli random variable for the decision of the probabilistic branch and @xmath327 are the corresponding target labels from @xmath82 in @xmath80 .",
    "( note that all @xmath326 s are independent of @xmath328 . ) in other words , @xmath329 describes the semantics of statements with probabilistic labels . @xmath330\\ ] ] where @xmath331 is the only transition in @xmath80 with source label @xmath82 , describing the semantics of statements with assignment labels . @xmath332\\ ] ] which describes the semantics of statements with branching labels . @xmath333,\\overline{\\vec{x}}_{n}\\right)\\ ] ] where @xmath334 $ ] is the target label of the transition @xmath335 , describing the semantics of demonic labels .",
    "then from properties of conditional expectation  ( * ? ? ?",
    "* page 88 ) , one obtains : @xmath336 ( see below for details ) .",
    "this can be seen as follows .",
    "from the fact that @xmath337 , @xmath338 are measurable in @xmath328 , we have @xmath339 and similarly for @xmath338 . for @xmath329 and @xmath340",
    "we need their conditional expectation as @xmath341 and @xmath342 defined below : @xmath343\\ ] ] and @xmath344\\ ] ] where @xmath345 equals the function @xmath346 .",
    "note that the fact that @xmath347 is well - defined is because we consider polynomial functions ( i.e. , prsms ) .",
    "note that the case for @xmath348 is derived from the fact that each @xmath349 is a polynomial over @xmath11 and @xmath350 is independent of @xmath328 . now by definition , @xmath351 and @xmath352 then the result follows .    in the proof of the above result , which generalizes the existing proof from lrsm to prsm , the crucial property of prsm we use is for assignments ( locations in @xmath353 ) where we used the well - definedness of @xmath347 due to polynomials . for more general rsms",
    "if the well - definedness of @xmath347 can be ensured then our proof ensures that the above result holds as well .    to prove theorem  [ thm : supermartingale - correctness ]",
    ", one also needs an important property which states that an rsm falls below zero almost surely .    [",
    "prop : rsm]@xcite let @xmath161 be an rsm w.r.t a filtration @xmath162 and constants @xmath354 ( cf .",
    "definition  [ def : rsm ] ) .",
    "let @xmath355 be the random variable defined by @xmath356 with @xmath357 , denoting the first time @xmath129 that the rsm drops below  @xmath358",
    ". then @xmath359 and @xmath360  .",
    "now the proof for theorem  [ thm : supermartingale - correctness ] is as follows .",
    "* theorem  [ thm : supermartingale - correctness ] . *",
    "if there exists a @xmath361-prsm @xmath174 w.r.t @xmath362 with constants @xmath363 ( cf .",
    "definition  [ def : prsm ] ) , then @xmath103 is a.s . terminating and @xmath364 .",
    "let @xmath174 be a @xmath361-prsm and @xmath161 be the stochastic process defined in lemma  [ lemma : condexp ] .",
    "by lemma  [ lemma : condexp ] , c4 and the fact that @xmath365 , @xmath161 is a ranking - supermartingale ( w.r.t @xmath366 ) . then by c2 ,",
    "c3 and proposition  [ prop : rsm ] , @xmath367",
    "to prove theorem  [ thm : concentration ] , we need the following concentration inequality .",
    "[ thm : hoeffding ] let @xmath368 be a supermartingale w.r.t some filtration @xmath369 and @xmath370\\}_{n\\in\\mathbb{n}}$ ] be a sequence of intervals of positive length in @xmath371 . if @xmath372 is a constant random variable and @xmath373 $ ] a.s . for all @xmath374 , then @xmath375 for all @xmath374 and @xmath376 .",
    "now we fix a difference - bounded @xmath361-prsm @xmath174",
    "w.r.t @xmath377 $ ] . recall that @xmath378 . define the stochastic process @xmath379 by :",
    "@xmath380 the following proposition shows that @xmath379 is a supermartingale and satisfies the requirements of hoeffding s inequaltiy .",
    "[ prop : hoeffding ] @xmath379 is a supermartingale and @xmath381 $ ] almost surely for all @xmath382 .",
    "consider the following random variable : @xmath383 and observe that this is equal to @xmath384 . from the properties of conditional expectation  (",
    "* page 88 ) and the facts that ( i ) the event @xmath385 is measurable in @xmath171 ( which implies that @xmath386 ) ; and ( ii ) @xmath387 iff @xmath385 ( cf .",
    "conditions c2 and c3 ) , we have @xmath388 note that the inequality above is due to the fact that @xmath389 is a ranking supermartingale . moreover , since @xmath390 implies @xmath391 and @xmath392 we have that @xmath393 .",
    "hence we have @xmath394 hence @xmath381 $ ] .",
    "let @xmath395 .",
    "fix any demonic strategy @xmath29 . by hoeffing s inequality , for all @xmath396",
    ", we have @xmath397 . note that @xmath398 iff @xmath387 by conditions c2 and c3 of prsm .",
    "let @xmath399 and @xmath400 .",
    "note that with the conjunct @xmath385 we have that @xmath84 and @xmath401 coincide .",
    "thus , for @xmath402 we have @xmath403 for all @xmath404 .",
    "the first equality is obtained by simply adding @xmath84 on both sides , and the second equality uses that because of the conjunct @xmath385 we have @xmath405 which ensures @xmath406 .",
    "the first inequality is obtained by simply dropping the conjunct @xmath385 .",
    "the following equality is by definition , and the final inequality is an application of hoeffding s inequality .",
    "the above result holds for general difference - bounded rsms and does not rely on the fact that it is a prsm .",
    "* theorem  [ thm : prsmdecision]*. the problem whether a ( difference - bounded ) @xmath361-prsm w.r.t @xmath362 exists is decidable .",
    "let @xmath407 be the set of all monomials of degree no greater than @xmath361 .",
    "let a template for a @xmath361-prsm be @xmath408 , where @xmath409 are scalar variables to be resolved .",
    "then it is straightforward that conditions c1-c4 can be directly encoded as formulae in the first - order theory of reals which is first existentially quantified over the variables @xmath410 and then universally quantified over the vector variable @xmath7 .",
    "the conditions for difference - bounded prsms can also be encoded as formulae which are firstly existentially quantified over the scalar variables @xmath411 and then universally quantified over vector variable @xmath7 .",
    "thus , the existence a ( difference - bounded ) @xmath361-prsm is reduced to the validity of a formula in the first - order theory of reals , which is decidable  @xcite .",
    "* theorem  [ thm : synthesissoundness ] . *",
    "any function @xmath174 synthesized through the algorithm prsmsynth is a valid prsm .    to prove the soundness we observe that steps  1 - 3 of the algorithm are basically instantiation of the template and obtaining the coefficients .",
    "step  4 is the pre - expectation computation based on the definition .",
    "the crucial step is step  5 and step  6 .",
    "the soundness of step  5 and step  6 follows from the soundness of positivstellensatz s ( cf .",
    "theorem  [ thm : schmuedgen ] to  [ thm : handelman ] ) regardless of the compactness of @xmath412 : either eq .",
    "( @xmath413 ) , eq .  ( @xmath414 ) or eq .  ( @xmath415 )",
    "guarantees that formula @xmath416 holds with ` @xmath417 ' replaced by ` @xmath418 ' .",
    "it ensures that the synthesized prsm is indeed a prsm .",
    "in the following description of the programs , we use `` @xmath419 '' for an abbreviation of `` @xmath420 '' , and `` @xmath421 '' as a compact form for assignment `` @xmath422 '' .",
    "we also use @xmath423 to denote the uniform distribution on @xmath377 $ ] . besides",
    ", the invariants are written in a bracketed fashion @xmath424 $ ] and are put directly after the labels they are attached to . in all our examples the invariants are straightforward to obtain directly from the program .",
    "[ ex : decay ] consider a decay example in fig .",
    "[ fig : decay ] which is a discretized randomized version of the system of differential equations @xmath425 ; the ode describes the exponential decay of any initial value to the origin .",
    "[ $ x^2+y^2\\le 2 $ ]   while $ 0.1\\le x^2+y^2\\le 1 $ do       [ $ 0.1\\le x^2+y^2\\le 1 $ ]       $ \\begin{pmatrix } x \\\\ y\\end{pmatrix}:=\\begin{pmatrix } \\mathrm{unif}(0.98 , 1)*x + 0.01*y \\\\",
    "\\mathrm{unif}(0.98 , 1)*y-0.01*x \\end{pmatrix}$   od ....    [ ex : randomwalk ] consider a demonic random - walk example in fig .",
    "[ fig : rdwalk ] which mimics a random walk within a bounded region ; the region is defined through two non - linear parabola curves instead of linear constraints .        while $ x^2+y\\le 1\\wedge x^2-y\\le 1 $ do      [ $ x^2+y\\le 1\\wedge x^2-y\\le 1 $ ]      $ \\begin{pmatrix } x \\\\ y\\end{pmatrix}:=\\begin{pmatrix } x+\\mathrm{unif}(-0.1,0.1 ) \\\\",
    "y+\\mathrm{unif}(-0.1,0.1 ) \\end{pmatrix}$   od ....      [ ex : gamblersruin2 ] consider a variant of example  [ ex : gamblersruin ] depicted in fig .",
    "[ fig : gamblersruin2 ] . note that this example is another affine program that also does not admit a linear ranking supermartingale .",
    "[ $ 0.7\\le x\\le y+0.3 $ ] while $ 1\\le x\\le y$ do      [ $ 1\\le x\\le y$ ]      if $ \\star$ do               [ $ 1\\le x\\le y$ ]                  $ x:=x+\\mathrm{unif}(-0.3,0.3)$       else           [ $ 1\\le x\\le y$ ]           if prob(0.5 ) do             [ $ 1\\le x\\le y$ ]             $ x:=x+0.1 $          else              [ $ 1\\le x\\le y$ ]",
    "$ x:=x-0.1 $          fi      fi od ....    .... [ $ x\\le m+0.2\\wedge n\\ge 0 $ ] while $ x\\le m$ do      [ $ x\\le m\\wedge n\\ge 0 $ ]      y:=0 ;      [ $ x\\le m\\wedge y\\le n+0.2 \\wedge n\\ge 0 $ ]      while $ y\\le n$ do          [ $ x\\le m\\wedge y\\le n \\wedge n\\ge 0 $ ]                 $ y:=y+\\mathrm{unif}(-0.1,0.2)$      od ;      [ $ x\\le m\\wedge y\\ge n \\wedge n\\ge 0 $ ]      $ x:=x+\\mathrm{unif}(-0.1,0.2)$ od ...."
  ],
  "abstract_text": [
    "<S> we consider nondeterministic probabilistic programs with the most basic liveness property of termination . </S>",
    "<S> we present efficient methods for termination analysis of nondeterministic probabilistic programs with polynomial guards and assignments . </S>",
    "<S> our approach is through synthesis of polynomial ranking supermartingales , that on one hand significantly generalizes linear ranking supermartingales and on the other hand is a counterpart of polynomial ranking - functions for proving termination of nonprobabilistic programs . </S>",
    "<S> the approach synthesizes polynomial ranking - supermartingales through positivstellensatz s , yielding an efficient method which is not only sound , but also semi - complete over a large subclass of programs . </S>",
    "<S> we show experimental results to demonstrate that our approach can handle several classical programs with complex polynomial guards and assignments , and can synthesize efficient quadratic ranking - supermartingales when a linear one does not exist even for simple affine programs . </S>"
  ]
}