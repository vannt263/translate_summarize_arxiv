{
  "article_text": [
    "shor s approach to factoring @xcite , ( by finding the order of elements in the multiplicative group of integers mod @xmath0 , referred to as @xmath1 ) is to extract the period in a superposition by applying a fourier transform .",
    "another approach , based on kitaev s technique @xcite , is to estimate an eigenvalue of a certain unitary operator .",
    "the difference between the two analyses is that the first one considers ( or even measures or observes ) the _ target _ or _ output _ register in the standard computational basis , while the analysis we detail here considers the target register in a basis containing eigenvectors of unitary operators related to the function @xmath2 .",
    "the actual network of quantum gates , as highlighted in @xcite , is the same for both algorithms ; it is helpful to understand both approaches . in some cases , which we discuss in sect .",
    "[ control.bit ] , this approach suggests implementations which do not require a register of control qubits .",
    "a more general formulation of the order - finding problem as well as the discrete logarithm problem , and the abelian stabiliser problem , is the _",
    "hidden subgroup problem _ ( or the _ unknown _ subgroup problem @xcite ) . in the case",
    "that @xmath3 is presented as the product of a finite number of cyclic groups ( so @xmath3 is finitely generated and abelian ) , all of these problems are solved by the familiar sequence of a fourier transform , a function application , and an inverse fourier transform . in this paper we describe how this more general problem can also be viewed and analysed as an estimation of eigenvalues of unitary operators .",
    "let @xmath2 be a function from a finitely generated group @xmath3 to a finite set @xmath4 such that @xmath2 is constant on the cosets of a subgroup @xmath5 ( of finite index , since @xmath4 is finite ) , and distinct on each coset .",
    "the hidden subgroup problem is to find @xmath5 ( that is , a generating set for @xmath5 ) , given a way of computing @xmath2 .",
    "when @xmath5 is normal in @xmath3 , we could in fact decompose @xmath2 as @xmath6 , where @xmath7 is a homomorphism from @xmath3 to some finite group @xmath8 , and @xmath9 is some 1-to-1 mapping from @xmath8 to the set @xmath4 . in this case",
    ", @xmath5 corresponds to the kernel of @xmath7 and @xmath8 is isomorphic to @xmath10 .",
    "we will occasionally refer to this decomposition , which we illustrate in fig .",
    "[ draw_f ] .",
    "define the _ input size _",
    ", @xmath11 , to be of order @xmath12 $ ] . we will count the number of operations , or the _ running time _ , in terms of @xmath11 .",
    "an algorithm is considered _ efficient _ if its running time is polynomial in the input size . by _ elementary quantum operations _ , we are referring to a finite set of quantum logic gates which allow us to approximate any unitary operation .",
    "see @xcite for a discussion and further references .",
    "our running times will always refer to expected running times , unless explicitly stated otherwise . by _ expected running time _",
    "we are referring to the expected number of operations for _ any _ input ( and not just an average of the expected running times over all inputs ) .",
    "we should be clear about what it means to have a finitely generated group @xmath3 , and to be able to compute the function @xmath2 .",
    "this is difficult without losing some generality or being dry and technical , or both .",
    "the algorithms we describe only apply for groups @xmath3 which are represented as finite tuples of integers corresponding to the direct product of cyclic groups ( consequently , @xmath3 is finitely generated and abelian ) .",
    "conversely , for any finitely generated abelian @xmath3 , there is a temptation to point out that @xmath3 is isomorphic to such a direct product of cyclic groups , and _ assume _ that we can easily access this product structure .",
    "this is not always the case , even in cases of practical interest .",
    "for example , @xmath1 , the multiplicative group of integers modulo @xmath0 for some large integer @xmath0 , which is abelian of order @xmath13 ( the euler @xmath14-function ) and thus isomorphic to a product of cyclic groups of prime power order",
    ". we will not necessarily know @xmath13 or have a factorisation of it along with a set of generators for @xmath1 .",
    "however , in light of the quantum algorithms described in this paper , we could efficiently find such an isomorphism , thereby increasing the number of finitely generated abelian groups which can be efficiently expressed in a manner which allows us to employ these algorithms .",
    "we will however leave further discussion of these details to another note @xcite .",
    "when we talk about computing @xmath2 , we assume that we have some unitary operation @xmath15 which takes us from state @xmath16 to @xmath17 .",
    "it could , for example , take @xmath18 to @xmath19 , where @xmath20 denotes an appropriate group operation , such as addition modulo @xmath0 when the second register is used to represent the integers modulo @xmath0 .",
    "various cases of the hidden subgroup problem are described in @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , and @xcite .",
    "we note that @xcite also covers the case that @xmath2 is not necessarily distinct on each coset ( that is , @xmath9 is not 1-to-1 ) , and this is discussed in the appendix . finding the order @xmath21 of an element in a group @xmath8 of unknown size , or the period @xmath21 of a function @xmath2 , is a special case where @xmath22 and @xmath23 . for any generator @xmath24 of a finitely",
    "generated @xmath3 , we can use the algorithm in sect .",
    "[ period.find ] to find an integer @xmath25 such that @xmath26 , so that @xmath27 .",
    "we find this @xmath25 with @xmath28 applications of @xmath2 and @xmath29 other elementary quantum operations .",
    "we can then assume that @xmath24 is of order @xmath25 ( that is , factor @xmath30 out of @xmath3 ) , and in general assume that @xmath3 is a finite group .",
    "we give a few examples .    *",
    "deutsch s problem * : consider a function @xmath2 mapping @xmath31 to @xmath32 .",
    "then @xmath33 if and only if @xmath34 , where where @xmath5 is either @xmath35 or @xmath31 . if @xmath5 is @xmath35 , then @xmath2 is @xmath36 ( or _ balanced _ ) , and if @xmath5 is @xmath37 then @xmath2 is constant .",
    "@xcite @xcite    * simon s problem * : consider a function @xmath2 from @xmath38 to some set @xmath4 with the property that @xmath33 if and only if @xmath39 for some string @xmath40 of length @xmath41 . here @xmath42 is the hidden subgroup of @xmath38 .",
    "simon @xcite presents an efficient algorithm for solving this problem , and the solution to the hidden subgroup problem in the abelian case is a generalisation .",
    "* discrete logarithms * : let @xmath3 be the group @xmath43 where @xmath44 is the additive group of integers modulo @xmath21 .",
    "let the set @xmath4 be the subgroup generated by some element @xmath45 of a group @xmath8 , with @xmath46 .",
    "for example , @xmath47 , the multiplicative group of the field of order @xmath48 , where @xmath49 .",
    "let @xmath50 , and suppose @xmath51 .",
    "define @xmath2 to map @xmath52 to @xmath53 . here",
    "the hidden subgroup of @xmath3 is @xmath54 , the subgroup generated by @xmath55 .",
    "finding this hidden subgroup will give us the logarithm of @xmath56 to the base @xmath45 .",
    "the security of the u.s .",
    "digital signature algorithm is based on the computational difficulty of this problem in @xmath57 ( see @xcite for details and references ) . here",
    "the input size is @xmath58 .",
    "algorithm @xcite was the first to solve this problem efficiently . in this case",
    ", @xmath2 is also a homomorphism which can make implementations more simple as described in sect .",
    "[ control.bit ] .",
    "* self - shift - equivalent polynomials * : given a polynomial @xmath59 in @xmath41 variables @xmath60 , @xmath61 , @xmath62 over @xmath63 , the function @xmath2 which maps @xmath64 to @xmath65 is constant on cosets of a subgroup @xmath5 of @xmath66 .",
    "this subgroup @xmath5 is the set of self - shift - equivalences of the polynomial @xmath59 .",
    "grigoriev @xcite shows how to compute this subgroup .",
    "he also shows , in the case that @xmath48 has characteristic @xmath67 , how to decide if two polynomials @xmath68 and @xmath69 are shift - equivalent , and to generate the set of elements @xmath70 such that @xmath71 .",
    "the input size @xmath11 is at most @xmath72 .    * abelian stabiliser problem",
    "* : let @xmath3 be any group acting on a finite set @xmath4 .",
    "that is , each element of @xmath3 acts as a map from @xmath4 to @xmath4 , in such a way that for any two elements @xmath50 , @xmath73 for all @xmath74 . for a particular element @xmath75 of @xmath4 ,",
    "the set of elements which fix @xmath75 ( that is , the elements @xmath76 such that @xmath77 ) , form a subgroup .",
    "this subgroup is called the stabiliser of @xmath75 in @xmath3 , denoted @xmath78 .",
    "let @xmath79 denote the function from @xmath3 to @xmath4 which maps @xmath80 to @xmath81 .",
    "the hidden subgroup corresponding to @xmath79 is @xmath82 .",
    "the finitely generated abelian case of this problem was solved by kitaev @xcite , and includes finding orders and discrete logarithms as special cases .",
    "in this section , we review the relationship between phase estimation and the quantum fourier transform which was highlighted in @xcite .    the quantum fourier transform for the cyclic group of order @xmath0 , @xmath83 , maps @xmath84 so @xmath85 maps @xmath86 more generally , for any @xmath14 , @xmath87 , @xmath85 maps @xmath88 where the amplitudes @xmath89 are concentrated near values of @xmath75 such that @xmath90 are good estimates of @xmath14 .",
    "the closest estimate of @xmath14 will have amplitude at least @xmath91 .",
    "the probability that @xmath90 will be within @xmath92 of @xmath14 is at least @xmath93 .",
    "see @xcite for details in the case that @xmath0 is a power of @xmath67 ; the same proof works for any @xmath0 .",
    "thus to estimate @xmath14 such that , with probability at least @xmath94 , the error is less than @xmath95 , we should use a control register containing values from @xmath96 to @xmath97 and apply @xmath98 for any @xmath99 .",
    "for example , if we desire an error of at most @xmath100 with probability at least @xmath101 we could use @xmath102 . in practice , it will be best to use the @xmath0 that corresponds to the group that is easiest to represent and work with in the particular physical realisation of the quantum computer at hand .",
    "we expect that this @xmath0 will be a power of two .    for convenience",
    ", we will omit normalising factors in the remainder of this paper .",
    "it will also be convenient to have a compact notation for the state on the right hand side of ( [ approx ] ) which we consider to be a good estimator for @xmath103 .",
    "so let us refer to this state as @xmath104 or just @xmath105 if the value of @xmath0 is understood .",
    "lastly , we will use @xmath106 to denote @xmath107 .",
    "to restrict attention from finitely generated groups @xmath3 to finite groups we need to know how to solve the cyclic case ( just one generator ) , that is , to find the period of a function from @xmath108 to the set @xmath4 .",
    "we will first describe how to find the order of an element @xmath45 in a group @xmath8 , or equivalently , the period of the function @xmath109 , as shor @xcite did for the group @xmath110 , the multiplicative group of integers modulo @xmath0 .",
    "we will then show how to generalise it to find the period of any function @xmath111 .",
    "if @xmath2 were a homomorphism ( so @xmath9 is an isomorphism of @xmath8 , when @xmath2 is decomposed as @xmath112 ) , we would just be finding the order of @xmath113 in @xmath8 .",
    "the difference is that we are showing how to deal with a non - trivial @xmath9 which hides the homomorphism structure .",
    "the details will also help explain how to find hidden subgroups of finite abelian groups .",
    "we have an element @xmath45 from a group @xmath8 and we wish to find the smallest positive integer @xmath21 such that @xmath46 .",
    "the group @xmath8 is not necessarily abelian ; all that matters is that the subgroup generated by @xmath45 is abelian , and this is always true .",
    "the idea is to create an operator @xmath114 which corresponds to multiplication by @xmath45 ( so it maps @xmath115 to @xmath116 ) . since @xmath46 , then @xmath117 , the identity operator .",
    "hence the eigenvalues of @xmath114 are @xmath21th roots of unity , @xmath118 , @xmath119 . by estimating a random eigenvalue of @xmath114 , with accuracy @xmath120",
    ", we can determine the fraction @xmath121 .",
    "the denominator ( with the fraction in lowest terms ) will be a factor of @xmath21 . we thus seek to estimate an eigenvalue of @xmath114 ; note that @xmath122 .",
    "for any integer @xmath75 define @xmath123 to be the operator that maps @xmath115 to @xmath124 .",
    "define @xmath125 to be the operator which maps @xmath126 to @xmath127 .",
    "note that @xmath125 acts on two registers and @xmath128 is a variable which takes on the value in the first register , while @xmath123 acts on one register and @xmath75 is fixed .",
    "consider the eigenvectors @xmath129 of @xmath123 and respective eigenvalues @xmath130 .",
    "if we start with the superposition @xmath131 and then apply @xmath125 we get @xmath132 as discussed in the previous section , applying @xmath133 to the first register gives @xmath134 and thus a good estimate of @xmath121 .",
    "we will not typically have @xmath135 but we do know that @xmath136",
    ". therefore we can start with @xmath137 and then apply @xmath138 to the first register to produce @xmath139 we then apply @xmath125 to get @xmath140 followed by @xmath133 on the control register to yield @xmath141    observing the first register will give an estimate of @xmath121 for an integer @xmath25 chosen uniformly at random from the set @xmath142 . as shown in @xcite",
    ", we choose @xmath143 , and use the continued fractions algorithm to find the fraction @xmath121 . of course",
    ", we do not know @xmath21 , so we must either use an @xmath41 we know will be larger than @xmath144 , such as @xmath145 in the case that @xmath8 is @xmath146 .",
    "( alternatively , we could guess a lower bound for @xmath21 , and if the algorithm fails , subsequently double the guess and repeat . )",
    "we then repeat @xmath147 times to find @xmath21 .",
    "this algorithm thus uses @xmath147 exponentiations , or @xmath28 group multiplications , and @xmath29 elementary quantum operations to do the fourier transforms .",
    "we can factor the integer @xmath0 by finding orders of elements in @xmath1 .",
    "this uses only @xmath148 or @xmath149 elementary quantum operations , for @xmath150 ( or @xmath151 if we use fast fourier transform techniques ) .",
    "other deterministic factoring methods will factor @xmath0 in @xmath152 or @xmath153 steps , where @xmath154 .",
    "the best known rigorous probabilistic classical algorithm ( using index calculus methods ) @xcite uses @xmath155 elementary classical operations , @xmath156 .",
    "there is also an algorithm with a heuristic expected running time of @xmath157 elementary classical operations ( see @xcite for an overview and references ) for @xmath158 .",
    "thus , in terms of elementary operations , a quantum computer provides a drastic improvement over known classical methods to factor integers .      the above algorithm , as pointed out in @xcite , can be applied to a more general setting .",
    "replace the mapping from @xmath159 to @xmath160 with any function @xmath2 from the integers to some finite set @xmath4 .",
    "define @xmath161 to be an operator that maps @xmath162 to @xmath163 .",
    "this is a generalisation of @xmath123 except it does not matter how it is defined on values not in the range of @xmath2 , as long as it is unitary . define @xmath164 to be an operator which maps @xmath165 to @xmath166 .",
    "the following are eigenvectors of @xmath161 : @xmath167 with respective eigenvalues @xmath168 . as in ( [ order.one ] ) , we can start with @xmath169 except with our new , more general , definition of @xmath135 .",
    "we apply @xmath170 to the first register to produce ( [ order.two ] ) , and then apply @xmath164 to produce ( [ order.three ] ) , followed by @xmath171 to get ( [ order.four ] ) . observing the first register will give an estimate of @xmath121 for an integer @xmath25 chosen uniformly at random , and the same analysis as in the previous section applies to find @xmath21 .",
    "one important issue is how to compute @xmath164 only knowing how to compute @xmath2 .",
    "note that from ( [ order.two ] ) to ( [ order.three ] ) ( using the modified definition of @xmath135 ) we simply go from @xmath172 to @xmath173 which could be accomplished by applying @xmath15 , which we do have , to the starting state @xmath174 thus even if we do not know how to explicitly compute the operators @xmath161 , any operator @xmath15 which computes the function @xmath2 will give us the state ( [ main.equality ] ) .",
    "this state permits us to estimate an eigenvalue of @xmath161 which lets us find the period of the function @xmath2 with just @xmath147 applications of the operator @xmath15 and @xmath29 other elementary operations .",
    "the equality in ( [ main.equality ] ) is the key to the equivalence between the two approaches to these quantum algorithms . on the left hand side",
    "is the original approach ( @xcite , @xcite , @xcite ) which considers the target register in the standard computational basis .",
    "we can analyse the fourier transform of the preimages of these basis states , which is less easy when the fourier transforms do not exactly correspond to the group @xmath3 . on the right hand side of ( [ main.equality ] ) we consider the target register in a basis containing the eigenvectors of the unitary operators which we apply to it ( as done in @xcite and @xcite , for example ) , and",
    "this gives us ( [ order.three ] ) , from which it is easy to see and analyse the effect of the inverse fourier transform even when it does not perfectly match the size of @xmath3 .      as discussed in sect .",
    "[ unknown.subgroup ] , any finite abelian group @xmath3 is the product of cyclic groups . in light of the order - finding algorithm , which also permits us to factor , we can assume that the group @xmath3 is represented as a product of cyclic groups of prime power order .",
    "further , for any product of two groups @xmath175 and @xmath176 whose orders are coprime , any subgroup @xmath5 of @xmath177 must be equal to @xmath178 from some subgroups @xmath179 and @xmath180 of @xmath175 and @xmath176 respectively .",
    "we can therefore consider our function @xmath2 separately on @xmath175 and @xmath176 and determine @xmath179 and @xmath180 separately .",
    "thus we can further restrict ourselves to groups @xmath3 of prime power order .",
    "this not only simplifies any analysis , it could reduce the size of quantum control registers necessary in any implementation of these algorithms .",
    "let us thus assume that @xmath181 for some prime @xmath182 and positive integers @xmath183 .",
    "the ` promise ' is that @xmath2 is constant on cosets of a subgroup @xmath5 , and distinct on each coset .",
    "the hidden subgroup @xmath5 is @xmath184 . in practice",
    ", this will usually be a consequence of the nature of @xmath2 , as in the case of discrete logarithms where @xmath185 , or whenever @xmath2 is constructed as @xmath6 for some homomorphism @xmath7 from @xmath3 to some finite group @xmath8 , and a 1-to-1 mapping @xmath9 from @xmath8 to the set @xmath4 .",
    "let @xmath15 be an operator which maps @xmath186 to @xmath187 .",
    "define @xmath188 , @xmath189 , and so on .",
    "let us also consider an operator related to @xmath15 , @xmath190 , which maps @xmath191 to @xmath192 . in the case of simon s problem , the operator @xmath193 maps @xmath194 to @xmath195 @xmath196 and does nothing to @xmath197 .    for each @xmath198 , @xmath199 , satisfying @xmath200 define @xmath201 we are summing over a set of representatives of the cosets of @xmath5 modulo @xmath3 , and by condition ( [ orth ] ) on @xmath202 , this sum is well - defined .",
    "let @xmath203 denote the set of @xmath202 satisfying ( [ orth ] ) , which corresponds to the group of characters of @xmath10",
    ". the @xmath204 are eigenvectors of each @xmath205 , with respective eigenvalues @xmath206 . by determining these eigenvalues , for @xmath207",
    ", we will determine @xmath202 .",
    "if we had @xmath204 in an auxiliary register , we could estimate @xmath208 using @xmath209 by the technique of the previous section .",
    "if we use @xmath210 we would determine @xmath211 exactly , or we could use the simpler @xmath212 , for some @xmath213 , and obtain @xmath211 with high probability . for simplicity , we will use @xmath210 . in practice we could use @xmath212 for a large enough @xmath25 so that the probability of error is sufficiently small .    by estimating @xmath208 for @xmath214 , we determine @xmath202 .",
    "the algorithm starts by preparing @xmath41 control registers in the state @xmath215 and one _ target _ or _ auxiliary _ register in the state @xmath204 , applies the appropriate fourier transforms to produce @xmath216 followed by @xmath190 for @xmath217 , using the @xmath218th register as the control and @xmath204 as the target , to produce @xmath219 then apply @xmath210 to the @xmath218th control register for each @xmath218 to yield @xmath220 from which we can extract @xmath202 . as in the previous section",
    ", we do not know how to construct @xmath204 , but we do know that @xmath221 so we start with @xmath222 apply fourier transforms to get @xmath223 then apply @xmath190 using the @xmath218th register as a control register , for @xmath217 , and the last register as the target register to produce    @xmath224    we finally apply @xmath210 to the @xmath218th control register for @xmath207 , to produce @xmath225 observing the first register lets us sample the @xmath202 s uniformly at random , and thus with @xmath28 repetitions we will , by ( [ orth ] ) , have enough independent linear relations for us to determine a generating set for @xmath5 .",
    "for example , in the case of simon s problem , the @xmath226 all satisfy @xmath227 , where @xmath228 .",
    "we could also guarantee that each new non - zero element of @xmath203 will increase the span by a technique discussed in the appendix .",
    "this analysis of eigenvectors and eigenvalues is based on the work in @xcite .",
    "the problem is that , unlike in @xcite , we do not always have the operator @xmath190 .",
    "however , note that , like in sect . [ period.find ] , going from ( [ before ] ) to ( [ after ] ) maps @xmath229 to @xmath230    @xmath231    we can create state ( [ after ] ) by applying @xmath15 , which we do have , to the starting state @xmath232 and proceeding with the remainder of the algorithm . as in sect .",
    "[ period.find ] , we are considering the target register in the basis containing the eigenvectors @xmath135 instead of the computational basis .",
    "in practice , it might be advantageous to reduce the number of qubits required to solve a problem , or the length of time each qubit must be isolated from the environment .",
    "for example , suppose we wish to find @xmath233 such that @xmath234 , where the order of @xmath45 divides @xmath21 .",
    "the operators @xmath123 and @xmath235 , which correspond to multiplication by @xmath236 and @xmath237 respectively , share the eigenvectors @xmath135 ( see ( [ psi_def_a ] ) ) and have corresponding eigenvalues @xmath238 and @xmath239 .",
    "we can assume we know @xmath21 by applying the order - finding algorithm if necessary . by using @xmath125 with one control",
    "register we can approximate @xmath121 , and by using @xmath240 with another control register we can approximate @xmath241 and then extract @xmath233 modulo @xmath242 . note that since we know @xmath21 , we only need @xmath243 bits of precision when estimating @xmath121 and @xmath241 , instead of @xmath244 when using continued fractions . note further that , knowing @xmath21 , it may be possible to actually place @xmath135 into the target register ( by direct construction or otherwise ) for some known @xmath25 , and thus only require _ one _ control register with over @xmath245 qubits to estimate @xmath241 .",
    "one way of doing this is to keep the target register after we have applied the order - finding algorithm and observed an estimate of @xmath121 in the control register . at this point ,",
    "the target register is almost entirely in the state @xmath135 , and we could now just estimate the eigenvalue of @xmath235 on this eigenstate , which we know will be @xmath246 .      consider the case that we have an efficient computational means of mapping @xmath247 to @xmath248 for any @xmath249 . if we consider @xmath2 to be of the form @xmath250 for a homomorphism @xmath7 , we are requiring that @xmath9 is the identity or some other function with enough structure that we can efficiently map @xmath251 to @xmath252 . in this case",
    "we can efficiently solve the hidden subgroup problem with only one control bit or a sequence of _ flying qubits _ @xcite .",
    "we illustrate this method for the problem of finding the order of an element @xmath45 in a group @xmath8 .",
    "figure [ figure.1 ] shows the relationship between @xmath171 and the controlled multiplications by powers of @xmath45 in the order - finding algorithm .",
    "as already pointed out in @xcite , the measurements could be performed before the controlled rotations .",
    "the quantum controlled rotations could then be replaced with ` semi - classically ' controlled rotations of the subsequent qubits ( that is , the control bit is measured and , if the outcome is @xmath253 , the rotation is done quantumly ) .",
    "this brings us to fig .",
    "[ figure.2 ] , where we observe further that all the operations on the first qubit could be performed before we even prepare the second qubit .",
    "all the operations could be done sequentially , starting from the first qubit , the results of measuring the previous qubits determining how to prepare the next qubit before measurement .",
    "this means we could in fact do all the quantum controlled multiplications with a single control qubit provided we can execute the ` semi - classical ' controls which allow us to reset a qubit to @xmath254 and perform a rotation dependent upon the previous measurements ( the rotations could in fact be implemented at any time after resetting the qubit and before applying the final hadamard transform and measuring it ; they could also be omitted provided we repeat each step a few extra times and do some additional classical post - processing as done in @xcite ) . alternatively",
    ", the control qubits could be a sequence of flying qubits which are measured ( or prepared ) in a way dependent upon the outcomes of the previous measurements of control qubits .",
    "for the more general hidden subgroup problem in abelian groups we would have a sequence of applications of @xmath190 controlled by one qubit , which is measured , then reset to a superposition of @xmath215 and @xmath255 plus some rotation that is dependent upon the previous measurements . in summary :    _ the hidden subgroup @xmath5 of a finitely generated abelian group @xmath3 generated by @xmath256 , corresponding to a function @xmath2 from @xmath3 to a finite set @xmath4 , can be found with probability close to @xmath253 by ` semi - classical ' methods with only _",
    "one _ control bit ( or a sequence of flying qubits ) and polynomial in @xmath11 applications of the operators @xmath257 for @xmath258 , where @xmath11 is the index of @xmath5 in @xmath3 .",
    "many thanks to peter hyer for helping prepare this paper , to mark ettinger and richard hughes for helpful discussions and hospitality in los alamos , to brics ( basic research in computer science , centre of the danish national research foundation ) , and to wolfson college .    this work was supported in part by cesg , the european tmr research network erp-4061pl95 - 1412 , hewlett - packard , the royal society london , and the u.s .",
    "national science foundation under grant no .",
    "phy94 - 07194 .",
    "part of this work was done at the 1997 elsag - bailey  i.s.i .",
    "foundation workshop on quantum computation , at nis-8 division of the los alamos national laboratory , and at the brics 1998 workshop on algorithms in quantum information processing .",
    "99 barenco , a. , bennett , c.h . , cleve , r , divincenzo , d.p . ,",
    "margolus , n. , shor , p. , sleater , t. , smolin , j. , weinfurter , h. : _ phys .",
    "a * 52 * _ , ( 1995 ) 3457 .",
    "boneh , d. , and lipton , r.j . : quantum cryptanalysis of hidden linear functions ( extended abstract ) .",
    "lecture notes on computer science * 963 * ( 1995 ) 424437 cleve , r. , ekert , e. , macchiavello , c. , and mosca , m. : quantum algorithms revisited , proc .",
    "a , * 454 * , ( 1998 ) 339 - 354 .",
    "deutsch , d. : quantum theory , the church - turing principle and the universal quantum computer .",
    "soc . lond .",
    "a , * 400 * , ( 1985 ) 97 - 117 .",
    "ekert , a. , mosca , m. : ( note in preparation , 1998 ) .",
    "griffiths , r.b . and",
    "niu , c .- s . : semi - classical fourier transform for quantum computation , phys .",
    "* 76 * ( 1996 ) 3228 - 3231 .",
    "grigoriev , d. y. : testing the shift - equivalence of polynomials by deterministic , probabilistic and quantum machines .",
    "theoretical computer science , * 180 * ( 1997 ) 217 - 228 .",
    "hyer , p. : conjugated operators in quantum algorithms .",
    "preprint , ( 1997 ) .",
    "jozsa , r. : quantum algorithms and the fourier transform , proc .",
    "a , * 454 * , ( 1998 ) 323 - 337 .",
    "kitaev , a. y. : quantum measurements and the abelian stabiliser problem .",
    "e - print quant - ph/9511026 ( 1995 ) lenstra , h. w. jr . , and pomerance , c. : a rigorous time bound for factoring integers , journal of the ams , volume 5 , number 2 , ( 1992 ) 483 - 516 .",
    "menezes , a. , van oorschot , p. , vanstone , s. : handbook of applied cryptography , c.r.c . press , 1997 .",
    "shor , p. : algorithms for quantum computation : discrete logarithms and factoring .",
    "35th ann . symp . on foundations of comp .",
    "( 1994 ) 124134 simon , d. : on the power of quantum computation .",
    "35th ann . symp . on foundations of comp .",
    "( 1994 ) 116123 turchette , q.a . ,",
    ", lange w. , mabuchi h. , and kimble h.j . : measurement of conditional phase shifts for quantum logic",
    ", 76 , 3108 ( 1996 ) .",
    "the question of what happens when @xmath2 is many - to-1 on cosets of @xmath5 was first addressed in @xcite .",
    "this is a slight weakening of the promise that @xmath2 is distinct on each coset .",
    "suppose @xmath2 can have up to @xmath233 cosets going to the same output , for some known @xmath233 .",
    "that is , @xmath112 where @xmath7 is a homomorphism from @xmath3 to a some group @xmath8 with kernel @xmath5 , and @xmath9 is a mapping from @xmath8 to @xmath4 that is at most @xmath233-to-1 .",
    "if @xmath233 divides the order of @xmath5 , we clearly have a problem .",
    "for example , suppose @xmath5 is the cyclic group of order @xmath259 , and @xmath260 , but by changing one value of @xmath2 it would have period @xmath261 .",
    "it can easily be shown that @xmath262 ( that is , at least @xmath263 for some positive constant @xmath264 ) applications of @xmath2 are necessary to distinguish such a modified @xmath2 from the original one with probability greater than @xmath265 , and thus no polynomial time algorithm , quantum or classical , could distinguish the two cases .",
    "thus one requirement for there to exist an efficient solution in the worst case is that @xmath233 is less than the smallest prime factor of @xmath266 , the number of elements in @xmath5 .",
    "the problem when @xmath2 is not 1-to-1 is the following . running",
    "the same quantum algorithm will produce the state @xmath267 where @xmath268 this is the same definition as in ( [ psi_def_gen ] ) except now the @xmath269 are not necessarily distinct .",
    "this means the sizes of each of the @xmath270 are not necessarily the same since both destructive and constructive interference can occur .",
    "also , the @xmath270 are no longer orthogonal , and thus some constructive interference could occur on the poor estimates of @xmath121 . recall that even the close estimates of @xmath121 will not yield useful results when @xmath271 .",
    "any other @xmath25 will at least reveal a small factor of @xmath21 .",
    "so we need to guarantee that the probability of observing a close enough estimate of @xmath272 for some @xmath273 is significant .    by making our estimates precise enough ,",
    "say by using over @xmath274 control qubits , the estimates of @xmath121 will have error less than @xmath120 ( so that continued fractions will work ) with probability at least @xmath275 . thus assuming @xmath2 is 1-to-1 , the probability of observing a _ bad _ output other than @xmath96 would be at most @xmath276 , and the probability of observing @xmath96 would be at most @xmath277 .",
    "however , since @xmath2 is at most @xmath233-to-1 , these probabilities could amplify by at most a factor of @xmath278 to @xmath279 and @xmath280 respectively . observing a @xmath96",
    "means we either got a bad output , or the period of @xmath2 is @xmath253 .",
    "getting @xmath96 as a bad output is not very harmful , however getting another bad output is more complicated , since it will give us a false factor of @xmath21 .",
    "it will be useful to make @xmath279 small , so that it is unlikely our answer is tainted by false factors of @xmath21 .",
    "once we have one factor @xmath281 of @xmath21 , we can replace @xmath282 with @xmath283 ( as done in @xcite ) , which has period @xmath284 and find a factor of @xmath284 .",
    "once we have a big enough factor @xmath285 of @xmath21 , we might start observing @xmath96 s , which tells us that the remaining factor of the original @xmath21 , namely @xmath286 , is less than @xmath278 .",
    "thus we can explicitly test @xmath287 until we find the period , which will occur after at most @xmath278 applications .",
    "we thus have an algorithm with running time , in terms of elementary quantum operations and applications of @xmath2 , polynomial in @xmath288 and quadratic in @xmath233 .",
    "the trick of reducing the order of the function can be applied to reduce the size of the group and hidden subgroup in the finite abelian hidden subgroup problem . when @xmath289 , we can efficiently test if @xmath290 or @xmath291 .",
    "the above analysis tells us how to deal with the case that @xmath292 for @xmath293 . a similar technique will reduce @xmath294 to a quotient group @xmath295 and we can again proceed inductively until the size of @xmath295 is less than @xmath278 .",
    "we can then exhaustively test @xmath295 for the hidden subgroup @xmath296 in another @xmath297 steps .",
    "we emphasize that this is a worst - case analysis .",
    "if there were a noticeable difference in the behaviour of a 1-to-1 and an @xmath233-to-1 function @xmath2 , @xmath298 , we could decide if a given function @xmath9 is 1-to-1 or many - to - one ( by composing @xmath9 with a function @xmath2 whose period or hidden abelian subgroup we know , and test for this difference in behaviour ) . distinguishing 1-to-1 functions from many - to-1 functions seems like a _ very _ difficult task in general , and would solve the graph automorphism problem , for example ."
  ],
  "abstract_text": [
    "<S> a quantum computer can efficiently find the order of an element in a group , factors of composite integers , discrete logarithms , stabilisers in abelian groups , and _ hidden _ or _ </S>",
    "<S> unknown _ subgroups of abelian groups . </S>",
    "<S> it is already known how to phrase the first four problems as the estimation of eigenvalues of certain unitary operators . here </S>",
    "<S> we show how the solution to the more general abelian _ </S>",
    "<S> hidden subgroup problem _ can also be described and analysed as such . </S>",
    "<S> we then point out how certain instances of these problems can be solved with only one control qubit , or _ flying qubits _ </S>",
    "<S> , instead of entire registers of control qubits . </S>"
  ]
}