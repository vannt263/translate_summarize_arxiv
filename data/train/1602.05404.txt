{
  "article_text": [
    "domineering is a two - player perfect - information game invented by gran andersson around 1973 .",
    "it was popularized to the general public in an article by martin gardner @xcite .",
    "it can be played on any subset of a square lattice , though mostly it is restricted to rectangular @xmath12 boards , where @xmath13 denotes the number of rows and @xmath14 the number of columns .",
    "the version introduced by andersson and gardner was the @xmath15 board .",
    "play consists of the two players alternately placing a @xmath16 tile ( domino ) on the board , where the first player may place the tile only in a vertical alignment , the second player only horizontally .",
    "the first player being unable to move loses the game , his opponent ( who made the last move ) being declared the winner .",
    "since the board is gradually filled , i.e. , domineering is a converging game , the game always ends , and ties are impossible . with these rules",
    "the game belongs to the category of _ combinatorial games _ , for which a whole theory ( the combinatorial game theory , or cgt in short ) has been developed .    among combinatorial",
    "game theorists domineering received quite some attention , but this was limited to rather small or irregular boards @xcite .",
    "larger ( rectangular ) boards were solved using @xmath17-@xmath18 search @xcite , leading to solving all boards up to the standard @xmath15 board @xcite , later extended to the @xmath19 board @xcite , and finally extended to larger boards up to @xmath0 @xcite .",
    "the following subsections give a rough characterization of the two main programs used to systematically solve domineering positions so far , and of the program used to obtain the new results , as described in this paper .",
    "the first systematic analysis of rectangular domineering boards was performed by breuker et al .",
    "they developed the program domi , using a straightforward variant of the @xmath17-@xmath18 technique @xcite , enhanced with a transposition table .",
    "the algorithm did not use perfect domain knowledge for classifying positions as wins or losses and hence can be characterized as a pure brute - force approach .",
    "transposition tables with 2 m ( @xmath20 ) entries were used with a two - level replacement scheme called _ twobig _",
    "@xcite , in which each entry can store two table positions .",
    "mirror symmetries are taken into account .",
    "the newest position is always stored , overwriting the less important position in terms of nodes investigated .",
    "a few years later nathan bullock published results on solving domineering boards up to the @xmath0 board @xcite .",
    "his program obsequi used a sophisticated evaluation function which can determine statically the winner at a shallower point in the search tree than domi did .",
    "this allowed the elimination of large portions of the search space , resulting in much more efficient solving of domineering boards .",
    "obsequi used a transposition table ( taking mirror symmetries into account ) with @xmath21 entries with either a two - level _ twobig _ replacement scheme or a one - level replacement scheme called _ findfirst _ @xcite .",
    "also , a much better move - ordering heuristic was used , plus the use of a dominance relation to prune provably irrelevant moves . since the main advantage of bullock s program is based on game - specific knowledge",
    ", we can characterize his approach as a knowledge - based approach .",
    "uiterwijk continued using game - specific knowledge to an even more detailed extent .",
    "his program mudos incorporated deep knowledge of domineering positions with known result .",
    "these knowledge rules are so intense , that it even enables solving many game boards without any search at all ( i.e. , investigating a single node , the empty board under consideration ) .",
    "this was called _ perfectly solving _",
    "the most important feature of these knowledge rules is the number of safe moves that a player provably can reach in a position @xcite .",
    "the transposition table used ( again taking mirror symmetries into account ) contained @xmath22 entries , with a simple one - level _ deep _ replacement scheme . due to the heavy use of very knowledge - intense rules based on game - specific properties",
    "we can characterize his approach as a knowledge - intensive approach .",
    "after almost half a year of computation time , @xmath1 domineering was solved . we give some data in section [ sub:11x11 ] . as a sidetrack",
    ", we solved several other new boards .",
    "data are given in section [ sub : others ] .",
    "an overview of updated combinatorial - game - theoretic values of domineering boards is given in section [ sub : overview ] .",
    "the solution of @xmath1 domineering took 174 days and 15 hours on a standard desktop computer ( a hp with duo core intel e8400 3.00 ghz cpu with a 64-bit windows 7 operating system and 4 gb internal memory ) .",
    "the mudos program is written in c#.    the result is that the first player under optimal play wins the game .",
    "since the board is square , this is irrespective of vertical or horizontal moving first .    to put the solution of the @xmath1 board into perspective",
    ", we show in table [ tab:11x11 ] the results and number of nodes investigated to solve square boards up to @xmath1 by the three programs mentioned in the previous section .",
    ".results and number of nodes investigated to solve square domineering boards .",
    "vertical always starts .",
    "a `` 1 '' and `` 2 '' in the results column indicate a first - player ( vertical ) and second - player ( horizontal ) win , respectively .",
    "a ``  '' in a column indicates that the program was unable to solve the position .",
    "[ cols=\"^,^,>,>,>\",options=\"header \" , ]     in this table the following notes apply : 1 ) the outcome classes for all @xmath23 are h , except that the outcome class for @xmath24 is n or h ; 2 ) the outcome classes for all even @xmath25 are h ; 3 ) the outcome classes are alternating h ( even @xmath14 ) and n or h ( odd @xmath14 ) ; 4)-6 ) : equivalent to notes 1)-3 ) by replacing @xmath14 with @xmath13 and h with v.    for boards with one or both dimensions larger than 31 , besides the results in the notes above , nothing is known about their outcome classes , except of course that @xmath26 boards have outcome classes n or p , that @xmath27 boards have outcome classes h , and that @xmath28 boards have outcome classes v.",
    "as can be seen from the results it is clear that mudos is a very efficient domineering solver . all boards solved before are solved in an equal amount ( for the trivial boards ) or far smaller ( for the more complex boards ) number of investigated nodes than by previous solvers .",
    "the efficiency of our solver enabled the solution of the @xmath1 domineering board .",
    "the result indicates that the first player wins .",
    "moreover , several new rather complex boards have been solved . applying these",
    "together with the use of the translational symmetry rules updated the domineering outcome class landscape considerably .",
    "regarding future work , foremost this condensed overview will be extended to a full publication .",
    "this will include a detailed description of mudos knowledge rules and heuristics employed .",
    "moreover , the impact of the rules and heuristics on solving performance , separately and in combination , will be illlustrated with experiments .    as",
    "a follow - up we moreover intend as a last step to enhance the solving power of our domineering program by incorporating knowledge from combinatorial game theory into our solver .",
    "a preliminary experiment using endgame databases up to 16 squares filled with cgt values , combined with a very simplistic @xmath17-@xmath18 solver showed reductions up to 99% for boards up to @xmath29 @xcite .",
    "barton , m. , and uiterwijk , j.w.h.m . : combining combinatorial game theory with an @xmath17-@xmath18 solver for domineering , in : _",
    "bnaic 2014 - proceedings of the 26th benelux conference on artificial intelligence _",
    "f. grootjen , m. otworowska , and j. kwisthout ) , radboud university , nijmegen ( 2014 ) 916      berlekamp , e.r . ,",
    "conway , j.h . , and guy , r.k .",
    ": _ winning ways for your mathematical plays _ , volumes 12 . academic press ,",
    "london ( 1982 ) ; 2nd edition , in four volumes : vol . 1 ( 2001 ) , vols . 2 , 3 ( 2003 ) , vol . 4 ( 2004 ) .",
    "a k peters , wellesley , ma                          lachmann , m. , moore , c. and rapaport , i. : who wins domineering on rectangular boards ? in : _ more games of no chance _",
    "nowakowski ) , cambridge university press , cambridge ; msri publications * 42 * ( 2002 ) 307315      uiterwijk , j.w.h.m .",
    ": perfectly solving domineering games . in : _ computer games , workshop on computer games , cgw at ijcai 2013 , beijing , china , revised selected papers _ ( eds . t. cazenave , m.h.m .",
    "winands , and h. iida ) . _ communications in computer and information science _",
    "* 408 * ( 2014 ) 97121"
  ],
  "abstract_text": [
    "<S> we have developed a program called mudos ( maastricht university domineering solver ) that solves domineering positions in a very efficient way . </S>",
    "<S> this enables the solution of known positions so far ( up to the @xmath0 board ) much quicker ( measured in number of investigated nodes ) .    </S>",
    "<S> more importantly , it enables the solution of the @xmath1 domineering board , a board up till now far out of reach of previous domineering solvers . </S>",
    "<S> the solution needed the investigation of 259,689,994,008 nodes , using almost half a year of computation time on a single simple desktop computer . </S>",
    "<S> the results show that under optimal play the first player wins the @xmath1 domineering game , irrespective if vertical or horizontal starts the game .    </S>",
    "<S> in addition , several other boards hitherto unsolved were solved . using the convention that vertical starts , the @xmath2 , @xmath3 , @xmath4 , @xmath5 , @xmath6 , and @xmath7 boards are all won by vertical , whereas the @xmath8 , @xmath9 , @xmath10 , and @xmath11 boards are all won by horizontal . </S>"
  ]
}