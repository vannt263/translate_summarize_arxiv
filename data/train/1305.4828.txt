{
  "article_text": [
    "heavy quarkonium has attracted wide attention due to its special features .",
    "it provides a good platform to study the perturbative qcd and the associated non - perturbative physics in the bound state system  @xcite .",
    "for example , the @xmath0 meson is a doubly heavy quark - antiquark bound state and carries flavors explicitly ; it decays through weak interactions only .",
    "thus , the @xmath0 meson can be a fruitful laboratory for testing potential models and understanding the weak decay mechanism for heavy flavors .",
    "systematic studies of its production properties at the hadronic colliders tevatron and lhc have been done in the literature both theoretically  @xcite and experimentally  @xcite . in particular ,",
    "a generator bcvegpy for the hadronic production of the @xmath0 meson has been completed and developed in recent years  @xcite , which can be conveniently implemented into pythia  @xcite for simulating @xmath0 events with high efficiency .",
    "it has been noted that at the hadronic colliders , there is much pollution from the hadronic background and many produced @xmath0 events have been cut off by the trigging condition  @xcite .",
    "some alternative measurements would be helpful for a comprehensive study .",
    "comparing to the hadronic colliders , a cleaner @xmath1 collider is helpful and has some advantages to perform precise measurements for certain high - energy processes .",
    "previously , the lep - i experiment did a try to seek the @xmath0 events , but because of its small collision energy and low luminosity , no @xmath0 events have been found there . if the incident @xmath9 collision energy is around the @xmath2-peak and its luminosity can be reached up to @xmath18 ( the so - called super @xmath19 factory  @xcite , or the gigaz program suggested by the internal linear collider collaboration  @xcite ) , its production rate can be raised up by several orders , then it could be observable  @xcite .",
    "thus , new opportunity for studying the @xmath0-meson properties at the @xmath9 colliders arises . for the sake of experimental feasibility studies ,",
    "we write a generator , named as beec , for simulating the @xmath0 meson events at the future high luminosity @xmath9 colliders .",
    "annihilation , @xmath20\\rangle + q ' + \\bar{q}$ ] , where @xmath21 or @xmath22 stands for @xmath23 or @xmath8 respectively , and @xmath24 $ ] stands for the fock states @xmath25\\rangle$ ] , @xmath26g\\rangle$ ] , @xmath27\\rangle$ ] , @xmath28g\\rangle$ ] , @xmath29\\rangle$ ] and @xmath30\\rangle$ ] ( with @xmath31 ) respectively.,scaledwidth=48.0% ]    in the framework of the effective theory of non - relativistic qcd ( nrqcd ) @xcite , a heavy quarkonium is considered as an expansion of various fock states . in ref.@xcite , we have presented a detailed analysis of the @xmath5-quarkonium production via the process @xmath32\\rangle+b+\\bar{c}$ ] , where @xmath24 $ ] stands for the dominant @xmath5-quarkonium state within nrqcd .",
    "more explicitly , @xmath24 $ ] stands for the quarkonium states @xmath25\\rangle$ ] , @xmath26g\\rangle$ ] , @xmath27\\rangle$ ] , @xmath28g\\rangle$ ] , @xmath29\\rangle$ ] and @xmath30\\rangle$ ] ( @xmath31 ) respectively . the analysis there can be extended to all the doubly heavy quarkonia @xmath33 , @xmath5 and @xmath34 via the process",
    "@xmath20\\rangle + q'+\\bar{q}$ ] ( @xmath21 and @xmath22 stand for @xmath23 or @xmath8 ) , whose typical feynman diagrams are presented in fig.([feyfig ] ) .",
    "the remaining two flipped diagrams are obtained by interchanging the position of the @xmath22 and the @xmath35 lines in the first two diagrams .",
    "the leptonic part of the process can be easily dealt with , while the part for @xmath36\\rangle+b+\\bar{c}$ ] is much more involved . because of the emergence of massive - fermion lines in these feynman diagrams , the analytic expression for the squared amplitude becomes too complex and lengthy under the conventional squared amplitude approach .",
    "especially , to derive the amplitudes for the @xmath4-wave states , one also needs to get the derivative of the amplitudes over the relative momentum of the constitute quarks .",
    "one important way to solve it is to deal with the process directly at the amplitude level , i.e. after generating proper phase - space points , one first calculate the numerical value for the amplitudes , and then sum these values algebraically and square it to get the squared amplitude , @xmath37 ; through such way , numerical simulation efficiency can be greatly improved in comparison to the usual squared amplitude technology . moreover , under the approach , many simplifications can be done at the amplitude level due to the fermion - line symmetries and the specific properties of each heavy - quarkonium fock states .",
    "the improved trace technology is designed for such purpose . as an explanation ,",
    "we first arrange any one of the amplitude @xmath38 into four orthogonal sub - amplitudes @xmath39 according to the spins of the outgoing quark @xmath21 with spin @xmath40 and the outgoing anti - quark with spin @xmath41 , then transform these sub - amplitudes into a trace form by properly dealing with the massive spinors with the help of an arbitrary light - like momentum @xmath42 and an arbitrary space - like momentum @xmath43 , which satisfies @xmath44 and @xmath45 .",
    "the final results should be independent of @xmath42 and @xmath43 , and one can choose them to be those that can maximally simply the amplitude .",
    "then we do the trace of the dirac @xmath46-matrix strings at the amplitude level , which finally results in analytic series over some independent lorentz - structures .",
    "detailed description of the improved trace technology , together with the necessary analytical expressions , can be found in refs .",
    "all the independent lorentz - structures together with their coefficients are put into the generator beec as separate subroutines .    to do the phase - space integration",
    ", we first adopt the subroutine rambos  @xcite to generate the required phase - space points , which also transforms the phase - space integration to be those variables varying within the region of @xmath47 $ ] . in the program beec",
    ", a switch to choose whether using the subroutine vegas  @xcite is introduced . when running vegas , the most important samples for the squared matrix element of the process are taken first , which is in agreement with the importance sampling strategy for monte carlo simulations . by taking an adequate number of sampling points for the integration",
    ", the output of vegas could reach up to a stable result with requested statistical error .",
    "we provide several ways in beec to generate the weighted and unweighted events . for theoretical studies on the heavy quarkonium production ,",
    "e.g. to derive the total cross - section or various differential distributions , one can directly use the fastest way ( preferred ) : to generate the weighted events that are distributed according to the importance sampling function generated by vegas running . by using beec in this way",
    ", some interesting properties for the @xmath0 meson production have been found  @xcite . while , for the events simulation in detector conditions , it is necessary to get the unweighted events , which are distributed according to the matrix element squared  @xcite .",
    "for the purpose , one can generate the unweighted events by directly using the pythia s inner mechanism , the so - called hit - and - miss approach ( von neumann algorithm ) , to reject those unsatisfied events and output the allowed events .",
    "but , as is well - known , the original hit - and - miss approach is really time - consuming .",
    "some alterations must be made to improve its efficiency .",
    "it has been observed that the weighted events could be mapped to realistic independent unweighted events  @xcite .",
    "thus , instead of using the time - consuming pythia inner mechanism , we generate the unweighted events by using a more effective hit - and - miss technique  @xcite .",
    "compared to the original method of pythia , such new hit - and - miss procedure is taken in each cell of the adaptive mesh found by vegas .",
    "its idea lies in that : in order to save the amount of storage space and the efficiency , we adopt the method mint  @xcite developed by the authors of powheg program  @xcite . by using the vegas algorithm , the mint program performs the integration in using the spring - bases subroutines and generates events with a probability proportional to the integrand in using the spring subroutines  @xcite . after each iteration of vegas running , the maximum value of the function will be stored in a file for each cell of the adaptive mesh .",
    "the multidimensional stepwise function that equals to the upper bound of the function to be integrated in each cell in fact provides an upper bound for the whole function .",
    "so , the program is to find the upper bound grid for those cells .",
    "next , by using again the hit - and - miss technique in each cell , one can generate the points according to the original distribution .",
    "following these procedures , we can use beec to generate the unweighted heavy quarkonium events effectively , and then we store the information of the unweighted event in a standard les houches event ( lhe ) file  @xcite so as to do the further simulation .    the paper is organized as follows . in sec.ii , we show the dominant features of the generator beec , in which , we present its structure , its flow chart and its usage in detail . the final section is reserved for a summary .",
    "as described in the above section , the beec is designed to be a specific generator for simulating the production of doubly heavy quarkonium @xmath33 , @xmath5 and @xmath34 at a @xmath9 collider .",
    "since beec is implemented into pythia as an external process , all pythia subroutines can be applied conveniently .",
    "that is , one can use the pythia subroutines to read the generated useful information of the heavy quarkonium and its accompanying partons , and do further hadronization and decay simulation .    according to the nrqcd framework  @xcite , the cross - section of the quarkonium production process , @xmath48\\rangle(q_3 ) + q^{\\prime}(q_2 ) + \\bar{q}(q_1)$ ] with @xmath21 and @xmath22 stand for @xmath23 or @xmath8 , can be written in the following form : @xmath49 + q ' + \\bar{q } ) \\langle{\\cal o}^h(n)\\rangle,\\ ] ] where the non - perturbative matrix element @xmath50 is proportional to the inclusive transition probability of the perturbative state @xmath51 $ ] into the bound states @xmath52\\rangle$ ] . the short - distance differential cross section @xmath53 + q ' + \\bar{q})$ ] stands for the short - distance cross - section ; i.e.    @xmath54+q'+\\bar{q } ) = \\frac{1}{4\\sqrt{(p_1\\cdot p_2)^2-m_1 ^ 2 m_2 ^ 2 } } \\overline{\\sum }   |{\\cal m}|^{2 } d\\phi_3,\\end{aligned}\\ ] ]    where @xmath55 means we need to average over the spin states of initial particles and to sum over the color and spin of all final particles , and the three - particle phase space @xmath56    to obtain the total cross sections and the differential cross sections of the processes , we shall first generate the phase - space points by the subroutine rambos  @xcite , which also transforms the generated four - momentum of the final particles to proper subroutines to calculate the amplitudes @xmath57 , and hence the squared amplitude @xmath58 , the final integration can be carried out by using the vegas program  @xcite .    in the following subsections , we will sequentially present the beec s schematic structure , flowcharts and usage in detail .",
    "beec is a fortran programme written in a pythia - compatible format and is written in a modularization structure , one may apply it to various situations or experimental environments conveniently .",
    "beec will generate a standard lhe data file that contains useful information of the meson and its accompanying partons , which can be conveniently imported into pythia to do further hadronization and decay simulation .",
    "the schematic structure for the generator beec are shown in fig.([struct ] ) .",
    "all fortran codes are organized in the main directory named as _ beec_. in general , the generator is systematically constructed in seven modules according to their purpose .",
    "each module contains necessary files to fulfill the specific tasks for generating events .",
    "besides , there are three fortran source files : parameter.f , run.f and beec.f in the main directory _ beec_.    * the module * generate * : it is the key module , which contains six source files : evntinit.f , genevnt.f , pythia-6.4.24.f , totfun.f , initmixgrade.f and bcpythia.f . its main function is to initialize all input parameters for event simulation ; to establish connection between beec and pythia ; to calculate the kernel for the phase - space integration with the help of the * coefficient * module and the * amplitude * module and to do the phase - space integration with the help of the * phase * module .",
    "the file initmixgrade.f is used to initialize the importance sampling function for monte carlo simulation .",
    "once the importance sampling function has been obtained by vegas , it can be conveniently used by initmixgrade.f for later usage without running vegas again . by setting proper values for the two parameters imix and imixtype",
    ", the required mixed quarkonium events could be generated .",
    "* the module * phase * : it contains three source files : phase@xmath59gen.f , phase@xmath59point.f and vegas.f .",
    "its purpose is to generate the allowable phase - space points and to record the importance sampling function produced by vegas  @xcite into a grade file ( with suffix .grid ) in the _ data _ subdirectory .",
    "the phase@xmath59gen.f contains a reformation of the previous rambos program  @xcite and can transform all the generated four - momentum of the final particles to the * generate * module .",
    "* the module * pybook * : it contains five source files : pybookinit.f , uphistrange.f , uppydump.f , uppyfact.f and uppyfill.f .",
    "its purpose is to initialize the pythia subroutine pybook to record useful information of the generated events .",
    "the users may conveniently switch off this module in the main program to use his / her own ways to record the data . *",
    "the module * setparameter * :",
    "it contains two source files : simparameter.f and uperror.f .",
    "the simparameter.f is used to simplify / optimize the input parameters that have been set in parameter.f .",
    "when the input parameters are out of allowed ranges , some typical error messages stored in uperror.f will appear on screen and the program will stop running . *",
    "the module * system * : it contains six source files : upopenfile.f , uplogo.f , vegaslogo.f , updatafile.f , upclosegradefile.f and upclosepyfile.f .",
    "its purpose is to open or close the record files and to print out certain running messages at the intermediate steps , which reminds the users at what step the program is running .",
    "* the module * coefficient * : it contains four source files : coef1s0.f , coef3s1.f , coef1p1.f and coef3pj.f .",
    "it has been shown  @xcite that there are three independent lorentz structures for spin - singlet color - singlet and color - octet states @xmath60\\rangle$ ] ; twelve independent lorentz structures for spin - triplet color - singlet and color - octet states @xmath61\\rangle$ ] ; twelve independent lorentz structures for spin - singlet @xmath4-wave state @xmath29\\rangle$ ] ; and thirty - four independent lorentz structures for spin - triplet @xmath4-wave state @xmath30\\rangle$ ] ( with @xmath31 ) .",
    "these files store all the non - zero coefficients of all the independent lorentz - structures for the corresponding quarkonium states . *",
    "the module * amplitude * : it contains four files : ampy.f , ampz0.f , common.f , sqamp.f .",
    "its purpose is to calculate the amplitude numerically according to the coefficients of lorentz - structures listed in the * coefficient * module .",
    "the amplitudes of the color - octet states @xmath26g\\rangle$ ] and @xmath28g\\rangle$ ] can be conveniently obtained from that of the color - singlet states @xmath25\\rangle$ ] and @xmath27\\rangle$ ] through proper changing of the color factors and the non - perturbative matrix elements .",
    "each module is equipped with a * makefile * that is applied to make a library with the same name , e.g. the * makefile * in the subdirectory * generate * will be used by the gnu c command * make * to generate _",
    "generate.a _ located in the main directory .",
    "once the source file has been compiled , one does not need to recompile it unless some changes have been made .",
    "a master * makefile * in the main directory orchestrates all those sub - makefiles .",
    "libraries required for the main program are listed in the * libs * variable of the master * makefile * and built automatically by invoking the sub - makefiles : +    libs=_amplitude.a coefficient.a generate.a phase.a pybook.a setparameter.a system.a _    under the way based on * makefile * , the generator beec acquires good modularity and re - usability .",
    "the user can easily reform the generator to suit the needs of different experimental environment .",
    "after each running , all files generated for recording the information are put into the subdirectory * data * , in which three subdirectories are for the mentioned production channels of @xmath33 , @xmath5 and @xmath34 respectively : all grade files for the importance sampling function are ended with the suffix ` .grid ' ; all the files that record the used parameters and the vegas running information are ended with the suffix ` .cs ' ; all the files that record the differential distributions , e.g. the transverse momentum and rapidity distributions of the heavy quarkonium , are ended with the suffix ` .dat ' .",
    "we present the overall flow chart of the generator beec in fig.([chart1 ] ) .",
    "the beec is dominated by two blocks , i.e. the _ vegas _ block ( in module * phase * ) and the _ event _ block ( in module * generate * ) .",
    "the _ vegas _",
    "block is to generate the importance sampling function .",
    "the _ event _ block is to generate events by using pythia , in the way that the mentioned processes are implemented into pythia as its external processes .",
    "this is achieved by properly setting the two pythia subroutines upinit and upevnt .",
    "the schematic flow charts for the _ vegas _ block and the _ event _ block of the generator beec are show in fig.([chart2 ] ) . here",
    "we modify the _",
    "block not only to generate the sampling importance function but also to store an upper bound of the value of the cross section in each cell .",
    "the importance smapling function is used to increase the simulation efficiency , while the upper bound value will be used to generate unweighted event if the user want to do the experimental analysis and further simulation .",
    "the upper bound value in each cell is an upper bound for the cross section and also equals a multidimensional stepwise function , according to which it is easy to generate phase space points . by using the hit and",
    "miss technique , one can generate the points according to the original distribution .",
    "the main part of the _ vegas _ block is the vegas subroutine . as explained in the last subsection",
    ", we adopt the mint algorithm but with certain alterations to do the simulation .",
    "three new variables have been added in the original vegas subroutine , where is the integral value for the integrand after a -dimensional integration , the array records the upper bounding envelope of the integrand in all cells , is a flag : +    * fxn= : the integrand ; * ndim= : number of integration dimensions for the generator ; * ncall= : maximum total number of the times to call the integrand in each iteration set by the user ; * itmx= : maximum number of allowed iterations set by the user ; * nprn= : print out level ; ( see vegas manual ) @xmath62 nprn=@xmath63 , when printing out only the cross section values and errors .",
    "* when called with imode=0 , vegas performs the integration over the integrand fxn and stores the answer in a common block .",
    "* xmax stands for a ( nvegbin , ndim ) dimensional array , where nvegbin denotes the bin number for each coordinate . when called with imode=1 , vegas will first initiate all the elements of xmax to be @xmath64 , where xint equals to the value of that has been derived from a previous vegas running with imode=0 . during the following sampling iteration , when the calculated integral value is larger than the initial xmax(nvegbin , ndim ) value in a specific cell , then the value of xmax(nvegbin , ndim ) for this cell will be increased by a fixed factor @xmath65 . after a sufficiently large number of calls , the values of xmax(nvegbin , ndim ) will be stabilized for all cells .",
    "such a final xmax array will be stored in the same grid file as that of the importance sampling function in order to do the final simulation .    moreover , in doing the initialization , we will call vegas twice by setting imode=0 and imode=1 accordingly to generate the upper bound grid xmax and also a more precise importance sampling function .",
    "one can generate events by calling the upevnt subroutine according to the probability proportional to the integrand .",
    "each event produced needs several times of iteration with three steps procedure as follows :    * calculate upper bounding function by generating a set of step - wise functions , each of them is associated with a specific coordinate ( dimension ) ; * call the subroutine to generate a random phase - space point and calculate the integral ; * judge whether such point be kept or not by using the hit - and - miss approach with the help of the upper bounding function .",
    "in vegas the integral together with its numerical error are related to ncall and itmx . to generate full events",
    ", we suggest the user to do a test running first in order to find an effective and time - saving parameters for vegas . in the beec , we take the default values of nvegbin , nvegcall and nvegitmx to be 300 , 100000 and 10 . as a subtle point ,",
    "if one want to improve the precision of the generated importance sampling function , the maximum iteration number , the number of calls in each time of the iteration and the number of bins should be properly set .",
    "one can run the program by using the command * make * at the main directory of the generator , which automatically generate an executable file * run * at the same directory .",
    "users may change the parameters listed in the source files run.f and parameter.f to suit their own needs . besides",
    ", the frequently changed parameters are put in a data file input.dat . for the generator beec ,",
    "dominant parameters are listed in the following :    * pmb= : mass of the b quark ( in unit gev ) , default value @xmath66 gev ; * pmc= : mass of the c quark ( in unit gev ) , default value @xmath67 gev ; * pmz= : mass of the @xmath2 boson ( in unit gev ) , default value @xmath68 gev ; * pme= : mass of electron ( in unit gev ) , default value @xmath69 gev ; * ecm= : collision energy of the high luminosity @xmath70 collider ( in units gev ) , default value @xmath68 gev ; * sintheta2= : squared value for the sine of the weak mixing angle , default value @xmath71 ; * fulldecay= : total decay width of @xmath2 boson , default value @xmath72 gev ; * iprocess= : determining which quarkonium to be generated , i.e. iprocess=1 , 2 or 3 is to generate the @xmath5-quarkonium , the @xmath33-charmonium or the @xmath34-bottomonium , respectively ; * fbc= : radial wave function @xmath73 for the @xmath3-wave quarkonium or the first derivative of the radial wave function @xmath74 for the @xmath4-wave quarkonium . as default choice , we take their values from refs.@xcite ; * ibcstate= : state of the heavy quarkonium to be generated .",
    "for the case of @xmath5-quarkonium production , ibcstate=1@xmath75 6 , which are for the color - singlet @xmath76\\rangle$ ] , @xmath77\\rangle$ ] , @xmath78\\rangle$ ] and @xmath79\\rangle$ ] ( with @xmath31 ) respectively , and ibcstate=7 and 8 are for the color - octet @xmath80g\\rangle$ ] and @xmath81g\\rangle$ ] respectively ; * ivegasopen= : whether to switch on / off the vegas subroutine .",
    "ivegasopen=1 for using vegas ; ivegasopen=0 for not using vegas ; * numofevents= : number of events to be generated ; * idwtup= : determining how the event weights and the cross - sections should be interpreted ( pythia inner parameter ) .",
    "when idwtup=@xmath15 , parton - level events have a unit weight at the input to pythia , i.e. they are always accepted ; while idwtup=@xmath12 , events are then either accepted or rejected by using the pythia inner hit - and - miss technique or the algorithm described in the above vegas block , so that fully generated events at the output have a common weight ; * idpp= : determining how the event weights and the cross - sections should be interpreted , the beec parameter . when setting idpp=1 ( or 3 ) , it directly uses the way described by pythia inner parameter idwtup= 1 ( or 3 ) to generate the events .",
    "when setting idpp=2 , it is designed to generate the unweighted events similar to the case of idwtup=1 ; but other than applying the pythia inner hit - and - miss technology , it will use our present new hit - and - miss technology to accept or reject the events in order to improve the efficiency . *",
    "igenerate= : whether to generate complete events with full decay information by applying the pythia inner subroutines .",
    "igenerate=0 , when the users wish the simulation to stop after the generation of the final states contain the required heavy quarkonium , which provides the most time - saving way and is useful for theoretical study .",
    "igenerate=1 if the users wish that complete events including the quarkonium decays are to be generated . in the latter case , we set idwtup=1 ( idpp=1 ) ; * mstu(111)= : order of @xmath82 for pyalps running ( a pythia routine for calculating @xmath82 ) ; e.g. mstu(111)=0 for fixed @xmath82 at the value paru(111 ) , which sets the constant value of @xmath82 ; mstu(111)=1 for leading order ; * igrade= : whether to use the grade generated by previous vegas running when setting ivegasopen=@xmath83 ; igrade=@xmath12 means to use ; igrade=@xmath83 means not to use .",
    "this parameter is to save running time , once a grade file is generated from a previous vegas running , one does not need to regenerated it unless some input parameters have been changed .",
    "* imix= : whether to generate the mixed events for a specific heavy quarkonium via the production process assigned by iprocess .",
    "imix=0 , when the users do not want to generate the mixed events ; imix=1 , when the users want to generate the mixed events .",
    "this is useful , since the higher fock states will * imixtype= : setting how many quarkonium states need to be mixed .",
    "three types of mixing events have been programmed : imixtype=1 , all the eight quarkonium states need to be mixed ; imixtype=2 , the mixed events for two color - singlet @xmath3-wave quarkonium states ; imixtype=3 , the mixed events for the four color - singlet @xmath4-wave plus two color - octet @xmath3-wave quarkonium states .    three ways to do the monte carlo simulation are suggested in beec : one is the trivial monte carlo method without using vegas , and the other two ways are to use the importance sampling function derived by vegas running .",
    "for the two ways of using vegas , the first one is to use the existent grade ( importance sampling function generated by a previous running and have been recorded in a .grid file ) , and the second one is to use the new grade generated by the current vegas running .",
    "for instance , if setting ivegasopen=0 and igrade=1 , it is to use the first importance sampling method to generate the quarkonium events , just by reading the existent importance sampling function .",
    "when using beec under proper options , one only needs to run vegas once unless those input parameters that are related to the grade have been changed .    for theoretical studies ,",
    "e.g. to derive the heavy quarkonium production cross - section or various differential distributions , one can directly use the fastest way , e.g. setting idpp=3 ( equivalent to set the pythia parameter idwtup @xmath84 ) or setting idpp=1 ( equivalent to set idwtup @xmath85 and igenerate=0 ) , to generate the quarkonium events . while , for the events simulation in detector conditions , it is necessary to get the unweighted events . in beec ,",
    "the unweighted events are generated by setting idpp=1 or 2 .",
    "unweighted and mixed @xmath5-quarkonium events for the two color - singlet s - wave states , @xmath76\\rangle$ ] and @xmath77\\rangle$].,scaledwidth=45.0% ]    ) -quarkonium events ( derived by setting idpp=2 ) in transverse momentum ( @xmath86 ) and rapidity ( @xmath87 ) distributions for the test run of the generator beec , which is to generate the mixed events for the states @xmath76\\rangle$ ] and @xmath77\\rangle$ ] ( imix=1 and imixtype=2).,scaledwidth=80.0% ]    \\rangle$]-quarkonium transverse momentum ( @xmath86 ) and rapidity ( @xmath87 ) distributions , which are derived by setting iddp=2 ( unweighted ; dotted line ) and iddp=3 ( weighted ; solid line ) , respectively .",
    ", scaledwidth=80.0% ]    we present a test run for the production of @xmath17 mixed @xmath5-quarkonium events in two color - singlet s - wave states , @xmath76\\rangle$ ] and @xmath77\\rangle$ ] .",
    "it is to derive the unweighted events by using our present hit - and - miss technology by setting iddp=2 .",
    "the initial parameters for the test run are shown in fig.([test ] ) , which is a snapshot during the running of beec .",
    "we put the obtained data for the test run in the main directory as a zipped file ( testdata.tar.gz ) , in which the running information , the total cross sections , the differential cross sections under various transverse momentum and rapidity cuts are presented .",
    "we show some typical resultant curves , e.g. @xmath86- and @xmath87-distributions with several rapidity cut and @xmath88 in fig.([distribution ] ) .",
    "to be a cross - check , we also use the fastest weighted method derive the same mixed @xmath5-quarkonium events by setting idpp=3 . for convenience ,",
    "we normalize all the event curves to be the transverse momentum and rapidity distributions , which are presented in fig.([compare ] ) .",
    "it is found that the distributions under both the unweighted and weighted ways agree with each other .",
    "this demonstrates our present method for deriving the unweighted events is correct .",
    "it has been found that in addition to the hadronic colliders , the super z - factory  @xcite and the gigaz program suggested by the internal linear collider collaboration  @xcite will provide another good platform for studying the properties of the doubly heavy quarkoniums as the @xmath5-quarkonium , charmonium and bottomonium . based on our previous analysis on the production @xmath0 meson production at a high luminosity @xmath1 collider  @xcite",
    ", we develop a generator beec for simulating the double heavy quarkonium events via the channel @xmath89 ( q and @xmath22 = @xmath8 or @xmath23 respectively ) .",
    "beec is a fortran programme written in a pythia - compatible format and is written in a modularization structure , one may apply it to various situations or experimental environments conveniently . a method to improve the efficiency of generating unweighted events within pythia environment has been suggested .",
    "thus , beec offers a valuable tool for further experimental studies .",
    "+ * acknowledgement : * this work was supported in part by the fundamental research funds for the central universities under grant no.cdjxs11100002 and no.cqdxwl-2012-z002 , by natural science foundation of china under grant no.11075225 and no.11275280 , and by the program for new century excellent talents in university under grant no.ncet-10-0882 .",
    "chang , j.x .",
    "wang and x.g .",
    "wu , phys.rev .",
    "d*70 * , 114019 ( 2004 ) ; c.h .",
    "chang , c.f .",
    "qiao , j.x .",
    "wang and x.g .",
    "wu , phys.rev .",
    "d*71 * , 074012 ( 2005 ) ; c.h .",
    "chang , c.f .",
    "qiao , j.x .",
    "wang and x.g .",
    "wu , phys.rev .",
    "d*72 * , 114009 ( 2005 ) .",
    "chang , j.x .",
    "wang and x.g .",
    "wu , comput .",
    ". commun . * 174 * , 241(2006 ) ; c.h .",
    "chang , j.x .",
    "wang and x.g .",
    "wu , comput .",
    "commun . * 175 * , 624(2006 ) ; x.y .",
    "wang and x.g .",
    "wu , comput .",
    "* 183 * , 442(2012 ) .",
    "e. braaten , king - man cheung , t.c .",
    "yuan , phys.rev . d*48 * , r5049 ( 1993 ) ; v.d .",
    "barger , king - man cheung , w.y .",
    "keung , phys.rev . d*41 * , 1541 ( 1990 ) ; king - man cheung , w.y .",
    "keung , t.c .",
    "yuan , phys.rev.lett .",
    "* 76 * , 877 ( 1996 ) ."
  ],
  "abstract_text": [
    "<S> the @xmath0 meson is a doubly heavy quark - antiquark bound state and carries flavors explicitly , which provides a fruitful laboratory for testing potential models and understanding the weak decay mechanisms for heavy flavors . in view of the prospects in @xmath0 physics at the hadronic colliders as tevatron and lhc , @xmath0 physics is attracting more and more attention . </S>",
    "<S> it has been shown that a high luminosity @xmath1 collider running around the @xmath2-peak is also helpful for studying the properties of @xmath0 meson and has its own advantages . </S>",
    "<S> for the purpose , we write down an event generator for simulating @xmath0 meson production through @xmath1 annihilation according to relevant publications </S>",
    "<S> . we name it as beec , in which the color - singlet @xmath3-wave and @xmath4-wave @xmath5-quarkonium states together with the color - octet @xmath3-wave @xmath5-quarkonium states can be generated . </S>",
    "<S> beec can also be adopted to generate the similar charmonium and bottomnium states via the semi - exclusive channels @xmath6\\rangle + q + \\bar{q}$ ] with @xmath7 and @xmath8 respectively . to increase the simulation efficiency , we simplify the amplitude as compact as possible by using the improved trace technology . </S>",
    "<S> beec is a fortran programme written in a pythia - compatible format and is written in a modularization structure , one may apply it to various situations or experimental environments conveniently by using the gnu c compiler * make*. a method to improve the efficiency of generating unweighted events within pythia environment has been suggested . </S>",
    "<S> moreover , beec will generate a standard les houches event data file that contains useful information of the meson and its accompanying partons , which can be conveniently imported into pythia to do further hadronization and decay simulation . + * pacs numbers : * 12.38.bx , 14.40.pq , 12.39.jh    </S>",
    "<S> * keywords : * beec , @xmath0 meson , pythia , @xmath9 collider    * program summary * + _ title of program _ : beec + _ version _ : 1.0 + _ program obtained from _ </S>",
    "<S> : cpc program library . </S>",
    "<S> + _ computer _ : any computer with fortran compiler , the program is tested with gnu fortran compiler and intel fortran compiler . + _ operating systems _ : unix , linux and windows . </S>",
    "<S> + _ programming language used _ </S>",
    "<S> : fortran 77/90 . </S>",
    "<S> + _ memory required to execute with typical data _ : about 2.0 mb . </S>",
    "<S> + _ no . of bytes in </S>",
    "<S> distributed program , ( including pythia 6.4.24 ) _ : about 1.0 mb . </S>",
    "<S> + _ distribution format _ : compressed tar file . </S>",
    "<S> + _ keywords _ : beec , @xmath0 meson , pythia , @xmath9 collider . </S>",
    "<S> + _ nature of physical problem _ : production of the charmonium , the @xmath5-quarkonium and the bottomonium via the @xmath9 annihilation channel around the @xmath2 peak . </S>",
    "<S> + _ method of solution _ : the production of heavy ( @xmath10)-quarkonium @xmath11 via @xmath1 annihilation are estimated by using the improved trace technology . </S>",
    "<S> the ( @xmath10)-quarkonium in color - singlet 1@xmath3-wave state , 1@xmath4-wave state , and the color - octet 1@xmath3-wave states have been studied within the framework of non - relativistic qcd . </S>",
    "<S> the code with option can generate weighted and unweighted events conveniently , especially , the unweighted events are generated by using an improved hit - and - miss approach so as to improve the generating efficiency . </S>",
    "<S> + _ restrictions on the complexity of the problem _ : the generator is aimed at the production of double heavy quarkonium through @xmath1 annihilation at the @xmath2 peak . </S>",
    "<S> the considered processes are those that are associated with two heavy quark jets , which could provide sizable quarkonium events around the @xmath2 peak . </S>",
    "<S> + _ typical running time _ : it depends on which option one choices to match pythia when generating the heavy quarkonium events . </S>",
    "<S> typically , for the production of the @xmath3-wave quarkonium states , if setting idwtup=@xmath12 ( unweighted events ) , then it takes about 2 hour on a 2.9 ghz amd athlon ( tm ) ii@xmath13 635 processor machine to generate @xmath14 events ; if setting idwtup=@xmath15 ( weighted events ) , it takes only @xmath16 minutes to generate @xmath17 events . </S>",
    "<S> for the production of the @xmath4-wave quarkonium states , the time will be almost one hundred times longer than the case of the @xmath3-wave quarkonium . </S>"
  ]
}