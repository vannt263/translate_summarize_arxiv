{
  "article_text": [
    "a _ @xmath1-colouring _ of a graph @xmath2 is an assignment of @xmath1 colours to the vertices of @xmath2 so that no two adjacent vertices receive the same colour .",
    "the @xmath1-colourability is the problem of determining whether or not a given graph @xmath2 admits a @xmath1-colouring .",
    "the optimization version of the problem asks to find a @xmath1-colouring of @xmath2 with minimum @xmath1 , called the _ chromatic number _ of @xmath2 and denoted @xmath3 .",
    "the @xmath1-colourability is one of the central problems of algorithmic graph theory with numerous applications @xcite .",
    "it is also one of the most difficult problems : it is np - complete in general @xcite and its optimization version is even hard to approximate @xcite .",
    "moreover , the problem remains difficult in many restricted graph families , for example triangle - free graphs @xcite or line graphs @xcite ( in which case it coincides with the edge @xmath1-colourability ) . on the other hand ,",
    "when restricted to some other classes , such as graphs of vertex degree at most @xmath1 @xcite or perfect graphs @xcite , the problem can be solved in polynomial time .",
    "efficient polynomial - time algorithms for finding optimal colourings are available for many particular subclasses of perfect graphs , including chordal graphs @xcite , weakly chordal graphs @xcite , and comparability graphs @xcite .",
    "all the aforementioned examples refer to graph classes possessing the property that with any graph @xmath2 they contain all induced subgraphs of @xmath2 .",
    "such classes are known in the literature under the name of _ hereditary _ classes .",
    "any hereditary class can be described by a unique set of minimal graphs that do not belong to the class , so - called _ forbidden induced subgraphs_. a nice survey on colouring vertices of graphs in hereditary classes can be found in @xcite .",
    "an important line of research of this type deals with @xmath4-free graphs , i.e. , classes excluding a path on @xmath5 vertices @xmath4 as an induced subgraph .",
    "sgall and woeginger showed in @xcite that @xmath6-colourability is np - complete for @xmath7-free graphs and @xmath8-colourability is np - complete for @xmath9-free graphs .",
    "the last result was improved in @xcite , where the authors claim that by modifying the reduction from @xcite @xmath8-colourability can be shown to be np - complete for @xmath10-free graphs . on the other hand ,",
    "the @xmath1-colourability problem can be solved in polynomial time for @xmath11-free graphs as they constitute a subclass of perfect graphs . for @xmath12 ,",
    "the complexity of the problem is generally unknown , except for the case of @xmath13-colourability of @xmath0-free @xcite and @xmath14-free graphs @xcite .",
    "known results on the @xmath1-colourability problem in classes of @xmath4-free graphs are summarized in table [ table ] ( under columns 5 and 6 , @xmath15 is matrix multiplication exponent known to satisfy @xmath16 @xcite ) .    [ table ]    .known complexities for @xmath1-colourability of @xmath4-free graphs [ cols=\"^,^,^,^,^,^,^,^,^,^,^,^\",options=\"header \" , ]     in this paper , we focus on the minimal class from table [ table ] where the @xmath1-colourability problem is unsolved , i.e. , the class of @xmath0-free graphs .",
    "this class is `` stubborn '' with respect to various graph problems .",
    "for instance , @xmath0-free graphs constitute a unique minimal class defined by a single forbidden induced subgraph with unknown complexity of the maximum independent set and minimum independent dominating set problems .",
    "many algorithmic problems are known to be np - hard in the class of @xmath0-free graphs , which includes , among others , dominating set @xcite and chromatic number @xcite .",
    "in contrast to the np - hardness of finding the chromatic number of a @xmath0-free graph , we show that @xmath1-colourability can be solved in this class in polynomial time for each particular value of @xmath1 . in the case of a positive answer",
    ", our algorithm yields a valid @xmath1-colouring . along with the mentioned result on 3-colourability of @xmath0-free graphs , our solution generalizes several other previously studied special cases of the problem , such as @xmath8-colourability of @xmath17-free graphs @xcite and @xmath8-colourability of @xmath0-free graphs containing a dominating clique on four vertices @xcite .",
    "we also note the algorithm in @xcite that colours a @xmath18-free graph @xmath2 with @xmath19 colours .",
    "the remainder of the paper is organized as follows . in section [ sec : defs ] we give relevant definitions , concepts , and notations . in section",
    "[ sec : algo ] , we present our recursive polynomial time algorithm that answers the @xmath1-colourability question for @xmath0-free graphs .",
    "the difficult step in the algorithm is detailed using two different approaches .",
    "we conclude with a summary of our results in section [ sec : summary ] along with a list of open problems .",
    "in this section we provide the necessary background and definitions used in the rest of the paper . for starters , we assume that @xmath20 is a simple undirected graph where @xmath21 and @xmath22 . if @xmath23 is a subset of @xmath24 , then we let @xmath25 denote the subgraph of @xmath2 induced by @xmath23 .",
    "stable set _ is a set of vertices such that there is no edge joining any two vertices in it .",
    "a set of vertices @xmath23 is said to _ dominate _ another set @xmath26 , if every vertex in @xmath26 is adjacent to at least one vertex in @xmath23 .",
    "the following structural result about @xmath0-free graphs is from bacs and tuza @xcite :    [ thm : basco ] every connected @xmath0-free graph has either a dominating clique or a dominating @xmath27 .    given a graph @xmath2 , an integer @xmath1 and for each vertex @xmath28 , a list @xmath29 of @xmath1 colours , the _",
    "@xmath1-list colouring problem _ asks whether or not there is a colouring of the vertices of @xmath2 such that each vertex receives a colour from its list .",
    "the _ restricted @xmath1-list colouring problem _ is the @xmath1-list colouring problem in which the lists @xmath29 of colours are subsets of @xmath30 .",
    "our general approach is to take an instance of a specific colouring problem @xmath31 for a given graph and replace it with a polynomial number of instances @xmath32 such that the answer to @xmath31 is `` yes '' if and only if there is some instance @xmath33 that also answers `` yes '' .    for example , consider a graph with a dominating vertex @xmath34 where each vertex has colour list @xmath35 this listing corresponds to our initial instance @xmath31 . now , by considering different ways to colour @xmath34 , the following four instances will be equivalent to @xmath31 :    1 .",
    "@xmath36 :   @xmath37 and the remaining vertices have colour lists @xmath38 , 2 .",
    "@xmath39 :   @xmath40 and the remaining vertices have colour lists @xmath41 , 3 .",
    "@xmath42 :   @xmath43 and the remaining vertices have colour lists @xmath44 , 4 .",
    "@xmath45 :   @xmath46 and the remaining vertices have colour lists @xmath35 .    in general ,",
    "if we recursively apply such an approach we would end up with an equivalent set with an exponential number of colouring instances .",
    "let @xmath2 be a connected @xmath0-free graph .",
    "this section describes a polynomial time algorithm that decides whether or not @xmath2 is @xmath1-colourable .",
    "our strategy is as follows .",
    "first , we find a dominating set @xmath47 of @xmath2 which is a clique with at most @xmath1 vertices or a @xmath27 .",
    "there are only a finite number of ways to colour the vertices of @xmath47 with @xmath1 colours . for each of these colourings of @xmath47",
    ", we recursively check if it can be extended to a colouring of @xmath2 . each of these subproblems can be expressed by a restricted list colouring problem .",
    "we now describe the algorithm in detail .",
    "the algorithm is outlined in 3 steps .",
    "step 2 requires some extra structural analysis and is presented using two different approaches in the following subsections .    1 .",
    "first , we check if @xmath2 contains a dominating set of size at most @xmath48 . if no such a set is found , then @xmath2 is not @xmath1-colourable .",
    "otherwise , let @xmath47 be a dominating set in @xmath2 , which is either a clique with at most @xmath1 vertices or a @xmath27 .",
    "let the vertices of the dominating set be @xmath49 with @xmath50 . since @xmath47 is a dominating set , we can partition the remaining vertices into _ fixed sets _ @xmath51 , @xmath52 , such that vertices in @xmath53 are adjacent to @xmath54 , and for @xmath55 , vertices in @xmath56 are adjacent to @xmath57 but not to @xmath58 .",
    "the colour list of the vertices in the fixed sets have size at most @xmath59 since each vertex in @xmath47 is already assigned a colour .",
    "this gives rise to our original restricted list - colouring instance @xmath31 .",
    "two vertices are _ dependent _ if there is an edge between them and the intersection of their colour lists is non - empty . in this step ,",
    "we remove all dependencies between each pair of fixed sets .",
    "this process will create a set @xmath60 , equivalent to @xmath31 , of a polynomial number of colouring instances .",
    "two different methods for performing this step are outlined in the following subsections .",
    "3 .   for each instance",
    "@xmath61 from step 2 the dependencies between each pair of fixed sets have been removed which means that the vertices within each fixed set can be coloured independently .",
    "thus , for each instance @xmath61 we recursively see if each fixed set can be coloured with the corresponding restricted colour lists ( the base case is when the colour lists are a single colour ) .",
    "if _ one _ such instance provides a valid @xmath1-colouring then return the colouring .",
    "otherwise , the graph is not @xmath1-colourable .",
    "as mentioned , the difficult part is reducing the dependencies between each pair of fixed sets ( step 2 ) .",
    "we present two different approaches to handle step 2 .",
    "the first is conceptually simpler while the second includes additional structural results .",
    "let @xmath62 be the set of colours that appear in the lists of vertices of a set @xmath63 .",
    "let @xmath23 and @xmath26 be two fixed sets .",
    "note that @xmath64 and @xmath65 .",
    "we remove dependencies between @xmath23 and @xmath26 by applying the following procedure .    1 .",
    "find a @xmath66-colouring of @xmath23 ( respectively , @xmath26 ) with stable sets @xmath67 ( respectively , @xmath68 @xmath69 ) .",
    "if @xmath23 or @xmath26 can not be @xmath66-coloured , then @xmath2 can not be @xmath1-coloured .",
    "2 .   for each @xmath70 and each @xmath71 , remove dependencies between @xmath72 and @xmath73 .    now",
    ", we describe how to remove dependencies between two stable sets @xmath74 and @xmath75 .",
    "let @xmath76 ( respectively , @xmath77 ) be the set of vertices of @xmath78 ( respectively , @xmath79 ) that are dependent on some vertices of @xmath79 ( respectively , @xmath78 ) .",
    "note that @xmath76 is non - empty if and only if @xmath77 is non - empty .",
    "[ dominating_vertex ] if @xmath80 , there exists a vertex in @xmath76 that is adjacent to all vertices in @xmath77 .    _",
    "proof_. let @xmath81 be a vertex of @xmath76 with a maximal neighborhood in @xmath77 .",
    "assume there exists a vertex @xmath82 that is not adjacent to @xmath81 .",
    "then , there must exist a vertex @xmath83 ( different than @xmath81 ) adjacent to @xmath84 . also ,",
    "by the choice of @xmath81 , there must exist a vertex @xmath85 that is adjacent to @xmath81 but not @xmath86 .",
    "since @xmath78 and @xmath79 belong to different fixed sets , there exists a vertex @xmath28 in the dominating set such that either @xmath28 is adjacent to @xmath87 but not @xmath88 , or @xmath28 is adjacent to @xmath88 but not @xmath87 .",
    "but then @xmath89 is an induced @xmath0 ; a contradiction .",
    "lemma [ dominating_vertex ] states that as long as @xmath76 and @xmath77 are non - empty , we can find a vertex @xmath91 that dominates @xmath77 .",
    "now given such a vertex @xmath92 , we can create new equivalent colouring instances by assigning to @xmath92 ( i ) a colour from @xmath93 and ( ii ) the list @xmath94 . in the former instances the vertices in @xmath77",
    "lose the colour assigned to @xmath92 from their lists i.e. , @xmath95 decreases by one . in the latter instance",
    ", the vertex @xmath92 is no longer dependent on any vertex in @xmath77 and is thus removed from @xmath76 . in this case , we recursively repeat this process until @xmath76 is empty by finding a new vertex in @xmath76 that dominates @xmath77 .",
    "this will result in at most @xmath96 new colouring instances where either @xmath76 is empty or @xmath95 has decreased by one from its initial state . to reduce @xmath95 to zero",
    ", we repeatedly apply this process at most @xmath1 times .",
    "thus , we can completely remove the dependencies between @xmath76 and @xmath77 by producing at most @xmath97 new equivalent colouring instances .",
    "* analysis . * to remove the dependencies between each @xmath72 and @xmath73 requires @xmath97 new equivalent instances .",
    "thus , to remove the dependencies between each pair of fixed sets ( step 2 of ) requires @xmath98 new equivalent instances .",
    "since there are @xmath1 fixed sets , there are less than @xmath99 pairs of fixed sets .",
    "thus , to remove dependencies between each pair of fixed sets ( given the stable sets for each fixed set ) requires @xmath100 equivalent instances . to find the stable sets for each fixed set",
    "requires a single recursive @xmath101 colouring on the graph @xmath2 with the initial dominating set combined with the edges between the fixed sets removed .",
    "now , let @xmath102 denote the number of subproblems produced by the where @xmath1 is the number of colours used on a graph with @xmath103 vertices .",
    "from the previous analysis we arrive at the following recurrence where @xmath104 : @xmath105 a proof by induction shows @xmath106 , implying our algorithm runs in polynomial time .      for our second method for removing the dependencies between a pair of fixed sets",
    ", it will be convenient to associate a fixed set @xmath56 to the colours in its lists .",
    "for this purpose , let @xmath107 denote a fixed set of vertices with colour list given by @xmath108 .",
    "we partition each such fixed set into * dynamic sets * @xmath109 that each represents a unique subset of the colours in @xmath108 .",
    "for example : @xmath110 .",
    "initially , @xmath111 and the remaining sets in the partition are empty . however , as we start removing dependencies , these sets will dynamically change .",
    "for example , if a vertex @xmath34 is initially in @xmath112 and one of its neighbors gets coloured 2 , then @xmath34 will be removed from @xmath112 and added to @xmath113 .",
    "recall that our goal is to remove the dependencies between two fixed sets @xmath114 and @xmath115 . to do this",
    ", we remove the dependencies between each pair ( @xmath116 ) where @xmath117 is a dynamic subset of @xmath114 and @xmath118 is a dynamic subset of @xmath115 . by visiting these pairs in order from largest to smallest with respect to @xmath119 and then @xmath120 , we ensure that we only need to consider each pair once .",
    "applying this approach , the crux of the reduction process is to remove the dependencies between a pair @xmath121 by creating at most a polynomial number of equivalent colourings .",
    "now , observe that there exists a vertex @xmath28 from the dominating set found in step 1 of the algorithm that dominates every vertex in one set , but is not adjacent to any vertex in the other .",
    "this is because @xmath117 and @xmath118 are subsets of different fixed sets . without loss of generality",
    "assume that @xmath28 dominates @xmath118 .",
    "now , consider the ( connected ) components of @xmath122 and @xmath123 .",
    "if a component @xmath124 in @xmath122 is not adjacent to any vertex in @xmath118 then the vertices in @xmath124 have no dependencies with @xmath118 .",
    "the same applies for such components in @xmath118 .",
    "since these components have no dependencies , we focus on the induced subgraph @xmath125 with these components removed .",
    "this graph is illustrated in figure [ fig : reduction ] where the small rectangles represent the components in @xmath122 and @xmath123 respectively .",
    "it is easy to observe that @xmath126 is connected ( if not , then there are components @xmath127 of @xmath126 , each of which contains a vertex in @xmath117 and a vertex in @xmath118 ; it follows there are edges @xmath128 of @xmath129 and @xmath130 of @xmath131 such that @xmath132 induce a @xmath0 ) .",
    "[ thm : main ] let @xmath126 be a connected @xmath0-free graph partitioned into three sets @xmath117 , @xmath118 and @xmath133 where @xmath28 is adjacent to every vertex in @xmath118 but not adjacent to any vertex in @xmath117",
    ". then there exists at most one component in @xmath122 that contains two vertices @xmath134 and @xmath135 such that @xmath134 is adjacent to some component @xmath136 but not adjacent to another component @xmath137 while @xmath135 is adjacent to @xmath138 but not @xmath139 .",
    "proof : the proof is by contradiction .",
    "suppose that there are two unique components @xmath140 with @xmath141 and @xmath142 and components @xmath143 and @xmath144 from @xmath123 such that :    * @xmath134 is adjacent to @xmath139 but not adjacent to @xmath138 , * @xmath135 is adjacent to @xmath138 but not adjacent to @xmath139 , * @xmath145 is adjacent to @xmath146 but not adjacent to @xmath147 , * @xmath148 is adjacent to @xmath147 but not adjacent to @xmath146 .",
    "let @xmath149 denote an arbitrary vertex from the component @xmath150 .",
    "since @xmath126 is @xmath0-free , there must be edges @xmath128 and @xmath130 , otherwise @xmath151 and @xmath152 would be @xmath0s .",
    "an illustration of these vertices and components is given in figure [ fig : proof ] - the solid lines .",
    "now , if @xmath153 , then there exists a @xmath154 .",
    "thus , @xmath138 and @xmath146 must be unique components , and @xmath155 must be different as well for the same reason .",
    "similarly @xmath156 .",
    "now since @xmath157 can not be a @xmath0 , either @xmath135 is adjacent to @xmath146 or @xmath145 must be adjacent to @xmath138 . without loss of generality ,",
    "suppose the latter .",
    "now @xmath158 implies that either @xmath134 or @xmath135 is adjacent to @xmath147 .",
    "if the latter , then @xmath159 would be a @xmath0 which implies that @xmath134 must be adjacent to @xmath147 anyway .",
    "thus , we end up with a @xmath160 which is a contradiction to the graph being @xmath0-free .",
    "@xmath90    from theorem [ thm : main ] , there is at most one component @xmath78 in @xmath122 that contains two vertices @xmath134 and @xmath135 such that @xmath134 is adjacent to some component @xmath136 but not adjacent to another component @xmath137 while @xmath135 is adjacent to @xmath138 but not @xmath139 . if such a component exists , then we can remove the vertices in @xmath78 from @xmath117 by applying the following general method for removing a component @xmath63 from a dynamic set @xmath47 .",
    "* since @xmath63 is @xmath0-free , it has a dominating clique or @xmath27 ( theorem [ thm : basco ] ) .",
    "if this dominating set @xmath47 can be coloured with the list @xmath161 , we consider all such colourings ( otherwise we report there is no valid colouring for the given instance ) .",
    "for each case the colouring will remove all vertices in the component from @xmath47 to other dynamic sets represented by smaller subsets of available colours .",
    "observe that since @xmath1 is fixed , the number of such colourings is constant .",
    "if there are still dependencies between @xmath117 and @xmath118 , then we make the following claim ( observing that the graph @xmath126 dynamically changes as @xmath117 and @xmath118 change ) :    there exists a vertex @xmath162 that is adjacent to all components in @xmath163 .",
    "moreover , @xmath92 dominates all components of @xmath163 except at most one .",
    "proof : let @xmath162 be adjacent to a maximal number of components in @xmath163",
    ". if it is not adjacent to all components , then there must exist another vertex @xmath164 and components @xmath165 such that @xmath92 is adjacent to @xmath139 but not @xmath138 and @xmath166 is adjacent to @xmath138 but not @xmath139 .",
    "this implies that there is a @xmath167 where @xmath168 and @xmath169 unless @xmath92 and @xmath166 are adjacent .",
    "however by theorem [ thm : main ] , they can not belong to the same component in @xmath170 since such a component would already have been removed - a contradiction .    now , suppose that there are two components @xmath139 and @xmath138 in @xmath163 that @xmath92 does _ not _ dominate . then there exists edges @xmath171 and @xmath172 such that @xmath92 is adjacent to @xmath173 and @xmath84 , but not @xmath174 nor @xmath175 .",
    "this however , implies the @xmath176 - a contradiction .",
    "@xmath90    now we identify such an @xmath92 outlined in this claim and create equivalent new colouring instances by assigning @xmath92 with each colour from @xmath177 and then with the list @xmath178 . if @xmath92 is assigned a colour from @xmath177 , then all but at most one component will be removed from @xmath163 .",
    "if one component remains , then we can remove it from @xmath118 by applying . in the latter case , where @xmath92 is assigned the colour list @xmath179 ,",
    "@xmath92 will be removed from @xmath117 .",
    "if there are still dependencies between @xmath117 and @xmath118 , we repeat this step by finding another vertex @xmath92 . in the worst case",
    "we have to repeat this step at most @xmath180 times .",
    "therefore , the process for removing the dependencies between two dynamic sets creates at most @xmath181 new equivalent colouring instances .    * analysis .",
    "* we have just shown that we require at most @xmath181 new equivalent colouring instances to remove the dependencies between two dynamic sets .",
    "since each fixed set contains at most @xmath182 dynamic sets , there are @xmath183 pairs of dynamic sets to consider between each pair of fixed sets .",
    "thus , removing the dependencies between two fixed sets produces @xmath184 subproblems . since there at most @xmath99 pairs of fixed sets , this means that to remove the dependencies between all fixed sets creates @xmath185 subproblems .",
    "as with the previous method , let @xmath102 denote the number of subproblems produced by the where @xmath1 is the number of colours used on a graph with @xmath103 vertices . from the previous analysis we arrive at the following recurrence where @xmath186 : @xmath187 a proof by induction proves that @xmath188 , implying our algorithm runs in polynomial time .",
    "[ thm : main2 ] the restricted @xmath1-list colouring problem for @xmath0-free graphs , for a fixed integer @xmath1 , can be solved in polynomial time .",
    "determining whether or not a @xmath0-free graph can be coloured with @xmath1-colours , for a fixed integer @xmath1 , can be decided in polynomial time .",
    "the algorithm presented in this paper brings us one step closer to completely answering the question of when there exists a polynomial time algorithm for the @xmath1-colourability problem for @xmath4-free graphs , given fixed @xmath1 and @xmath5 .",
    "in particular , we now know that there exists a polynomial time algorithm when @xmath189 for any fixed value of @xmath1 .",
    "* does there exist a polynomial time algorithm determine whether or not a @xmath190-free graph can 3-coloured .",
    "* does there exist a polynomial time algorithm determine whether or not a @xmath14-free graph can 4-coloured .",
    "* is the problem of @xmath1-colouring a @xmath190-free graph np - complete .                                  d.v .",
    "korobitsyn , on the complexity of determining the domination number in monogenic classes of graphs , diskret . mat .",
    "2 , n 3 ( 1990 ) , 90 - 96 in russian , translation in discrete mathematics and applications , 2 ( 1992 ) , no . 2 , 191 - 199 ) ."
  ],
  "abstract_text": [
    "<S> the problem of computing the chromatic number of a @xmath0-free graph is known to be np - hard . </S>",
    "<S> in contrast to this negative result , we show that determining whether or not a @xmath0-free graph admits a @xmath1-colouring , for each fixed number of colours @xmath1 , can be done in polynomial time . </S>",
    "<S> if such a colouring exists , our algorithm produces  it .    </S>",
    "<S> * keywords : * graph colouring , dominating clique , polynomial - time algorithm , @xmath0-free graph </S>"
  ]
}