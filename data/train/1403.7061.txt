{
  "article_text": [
    "various types of protection sets are motivated by the desire to detect failures efficiently in settings where the underlying structure can be modeled as a network or graph .",
    "one such example is location detection in a wireless sensor network where one tries to find a distinguishing set .",
    "a collection of subsets @xmath1 of @xmath2 is a _ distinguishing set _ if @xmath3 and for every pair of distinct vertices @xmath4 , some @xmath5 contains exactly one of them . in @xcite , _ identifying codes _ are shown to provide solutions for optimal sensor placement . _ identifying codes _ , or _",
    "id - codes _ , introduced in 1998 by karpovsky , chakrabarty and levitin @xcite , is a subset of vertices @xmath6 such that @xmath7 , n[v_2 ] , \\ldots , n[v_k]\\}$ ] is a distinguishing set , where @xmath8 $ ] is closed neighborhood of @xmath9 ( the union of @xmath9 and its neighborhood @xmath10 ) .",
    "seo and slater @xcite introduced and studied _ open locating dominating sets _ or _ old - sets _ , a subset of vertices @xmath6 such that @xmath11 is a distinguishing set .",
    "old - sets can be used to identify malfunctioning elements in a network @xcite .",
    "honkala , laihonen and ranto  @xcite introduced and studied _ strong identifying codes _ , a subset of vertices that is both an identifying code and an old - set .",
    "we study the old - sets here . as mentioned above",
    ", a set @xmath12 is an old - set if    * for every vertex @xmath13 , @xmath14 . * for any vertices @xmath15 such that @xmath16 , @xmath17 .",
    "not every graph has an old - set or an id - code .",
    "it was shown in @xcite that an old - set exists if and only if the graph has no isolated vertices and no two vertices have the same neighborhood .    for finite graphs , the _ old - number _",
    "is defined to be the minimum cardinality of an old - set .",
    "it is shown in @xcite that it is np - complete to determine if the old - number is at most @xmath18 for a given positive integer @xmath18 .",
    "for infinite graphs , a natural extension of the old - number is the _ old - density _ or simply the _ density _ when the context is clear .",
    ".1 true in    the _ old - density _ of an old - set is defined to be @xmath19 \\cap s|}{|n_k[v]| } :   \\text { $ s$ is an old - set}\\},\\ ] ] where @xmath20 $ ] is the set of all vertices in @xmath21 that are within @xmath18 distance of @xmath9 .",
    ".1 true in    we can think of the _ old - density _ as the percentage of vertices of a graph which are included in an old - set .",
    "it has been a popular topic to study the density of identifying codes in infinite grids , see @xcite .",
    "it may be difficult to determine the exact density of identifying codes for many infinite grids , for example , the infinite hexagonal grid .",
    "we are also interested in the old - density of infinite grids .",
    "it is not hard to show ( see @xcite ) that every @xmath22-regular graph has old - density at least @xmath23 . seo and",
    "slater @xcite showed that the old - density of an infinite square grid is @xmath24 and an infinite hexagonal grid is @xmath25 .",
    "for an infinite triangular grid , they gave a construction with density @xmath26 .",
    "honkala@xcite gave a better construction with a density of @xmath27 , see figure  [ 3.1 ] . for more results on identifying codes of old - sets , see the dynamic survey by lobstein  @xcite , which lists more than 270 articles on those topics .",
    "( left ) and @xmath27 ( right),title=\"fig:\"]0.7 in   ( left ) and @xmath27 ( right),title=\"fig : \" ]    as the infinite triangular grid is @xmath28-regular , an obvious lower bound for the density of an old - set is @xmath29 .",
    "here we give a construction with density @xmath0 , see figure  [ 4 - 13 ] .    ]",
    "we also show that the density is at least @xmath0 .",
    "thus we obtain the optimal density of the infinite triangular grid .",
    "the optimal old - density of the infinite triangular grid is @xmath0 .",
    "the proof of the lower bound uses a discharging argument , a popular method in graph coloring problems and recently adapted to the study of identifying codes , see @xcite .",
    "the idea is to assign weight @xmath30 to vertices in the old - set and @xmath31 to other vertices , and then redistribute the weights among vertices so that each vertex ends up with a weight at least @xmath0 .",
    "this proof is given in the next seold - setction .",
    "in this section , we show that each old - set in an infinite triangular grid has density at least @xmath0 .",
    "let @xmath32 be an old - set in the infinite triangular grid .",
    "as mentioned above , we assign weight @xmath30 to each vertex in @xmath32 and @xmath31 to vertices not in @xmath32 .",
    "we redistribute the weights so that each vertex on the grid has weight at least @xmath0 . before proceeding we provide a collection of definitions needed for the proof .",
    "we define a _ @xmath33-cluster _ in @xmath32 to be a connected component in @xmath32 with @xmath33 vertices .",
    "then @xmath34 , as @xmath30-cluster is not allowed in an old - set .",
    "if @xmath9 is in cluster @xmath35 , then we denote @xmath36 the number of neighbors @xmath9 has in @xmath35 and call @xmath9 a @xmath18-vertex ( or @xmath37-vertex ) if @xmath38 ( or @xmath39 ) .",
    "corner @xmath40-vertex _ in a cluster @xmath35 is a @xmath40-vertex whose two neighbors in @xmath35 share two neighbors in @xmath21 , and a _",
    "poor @xmath40-vertex _ is a corner @xmath40-vertex that has no @xmath41-vertices or corner @xmath40-vertices as neighbors ; a _",
    "@xmath42-couple _ is a pair of adjacent vertices @xmath43 such that @xmath44 and @xmath45 , and a _ poor couple _ is a @xmath42-couple such that the @xmath40-vertex is poor , see figure  [ poor - vertices ] .",
    ".1 true in    a _",
    "@xmath33-cluster _ in an old - set @xmath32 is a connected component in @xmath32 with @xmath33 vertices .",
    ".1 true in    we note that @xmath34 , as a @xmath30-cluster is not allowed in an old - set .",
    "the following definitions assume that the @xmath33-cluster @xmath35 is in an old - set @xmath32 .",
    ".1 true in    let _",
    "@xmath36 _ denote the number of neighbors @xmath9 has in a @xmath33-cluster @xmath35 .",
    ".1 true in    a _",
    "@xmath18-vertex _ is any vertex @xmath9 in a @xmath33-cluster @xmath35 for which @xmath38 .",
    ".1 true in    a _ corner @xmath40-vertex _ in a @xmath33-cluster @xmath35 is a @xmath40-vertex whose two neighbors in @xmath35 share two neighbors in @xmath21 .",
    ".1 true in    a _",
    "@xmath41-vertex _ in a @xmath33-cluster @xmath35 is a vertex @xmath9 with @xmath46 ..    .1 true in    a _",
    "poor @xmath40-vertex _ is a corner @xmath40-vertex in a @xmath33-cluster that has no @xmath41-vertices or corner @xmath40-vertices as neighbors in @xmath21 .",
    ".1 true in    a _",
    "@xmath42-couple _ is a pair of adjacent vertices @xmath43 such that @xmath44 and @xmath45 .",
    ".1 true in    a _ poor couple _ is a @xmath42-couple such that the @xmath40-vertex is a poor @xmath40-vertex .",
    ".1 true in    -vertex ( a ) , poor @xmath40-vertex ( b ) , and poor couple ( c ) ]    here are the rules we use to redistribute the weights :    1 .",
    "every vertex gets @xmath47 charge from each of the @xmath18 clusters to which it is adjacent .",
    "a vertex which gains a charge of @xmath48 from a cluster and is adjacent to @xmath49 vertices in that cluster gains @xmath50 from each of those @xmath49 vertices .",
    "3 .   in a @xmath33-cluster @xmath35 with @xmath51 ,",
    "a @xmath30-vertex not in a @xmath42-couple receives @xmath52 from its neighbor , a poor @xmath40-vertex not in a poor couple receives @xmath53 from its non - poor neighbors , and a poor couple receives @xmath54 from its neighbor .",
    "now we show that every vertex will have a weight of at least @xmath55 . by doing so ,",
    "we show that either the vertex has weight at least @xmath0 , or the vertex belongs to a set of vertices ( cluster or couple , for example ) that has average weight at least @xmath0 .",
    "clearly , each vertex not in @xmath32 has final weight at least @xmath0 , by ( r1 ) . for any vertex in @xmath32 ,",
    "the proof proceeds by considering all possible cluster sizes in which the vertex may reside . + * case 1 * : @xmath40-clusters .",
    "let the two vertices in this cluster @xmath35 be @xmath56 and @xmath9 .",
    "then there are eight vertices not in @xmath32 and adjacent to @xmath56 or @xmath9 . among the eight vertices ,",
    "two of them are adjacent to both @xmath56 and @xmath9 , thus at least one of them is adjacent to another cluster , then by ( r1 ) , these two vertices gain at most @xmath57 from @xmath35 .",
    "each of the three vertices only adjacent to @xmath56 ( and similarly to @xmath9 ) must be adjacent to another cluster , thus each of them gains at most @xmath58 from @xmath56 .",
    "therefore , @xmath35 gives at most @xmath59 to those vertices .",
    "so the final weights on @xmath56 and @xmath9 are @xmath60 .",
    "+ * case 2 * : @xmath61-clusters .",
    "the only @xmath61-cluster is a triangle , for otherwise it is a path in which the two outer vertices would share the same neighborhood ( the middle vertex ) in @xmath32 .    let the three vertices in the @xmath61-cluster @xmath35 be @xmath62 and @xmath63 .",
    "then @xmath35 has @xmath64 neighbors not in @xmath32 , three of which are adjacent to two vertices in @xmath35 and six of which are adjacent to exactly one vertex in @xmath35 .",
    "the vertex adjacent to @xmath65 ( and similarly to @xmath66 and @xmath67 ) must be adjacent to another cluster , for otherwise it shares the same neighborhood with @xmath63 in @xmath32 , thus it gains at most @xmath58 from @xmath35 .",
    "for the two vertices only adjacent to @xmath56 ( and similarly @xmath9 and @xmath63 ) , one of them must be adjacent to another cluster , for",
    "otherwise they share the same neighborhood ( @xmath56 ) in @xmath32 .",
    "so @xmath35 gives at most @xmath57 to the two vertices and by symmetry , @xmath68 to the six vertices with exactly one neighbor in @xmath35 .",
    "so the final weights on @xmath69 are @xmath70 . + * case 3 * : @xmath71-clusters .",
    "the four possible configurations of a @xmath71-cluster are show in figure  [ 4-clusters ] .",
    "-clusters ]    case 3a : the @xmath71-cluster in figure  [ 4-clusters]a .",
    "the cluster @xmath35 has @xmath72 neighbors outside of @xmath32 , and among them , two are adjacent to three vertices in @xmath35 which gain at most @xmath73 from @xmath35 by ( r1 ) , two are adjacent to two vertices in @xmath35 which gain at most @xmath73 from @xmath35 by ( r1 ) , two are adjacent to exactly one vertex in @xmath35 ( @xmath74 or @xmath75 ) which are also adjacent to another cluster thus gaining @xmath76 from @xmath35 by ( r1 ) , and the remaining six vertices are either adjacent to @xmath74 or @xmath77 and four of them are adjacent to another cluster , thus gaining @xmath78 from @xmath35 by ( r1 ) .",
    "so the final weights on the vertices in @xmath35 are at least @xmath79 .",
    "+ case 3b : the @xmath71-cluster in figure  [ 4-clusters]b .",
    "the vertex adjacent to three vertices in @xmath35 gains at most @xmath0 from @xmath35 , the vertex adjacent to @xmath80 and the vertex adjacent to @xmath75 and @xmath81 gain at most @xmath73 from @xmath35 , the vertex adjacent to @xmath77 and @xmath75 is adjacent to another cluster , thus it gains at most @xmath58 from @xmath35 , two of the three vertices adjacent to @xmath74 are adjacent to another cluster , thus the three vertices gain at most @xmath82 from @xmath35 , one of the two vertices adjacent to @xmath75 is adjacent to another cluster thus the two vertices gain at most @xmath57 from @xmath35 , and the vertex adjacent to @xmath81 gains at most @xmath0 from @xmath35 .",
    "so the final weights on @xmath35 are at least @xmath83 .",
    "+ case 3c : the @xmath71-cluster in figure  [ 4-clusters]c . by ( r1 ) ,",
    "the vertex with four neighbors in @xmath35 gains @xmath0 from @xmath35 , the three vertices adjacent to two vertices in @xmath35 gain @xmath84 from @xmath35 , the vertex adjacent to @xmath77 and the vertex adjacent to @xmath75 are adjacent to other clusters , thus they gain at most @xmath76 from @xmath35 , two of the three vertices adjacent to @xmath74 ( and similarly to @xmath81 ) are adjacent to other clusters , thus these three vertices gain at most @xmath82 .",
    "so the final weights on @xmath35 are at least @xmath85 .",
    "+ case 3d : the @xmath71-cluster in figure  [ 4-clusters]d .",
    "one of the two vertices adjacent to @xmath74 and @xmath77 ( and similarly to @xmath86 , or to @xmath87 ) must be adjacent to another cluster , thus by ( r1 ) these two vertices gain @xmath57 from @xmath35 , and two of the three vertices adjacent to @xmath74 ( and similarly to @xmath81 ) are adjacent to other neighbors , thus by ( r1 ) these three vertices gain at most @xmath82 from @xmath35 .",
    "so the final weights on @xmath35 are at least @xmath88 .",
    "+ * case 4 * : @xmath33-clusters with @xmath51 .",
    "this cluster has initial weight @xmath33 and , after discharging , should have at least @xmath89 weight remaining .",
    "consequently , the cluster can afford to discharge at most @xmath90 and each vertex in the cluster @xmath35 can afford to discharge @xmath91 .",
    "note that in the previous cases , when a vertex @xmath63 , outside of @xmath32 , had neighbors in @xmath32 we could assume that @xmath63 also had neighbors in a different cluster . but with general clusters of size @xmath51 , we can not assume this .",
    "in fact we must assume the worst case , that @xmath35 must discharge all of its available weight , as the neighbors of @xmath63 may in fact all lie in the same cluster .",
    "we will show that each poor couple has a final weight of at least @xmath92 , and vertices not in poor couples have a final weight of at least @xmath0 .",
    "we consider a few cases , depending on whether a vertex in @xmath35 has degree one or more .",
    "+ * case 4.1 * : @xmath30-vertex not in poor couples .",
    "as shown in figure  [ poor-1-vertex ] , let @xmath56 be a poor @xmath30-vertex and @xmath93 be its neighbor . by definition , @xmath46 ,",
    "so @xmath94 or @xmath95 must be in @xmath35 as well . without loss of generality",
    ", we may assume that @xmath96 .        by ( r1 ) and",
    "( r2 ) , the vertex not in @xmath32 and adjacent to @xmath97 needs up to @xmath98 weight from @xmath56 ; the vertex not in @xmath32 and adjacent to @xmath65 needs up to @xmath99 ; @xmath40 of the @xmath61 vertices not in @xmath32 and adjacent to @xmath56 should have other neighbors in @xmath32 , thus the three vertices may need up to @xmath100 from @xmath56 ; so @xmath56 may need to give out @xmath101 , but as @xmath56 initially has @xmath91 and gains @xmath52 from @xmath102 by ( r3 ) , it has enough weight to give out . + * case 4.2 * : @xmath42-couples . as shown in the figure  [ poor - couple ] ,",
    "let @xmath65 be a @xmath42-couple in @xmath35 with @xmath103 , and @xmath63 is the neighbor of the @xmath42-couple in @xmath35 .",
    "note that @xmath9 could be ( figure  [ poor - couple]a ) or not be ( figure  [ poor - couple]b ) a corner vertex .        in figure",
    "[ poor - couple]a , the vertex not in @xmath32 and adjacent to @xmath104 demands at most @xmath105 ( if @xmath106 ) or @xmath107 ( if @xmath108 ) from @xmath109 , and similarly for the vertex not in @xmath32 and adjacent to @xmath110 , but one of them should have a neighbor in @xmath32 other than @xmath111 , we may assume that @xmath112 needs to give @xmath113 to those two vertices .",
    "one of the two vertices not in @xmath32 and adjacent to @xmath56 and @xmath9 should have another neighbor in @xmath32 , so we may assume that @xmath65 gives out up to @xmath114 to those two vertices .",
    "two of the three vertices not in @xmath32 and adjacent to @xmath56 should have other neighbors in @xmath32 , thus we may assume that @xmath65 gives out up to @xmath115 to those three vertices . in total , @xmath65 may give up to @xmath116 , and they can afford it , as they initially have @xmath117 to give out .    in figure",
    "[ poor - couple]b , @xmath9 is poor @xmath40-vertex , thus the couple is poor , if neither @xmath94 nor @xmath95 is in @xmath35 , and by ( r1 ) and ( r2 ) , the vertex not in @xmath32 and adjacent to @xmath111 needs at most @xmath58 from @xmath65 , the vertex not in @xmath32 and adjacent to @xmath118 needs at most @xmath119 from @xmath65 , the vertex not in @xmath32 and adjacent to @xmath9 should have another neighbor in @xmath32 and thus demands at most @xmath58 from @xmath9 , the vertex not in @xmath32 and adjacent to @xmath65 may demand @xmath0 from @xmath65 , two of the three vertices not in @xmath32 and adjacent to @xmath56 should have other neighbors in @xmath32 , thus the three vertices may demand up to @xmath100 from @xmath65 .",
    "so , in total , @xmath65 may need to give out @xmath120 .",
    "as @xmath65 initially have @xmath121 and gain @xmath54 more from @xmath63 by ( r3 ) , they have enough weight to give out .",
    "if @xmath94 is in @xmath35 in figure  [ poor - couple]b , then the vertex not in @xmath35 but adjacent to @xmath104 ( if @xmath96 ) gets @xmath122 from @xmath9 , instead of @xmath99 as in the poor case .",
    "so , the @xmath42-couple may need to give out @xmath123 , which they can afford .",
    "similarly , if @xmath95 is in @xmath35 , then the vertex adjacent to @xmath124 may need @xmath99 from @xmath56 and @xmath9 , instead of @xmath119 as in the poor case , so the @xmath42-couple may need to give out @xmath125 , which they can afford . + * case 4.3 * : @xmath40-vertex not in @xmath42-couples .",
    "let @xmath56 be such a vertex and @xmath111 be the neighbors of @xmath56 . by definition",
    ", @xmath56 has no neighbor of degree @xmath30 in @xmath35 , so @xmath126 .        if @xmath111 have no common neighbor ( see figure  [ 2-vertex ] a ) , then @xmath56 is not a @xmath40-corner vertex , and in this case , one of the two neighbors @xmath65 share has a third neighbor in @xmath32 , and one of the two neighbors @xmath66 share also has a third neighbor in @xmath32 .",
    "thus , @xmath56 needs to give out at most @xmath127 to the four neighbors outside of @xmath32 , and may need to give @xmath128 to @xmath9 and @xmath63 ( if they are in poor couples ) . in total @xmath56 may need to give out up to @xmath92 , which it can afford as it has @xmath91 to start with .",
    "next , we assume that @xmath56 is a corner @xmath40-vertex , that is , @xmath9 and @xmath63 share a common neighbor , see figure  [ 2-vertex ] b.    first , let @xmath56 be _ not poor _ , that is , @xmath9 or @xmath63 is a @xmath41-neighbor or a corner @xmath40-vertex .",
    "we may assume that @xmath9 is a @xmath41-vertex or a corner @xmath40-vertex , thus @xmath94 or @xmath95 is in @xmath35 .",
    "note that @xmath9 and @xmath63 can not be poor , as they have @xmath56 as a neighbor and @xmath56 is a corner @xmath40-vertex .",
    "if @xmath94 is in @xmath35 , by ( r1 ) and ( r2 ) , @xmath56 needs to give out at most @xmath129 to the neighbors not in @xmath32 and by ( r3 ) gives nothing to @xmath9 .",
    "similarly if @xmath95 is in @xmath35 , then @xmath56 gives out at most @xmath130 .",
    "thus , @xmath56 can afford both cases since it has @xmath91 initially .",
    "now let @xmath56 be _",
    "poor_. then both @xmath9 and @xmath63 are @xmath40-vertices and not corner @xmath40-vertices . if @xmath35 is not a @xmath131-cluster , then @xmath9 or @xmath63 is not in a @xmath42-couple , thus not poor , and so by ( r3 ) @xmath56 gains @xmath53 from it .",
    "therefore , @xmath56 need to give out at most @xmath132 , but can afford to do so , as it gains @xmath53 and has @xmath91 initially .    if @xmath35 is a @xmath131-cluster , then let the other neighbors of @xmath111 be @xmath133 respectively . then by ( r1 ) and ( r2 ) , @xmath35 needs to give at most @xmath0 to the vertex not in @xmath32 but adjacent to only @xmath56 , or only @xmath118 , or only @xmath65 , or only @xmath66 .",
    "one of the two common neighbors of @xmath63 and @xmath134 should have a neighbor in @xmath135 , thus @xmath35 gives out at most @xmath136 to those two neighbors , and similarly gives at most @xmath136 to the two common neighbors of @xmath9 and @xmath137 .",
    "two of the @xmath61 neighbors of @xmath134 ( and similarly of @xmath137 ) should have another neighbor in @xmath32 , thus @xmath35 gives out at most @xmath138 to the @xmath28 neighbors of @xmath134 and @xmath137 .",
    "therefore , @xmath35 gives out at most @xmath139 , but @xmath140 , so @xmath35 can afford to do so .",
    "* case 4.4 * : @xmath41-vertices .",
    "as shown in figure  [ 3-vertex ] , we assume that @xmath56 with @xmath141 has three neighbors @xmath142 in @xmath35 . note that at most one of @xmath142 has degree @xmath30 in @xmath35 , but all of them could be in _",
    "poor couples_. thus by ( r1 ) , ( r2 ) and ( r3 ) , we see that in figure  [ 3-vertex]a , @xmath56 gives out at most @xmath143 ; in figure  [ 3-vertex]b , @xmath56 gives out at most @xmath144 ; and in figure  [ 3-vertex]c , @xmath56 gives out at most @xmath145 .",
    "thus every vertex in @xmath32 ends up with a weight at least @xmath0 as well .",
    "in this paper , we give the exact old - density of the infinite triangular grid .",
    "the old - density problem of other infinite grids , especially non - regular ones , could also be interesting .",
    "for example , what is the old - density of infinite triangular - hexagonal grids ? in the study of identifying codes , @xmath22-identifying codes , meaning",
    "a code - vertex can cover vertices within distance @xmath22 , have been considered , see  @xcite . in the context of old - sets ,",
    "one may also analogously study an @xmath22-old - set .",
    "we would like to thank pete slater for his valuable comments and suggested references .",
    "g. cohen , s. gravier , i. honkala , a. lobstein , m. mollard , c. payan , g. zmor , improved identifying codes for the grid , comments on r19 , _ electronic journal of combinatorics _",
    "( 1999 ) , http://www.combinatorics.org/volume_6/html/v6ilr19.html      d. cranston and gexin yu , a new lower bound on the density of vertex identifying codes for the infinite hexagonal grid , _ electronic journal of combinatorics _ , vol . 16 ( 2009 ) ,",
    "http://www.combinatorics.org/volume_16/pdf/v16i1r113.pdf .",
    "saikat ray , david starobinski , ari trachtenberg , and rachanee ungrangsi , robust location detection with sensor networks , _ ieee journal on selected areas in communications _ , vol .",
    "2004 pages 10161025 ."
  ],
  "abstract_text": [
    "<S> an open - locating - dominating set ( old - set ) is a subset of vertices of a graph such that every vertex in the graph has at least one neighbor in the set and no two vertices in the graph have the same set of neighbors in the set . </S>",
    "<S> this is an analogue to the well - studied identifying code in the literature . in this paper </S>",
    "<S> , we prove that the optimal density of the old - set for the infinite triangular grid is @xmath0 .    </S>",
    "<S> [ section ] [ thm]lemma [ thm]proposition [ thm]corollary [ thm]conjecture [ thm]claim [ thm]observation [ thm]definition [ thm]example [ thm]remark    p </S>"
  ]
}