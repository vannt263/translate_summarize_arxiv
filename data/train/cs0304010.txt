{
  "article_text": [
    "linear feedback shift registers ( _ lfsr _",
    "s ) are fundamental primitives in the theory and practice of pseudorandom number generation and coding theory ( see , e.g. , @xcite , @xcite , @xcite , @xcite , @xcite , @xcite , and references therein ) .",
    "figure [ lfsr ] describes a typical lfsr over the two - element field @xmath0 , where each step consists of adding some of the state bits ( we follow the convention that the elements of @xmath1 are called _ bits _ ) , and the result is inserted to the register in a fifo manner .",
    "[ lfsr ] @xmath2    such a construction is slow in the sense that it produces only one new bit per step .",
    "moreover , it is difficult to implement in software , since many bit manipulations are required . in certain cases ( but not always @xcite ) ,",
    "it is possible to use lfsr s with only two feedback taps .",
    "this makes a slightly faster lfsr .",
    "( see also section [ conclusions ] . )    in the 1994 conference on fast software encryption , a challenge was set forth to design lfsr s which exploit the parallelism offered by the word oriented operations of modern processors @xcite . in this paper",
    "we suggest a solution and study its properties .",
    "fix an arbitrary finite field @xmath3 . a sequence @xmath4 of elements from @xmath3",
    "is _ linear recurring with characteristic polynomial _",
    "@xmath5\\ ] ] if @xmath6 , and @xmath7 for all @xmath8 .",
    "the _ minimal polynomial _ of a linear recurring sequence @xmath9 is the characteristic polynomial of @xmath9 of least degree .",
    "let @xmath9 be a nonzero linear recurring sequence with an irreducible characteristic polynomial @xmath10 .",
    "it is well known ( cf .",
    "@xcite ) that the period of @xmath9 is equal to the order of @xmath11 in the multiplicative group of the field @xmath12/{\\left<}{{f({\\lambda})}}{\\right>}$ ] .",
    "if @xmath11 generates the whole group , we say that @xmath10 is _ primitive_. ( in this case @xmath9 has the maximal possible period @xmath13 where @xmath14 . ) likewise , for any natural number @xmath15 , if @xmath16 is a linear transformation of @xmath17 and @xmath18 is nonzero , then the sequence @xmath19 of vectors in @xmath17 has period @xmath20 if and only if the characteristic polynomial of the linear transformation @xmath16 is primitive over @xmath21 $ ] .",
    "if this is the case we say that @xmath16 is _",
    "primitive_.    we now introduce the family of _ linear transformation shift registers _ ( tsr s ) . for convenience of presentation",
    ", we pack @xmath22-dimensional vectors in an array @xmath23 of @xmath24 vectors in @xmath25 ( @xmath24 and @xmath26 will be fixed throughout the paper ) . in the intended application , @xmath27 and @xmath26 is the number of bits in the processor s word .",
    "typical values of @xmath26 are @xmath28 , @xmath29 , @xmath30 , @xmath31 , and @xmath32 . this way , the array @xmath23 is stored in @xmath24 processor words . following this interpretation , elements of @xmath25 will be called _",
    "let @xmath16 be a linear transformation of @xmath25 , and let @xmath33 .",
    "tsr step @xmath34 _ of the array @xmath35 is the linear transformation @xmath36 the system @xmath37 is called a _ tsr_.    figure [ tsr ] illustrates a typical example of a tsr .",
    "an obvious advantage over the standard lfsr is that here a whole new word ( rather than a single bit ) is produced per step .",
    "[ tsr ] @xmath38    linear transformations on processor words can be performed very efficiently , either using lookup tables , or by using specific linear transformations which are efficient when working on processor words , e.g. galois - type shift registers .",
    "the latter example has the advantage that no additional memory is required ( see , e.g. , @xcite ) .",
    "note further that choosing each of the @xmath39 s to be either @xmath40 or @xmath41 eliminates the complexity of the multiplications @xmath42 .",
    "one can not , however , eliminate the complexity of the transformation @xmath16 as well by using the identity transformation @xmath43 : in this case the period can not be greater than @xmath44 , whereas in principle , memory of @xmath24 words can yield period @xmath45 .",
    "simulations show that there exist choices for @xmath16 and @xmath46 such that the resulted tsr step is primitive , and thus yields a sequence of vectors with period @xmath47 . in the following sections we provide necessary conditions on @xmath16 and @xmath46 in order that the resulted tsr step is primitive .",
    "choosing @xmath16 and @xmath46 to satisfy these conditions increases the probability that the resulted tsr is primitive with respect to random choice of these parameters .",
    "thus , we will get an efficient algorithm for generation of primitive tsr s",
    ".    checking that a given tsr is primitive involves two tests . only after one knows that the characteristic polynomial of the tsr is irreducible , one proceeds to the second test .",
    "the most time - consuming part is the search for a tsr which passes the irreducibility test .",
    "the rest of this paper is devoted to an analysis of the tsr transformations .",
    "in particular , we will get an efficient algorithm for choosing @xmath16 and @xmath46 which pass the irreducibility test .",
    "identify the linear transformation @xmath16 operating on words with the matrix @xmath48 such that @xmath49 , @xmath50 .",
    "let @xmath51 denote the @xmath52 unit matrix .",
    "a tsr step @xmath53 of the array @xmath54 is equivalent to multiplication of @xmath55 from the left by the block matrix @xmath56 \\in m_{nm}(f)$ ] , where @xmath57 = { \\left(}\\begin{array}{ccccc }   0         & i        & 0          & \\cdots     & 0     \\\\",
    "\\vdots & \\ddots & \\ddots     & \\ddots       & \\vdots   \\\\",
    "\\vdots &           & \\ddots   & \\ddots       & 0      \\\\   0     & \\cdots   & \\cdots   & 0             & i",
    "\\\\   a_0 t      & a_1 t    & \\cdots     & a_{n-2}t   & a_{n-1}t \\end{array } { \\right)}.\\ ] ]    let @xmath58 ( so that the characteristic polynomial of @xmath59 $ ] in the case @xmath60 and @xmath61 is @xmath62 ) , and let @xmath63 denote the characteristic polynomial of @xmath16 ( note that the degree of @xmath64 is @xmath26 . )    [ charpoly ] let @xmath16 be a linear transformation of @xmath25 , and @xmath65 .",
    "then the characteristic polynomial of the tsr step @xmath66 is @xmath67    we multiply each row block by @xmath11 , and add the result to the next one .",
    "then we use the @xmath68 blocks to cancel the terms in the first column block .",
    "@xmath69    a naive algorithm for generation of a tsr with maximal period would be to choose the linear transformation @xmath16 and the set @xmath46 at random , calculate the characteristic polynomial @xmath70 using proposition [ charpoly ] , and then check whether it is primitive , repeating this process until a primitive polynomial is found . in most of the cases",
    ", the polynomial will not be primitive for the reason that it is not even irreducible .",
    "the following corollary shows that much unnecessary work can be avoided .",
    "[ easyfactor ] if @xmath64 is reducible over @xmath3 , then so is @xmath70 .",
    "suppose @xmath71 is a nontrivial factorization of @xmath64 over @xmath3 , @xmath72 .",
    "then @xmath73 are polynomials , and @xmath74 is a nontrivial factorization .",
    "[ speedup1 ] in general , the probability that a monic polynomial of degree @xmath26 chosen at random is irreducible is close to @xmath75 .",
    "thus , by corollary [ easyfactor ] , the probability that @xmath70 is irreducible provided that @xmath64 is irreducible should be about @xmath26 times larger than the probability when @xmath64 is arbitrary .",
    "the algorithm stated in the previous section considered polynomials of a special form as candidates to be primitive . in this section",
    "we study polynomials of this form , with the aim of improving the algorithm .",
    "let @xmath3 be a fixed finite field .",
    "let @xmath76 $ ] .",
    "we write @xmath77 for the homogeneous polynomial @xmath78 we wish to find necessary conditions for polynomials of the form @xmath79 to be irreducible . clearly , if @xmath80 $ ] are not relatively prime , then the polynomial @xmath79 is reducible .",
    "also , by corollary [ easyfactor ] , if @xmath81 is reducible , then so is @xmath79 .",
    "we are thus interested in the following type of polynomials .",
    "we say that a polynomial @xmath82 is a _ candidate _",
    "if :    1 .   @xmath83 $ ] , 2 .",
    "@xmath10 and @xmath84 are relatively prime , and 3 .",
    "@xmath81 is monic and irreducible .",
    "uzi , note : why do we need this lemma and the following proposition ?    [ primeto ] if @xmath85 is a candidate , then @xmath86 is prime to @xmath84 .    write @xmath87",
    ". then @xmath88 . as @xmath81 is irreducible , @xmath89 . but @xmath10 is prime to @xmath84 .",
    "assume that @xmath85 is a candidate .",
    "then the degree of any factor of @xmath90 over @xmath3 is divisible by @xmath91 .",
    "let @xmath92 be an irreducible factor of @xmath90 over @xmath3 , let @xmath93 be the splitting field of @xmath94 over @xmath3 , and let @xmath95 be a root of @xmath92 . by lemma [ primeto ] ,",
    "@xmath94 is prime to @xmath96 , therefore @xmath97 .",
    "let @xmath98 , and compute that @xmath99 , thus @xmath100 .",
    "since @xmath81 is irreducible ( and @xmath3 is finite ) , it follows that @xmath101 splits in @xmath93 , and @xmath91 divides @xmath102 = \\deg{{p({\\lambda})}}$ ] .",
    "uzi , note : you still did nt answer the previous question    assume that @xmath85 is a candidate , and let @xmath103 be a root of @xmath81 in the splitting field @xmath104 of @xmath81 .",
    "then the number of distinct irreducible factors of @xmath86 over @xmath3 is equal to the number of distinct irreducible factors of @xmath105 over @xmath104 .",
    "denote by @xmath106 the ( distinct ) roots of @xmath81 in @xmath104 , so that @xmath81 has the form @xmath107 .",
    "we have that over @xmath104 , @xmath108    we can extend the standard norm map @xmath109 to a norm @xmath110\\to f[{\\lambda}]$ ] by @xmath111 , where @xmath112 for all @xmath113 .",
    "fix any @xmath114 .",
    "using this notation , equation ( [ qdec ] ) is @xmath115 we will use the following lemma .",
    "[ norm ] let the field @xmath104 be an extension of @xmath3 .",
    "assume that @xmath116 $ ] be irreducible .",
    "then @xmath117 is equal to an irreducible polynomial over @xmath3 raised to the power @xmath118 $ ] , where @xmath119 is the subfield generated by the coefficients of @xmath120 over @xmath3 .",
    "since @xmath121 and @xmath122}$ ] , it is enough to prove the claim in the case @xmath123 .",
    "let @xmath124 be an irreducible factorization of @xmath125 over @xmath3 .",
    "obviously @xmath120 divides @xmath125 in @xmath126 $ ] , and since @xmath120 is irreducible we have that @xmath120 divides one of the factors , say @xmath120 divides @xmath127 .",
    "let @xmath128 be the splitting field of @xmath127 over @xmath3 .",
    "note that @xmath129 , since the coefficients of @xmath120 ( which divides @xmath127 ) generate @xmath104 .",
    "let @xmath130 be the splitting field of @xmath120 over @xmath104 , then @xmath131 and @xmath132\\cdot \\deg{{r({\\lambda } ) } } = [ l_2:f]$ ] divides @xmath133 = \\deg{{r_1({\\lambda})}}$ ] .",
    "thus @xmath134 and is irreducible .",
    "let @xmath135 be a factorization into irreducible polynomials over @xmath104 .",
    "taking the norm from @xmath126 $ ] to @xmath21 $ ] , we get the factorization @xmath136 over @xmath3 , where @xmath137 . by lemma [ norm ] ,",
    "the polynomials @xmath138 are irreducible ( the coefficient of @xmath139 in @xmath105 generates @xmath104 ) .",
    "it thus remains to show that the @xmath138 are relatively prime .",
    "we will show that @xmath140 is prime to @xmath141 for any @xmath113 and @xmath142 . indeed , if @xmath143 then @xmath140 is prime to @xmath144 by the assumption .",
    "otherwise , @xmath145 divides @xmath146 and @xmath141 divides @xmath147 , but @xmath146 and @xmath147 are distinct and irreducible , thus relatively prime .",
    "[ faster ] assume that @xmath85 is a candidate , and let @xmath104 be the splitting field of @xmath81 .",
    "let @xmath103 be a root of @xmath81 in @xmath104 .",
    "then @xmath86 is irreducible over @xmath3 if , and only if , @xmath148 is irreducible over @xmath104 .    according to ( * ? ? ?",
    "* chapter 4 ) , checking irreducibility of a degree @xmath15 polynomial amounts to performing gauss elimination of a matrix of size @xmath149 . in a finite field",
    "@xmath3 this requires roughly @xmath150 operations of multiplication and addition .",
    "assume that @xmath85 is a candidate , and set @xmath151 .",
    "checking the reducibility of @xmath86 directly over @xmath3 requires roughly @xmath152 operations . checking its reducibility via corollary [ faster ] requires roughly @xmath153 operations , but here multiplication is more expensive : each multiplication in @xmath104 requires roughly @xmath154 multiplications in @xmath3 .",
    "thus , the algorithm implied by corollary [ faster ] is roughly @xmath26 times faster , where @xmath155 .",
    "see also remark [ wordparallelism ] .",
    "if @xmath156 for some @xmath157 dividing @xmath24 , then @xmath158 for some @xmath159 , thus can not be primitive .",
    "uzi , note : details ...    what if we knew @xmath81 is primitive ?",
    "uzi , note : this is certainly not enough .",
    "assume that @xmath85 is a candidate , @xmath104 is the splitting field of @xmath81 , and @xmath103 is a root of @xmath81 in @xmath104 . by corollary [ faster ] , @xmath86 is irreducible over @xmath3 if , and only if , @xmath148 is irreducible over @xmath104 . the analogue result for primitivity follows : @xmath86 is primitive if , and only if , it is irreducible and its roots generate @xmath160 , where @xmath93 is the splitting field of @xmath86 . now , observe that @xmath93 is also the splitting field of @xmath105 , and that @xmath86 and @xmath105 share the same roots in @xmath93 .",
    "this result , however , does not yield an improvement of the algorithm stated in the previous section .    in this section",
    "we show that if @xmath161 and the base field is @xmath162 ( these assumptions hold in the intended environment for the tsr ) , then a candidate @xmath163 is primitive only if @xmath101 is primitive .",
    "thus , the tsr - generation algorithm should begin with _ primitive _ transformations @xmath16 , yielding an additional speedup factor @xmath164 , which is roughly @xmath165 when @xmath91 is a power of @xmath165 , cf .  @xcite",
    ".    it will be convenient to use the following definition .",
    "let @xmath104 be a finite field .",
    "the _ index _ of a nonzero element @xmath166 is the index @xmath167 of the cyclic group generated by @xmath103 as a subgroup of @xmath168 .",
    "an irreducible polynomial is primitive if , and only if , its roots have index @xmath41 in its splitting field .",
    "note further that for @xmath15 dividing @xmath169 , @xmath166 has index @xmath15 if , and only if , @xmath170 for some generator @xmath96 of the cyclic group @xmath168 .",
    "[ frobenius ] let @xmath171 $ ] be an irreducible monic polynomial of degree @xmath24 over @xmath104 , with splitting field @xmath93 and a root @xmath172 .",
    "then @xmath173 .",
    "let @xmath174 denote the ( distinct ) roots of @xmath175 .",
    "then @xmath176 is the factorization over @xmath93 , thus @xmath177 . on the other hand ,",
    "the galois group of @xmath178 is generated by the frobenius automorphism @xmath179 , thus the roots of @xmath175 are @xmath180 , and @xmath181 .",
    "[ overbits ] assume that @xmath27 and @xmath85 is an irreducible candidate with @xmath161 .",
    "if @xmath81 is not primitive then @xmath86 is not primitive .",
    "let @xmath93 be the splitting field of @xmath86 over @xmath3 , and @xmath182 the splitting field of @xmath81 .",
    "let @xmath183 be a root of @xmath86 , and @xmath184 a root of @xmath81 .",
    "let @xmath185 denote the index of @xmath172 in @xmath93 , and @xmath186 the index of @xmath103 in @xmath104 .",
    "we will show that @xmath187 .",
    "thus , @xmath188 implies @xmath189 .    by corollary [ faster ]",
    ", @xmath190 is irreducible over @xmath104 .",
    "since every polynomial is monic over @xmath1 , we can apply lemma [ frobenius ] to get that @xmath191 .",
    "but @xmath192 . as @xmath10",
    "and @xmath84 are relatively prime , @xmath193 , thus @xmath194 , and @xmath195 .",
    "let @xmath96 be a generator of @xmath160 such that @xmath196 .",
    "then @xmath197 , and its order in @xmath160 is @xmath198 as asserted .",
    "in light of the results obtained in the previous sections , we end up with the following algorithm for tsr - generation over @xmath27 :    [ algo ]    1 .",
    "choose at random a primitive transformation @xmath16 on @xmath199 .",
    "2 .   choose a random sequence @xmath200 such that @xmath201 .",
    "3 .   choose a root @xmath103 of @xmath64 in its splitting field @xmath104 .",
    "4 .   check that @xmath202 is irreducible over @xmath104 ( otherwise return to step 1 ) .",
    "check that @xmath203 is primitive : choose a root @xmath172 of @xmath86 in its splitting field @xmath93 , and check for all prime @xmath94 dividing @xmath204 that @xmath205 ( in fact , as we show below , it is not needed to consider the cases where @xmath94 divides @xmath169 )",
    ".   if @xmath86 is not primitive , return to step 1 .",
    "[ repeat ] assuming that generally , the probability that @xmath203 is primitive is roughly the same for every primitive transformation @xmath16 , it would be more efficient to repeat steps 2 to 5 of the algorithm several times before starting again from step 1 .",
    "thus , the complexity of step 1 will be negligible with respect to the total running time .",
    "moreover , we argue below that step 5 usually occurs only once .",
    "[ wordparallelism ] in all of the mentioned algorithms , one can get a speedup factor of @xmath206 , where @xmath206 is the size of the word in the processor where the search for the tsr is made ( note that this need not be the same processor on which the tsr will be implemented , thus @xmath206 need not be equal to @xmath26 ) .",
    "this is done by exploiting the processors word - oriented operations to define parallel versions of the basic operations used in the algorithms .    for a natural number @xmath24 ,",
    "we denote by @xmath207 the ( multiplicative ) cyclic group of order @xmath24 .",
    "if @xmath96 is a generator of @xmath207 , then @xmath208 is a generator as well if , and only if , @xmath209 .",
    "this is why the number of generators of @xmath207 is exactly @xmath210 , where @xmath211 is euler s function , and the probability that a uniformly chosen element generates @xmath207 is @xmath212 .",
    "an irreducible polynomial @xmath86 is primitive if a root @xmath172 of @xmath86 generates the multiplicative group of its splitting field @xmath93 .",
    "there is a natural @xmath41 to @xmath102 $ ] correspondence between irreducible monic polynomials of degree @xmath102 $ ] and elements of @xmath93 which do not belong to a proper subfield of @xmath93 .",
    "this correspondence implies that the probability that an irreducible @xmath86 is primitive is close to @xmath213 .",
    "we now consider _",
    "irreducible candidates_. we wish to estimate the probability that a candidate passing the test in step 4 of the algorithm will also past the final test of step 5 .",
    "a candidate @xmath203 is _ good _ if @xmath16 is primitive and @xmath86 is irreducible .",
    "we will find , heuristically , the probability that a good candidate is primitive .",
    "let @xmath104 be the splitting field of @xmath64 , and @xmath93 be the splitting field of @xmath86 .",
    "factor @xmath214 , where @xmath215 is the product of all the prime factors of @xmath216 which divide @xmath217 ( allowing powers of primes ) .",
    "then the group @xmath160 is isomorphic to @xmath218 , where a prime @xmath94 divides @xmath169 if , and only if , it divides @xmath215 .",
    "a root @xmath172 of @xmath86 generates @xmath160 if , and only if , its projections in @xmath219 and @xmath220 are both generators .    in the proof of theorem [ overbits ] we showed that @xmath186 , the co - order of a root @xmath103 of @xmath64 in @xmath104 , is equal to @xmath221 , where @xmath185 is the co - order of @xmath172 in @xmath93 . as @xmath16 is primitive ( i.e.  @xmath189 ) , we have that @xmath185 is prime to @xmath169",
    "thus , @xmath185 is prime to @xmath215 , that is , @xmath215 divides the order of @xmath172 in @xmath160 .",
    "therefore , the projection of @xmath172 in @xmath219 is a generator of that group .",
    "we assume , _ herusitically _ , that the projection of @xmath172 on @xmath220 is ( close to being ) uniformly distributed .",
    "thus , the probability of its being a generator of @xmath220 is close to @xmath222 . in general , @xmath223 and as a prime @xmath94 divides @xmath224 if , and only if , @xmath94 divides @xmath204 but not @xmath169 , we have that @xmath225    we thus have a heuristic justification for the following claim .    [ highprob ]",
    "assume that @xmath203 is an irreducible candidate over @xmath1 , where @xmath64 is primitive .",
    "then the probability that @xmath86 is primitive is close to @xmath226    the probability at claim [ highprob ] is usually close to 1 .",
    "we give here a few examples :    1 .",
    "when the word s size is @xmath28 bits and the number of words is @xmath227 , we have that @xmath228 , @xmath229 , and the division yields probability close to @xmath230 .",
    "2 .   when the word s size is @xmath29 bits and the number of words is @xmath231 , we get probability close to @xmath232 .",
    "3 .   for values @xmath30 and @xmath233 ,",
    "respectively , we get @xmath234 .",
    "4 .   for values @xmath31 and @xmath165",
    "we get @xmath232 .",
    "we have presented the family of linear transformation shift registers which is efficient in software implementations .",
    "the theory we developed enabled us to get an efficient algorithm for generation of primitive transformations of this type ( i.e. , which have maximal period ) , thus answering a challenge raised in @xcite .",
    "variants of our construction can be found more appropriate for certain applications .",
    "arguments similar to the ones we have presented here may be found useful in the study of these variants as well . a noteworthy variant of the lfsr type that we have studied is the _ internal - xor _ , or _ galois _ ,",
    "shift register ( see , e.g. , @xcite ) .",
    "the number of new bits generated in one step of an internal - xor shift register is equal on average to half of the number of taps in that lfsr .",
    "our construction suggests an obvious analogue internal - xor tsr .",
    "we get exactly the same results for this case , since the characteristic polynomial of an internal - xor tsr is equal to that of the corresponding external - xor tsr , which we have studied in this paper ."
  ],
  "abstract_text": [
    "<S> we introduce and analyze an efficient family of linear feedback shift registers ( lfsr s ) with maximal period . </S>",
    "<S> this family is word - oriented and is suitable for implementation in software , thus provides a solution to a recent challenge @xcite . </S>",
    "<S> the classical theory of lfsr s is extended to provide efficient algorithms for generation of irreducible and primitive lfsr s of this new type . </S>"
  ]
}