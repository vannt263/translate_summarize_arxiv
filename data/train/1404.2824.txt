{
  "article_text": [
    "consider the binary word @xmath5 . does it have a substring of length @xmath6 containing exactly @xmath7 ones ? in fig .",
    "[ fig : esempio ] the word @xmath8 is represented by the black line ( go up and right for a @xmath9 , down and right for a @xmath10 ) , while the grid points within the area between the two lighter lines form the _ parikh set _ of @xmath8 : the set of vectors @xmath11 s.t .",
    "some substring of @xmath8 contains exactly @xmath12 ones and @xmath13 zeros .",
    "since the point @xmath14 lies within the area bounded by the two lighter lines , we see that the answer to our question is ` yes ' .",
    "( do nt worry , more detailed explanation will follow soon . ) now , this paper is about the lighter lines , called _",
    "prefix normal words .",
    "_     ( dark line ) , its prefix normal forms @xmath15 and @xmath16 ( lighter lines ) ; the region between the two is the parikh set of @xmath8 ; e.g.   @xmath8 has a substring containing @xmath7 ones and @xmath17 zeros ( black dot ) .",
    "note that the axes are rotated by 45 degrees clockwise.,height=132 ]    * prefix normal words : * a binary word @xmath8 is called _ prefix normal _ ( with respect to @xmath9 ) if no substring of @xmath8 has more @xmath9s then the prefix of the same length .",
    "for example , @xmath18 is not prefix normal because it has a substring of length @xmath7 with @xmath19 ones , while the prefix of length @xmath7 has only @xmath20 ones . in",
    "@xcite it was shown that to every word @xmath8 , one can assign two prefix normal words , the _ prefix normal forms _ ( pnf ) of @xmath8 ( w.r.t .",
    "@xmath9 and w.r.t .",
    "@xmath10 ) , and that these are precisely the lines bounding @xmath8 s parikh set from above ( w.r.t .",
    "@xmath9 ) resp .  from below ( w.r.t .",
    "@xmath10 ) , interpreted as binary words .    *",
    "prefix normal games : * before we further elaborate on the connection between the initial problem and prefix normal words , let s see how well you have understood the definition . to this end , we define a two - player game . at the start of the game alice and bob",
    "have @xmath1 free positions .",
    "alice moves first : she picks a position and sets it to @xmath10 or @xmath9 .",
    "then in alternating moves , they pick an empty position and set it .",
    "the game ends after @xmath1 moves .",
    "alice wins if and only if the resulting binary word is prefix normal .",
    "here is an example run .",
    "we have @xmath21 .",
    "alice sets the first bit to @xmath9 , then bob sets the second bit to @xmath10 .",
    "now alice sets the @xmath19th bit to @xmath10 , and she has won , since whichever position bob chooses , she will set the remaining position to @xmath10 , thus ensuring that the word is prefix normal .",
    "+    ll @ * 5c @ ll @ * 5c 1 . &",
    "_ start _ & _ & _ & _ & _ & _ & 3 . & _ bob _ & 1 & 0 & _ & _ & _ + 2 . &",
    "_ alice _ & 1 & _ & _ & _ & _ & 4 . &",
    "_ alice _ & 1 & 0 & _ & 0 & _    the solution to the following exercise can be found in section  [ sec : games ] .",
    "find the maximum @xmath1 such that alice has a winning strategy .",
    "* binary jumbled pattern matching : * the problem of deciding whether a particular pair @xmath11 lies within the parikh set of a word @xmath8 is known as _ binary jumbled pattern matching_. there has been much interest recently in the _ indexed version _ , where an index for the parikh set is created in a preprocessing step , which can then be used to answer queries fast .",
    "the parikh set can be represented in linear space due to the _ interval property _ of binary strings : if @xmath8 has @xmath22-length substrings with @xmath23 resp .",
    "@xmath24 ones , where @xmath25 , then it also has a @xmath22-length substring with @xmath13 ones , for every @xmath26 ( folklore ) .",
    "thus the parikh set can be represented by storing , for every @xmath27 , the minimum and maximum number of @xmath9s in a substring of length @xmath22 .",
    "much recent research has focused on how to compute these numbers efficiently  @xcite .",
    "the problem has also been extended to graphs and trees  @xcite , to the streaming model  @xcite , and to approximate indexes  @xcite .",
    "there is also interest in the non - binary variant  @xcite .",
    "a closely related problem is that of parikh fingerprints  @xcite .",
    "applications in computational biology include snp discovery , alignment , gene clusters , pattern discovery , and mass spectrometry data interpretation  @xcite .    the current best construction algorithms for the linear size index for binary jumbled pattern matching run in @xmath28 time  @xcite , for a word @xmath8 of length @xmath1 , with some improvements for special cases ( compressible strings  @xcite , bit - parallel operations  @xcite ) was presented  @xcite .",
    "] . as we will see later",
    ", computing the prefix normal forms is equivalent to creating an index for the parikh set of @xmath8 .",
    "currently , we know no faster computation algorithms for the prefix normal forms than already exist for the linear - size index",
    ". however , should better algorithms be discovered , these would immediately carry over to the problem of indexed binary jumbled pattern matching .",
    "* testing : * it turns out that even _ testing _ whether a given word is prefix normal is a nontrivial task .",
    "we can of course compute @xmath8 s prefix normal form , in @xmath29 time using one of the above algorithms : obviously @xmath8 is prefix normal if and only if @xmath30 . in  @xcite",
    ", we gave a generating algorithm for prefix normal words , which exhaustively lists all prefix normal words of a fixed length .",
    "the algorithm was based on the fact that prefix normal words are a bubble language , a recently introduced class of binary languages  @xcite . as a subroutine of our algorithm",
    ", we gave a linear time test for words which are obtained from a prefix normal word via a certain operation .",
    "in section  [ sec : testing ] , we present an algorithm to test whether an _ arbitrary _ word is prefix normal , based on similar ideas . our algorithm is quadratic in the worst case but we believe it performs much better than other algorithms once some simple cases have been removed .",
    "we further demonstrate how using several simple linear time tests can be used as a filtering step , and conjecture , based on experimental evidence , that these lead to expected @xmath31 time algorithms .",
    "but first the reader is kindly invited to try for herself .",
    "decide whether the word @xmath32 is prefix normal .",
    "* enumerating : * another very interesting and challenging problem is the enumeration of prefix normal words .",
    "it turns out that even though the number of prefix normal words grows exponentially , the fraction of these words within all binary words goes to @xmath10 as @xmath1 goes to infinity . in sections  [ sec",
    ": enum1 ] to  [ sec : enum3 ] , we present both asymptotic and exact results for prefix normal words , including generating functions for special classes and counting extensions for particular words .",
    "some of the proofs in this part of the paper are rather technical : they will be available in the full version .",
    "* mechanical algorithm design : * we contribute to the area of mechanical algorithm design by presenting an algorithm for computing the parikh set which uses the new _ sandbeach technique _ , a technique we believe will be useful in many other applications ( sec .",
    "[ sec : testing ] ) .",
    "we would like to point out that prefix normal words , albeit similar in name , are not to be confused with so - called _",
    "abby normal _ ( a.k.a .",
    "_ abnormal _ or _ ab normal _ ) , words , or rather , brains , introduced in  @xcite. and now it is time to wish you , the reader , as much fun in reading our paper as we had in writing it !",
    "a _ binary word _ ( or _ string _ ) @xmath33 over @xmath34 is a finite sequence of elements from @xmath35 .",
    "its length @xmath1 is denoted by @xmath36 . for any @xmath37",
    ", the @xmath38-th symbol of a word @xmath8 is denoted by @xmath39 .",
    "we denote by @xmath40 the words over @xmath35 of length @xmath1 , and by @xmath41 the set of finite words over @xmath35 .",
    "the empty word is denoted by @xmath42 .",
    "let @xmath43 .",
    "if @xmath44 for some @xmath45 , we say that @xmath46 is a _ prefix _ of @xmath8 and @xmath47 is a _ suffix _ of @xmath8 .",
    "a _ substring _ of @xmath8 is a prefix of a suffix of @xmath8 .",
    "binary language _ is any subset @xmath48 of @xmath49 .",
    "we denote by @xmath50 the number of occurrences in @xmath8 of character @xmath51 ; @xmath52 is called the _ density _ of @xmath8 .",
    "let @xmath53 . for @xmath54 , we set @xmath55 , the number of @xmath9s in the @xmath38-length prefix of @xmath8 , and @xmath56 , the maximum number of @xmath9s over all substrings of length @xmath38 .",
    "prefix normal words , prefix normal equivalence and prefix normal form were introduced in  @xcite .",
    "a word @xmath57 is _ prefix normal _ ( w.r.t .",
    "@xmath9 ) if , for all @xmath58 , @xmath59 . in other words , a word is prefix normal if no substring contains more @xmath9s than the prefix of the same length .",
    "we give all @xmath60 prefix normal words of length @xmath61 : + 000000 , 100000 , 100001 , 100010 , 100100 , 101000 , 101001 , 101010 , 110000 , 110001 , 110010 , 110011 , 110100 , 110101 , 110110 , 111000 , 111001 , 111010 , 111011 , 111100 , 111101 , 111110 , 111111 .",
    "two words @xmath62 are _ prefix normal equivalent _ ( w.r.t .",
    "@xmath9 ) if and only if @xmath63 for all @xmath38 . given @xmath64 , the _",
    "prefix normal form _",
    "( w.r.t .",
    "@xmath9 ) of @xmath8 , @xmath65 , is the unique prefix normal word @xmath66 which is prefix normal equivalent ( w.r.t .",
    "@xmath9 ) to @xmath8 .",
    "prefix normality w.r.t .",
    "@xmath10 , prefix normal equivalence w.r.t .",
    "@xmath10 , and @xmath67 are defined analogously . when not stated explicitly",
    ", we are referring to the functions w.r.t .",
    "for example , the words @xmath68 and @xmath69 are prefix normal equivalent both w.r.t . @xmath10 and @xmath9 .",
    "see @xcite for more examples .    in fig .",
    "[ fig : esempio ] , we see an example string @xmath8 and its prefix normal forms . the interval property ( see introduction ) can be graphically interpreted as vertical lines .",
    "the vertical line through point @xmath14 represents length-@xmath6 substrings : the grid points within the enclosed area are @xmath70 and @xmath14 , so all length-@xmath6 substrings have between @xmath71 and @xmath7 ones .",
    "we can interpret , for each length @xmath22 , the intersection of the @xmath22th vertical line with the top grey line as the maximum number of @xmath9s , and with the bottom grey line as the minimum number of @xmath9s .",
    "now it is easy to see that , passing from @xmath22 to @xmath72 , this maximum , @xmath73 , can either remain the same or increase by one .",
    "this means that the top grey line allows an interpretation as a binary word .",
    "a similar interpretation applies to the bottom line and prefix normal words w.r.t 0 .",
    "it should now be clear , also graphically , that the maximum number of @xmath9s for a substring of length @xmath22 , @xmath74 , is precisely the number of @xmath9s in the @xmath22-length prefix of @xmath75 ( the upper grey line ) ; and similarly for the maximal number of @xmath10s ( equivalently , the minimal number of @xmath9s ) and @xmath76 ( the lower grey line ) .",
    "moreover , these values can be obtained in constant time with constant - time rank - operations  @xcite .",
    "we list a few properties of prefix normal words that will be useful later .",
    "[ lemma:0suffix ]    1 .",
    "every prefix of a prefix normal word is also prefix normal .",
    "2 .   if @xmath8 is prefix normal , then @xmath77 is also prefix normal .",
    "3 .   given @xmath8 of length @xmath1 , it can be decided in @xmath78 time whether @xmath8 is prefix normal .",
    "we denote the language of prefix normal words by @xmath79 , the number of prefix normal words of length @xmath1 by @xmath0 , and the number of prefix normal words of length @xmath1 and density @xmath80 by @xmath81 .",
    "the first few values of the sequence @xmath0 are listed in @xcite .",
    "we give lower and upper bounds on the number of prefix normal words of length @xmath1 .",
    "our lower bound on @xmath0 is proved in section [ sec : games ] .",
    "[ thm : lowbound ] there exists @xmath82 such that @xmath83    if we consider the length of the first 1-run , we obtain an upper bound .",
    "[ thm : upbound ] for @xmath84 , we have @xmath85 .",
    "let @xmath86 be a number to be specified later .",
    "partition @xmath87 into two classes according to the length of the first 1-run .",
    "+ _ case 1 : _ if @xmath8 is prefix normal and the first 1-run s length is less than @xmath22 , then there are no @xmath22 consecutive @xmath9s in @xmath8 . write @xmath8 as the concatenation of @xmath88 blocks of length @xmath22 and a final , possibly shorter block : @xmath89 for each block we have at most @xmath90 possibilities , so there can be at most @xmath91 words in this class .",
    "_ case 2 : _ the length of the first @xmath9-run in @xmath8 is at least @xmath22 . since the first @xmath22 symbols of @xmath8 are already fixed as @xmath9s , there can only be @xmath92 words in this class .",
    "if we balance the two cases by letting @xmath22 be the largest integer such that @xmath93 , then we have @xmath94 and @xmath95 as stated .",
    "we formulate an equivalent definition of the prefix normal property that will be useful in the enumeration of prefix normal words .",
    "let @xmath96 be a prefix normal word of density @xmath97 . denote by @xmath98 the distances between consecutive occurrences of @xmath9 in @xmath8 , and set @xmath99 so that @xmath100 holds .",
    "we can thus write @xmath101 . for @xmath102",
    ", we have @xmath103 , @xmath104 , @xmath105 , @xmath106 and @xmath107 .",
    "the prefix normal property is equivalent to requiring that for all @xmath22 , one of the shortest substrings containing exactly @xmath22 ones is a prefix .",
    "this gives us the following lemma .",
    "[ lemma : equivdefpn ]    the binary word @xmath8 is prefix normal if and only if the following inequalities hold : @xmath108    [ lemma : genfunc ] for @xmath109 , we have the generating functions @xmath110 :    @xmath111    @xmath112 f_5(x ) & = & \\frac{x^5(1+x+x^2)}{(1-x^4)(1-x^2)^2(1-x)^2}\\\\[2 mm ] f_6(x ) & = & \\frac{x^6(1+x+x^2+x^3)}{(1-x^5)(1-x^3)(1-x^2)(1-x)^3}\\end{aligned}\\ ] ]    similar formulas can be derived for @xmath113 for small values of @xmath80 .",
    "unfortunately , no clear pattern is visible for @xmath114 that we could use for calculating @xmath0 .",
    "we now fix a prefix @xmath8 and give enumeration results on prefix normal words with prefix @xmath8 .",
    "our first result indicates that we have to consider each @xmath8 separately .",
    "if @xmath8 is a binary word , let @xmath115 , and @xmath116 .",
    "let @xmath117 , and @xmath118 .",
    "[ lemma : extlang ] let @xmath119 be both prefix normal .",
    "if @xmath120 then @xmath121 .",
    "we were unable to prove that the growth of these two extension languages also differ .",
    "let @xmath119 be both prefix normal . if @xmath120 then the infinite sequences @xmath122 and @xmath123 are different .",
    "the values @xmath124 seem hard to analyze .",
    "we give exact formulas for a few special cases of interest .",
    "using lemma [ lemma : equivdefpn ] , it is possible to give formulas similar to those in lemma [ lemma : genfunc ] for @xmath124 for fixed @xmath8 and @xmath80 .",
    "we only mention one such result .",
    "for @xmath125 we have @xmath126 .",
    "let @xmath8 be an arbitrary prefix normal word of length @xmath1 and density @xmath80 with @xmath9 as its first symbol .",
    "insert a @xmath10 before each subsequent occurrence of @xmath9 .",
    "it is easy to see that this operation creates a bijection between the two sets that we want to enumerate .    the following lemma lists exact values for @xmath127 for some infinite families of words @xmath8",
    ".    let @xmath128 denote the @xmath1th fibonacci number : @xmath129 and @xmath130 .",
    "then for all values of @xmath1 where the exponents are nonnegative , we have the following formulas :    @xmath131 & & { \\textit{ext}}(1^n , n ) = 2^n \\\\[1 mm ] & & { \\textit{ext}}(1^{n-1}0 , n ) = 2^n - 1 \\\\[1 mm ] & & { \\textit{ext}}(1^{n-2}01,n ) = 2^n - 5 \\\\[1 mm ] & & { \\textit{ext}}(1^{n-2}00,n ) = 2^n - ( n+1)\\end{aligned}\\ ] ]    @xmath132 & & { \\textit{ext}}((10)^{\\lfloor \\frac n2\\rfloor}1,n ) = f(n+1 ) \\textrm { if } n\\textrm { is odd}\\\\[2 mm ] & & { \\textit{ext}}(10^{n-2}1,n ) = 3\\\\[2 mm ] & & { \\textit{ext}}(10^{n-1},n ) = n+1\\end{aligned}\\ ] ]    for @xmath133 , @xmath134 , @xmath135 and @xmath136 , it is easy to count those extensions that fail to give prefix normal words . similarly , for @xmath137 , @xmath138 and @xmath139 , counting the extensions that give prefix normal words gives the results in a straightforward way .",
    "let @xmath1 be even . for @xmath140 , note that @xmath141 is prefix normal if and only if @xmath66 avoids @xmath6 .",
    "the number of such words is known to equal @xmath142 .",
    "for @xmath1 odd , the argument is similar .",
    "we consider extensions of prefix normal words by a single symbol to the right .",
    "it turns out that this question has implications for the enumeration of prefix normal words .",
    "we call a prefix normal word @xmath8 extension - critical if @xmath143 is not prefix normal . let @xmath144 denote the number of extension - critical words in @xmath145",
    ".    for @xmath146 we have @xmath147 from this it follows that @xmath148    from theorem [ thm : lowbound ] we have :    for @xmath1 going to infinity , @xmath149 .",
    "we conjecture that in fact the ratio of extension - critical words converges to @xmath10 .",
    "we study the behavior of @xmath150 for @xmath151 .",
    "the left plot in fig .",
    "[ figcrit ] shows the ratio of extension - critical words for @xmath151 .",
    "these data support the conjecture that the ratio tends to @xmath10 .",
    "interestingly , the values decrease monotonically for both odd and even values , but we have @xmath152 for even @xmath1 .",
    "we were unable to find an explanation for this .    the right plot in fig .",
    "[ figcrit ] shows the ratio of extension - critical words multiplied by @xmath153 .",
    "apart from a few initial data points , the values for even @xmath1 increase monotonically and the values for odd @xmath1 decrease monotonically , and the values for odd @xmath1 stay above those for even @xmath1 .    based on empirical evidence ,",
    "we conjecture the following : @xmath154    note that the second estimate follows from the first one by .",
    "( left ) , and the value @xmath155 ( right ) . ]     ( left ) , and the value @xmath155 ( right ) . ]",
    "* variant 1 : prefix normal game starting from empty positions . * see introduction .",
    "[ lemma : game1 ] for @xmath156 bob has a winning strategy in the game starting from empty positions .",
    "* variant 2 : prefix normal game with blocks . *",
    "the game is played as follows .",
    "now a block length of @xmath157 is also specified , and we require that @xmath157 divides @xmath1 .",
    "the first @xmath158 symbols are set to @xmath9 before the game starts ( in order to give alice a fair chance ) .",
    "divide the remaining empty positions into blocks of length @xmath157",
    ". then bob starts by picking a block with empty positions , and setting half of the positions of the block arbitrarily .",
    "alice moves next and she sets the remaining @xmath22 positions in the same block as she wants .",
    "now this block is completely filled .",
    "then bob picks another block , fills in half of it , etc .",
    "iterate this process until every position is filled in .",
    "alice has a winning strategy in the game with blocks , for any @xmath159 .",
    "alice can always achieve that the current block contains exactly @xmath22 @xmath160 and @xmath22 @xmath10s .",
    "now consider a substring @xmath47 of length @xmath161 of the word @xmath162 that is obtained in the end .",
    "we have to show that the prefix of the same length has at least as many @xmath9s .",
    "clearly , only @xmath163 has to be considered , and we can also assume that @xmath47 starts after position @xmath158 .",
    "the substring @xmath47 contains some @xmath157-blocks in full , and some others partially .",
    "let @xmath164 , then @xmath165 , while the number of @xmath9s in the prefix of length @xmath161 is at least @xmath166 , as claimed .",
    "as a corollary , we can prove the lower bound in theorem [ thm : lowbound ] .",
    "( of theorem  [ thm : lowbound ] ) . there are at least as many prefix normal words of length @xmath1 as there are distinct words resulting after a game with blocks that alice has won using the above strategy .",
    "note that with this strategy , each block has exactly @xmath22 many @xmath10s and bob is free to choose their positions within the block .",
    "moreover , for different choices of @xmath10-positions by bob , the resulting words will be different .",
    "so overall , bob can achieve at least @xmath167 different outcomes .",
    "if we set @xmath168 , and note that for @xmath157 not dividing @xmath1 , we can use @xmath169 , then we obtain : @xmath170 and the statement follows .",
    "in this section , for strings @xmath171 , we use the notation @xmath172 , with @xmath173 and @xmath174 . note that this notation is unique .",
    "we call @xmath175 the _ critical prefix _ of @xmath8",
    ".      we now present a _",
    "algorithm for computing the prefix normal form of a word @xmath8 .",
    "it uses a new algorithm technique we refer to as _ sandy beach technique _ , a technique that we think will be useful for many other similar problems .",
    "first observe that if you draw your word @xmath8 as in fig .",
    "[ fig : esempio ] , then the parikh set of @xmath8 will be the region spanned by drawing all the suffixes of @xmath8 starting from the origin . as we know , the prefix normal forms of @xmath8 will be the upper and the lower contour of the parikh set , respectively .",
    "this leads to the following algorithm , that we can implement in any sand beach  for example , lipari s canneto ( fig .",
    "[ fig : zollstock ] ) .",
    "take a folding ruler ( see fig .",
    "[ fig : zollstock ] ) and fold it in the form of your word .",
    "now designate an origin in the sand .",
    "put the folding ruler in the sand so that its beginning coincides with the origin .",
    "next , move it backwards in the sand such that the position at the beginning of the @xmath176-length suffix coincides with the origin ; then with the next shorter suffix and so on , until the right end of the folding ruler reaches the origin",
    ". the traced area to the right of the origin is the parikh set of @xmath8 , and its top and bottom boundaries , the prefix normal forms of @xmath8 ( that you can save by taking a photo ) .",
    "it can be tested easily in @xmath78 time if a word is prefix normal , by computing its @xmath177-function and comparing it to its prefixes ; several other quadratic time tests were presented in  @xcite .",
    "currently , the fastest algorithms for computing @xmath177 run in worst - case @xmath178 time ( references in the introduction ) . here",
    "we present another algorithm , which , although @xmath78 in the worst - case , we believe could well outperform other algorithms when iterated on prefixes of increasing length .    given a word @xmath8 of length @xmath1 and density @xmath80 , @xmath172 .",
    "since the cases @xmath179 are trivial , we assume @xmath180 .",
    "notice that , then , in order for @xmath8 to be prefix normal , @xmath181 must hold .",
    "now build a sequence of words @xmath182 , where @xmath183 and @xmath184 , in the following way : for every @xmath38 , @xmath185 is obtained from @xmath186 by swapping the positions @xmath187 and @xmath188 , where @xmath188 is the rightmost mismatch between @xmath186 and @xmath8 .",
    "so for example , if @xmath189 , we have the following sequence of words : @xmath190 , @xmath191 , @xmath192 , @xmath193 .",
    "we will give an intuition via a picture , see fig .",
    "[ fig : proof_childpnf ] . if @xmath66 is not prefix normal",
    ", then there must be a @xmath22 and a substring @xmath46 of length @xmath22 s.t .",
    "@xmath46 has more @xmath9s than the prefix of length @xmath22 .",
    "it can be shown that it suffices to check this for one value of @xmath22 only , namely for @xmath198 , the length of the critical prefix length of @xmath66 .",
    "the number of @xmath9s in this prefix is @xmath199 .",
    "now if such a @xmath46 exists , then it is either a substring of @xmath200 , in which case @xmath201 ; or it is a substring which contains the position of the newly swapped @xmath9 ( both in grey in the third line ) .",
    "this latter case can be checked by computing the number of @xmath9s in the prefix of the appropriate length of @xmath200 ( in slightly darker grey ) and checking whether it is greater than @xmath202 .",
    "thus , for @xmath203 , we test if @xmath185 is prefix normal .",
    "if at some point , we receive a negative answer , then the test returns no , otherwise it returns yes .",
    "additional data structures for the algorithm are the @xmath177-function , which is updated to the current suffix following the critical prefix , up to the length of the next critical prefix ( in linear time ) ; and a variable @xmath204 containing the number of @xmath9s in the appropriate length prefix of @xmath200 .        at this point",
    "we have @xmath207 and therefore , we stop .",
    "indeed , we can see that the next word to be generated , @xmath208 is not be prefix normal , since it has a substring of length @xmath7 with @xmath19 ones , but the prefix of length @xmath7 has only @xmath20 ones .",
    "* iterating version . *",
    "the algorithm tests a condition on the suffixes starting at the @xmath9s , in increasing order of length , and compares them to a prefix where the remaining @xmath9s but one are in a block at the beginning .",
    "this implies that for some @xmath8 which are not prefix normal , e.g.  @xmath211 , the algorithm will stop very late , even though it is easy to see that the word is not prefix normal .",
    "this problem can be eliminated by running some linear time checks on the word first ; the power of this approach will be demonstrated in the next section .",
    "since we know that a word @xmath8 is prefix normal iff every prefix of @xmath8 is , we have that a word which is _ not _ prefix normal has a shortest non - prefix - normal prefix .",
    "we therefore adapt the algorithm in order to test the prefix normality on the prefixes of @xmath8 of length powers of @xmath212 , in increasing order . in the worst case",
    ", we apply the algorithm @xmath213 times .",
    "since the test on the prefix of length @xmath214 takes @xmath215 time , we have an overall @xmath216 worst case running time , so no worse than the original algorithm .",
    "we believe that our algorithm will perform well on strings which are `` close to prefix normal '' in the sense that they have long prefix normal prefixes , or they have passed the filters , i.e.  that it will be expected strongly subquadratic , or even linear , time even on these strings .",
    "suppose there is an @xmath31 test that can be used to reject @xmath217 of the binary strings outright ( phase i ) .",
    "for the remaining @xmath218 strings , apply the worst case @xmath78 algorithm ( phase ii ) .",
    "this gives an @xmath31-amortized time algorithm when taken over all @xmath219 strings .",
    "for such a two - phase approach , let @xmath220 denote the strings not rejected by the first phase .",
    "we are interested in the ratio @xmath221 as @xmath1 grows , if it appears as though this ratio is bounded by a constant , then we would conjecture that such a membership tester runs in @xmath31 average case time .",
    "first we try a trivial @xmath31 test : a string will _ not _ be prefix - normal if the longest substring of 1s is not at the prefix . applying this test as the first phase ,",
    "the resulting ratios for some increasing values of @xmath1 are given in table  [ tab : ratios](a ) .",
    "since the ratios are increasing as @xmath1 increases , we require a more advanced rejection test .",
    "the next attempt uses a more compact _ run - length _ representation for @xmath8 .",
    "let @xmath8 be represented by a series of @xmath3 blocks , which are maximal substrings of the form @xmath222 .",
    "each block @xmath223 is composed of two integers @xmath224 representing the number of 1s and 0s respectively .",
    "for example , the string 11100101011100110 can be represented by @xmath225 .",
    "such a representation can easily be found in @xmath31 time . a word @xmath8 will _ not _ be prefix normal word if it contains a substring of the form @xmath226 such that @xmath227 and @xmath228 ( the substring is no longer , yet has more 1s than the critical prefix ) .",
    "thus , a word will not be prefix normal , if for some @xmath229 : @xmath230 by applying this additional test in our first phase , we obtain algorithm memberpn(@xmath8 ) , consisting of the two rejection tests , followed by any simple quadratic time algorithm .",
    "s.  bcker , k.  jahn , j.  mixtacki , and j.  stoye .",
    "computation of median gene clusters . in _ proc .  of the twelfth annual international conference on computational molecular biology ( recomb 2008 ) _ ,",
    "pages 331345 , 2008 .",
    "lnbi 4955 .",
    "p.  burcsi , f.  cicalese , g.  fici , and zs .",
    "liptk . on table arrangements , scrabble freaks , and jumbled pattern matching .",
    "in _ proc .  of the 5th international conference on fun with algorithms ( fun 2010 ) _ , volume 6099 of _ lncs _ , pages 89101 , 2010 .",
    "p.  burcsi , g.  fici , zs .",
    "liptk , f.  ruskey , and j.  sawada . on combinatorial generation of prefix normal words .",
    "in _ proc .  25th ann . symp . on comb .",
    "pattern matching ( cpm 2014 ) _ , volume 8486 of _ lncs _ , pages 6069 , 2014 .",
    "f.  cicalese , g.  fici , and zs .",
    "searching for jumbled patterns in strings . in _ proc .",
    "of the prague stringology conference 2009 ( psc 2009 ) _ , pages 105117 .",
    "czech technical university in prague , 2009 .",
    "f.  cicalese , t.  gagie , e.  giaquinta , e.  s. laber , zs .",
    "liptk , r.  rizzi , and a.  i. tomescu .",
    "indexes for jumbled pattern matching in strings , trees and graphs . in _ proc .  of the 20th string processing and information retrieval symposium ( spire 2013 ) _ ,",
    "volume 8214 of _ lncs _ , pages 5663 , 2013 .",
    "f.  cicalese , e.  s. laber , o.  weimann , and r.  yuster .",
    "near linear time construction of an approximate index for all maximum consecutive sub - sums of a sequence . in _ proc .",
    "23rd annual symposium on combinatorial pattern matching ( cpm 2012 ) _ , volume 7354 of _ lncs _ , pages 149158 , 2012 .",
    "t.  gagie , d.  hermelin , g.  m. landau , and o.  weimann .",
    "binary jumbled pattern matching on trees and tree - like structures . in _ proc .",
    "of the 21st annual european symposium on algorithm ( esa 2013 ) _ , pages 517528 , 2013 .",
    "t.  kociumaka , j.  radoszewski , and w.  rytter .",
    "efficient indexes for jumbled pattern matching with constant - sized alphabet . in _ proc .  of the 21st annual european symposium on algorithm ( esa 2013 ) _ , pages 625636 , 2013 .",
    "lee , m.  lewenstein , and q.  zhang .",
    "parikh matching in the streaming model . in _ proc .",
    "of 19th international symposium on string processing and information retrieval , spire 2012 _ , volume 7608 of _ lecture notes in computer science _ , pages 336341 .",
    "springer , 2012 ."
  ],
  "abstract_text": [
    "<S> a prefix normal word is a binary word with the property that no substring has more 1s than the prefix of the same length . </S>",
    "<S> this class of words is important in the context of binary jumbled pattern matching . in this paper we present results about the number @xmath0 of prefix normal words of length @xmath1 , showing that @xmath2 for some @xmath3 and @xmath4 . </S>",
    "<S> we introduce efficient algorithms for testing the prefix normal property and a `` mechanical algorithm '' for computing prefix normal forms . </S>",
    "<S> we also include games which can be played with prefix normal words . in these games alice </S>",
    "<S> wishes to stay normal but bob wants to drive her `` abnormal ''  we discuss which parameter settings allow alice to succeed .    </S>",
    "<S> _ keywords : _ prefix normal words , binary jumbled pattern matching , normal forms , enumeration , membership testing , binary languages </S>"
  ]
}