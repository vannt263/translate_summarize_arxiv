{
  "article_text": [
    "_ second - order _ cellular automaton ( ca ) may be used for construction of reversible ca @xcite .",
    "the approach let us construct reversible ca with set of states @xmath5 from arbitrary ca with states from some @xmath6 . in the paper",
    "is suggested extension of such idea with @xmath7 with further reduction to some @xmath8 . here instead of second term @xmath9 corresponding to previous state is used arbitrary set @xmath10 considered as hidden parameter .",
    "some basic structures are introduced in sec .",
    "[ sec : pre ] , yet a preliminary acquaintance with properties of ca is supposed . the construction of reversible second - order ca is revisited in sec .",
    "[ sec : scnd ] .",
    "generalizations @xmath11 and @xmath8 are introduced in sec .",
    "[ sec : gen ] and sec .",
    "[ sec : red ] respectively .",
    "some examples are presented for clarification in sec .",
    "[ sec : eg ] .",
    "a _ space of cells _ @xmath12 is defined here in a general way as _ a finite or infinite discrete set_. simple examples of such spaces are @xmath13 and some subset of such lattices .",
    "element @xmath14 is called here _ location _ ( of cell ) .",
    "set of states of each cell is a finite discrete set @xmath9 with @xmath0 elements .",
    "a map @xmath15 enumerates the states by indexes @xmath16 .",
    "complete description of each cell is a pair @xmath17 also denoted here as @xmath18 with @xmath14 , @xmath19 .",
    "_ configuration _ of whole ca is a map @xmath20 .    for a space of cells such as @xmath21 the neighborhood of given cell @xmath22 with @xmath23 _ adjacent cells _ is often described via shifts @xmath24 @xcite , but for more general @xmath12 it should be defined as some function @xmath25 .",
    "_ local update rule _ is a function @xmath26 , where @xmath27 is the vector of states for a neighborhood together with the cell itself .",
    "for a cell @xmath18 the notation @xmath28_x$ ] or @xmath28 $ ] may be used for @xmath29 .",
    "consideration of cellular automata on penrose s tilings @xcite demonstrates that such a definition of neighborhood and local update rules may be still not enough to describe some models .",
    "the problem is not only varying number @xmath30 of adjacent cells , but also a few possible geometries and orientations of the neighborhood .",
    "to include such models , let us use formal notation @xmath31 $ ] for _ a domain of definition _ of local update rule .",
    "element of such set is denoted here as @xmath32 \\in [ { \\mathsf s}]$ ] . in simplest case discussed above @xmath31",
    "= { \\mathsf s}^{j+1}$ ] , @xmath32 = ( s , s_1,\\ldots , s_j)$ ] . for variable size of neighborhood it may be defined @xmath31 = \\bigcup_k { \\mathsf s}^{j_k+1}$ ] , @xmath32 = \\bigl(k,(s , s_1,\\ldots , s_{j_k})\\bigr)$ ] .    for",
    "any location @xmath33 and each configuration @xmath34 _ localization _ is a map @xmath35 .",
    "\\label{locconf}\\ ] ] the value of such a map for given @xmath33 is designated further as @xmath32_x$ ] and for local update function may be used notation @xmath28 $ ] or @xmath28_x$ ] already introduced earlier .    in simpler and more regular cases localization @xmath36 of configuration @xmath34 may be defined as composition of two maps .",
    "first map @xmath37 gives neighboring cells for given @xmath33 .",
    "localization @xmath38 $ ] is a restriction of configuration @xmath34 to given neighborhood .",
    "let us consider arbitrary ca with set of states @xmath39 and local update rule @xmath40 .",
    "second - order ca @xcite produced from such a rule has the same set of locations @xmath12 , but the state is a pair from set @xmath41 with @xmath1 elements and update rule is @xmath42\\ominus s ' , s ) , \\label{rf}\\ ] ] where ` @xmath43 ' is subtraction modulo @xmath0 .",
    "the update rule eq .",
    "( [ rf ] ) may be decomposed into two reversible steps , _ an update : _ @xmath44\\ominus s ' ) \\label{fu}\\ ] ] and _ the swap : _ @xmath45 the rule @xmath46 is reversible @xmath47 , where @xmath48 , @xmath49 .",
    "the global reversibility of local operation @xmath50 eq .  ( [ swp ] ) is rather obvious , because it acts on each cell separately .",
    "operation @xmath51 eq .  ( [ fu ] ) uses values of neighboring cells , but it acts only on second parameter of the state . due to construction of the @xmath51 eq .",
    "( [ fu ] ) neighboring cells are not affected by the second parameter ( before application of @xmath50 ) and such a property produces global reversibility of @xmath51 in spite of the fact that definition eq .",
    "( [ fu ] ) is local .",
    "generalization for less regular spaces @xmath12 with different configurations and number of neighboring cells is rather straightforward with _ localization _ @xmath36 of configuration @xmath52 eq .",
    "( [ locconf ] ) .",
    "in fact , it is enough to consider _ localization _ @xmath36 of @xmath53 to construct @xmath51 eq .",
    "( [ fu ] ) and swap @xmath50 only acts on cell itself .",
    "the term _ second - order _ describes possibility to use information about previous state @xcite . in local update rule such as eq .",
    "( [ rf ] ) the information is accessible only to cell itself .",
    "it is possible to consider yet another interpretation of such update rules .",
    "the set of states is direct product of two components , but only one is accessible for neighboring cells .    such alternative approach may be used for generalizations , if to consider the second component not as previous state , but as an arbitrary hidden parameter of a cell inaccessible for neighbors . in such a case size of both components may be different and instead of update eq .",
    "( [ fu ] ) and exchange eq .",
    "( [ swp ] ) could be used more general functions .",
    "let us consider ca with states from set of pairs @xmath11 , @xmath39 , @xmath54 and update rule represented as composition of two steps @xmath55 here @xmath56 is a fixed reversible transformation of @xmath57 and @xmath58(h)\\bigr ) , \\label{ups}\\ ] ] where @xmath59(h ) = f(s , s_1,\\ldots , s_j)(h)$ ] must be reversible function on set @xmath10 for any vector of states @xmath60 .    in fact , not only",
    "second - order ca is particular case of such extension for @xmath61 , but also arbitrary @xmath0-order ca may be considered in such a way with @xmath62 storing @xmath63 previous states and @xmath64 .    in most general case , reversible functions on @xmath10 may be represented via transpositions @xmath65 of @xmath3 elements of @xmath66 and",
    "so instead of @xmath67 ( _ cf _ usual ca recollected in sec .",
    "[ sec : pre ] ) should be used map @xmath68 @xmath69 only for set with two states both @xmath70 and @xmath71 have two elements and such distinction is not essential .    unlike the usual second - order ca discussed in sec .",
    "[ sec : scnd ] such an extended version is not necessary directly derived from some ca . on the other hand",
    ", it may be useful sometimes to start with a second - order ca and to consider local update rule with bigger number of output states eq .",
    "( [ fgen ] ) .",
    "simple example is discussed further in sec .",
    "[ sec : ex3 ] for ca with three states .",
    "construction for spaces @xmath12 with variable number of neighboring cells is also straightforward due to _ localization _ @xmath36 of configuration @xmath52 eq .",
    "( [ locconf ] ) .",
    "it is again enough to consider _ localization _ of @xmath53 to construct @xmath68 eq .",
    "( [ fgen ] ) and @xmath56 affects only state of cell itself .",
    "set with @xmath72 states used above may be redundant .",
    "reduction of previous construction on some subset @xmath73 is discussed below .",
    "let us consider some discrete set @xmath74 with two projections @xmath75 and @xmath76 .",
    "so , each state @xmath77 corresponds to pair @xmath78 .        as an example , fig .",
    "[ fig : reduc ] with 12 states may be represented as set of pairs : @xmath79    let us denote @xmath80 number of states @xmath81 with @xmath82 , _",
    "e.g. _ , @xmath83 , @xmath84 , @xmath85 , @xmath86 for fig .",
    "[ fig : reduc ] .    due to representation of states from @xmath74 via set of pairs",
    "it is possible again to use two - steps rule such as eq .",
    "( [ fd ] ) with @xmath56 is transposition on @xmath74 and @xmath87 is an analogue of eq .",
    "( [ ups ] ) @xmath88(p_2(r))\\bigr ) , \\label{redups}\\ ] ] where @xmath89=f(p_1(r),p_1(r_1),\\ldots , p_1(r_j))$ ] is reversible function ( transposition ) on set with @xmath90 states .",
    "for example on fig .",
    "[ fig : reduc ] function @xmath91 $ ] may exchange only five states @xmath92 , @xmath93 $ ]  @xmath94 , _ etc_. the @xmath68 depends only on @xmath95 projections of states in the neighborhood and rearranges states of the cell without change of @xmath95 .",
    "there is a formal difficulty in description of @xmath68 in eq .",
    "( [ redups ] ) . a map such as eq .",
    "( [ fgen ] ) may not be used directly , because value @xmath3 in @xmath65 for a state @xmath77 depends on @xmath96 .    a simple way to resolve such a problem",
    " is to consider bigger formal set of states @xmath97 , fig .",
    "[ fig : reduc_in ] , but to use functions @xmath68 and @xmath56 changing only states from @xmath74 .",
    "in such a case it is possible to use @xmath98 , where @xmath99 for any @xmath100 .     included into @xmath101    another method is to consider _ a family _ of functions @xmath102 here @xmath103 is used instead of @xmath104 , because state of cell itself formally is not used as an argument of a function @xmath105 and is treated in a special way as an index inside of the family .",
    "it is not necessary to introduce formal set @xmath106 with auxiliary states in such a case .",
    "such approach may also require an insignificant change of notation such as @xmath59=f_s(s_1,\\ldots , s_j)$ ] instead of @xmath59=f(s , s_1,\\ldots , s_j)$ ] .",
    "the construction of ca with variable number of neighboring cell may be again carried out with _ localization _ @xmath36 of configuration @xmath107 or @xmath34 eq .",
    "( [ locconf ] ) .",
    "it works both with formal consideration of @xmath74 as a reduction of auxiliary space @xmath106 and with definition of @xmath74 via family of functions @xmath105 .",
    "let us consider two - states cellular automaton with transition function @xmath40 . for two states",
    "there is no difference between subtraction and addition modulo two , the same binary operation is also known as xor ( exclusive or ) and eq .",
    "( [ rf ] ) may be written in more familiar way : @xmath42 \\mathop{\\sf xor } s ' , s ) .",
    "\\label{rf2}\\ ] ] the eq .",
    "( [ rf2 ] ) is transition function for reversible cellular automaton with four states fig .",
    "[ fig : ca2x2 ] .",
    "let us consider for comparison initial ca with three states .",
    "@xmath42 + 3 - s ' \\bmod 3 , s ) .",
    "\\label{rf3}\\ ] ] the eq .",
    "( [ rf3 ] ) is transition function for reversible cellular automaton with nine states fig .",
    "[ fig : ca3x3 ] .        only three between six reversible transformations ( @xmath109 ) are represented in eq .",
    "( [ rf3 ] ) and so it is possible to consider extensions with six different @xmath87 eq .",
    "( [ ups ] ) . for three states all six possible functions",
    "may be written quite naturally , _",
    "e.g. _      it is clear , that only @xmath111 , @xmath112 and @xmath113 are used in eq .",
    "( [ rf3 ] ) . even without change of ` swap ' function @xmath56 there are possible extensions for such ca , due to possibility to associate six different actions eq .",
    "( [ ups3 ] ) with local update rule instead of three .",
    "the inverse for @xmath111 , @xmath112 , @xmath113 and @xmath114  is the function itself and @xmath115 .",
    "it is useful sometimes to add special `` blank '' cells .",
    "a cellular space of ca may be restricted to some domain of arbitrary shape if to set all complementary cells to such `` blank '' value .",
    "such a state may not be changed , but other states must be updated by the update function of initial ca without `` blank '' state .      on the fig .",
    "[ fig : ca32sw ] is shown extension of @xmath122 ca with `` blank '' state ( 4 ) .",
    "the function @xmath56 is denoted by arrows and exchanges only two states @xmath123 , the function @xmath87 should be derived from initial ca and may change only first four states .    it should be mentioned , that term `` reduced number of states '' here should be treated with some care  given example could be formally described as reduction of ca with @xmath124 states , but it would not reflect properly idea of `` blank '' cells used for construction of the ca .",
    "9 t. toffoli and n. margolus , `` invertible cellular automata : a review , '' _ physica d * 45 * _ , 229253 ( 1990 ) .",
    "s. wolfram , _ cellular automata and complexity : collected papers _ , ( addison - wesley , reading ma 1994 ) . j. kari and s. taati , `` statistical mechanics of surjective cellular automata , '' arxiv:1311.2319 [ math ] ( 2013 ) .",
    "n. owens and s. stepney , `` investigations of game of life cellular automata rules on penrose tilings : lifetime and ash statistics , '' _ automata 2008 , bristol , uk _",
    ". 1-34 ( luniver press , 2008 ) ."
  ],
  "abstract_text": [
    "<S> a cellular automaton with @xmath0 states may be used for construction of reversible second - order cellular automaton with @xmath1 states . </S>",
    "<S> reversible cellular automata with hidden parameters discussed in this paper are generalization of such construction and may have number of states @xmath2 with arbitrary @xmath3 . </S>",
    "<S> further modification produces reversible cellular automata with reduced number of states @xmath4 . </S>"
  ]
}