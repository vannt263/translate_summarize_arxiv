{
  "article_text": [
    "graph languages and graph grammars were introduced in theoretical computer science as an extension of the theory of formal languages ( linear languages ) , in order to model various types of parallelism in computation , @xcite , @xcite , @xcite , @xcite . instead of replacing nonterminal symbols with combinations of nonterminals and terminals in a linear string of characters ,",
    "the production rules of graph grammars replace a subgraph of a graph with a new graph .",
    "the latter is obtained either by gluing along a common subgraph , or by first performing an excision of a subgraph and then replacing it with a new graph .",
    "an analog of the chomsky hierarchy of grammars exists for graph languages , see @xcite . in particular , the context - free graph grammars are those where the left - hand - side of the production rules is always a single vertex .",
    "namely , no  context \" in the graph is taken into consideration in deciding when a production rule can be applied : it just applies to any vertex . in this context - free case",
    "the production rules then consist of inserting a new graph at a vertex of another graph .",
    "this operation is reminiscent of the insertion operation that defines the lie algebras of feynman graphs in the algebraic approach to renormalization in quantum field theory pioneered in @xcite ( see also @xcite , @xcite , @xcite ) . in this paper",
    "we show that , indeed , to certain classes of graph grammars ( both context - free and context - sensitive ) it is possible to associate a lie algebra , obtained by constructing a pre - lie insertion operator using the production rules of the grammar .",
    "we also show that the feynman graphs of a given quantum field theory are a graph language in the sense of the theory of formal languages .",
    "this provides a new class of examples of graph languages , in addition to those arising in the context of computer science ( such as fft networks , petri nets , distributed parallelism ) , see the articles in @xcite for several examples .",
    "relations between the formalism of algebraic renormalization in quantum field theory and aspects of the theory of computation in theoretical computer science have already been investigated in @xcite , see also the formulation of dyson ",
    "schwinger equations in the hopf algebra of flow charts in @xcite",
    ". it would be interesting to see if a theory of dyson  schwinger equations can be formulated for graph languages , using the lie theoretic approach of @xcite .",
    "in perturbative quantum field theory , one computes expectation values as a formal series of feynman amplitudes labeled by feynman graphs .",
    "these graphs are finite and the allowed valencies are constrained to match the exponents in the interaction monomial in the lagrangian of the field theory .",
    "graphs have a number of internal edges ( connecting pairs of vertices ) and external edges ( half edges ) . the corresponding feynman amplitude is a finite dimensional integral over a space of momenta flowing through the graph , with assigned external momenta carried by the external edges , and with conservation laws at the vertices .",
    "these feynman integrals are typically divergent , which leads to the crucial problem of renormalization .",
    "the goal of a renormalization procedure is a consistent extraction of finite values from all these integrals that takes into account the combinatorics of how divergent subgraphs are nested inside larger graphs . since the work of kreimer @xcite and connes ",
    "kreimer @xcite , it has become clear that the renormalization procedure can be formulated algebraically in terms of a hopf algebra of feynman graphs .",
    "the algebraic feynman rules are seen as algebra homomorphisms to a target commutative algebra determined by a choice of regularization procedure , and endowed with a  pole - subtraction \" operation ( rota  baxter algebra ) .",
    "see  1 of @xcite for an overview .",
    "the hopf algebra @xmath0 of feynman graphs is a graded connected commutative hopf algebra generated by the 1pi feynman graphs of the given quantum field theory .",
    "the 1pi ( one - particle irreducible ) condition means that the graphs are connected and can not be disconnected by removal of a single edge .",
    "a standard argument in quantum field theory reduces the combinatorics of feynman graphs to the connected case , and further to the 1pi case , see @xcite .",
    "the coproduct in the hopf algebra is not co - commutative .",
    "it is given by @xmath1 where the sum is over all the ( not necessarily connected ) subgraphs @xmath2 , such that the quotient graph @xmath3 ( obtained by shrinking each component of @xmath4 to a vertex ) is a 1pi feynman graph of the theory .",
    "the hopf algebra is dual to a pro - unipotent affine group scheme that is entirely determined by its lie algebra .",
    "connes and kreimer gave a very explicit geometric description of this _ insertion lie algebra _",
    "@xcite ( see also  1 of @xcite ) . on the vector space spanned by all 1pi feynman graphs of the theory",
    ", one can define a lie bracket by setting @xmath5=\\sum_{v}g_{1}\\circ_{v } g_{2}-\\sum_{v ' } g_{2}\\circ_{v ' } g_{1},\\ ] ] where the sums are over all vertices in @xmath6 and @xmath7 .",
    "the expression @xmath8 denotes the graph resulting from the insertion of @xmath7 at the vertex @xmath9 of @xmath6 .",
    "one can insert one graph into another by matching external edges to the edges incident at the vertex . in the sum one",
    "counts all the possible inequivalent ways in which the graph can be inserted at the given vertex .",
    "this bracket indeed satisfies the jacobi identity and defines a lie algebra , which can be related to the primitive elements in the dual hopf algebra of feynman graphs @xcite ( see also  1 of @xcite ) . a detailed survey of the use of lie algebra methods in quantum field theory can be seen in @xcite .",
    "the language of lie algebras in quantum field theory provides an elegant formulation of the dyson  schwinger equations ( the quantum equations of motion of the theory ) , and a general method for solving them in the lie algebra of feynman graphs @xcite .",
    "it is convenient to consider two slightly different ways of assigning the data of a finite graph .",
    "the first is the one most commonly used in combinatorics , while the second is more frequently used in physics .",
    "a graph @xmath10 consists of a set of vertices @xmath11 and a set of edges @xmath12 together with a boundary map @xmath13 assigning to an edge @xmath14 its ( unordered ) pair of boundary vertices @xmath15 .",
    "the graph can have looping edges if we allow @xmath16 and it can have multiple parallel edges if @xmath17 can consist of more than one element .",
    "if the graph @xmath10 is oriented ( directed ) then the boundary map consists of two maps ( source and target ) @xmath18 .",
    "a system of vertex and edge labeling consists of two sets @xmath19 , @xmath20 of vertex and edge labels , respectively , and functions @xmath21 and @xmath22 .",
    "a graph @xmath10 consists of a set @xmath23 of _ corollas _ ( vertices @xmath9 with valence @xmath24 with @xmath24 half - edges attached to it ) and an involution @xmath25 on the set @xmath26 of all half - edges ( flags ) attached to all the corollas .",
    "the set @xmath27 of internal edges of @xmath10 corresponds to all the pairs @xmath28 with @xmath29 in @xmath26 and with @xmath30 .",
    "the set @xmath31 of external ( half)edges of @xmath10 consists of all the @xmath32 such that @xmath33 .",
    "a labeling system is given by a set @xmath34 of flag labels and a set @xmath19 of vertex labels together with maps @xmath35 and @xmath36 with @xmath37 .",
    "using the first description of graphs , we define an insertion graph grammar as follows .",
    "[ igg1 ] an insertion graph grammar consists of data @xmath38 where the set of edge labels of graphs is @xmath39 , with @xmath40 the nonterminal symbols and @xmath41 the terminal symbols , and the set of vertex labels is given by @xmath42 , with non - terminal and terminal symbols given respectively by @xmath43 and @xmath44 .",
    "the start graph is @xmath45 and @xmath46 is a finite set of production rules of the form @xmath47 , with @xmath48 and @xmath49 labelled graphs ( respectively , the left - hand - side and the right - hand - side of the production ) and with @xmath50 a labelled graph with isomorphisms @xmath51 the isomorphism @xmath52 should be label preserving .",
    "the production rule @xmath47 searches for a copy of @xmath48 inside a given graph @xmath10 and glues in a copy of @xmath49 by identifying them along the common subgraph @xmath50 , with new labels matching those of @xmath53 .",
    "we recall the notion of context - freeness for graph grammars from @xcite .",
    "[ contextfree ] an insertion graph grammar as in definition [ igg1 ] is _ context - free _ if @xmath54 ( hence @xmath55 also ) .",
    "it is _ context - sensitive _ if @xmath56 . in the context - sensitive case @xmath48",
    "is called the _ context _ of the production rule .",
    "a chomsky hierarchy for graph grammars is described in @xcite .",
    "if we consider the second version of the definition of graphs given above , we can formulate a slightly different notion of insertion graph grammars . for a subgraph",
    "@xmath57 the set of external edges @xmath58 is defined as the union of the set @xmath59 and the set of pairs @xmath60 such that only one half - edge in the pair belongs to @xmath61 while the other belongs to @xmath62 .    in this setting , we describe an insertion graph grammar as follows .",
    "[ igg2 ] an insertion graph grammar consists of data @xmath63 , as in definition [ igg1 ] , with @xmath64 the non - terminal and terminal labels for flags .",
    "the production rules @xmath47 are as in definition [ igg1 ] , with the additional requirement that @xmath65 and @xmath66 , where @xmath10 is any graph the production rule is applied to , with @xmath67 .",
    "the reason for this modified definition is that the notion of gluing of two graphs @xmath68 along a common subgraph @xmath50 is formulated by taking as set of corollas @xmath69 identifying the corollas around each vertex of @xmath50 in @xmath48 and @xmath49 and then matching half - edges by the involution @xmath70 with @xmath71 when both @xmath72 , with @xmath29 , and @xmath73 when @xmath74 , with @xmath29 . if @xmath75 and @xmath76 with @xmath77 , when @xmath70 and similarly for @xmath66 .    in this",
    "setting , because vertices are always endowed with a corolla of half - edges , we can not state the context - free condition by requiring that @xmath78 .",
    "an appropriate replacement of the context free condition is given by the following .",
    "[ contextfree2 ] an insertion graph grammar as in definition [ igg2 ] is _ context - free _ if @xmath79 , the corolla @xmath80 of a vertex @xmath9 , and all the vertices of graphs in the graph language have the same valence .    in the case where graphs contain vertices of different valences , these would still be context - sensitive graph grammars , with the context specified by the valence of @xmath80 .",
    "we consider another variant of the definition of graph grammars , where the production rules consist of _ replacing _ a subgraph by another one , instead of gluing them along a subgraph . while the version discussed above",
    "reflects the notion of graph grammars considered for instance in @xcite , the version we discuss here reflects the use in other references ( see for instance @xcite ) .    in order to formulate this version of graph grammars with the first notion of graphs , we need to define the operation of removal of a subgraph from a graph .",
    "let @xmath57 be a subgraph .",
    "let @xmath81 we define @xmath82 as the subgraph of @xmath10 with @xmath83 and with edges @xmath84 .",
    "thus , for example , removing a vertex @xmath85 means removing the vertex @xmath9 along with its star of edges .",
    "we then define insertion - elimination graph grammars as follows .",
    "[ iegg1 ] an insertion - elimination graph grammar consists of data @xmath86 as in definition [ igg1 ] , where the production rule @xmath87 acts by searching for a copy of @xmath48 in @xmath10 , removing @xmath88 and replacing it with the graph @xmath49 glued along @xmath50 .    using the second description of graphs , the removal of a subgraph @xmath57 is defined by cutting all edges in @xmath89 into pairs of half - edges , one attached to @xmath90 and one to @xmath82 .",
    "thus , the set of corollas @xmath91 is given by the difference @xmath92 and the set of flags is given by @xmath93 , with involution @xmath94 if both @xmath95 and @xmath96 are in @xmath97 and @xmath98 for @xmath99 with @xmath100 .",
    "notice that the two notions of removal of subgraphs differ in the way the edges connecting a vertex of the subgraph to a vertex of the complement are treated : in the first case they are removed , while in the second case a half - edge remains as an external edge of the complement graph . we then have the following formulation .",
    "[ iegg2 ] an insertion - elimination graph grammar consists of data @xmath101 as in definition [ igg2 ] , with the requirement that @xmath102 the production rule @xmath103 acts by searching for a copy of @xmath48 inside @xmath10 , removing @xmath104 and replacing it with a copy of @xmath105 , by matching the half - edges of @xmath106 to the half - edges of @xmath107 .      a ( right ) pre - lie structure on a vector space @xmath108 is a bilinear map @xmath109 satisfying the identity of associators under the exchange @xmath110 , @xmath111    a lie algebra is a vector space @xmath108 endowed with a bilinear bracket @xmath112 $ ] satisfying antisymmetry @xmath113=-[y , x]$ ] and the jacobi identity @xmath114+[z,[x , y]]+[y,[z , x]]=0 , \\ \\ \\",
    "\\forall x , y , z \\in v.\\ ] ]    a pre - lie structure determines a lie algebra by setting @xmath115 : = x \\triangleleft y - y \\triangleleft x .\\ ] ] the pre - lie identity ensures that the jacobi identity is satisfied .",
    "a detailed survey of occurrences of pre - lie algebras in geometry , physics , and the theory of formal languages can be found in @xcite .    one can obtain a group structure from a pre - lie algebra structure ( see @xcite and @xcite ) by considering formal series @xmath116 with the multiplication operation @xmath117 where @xmath118 is the baker ",
    "hausdorff formula @xmath119+\\frac{1}{12 } ( [ x,[x , y]]+[y,[y , x ] ] ) + \\cdots\\ ] ]      consider the case of a context - free insertion graph grammar @xmath120 as in definitions [ igg1 ] and [ contextfree ] , where the start graph @xmath45 is a single vertex and all the graphs @xmath10 are directed acyclic with a marked ( root ) source vertex .",
    "the production rules are of the form @xmath121 , where @xmath122 is the root vertex of @xmath123 and @xmath9 is a vertex of the graph @xmath124 , to which the rule is applied .",
    "the resulting graph @xmath125 obtained by applying the production rule to @xmath124 is also a directed acyclic graph with root vertex the root @xmath126 of @xmath124 .",
    "let @xmath127 be the vector space spanned by the set @xmath128 all the graphs obtained by repeated application of production rules , starting with @xmath45 .",
    "the set @xmath128 is different from the graph language @xmath129 , as it also contains graphs whose vertices and edges are labelled by non - terminal symbols .",
    "we then define the insertion operator @xmath130 as @xmath131    [ prelie1ins ] given a context - free insertion graph grammar @xmath120 as above , the insertion operator defines a pre - lie structure on the vector space @xmath127 .",
    "we need to check that is satisfied .",
    "we have @xmath132 where @xmath9 and @xmath133 are glued , respectively , to the root source vertices @xmath122 and @xmath134 of @xmath123 and @xmath135 .",
    "the choice of @xmath133 can be subdivided into the two cases where @xmath133 is a vertex of @xmath123 or @xmath133 is a vertex of @xmath124 , including the case @xmath136 .",
    "thus , we have @xmath137 similarly , we have @xmath138 where @xmath9 is glued to is the base vertex @xmath122 of @xmath139 , which is the same as the base vertex of @xmath123 .",
    "thus , we obtain @xmath140 and similarly @xmath141 which proves .",
    "we then obtain the associated lie algebra .",
    "[ lialg1cor ] let @xmath120 be a context - free insertion graph grammar of rooted directed acyclic graphs , with start graph @xmath142 and production rules @xmath121 , with @xmath122 the source of @xmath123 .",
    "then there is an associated lie algebra @xmath143 given by the vector space @xmath127 spanned by the graphs of @xmath128 with the lie bracket @xmath144=g_1\\triangleleft g_2- g_2 \\triangleleft g_1 $ ] .",
    "[ remsink]a variant of the above construction that makes it ( very mildly ) context sensitive is obtained by requiring that the marked source vertex of the graph @xmath123 in a production rule @xmath121 is glued to a _",
    "sink _ vertex of the graph @xmath124 , to which the rule is applied .",
    "the argument is exactly as before , and one obtains a pre - lie insertion operator and a lie algebra .",
    "we will generalize this context - sensitive version to more general gluing data in propositions [ prelie2ins ] and [ prelie3ins ] below .",
    "we now consider a variant of the case of proposition [ prelie1ins ] where we consider an example of context - sensitive graph grammars .",
    "we still assume , as above , that @xmath120 is an insertion graph grammar @xmath120 as in definition [ igg1 ] , with start graph @xmath45 a single vertex , and where all the graphs @xmath145 are directed .",
    "we no longer require that they are acyclic , hence graphs will generally have oriented loops . an oriented loop @xmath4 in a graph @xmath10 is an attractor if all the edges in @xmath146 ( defined as in ) are incoming , that is , @xmath147 .",
    "it is a repeller if all edges in @xmath146 are outgoing , @xmath148 .",
    "in general , there will be also oriented loops that are neither attractors not repellerts .",
    "we modify the previous context - free construction by considering , in addition to the production rules that glue a vertex of one graph to a source vertex of another , also context - sensitive production rules that glue an attractor loop of the first graph to a repeller loop of the second , @xmath149 where the two graphs are glued by identifying the two oriented loops @xmath4 and @xmath150 ( which necessarily have to have the same number of edges ) .",
    "the insertion operator is then defined as @xmath151    [ prelie2ins ] given a context - sensitive insertion graph grammar @xmath120 as above , the insertion operator defines a pre - lie structure on the vector space @xmath127 spanned by the graphs in @xmath128 .",
    "the composition @xmath152 is given by @xmath153 while the composition @xmath154 is @xmath155 in the last sum , the choice of @xmath156 can be broken down into the case where @xmath157 , the case where @xmath158 , and the case where it intersects both , @xmath159 and @xmath160 .",
    "in fact , because of our assumptions on the production rules , only the first two possibilities can occur , and the first one can occur only with @xmath161 to see this , suppose @xmath162 intersects both sets . then it must intersect @xmath4 , since @xmath162 is connected and @xmath4 is the frontier between @xmath124 and @xmath123 . under our assumptions , @xmath162 is an attractor loop for @xmath163 , hence all edges in @xmath164 must be incoming to @xmath162 . on the other hand , @xmath4 is an attractor loop for @xmath124 and a repeller loop for @xmath123 , so inside @xmath163 , there are vertices of @xmath4 that have both incoming and outgoing edges in @xmath165 . consider a vertex @xmath9 in the intersection @xmath166 .",
    "either @xmath162 and @xmath4 have an adjacent edge in common , or they cross each other transversely at @xmath9 . if they are transverse , then the incoming and outgoing edges of @xmath4 at @xmath9 show that @xmath162 can not be an attractor loop for @xmath163 . if @xmath4 and @xmath162 have at least one edge adjacent to @xmath9 in common , then that edge is either incoming or outgoing at @xmath9",
    ". if it is incoming , then the next edge of @xmath4 is outgoing and that suffices to show @xmath162 is not an attractive loop . if it is outgoing , then one can argue the same way with the next vertex .",
    "thus , we can rewrite the sum above as @xmath167 notice that , in the sum describing @xmath152 we also have @xmath168 because @xmath169 is not a repelling loop so it can not intersect the repelling loop @xmath150 that is glued to @xmath4 .",
    "we then obtain @xmath170 and similarly @xmath171 which proves .",
    "we obtain an associated lie algebra @xmath143 , as in corollary [ lialg1cor ] .",
    "this construction can be further generalized to other context - sensitive grammars , in the following way .",
    "assume again that @xmath120 is an insertion graph grammar @xmath120 as in definition [ igg1 ] , with start graph @xmath45 a single vertex , and where all the graphs are oriented .",
    "in addition to the production rules that glue a vertex of one graph to a source vertex of another , as in proposition [ prelie1ins ] , we also allow for context - sensitive production rules of the form @xmath103 where @xmath50 is a connected , oriented graph with no sources or sinks .",
    "moreover , we require that all the edges in @xmath172 are incoming to @xmath50 and all the edges in @xmath173 are outgoing from @xmath50 .",
    "we define the insertion operator by setting @xmath174 to be the gluing of @xmath124 and @xmath123 along @xmath50 , whenever @xmath124 contains a pair of subgraphs isomorphic to @xmath175 , with the orientation requirements as specified above .",
    "we then have @xmath176 where the sum is over all the production rules and over all the possible ways of identifying @xmath48 with a subgraph of @xmath124 .",
    "the result is zero if @xmath124 does not contain any subgraph isomorphic to @xmath48 .",
    "we then have the following straightforward generalization of proposition [ prelie2ins ] .    [ prelie3ins ] given a context - sensitive insertion graph grammar @xmath120 as above , the insertion operator defines a pre - lie structure on the vector space @xmath127 spanned by the graphs in @xmath128 .",
    "the argument follows along the same lines as the previous cases .",
    "observe that , since @xmath50 is a directed graphs with neither sinks nor sources , at every vertex @xmath177 there are at least one incoming and one outgoing edge in @xmath178 .",
    "we then argue exactly as in proposition [ prelie2ins ] . in the composition",
    "@xmath179 if the subgraph @xmath180 has nontrivial intersection with both @xmath124 and @xmath181 , then it must intersect @xmath50 . then the conditions on the orientations imply that @xmath182 can not have only incoming edges in @xmath183 , which contradicts the orientation requirements for @xmath182 .",
    "so the only compositions that give non - trivial terms are the ones where @xmath182 is fully contained in either @xmath124 ( in fact @xmath184 ) or in @xmath181 .",
    "we then write the composition above by separating out the sums for these two cases , and the rest of the argument follows exactly as in the previous proposition .",
    "we now consider insertion graph grammars @xmath120 as in definition [ igg2 ] and we consider the case where the left - hand - side of the production rules are corollas @xmath80 , though we do not require that they are all of the same valence , so that we include grammars that are ( mildly ) context - sensitive .",
    "graphs are not necessarily oriented , but we assume that they have a base vertex . for a graph @xmath10 and a vertex @xmath185",
    "we write @xmath186 for the subset of external edges of @xmath10 that are attached to the vertex @xmath9 .",
    "the condition on external edges in definition [ igg2 ] corresponds in this case to the requirement that the number of external edges @xmath187 attached to the base vertex @xmath122 is at least equal to the valence of @xmath80 .",
    "these external edges of @xmath123 are identified by the production rule with the half - edges of the corolla @xmath188 , where @xmath124 is the graph the production is applied to .",
    "the argument is then exactly as in proposition [ prelie1ins ] .",
    "the base vertex of a production @xmath189 is the base vertex @xmath126 of @xmath124    [ prelie4ins ] let @xmath120 be an insertion graph grammars @xmath120 as in definition [ igg2 ] , where all the production rules are of the form @xmath190 with @xmath191 and @xmath192 . assume the start graph @xmath45 of @xmath120 is also a corolla @xmath80 .",
    "the insertion operator @xmath193 defines a pre - lie structure on the vector space @xmath127 generated by the graphs in @xmath128 .",
    "we have @xmath194 @xmath195 in the first sum @xmath196 is @xmath187 since the base vertex @xmath122 of @xmath197 is the base vertex of @xmath123 .",
    "we then separate out the last sum of the second expression into the cases where @xmath198 or @xmath199 .",
    "we obtain , as in the previous cases , @xmath200    again we obtain an associated lie algebra @xmath143 .",
    "one can also similarly extend the case of gluing along oriented loops , by assigning orientations to the attached half - edges , with incoming / outgoing requirements as in proposition [ prelie2ins ] , or in the case of gluing along more general graphs @xmath50 with orientation requirements as in proposition [ prelie3ins ] , reformulated in terms of half - edges .",
    "these analogs of proposition [ prelie2ins ] and proposition [ prelie3ins ] are completely straightforward and are proved by essentially the same argument , so we will not state them explicitly here . within this setting , however , one can not further extend the construction to more general context - sensitive cases , beyond what we have seen in proposition [ prelie3ins ] , because the cases where the gluing data graph @xmath182 intersects both @xmath124 and @xmath181 in @xmath201 creates terms that do not cancel in the difference @xmath202 and that are not symmetric with respect to exchanging @xmath123 and @xmath135 . to see more precisely where the difficulty lies , we can write out the expression above , as before , in the form @xmath203 we can separate out , in the first sum the cases where @xmath182 is completely contained in @xmath124 or completely contained in @xmath123 , and where it intersects both graphs .",
    "the latter case , in general , can not be decomposed further , because it is not necessarily true that , if a certain graph @xmath182 is the gluing data of a production rule , subgraphs @xmath204 and @xmath205 would also occur in production rules .",
    "thus , the term involving subgraphs @xmath182 intersecting both @xmath124 and @xmath123 does not cancel in the difference between @xmath206 and @xmath207 and at the same time is not symmetric with respect to interchanging @xmath123 and @xmath135 , hence one would not obtain a pre - lie insertion operator .",
    "we conclude this section by discussing a special example , which we will return to in our application to feynman graphs .",
    "we denote by @xmath208 the graph consisting of a single edge @xmath209 , identified with the union of two half - edges @xmath210 glued together by an involution @xmath70 .",
    "let @xmath120 be an insertion graph grammars @xmath120 as in definition [ igg2 ] , with start graph @xmath45 and with production rules :    1 .",
    "@xmath211 , where the single edge graph @xmath208 is glued onto a pair @xmath28 of external half - edges of @xmath45 , 2 .",
    "@xmath212 , where the copy of @xmath45 in the right - hand - side of the production is glued to the one on the left - hand - side by matching the remaining external half - edge of @xmath208 to the half - edge @xmath95 to form a graph @xmath213 consisting of two copies of @xmath45 glued together along an edge .",
    "[ glueextedges ] let @xmath120 be an insertion graph grammar as above .",
    "then the insertion operator @xmath214 defines a pre - lie structure on the vector space @xmath127 spanned by the graphs in @xmath128 .",
    "it suffices to notice that , by the form of the production rules , in the composition @xmath154 the gluing of @xmath135 to @xmath215 happens along some of the external half - edges of @xmath215 .",
    "the previous gluing of @xmath123 to @xmath124 , in turn , glues some external half - edges of @xmath123 to some external half - edges of @xmath124 .",
    "thus , the remaining half - edges of @xmath215 are either in @xmath184 or in @xmath181 , where @xmath50 is the set of half - edges along which the gluing of @xmath123 to @xmath124 happened ( which are no longer external edges in @xmath215 ) .",
    "this suffices then to get the pre - lie condition , exactly as in the cases discussed previously .",
    "we will see in  [ feynsec ] below that this provides a different way of constructing of lie algebras of feynman graphs , which is not equivalent to the insertion lie algebra of @xcite , @xcite .",
    "more notably , it shows that the set of feynman graphs of a given quantum field theory is a graph language in the sense of the theory of formal languages .",
    "we now consider the case of insertion - elimination graph grammars , as in definitions [ iegg1 ] and [ iegg2 ] .",
    "let @xmath120 be an insertion - elimination graph grammar as in definition [ iegg2 ] .",
    "we assume the following hypotheses :    1 .   in all the production rules",
    "@xmath103 the graph @xmath48 is connected and we have @xmath216 , a set of flags ( half - edges ) , with @xmath217 2 .",
    "all the graphs in @xmath128 are oriented and in all production rules the half - edges in @xmath50 are incoming to both @xmath48 and @xmath49 .",
    "[ iegglie ] let @xmath120 be an insertion - elimination graph grammar satisfying the two conditions above .",
    "then the insertion operator @xmath218 is a pre - lie operator .    with the notation @xmath219",
    ", we have @xmath220 with @xmath221 and @xmath222 , @xmath223 , and with @xmath224 , @xmath225 and @xmath226 .",
    "since all the external edges of @xmath135 are glued to flags of @xmath123 , in the identification along @xmath226 , we have @xmath227 .",
    "when composing in the opposite order , we have @xmath228 with @xmath221 , @xmath222 , @xmath229 , and with @xmath230 , @xmath231 , @xmath226 .",
    "if the graph @xmath90 intersects nontrivially both @xmath232 and @xmath123 , then by connectedness @xmath233 , but the orientation conditions on the edges of @xmath50 and of @xmath182 are incompatible , so @xmath90 must be contained in either @xmath234 or in @xmath123 .",
    "we then obtain @xmath235 which is symmetric in exchanging @xmath123 and @xmath135 .",
    "we obtain an associated lie algebra @xmath143 .      in the previous sections we have shown that one can associate to certain classes of graph",
    "grammars an insertion lie algebra , that behaves very similarly to the insertion lie algebra of quantum field theory of @xcite , @xcite .",
    "it is then natural to ask whether the insertion lie algebra of quantum field theory is itself obtained from a graph grammar via the same procedure discussed above .",
    "this is _ not _ the case , because it would violate the property that graph grammars have a _ finite _ number of production rules .",
    "in fact , the lie algebra of feynman graphs is generated by the primitive elements of the hopf algebra .",
    "we would like to obtain all 1pi feynman graphs of the theory from a graph grammar that has a single start graph @xmath45 and a finite number of production rules @xmath103 , in such a way that the lie bracket @xmath144 $ ] of the lie algebra of quantum field theory would agree with the lie bracket defined by the graph grammar , @xmath236 = \\sum_{g_l\\subset g_1 } p(g_l , h , g_2)(g_1 ) - \\sum_{g_l\\subset g_2 } p(g_l , h , g_1)(g_2).\\ ] ] for this to be the case , we see that we would need a production rule for each insertion of a primitive graph @xmath10 of the hopf algebra of the theory into a vertex with valence equal to the number of external edges of @xmath10 .",
    "since there are infinitely many primitive graphs , this would violate the requirement that the graph grammar has only finitely many production rules .",
    "we will see in  [ feynsec ] that , despite this negative result , the feynman graphs of a given quantum field theory are a graph language , obtained from a graph grammar with finitely many production rules . these graph grammars in turn define lie algebras , by the procedure discussed in the previous sections , which are in general not equivalent to the insertion lie algebra of @xcite , @xcite .",
    "motivated by the insertion lie algebra of quantum field theory , @xcite , @xcite , we have shown in the previous section that , under certain conditions on the production rules , one can associate lie algebras to graph grammars . in this section , we return to the motivating example of feynman graphs and we show that the feynman graphs of certain quantum field theories are examples of graph languages .",
    "our generative description of feynman graphs in terms of graph grammars can be seen as  reading in reverse \" the procedure described in @xcite , @xcite , that generates all feynman graphs starting with the vacuum bubbles ( no external edges ) and progressively cutting internal edges into pairs of external half - edges .",
    "we first analyze the example of the @xmath237-theory .",
    "this is the scalar quantum field theory with ( euclidean ) lagrangian density @xmath238 the feynman graphs of this theory have all vertices of valence four .",
    "more precisely , we should also include valence two vertices that correspond to the mass and kinetic terms , but we will not mark them explicitly in the diagrams .",
    "[ phi4gg ] the feynman graphs of the @xmath237-theory are the elements of the graph language @xmath129 generated by a graph grammar @xmath120 as in proposition [ glueextedges ] , with start graph @xmath45 given by a @xmath239-valent corolla , and two production rules : one of the form @xmath211 , which glues together two external edges of @xmath45 and one of the form @xmath212 , which glues together two copies of @xmath45 along an edge . at each stage in the application of one of the production rules , the external edges of the resulting graph are marked either with a terminal or with a non - terminal symbol .    whenever the external edges of a graph in @xmath128 are marked by non - terminal symbols one can continue to apply production rules to them , while if all the external edges are marked by terminals the resulting graph is in @xmath129 .",
    "thus , a graph is in @xmath129 if either it has no more external edges , in which case it is a vacuum bubble of the @xmath237-theory , or if all the external edges are marked by terminals , in which case , it can be identified with the result of cutting a number of edges of a vacuum bubble into half edges .",
    "this produces all feynman graphs of the @xmath237 theory , @xcite .",
    "the production procedure is illustrated in figure [ phi4gg ] .",
    "the graph in the upper left - hand corner is @xmath45 for this theory .",
    "single arrows indicate the first type of production gluing external edges to make a loop .",
    "double arrows indicate the second type of production joining base graphs along an edge to make a new graph with no loops .",
    "the graphs with no external edges are represented on the right , while the graphs with as many external edges as possible are on the left .",
    "note that the latter type of graphs are trees .",
    "t is clear that for this theory , any allowed feynman graph can be transformed into a tree such as the ones above .",
    "consider the graphs on one internal vertex .",
    "they all can be constructed by gluing the edges of the base graph @xmath45 , via repeated application of the production rule represented by the single arrows .",
    "a similar statement can be made of the graphs on two internal vertices , except that , after cutting all edges into pairs of half edges , one is now left with a disjoint union of two copies of the base graph @xmath45 . in general ,",
    "any ( connected ) @xmath237 graph with @xmath240 valence @xmath239 vertices can be constructed by gluing together pairs of half - edges , starting from @xmath240 copies of @xmath45 , hence by repeated applications of the two types of production rules .",
    "[ phikgg ] the feynman graphs of the @xmath241-theory are the elements of the graph language @xmath129 generated by a graph grammar @xmath120 as in proposition [ glueextedges ] , with start graph @xmath45 given by a @xmath240-valent corolla , and two production rules : one of the form @xmath211 , which glues together two external edges of @xmath45 and one of the form @xmath212 , which glues together two copies of @xmath45 along an edge . at each stage in the application of one of the production rules , the external edges of the resulting graph are marked either with a terminal or with a non - terminal symbol .",
    "let @xmath10 be a connected graph of the @xmath241 theory .",
    "thus , all vertices @xmath185 have valence @xmath244 .",
    "we neglect for the moment the possible presence of valence @xmath245 vertices associated to the kinetic and mass terms in @xmath246 .",
    "consider all possible ways of cutting internal edges , so that they are replaced by a pair of external half - edges , that leave the graph connected .",
    "the number of possible such cuts is the degree of edge - connectedness of the graph .",
    "stop when no further such cuts remain .",
    "if we denote the resulting graph by @xmath90 , then it is clear that @xmath10 is obtained from @xmath90 by repeatedly applying the first production rule .",
    "every connected graph has a decomposition into a tree with insertions at the vertices of 1pi graphs ( one particle irreducible , also known as 2-edge - connected ) that have a number of external edges equal to the valence of the tree vertex . by repeatedly cutting non - disconnecting edges , and using this decomposition ,",
    "it is clear that the resulting graph @xmath90 is a tree .",
    "since all the vertices of @xmath90 have valence @xmath244 , the tree can be constructed by repeated application of the second production rule .",
    "one can consider also the presence of valence two vertices , with each gluing of a copy of @xmath208 in the production rules involving a valence two vertex inserted in the middle of an edge connecting two valence @xmath240 vertices , and the argument remains essentially the same .",
    "the difference between valence two vertices coming from the kinetic and the mass terms can be taken care of by using two different terminal symbols labeling the vertices .",
    "[ phikgg ] the feynman graphs of a scalar field theory with interaction polynomian @xmath248 as in of degree @xmath249 are the elements of the graph language @xmath129 generated by a graph grammar @xmath120 as in proposition [ glueextedges ] , with start graph @xmath45 given by a @xmath240-valent corolla , where @xmath240 is the smallest term in with @xmath250 and three production rules :    1 .",
    "the first kind of production rules is of the form @xmath211 , which glues together two external edges of @xmath45 .",
    "the second kind of production rule @xmath251 glues a copy of @xmath208 to the start graph @xmath45 by identifying one half edge of @xmath208 with one of the half - edges of @xmath45 and leaving the other half edge @xmath95 as a new external edge , thus creating a corolla of valence @xmath252 . if @xmath253 the vertex of the resulting graph @xmath254 can be labeled by either a terminal or a nonterminal symbol , if @xmath255 it is labeled by a nonterminal symbol .",
    "production rules @xmath256 can be further applied to previously produced corollas @xmath257 with vertex labeled by nonterminals , until @xmath258 : in this case the vertex in the resulting @xmath259 can only be labelled by a terminal .",
    "3 .   the third kind of production rules @xmath260 , which glues together along an edge two corollas @xmath261 and @xmath262 produced by the previous type of production rules .",
    "the argument is similar to the previous case : one starts from an arbitrary connected feynman graph @xmath10 of the theory and performs the maximal number of cuts of internal edges into pairs of external half - edges that leaves the graph connected .",
    "the only difference in the argument is that the resulting graph @xmath90 is now a tree with vertices of valences ranging among the values @xmath263 for which @xmath250 in .",
    "these are then obtained by repeated application of the production rules of the second and third type that produce corollas of the right valences and glue them together along edges to form the tree @xmath90 .",
    "this theory has two different propagators for the fields @xmath266 and @xmath267 , which one represents by drawing straight edges for the @xmath266-propagator and wavy edges for the @xmath267-propagator .",
    "the cubic interaction terms implies that the feynman graphs have vertices of valence @xmath268 with two straight and one wavy external half - edges .",
    "the feynman graphs of this theory were analyzed in @xcite , with @xmath266 representing fermions and @xmath267 the photon .",
    "note that in this theory edges representing photons are always internal , unlike what happens in quantum electrodynamics , where photons can be external , @xcite .",
    "[ phi2agg ] the feynman graphs of the @xmath265-theory are the elements of the graph language @xmath129 generated by a graph grammar @xmath120 as in proposition [ glueextedges ] .",
    "the start graph @xmath45 has two trivalent vertices , one internal wavy edge connecting them , and four external straight half - edges .",
    "there are two kinds of production rules : one of the form @xmath211 , which glues together two external edges of @xmath45 and one of the form @xmath212 , which glues together two copies of @xmath45 along an external edge . at each stage in the application of one of the production rules , the external edges of the resulting graph are marked either with a terminal or with a non - terminal symbol .    the graph grammar @xmath120 is illustrated in figure [ phi2agg ] .",
    "notice that , if photon edges were allowed to be external , then the argument would be the same as in the @xmath269-theory , except that the labeling of the edges as bosonic or fermionic must be taken into account when inserting the base graph in the tree .",
    "the fact that we require bosonic edges to be internal means that these edges can not be cut in the process that leads from @xmath10 to @xmath90 .",
    "since all vertices in @xmath10 have valence @xmath268 with two fermion and one boson line , after all the internal fermion lines are cut , one still obtains a tree @xmath90 , which we now view as being formed out of repeated application of the second production rule applied to the start graph .",
    "the properties of external and internal edges of the @xmath265-theory discussed in @xcite are reflected here in the fact that , in the production rules , it is only possible to join base graphs along fermion edges .",
    "the fact that photon edges are only internal is taken into account by the choice of the start graph having two vertices instead of one , with one internal bosonic edge .",
    "* fix @xmath270 .",
    "this is the number of distinct conditions . *",
    "fix @xmath271 .",
    "this is the number of edge types .",
    "let @xmath272 where @xmath273 is 0 if type @xmath274 edges can not be external and 1 otherwise .",
    "* for each @xmath275 : * * let @xmath276 where @xmath277 for all @xmath278 ( the edge type ) and with @xmath279 the number of edges of type @xmath274 allowed by this condition at each vertex .",
    "* * let @xmath280 be the star graph with edges determined by @xmath281 * let @xmath10 be a connected graph that satisfies the conditions of @xmath9 and each of the @xmath281 .",
    "* there is a sequence of production rules that glue edges of finitely many copies of the graphs @xmath280 to make @xmath10 . *",
    "any @xmath10 that satisfies these conditions can be constructed from these initial graphs using the production rules . * in order to have a single start graph one needs to add further production rules that derive higher valence star graphs @xmath280 from lower valence ones , marking the vertex with a terminal label when the process should stop .",
    "a.  connes , d.  kreimer , _ renormalization in quantum field theory and the riemann - hilbert problem . i. the hopf algebra structure of graphs and the main theorem _ , communications in mathematical physics 210 ( 2000 ) , no .",
    "1 , 249273 .",
    "h.  kleinert , a.  pelster , b.  kastening , m.  bachmann , _ recursive graphical construction of feynman diagrams and their multiplicities in @xmath237 and in @xmath265 theory _ , phys.rev .",
    "e62 ( 2000 ) 15371559 .",
    "manin , _ infinities in quantum field theory and in classical computing : renormalization program_. in  programs , proofs , processes \" , 307316 , lecture notes in computer science , vol .",
    "6158 , springer , 2010 .",
    "g.  rozenberg , _ an introduction to the nlc way of rewriting graphs _ , in  graph - grammars and their application to computer science \" , pp.5566 , lecture notes in computer science , vol . 532 , springer , 1990 ."
  ],
  "abstract_text": [
    "<S> graph grammars extend the theory of formal languages in order to model distributed parallelism in theoretical computer science . </S>",
    "<S> we show here that to certain classes of context - free and context - sensitive graph grammars one can associate a lie algebra , whose structure is reminiscent of the insertion lie algebras of quantum field theory . </S>",
    "<S> we also show that the feynman graphs of quantum field theories are graph languages generated by a theory dependent graph grammar . </S>"
  ]
}