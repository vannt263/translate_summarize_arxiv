{
  "article_text": [
    "an indication that certain evolution equations might have remarkable mathematical properties came with the discovery of an infinite number of conservation laws for the korteweg - de vries ( kdv ) equation , @xmath0 .",
    "the conserved quantities @xmath1 and @xmath2 , corresponding to conservation of momentum and energy , respectively , were long known , and whitham ( 1974 ) had found a third one , @xmath3 which corresponds to boussinesq s moment of instability .",
    "zabusky and kruskal found a fourth and fifth .",
    "however , the search for additional conserved densities was halted due to a mistake in their computations .",
    "miura eventually continued the search and , beyond the missing sixth , found an additional three conserved densities ( newell , 1983 ) .",
    "it became clear that the kdv equation had an infinite sequence of conservation laws , later proven to be true .",
    "the existence of an infinity of conserved densities was an important link in the discovery of other special properties of the kdv equation ( zakharov , 1990 ) .",
    "it led , for example , to the construction of the miura transformation , which connects the solutions of the kdv and modified kdv equations .",
    "consequently , the famous lax pair was found , which associates a couple of linear equations to the kdv equation . from that , the inverse scattering technique ( ist ) for direct linearization of integrable equations was developed , and it was then shown that the kdv equation , and many other integrable equations , admit bi - hamiltonian structures .",
    "there are several motives to construct conserved densities of partial differential equations ( pdes ) explicitly .",
    "the first few conservation laws have a physical interpretation .",
    "additional ones may facilitate the study of both quantitative and qualitative properties of solutions ( scott _ et al . _ , 1973 ) .",
    "furthermore , the existence of a sequence of conserved densities ( perhaps with gaps ) predicts integrability .",
    "yet , the non - existence of conserved quantities does not preclude integrability .",
    "there are indeed equations , viz .",
    "dissipative equations , with only _",
    "one _ conserved density , which can be directly integrated .",
    "the most notable is the burgers equation , which can be transformed into the _ linear _ heat equation via the cole - hopf transformation ( zakharov , 1990 ) .",
    "yet another compelling argument to explicitly construct conserved densities relates to the numerical solution of pdes .",
    "it is desirable that the semi - discretization conserves the discrete analogues of the continuous conserved quantities . in particular",
    ", the conservation of a positive definite quadratic quantity may prevent the occurrence of nonlinear instabilities in the numerical scheme .",
    "the use of conservation laws in solving the boussinesq equation numerically has been illustrated in hickernell ( 1983 ) .",
    "sanz - serna ( 1982 ) describes a scheme for the integration in time of pdes , which is explicit and capable of conserving discretized quadratic functionals .",
    "since @xmath4 are conserved densities for the kdv equation , a discrete scheme should have conservation of momentum , @xmath5 and energy @xmath6}^2.$ ] in sanz - serna ( 1982 ) , an explicit self - adaptive conservative scheme with conservation of energy and momentum is given .",
    "conservation of energy implies boundedness of the solutions , and therefore obviates the occurrence of any blowup phenomena . for more details about numerical applications of conservation laws",
    "see leveque ( 1992 ) .",
    "we present a new symbolic algorithm for computing closed - form polynomial - type conservation laws for systems of nonlinear evolution equations .",
    "our algorithm is also applicable to wave equations , viz .",
    "the boussinesq equation , provided that the pde ( of higher - order in time ) can be written as a system of evolution equations ( first order in time ) .",
    "in contrast to fairly complicated algorithms designed by bocharov ( 1991 ) , gerdt and zharkov ( 1990 ) , and gerdt ( 1993 ) , we introduce an algorithm that is based in part on ideas presented in hereman and zhuang ( 1995 ) , ito ( 1994 ) , and ito and kako ( 1985 ) , kruskal _ et al . _ ( 1970 ) , kodama ( 1985 ) , miura _",
    "( 1968 ) , verheest and hereman ( 1995 ) , and willox _ et al . _",
    "our algorithm has the advantage that it is fairly straightforward to implement in any symbolic language .",
    "we also present a software package * condens.m * , written in _ mathematica _",
    "syntax , which automates the tedious computation of closed - form expressions for conserved densities and fluxes .    in section 2 , we give the definitions of conservation law , density and flux .",
    "we also state a theorem from calculus of variations about the euler - lagrange equations , which will play a role in our algorithm .",
    "the remainder of the section is devoted to a detailed exposition of the algorithm , which was implemented in _ mathematica _ , and successfully tested on many well - known evolution systems from soliton theory .    in section 3 ,",
    "we address applications of our program * condens.m*. in particular , we show how it could be used in a search for integrable fifth - order evolution equations of kdv type , where we retrieved all the known integrable cases .",
    "we carried out a similar computer search for a parameterized class of seventh - order evolution equations .",
    "more examples and test results are presented in section 4 . in section 5",
    ", we describe the usage of our code , and indicate its capabilities and limitations . in section 6 , a comparison with other programs is given . also , several ongoing projects are briefly addressed .",
    "for simplicity , consider a single pde , @xmath7 where @xmath8 denotes time , @xmath9 is the spatial variable , and @xmath10 is the dependent variable . a _",
    "conservation law _ is of the form @xmath11 which is satisfied for all solutions of ( [ pde ] ) .",
    "the functional @xmath12 is the _ conserved density _ , @xmath13 is the associated _",
    "flux_. both are , in general , functions of @xmath14 and its partial derivatives with respect to @xmath15 furthermore , @xmath16 denotes the total derivative with respect to t ; @xmath17 the total derivative with respect to @xmath18 ( ablowitz and clarkson , 1991 ) .",
    "specifically , @xmath19 is a _ local _ conserved density if @xmath19 is a local functional of @xmath1 , i.e. if the value of @xmath19 at any @xmath18 depends only on the values of @xmath1 in an arbitrary small neighborhood of @xmath15 if @xmath20 is also local , then ( [ conslaw ] ) is a _ local conservation law_. in particular , if @xmath19 is a polynomial in @xmath1 and its @xmath18 derivatives , and does not depend explicitly on @xmath18 or @xmath21 , then @xmath19 is called a _ polynomial _ conserved density .",
    "if @xmath20 is also such a polynomial , then ( [ conslaw ] ) is called a _ polynomial conservation law_. there is a close relationship between constants of motion and conservation laws .",
    "indeed , for polynomial - type @xmath19 and @xmath20 , integration of ( [ conslaw ] ) yields @xmath22 provided that @xmath20 vanishes at infinity . for ordinary differential equations ,",
    "the @xmath23 s are constants of motion .    the most famous evolution equation from soliton theory , the kdv equation ( miura , 1968 ) , @xmath24 is known to have infinitely many polynomial conservation laws .",
    "the first three are @xmath25    the first two express conservation of momentum and energy , respectively .",
    "they are easy to compute by hand .",
    "the third one , less obvious and requiring more work , corresponds to boussinesq s moment of instability ( newell , 1983 ) .",
    "observe that the kdv equation and its densities @xmath26 and @xmath27 are all invariant under the scaling symmetry @xmath28 where @xmath29 is a parameter .",
    "stated differently , @xmath1 carries the weight of two derivatives with respect to @xmath30 denoted symbolically by @xmath31    scaling invariance , which is a special lie - point symmetry , is an intrinsic property of many integrable nonlinear pdes .",
    "our algorithm exploits this idea in the construction of conserved densities .",
    "we introduce a tool from calculus of variations : the euler operator , which is very useful for testing if an expression is a total derivative ( ito and kako , 1985 ; olver , 1986 ) , without having to carry out any integrations by parts .",
    "[ thm5 ] if @xmath32 , then @xmath33 if and only if @xmath34 , where @xmath35 .    in this theorem , for which a proof can be found in olver ( 1986 , pp .",
    "252 ) , @xmath36^{t},$ ] @xmath37^t , \\ ; $ ] @xmath38^{t } , $ ] with @xmath39 for transpose , and where @xmath40 is the _ euler operator _ ( or variational derivative ) .",
    "we will use this theorem in our algorithm .",
    "we now describe our algorithm to compute polynomial conservation laws ( [ conslaw ] ) for systems of nonlinear evolution equations of order @xmath41 @xmath42 where @xmath43^t\\/$ ] , or , component - wise , @xmath44 where @xmath45 and all components of @xmath46 depend on @xmath18 and @xmath47 our goal is to compute the densities @xmath48 and the fluxes @xmath49 of order @xmath50 and @xmath51 , respectively . there will be no restriction on the order @xmath52 of the system ( [ multisys ] ) , or on its degree of nonlinearity .",
    "but , all the components of @xmath53 must be polynomial in their arguments .",
    "furthermore , we only consider systems of evolution equations in @xmath21 with one spatial variable @xmath18 .    in our algorithm",
    ", we tacitly assume that we have an evolution equation for every dependent variable @xmath54 . in cases where there are more dependent variables than equations",
    ", one can always add trivial evolution equations @xmath55 further on , we use the notation @xmath56 instead of @xmath57 because it is closer to the notation in our code .    *",
    "step 1@xmath58determine the weights of variables and parameters * we define the _ weight _ of a variable as the number of partial derivatives with respect to @xmath18 the variable carries , and the _ rank _ of a term as the total weight in terms of partial derivatives with respect to @xmath18 ( kruskal _ et al . _ , 1970 ; miura _ et al .",
    "_ , 1968 ) .",
    "the rank is assumed to be nonnegative and rational .    for the system ( [ givensystem ] ) , we first try to determine the weights ( scaling properties ) of all the variables .",
    "we assume that all terms in a particular equation have the same rank .",
    "we call this property _ uniformity in rank_. different equations in ( [ givensystem ] ) can have different ranks .",
    "having defined the weight of a variable in terms of @xmath59derivatives , we ( can ) pick @xmath60 where @xmath61 returns the weight of its argument .    for simple systems , in particular those with uniform rank , only the variables @xmath54 and @xmath62 have weights .",
    "however , to be able to handle more general systems , we allow for constant parameters to be introduced and also for these parameters to carry weights .",
    "the trick of introducing parameters with weights allows one to handle equations without uniform rank .",
    "let us assume that there are @xmath63 such parameters in the system , denoted by @xmath64 thus , the extended list of _ variables _ that carry weights is @xmath65 .",
    "weights must be nonnegative and rational , except for @xmath66 which may be positive , zero , or negative .",
    "more precisely , the weight of at least one @xmath54 must be positive ; the weights of the parameters @xmath67 must be nonnegative .",
    "we proceed with the following steps :    1 .",
    "take the @xmath68 equation in ( [ givensystem ] ) .",
    "denote the number of terms in the equation by @xmath69 2 .",
    "compute the rank @xmath70 of the @xmath71 term in the @xmath68 equation as follows : @xmath72 where @xmath73 returns the degree of nonlinearity of its argument , @xmath74 returns the number of partial derivatives with respect to its argument . for evolution equations",
    "@xmath75 is either zero or one .",
    "3 .   assuming uniformity in rank in the @xmath68 equation , form the linear system @xmath76 4 .",
    "repeat steps ( a ) through ( c ) for all of the equations in ( [ givensystem ] ) .",
    "gather the equations @xmath77 to form the global linear system @xmath78 6 .",
    "solve @xmath79 for the @xmath80 unknowns @xmath81 , @xmath82 and @xmath83 .",
    "if the solution of the system @xmath79 still has free , consider two cases :    1 .",
    "if two or more weights are undetermined , prompt the user to enter choices .",
    "2 .   if only one weight is free , say @xmath84 take the equations obtained in ( f ) , set their left hand sides equal to one , and solve them piece by piece for @xmath85 include the choice @xmath86 . for all choices for @xmath87 test : ( i )",
    "if @xmath87 is negative , increment it until it is positive ; ( ii ) reject @xmath87 if any other weight is negative .",
    "continue with the smallest integer value for @xmath87 if present , else take the smallest fractional value .",
    "this produces at most _ one _ positive value for the free weight , out of possibly infinitely many choices .",
    "if the algorithm fails , prompt the user to enter a value for @xmath85    * step 2@xmath58construct the form of the density * the second step involves the construction of the polynomial density with a prescribed rank @xmath88 all the terms in the density @xmath19 must have that same rank @xmath89 . since we may introduce parameters with weights , the fact that the density will be a sum of monomials of uniform rank does not",
    "necessarily imply that the density must be uniform in rank with respect to the dependent variables .",
    "note that the rank @xmath89 can differ from any of the ranks of the equations in ( [ givensystem ] ) .",
    "the rank @xmath89 must be positive and rational .",
    "let @xmath90 be the sorted list of all the variables with positive weights , including the parameters @xmath91 but excluding @xmath92 the variables are ordered according to descending weights : @xmath93 is the largest weight , @xmath94 is the smallest .",
    "the following procedure is used to determine the form of the density of rank @xmath95    1 .",
    "form all monomials of rank @xmath89 or less by taking combinations of the variables in @xmath96 recursively , form sets consisting of ordered pairs . in each pair",
    ", the first component has a specific combination of different powers of the variables , the second component has the weight of the first component . set @xmath97 and proceed as follows : * for * @xmath98 through @xmath99 * do * * * for * @xmath100 through @xmath101 * do * * * form @xmath102 where @xmath103 is the number of pairs in @xmath104 @xmath105 @xmath106 @xmath107 is the @xmath108 ordered pair in @xmath104 and @xmath109 is the maximum allowable power of @xmath110 * set @xmath111 2 .",
    "set @xmath112 note that @xmath113 has all possible combinations of powers of the variables that produce rank @xmath89 or less .",
    "3 .   introduce partial derivatives with respect to @xmath18 . for each pair",
    "@xmath114 in @xmath113 , apply @xmath115 to the term @xmath116 , provided @xmath117 is integer .",
    "this introduces just enough partial derivatives with respect to @xmath18 , so that all the pairs retain weight @xmath88 gather in a set @xmath118 all the terms that result from computing the various @xmath119 4 .",
    "remove those terms from @xmath118 that can be written as a total derivative with respect to @xmath18 , or as a derivative up to terms kept prior in the set .",
    "call the resulting set @xmath120 which consists of the _ building blocks _ of the density @xmath19 with desired rank @xmath88 5 .",
    "if @xmath121 has @xmath122 elements , then their linear combination will produce the polynomial density of rank @xmath88 therefore , @xmath123 where @xmath124 denotes the @xmath68 element in @xmath120 and @xmath125 are numerical coefficients , still to be determined .",
    "* step 3@xmath58determine the unknown coefficients in the density * recall that a conservation law is of the form @xmath126 or @xmath127 which means that @xmath128 must be the negative of the @xmath59derivative of a functional @xmath129    after computation of @xmath130 remove all @xmath131 from the expression , using the evolution equations in ( [ givensystem ] ) .",
    "the resulting expression for @xmath128 must be a total @xmath59derivative of some expression . to verify this we use theorem [ thm5 ] and apply the euler operator .",
    "we require that the resulting euler - lagrange equations vanish identically by the appropriate choice of the coefficients @xmath132 this leads to a _ linear _ system for the @xmath133 the system must be analyzed and solved for the unknown @xmath132 in general , the procedure is as follows :    1 .",
    "compute @xmath128 and replace all @xmath134 and @xmath135 using the evolution equations in ( [ givensystem ] ) .",
    "2 .   the resulting expression , called @xmath136 , must equal @xmath137 for some functional @xmath129 apply to @xmath136 the euler operator @xmath138 from theorem [ thm5 ] .",
    "if @xmath136 is completely integrable no terms will be left , i.e. @xmath139 . if terms remain , set them equal to zero and form the linear system for the @xmath140 , denoted by @xmath141 3 .   depending on whether or not there are parameters in @xmath142 two cases",
    "occur : * if the only unknowns in @xmath143 are @xmath125 , solve @xmath143 for the @xmath125 .",
    "substitute the ( non - empty ) solution into the expression of @xmath19 to obtain its final form . * if in addition to the coefficients @xmath125 there are parameters @xmath67 in @xmath142 then determine the conditions on these parameters , so that a density in the given rank exists for at least some @xmath125 nonzero .",
    "these _ compatibility conditions _ assure that the system @xmath143 has non - trivial solutions .",
    "obviously , all @xmath125 equal to zero would give the trivial ( zero ) density .",
    "solving the compatibility conditions may lead to different densities of the same rank , corresponding to different choices of the parameters .",
    "thus , generating the compatibility conditions enables one to filter out all the cases for which there exists a nontrivial density of given rank .",
    "let @xmath144 @xmath145 @xmath146 be the set of all the coefficients that appear in the density .",
    "in order to determine all possible compatibility conditions , proceed as follows : under the assumption that no @xmath67 in @xmath147 is _ zero _ , analyze the system @xmath148 first determine the coefficients @xmath125 that always must be zero .",
    "exclude these @xmath125 from @xmath149 and set @xmath150 , where @xmath151 is the smallest index of the @xmath152 that remain in @xmath149 . *",
    "while * @xmath153 * do * : * * for the building block @xmath124 with coefficient @xmath125 to appear in @xmath19 , one needs @xmath154 therefore , set @xmath155 and eliminate all the other @xmath152 from @xmath141 this gives compatibility conditions consistent with the presence of the term @xmath156 in @xmath157 * if * @xmath147 becomes inconsistent , or compatibility conditions require some of the parameters to be zero , * then * : * * * @xmath125 must be zero .",
    "hence , set @xmath158 and @xmath159 where @xmath151 is the smallest index of the @xmath160 that remain in @xmath161 + * else * : * * * analyze the compatibility conditions and for each resulting branch ; solve the system @xmath143 for @xmath152 , and substitute the solution into the expression of @xmath19 to obtain its final form .",
    "then , collect those @xmath160 which are zero for _ all _ of the branches into a set @xmath162 since the @xmath125 in @xmath163 might not have occurred in any of the densities yet , set @xmath164 and @xmath159 where @xmath151 is the smallest index of the @xmath152 that are still in @xmath165 4 .",
    "compute @xmath166 via integration by parts .",
    "the three examples below illustrate the algorithm . in the first example",
    ", we show steps 1 and 2 in detail .",
    "the second and third example illustrate details of step 3 .",
    "the examples 4.1 and 4.2 illustrate what happens if there are free weights .    the wave equation ,",
    "@xmath167 was proposed by boussinesq to describe surface water waves whose horizontal scale is much larger than the depth of the water ( ablowitz and clarkson , 1991 ; hickernell , 1983 ) .",
    "conservation laws play a key role in the study of ( [ bouseq ] ) for they can be used to prove that solutions are bounded for certain sets of initial conditions ( hickernell , 1983 ) , or , conversely , to prove that solutions fail to exist after a finite time .",
    "for computing conservation laws , we rewrite ( [ bouseq ] ) as a system of first - order equations , @xmath168 where @xmath169 is an auxiliary dependent variable .",
    "it is easy to verify that the terms @xmath170 and @xmath171 in the second equation do not allow for uniformity in rank . to circumvent the problem we use a trick",
    ": we introduce an auxiliary parameter @xmath172 with ( unknown ) weight , and replace ( [ boussys1 ] ) by @xmath173 or , in our notation @xmath174 using the procedure in step 1 , we obtain the weights by first computing @xmath175 r_{2,1 } & = & 1 \\ ; w(\\frac{\\partial{}}{\\partial{t } } ) + 1   \\ ; w(u_2 ) , & \\quad\\quad &   r_{2,2 } & = & 1 + 1 \\ ; w(u_1 ) + 1 \\ ; w(\\beta ) , \\\\[.6 mm ] r_{2,3 } & = & 1 + 2 w(u_1 ) , & \\quad\\quad &   r_{2,4 } & = & 3 + 1 \\ ; w(u_1 ) ,   \\end{array}\\ ] ] then forming the systems @xmath176 and , finally , solving @xmath79 for @xmath177 and @xmath178 this yields @xmath179 hence , the scaling properties of ( [ prgboussys1 ] ) are such that @xmath180 which expresses that ( [ prgboussys1 ] ) is invariant under the scaling symmetry @xmath181 let us construct the form of the density with rank @xmath182 . here , @xmath183 hence , @xmath184 and @xmath185 and , obviously , @xmath186 we follow the procedure outlined in step 2 :    1 .   for @xmath187 : @xmath188 thus , with @xmath189 where @xmath190 we obtain @xmath191 for @xmath192 : @xmath193 so , with @xmath194 with @xmath195 we obtain @xmath196 for @xmath197 : we obtain @xmath198 since @xmath199 @xmath200 for @xmath201 : @xmath202 therefore , @xmath203 hence , @xmath204 for @xmath205 : we introduce possible powers of @xmath206",
    "so , @xmath207 and @xmath208 2 .",
    "set @xmath209 .",
    "3 .   next , we apply derivatives to the first components of the pairs in @xmath113 .",
    "computation of @xmath210 for each pair of @xmath113 gives @xmath211 note that in this case all values for @xmath210 are integer . gathering the terms that come from applying the indicated number , @xmath212 of partial derivatives with respect to @xmath18 , gives @xmath213 4 .",
    "removing from @xmath118 the constant terms , and the terms that can be written as a @xmath59derivative , or as a @xmath59derivative up to terms retained earlier in the set @xmath121 , yields @xmath214 5 .   combining these building blocks , the form of the density with rank 6 follows",
    "; @xmath215    using step 3 of the algorithm ( illustrated in detail in the next example ) we compute the density of rank 6 in the original variables : @xmath216 analogously , we computed densities of rank @xmath217 the first four densities of ( [ boussys2 ] ) are : @xmath218 after substitution of @xmath219 into the densities above , one gets the densities of ( [ boussys1 ] ) even though initially this system was not uniform in rank .",
    "this trick , which involves the introduction of one or more extra parameters with weights , can always be attempted if any equation in ( [ givensystem ] ) lacks uniformity in rank .",
    "hirota and satsuma ( 1981 ) proposed a coupled system of kdv equations , @xmath220 where @xmath221 is a nonzero parameter . system ( [ hirsatpar ] ) describes interactions of two long waves with different dispersion relations .",
    "it is known to be completely integrable for @xmath222    in our notation , ( [ hirsatpar ] ) can be rewritten as @xmath223 which has scaling properties , @xmath224 and a density of rank 4 : @xmath225 thus far we used steps 1 and 2 of the algorithm .",
    "we now illustrate step 3 , which fixes the undetermined coefficients @xmath132    1 .",
    "compute @xmath128 and replace all the mixed derivatives @xmath226 by using ( [ prghirsatpar ] ) . then , @xmath227 2 .",
    "apply the euler operator to get the linear system for the coefficients @xmath228 and @xmath229 : @xmath230 3 .   obviously , @xmath231 and @xmath147 has one parameter , @xmath232 thus , we search for compatibility conditions : * set @xmath233 which gives @xmath234 as one of the solutions without any constraint on the parameter @xmath221 .",
    "since only @xmath235 one has @xmath236 and @xmath237 with @xmath238 . *",
    "set @xmath239 this leads to the compatibility condition @xmath240 and the solution @xmath241 since @xmath242 and , consequently , @xmath243 the procedure ends .",
    "therefore , one gets _ two densities _ of rank 4 , one without any constraint on @xmath244 one with a constraint . in summary :    * @xmath245 and * @xmath246 with compatibility condition @xmath247    a search for densities for ( [ hirsatpar ] ) of rank @xmath248 resulted in : * rank 2 : * there is no condition on @xmath232 one always has the density @xmath249 * rank 4 : * at this level , two branches emerge :    1 .   without condition on @xmath244",
    "one obtains @xmath250 2 .   for @xmath251 one",
    "has @xmath252 hence , for @xmath253 there is a second independent conserved density : @xmath254    * rank 6 : * there is no condition on @xmath232 one obtains @xmath255 * rank 8 : * the system has conserved density @xmath256 provided that @xmath257 + therefore , @xmath258 appears again as one tries to compute the density of rank 8 .",
    "this value of @xmath221 leads to the only integrable case in the parameterized system ( [ hirsatpar ] ) .",
    "for @xmath259 we also computed the density of * rank 10 * : @xmath260    ito ( 1982 ) proposed the coupled nonlinear wave equation ( ablowitz and clarkson , 1991 ) : @xmath261 which differs from the hirota - satsuma system in the interaction and dispersion terms for @xmath262 in the absence of @xmath263 system ( [ itosys ] ) reduces to the kdv equation .",
    "it is a hamiltonian system with infinitely many conservation laws .",
    "the scaling properties of the system ( [ itosys ] ) are @xmath264 and the first five densities are : @xmath265 @xmath266 to illustrate step 3 of the algorithm in more detail , we consider , @xmath267 which is a parameterized version of ( [ itosys ] ) .",
    "the form of the density of rank 6 is @xmath268 we continue with part ( b ) of step 3 . after applying the euler operator ,",
    "the linear system @xmath147 for the coefficients @xmath269 through @xmath270 is @xmath271 obviously , @xmath272 and @xmath147 has one parameter , @xmath232 thus , we start the search for compatibility conditions . from the sixth and eighth equations in @xmath147",
    "we conclude that @xmath273",
    ". therefore , replace @xmath274 by @xmath275 .",
    "* set @xmath276 and solve @xmath147 , which gives @xmath277 without any constraint on the parameter @xmath221 .",
    "now , @xmath278 and @xmath279 is replaced by @xmath280 with @xmath238 . *",
    "set @xmath239 this leads to an inconsistent system .",
    "thus , @xmath281 with @xmath282 .",
    "* set @xmath283 this implies that @xmath284 .",
    "hence , @xmath285 and the procedure ends .    in summary : @xmath286 without any constraint on @xmath221 .",
    "this is the same density as for ( [ itosys ] ) .",
    "computation of the density of rank 8 for ( [ itosyspar ] ) leads to the condition @xmath287 and density @xmath288 listed above . for @xmath289 system ( [ itosyspar ] ) reduces to the integrable case ( [ itosys ] ) .",
    "for systems with parameters , the algorithm described in section 2 can be used to find the necessary conditions on the parameters so that the systems might have densities of fixed rank .",
    "if for certain parameters a system has a large number of conserved densities , it is candidate to be completely integrable .",
    "this is the major application of the algorithm , and also of our mathematica program * condens.m*. the next examples illustrate the computer analysis of equations with parameters .",
    "consider the family of fifth - order kdv equations , @xmath290 where @xmath291 are nonzero parameters .",
    "special cases of ( [ kdv5par ] ) are well known in the literature ( fordy and gibbons , 1980 ; hirota and ito , 1983 ; kupershmidt and wilson , 1981 ; satsuma and kaup , 1977 ) .",
    "indeed , for @xmath292 equation ( [ kdv5par ] ) reduces to the lax ( 1968 ) equation .",
    "the sk equation , due to sawada and kotera ( 1974 ) , and also dodd and gibbon ( 1977 ) , is obtained for @xmath293 the kk equation , due to kaup ( 1980 ) and kupershmidt , corresponds to @xmath294 and the equation due to ito ( 1980 ) arises for @xmath295 .",
    "the scaling properties of ( [ kdv5par ] ) are such that @xmath296 using our algorithm , one easily computes the _ compatibility conditions _ for the parameters @xmath297 and @xmath298 so that ( [ kdv5par ] ) admits a polynomial conserved density of fixed rank .",
    "the results are : * rank 2 : * there are no conditions on the parameters . indeed ,",
    "equation ( [ kdv5par ] ) can be written as a conservation law with density @xmath299 * rank 4 : * the equation has density @xmath300 provided that @xmath301 only the lax and ito equations have this density . * rank 6 : * the condition @xmath302 guarantees the existence of the density of rank 6 : @xmath303 the lax , sk and kk equations have this density . *",
    "rank 8 : * there are two branches :    1 .",
    "if the condition ( [ kdv5con4 ] ) holds then @xmath304 this branch covers the lax and ito cases .",
    "if the condition @xmath305 holds , one has @xmath306 this branch covers the sk , kk and ito equations .    *",
    "rank 10 : * the conditions @xmath307 must hold in order to have the density @xmath308 only the lax equation has this density . naturally , the following question arises : what are the necessary conditions for the parameters @xmath309 and @xmath310 so that ( [ kdv5par ] ) might have infinitely many polynomial conservation laws ?",
    "* lax case : * the lax equation admits densities of rank 4 and 6 . combining the conditions ( [ kdv5con4 ] ) and ( [ kdv5con6 ] ) leads to @xmath311 fixing @xmath221 and @xmath172 in terms of @xmath312 ( the latter parameter can always be scaled to 1 ) .",
    "the conditions in ( [ lax5con ] ) lead to the lax equation , which is known to be completely integrable and has infinitely many conserved densities . *",
    "sk - kk cases : * the sk and kk equations admit densities of rank 6 and 8 .",
    "combining ( [ kdv5con6 ] ) and ( [ kdv5con82 ] ) gives @xmath313 the conditions in ( [ sk5con ] ) lead to the sk equation , and those in ( [ kk5con ] ) to the kk equation .",
    "both equations are indeed integrable and have an infinite sequence of conserved densities .",
    "* ito case : * the ito equation admits only three densities . combining ( [ kdv5con4 ] ) and ( [ kdv5con82 ] ) gives @xmath314 these conditions reduce ( [ kdv5par ] ) to the ito equation which is not integrable .",
    "using our code we were able to retrieve all known integrable cases in the family ( [ kdv5par ] ) , as given in e.g. mikhailov _ et al . _ ( 1987 ) .",
    "the lax equation comes as no surprise since it is the fifth - order symmetry of the kdv equation ( [ kdveq ] ) .",
    "our program confirms that , apart from the kdv equation , there are only two non - trivial integrable equations in the family ( [ kdv5par ] ) , namely the kk and sk equations . some of the conserved densities are listed in tables 1 and 2 . a proof for the gaps ( with period three ) between conservation laws for the sk and kk equations is given in sanders and wang ( 1996 ) .",
    "mathematical rigorous proofs for the existence of conservation laws of such evolution equations are given in sanders and wang ( 1995b , 1996 ) .",
    "consider the family of seventh - order kdv equations , @xmath315 where @xmath316 and @xmath317 are nonzero parameters .",
    "special cases of ( [ kdv7par ] ) are known in the literature . for @xmath318 , equation ( [ kdv7par ] )",
    "reduces to the sk - ito equation , due to sawada and kotera , and ito ( 1980 ) . for @xmath319 equation ( [ kdv7par ] ) belongs to the kdv hierarchy studied by lax ( 1968 ) . for @xmath320 @xmath321",
    "the equation belongs to the kaup - kupershmidt hierarchy ( bilge , 1992 ; gerdt , 1993 ) .",
    "the scaling properties of ( [ kdv7par ] ) are @xmath322 with * condens.m * , we computed the _ compatibility conditions _ for the parameters , so that conserved densities of fixed rank exist .",
    "the results are : * rank 2 : * @xmath323 if @xmath324 .",
    "true for both the lax and sk - ito equations .",
    "* rank 4 : * one has @xmath325 if @xmath326 only true for lax s equation .",
    "* rank 6 : * there are three branches . if one of the following three sets of conditions holds : @xmath327 then @xmath328 * rank 8 : * @xmath329 provided that @xmath330 combining the conditions for * rank 2 * through * rank 8 * yields @xmath331 in each case all of the parameters are fixed in terms of @xmath332 which could be scaled to 1 .",
    "the equations ( [ skito7con ] ) , ( [ lax7con ] ) , and ( [ third7con ] ) belong to the sk - ito , lax and kk hierarchies , respectively , and they are all integrable ( bilge , 1992 ) . some of the conserved densities for the sk - ito and lax equations are listed in table 3 for the choices @xmath333 and @xmath334 respectively .",
    "the conditions in ( [ third7con ] ) are satisfied for @xmath335 @xmath336 @xmath321 and the first five conserved densities of ( [ kdv7par ] ) , corresponding to the kk - hierarchy , then are : @xmath337 our results merely confirm the computer analysis of ( [ kdv7par ] ) carried out with reduce by bilge ( 1992 ) and gerdt ( 1993 ) .",
    ".conserved densities for sawada - kotera and lax 5th - order equations [ cols=\"^ , < , < \" , ]",
    "the nonlinear schrdinger ( nls ) equation ( ablowitz and clarkson , 1991 ) , @xmath338 arises as an asymptotic limit of a slowly varying dispersive wave envelope in a nonlinear medium , and as such has significant applications in nonlinear optics , water waves , and plasma physics .",
    "equation ( [ nlseq ] ) is known to be completely integrable , and together with the ubiquitous kdv equation ( [ kdveq ] ) , is one of the most studied soliton equations .",
    "there are two different ways to compute conserved densities for ( [ nlseq ] ) . * method 1*@xmath339 one can replace ( [ nlseq ] ) by @xmath340 where @xmath341 the scaling properties are such that @xmath342 we computed seven conserved densities with our program , of which the first six are : @xmath343 @xmath344 * method 2*@xmath339 one could consider @xmath345 and @xmath346 as independent variables and add the complex conjugate of ( [ nlseq ] ) to the nls equation . absorbing @xmath347 in the scale of @xmath21",
    "then yields : @xmath348 according to the procedure described at the end of step 1 in section 2.3 , our program computes the constraints @xmath349 and sets the left hand sides of the first two equal to one .",
    "then , it solves the equations @xmath350 piece by piece .",
    "both lead to the solution @xmath351 hence , the program continues with @xmath352 for rank 2 through rank 6 our program produces the conserved densities : @xmath353 @xmath354 obviously , these two sets of conservation laws are connected ( but not piece by piece ) via a simple change of variables : @xmath355    the second method has the advantage that the conserved densities are expressed in the original variable @xmath345 and it conjugate @xmath356 on the other hand , the conserved densities from method 2 may not be independent .      the non - dispersive long wave equations ( kupershmidt , 1985a ) @xmath357 is another example of an integrable system .",
    "we use this example to illustrate how our code determines a free weight .",
    "indeed , for ( [ longwavesys ] ) , @xmath358 with @xmath359 as the only free weight . as described in step 1 of the algorithm , the program sorts the right hand sides of these constraints , sets their left hand sides equal to one , and proceeds with solving @xmath360 one by one . that leads to the choices @xmath361 and @xmath362",
    "since the latter is zero it is incremented by one to get @xmath363 the first choice , @xmath364 gives @xmath365 the second choice , @xmath366 gives @xmath367 another valid choice ( not considered by our program ) would be @xmath368 @xmath369 and @xmath370 obviously , there are infinitely many fractional choices for @xmath371 recall that fractional weights and ranks are indeed allowed .",
    "the program continues automatically with the smallest integer choice , @xmath372 hence , @xmath373 or , symbolically , @xmath374 for rank one through eight we obtained the following densities : @xmath375 this set of densities remains the same for any valid choice of @xmath359 .",
    "indeed , we could have computed the conserved density @xmath376 with different choices of the free weight @xmath377 this @xmath19 has rank @xmath378 if we choose @xmath379 then @xmath380 has rank @xmath381 on the other hand , for the choice @xmath382 this density has rank @xmath383 in conclusion , choosing @xmath359 differently does not affect the form of the desired densities , provided the rank of @xmath19 is also adjusted appropriately . due to the superposition principle , the same argument can be made if @xmath19 is the sum of many terms , involving @xmath59derivatives of the dependent variables .",
    "consider the 3-component extension of the kdv equation ( kupershmidt , 1985b ) , @xmath384 which can be written as a bi - hamiltonian system with infinitely many conservation laws .",
    "the scaling properties indicate that @xmath385 and the first four densities for ( [ 3ckdv ] ) are : @xmath386 obviously , from @xmath387 we can see that @xmath388 and @xmath389 are independent conserved densities .",
    "we now describe the features , scope and limitations of our program * condens.m * , which is written in _",
    "syntax ( wolfram , 1996 ) .",
    "the program * condens.m * has its own _ menu _ interface with 30 samples of data files .",
    "users are assumed to have access to _ mathematica _ ( version 2.0 or higher ) .",
    "the code * condens.m * and the data files should be put in one directory .",
    "after _ mathematica _ comes up with ` in[1]:= ' , type    ....",
    "in[1]:= < < condens.m   ....    to read in the code * condens.m * and start the program . via its menu interface , the program will automatically prompt you for answers .    let us compute the density of rank 4 (",
    "provided it exists ) for the drinfeld - sokolov system ( ablowitz and clarkson , 1991 ) : @xmath390 since this example is in the menu , start the program and pick entry 25 from the menu .    ....    * * * menu interface * * *   ( page : 3 ) -------------------------------------------   21 ) mvdnls system ( d_mvdnls.m )   22 ) kaup system - parameterized ( d_pkaup.m )   23 ) kaup system ( d_kaup.m )   24 ) kaup - broer system ( d_broer.m )   25 ) drinfel'd - sokolov system ( d_soko.m )   26 ) dispersive long wave system ( d_disper.m )   27 ) non - dispersive long wave system ( d_nodisp.m )   28 ) 3-component kdv system ( d_3ckdv.m )   29 ) 2-component nonlinear schrodinger equation ( d_2cnls.m )   30 ) boussinesq system ( d_bous.m )   nn ) next page   tt ) your system   qq ) exit the program ------------------------------------------ enter your choice : 25 enter the rank of rho : 4 enter the name of the output file : drisokr4.o    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *              welcome to the mathematica program                            by unal goktas and willy hereman                         for the computation of conserved densities .",
    "version 3.0 released on february 24 , 1997                                copyright 1996                                * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           2 the normalized density rho[x , t ] is : u                                         2    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                              2          2 the corresponding flux j[x , t ] is :   2 u   u    - 2 u      + 4 u   u                                         1   2        2,x        2   2,xx    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *    result of explicit verification ( rho_t + j_x ) = 0    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ....    at the end of computation , the normalized density and flux are available . in the absence of parameters , both are normalized according to the coefficient of the first term in the density . if there are parameters , the common denominators that have been multiplied through are shown . to see the density and flux in standard mathematica notation , type ` rho[x , t ] ` or ` j[x , t ] ` . however ,",
    "type ` pdeform[rho[x , t ] ] ` or ` pdeform[j[x , t ] ] ` to see them in subscript notation .",
    "note that the form of the densities @xmath391 is not unique .",
    "densities can always be integrated by parts to obtain _ equivalent _ forms , modulo total derivatives . in _",
    "version 2.2 , equivalent forms can be obtained via the command ` integrate[rho[x , t],x ] ` .      to test systems that are not in the menu , prepare a data file in the format of our data files .",
    "of course , the name for a new data file should not coincide with any name already listed in the menu , unless you intended to modify those data files .    for the parameterized hirota - satsuma system ( [ hirsatpar ] )",
    "the data file reads :    .... ( * start of data file d_phrsat.m * )    debug = false ;    ( * hirota - satsuma system with one parameter * )    eq[1][x , t]=d[u[1][x , t],t]-aa*d[u[1][x , t],{x,3}]-             6*aa*u[1][x , t]*d[u[1][x , t],x]+6*u[2][x , t]*d[u[2][x , t],x ] ;    eq[2][x , t]=d[u[2][x , t],t]+d[u[2][x , t],{x,3}]+3*u[1][x , t]*d[u[2][x , t],x ] ;    noeqs = 2 ; name = \" hirota - satsuma system ( parameterized ) \" ; parameters = { aa } ; weightpars = { } ;    ( * user can supply the rank of rho and a name for the output file * ) ( * rhorank = 6 ; * ) ( * myfile = \" phrsatr6.o ; * )    ( * user can give the weights of u[1 ] , u[2 ] and partial t * ) ( * weightu[1]=2 ; weightu[2]=2 ; weight[t]=3 ; * )    ( * user can give the form of rho . here , for density of rank 6",
    ": * ) ( * formrho[x , t]={c[1]*u[1][x , t]^3+c[2]*u[1][x , t]*u[2][x , t]^2 +                   c[3]*d[u[1][x , t],x]^2+c[4]*d[u[2][x , t],x]^2 } ; * )    formrho[x , t ] = { } ;    ( * end of data file d_phrsat.m * ) ....    explanation of the lines in the data file : ` debug = false ; ` no trace of internal computations , otherwise , set it _",
    "true_. ` eq[k][x , t ] = ... ; ` give the @xmath71 equation of the system in _ mathematica _ notation .",
    "note that there is no ` = = 0 ` at the end . `",
    "noeqs = 2 ; ` specify the number of equations in the system . `",
    "name = \" hirota - satsuma system ( parameterized ) \" ; ` pick a short name for the system .",
    "the quotes are essential .",
    "` parameters = { aa } ; ` give the list of the parameters in the system .",
    "if there are none , set _",
    "parameters = \\ { } _ . `",
    "weightpars = { } ; ` give the list of the parameters that are assumed to have weights .",
    "note that weighted parameters are _ not _ listed in _ parameters _ , which is the list of parameters without weight .",
    "` ( * rhorank = 6 ; * ) ` optional ; give the desired rank of the density .",
    "useful if you want to work with the program less interactively ( in batch mode ) . `",
    "( * myfile = \" hirsatr6.o ; * ) ` optional ; give a name of the output file .",
    "useful for less interactive use of the program . `",
    "( * weightu[1]=2 ; weightu[2]=2 ; weight[t]=3 ; * ) ` optional ; specify a choice for _ some or all _ of the weights .",
    "the program then skips the computation of the weights , but still checks for consistency .",
    "particularly useful if there are several free weights and non - interactive use is preferred . `",
    "formrho[x , t ] = { } ; ` the program will _ compute _ the form of @xmath391 of the given rank .    ....",
    "formrho[x , t]={c[1]*u[1][x , t]^3+c[2]*u[1][x , t]*u[2][x ,",
    "t]^2 +               c[3]*d[u[1][x , t],x]^2+c[4]*d[u[2][x , t],x]^2 } ; ....    alternatively , one could give a form of @xmath391 ( here for rank 6 ) .",
    "the density must be given in expanded form and with coefficients c[i ] .",
    "the braces are essential .",
    "if @xmath391 is given , the program skips both the computation of the weights and the form of the density .",
    "instead , the code uses what is given and computes the coefficients c[i ] .",
    "this option allows one , for example , to test densities from the literature .",
    "anything within ` ( * ` and ` * ) ` are comments , and ignored by _",
    "mathematica_. once the data file is ready , run it via the choice  `",
    "tt ) your system ` \" in the menu .",
    "our program can handle pdes that can be written as systems of evolution equations .",
    "the evolution equations must be polynomials in the dependent variables ( no integral terms ) .",
    "only two independent variables ( @xmath18 and @xmath21 ) are allowed .",
    "no terms in the evolution equations should _ explicitly _ depend on @xmath18 and @xmath47    theoretically , there is no limit on the number of evolution equations . in practice , for large systems , the computations may take a long time or require a lot of memory .",
    "the computational speed depends primarily on the amount of memory .",
    "the program only computes polynomial conserved densities in the dependent variables and their derivatives , without explicit dependencies on @xmath18 and/or @xmath47    by design , the program constructs only densities that are uniform in rank .",
    "the uniform rank assumption for the monomials in @xmath19 allows one to compute _ independent _ conserved densities piece by piece , without having to split linear combinations of conserved densities . due to the superposition principle ,",
    "a linear combination of conserved densities of unequal rank is still a conserved density .",
    "this situation arises frequently when parameters with weight are introduced in the pdes .",
    "the input systems may have one or more parameters , which are assumed to be nonzero . if a system has parameters , the program will attempt to compute the compatibility conditions for these parameters such that densities ( of a given rank ) exist .",
    "the assumption that all parameters in the given evolution equation must be nonzero is necessary . as a result of setting parameters to zero in a given system of evolution equations , the weights and therefore the rank of @xmath19 might change .    in general , the compatibility conditions for the parameters could be highly nonlinear , and there is no general algorithm to solve them .",
    "the program automatically generates the compatibility conditions , and solves them for parameters that occur linearly ( see section 3.2 ) .",
    "grbner basis techniques could be used to reduce complicated nonlinear systems into equivalent , yet simpler , non - linear systems . for pdes with parameters and",
    "when the system for the coefficients @xmath125 is complicated , the program saves that system and its coefficient matrix , etc .",
    ", in the file _",
    "worklog.m_. independent from the program , the worklog files can later be analyzed with mathematica functions .",
    "the assumption that the evolution equations are uniform in rank is not very restrictive .",
    "if the uniform rank condition is violated , the user can introduce one or more parameters with weights .",
    "this also allows for some flexibility in the form of the densities .",
    "although built up with terms that are uniform in rank , the densities do not have to be uniform in rank with respect to the dependent variables _",
    "alone_. this is illustrated in example 2.2 .",
    "conversely , when the uniform rank condition _ is _ fulfilled , the introduction of extra parameters ( with weights ) in the given pde leads to a linear combination of conservation laws , not to new ones .    in cases where it is not clear",
    "whether or not parameters with weight should be introduced , one should start with parameters without weight .",
    "if this causes incompatibilities in the assignment of weights ( due to non - uniformity ) , the program may provide a suggestion .",
    "quite often , it recommends that one or more parameters be moved from the list of _ parameters _ into the list _ weightpars _ of weighted parameters .    for systems with two or more free weights",
    ", the user will be prompted to enter values for the free weights .",
    "if only one weight is free , the program will automatically compute some choices for the free weight , and eventually continue with the lowest integer or fractional value ( see examples 4.1 and 4.2 ) .",
    "the program selects this value for the free weight ; it is just one choice out of possibly infinitely many .",
    "if the algorithm fails to determine a suitable value , the user will be prompted to enter a value for the free weight .",
    "negative weights are not allowed , except for @xmath392 if @xmath393 the program will give a warning , but continue with the computations .",
    "zero weights are allowed , but at least one of the dependent variables must have positive weight .",
    "the code checks these conditions , and if they are violated the computations are aborted .",
    "note that _ fractional weights _ and densities of _ fractional rank _ are permitted .",
    "our program is a tool in the search of the first half - dozen conservation laws .",
    "an existence proof ( showing that there are indeed infinitely many conservation laws ) must be done analytically , e.g. by explicitly constructing the recursion operator ( kodama , 1985 ; sanders and wang , 1995b , 1996 ) that connects conserved densities , or by computing high - order symmetries with lie symmetry software ( hereman , 1996 ) .",
    "if our program succeeds finding a large set of independent conservation laws , there is a good chance that the system of pdes has infinitely many conserved densities and that the recursion operator could be constructed explicitly .",
    "if the number of conservation laws is 3 or less , most likely the pdes are not integrable , at least not in that coordinate representation .",
    "this section gives a review of other symbolic software for the computation of conserved densities , together with recent developments in this area .",
    "the program * symcd * , written by ito ( 1994 ) , is an improved version of * consd * by ito and kako ( 1985 ) .",
    "both programs are in reduce .",
    "similar to our program , * symcd * uses scaling properties to compute polynomial conserved densities for systems of any number of evolution equations with uniform rank . *",
    "consd * had a limit on the number of evolution equations .",
    "this limitation was removed in * symcd*. evolution equations must be polynomial in the dependent variables and their derivatives , and variables with negative weight are not allowed . with reduce 3.5 on an ibm risc 6000 work station , we tested the version of * symcd * released in 1996 .",
    "our test cases included equations ( [ kdveq ] ) , ( [ boussys2 ] ) , ( [ hirsatpar ] ) , ( [ kdv5par ] ) and ( [ 3ckdv ] ) .    for systems with or without parameters ,",
    "* symcd * gives the same conserved densities as our program ( up to terms that can be converted via integration by parts ) .",
    "however , * symcd * does not properly handle systems with parameters .",
    "it stops after generating the necessary conditions on the parameters , which must be analyzed separately .",
    "such analyses revealed that the conditions do not always lead to a density of fixed rank .",
    "indeed , in solving for the undetermined coefficients , * symcd * considers all possible branches in the solution , irrespective of whether or not these branches lead to a conserved density , as confirmed by ito ( 1996 ) .",
    "another major difference is that parameters with weights are not allowed in * symcd * , which restricts the scope of * symcd * to systems with uniform rank . in conclusion ,",
    "our code is more sophisticated than * symcd * in handling systems with parameters and systems of non - uniform rank . for more information contact ito at ito@puramis.amath.hiroshima-u.ac.jp .",
    "the pc package * delia * for _ differential equations with lie approach _ , developed in the period 1989 - 1991 , is an outgrowth of the * scolar * project by bocharov and bronstein .",
    "* delia * , written in turbo pascal by bocharov ( 1991 ) and coworkers , is a commercial computer algebra system for investigating differential equations using lie s approach .    the program deals with symmetries , conservation laws , integrability and equivalence problems .",
    "it has a special routine for systems of evolution equations , which we used for computing conserved densities .",
    "we tested * delia 1.5.1 * on a pc with intel 486 processor and 16 mb of ram .",
    "our test cases included equations ( [ kdveq ] ) , ( [ boussys2 ] ) , ( [ hirsatpar ] ) , ( [ hirsatpar ] ) with @xmath394 , ( [ kdv5par ] ) with arbitrary @xmath244 @xmath395 and @xmath396 , ( [ longwavesys ] ) and ( [ 3ckdv ] ) .    for ( [ kdveq ] ) and ( [ hirsatpar ] ) with @xmath397",
    "* delia * returned the same densities as the ones listed in this paper , up to terms that differ via integration by parts . with * delia * , one can not compute densities for ( [ boussys2 ] ) , ( [ longwavesys ] ) , and ( [ 3ckdv ] ) .",
    "these systems are out of its class : the program requires second or higher - order spatial derivative terms in all equations . for systems with parameters ,",
    "* delia * does not automatically compute the densities corresponding to the ( necessary ) conditions on the parameters .",
    "one has to use * delia * s integrability test first , which determines conditions based on the existence of formal symmetries",
    ". since these integrability conditions are neither necessary nor sufficient for the existence of conserved densities , one must further analyze the conditions manually .",
    "once the parameters are fixed , one can compute the densities .",
    "for further information we refer to bocharov at alexei@wri.com .",
    "[ [ fs ] ] fs ~~    the reduce program * fs * for `` formal symmetries '' was written by gerdt and zharkov ( 1990 ) .",
    "the code * fs * can be applied to polynomial nonlinear pdes of evolution type , which are linear with respect to the highest - order spatial derivatives and with non - degenerated , diagonal coefficient matrix for the highest derivatives .",
    "the algorithm in * fs * requires that the evolution equation are of order two or higher in the spatial variable .",
    "however , the formal symmetry approach does not require that the evolution equations are uniform in rank .",
    "we tested * fs * with reduce 3.5 on an ibm risc 6000 work station for equations ( [ kdveq ] ) , ( [ boussys2 ] ) , ( [ kdv5par ] ) , ( [ longwavesys ] ) and ( [ 3ckdv ] ) .",
    "we were unable to compute the densities for systems ( [ boussys2 ] ) , ( [ longwavesys ] ) , and ( [ 3ckdv ] ) , since * fs * is not applicable to such systems .",
    "for ( [ kdveq ] ) , * fs * gave the same densities as our program , up to terms that differ via integration by parts .",
    "like * delia * , applied to equations with parameters , * fs * computes the conditions on the parameters using the symmetry approach .",
    "for ( [ kdv5par ] ) , * fs * and * condens.m * gave equivalent sets of compatibility conditions on the parameters .",
    "more information can be obtained from gerdt at gerdt@jinr.dubna.su .",
    "in addition to the available software , several research groups are currently developing software for conserved densities .",
    "sanders and wang at the free university of amsterdam are developing a software package in maple and form to compute both conserved densities and recursion operators ( sanders and roelofs , 1994 ; sanders and wang , 1995a ) .",
    "their approach is more abstract and relies on the implicit function theorem .",
    "in contrast to our algorithm , their code makes no assumptions about the form of the conserved density .",
    "further information can be obtained from sanders at jansa@cs.vu.nl .",
    "wolf ( 1995 ) at the university of london is designing a package in reduce for the computation of conserved densities , which implements two methods .",
    "if the density is of fixed order , then the program constructs it directly .",
    "this method is currently limited to two independent variables . in the second method the characteristic function of the conservation law",
    "is constructed first , and the density and flux are recovered via integration by parts .",
    "there is no limitation on the number of independent variables for this method .",
    "both approaches use wolf s program crack for solving overdetermined systems of pdes .",
    "see hereman ( 1996 ) for a review of crack and for additional references to wolf s work .",
    "algorithm is particularly efficient for showing the non - existence of conservation laws of high order .",
    "in contrast to our program , it also allows one to compute non - polynomial conserved densities . for further information contact wolf at t.wolf@maths.qmw.ac.uk .",
    "ahner , tschantz , and cook at vanderbilt university are working on a similar project in _ mathematica _ ( ahner , 1995 ) .",
    "we have no details about their algorithm or implementation .",
    "contact ahner at ahnerjf@ctrvax.vanderbilt.edu for further information .",
    "hickman ( 1996 ) at the university of canterbury , christchurch , new zealand , has implemented a slight variation of our algorithm in maple . instead of computing the differential monomials in the density by repeated differentiation , hickman uses a tree structure combining the appropriately weighted building blocks . for further information ,",
    "send email to m.hickman@math.canterbury.ac.nz .",
    "a prototype of * condens.m * was used to compute conserved densities of a generalized kdv equation due to schamel ( verheest and hereman , 1995 ) , and a modified vector derivative nls equation ( willox _ et al . _ , 1995 ) .",
    "based on the results obtained with the software , integrability questions for these equations could be answered .",
    "we offer the scientific community a _ mathematica _ package to carry out the tedious calculations of conserved densities for systems of nonlinear evolution equations .",
    "details about the algorithm and its implementation can be found in gkta ( 1996a ) , and gkta and hereman ( 1997 ) .",
    "the code * condens.m * , together with several data and output files , is available via anonymous ftp ( gkta , 1996b ) .",
    "extensions of the algorithm presented in this paper towards pdes with more than one spatial variable , dynamical systems , and systems of differential - difference equations are under development .",
    "further information about extensions can be obtained via email to ugoktas@mines.edu or whereman@mines.edu .",
    "the authors are grateful to f. verheest for many valuable comments and suggestions .",
    "the belgian national fund for scientific research is thanked for a special research grant which made possible the stay of w.h . at the university of ghent , where this work was started .",
    "g appreciates the generous financial aid from the turkish government which supported his studies in part .",
    "v. gerdt , m. hickman , m. ito , j. sanders and t. wolf are thanked for sharing information about their packages .",
    "gkta , . ( 1996a ) .",
    "symbolic computation of conserved densities for systems of nonlinear evolution equations .",
    "thesis , colorado school of mines , golden , co , u.s.a . available in postscript form , condens.ps , at ftp site below .",
    "gkta , . ( 1996b ) .",
    "available via anonymous ftp from mines.edu .",
    "login : anonymous .",
    "password : email address or name .",
    "change to subdirectory pub / papers / math_cs_dept / software / condens .",
    "there is a hot link to the ftp site via the internet url : http://www.mines.edu / fs_home / whereman/.      hereman , w. ( 1996 ) . _",
    "crc handbook of lie group analysis of differential equations , volume 3 : new trends in theoretical developments and computational methods_. chapter 13 , 367413 .",
    "ibragimov , ed . )",
    "boca raton , florida : crc press .",
    "hereman w. , zhuang , w. ( 1995 ) .",
    "symbolic software for soliton theory .",
    "_ acta appl .",
    "_ * 39 * , 361378 . also : _ proc . of kdv 95 conf .",
    "_ , 361378 .",
    "( m. hazewinkel , h.w .",
    "capel , e.m .",
    "de jager , eds . ) dordrecht , the netherlands : kluwer academic publishers .",
    "kruskal , m.d . ,",
    "miura , r.m . ,",
    "gardner , c.s . , zabusky , n.j .",
    "korteweg - de vries equation and generalizations .",
    "v. uniqueness and nonexistence of polynomial conservation laws .",
    "_ j. math .",
    "phys . _ * 11 * , 952960 ."
  ],
  "abstract_text": [
    "<S> a new algorithm for the symbolic computation of polynomial conserved densities for systems of nonlinear evolution equations is presented . </S>",
    "<S> the algorithm is implemented in _ mathematica_. the program * condens.m * automatically carries out the lengthy symbolic computations for the construction of conserved densities . </S>",
    "<S> the code is tested on several well - known partial differential equations from soliton theory . for systems with parameters , * condens.m * can be used to determine the conditions on these parameters so that a sequence of conserved densities might exist . </S>",
    "<S> the existence of a large number of conservation laws is a predictor for integrability of the system .    </S>",
    "<S> latexl-.25em.425ex-.075emtex    [ firstpage ] </S>"
  ]
}